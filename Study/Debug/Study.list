
Study.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018df8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002da4  08018f88  08018f88  00028f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bd2c  0801bd2c  0003025c  2**0
                  CONTENTS
  4 .ARM          00000008  0801bd2c  0801bd2c  0002bd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bd34  0801bd34  0003025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bd34  0801bd34  0002bd34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bd38  0801bd38  0002bd38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0801bd3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003025c  2**0
                  CONTENTS
 10 .bss          0000a52c  2000025c  2000025c  0003025c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000a788  2000a788  0003025c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a6a8  00000000  00000000  000302cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007dc4  00000000  00000000  0005a977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001eb0  00000000  00000000  00062740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017e8  00000000  00000000  000645f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003284d  00000000  00000000  00065dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000359b1  00000000  00000000  00098625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2078  00000000  00000000  000cdfd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000084bc  00000000  00000000  001b0050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  001b850c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000025c 	.word	0x2000025c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018f70 	.word	0x08018f70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000260 	.word	0x20000260
 80001cc:	08018f70 	.word	0x08018f70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f001 f87e 	bl	8001670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f81a 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f8d6 	bl	8000728 <MX_GPIO_Init>
  MX_DMA_Init();
 800057c:	f000 f8ac 	bl	80006d8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000580:	f000 f880 	bl	8000684 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000584:	f016 fd68 	bl	8017058 <MX_USB_DEVICE_Init>
  MX_LWIP_Init();
 8000588:	f007 fd3e 	bl	8008008 <MX_LWIP_Init>
  MX_FATFS_Init();
 800058c:	f007 fcd2 	bl	8007f34 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //__HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
  //__HAL_UART_ENABLE_IT(&huart3,UART_IT_TC);
  HAL_UART_Receive_DMA(&huart3, RX_buff, 15);
 8000590:	220f      	movs	r2, #15
 8000592:	4904      	ldr	r1, [pc, #16]	; (80005a4 <main+0x38>)
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <main+0x3c>)
 8000596:	f005 f871 	bl	800567c <HAL_UART_Receive_DMA>
  //tcp_server_init();
  tcp_client_init();
 800059a:	f000 fd2b 	bl	8000ff4 <tcp_client_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Transmit(&huart3, TX_buff, sizeof(TX_buff),0xFFFF);
	  //HAL_Delay(5000);
	  MX_LWIP_Process();
 800059e:	f007 fe73 	bl	8008288 <MX_LWIP_Process>
 80005a2:	e7fc      	b.n	800059e <main+0x32>
 80005a4:	20000380 	.word	0x20000380
 80005a8:	20000278 	.word	0x20000278

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	; 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f017 fe13 	bl	80181e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <SystemClock_Config+0xd0>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a28      	ldr	r2, [pc, #160]	; (800067c <SystemClock_Config+0xd0>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <SystemClock_Config+0xd0>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <SystemClock_Config+0xd4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a22      	ldr	r2, [pc, #136]	; (8000680 <SystemClock_Config+0xd4>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b20      	ldr	r3, [pc, #128]	; (8000680 <SystemClock_Config+0xd4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800061c:	2319      	movs	r3, #25
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000620:	2390      	movs	r3, #144	; 0x90
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000628:	2303      	movs	r3, #3
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f004 fae3 	bl	8004bfc <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800063c:	f000 f8e8 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2102      	movs	r1, #2
 800065e:	4618      	mov	r0, r3
 8000660:	f004 fd44 	bl	80050ec <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800066a:	f000 f8d1 	bl	8000810 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800066e:	f004 fe23 	bl	80052b8 <HAL_RCC_EnableCSS>
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	; 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 800068a:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <MX_USART3_UART_Init+0x50>)
 800068c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 8000690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000694:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006bc:	f004 ff1d 	bl	80054fa <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006c6:	f000 f8a3 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000278 	.word	0x20000278
 80006d4:	40004800 	.word	0x40004800

080006d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_DMA_Init+0x4c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <MX_DMA_Init+0x4c>)
 80006e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_DMA_Init+0x4c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	200c      	movs	r0, #12
 8000700:	f001 f927 	bl	8001952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000704:	200c      	movs	r0, #12
 8000706:	f001 f940 	bl	800198a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	200e      	movs	r0, #14
 8000710:	f001 f91f 	bl	8001952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000714:	200e      	movs	r0, #14
 8000716:	f001 f938 	bl	800198a <HAL_NVIC_EnableIRQ>

}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b087      	sub	sp, #28
 800072c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a24      	ldr	r2, [pc, #144]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a1d      	ldr	r2, [pc, #116]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_GPIO_Init+0xa0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_GPIO_Init+0xa0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a16      	ldr	r2, [pc, #88]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <MX_GPIO_Init+0xa0>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_GPIO_Init+0xa0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_GPIO_Init+0xa0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <MX_GPIO_Init+0xa0>)
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_GPIO_Init+0xa0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ba:	bf00      	nop
 80007bc:	371c      	adds	r7, #28
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

	if (huart == &huart3)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <HAL_UART_RxCpltCallback+0x34>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d10c      	bne.n	80007f6 <HAL_UART_RxCpltCallback+0x2a>
	{
		HAL_UART_Receive_DMA(&huart3, RX_buff, 2);
 80007dc:	2202      	movs	r2, #2
 80007de:	4909      	ldr	r1, [pc, #36]	; (8000804 <HAL_UART_RxCpltCallback+0x38>)
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <HAL_UART_RxCpltCallback+0x34>)
 80007e2:	f004 ff4b 	bl	800567c <HAL_UART_Receive_DMA>
#ifndef COM_PORT
		byteNum++;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <HAL_UART_RxCpltCallback+0x3c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	3301      	adds	r3, #1
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <HAL_UART_RxCpltCallback+0x3c>)
 80007ee:	6013      	str	r3, [r2, #0]
		wr = 1;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_UART_RxCpltCallback+0x40>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
#endif
	}
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000278 	.word	0x20000278
 8000804:	20000380 	.word	0x20000380
 8000808:	200003a0 	.word	0x200003a0
 800080c:	200003bf 	.word	0x200003bf

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <HAL_MspInit+0x4c>)
 800082c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000830:	6453      	str	r3, [r2, #68]	; 0x44
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <HAL_MspInit+0x4c>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x4c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a50      	ldr	r2, [pc, #320]	; (80009cc <HAL_UART_MspInit+0x160>)
 800088a:	4293      	cmp	r3, r2
 800088c:	f040 809a 	bne.w	80009c4 <HAL_UART_MspInit+0x158>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	4b4e      	ldr	r3, [pc, #312]	; (80009d0 <HAL_UART_MspInit+0x164>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	4a4d      	ldr	r2, [pc, #308]	; (80009d0 <HAL_UART_MspInit+0x164>)
 800089a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800089e:	6413      	str	r3, [r2, #64]	; 0x40
 80008a0:	4b4b      	ldr	r3, [pc, #300]	; (80009d0 <HAL_UART_MspInit+0x164>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <HAL_UART_MspInit+0x164>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	4a46      	ldr	r2, [pc, #280]	; (80009d0 <HAL_UART_MspInit+0x164>)
 80008b6:	f043 0308 	orr.w	r3, r3, #8
 80008ba:	6313      	str	r3, [r2, #48]	; 0x30
 80008bc:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <HAL_UART_MspInit+0x164>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	f003 0308 	and.w	r3, r3, #8
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008da:	2307      	movs	r3, #7
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	483b      	ldr	r0, [pc, #236]	; (80009d4 <HAL_UART_MspInit+0x168>)
 80008e6:	f002 fd6f 	bl	80033c8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80008ea:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <HAL_UART_MspInit+0x16c>)
 80008ec:	4a3b      	ldr	r2, [pc, #236]	; (80009dc <HAL_UART_MspInit+0x170>)
 80008ee:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80008f0:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <HAL_UART_MspInit+0x16c>)
 80008f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008f6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f8:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <HAL_UART_MspInit+0x16c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008fe:	4b36      	ldr	r3, [pc, #216]	; (80009d8 <HAL_UART_MspInit+0x16c>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000904:	4b34      	ldr	r3, [pc, #208]	; (80009d8 <HAL_UART_MspInit+0x16c>)
 8000906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800090a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800090c:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <HAL_UART_MspInit+0x16c>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000912:	4b31      	ldr	r3, [pc, #196]	; (80009d8 <HAL_UART_MspInit+0x16c>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000918:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <HAL_UART_MspInit+0x16c>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800091e:	4b2e      	ldr	r3, [pc, #184]	; (80009d8 <HAL_UART_MspInit+0x16c>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000924:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <HAL_UART_MspInit+0x16c>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800092a:	482b      	ldr	r0, [pc, #172]	; (80009d8 <HAL_UART_MspInit+0x16c>)
 800092c:	f001 f848 	bl	80019c0 <HAL_DMA_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000936:	f7ff ff6b 	bl	8000810 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a26      	ldr	r2, [pc, #152]	; (80009d8 <HAL_UART_MspInit+0x16c>)
 800093e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000940:	4a25      	ldr	r2, [pc, #148]	; (80009d8 <HAL_UART_MspInit+0x16c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <HAL_UART_MspInit+0x174>)
 8000948:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <HAL_UART_MspInit+0x178>)
 800094a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <HAL_UART_MspInit+0x174>)
 800094e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000952:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <HAL_UART_MspInit+0x174>)
 8000956:	2240      	movs	r2, #64	; 0x40
 8000958:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <HAL_UART_MspInit+0x174>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <HAL_UART_MspInit+0x174>)
 8000962:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000966:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <HAL_UART_MspInit+0x174>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <HAL_UART_MspInit+0x174>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <HAL_UART_MspInit+0x174>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <HAL_UART_MspInit+0x174>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <HAL_UART_MspInit+0x174>)
 8000982:	2204      	movs	r2, #4
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_UART_MspInit+0x174>)
 8000988:	2203      	movs	r2, #3
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <HAL_UART_MspInit+0x174>)
 800098e:	2200      	movs	r2, #0
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <HAL_UART_MspInit+0x174>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <HAL_UART_MspInit+0x174>)
 800099a:	f001 f811 	bl	80019c0 <HAL_DMA_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 80009a4:	f7ff ff34 	bl	8000810 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <HAL_UART_MspInit+0x174>)
 80009ac:	639a      	str	r2, [r3, #56]	; 0x38
 80009ae:	4a0c      	ldr	r2, [pc, #48]	; (80009e0 <HAL_UART_MspInit+0x174>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	2027      	movs	r0, #39	; 0x27
 80009ba:	f000 ffca 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009be:	2027      	movs	r0, #39	; 0x27
 80009c0:	f000 ffe3 	bl	800198a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40004800 	.word	0x40004800
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	200002c0 	.word	0x200002c0
 80009dc:	40026028 	.word	0x40026028
 80009e0:	20000320 	.word	0x20000320
 80009e4:	40026058 	.word	0x40026058

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80009ec:	f004 fd6a 	bl	80054c4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f0:	e7fe      	b.n	80009f0 <NMI_Handler+0x8>

080009f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x4>

080009fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a38:	f000 fe6c 	bl	8001714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <DMA1_Stream1_IRQHandler+0x10>)
 8000a46:	f001 f953 	bl	8001cf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200002c0 	.word	0x200002c0

08000a54 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <DMA1_Stream3_IRQHandler+0x10>)
 8000a5a:	f001 f949 	bl	8001cf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000320 	.word	0x20000320

08000a68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <USART3_IRQHandler+0x10>)
 8000a6e:	f004 fe2b 	bl	80056c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  //HAL_UART_Receive_IT(&huart3, RX_buff, sizeof(RX_buff));
  //HAL_UART_Transmit_IT(&huart3, TX_buff_it, sizeof(TX_buff_it));

  /* USER CODE END USART3_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000278 	.word	0x20000278

08000a7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <OTG_FS_IRQHandler+0x10>)
 8000a82:	f002 ff81 	bl	8003988 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20009a54 	.word	0x20009a54

08000a90 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <OTG_HS_IRQHandler+0x10>)
 8000a96:	f002 ff77 	bl	8003988 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20009f38 	.word	0x20009f38

08000aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return 1;
 8000aa8:	2301      	movs	r3, #1
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <_kill>:

int _kill(int pid, int sig)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <_kill+0x20>)
 8000ac0:	2216      	movs	r2, #22
 8000ac2:	601a      	str	r2, [r3, #0]
  return -1;
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	2000a778 	.word	0x2000a778

08000ad8 <_exit>:

void _exit (int status)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ffe5 	bl	8000ab4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000aea:	e7fe      	b.n	8000aea <_exit+0x12>

08000aec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e00a      	b.n	8000b14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000afe:	f3af 8000 	nop.w
 8000b02:	4601      	mov	r1, r0
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	60ba      	str	r2, [r7, #8]
 8000b0a:	b2ca      	uxtb	r2, r1
 8000b0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf0      	blt.n	8000afe <_read+0x12>
  }

  return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	e009      	b.n	8000b4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbf1      	blt.n	8000b38 <_write+0x12>
  }
  return len;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_close>:

int _close(int file)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b86:	605a      	str	r2, [r3, #4]
  return 0;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <_isatty>:

int _isatty(int file)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d205      	bcs.n	8000c04 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <_sbrk+0x6c>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a06      	ldr	r2, [pc, #24]	; (8000c2c <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	371c      	adds	r7, #28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	20020000 	.word	0x20020000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	200003a4 	.word	0x200003a4
 8000c30:	2000a788 	.word	0x2000a788
 8000c34:	2000a778 	.word	0x2000a778

08000c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <tcp_client_send>:
static void tcp_client_connectin_close(struct tcp_pcb *newpcb, struct tcp_client_struct *es);
static void tcp_client_handler(struct tcp_pcb *newpcb, struct tcp_client_struct *es);
static void input_config_data();

static void tcp_client_send(struct tcp_pcb *newpcb, struct tcp_client_struct *es)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	struct pbuf *ptrBuf;
	err_t wr_err = ERR_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	75fb      	strb	r3, [r7, #23]


	while ((wr_err == ERR_OK) && (es->p != NULL) && (es->p->len <= newpcb->snd_buf))
 8000c6a:	e02d      	b.n	8000cc8 <tcp_client_send+0x6c>
	{
		ptrBuf = es->p;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	613b      	str	r3, [r7, #16]

		wr_err = tcp_write(newpcb, ptrBuf->payload, ptrBuf->len, TCP_WRITE_FLAG_COPY);
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	6859      	ldr	r1, [r3, #4]
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	895a      	ldrh	r2, [r3, #10]
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f011 fec3 	bl	8012a08 <tcp_write>
 8000c82:	4603      	mov	r3, r0
 8000c84:	75fb      	strb	r3, [r7, #23]

		if (wr_err == ERR_OK)
 8000c86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d11c      	bne.n	8000cc8 <tcp_client_send+0x6c>
		{
			u16_t len;
			int cnt;

			len = ptrBuf->len;
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	895b      	ldrh	r3, [r3, #10]
 8000c92:	81fb      	strh	r3, [r7, #14]

			es->p = ptrBuf->next;
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	605a      	str	r2, [r3, #4]

			if (es->p != NULL)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d004      	beq.n	8000cae <tcp_client_send+0x52>
			{
				pbuf_ref(es->p);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f00d fa5d 	bl	800e168 <pbuf_ref>

			}

			do
			{
				cnt = pbuf_free(ptrBuf);
 8000cae:	6938      	ldr	r0, [r7, #16]
 8000cb0:	f00d f9ba 	bl	800e028 <pbuf_free>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60bb      	str	r3, [r7, #8]

			}
			while(cnt == 0);
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f7      	beq.n	8000cae <tcp_client_send+0x52>

			tcp_recved(newpcb, len);
 8000cbe:	89fb      	ldrh	r3, [r7, #14]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f00d ff9e 	bl	800ec04 <tcp_recved>
	while ((wr_err == ERR_OK) && (es->p != NULL) && (es->p->len <= newpcb->snd_buf))
 8000cc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10b      	bne.n	8000ce8 <tcp_client_send+0x8c>
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d007      	beq.n	8000ce8 <tcp_client_send+0x8c>
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	895a      	ldrh	r2, [r3, #10]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d9c1      	bls.n	8000c6c <tcp_client_send+0x10>

		}

	}

}
 8000ce8:	bf00      	nop
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <tcp_client_handler>:

static void tcp_client_handler(struct tcp_pcb *newpcb, struct tcp_client_struct *es)
{
 8000cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cf4:	b085      	sub	sp, #20
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	6039      	str	r1, [r7, #0]
 8000cfc:	466b      	mov	r3, sp
 8000cfe:	461e      	mov	r6, r3
	//struct tcp_client_struct *esTX;

	char bufRX[es->p->len];
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	8959      	ldrh	r1, [r3, #10]
 8000d06:	460b      	mov	r3, r1
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	b28b      	uxth	r3, r1
 8000d0e:	2200      	movs	r2, #0
 8000d10:	4698      	mov	r8, r3
 8000d12:	4691      	mov	r9, r2
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d20:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d24:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d28:	b28b      	uxth	r3, r1
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	461c      	mov	r4, r3
 8000d2e:	4615      	mov	r5, r2
 8000d30:	f04f 0200 	mov.w	r2, #0
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	00eb      	lsls	r3, r5, #3
 8000d3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d3e:	00e2      	lsls	r2, r4, #3
 8000d40:	460b      	mov	r3, r1
 8000d42:	3307      	adds	r3, #7
 8000d44:	08db      	lsrs	r3, r3, #3
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	ebad 0d03 	sub.w	sp, sp, r3
 8000d4c:	466b      	mov	r3, sp
 8000d4e:	3300      	adds	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]

	memset((void *)bufRX,'\0', es->p->len);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	895b      	ldrh	r3, [r3, #10]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	68b8      	ldr	r0, [r7, #8]
 8000d5e:	f017 fa42 	bl	80181e6 <memset>

	strncpy (bufRX, es->p->payload, es->p->len);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	6859      	ldr	r1, [r3, #4]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	895b      	ldrh	r3, [r3, #10]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68b8      	ldr	r0, [r7, #8]
 8000d72:	f017 fa40 	bl	80181f6 <strncpy>

	strncpy (tcpRX, es->p->payload, es->p->len);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	6859      	ldr	r1, [r3, #4]
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	895b      	ldrh	r3, [r3, #10]
 8000d82:	461a      	mov	r2, r3
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <tcp_client_handler+0xbc>)
 8000d86:	f017 fa36 	bl	80181f6 <strncpy>

	HAL_UART_Transmit_DMA(&huart3, bufRX, es->p->len);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	895b      	ldrh	r3, [r3, #10]
 8000d90:	461a      	mov	r2, r3
 8000d92:	68b9      	ldr	r1, [r7, #8]
 8000d94:	4806      	ldr	r0, [pc, #24]	; (8000db0 <tcp_client_handler+0xc0>)
 8000d96:	f004 fc01 	bl	800559c <HAL_UART_Transmit_DMA>

	//tcp_client_send(newpcb, es);

	//pbuf_free(es->p);

	esBuff = es;
 8000d9a:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <tcp_client_handler+0xc4>)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	46b5      	mov	sp, r6




}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dac:	200003b0 	.word	0x200003b0
 8000db0:	20000278 	.word	0x20000278
 8000db4:	200003c4 	.word	0x200003c4

08000db8 <tcp_client_connectin_close>:

static void tcp_client_connectin_close(struct tcp_pcb *newpcb, struct tcp_client_struct *es)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]

	tcp_arg(newpcb, NULL);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f00e fef5 	bl	800fbb4 <tcp_arg>
	tcp_recv(newpcb, NULL);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f00e ff03 	bl	800fbd8 <tcp_recv>
	tcp_sent(newpcb, NULL);
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f00e ff21 	bl	800fc1c <tcp_sent>
	tcp_poll(newpcb, NULL, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f00e ff60 	bl	800fca4 <tcp_poll>
	tcp_err(newpcb, NULL);
 8000de4:	2100      	movs	r1, #0
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f00e ff3a 	bl	800fc60 <tcp_err>

	mem_free(es);
 8000dec:	6838      	ldr	r0, [r7, #0]
 8000dee:	f00b ff3f 	bl	800cc70 <mem_free>

	tcp_close(newpcb);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f00d fdb6 	bl	800e964 <tcp_close>

}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <input_config_data>:

static void input_config_data(struct entry_struct *newEntry, char *msg, int msgSize, int del, const int byteN)
{
 8000e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e04:	b08c      	sub	sp, #48	; 0x30
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	466b      	mov	r3, sp
 8000e12:	469a      	mov	sl, r3

	char NumStr = newEntry->NumStr;//REMOTE_IP_ADDRESS{Num = 0,Num = 1,Num = 2,Num = 3}, one Num of REMOTE_IP_ADDRESS is three strCnt of UserRxBufferFS
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	77bb      	strb	r3, [r7, #30]
	char NumColum = newEntry->NumColum;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	785b      	ldrb	r3, [r3, #1]
 8000e1e:	777b      	strb	r3, [r7, #29]
	uint8_t *pStore = newEntry->pstore;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c

	int Num = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
	int strCntRX = 0;//UserRxBufferFS{strCnt = 0,strCnt = 1,strCnt = 2,strCnt = 3,strCnt = ...}
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
	char ipBuffchr[NumColum];
 8000e2e:	7f7e      	ldrb	r6, [r7, #29]
 8000e30:	4633      	mov	r3, r6
 8000e32:	3b01      	subs	r3, #1
 8000e34:	61bb      	str	r3, [r7, #24]
 8000e36:	b2f3      	uxtb	r3, r6
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4698      	mov	r8, r3
 8000e3c:	4691      	mov	r9, r2
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e52:	b2f3      	uxtb	r3, r6
 8000e54:	2200      	movs	r2, #0
 8000e56:	461c      	mov	r4, r3
 8000e58:	4615      	mov	r5, r2
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	00eb      	lsls	r3, r5, #3
 8000e64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e68:	00e2      	lsls	r2, r4, #3
 8000e6a:	4633      	mov	r3, r6
 8000e6c:	3307      	adds	r3, #7
 8000e6e:	08db      	lsrs	r3, r3, #3
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	ebad 0d03 	sub.w	sp, sp, r3
 8000e76:	466b      	mov	r3, sp
 8000e78:	3300      	adds	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
	int ipBuffint = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
	int strCntBuff = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]

	memset(pStore, '\0', NumStr);
 8000e84:	7fbb      	ldrb	r3, [r7, #30]
 8000e86:	461a      	mov	r2, r3
 8000e88:	2100      	movs	r1, #0
 8000e8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e8c:	f017 f9ab 	bl	80181e6 <memset>
	memset(ipBuffchr, '\0', NumColum);
 8000e90:	7f7b      	ldrb	r3, [r7, #29]
 8000e92:	461a      	mov	r2, r3
 8000e94:	2100      	movs	r1, #0
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	f017 f9a5 	bl	80181e6 <memset>

	HAL_Delay(del*1000);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fc54 	bl	8001754 <HAL_Delay>

#ifdef COM_PORT
	CDC_Transmit_FS((uint8_t *)msg, (uint16_t)msgSize);
#else
	HAL_UART_Transmit_DMA(&huart3, (uint8_t *)msg, (uint16_t)msgSize);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	484b      	ldr	r0, [pc, #300]	; (8000fe4 <input_config_data+0x1e4>)
 8000eb6:	f004 fb71 	bl	800559c <HAL_UART_Transmit_DMA>
#endif

	while (byteNum < byteN + 1)
 8000eba:	bf00      	nop
 8000ebc:	4b4a      	ldr	r3, [pc, #296]	; (8000fe8 <input_config_data+0x1e8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	dafa      	bge.n	8000ebc <input_config_data+0xbc>
	{
		;
	}

	if (wr)
 8000ec6:	4b49      	ldr	r3, [pc, #292]	; (8000fec <input_config_data+0x1ec>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 8084 	beq.w	8000fd8 <input_config_data+0x1d8>
	{
		while (Num < NumStr)
 8000ed0:	e054      	b.n	8000f7c <input_config_data+0x17c>
#endif
			{
#ifdef COM_PORT
				ipBuffchr[strCntBuff] = (char)UserRxBufferFS[strCntRX];
#else
				ipBuffchr[strCntBuff] = (char)RX_buff[strCntRX];
 8000ed2:	4a47      	ldr	r2, [pc, #284]	; (8000ff0 <input_config_data+0x1f0>)
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	4413      	add	r3, r2
 8000ed8:	7819      	ldrb	r1, [r3, #0]
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	6a3b      	ldr	r3, [r7, #32]
 8000ede:	4413      	add	r3, r2
 8000ee0:	460a      	mov	r2, r1
 8000ee2:	701a      	strb	r2, [r3, #0]
#endif

				strCntRX++;
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
				strCntBuff++;
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	3301      	adds	r3, #1
 8000eee:	623b      	str	r3, [r7, #32]
				while ((char)RX_buff[strCntRX] != '.' & (char)RX_buff[strCntRX] != '\0' )
 8000ef0:	4a3f      	ldr	r2, [pc, #252]	; (8000ff0 <input_config_data+0x1f0>)
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8000efa:	bf14      	ite	ne
 8000efc:	2301      	movne	r3, #1
 8000efe:	2300      	moveq	r3, #0
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	493b      	ldr	r1, [pc, #236]	; (8000ff0 <input_config_data+0x1f0>)
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	440b      	add	r3, r1
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	bf14      	ite	ne
 8000f0e:	2301      	movne	r3, #1
 8000f10:	2300      	moveq	r3, #0
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	4013      	ands	r3, r2
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1da      	bne.n	8000ed2 <input_config_data+0xd2>
			}

			strCntBuff = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
			strCntRX++;
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	3301      	adds	r3, #1
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24


			for (char n = 0;n < NumColum;n++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	77fb      	strb	r3, [r7, #31]
 8000f2a:	e00c      	b.n	8000f46 <input_config_data+0x146>
			{
				ipBuffint |= (ipBuffchr[n] << 8*n);
 8000f2c:	7ffb      	ldrb	r3, [r7, #31]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	5cd3      	ldrb	r3, [r2, r3]
 8000f32:	461a      	mov	r2, r3
 8000f34:	7ffb      	ldrb	r3, [r7, #31]
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	409a      	lsls	r2, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
			for (char n = 0;n < NumColum;n++)
 8000f40:	7ffb      	ldrb	r3, [r7, #31]
 8000f42:	3301      	adds	r3, #1
 8000f44:	77fb      	strb	r3, [r7, #31]
 8000f46:	7ffa      	ldrb	r2, [r7, #31]
 8000f48:	7f7b      	ldrb	r3, [r7, #29]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d3ee      	bcc.n	8000f2c <input_config_data+0x12c>


			}

			*pStore = atoi((char *)&ipBuffint);
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	4618      	mov	r0, r3
 8000f54:	f016 ff52 	bl	8017dfc <atoi>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f5e:	701a      	strb	r2, [r3, #0]

			pStore++;
 8000f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f62:	3301      	adds	r3, #1
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
			Num++;
 8000f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f68:	3301      	adds	r3, #1
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28

			memset(ipBuffchr, '\0', sizeof(ipBuffchr));
 8000f6c:	4633      	mov	r3, r6
 8000f6e:	461a      	mov	r2, r3
 8000f70:	2100      	movs	r1, #0
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f017 f937 	bl	80181e6 <memset>
			ipBuffint = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
		while (Num < NumStr)
 8000f7c:	7fbb      	ldrb	r3, [r7, #30]
 8000f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dbb5      	blt.n	8000ef0 <input_config_data+0xf0>
		}

		wr = 0;
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <input_config_data+0x1ec>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
		UserRxBufferFS[strCntRX-1] = '\n';
		UserRxBufferFS[strCntRX] = '\r';
		CDC_Transmit_FS((uint8_t *)UserRxBufferFS, (uint16_t) (strCntRX+2));
		memset(UserRxBufferFS, '\0', sizeof(UserRxBufferFS));
#else
		RX_buff[strCntRX-1] = '\n';
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <input_config_data+0x1f0>)
 8000f90:	210a      	movs	r1, #10
 8000f92:	54d1      	strb	r1, [r2, r3]
		RX_buff[strCntRX] = '\r';
 8000f94:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <input_config_data+0x1f0>)
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	4413      	add	r3, r2
 8000f9a:	220d      	movs	r2, #13
 8000f9c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart3, (uint8_t *)RX_buff, (uint16_t) (strCntRX+2));
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4911      	ldr	r1, [pc, #68]	; (8000ff0 <input_config_data+0x1f0>)
 8000faa:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <input_config_data+0x1e4>)
 8000fac:	f004 faf6 	bl	800559c <HAL_UART_Transmit_DMA>
		HAL_Delay(10);
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f000 fbcf 	bl	8001754 <HAL_Delay>
		memset(RX_buff, '\0', sizeof(RX_buff));
 8000fb6:	221e      	movs	r2, #30
 8000fb8:	2100      	movs	r1, #0
 8000fba:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <input_config_data+0x1f0>)
 8000fbc:	f017 f913 	bl	80181e6 <memset>
#endif

		memset(pStore, '\0', NumStr);
 8000fc0:	7fbb      	ldrb	r3, [r7, #30]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fc8:	f017 f90d 	bl	80181e6 <memset>
		memset(ipBuffchr, '\0', NumColum);
 8000fcc:	7f7b      	ldrb	r3, [r7, #29]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	6978      	ldr	r0, [r7, #20]
 8000fd4:	f017 f907 	bl	80181e6 <memset>
 8000fd8:	46d5      	mov	sp, sl

	}
}
 8000fda:	bf00      	nop
 8000fdc:	3730      	adds	r7, #48	; 0x30
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe4:	20000278 	.word	0x20000278
 8000fe8:	200003a0 	.word	0x200003a0
 8000fec:	200003bf 	.word	0x200003bf
 8000ff0:	20000380 	.word	0x20000380

08000ff4 <tcp_client_init>:




void tcp_client_init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af02      	add	r7, sp, #8
	err_t ret_err;
	entry = (struct entry_struct *) mem_malloc(sizeof(struct entry_struct *));
 8000ffa:	2004      	movs	r0, #4
 8000ffc:	f00b ff9e 	bl	800cf3c <mem_malloc>
 8001000:	4603      	mov	r3, r0
 8001002:	4a49      	ldr	r2, [pc, #292]	; (8001128 <tcp_client_init+0x134>)
 8001004:	6013      	str	r3, [r2, #0]



	entry->NumColum = 3;
 8001006:	4b48      	ldr	r3, [pc, #288]	; (8001128 <tcp_client_init+0x134>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2203      	movs	r2, #3
 800100c:	705a      	strb	r2, [r3, #1]
	entry->NumStr = (char)sizeof(REMOTE_IP_ADDRESS);
 800100e:	4b46      	ldr	r3, [pc, #280]	; (8001128 <tcp_client_init+0x134>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2204      	movs	r2, #4
 8001014:	701a      	strb	r2, [r3, #0]
	entry->pstore = (uint8_t *)&REMOTE_IP_ADDRESS;
 8001016:	4b44      	ldr	r3, [pc, #272]	; (8001128 <tcp_client_init+0x134>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a44      	ldr	r2, [pc, #272]	; (800112c <tcp_client_init+0x138>)
 800101c:	605a      	str	r2, [r3, #4]


	input_config_data(entry, (char *)"Enter IP address: ", strlen("Enter IP address: "), 7, byteNum);
 800101e:	4b42      	ldr	r3, [pc, #264]	; (8001128 <tcp_client_init+0x134>)
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	4b43      	ldr	r3, [pc, #268]	; (8001130 <tcp_client_init+0x13c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2307      	movs	r3, #7
 800102a:	2212      	movs	r2, #18
 800102c:	4941      	ldr	r1, [pc, #260]	; (8001134 <tcp_client_init+0x140>)
 800102e:	f7ff fee7 	bl	8000e00 <input_config_data>



	IP4_ADDR(&remote_ipaddr, REMOTE_IP_ADDRESS[0], REMOTE_IP_ADDRESS[1], REMOTE_IP_ADDRESS[2], REMOTE_IP_ADDRESS[3]);
 8001032:	4b3e      	ldr	r3, [pc, #248]	; (800112c <tcp_client_init+0x138>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	061a      	lsls	r2, r3, #24
 8001038:	4b3c      	ldr	r3, [pc, #240]	; (800112c <tcp_client_init+0x138>)
 800103a:	785b      	ldrb	r3, [r3, #1]
 800103c:	041b      	lsls	r3, r3, #16
 800103e:	431a      	orrs	r2, r3
 8001040:	4b3a      	ldr	r3, [pc, #232]	; (800112c <tcp_client_init+0x138>)
 8001042:	789b      	ldrb	r3, [r3, #2]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	4313      	orrs	r3, r2
 8001048:	4a38      	ldr	r2, [pc, #224]	; (800112c <tcp_client_init+0x138>)
 800104a:	78d2      	ldrb	r2, [r2, #3]
 800104c:	4313      	orrs	r3, r2
 800104e:	061a      	lsls	r2, r3, #24
 8001050:	4b36      	ldr	r3, [pc, #216]	; (800112c <tcp_client_init+0x138>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	0619      	lsls	r1, r3, #24
 8001056:	4b35      	ldr	r3, [pc, #212]	; (800112c <tcp_client_init+0x138>)
 8001058:	785b      	ldrb	r3, [r3, #1]
 800105a:	041b      	lsls	r3, r3, #16
 800105c:	4319      	orrs	r1, r3
 800105e:	4b33      	ldr	r3, [pc, #204]	; (800112c <tcp_client_init+0x138>)
 8001060:	789b      	ldrb	r3, [r3, #2]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	430b      	orrs	r3, r1
 8001066:	4931      	ldr	r1, [pc, #196]	; (800112c <tcp_client_init+0x138>)
 8001068:	78c9      	ldrb	r1, [r1, #3]
 800106a:	430b      	orrs	r3, r1
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001072:	431a      	orrs	r2, r3
 8001074:	4b2d      	ldr	r3, [pc, #180]	; (800112c <tcp_client_init+0x138>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	0619      	lsls	r1, r3, #24
 800107a:	4b2c      	ldr	r3, [pc, #176]	; (800112c <tcp_client_init+0x138>)
 800107c:	785b      	ldrb	r3, [r3, #1]
 800107e:	041b      	lsls	r3, r3, #16
 8001080:	4319      	orrs	r1, r3
 8001082:	4b2a      	ldr	r3, [pc, #168]	; (800112c <tcp_client_init+0x138>)
 8001084:	789b      	ldrb	r3, [r3, #2]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	430b      	orrs	r3, r1
 800108a:	4928      	ldr	r1, [pc, #160]	; (800112c <tcp_client_init+0x138>)
 800108c:	78c9      	ldrb	r1, [r1, #3]
 800108e:	430b      	orrs	r3, r1
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001096:	431a      	orrs	r2, r3
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <tcp_client_init+0x138>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	0619      	lsls	r1, r3, #24
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <tcp_client_init+0x138>)
 80010a0:	785b      	ldrb	r3, [r3, #1]
 80010a2:	041b      	lsls	r3, r3, #16
 80010a4:	4319      	orrs	r1, r3
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <tcp_client_init+0x138>)
 80010a8:	789b      	ldrb	r3, [r3, #2]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	430b      	orrs	r3, r1
 80010ae:	491f      	ldr	r1, [pc, #124]	; (800112c <tcp_client_init+0x138>)
 80010b0:	78c9      	ldrb	r1, [r1, #3]
 80010b2:	430b      	orrs	r3, r1
 80010b4:	0e1b      	lsrs	r3, r3, #24
 80010b6:	4313      	orrs	r3, r2
 80010b8:	4a1f      	ldr	r2, [pc, #124]	; (8001138 <tcp_client_init+0x144>)
 80010ba:	6013      	str	r3, [r2, #0]

	entry->NumColum = 2;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <tcp_client_init+0x134>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2202      	movs	r2, #2
 80010c2:	705a      	strb	r2, [r3, #1]
	entry->NumStr = (char)sizeof(REMOTE_PORT);
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <tcp_client_init+0x134>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
	entry->pstore = (uint8_t *)&REMOTE_PORT;
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <tcp_client_init+0x134>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a1a      	ldr	r2, [pc, #104]	; (800113c <tcp_client_init+0x148>)
 80010d2:	605a      	str	r2, [r3, #4]

	input_config_data(entry, (char *)"Enter PORT: ", strlen("Enter PORT: "), 1, byteNum);
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <tcp_client_init+0x134>)
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <tcp_client_init+0x13c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	220c      	movs	r2, #12
 80010e2:	4917      	ldr	r1, [pc, #92]	; (8001140 <tcp_client_init+0x14c>)
 80010e4:	f7ff fe8c 	bl	8000e00 <input_config_data>

	cppcb = tcp_new();
 80010e8:	f00e fd5c 	bl	800fba4 <tcp_new>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <tcp_client_init+0x150>)
 80010f0:	6013      	str	r3, [r2, #0]

	if (cppcb != NULL)
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <tcp_client_init+0x150>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00b      	beq.n	8001112 <tcp_client_init+0x11e>
	{
		ret_err = tcp_connect(cppcb, &remote_ipaddr, REMOTE_PORT[0], tcp_client_connect);
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <tcp_client_init+0x150>)
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <tcp_client_init+0x148>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <tcp_client_init+0x154>)
 8001106:	490c      	ldr	r1, [pc, #48]	; (8001138 <tcp_client_init+0x144>)
 8001108:	f00d fe12 	bl	800ed30 <tcp_connect>
 800110c:	4603      	mov	r3, r0
 800110e:	71fb      	strb	r3, [r7, #7]
	else
	{
		memp_free(MEMP_TCP_PCB, cppcb);

	}
}
 8001110:	e005      	b.n	800111e <tcp_client_init+0x12a>
		memp_free(MEMP_TCP_PCB, cppcb);
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <tcp_client_init+0x150>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4619      	mov	r1, r3
 8001118:	2001      	movs	r0, #1
 800111a:	f00c f90f 	bl	800d33c <memp_free>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200003c0 	.word	0x200003c0
 800112c:	200003a8 	.word	0x200003a8
 8001130:	200003a0 	.word	0x200003a0
 8001134:	08018f88 	.word	0x08018f88
 8001138:	200003cc 	.word	0x200003cc
 800113c:	200003ac 	.word	0x200003ac
 8001140:	08018f9c 	.word	0x08018f9c
 8001144:	200003c8 	.word	0x200003c8
 8001148:	0800114d 	.word	0x0800114d

0800114c <tcp_client_connect>:

static err_t tcp_client_connect(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	4613      	mov	r3, r2
 8001158:	71fb      	strb	r3, [r7, #7]
	err_t ret_err;

	struct tcp_client_struct *es;

	es = (struct tcp_client_struct *)memp_malloc(sizeof(struct tcp_client_struct *));
 800115a:	2004      	movs	r0, #4
 800115c:	f00c f87e 	bl	800d25c <memp_malloc>
 8001160:	6138      	str	r0, [r7, #16]

//	es = (struct tcp_client_struct *)arg;

	if (es != NULL)
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d01f      	beq.n	80011a8 <tcp_client_connect+0x5c>
	{

		es->p = NULL;
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
		es->pcb = newpcb;
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	609a      	str	r2, [r3, #8]
		es->state = ES_C_CONNECT;
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]

		//*pwr = 1;

		tcp_arg(newpcb, es);
 800117a:	6939      	ldr	r1, [r7, #16]
 800117c:	68b8      	ldr	r0, [r7, #8]
 800117e:	f00e fd19 	bl	800fbb4 <tcp_arg>

		tcp_recv(newpcb, tcp_client_recive);
 8001182:	490f      	ldr	r1, [pc, #60]	; (80011c0 <tcp_client_connect+0x74>)
 8001184:	68b8      	ldr	r0, [r7, #8]
 8001186:	f00e fd27 	bl	800fbd8 <tcp_recv>

		tcp_err(newpcb, tcp_client_err);
 800118a:	490e      	ldr	r1, [pc, #56]	; (80011c4 <tcp_client_connect+0x78>)
 800118c:	68b8      	ldr	r0, [r7, #8]
 800118e:	f00e fd67 	bl	800fc60 <tcp_err>

		tcp_poll(newpcb, tcp_client_poll, 5);
 8001192:	2205      	movs	r2, #5
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <tcp_client_connect+0x7c>)
 8001196:	68b8      	ldr	r0, [r7, #8]
 8001198:	f00e fd84 	bl	800fca4 <tcp_poll>

		esBuff = es;
 800119c:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <tcp_client_connect+0x80>)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	6013      	str	r3, [r2, #0]

		ret_err = ERR_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	75fb      	strb	r3, [r7, #23]
 80011a6:	e005      	b.n	80011b4 <tcp_client_connect+0x68>

	}
	else
	{

		tcp_client_connectin_close(newpcb, es);
 80011a8:	6939      	ldr	r1, [r7, #16]
 80011aa:	68b8      	ldr	r0, [r7, #8]
 80011ac:	f7ff fe04 	bl	8000db8 <tcp_client_connectin_close>

		ret_err = ERR_MEM;
 80011b0:	23ff      	movs	r3, #255	; 0xff
 80011b2:	75fb      	strb	r3, [r7, #23]
	}

	return ret_err;
 80011b4:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	080011d1 	.word	0x080011d1
 80011c4:	0800133d 	.word	0x0800133d
 80011c8:	0800127d 	.word	0x0800127d
 80011cc:	200003c4 	.word	0x200003c4

080011d0 <tcp_client_recive>:
	return ret_err;

}

static err_t tcp_client_recive(void *arg, struct tcp_pcb *newpcb, struct pbuf *p, err_t err)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	70fb      	strb	r3, [r7, #3]
	err_t ret_err;
	struct tcp_client_struct *es;

	es = (struct tcp_client_struct *)arg;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	613b      	str	r3, [r7, #16]

	if (es == NULL)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10d      	bne.n	8001204 <tcp_client_recive+0x34>
	{
		es->state = ES_C_CLOSE;
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	2204      	movs	r2, #4
 80011ec:	701a      	strb	r2, [r3, #0]
		if (es->p == NULL)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d103      	bne.n	80011fe <tcp_client_recive+0x2e>
		{
			tcp_client_connectin_close(newpcb, es);
 80011f6:	6939      	ldr	r1, [r7, #16]
 80011f8:	68b8      	ldr	r0, [r7, #8]
 80011fa:	f7ff fddd 	bl	8000db8 <tcp_client_connectin_close>

		}

		ret_err = ERR_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	75fb      	strb	r3, [r7, #23]
 8001202:	e034      	b.n	800126e <tcp_client_recive+0x9e>
	}
	else if (err != ERR_OK)
 8001204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d007      	beq.n	800121c <tcp_client_recive+0x4c>
	{
		ret_err = err;
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	75fb      	strb	r3, [r7, #23]

		pbuf_free(es->p);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	4618      	mov	r0, r3
 8001216:	f00c ff07 	bl	800e028 <pbuf_free>
 800121a:	e028      	b.n	800126e <tcp_client_recive+0x9e>

	}
	else
	{
		switch (es->state)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d002      	beq.n	800122a <tcp_client_recive+0x5a>
 8001224:	2b04      	cmp	r3, #4
 8001226:	d013      	beq.n	8001250 <tcp_client_recive+0x80>
				pbuf_free(p);

				break;

			default:
				break;
 8001228:	e021      	b.n	800126e <tcp_client_recive+0x9e>
				es->p = p;
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	605a      	str	r2, [r3, #4]
				tcp_recved(newpcb, p->tot_len);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	891b      	ldrh	r3, [r3, #8]
 8001234:	4619      	mov	r1, r3
 8001236:	68b8      	ldr	r0, [r7, #8]
 8001238:	f00d fce4 	bl	800ec04 <tcp_recved>
				tcp_client_handler(newpcb, es);
 800123c:	6939      	ldr	r1, [r7, #16]
 800123e:	68b8      	ldr	r0, [r7, #8]
 8001240:	f7ff fd56 	bl	8000cf0 <tcp_client_handler>
				pbuf_free(p);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f00c feef 	bl	800e028 <pbuf_free>
				ret_err = ERR_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	75fb      	strb	r3, [r7, #23]
				break;
 800124e:	e00e      	b.n	800126e <tcp_client_recive+0x9e>
				tcp_recved(newpcb, p->tot_len);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	891b      	ldrh	r3, [r3, #8]
 8001254:	4619      	mov	r1, r3
 8001256:	68b8      	ldr	r0, [r7, #8]
 8001258:	f00d fcd4 	bl	800ec04 <tcp_recved>
				pbuf_free(es->p);
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4618      	mov	r0, r3
 8001262:	f00c fee1 	bl	800e028 <pbuf_free>
				pbuf_free(p);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f00c fede 	bl	800e028 <pbuf_free>
				break;
 800126c:	bf00      	nop

	}



	return ret_err;
 800126e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <tcp_client_poll>:



static err_t tcp_client_poll(void *arg, struct tcp_pcb *newpcb)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
	struct tcp_client_struct *es;

	struct tcp_client_struct *esTX;

	es = (struct tcp_client_struct *) arg;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]


	if (es != NULL)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d04a      	beq.n	8001326 <tcp_client_poll+0xaa>
	{
		if (wr == 1)
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <tcp_client_poll+0xb4>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d12c      	bne.n	80012f2 <tcp_client_poll+0x76>
		{
			esTX = es;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	60bb      	str	r3, [r7, #8]

			//esTX->p = es->p;

			esTX->p = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct tcp_client_struct), PBUF_POOL);
 800129c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80012a0:	210c      	movs	r1, #12
 80012a2:	2036      	movs	r0, #54	; 0x36
 80012a4:	f00c fbdc 	bl	800da60 <pbuf_alloc>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	605a      	str	r2, [r3, #4]

			esTX->p->payload = (void *)"Hello from Client\n\r";
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4a20      	ldr	r2, [pc, #128]	; (8001334 <tcp_client_poll+0xb8>)
 80012b4:	605a      	str	r2, [r3, #4]

			esTX->p->len = sizeof("Hello from Client\n\r");
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2214      	movs	r2, #20
 80012bc:	815a      	strh	r2, [r3, #10]

			esTX->p->tot_len = esTX->p->tot_len - esTX->p->len + sizeof("Hello from Client\n\r");
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	891a      	ldrh	r2, [r3, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	895b      	ldrh	r3, [r3, #10]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	3214      	adds	r2, #20
 80012d4:	b292      	uxth	r2, r2
 80012d6:	811a      	strh	r2, [r3, #8]
			//tcp_sent(newpcb, tcp_client_sent);

			tcp_client_send(newpcb, esTX);
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	6838      	ldr	r0, [r7, #0]
 80012dc:	f7ff fcbe 	bl	8000c5c <tcp_client_send>

			pbuf_free(esTX->p);
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f00c fe9f 	bl	800e028 <pbuf_free>

			esTX->p = NULL;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	e014      	b.n	800131c <tcp_client_poll+0xa0>

		}
		else if (es->p != NULL)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <tcp_client_poll+0x8a>

//			tcp_sent(newpcb, tcp_client_sent);
//
//			tcp_client_send(newpcb, es);

			pbuf_free(es->p);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	4618      	mov	r0, r3
 8001300:	f00c fe92 	bl	800e028 <pbuf_free>
 8001304:	e00a      	b.n	800131c <tcp_client_poll+0xa0>

		}

		else
		{
			if (es->state == ES_C_CLOSE)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b04      	cmp	r3, #4
 800130c:	d106      	bne.n	800131c <tcp_client_poll+0xa0>
			{
				tcp_client_connectin_close(newpcb, es);
 800130e:	68f9      	ldr	r1, [r7, #12]
 8001310:	6838      	ldr	r0, [r7, #0]
 8001312:	f7ff fd51 	bl	8000db8 <tcp_client_connectin_close>

				mem_free(es);
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f00b fcaa 	bl	800cc70 <mem_free>

			}
		}

		esBuff->state = es->state;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <tcp_client_poll+0xbc>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	7812      	ldrb	r2, [r2, #0]
 8001324:	701a      	strb	r2, [r3, #0]

	}

	return ERR_OK;
 8001326:	2300      	movs	r3, #0

}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200003bf 	.word	0x200003bf
 8001334:	08018fac 	.word	0x08018fac
 8001338:	200003c4 	.word	0x200003c4

0800133c <tcp_client_err>:
static void tcp_client_err(void *arg, err_t err)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
	struct tcp_client_struct *es;

	es = (struct tcp_client_struct *) arg;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	60fb      	str	r3, [r7, #12]

	mem_free(es);
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f00b fc8f 	bl	800cc70 <mem_free>

}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001394 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001360:	f7ff fc6a 	bl	8000c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001364:	480c      	ldr	r0, [pc, #48]	; (8001398 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001366:	490d      	ldr	r1, [pc, #52]	; (800139c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001368:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800137c:	4c0a      	ldr	r4, [pc, #40]	; (80013a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138a:	f016 ff93 	bl	80182b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138e:	f7ff f8ed 	bl	800056c <main>
  bx  lr    
 8001392:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800139c:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 80013a0:	0801bd3c 	.word	0x0801bd3c
  ldr r2, =_sbss
 80013a4:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 80013a8:	2000a788 	.word	0x2000a788

080013ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <ADC_IRQHandler>

080013ae <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00b      	beq.n	80013d6 <DP83848_RegisterBusIO+0x28>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d007      	beq.n	80013d6 <DP83848_RegisterBusIO+0x28>
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <DP83848_RegisterBusIO+0x28>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	e014      	b.n	8001406 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	691a      	ldr	r2, [r3, #16]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d17c      	bne.n	800152c <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d002      	beq.n	8001440 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2220      	movs	r2, #32
 8001444:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	e01c      	b.n	8001486 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	f107 0208 	add.w	r2, r7, #8
 8001454:	2119      	movs	r1, #25
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	4798      	blx	r3
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	da03      	bge.n	8001468 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8001460:	f06f 0304 	mvn.w	r3, #4
 8001464:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001466:	e00b      	b.n	8001480 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	429a      	cmp	r2, r3
 8001472:	d105      	bne.n	8001480 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
         break;
 800147e:	e005      	b.n	800148c <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3301      	adds	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2b1f      	cmp	r3, #31
 800148a:	d9df      	bls.n	800144c <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b1f      	cmp	r3, #31
 8001492:	d902      	bls.n	800149a <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8001494:	f06f 0302 	mvn.w	r3, #2
 8001498:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d145      	bne.n	800152c <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6810      	ldr	r0, [r2, #0]
 80014a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014ac:	2100      	movs	r1, #0
 80014ae:	4798      	blx	r3
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db37      	blt.n	8001526 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6810      	ldr	r0, [r2, #0]
 80014be:	f107 0208 	add.w	r2, r7, #8
 80014c2:	2100      	movs	r1, #0
 80014c4:	4798      	blx	r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db28      	blt.n	800151e <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4798      	blx	r3
 80014d2:	4603      	mov	r3, r0
 80014d4:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80014d6:	e01c      	b.n	8001512 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4798      	blx	r3
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014ea:	d80e      	bhi.n	800150a <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6810      	ldr	r0, [r2, #0]
 80014f4:	f107 0208 	add.w	r2, r7, #8
 80014f8:	2100      	movs	r1, #0
 80014fa:	4798      	blx	r3
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	da07      	bge.n	8001512 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8001502:	f06f 0304 	mvn.w	r3, #4
 8001506:	613b      	str	r3, [r7, #16]
                 break;
 8001508:	e010      	b.n	800152c <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 800150a:	f06f 0301 	mvn.w	r3, #1
 800150e:	613b      	str	r3, [r7, #16]
               break;
 8001510:	e00c      	b.n	800152c <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1dd      	bne.n	80014d8 <DP83848_Init+0xc6>
 800151c:	e006      	b.n	800152c <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 800151e:	f06f 0304 	mvn.w	r3, #4
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	e002      	b.n	800152c <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8001526:	f06f 0303 	mvn.w	r3, #3
 800152a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d112      	bne.n	8001558 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	4798      	blx	r3
 8001538:	4603      	mov	r3, r0
 800153a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 800153c:	bf00      	nop
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	4798      	blx	r3
 8001544:	4603      	mov	r3, r0
 8001546:	461a      	mov	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001550:	d9f5      	bls.n	800153e <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001558:	693b      	ldr	r3, [r7, #16]
 }
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6810      	ldr	r0, [r2, #0]
 8001576:	f107 020c 	add.w	r2, r7, #12
 800157a:	2101      	movs	r1, #1
 800157c:	4798      	blx	r3
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	da02      	bge.n	800158a <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8001584:	f06f 0304 	mvn.w	r3, #4
 8001588:	e06e      	b.n	8001668 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6810      	ldr	r0, [r2, #0]
 8001592:	f107 020c 	add.w	r2, r7, #12
 8001596:	2101      	movs	r1, #1
 8001598:	4798      	blx	r3
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	da02      	bge.n	80015a6 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 80015a0:	f06f 0304 	mvn.w	r3, #4
 80015a4:	e060      	b.n	8001668 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e059      	b.n	8001668 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6810      	ldr	r0, [r2, #0]
 80015bc:	f107 020c 	add.w	r2, r7, #12
 80015c0:	2100      	movs	r1, #0
 80015c2:	4798      	blx	r3
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da02      	bge.n	80015d0 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 80015ca:	f06f 0304 	mvn.w	r3, #4
 80015ce:	e04b      	b.n	8001668 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d11b      	bne.n	8001612 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d006      	beq.n	80015f2 <DP83848_GetLinkState+0x90>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80015ee:	2302      	movs	r3, #2
 80015f0:	e03a      	b.n	8001668 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e033      	b.n	8001668 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800160a:	2304      	movs	r3, #4
 800160c:	e02c      	b.n	8001668 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 800160e:	2305      	movs	r3, #5
 8001610:	e02a      	b.n	8001668 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6810      	ldr	r0, [r2, #0]
 800161a:	f107 020c 	add.w	r2, r7, #12
 800161e:	2110      	movs	r1, #16
 8001620:	4798      	blx	r3
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	da02      	bge.n	800162e <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8001628:	f06f 0304 	mvn.w	r3, #4
 800162c:	e01c      	b.n	8001668 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8001638:	2306      	movs	r3, #6
 800163a:	e015      	b.n	8001668 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0306 	and.w	r3, r3, #6
 8001642:	2b04      	cmp	r3, #4
 8001644:	d101      	bne.n	800164a <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001646:	2302      	movs	r3, #2
 8001648:	e00e      	b.n	8001668 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f003 0306 	and.w	r3, r3, #6
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001654:	2303      	movs	r3, #3
 8001656:	e007      	b.n	8001668 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0306 	and.w	r3, r3, #6
 800165e:	2b06      	cmp	r3, #6
 8001660:	d101      	bne.n	8001666 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8001662:	2304      	movs	r3, #4
 8001664:	e000      	b.n	8001668 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001666:	2305      	movs	r3, #5
    }
  }
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <HAL_Init+0x40>)
 800167a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_Init+0x40>)
 8001686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <HAL_Init+0x40>)
 8001692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001698:	2003      	movs	r0, #3
 800169a:	f000 f94f 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169e:	200f      	movs	r0, #15
 80016a0:	f000 f808 	bl	80016b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a4:	f7ff f8ba 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023c00 	.word	0x40023c00

080016b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x54>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x58>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f967 	bl	80019a6 <HAL_SYSTICK_Config>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00e      	b.n	8001700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d80a      	bhi.n	80016fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e8:	2200      	movs	r2, #0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f000 f92f 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <HAL_InitTick+0x5c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000000 	.word	0x20000000
 800170c:	20000008 	.word	0x20000008
 8001710:	20000004 	.word	0x20000004

08001714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x20>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x24>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_IncTick+0x24>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000008 	.word	0x20000008
 8001738:	200003d0 	.word	0x200003d0

0800173c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_GetTick+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	200003d0 	.word	0x200003d0

08001754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff ffee 	bl	800173c <HAL_GetTick>
 8001760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d005      	beq.n	800177a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_Delay+0x44>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800177a:	bf00      	nop
 800177c:	f7ff ffde 	bl	800173c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	429a      	cmp	r2, r3
 800178a:	d8f7      	bhi.n	800177c <HAL_Delay+0x28>
  {
  }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000008 	.word	0x20000008

0800179c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	60d3      	str	r3, [r2, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <__NVIC_GetPriorityGrouping+0x18>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	f003 0307 	and.w	r3, r3, #7
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	db0b      	blt.n	800182a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	f003 021f 	and.w	r2, r3, #31
 8001818:	4907      	ldr	r1, [pc, #28]	; (8001838 <__NVIC_EnableIRQ+0x38>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	2001      	movs	r0, #1
 8001822:	fa00 f202 	lsl.w	r2, r0, r2
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000e100 	.word	0xe000e100

0800183c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db0a      	blt.n	8001866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	490c      	ldr	r1, [pc, #48]	; (8001888 <__NVIC_SetPriority+0x4c>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001864:	e00a      	b.n	800187c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <__NVIC_SetPriority+0x50>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	3b04      	subs	r3, #4
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	440b      	add	r3, r1
 800187a:	761a      	strb	r2, [r3, #24]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000e100 	.word	0xe000e100
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	bf28      	it	cs
 80018ae:	2304      	movcs	r3, #4
 80018b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3304      	adds	r3, #4
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d902      	bls.n	80018c0 <NVIC_EncodePriority+0x30>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3b03      	subs	r3, #3
 80018be:	e000      	b.n	80018c2 <NVIC_EncodePriority+0x32>
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	4313      	orrs	r3, r2
         );
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f7ff ff8e 	bl	800183c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff29 	bl	800179c <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff3e 	bl	80017e4 <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff8e 	bl	8001890 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5d 	bl	800183c <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff31 	bl	8001800 <__NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa2 	bl	80018f8 <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff feb6 	bl	800173c <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e099      	b.n	8001b10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019fc:	e00f      	b.n	8001a1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019fe:	f7ff fe9d 	bl	800173c <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b05      	cmp	r3, #5
 8001a0a:	d908      	bls.n	8001a1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2203      	movs	r2, #3
 8001a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e078      	b.n	8001b10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1e8      	bne.n	80019fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <HAL_DMA_Init+0x158>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d107      	bne.n	8001a88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	4313      	orrs	r3, r2
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f023 0307 	bic.w	r3, r3, #7
 8001a9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d117      	bne.n	8001ae2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00e      	beq.n	8001ae2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 fb01 	bl	80020cc <DMA_CheckFifoParam>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2240      	movs	r2, #64	; 0x40
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e016      	b.n	8001b10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 fab8 	bl	8002060 <DMA_CalcBaseAndBitshift>
 8001af0:	4603      	mov	r3, r0
 8001af2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af8:	223f      	movs	r2, #63	; 0x3f
 8001afa:	409a      	lsls	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	f010803f 	.word	0xf010803f

08001b1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_DMA_Start_IT+0x26>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e040      	b.n	8001bc4 <HAL_DMA_Start_IT+0xa8>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d12f      	bne.n	8001bb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 fa4a 	bl	8002004 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b74:	223f      	movs	r2, #63	; 0x3f
 8001b76:	409a      	lsls	r2, r3
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0216 	orr.w	r2, r2, #22
 8001b8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d007      	beq.n	8001ba4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0208 	orr.w	r2, r2, #8
 8001ba2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e005      	b.n	8001bc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bda:	f7ff fdaf 	bl	800173c <HAL_GetTick>
 8001bde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d008      	beq.n	8001bfe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e052      	b.n	8001ca4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0216 	bic.w	r2, r2, #22
 8001c0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d103      	bne.n	8001c2e <HAL_DMA_Abort+0x62>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0208 	bic.w	r2, r2, #8
 8001c3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0201 	bic.w	r2, r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c4e:	e013      	b.n	8001c78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c50:	f7ff fd74 	bl	800173c <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	d90c      	bls.n	8001c78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2220      	movs	r2, #32
 8001c62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2203      	movs	r2, #3
 8001c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e015      	b.n	8001ca4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1e4      	bne.n	8001c50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8a:	223f      	movs	r2, #63	; 0x3f
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d004      	beq.n	8001cca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2280      	movs	r2, #128	; 0x80
 8001cc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00c      	b.n	8001ce4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2205      	movs	r2, #5
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0201 	bic.w	r2, r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cfc:	4b8e      	ldr	r3, [pc, #568]	; (8001f38 <HAL_DMA_IRQHandler+0x248>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a8e      	ldr	r2, [pc, #568]	; (8001f3c <HAL_DMA_IRQHandler+0x24c>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	0a9b      	lsrs	r3, r3, #10
 8001d08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1a:	2208      	movs	r2, #8
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d01a      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d013      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0204 	bic.w	r2, r2, #4
 8001d42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	2208      	movs	r2, #8
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d54:	f043 0201 	orr.w	r2, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	2201      	movs	r2, #1
 8001d62:	409a      	lsls	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d012      	beq.n	8001d92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	2201      	movs	r2, #1
 8001d80:	409a      	lsls	r2, r3
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8a:	f043 0202 	orr.w	r2, r3, #2
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	2204      	movs	r2, #4
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d012      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00b      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	2204      	movs	r2, #4
 8001db6:	409a      	lsls	r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	f043 0204 	orr.w	r2, r3, #4
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dcc:	2210      	movs	r2, #16
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d043      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d03c      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dea:	2210      	movs	r2, #16
 8001dec:	409a      	lsls	r2, r3
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d018      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d108      	bne.n	8001e20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d024      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	4798      	blx	r3
 8001e1e:	e01f      	b.n	8001e60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01b      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	4798      	blx	r3
 8001e30:	e016      	b.n	8001e60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d107      	bne.n	8001e50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0208 	bic.w	r2, r2, #8
 8001e4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e64:	2220      	movs	r2, #32
 8001e66:	409a      	lsls	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 808f 	beq.w	8001f90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 8087 	beq.w	8001f90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	2220      	movs	r2, #32
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b05      	cmp	r3, #5
 8001e98:	d136      	bne.n	8001f08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0216 	bic.w	r2, r2, #22
 8001ea8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d103      	bne.n	8001eca <HAL_DMA_IRQHandler+0x1da>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0208 	bic.w	r2, r2, #8
 8001ed8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ede:	223f      	movs	r2, #63	; 0x3f
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d07e      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	4798      	blx	r3
        }
        return;
 8001f06:	e079      	b.n	8001ffc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d01d      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10d      	bne.n	8001f40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d031      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	4798      	blx	r3
 8001f34:	e02c      	b.n	8001f90 <HAL_DMA_IRQHandler+0x2a0>
 8001f36:	bf00      	nop
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d023      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
 8001f50:	e01e      	b.n	8001f90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10f      	bne.n	8001f80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0210 	bic.w	r2, r2, #16
 8001f6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d032      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d022      	beq.n	8001fea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2205      	movs	r2, #5
 8001fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d307      	bcc.n	8001fd8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f2      	bne.n	8001fbc <HAL_DMA_IRQHandler+0x2cc>
 8001fd6:	e000      	b.n	8001fda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fd8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d005      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	4798      	blx	r3
 8001ffa:	e000      	b.n	8001ffe <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ffc:	bf00      	nop
    }
  }
}
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002020:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b40      	cmp	r3, #64	; 0x40
 8002030:	d108      	bne.n	8002044 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002042:	e007      	b.n	8002054 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	60da      	str	r2, [r3, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	3b10      	subs	r3, #16
 8002070:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <DMA_CalcBaseAndBitshift+0x64>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800207a:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <DMA_CalcBaseAndBitshift+0x68>)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d909      	bls.n	80020a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002096:	f023 0303 	bic.w	r3, r3, #3
 800209a:	1d1a      	adds	r2, r3, #4
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	659a      	str	r2, [r3, #88]	; 0x58
 80020a0:	e007      	b.n	80020b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020aa:	f023 0303 	bic.w	r3, r3, #3
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	aaaaaaab 	.word	0xaaaaaaab
 80020c8:	0801ba30 	.word	0x0801ba30

080020cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d11f      	bne.n	8002126 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d856      	bhi.n	800219a <DMA_CheckFifoParam+0xce>
 80020ec:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <DMA_CheckFifoParam+0x28>)
 80020ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f2:	bf00      	nop
 80020f4:	08002105 	.word	0x08002105
 80020f8:	08002117 	.word	0x08002117
 80020fc:	08002105 	.word	0x08002105
 8002100:	0800219b 	.word	0x0800219b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d046      	beq.n	800219e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002114:	e043      	b.n	800219e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800211e:	d140      	bne.n	80021a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002124:	e03d      	b.n	80021a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800212e:	d121      	bne.n	8002174 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d837      	bhi.n	80021a6 <DMA_CheckFifoParam+0xda>
 8002136:	a201      	add	r2, pc, #4	; (adr r2, 800213c <DMA_CheckFifoParam+0x70>)
 8002138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213c:	0800214d 	.word	0x0800214d
 8002140:	08002153 	.word	0x08002153
 8002144:	0800214d 	.word	0x0800214d
 8002148:	08002165 	.word	0x08002165
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
      break;
 8002150:	e030      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d025      	beq.n	80021aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002162:	e022      	b.n	80021aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800216c:	d11f      	bne.n	80021ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002172:	e01c      	b.n	80021ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d903      	bls.n	8002182 <DMA_CheckFifoParam+0xb6>
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d003      	beq.n	8002188 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002180:	e018      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	73fb      	strb	r3, [r7, #15]
      break;
 8002186:	e015      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00e      	beq.n	80021b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
      break;
 8002198:	e00b      	b.n	80021b2 <DMA_CheckFifoParam+0xe6>
      break;
 800219a:	bf00      	nop
 800219c:	e00a      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
      break;
 800219e:	bf00      	nop
 80021a0:	e008      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
      break;
 80021a2:	bf00      	nop
 80021a4:	e006      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
      break;
 80021a6:	bf00      	nop
 80021a8:	e004      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
      break;
 80021aa:	bf00      	nop
 80021ac:	e002      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80021ae:	bf00      	nop
 80021b0:	e000      	b.n	80021b4 <DMA_CheckFifoParam+0xe8>
      break;
 80021b2:	bf00      	nop
    }
  } 
  
  return status; 
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop

080021c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e06c      	b.n	80022b0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d106      	bne.n	80021ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2223      	movs	r2, #35	; 0x23
 80021e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f006 fa09 	bl	8008600 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	4b31      	ldr	r3, [pc, #196]	; (80022b8 <HAL_ETH_Init+0xf4>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	4a30      	ldr	r2, [pc, #192]	; (80022b8 <HAL_ETH_Init+0xf4>)
 80021f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021fc:	6453      	str	r3, [r2, #68]	; 0x44
 80021fe:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <HAL_ETH_Init+0xf4>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800220a:	4b2c      	ldr	r3, [pc, #176]	; (80022bc <HAL_ETH_Init+0xf8>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4a2b      	ldr	r2, [pc, #172]	; (80022bc <HAL_ETH_Init+0xf8>)
 8002210:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002214:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002216:	4b29      	ldr	r3, [pc, #164]	; (80022bc <HAL_ETH_Init+0xf8>)
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	4927      	ldr	r1, [pc, #156]	; (80022bc <HAL_ETH_Init+0xf8>)
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002224:	4b25      	ldr	r3, [pc, #148]	; (80022bc <HAL_ETH_Init+0xf8>)
 8002226:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800223e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002240:	f7ff fa7c 	bl	800173c <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002246:	e011      	b.n	800226c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002248:	f7ff fa78 	bl	800173c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002256:	d909      	bls.n	800226c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2204      	movs	r2, #4
 800225c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	22e0      	movs	r2, #224	; 0xe0
 8002264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e021      	b.n	80022b0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1e4      	bne.n	8002248 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fdfc 	bl	8002e7c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fea3 	bl	8002fd0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fef9 	bl	8003082 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	461a      	mov	r2, r3
 8002296:	2100      	movs	r1, #0
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 fe61 	bl	8002f60 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2210      	movs	r2, #16
 80022aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40013800 	.word	0x40013800

080022c0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d150      	bne.n	8002374 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2223      	movs	r2, #35	; 0x23
 80022d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2204      	movs	r2, #4
 80022de:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f9fd 	bl	80026e0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0208 	orr.w	r2, r2, #8
 80022f4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022fe:	2001      	movs	r0, #1
 8002300:	f7ff fa28 	bl	8001754 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0204 	orr.w	r2, r2, #4
 800231a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002324:	2001      	movs	r0, #1
 8002326:	f7ff fa15 	bl	8001754 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fc42 	bl	8002bbc <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800234a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800234e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	f043 0302 	orr.w	r3, r3, #2
 8002362:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002366:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2223      	movs	r2, #35	; 0x23
 800236c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	e000      	b.n	8002376 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
  }
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800238c:	2b23      	cmp	r3, #35	; 0x23
 800238e:	d14a      	bne.n	8002426 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2223      	movs	r2, #35	; 0x23
 8002394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023ae:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	f023 0302 	bic.w	r3, r3, #2
 80023c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023c6:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0204 	bic.w	r2, r2, #4
 80023d6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023e0:	2001      	movs	r0, #1
 80023e2:	f7ff f9b7 	bl	8001754 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fbe4 	bl	8002bbc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0208 	bic.w	r2, r2, #8
 8002402:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800240c:	2001      	movs	r0, #1
 800240e:	f7ff f9a1 	bl	8001754 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2210      	movs	r2, #16
 800241e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	e000      	b.n	8002428 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
  }
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	f043 0201 	orr.w	r2, r3, #1
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e07c      	b.n	8002550 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800245c:	2b23      	cmp	r3, #35	; 0x23
 800245e:	d176      	bne.n	800254e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002460:	2200      	movs	r2, #0
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 fe79 	bl	800315c <ETH_Prepare_Tx_Descriptors>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d009      	beq.n	8002484 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f043 0202 	orr.w	r2, r3, #2
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e065      	b.n	8002550 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8002484:	f3bf 8f4f 	dsb	sy
}
 8002488:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3206      	adds	r2, #6
 8002492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002496:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	629a      	str	r2, [r3, #40]	; 0x28
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d904      	bls.n	80024b4 <HAL_ETH_Transmit+0x84>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	1f1a      	subs	r2, r3, #4
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3106      	adds	r1, #6
 80024c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024c8:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80024ca:	f7ff f937 	bl	800173c <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80024d0:	e037      	b.n	8002542 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d011      	beq.n	8002508 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f043 0208 	orr.w	r2, r3, #8
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e023      	b.n	8002550 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250e:	d018      	beq.n	8002542 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002510:	f7ff f914 	bl	800173c <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	d302      	bcc.n	8002526 <HAL_ETH_Transmit+0xf6>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10d      	bne.n	8002542 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252c:	f043 0204 	orr.w	r2, r3, #4
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800253c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e006      	b.n	8002550 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	dbc3      	blt.n	80024d2 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
  }
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d109      	bne.n	8002584 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0a8      	b.n	80026d6 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800258a:	2b23      	cmp	r3, #35	; 0x23
 800258c:	d001      	beq.n	8002592 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0a1      	b.n	80026d6 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002596:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	3212      	adds	r2, #18
 800259e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a8:	f1c3 0304 	rsb	r3, r3, #4
 80025ac:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80025ae:	e06a      	b.n	8002686 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d007      	beq.n	80025cc <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	699a      	ldr	r2, [r3, #24]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d103      	bne.n	80025e0 <HAL_ETH_ReadData+0x88>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d040      	beq.n	8002662 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00c      	beq.n	8002624 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	0c1b      	lsrs	r3, r3, #16
 8002610:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002614:	3b04      	subs	r3, #4
 8002616:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800263c:	461a      	mov	r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	b29b      	uxth	r3, r3
 8002642:	f006 f98d 	bl	8008960 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	441a      	add	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2200      	movs	r2, #0
 8002660:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3301      	adds	r3, #1
 8002666:	61fb      	str	r3, [r7, #28]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	2b03      	cmp	r3, #3
 800266c:	d902      	bls.n	8002674 <HAL_ETH_ReadData+0x11c>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3b04      	subs	r3, #4
 8002672:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	3212      	adds	r2, #18
 800267a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	3301      	adds	r3, #1
 8002684:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800268a:	2b00      	cmp	r3, #0
 800268c:	db06      	blt.n	800269c <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	429a      	cmp	r2, r3
 8002694:	d202      	bcs.n	800269c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d089      	beq.n	80025b0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	441a      	add	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f815 	bl	80026e0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d108      	bne.n	80026d4 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e000      	b.n	80026d6 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80026ec:	2301      	movs	r3, #1
 80026ee:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026f4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	3212      	adds	r2, #18
 80026fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002700:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002706:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002708:	e03d      	b.n	8002786 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d112      	bne.n	8002738 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002712:	f107 0308 	add.w	r3, r7, #8
 8002716:	4618      	mov	r0, r3
 8002718:	f006 f8f2 	bl	8008900 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	74fb      	strb	r3, [r7, #19]
 8002726:	e007      	b.n	8002738 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	461a      	mov	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	461a      	mov	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d023      	beq.n	8002786 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002742:	2b00      	cmp	r3, #0
 8002744:	d103      	bne.n	800274e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	4a24      	ldr	r2, [pc, #144]	; (80027dc <ETH_UpdateDescriptor+0xfc>)
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	e003      	b.n	8002756 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002754:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3301      	adds	r3, #1
 8002766:	61fb      	str	r3, [r7, #28]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d902      	bls.n	8002774 <ETH_UpdateDescriptor+0x94>
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3b04      	subs	r3, #4
 8002772:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	3212      	adds	r2, #18
 800277a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277e:	617b      	str	r3, [r7, #20]
      desccount--;
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	3b01      	subs	r3, #1
 8002784:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <ETH_UpdateDescriptor+0xb2>
 800278c:	7cfb      	ldrb	r3, [r7, #19]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1bb      	bne.n	800270a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	429a      	cmp	r2, r3
 800279a:	d01a      	beq.n	80027d2 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	3301      	adds	r3, #1
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80027a6:	f3bf 8f5f 	dmb	sy
}
 80027aa:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6919      	ldr	r1, [r3, #16]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	18ca      	adds	r2, r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c4:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69fa      	ldr	r2, [r7, #28]
 80027ca:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80027d2:	bf00      	nop
 80027d4:	3720      	adds	r7, #32
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	80004600 	.word	0x80004600

080027e0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f003 031c 	and.w	r3, r3, #28
 80027fc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	02db      	lsls	r3, r3, #11
 8002802:	b29b      	uxth	r3, r3
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	019b      	lsls	r3, r3, #6
 800280e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f023 0302 	bic.w	r3, r3, #2
 800281e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002830:	f7fe ff84 	bl	800173c <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002836:	e00d      	b.n	8002854 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002838:	f7fe ff80 	bl	800173c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002846:	d301      	bcc.n	800284c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e010      	b.n	800286e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1ec      	bne.n	8002838 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	b29b      	uxth	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 031c 	and.w	r3, r3, #28
 8002892:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	02db      	lsls	r3, r3, #11
 8002898:	b29b      	uxth	r3, r3
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	019b      	lsls	r3, r3, #6
 80028a4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f043 0302 	orr.w	r3, r3, #2
 80028b4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028d0:	f7fe ff34 	bl	800173c <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80028d6:	e00d      	b.n	80028f4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80028d8:	f7fe ff30 	bl	800173c <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e6:	d301      	bcc.n	80028ec <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e009      	b.n	8002900 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1ec      	bne.n	80028d8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0d9      	b.n	8002ad0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b00      	cmp	r3, #0
 8002928:	bf14      	ite	ne
 800292a:	2301      	movne	r3, #1
 800292c:	2300      	moveq	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf14      	ite	ne
 8002970:	2301      	movne	r3, #1
 8002972:	2300      	moveq	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002986:	2b00      	cmp	r3, #0
 8002988:	bf0c      	ite	eq
 800298a:	2301      	moveq	r3, #1
 800298c:	2300      	movne	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bf0c      	ite	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	2300      	movne	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	bf14      	ite	ne
 8002a0e:	2301      	movne	r3, #1
 8002a10:	2300      	moveq	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bf14      	ite	ne
 8002a36:	2301      	movne	r3, #1
 8002a38:	2300      	moveq	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	0c1b      	lsrs	r3, r3, #16
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf14      	ite	ne
 8002ac0:	2301      	movne	r3, #1
 8002ac2:	2300      	moveq	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e00b      	b.n	8002b08 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d105      	bne.n	8002b06 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002afa:	6839      	ldr	r1, [r7, #0]
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f883 	bl	8002c08 <ETH_SetMACConfig>

    return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
  }
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 031c 	bic.w	r3, r3, #28
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002b28:	f002 fc98 	bl	800545c <HAL_RCC_GetHCLKFreq>
 8002b2c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4a1d      	ldr	r2, [pc, #116]	; (8002ba8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d908      	bls.n	8002b48 <HAL_ETH_SetMDIOClockRange+0x38>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4a1c      	ldr	r2, [pc, #112]	; (8002bac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d804      	bhi.n	8002b48 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f043 0308 	orr.w	r3, r3, #8
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	e027      	b.n	8002b98 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4a18      	ldr	r2, [pc, #96]	; (8002bac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d908      	bls.n	8002b62 <HAL_ETH_SetMDIOClockRange+0x52>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d204      	bcs.n	8002b62 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f043 030c 	orr.w	r3, r3, #12
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	e01a      	b.n	8002b98 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d303      	bcc.n	8002b72 <HAL_ETH_SetMDIOClockRange+0x62>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4a11      	ldr	r2, [pc, #68]	; (8002bb4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d911      	bls.n	8002b96 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4a0f      	ldr	r2, [pc, #60]	; (8002bb4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d908      	bls.n	8002b8c <HAL_ETH_SetMDIOClockRange+0x7c>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	4a0e      	ldr	r2, [pc, #56]	; (8002bb8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d804      	bhi.n	8002b8c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	e005      	b.n	8002b98 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f043 0310 	orr.w	r3, r3, #16
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	e000      	b.n	8002b98 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002b96:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	611a      	str	r2, [r3, #16]
}
 8002ba0:	bf00      	nop
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	01312cff 	.word	0x01312cff
 8002bac:	02160ebf 	.word	0x02160ebf
 8002bb0:	03938700 	.word	0x03938700
 8002bb4:	05f5e0ff 	.word	0x05f5e0ff
 8002bb8:	08f0d17f 	.word	0x08f0d17f

08002bbc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bde:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bec:	2001      	movs	r0, #1
 8002bee:	f7fe fdb1 	bl	8001754 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bfc:	6193      	str	r3, [r2, #24]
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4b51      	ldr	r3, [pc, #324]	; (8002d64 <ETH_SetMACConfig+0x15c>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	7c1b      	ldrb	r3, [r3, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <ETH_SetMACConfig+0x28>
 8002c2a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002c2e:	e000      	b.n	8002c32 <ETH_SetMACConfig+0x2a>
 8002c30:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	7c5b      	ldrb	r3, [r3, #17]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d102      	bne.n	8002c40 <ETH_SetMACConfig+0x38>
 8002c3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c3e:	e000      	b.n	8002c42 <ETH_SetMACConfig+0x3a>
 8002c40:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c42:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002c48:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	7fdb      	ldrb	r3, [r3, #31]
 8002c4e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002c50:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002c56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	7f92      	ldrb	r2, [r2, #30]
 8002c5c:	2a00      	cmp	r2, #0
 8002c5e:	d102      	bne.n	8002c66 <ETH_SetMACConfig+0x5e>
 8002c60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c64:	e000      	b.n	8002c68 <ETH_SetMACConfig+0x60>
 8002c66:	2200      	movs	r2, #0
                        macconf->Speed |
 8002c68:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	7f1b      	ldrb	r3, [r3, #28]
 8002c6e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002c70:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002c76:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	791b      	ldrb	r3, [r3, #4]
 8002c7c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002c7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002c86:	2a00      	cmp	r2, #0
 8002c88:	d102      	bne.n	8002c90 <ETH_SetMACConfig+0x88>
 8002c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c8e:	e000      	b.n	8002c92 <ETH_SetMACConfig+0x8a>
 8002c90:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002c92:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	7bdb      	ldrb	r3, [r3, #15]
 8002c98:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002c9a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ca0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ca8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002caa:	4313      	orrs	r3, r2
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	f7fe fd46 	bl	8001754 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002cde:	4013      	ands	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002cee:	2a00      	cmp	r2, #0
 8002cf0:	d101      	bne.n	8002cf6 <ETH_SetMACConfig+0xee>
 8002cf2:	2280      	movs	r2, #128	; 0x80
 8002cf4:	e000      	b.n	8002cf8 <ETH_SetMACConfig+0xf0>
 8002cf6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002cf8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002cfe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002d06:	2a01      	cmp	r2, #1
 8002d08:	d101      	bne.n	8002d0e <ETH_SetMACConfig+0x106>
 8002d0a:	2208      	movs	r2, #8
 8002d0c:	e000      	b.n	8002d10 <ETH_SetMACConfig+0x108>
 8002d0e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002d10:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002d18:	2a01      	cmp	r2, #1
 8002d1a:	d101      	bne.n	8002d20 <ETH_SetMACConfig+0x118>
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	e000      	b.n	8002d22 <ETH_SetMACConfig+0x11a>
 8002d20:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002d22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002d2a:	2a01      	cmp	r2, #1
 8002d2c:	d101      	bne.n	8002d32 <ETH_SetMACConfig+0x12a>
 8002d2e:	2202      	movs	r2, #2
 8002d30:	e000      	b.n	8002d34 <ETH_SetMACConfig+0x12c>
 8002d32:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d34:	4313      	orrs	r3, r2
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	f7fe fd01 	bl	8001754 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	619a      	str	r2, [r3, #24]
}
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	ff20810f 	.word	0xff20810f

08002d68 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4b3d      	ldr	r3, [pc, #244]	; (8002e78 <ETH_SetDMAConfig+0x110>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	7b1b      	ldrb	r3, [r3, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <ETH_SetDMAConfig+0x2c>
 8002d8e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d92:	e000      	b.n	8002d96 <ETH_SetDMAConfig+0x2e>
 8002d94:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	7b5b      	ldrb	r3, [r3, #13]
 8002d9a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d9c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	7f52      	ldrb	r2, [r2, #29]
 8002da2:	2a00      	cmp	r2, #0
 8002da4:	d102      	bne.n	8002dac <ETH_SetDMAConfig+0x44>
 8002da6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002daa:	e000      	b.n	8002dae <ETH_SetDMAConfig+0x46>
 8002dac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002dae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	7b9b      	ldrb	r3, [r3, #14]
 8002db4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002db6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002dbc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	7f1b      	ldrb	r3, [r3, #28]
 8002dc2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002dc4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	7f9b      	ldrb	r3, [r3, #30]
 8002dca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002dcc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002dd2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dda:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dec:	461a      	mov	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dfe:	2001      	movs	r0, #1
 8002e00:	f7fe fca8 	bl	8001754 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	791b      	ldrb	r3, [r3, #4]
 8002e16:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e1c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002e22:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002e28:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e30:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002e32:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002e3a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002e40:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6812      	ldr	r2, [r2, #0]
 8002e46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e4e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	f7fe fc79 	bl	8001754 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6013      	str	r3, [r2, #0]
}
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	f8de3f23 	.word	0xf8de3f23

08002e7c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b0a6      	sub	sp, #152	; 0x98
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002e84:	2301      	movs	r3, #1
 8002e86:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002e90:	2300      	movs	r3, #0
 8002e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002ede:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002ee4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ef0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff fe86 	bl	8002c08 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002efc:	2301      	movs	r3, #1
 8002efe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002f00:	2301      	movs	r3, #1
 8002f02:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f30:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002f32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f36:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f3c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002f4c:	f107 0308 	add.w	r3, r7, #8
 8002f50:	4619      	mov	r1, r3
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ff08 	bl	8002d68 <ETH_SetDMAConfig>
}
 8002f58:	bf00      	nop
 8002f5a:	3798      	adds	r7, #152	; 0x98
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3305      	adds	r3, #5
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	3204      	adds	r2, #4
 8002f78:	7812      	ldrb	r2, [r2, #0]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <ETH_MACAddressConfig+0x68>)
 8002f82:	4413      	add	r3, r2
 8002f84:	461a      	mov	r2, r3
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3303      	adds	r3, #3
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	061a      	lsls	r2, r3, #24
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3302      	adds	r3, #2
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	7812      	ldrb	r2, [r2, #0]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <ETH_MACAddressConfig+0x6c>)
 8002fb2:	4413      	add	r3, r2
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	6013      	str	r3, [r2, #0]
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40028040 	.word	0x40028040
 8002fcc:	40028044 	.word	0x40028044

08002fd0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	e03e      	b.n	800305c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68d9      	ldr	r1, [r3, #12]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2200      	movs	r2, #0
 8003006:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	3206      	adds	r2, #6
 8003010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d80c      	bhi.n	8003040 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68d9      	ldr	r1, [r3, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	440b      	add	r3, r1
 8003038:	461a      	mov	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	e004      	b.n	800304a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	461a      	mov	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3301      	adds	r3, #1
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b03      	cmp	r3, #3
 8003060:	d9bd      	bls.n	8002fde <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003074:	611a      	str	r2, [r3, #16]
}
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	e046      	b.n	800311e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6919      	ldr	r1, [r3, #16]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	440b      	add	r3, r1
 80030a0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2200      	movs	r2, #0
 80030ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2200      	movs	r2, #0
 80030be:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2200      	movs	r2, #0
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80030cc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80030d4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	3212      	adds	r2, #18
 80030ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d80c      	bhi.n	800310e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6919      	ldr	r1, [r3, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	461a      	mov	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	60da      	str	r2, [r3, #12]
 800310c:	e004      	b.n	8003118 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	461a      	mov	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	3301      	adds	r3, #1
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d9b5      	bls.n	8003090 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800314e:	60da      	str	r2, [r3, #12]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800315c:	b480      	push	{r7}
 800315e:	b08d      	sub	sp, #52	; 0x34
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	3318      	adds	r3, #24
 800316c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003186:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800319a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800319e:	d007      	beq.n	80031b0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a4:	3304      	adds	r3, #4
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80031b0:	2302      	movs	r3, #2
 80031b2:	e103      	b.n	80033bc <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	3301      	adds	r3, #1
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80031cc:	f023 031f 	bic.w	r3, r3, #31
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	6852      	ldr	r2, [r2, #4]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	431a      	orrs	r2, r3
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800323a:	f3bf 8f5f 	dmb	sy
}
 800323e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800324c:	e084      	b.n	8003358 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d006      	beq.n	800326e <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e005      	b.n	800327a <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	3301      	adds	r3, #1
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003282:	2b03      	cmp	r3, #3
 8003284:	d902      	bls.n	800328c <ETH_Prepare_Tx_Descriptors+0x130>
 8003286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003288:	3b04      	subs	r3, #4
 800328a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003294:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032ae:	d007      	beq.n	80032c0 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b4:	3304      	adds	r3, #4
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d029      	beq.n	8003314 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032cc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80032ce:	2300      	movs	r3, #0
 80032d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032d2:	e019      	b.n	8003308 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80032d4:	f3bf 8f5f 	dmb	sy
}
 80032d8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	3301      	adds	r3, #1
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d902      	bls.n	80032f8 <ETH_Prepare_Tx_Descriptors+0x19c>
 80032f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f4:	3b04      	subs	r3, #4
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003300:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003304:	3301      	adds	r3, #1
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
 8003308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	429a      	cmp	r2, r3
 800330e:	d3e1      	bcc.n	80032d4 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8003310:	2302      	movs	r3, #2
 8003312:	e053      	b.n	80033bc <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	3301      	adds	r3, #1
 8003318:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003332:	f023 031f 	bic.w	r3, r3, #31
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	6852      	ldr	r2, [r2, #4]
 800333a:	431a      	orrs	r2, r3
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	3301      	adds	r3, #1
 8003344:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003346:	f3bf 8f5f 	dmb	sy
}
 800334a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	f47f af76 	bne.w	800324e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d006      	beq.n	8003376 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e005      	b.n	8003382 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003392:	6979      	ldr	r1, [r7, #20]
 8003394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003396:	3304      	adds	r3, #4
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80033a4:	b672      	cpsid	i
}
 80033a6:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	4413      	add	r3, r2
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80033b6:	b662      	cpsie	i
}
 80033b8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3734      	adds	r7, #52	; 0x34
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b089      	sub	sp, #36	; 0x24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033da:	2300      	movs	r3, #0
 80033dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	e16b      	b.n	80036bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033e4:	2201      	movs	r2, #1
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	f040 815a 	bne.w	80036b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d005      	beq.n	800341a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003416:	2b02      	cmp	r3, #2
 8003418:	d130      	bne.n	800347c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	2203      	movs	r2, #3
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4013      	ands	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003450:	2201      	movs	r2, #1
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 0201 	and.w	r2, r3, #1
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	2b03      	cmp	r3, #3
 8003486:	d017      	beq.n	80034b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	2203      	movs	r2, #3
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d123      	bne.n	800350c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	08da      	lsrs	r2, r3, #3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3208      	adds	r2, #8
 80034cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	220f      	movs	r2, #15
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	08da      	lsrs	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3208      	adds	r2, #8
 8003506:	69b9      	ldr	r1, [r7, #24]
 8003508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	2203      	movs	r2, #3
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 0203 	and.w	r2, r3, #3
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80b4 	beq.w	80036b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	4b60      	ldr	r3, [pc, #384]	; (80036d4 <HAL_GPIO_Init+0x30c>)
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	4a5f      	ldr	r2, [pc, #380]	; (80036d4 <HAL_GPIO_Init+0x30c>)
 8003558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800355c:	6453      	str	r3, [r2, #68]	; 0x44
 800355e:	4b5d      	ldr	r3, [pc, #372]	; (80036d4 <HAL_GPIO_Init+0x30c>)
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800356a:	4a5b      	ldr	r2, [pc, #364]	; (80036d8 <HAL_GPIO_Init+0x310>)
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	3302      	adds	r3, #2
 8003572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	220f      	movs	r2, #15
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4013      	ands	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a52      	ldr	r2, [pc, #328]	; (80036dc <HAL_GPIO_Init+0x314>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d02b      	beq.n	80035ee <HAL_GPIO_Init+0x226>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a51      	ldr	r2, [pc, #324]	; (80036e0 <HAL_GPIO_Init+0x318>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d025      	beq.n	80035ea <HAL_GPIO_Init+0x222>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a50      	ldr	r2, [pc, #320]	; (80036e4 <HAL_GPIO_Init+0x31c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d01f      	beq.n	80035e6 <HAL_GPIO_Init+0x21e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4f      	ldr	r2, [pc, #316]	; (80036e8 <HAL_GPIO_Init+0x320>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d019      	beq.n	80035e2 <HAL_GPIO_Init+0x21a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a4e      	ldr	r2, [pc, #312]	; (80036ec <HAL_GPIO_Init+0x324>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_GPIO_Init+0x216>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a4d      	ldr	r2, [pc, #308]	; (80036f0 <HAL_GPIO_Init+0x328>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00d      	beq.n	80035da <HAL_GPIO_Init+0x212>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a4c      	ldr	r2, [pc, #304]	; (80036f4 <HAL_GPIO_Init+0x32c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d007      	beq.n	80035d6 <HAL_GPIO_Init+0x20e>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a4b      	ldr	r2, [pc, #300]	; (80036f8 <HAL_GPIO_Init+0x330>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d101      	bne.n	80035d2 <HAL_GPIO_Init+0x20a>
 80035ce:	2307      	movs	r3, #7
 80035d0:	e00e      	b.n	80035f0 <HAL_GPIO_Init+0x228>
 80035d2:	2308      	movs	r3, #8
 80035d4:	e00c      	b.n	80035f0 <HAL_GPIO_Init+0x228>
 80035d6:	2306      	movs	r3, #6
 80035d8:	e00a      	b.n	80035f0 <HAL_GPIO_Init+0x228>
 80035da:	2305      	movs	r3, #5
 80035dc:	e008      	b.n	80035f0 <HAL_GPIO_Init+0x228>
 80035de:	2304      	movs	r3, #4
 80035e0:	e006      	b.n	80035f0 <HAL_GPIO_Init+0x228>
 80035e2:	2303      	movs	r3, #3
 80035e4:	e004      	b.n	80035f0 <HAL_GPIO_Init+0x228>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e002      	b.n	80035f0 <HAL_GPIO_Init+0x228>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_GPIO_Init+0x228>
 80035ee:	2300      	movs	r3, #0
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	f002 0203 	and.w	r2, r2, #3
 80035f6:	0092      	lsls	r2, r2, #2
 80035f8:	4093      	lsls	r3, r2
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003600:	4935      	ldr	r1, [pc, #212]	; (80036d8 <HAL_GPIO_Init+0x310>)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	089b      	lsrs	r3, r3, #2
 8003606:	3302      	adds	r3, #2
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800360e:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <HAL_GPIO_Init+0x334>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	43db      	mvns	r3, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4013      	ands	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003632:	4a32      	ldr	r2, [pc, #200]	; (80036fc <HAL_GPIO_Init+0x334>)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003638:	4b30      	ldr	r3, [pc, #192]	; (80036fc <HAL_GPIO_Init+0x334>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800365c:	4a27      	ldr	r2, [pc, #156]	; (80036fc <HAL_GPIO_Init+0x334>)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003662:	4b26      	ldr	r3, [pc, #152]	; (80036fc <HAL_GPIO_Init+0x334>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	43db      	mvns	r3, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4013      	ands	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003686:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <HAL_GPIO_Init+0x334>)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800368c:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <HAL_GPIO_Init+0x334>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036b0:	4a12      	ldr	r2, [pc, #72]	; (80036fc <HAL_GPIO_Init+0x334>)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3301      	adds	r3, #1
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	2b0f      	cmp	r3, #15
 80036c0:	f67f ae90 	bls.w	80033e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	3724      	adds	r7, #36	; 0x24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40013800 	.word	0x40013800
 80036dc:	40020000 	.word	0x40020000
 80036e0:	40020400 	.word	0x40020400
 80036e4:	40020800 	.word	0x40020800
 80036e8:	40020c00 	.word	0x40020c00
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40021400 	.word	0x40021400
 80036f4:	40021800 	.word	0x40021800
 80036f8:	40021c00 	.word	0x40021c00
 80036fc:	40013c00 	.word	0x40013c00

08003700 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af02      	add	r7, sp, #8
 8003706:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e101      	b.n	8003916 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d106      	bne.n	8003732 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f013 ffa7 	bl	8017680 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2203      	movs	r2, #3
 8003736:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003740:	d102      	bne.n	8003748 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f003 f9c6 	bl	8006ade <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7c1a      	ldrb	r2, [r3, #16]
 800375a:	f88d 2000 	strb.w	r2, [sp]
 800375e:	3304      	adds	r3, #4
 8003760:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003762:	f003 f8a5 	bl	80068b0 <USB_CoreInit>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0ce      	b.n	8003916 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f003 f9be 	bl	8006b00 <USB_SetCurrentMode>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2202      	movs	r2, #2
 800378e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e0bf      	b.n	8003916 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003796:	2300      	movs	r3, #0
 8003798:	73fb      	strb	r3, [r7, #15]
 800379a:	e04a      	b.n	8003832 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	3315      	adds	r3, #21
 80037ac:	2201      	movs	r2, #1
 80037ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	3314      	adds	r3, #20
 80037c0:	7bfa      	ldrb	r2, [r7, #15]
 80037c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	b298      	uxth	r0, r3
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	332e      	adds	r3, #46	; 0x2e
 80037d8:	4602      	mov	r2, r0
 80037da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	3318      	adds	r3, #24
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	331c      	adds	r3, #28
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	3320      	adds	r3, #32
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003818:	7bfa      	ldrb	r2, [r7, #15]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	3324      	adds	r3, #36	; 0x24
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	3301      	adds	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	791b      	ldrb	r3, [r3, #4]
 8003836:	7bfa      	ldrb	r2, [r7, #15]
 8003838:	429a      	cmp	r2, r3
 800383a:	d3af      	bcc.n	800379c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800383c:	2300      	movs	r3, #0
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	e044      	b.n	80038cc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800386a:	7bfa      	ldrb	r2, [r7, #15]
 800386c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800386e:	7bfa      	ldrb	r2, [r7, #15]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800389a:	7bfa      	ldrb	r2, [r7, #15]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038b0:	7bfa      	ldrb	r2, [r7, #15]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	3301      	adds	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	791b      	ldrb	r3, [r3, #4]
 80038d0:	7bfa      	ldrb	r2, [r7, #15]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d3b5      	bcc.n	8003842 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	7c1a      	ldrb	r2, [r3, #16]
 80038de:	f88d 2000 	strb.w	r2, [sp]
 80038e2:	3304      	adds	r3, #4
 80038e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038e6:	f003 f957 	bl	8006b98 <USB_DevInit>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e00c      	b.n	8003916 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f004 f99b 	bl	8007c4a <USB_DevDisconnect>

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_PCD_Start+0x1c>
 8003936:	2302      	movs	r3, #2
 8003938:	e022      	b.n	8003980 <HAL_PCD_Start+0x62>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003952:	2b01      	cmp	r3, #1
 8003954:	d105      	bne.n	8003962 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f003 f8a8 	bl	8006abc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f004 f949 	bl	8007c08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b08d      	sub	sp, #52	; 0x34
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f004 fa07 	bl	8007db2 <USB_GetMode>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f040 848c 	bne.w	80042c4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f004 f96b 	bl	8007c8c <USB_ReadInterrupts>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8482 	beq.w	80042c2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	0a1b      	lsrs	r3, r3, #8
 80039c8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f004 f958 	bl	8007c8c <USB_ReadInterrupts>
 80039dc:	4603      	mov	r3, r0
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d107      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695a      	ldr	r2, [r3, #20]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f002 0202 	and.w	r2, r2, #2
 80039f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f004 f946 	bl	8007c8c <USB_ReadInterrupts>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	2b10      	cmp	r3, #16
 8003a08:	d161      	bne.n	8003ace <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699a      	ldr	r2, [r3, #24]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0210 	bic.w	r2, r2, #16
 8003a18:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f003 020f 	and.w	r2, r3, #15
 8003a26:	4613      	mov	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	3304      	adds	r3, #4
 8003a38:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	0c5b      	lsrs	r3, r3, #17
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d124      	bne.n	8003a90 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d035      	beq.n	8003abe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	6a38      	ldr	r0, [r7, #32]
 8003a66:	f003 ff7d 	bl	8007964 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a76:	441a      	add	r2, r3
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	091b      	lsrs	r3, r3, #4
 8003a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a88:	441a      	add	r2, r3
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	615a      	str	r2, [r3, #20]
 8003a8e:	e016      	b.n	8003abe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	0c5b      	lsrs	r3, r3, #17
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	2b06      	cmp	r3, #6
 8003a9a:	d110      	bne.n	8003abe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	6a38      	ldr	r0, [r7, #32]
 8003aa8:	f003 ff5c 	bl	8007964 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	695a      	ldr	r2, [r3, #20]
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	091b      	lsrs	r3, r3, #4
 8003ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ab8:	441a      	add	r2, r3
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699a      	ldr	r2, [r3, #24]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0210 	orr.w	r2, r2, #16
 8003acc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f004 f8da 	bl	8007c8c <USB_ReadInterrupts>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ade:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ae2:	f040 80a7 	bne.w	8003c34 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f004 f8df 	bl	8007cb2 <USB_ReadDevAllOutEpInterrupt>
 8003af4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003af6:	e099      	b.n	8003c2c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 808e 	beq.w	8003c20 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f004 f903 	bl	8007d1a <USB_ReadDevOutEPInterrupt>
 8003b14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00c      	beq.n	8003b3a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2301      	movs	r3, #1
 8003b30:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fecf 	bl	80048d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00c      	beq.n	8003b5e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b50:	461a      	mov	r2, r3
 8003b52:	2308      	movs	r3, #8
 8003b54:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 ffa5 	bl	8004aa8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b74:	461a      	mov	r2, r3
 8003b76:	2310      	movs	r3, #16
 8003b78:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d030      	beq.n	8003be6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8c:	2b80      	cmp	r3, #128	; 0x80
 8003b8e:	d109      	bne.n	8003ba4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	69fa      	ldr	r2, [r7, #28]
 8003b9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ba2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	78db      	ldrb	r3, [r3, #3]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d108      	bne.n	8003bd4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	4619      	mov	r1, r3
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f013 fe9c 	bl	801790c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be0:	461a      	mov	r2, r3
 8003be2:	2302      	movs	r3, #2
 8003be4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	2320      	movs	r3, #32
 8003c00:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d009      	beq.n	8003c20 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c1e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	3301      	adds	r3, #1
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f47f af62 	bne.w	8003af8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f004 f827 	bl	8007c8c <USB_ReadInterrupts>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c48:	f040 80db 	bne.w	8003e02 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f004 f848 	bl	8007ce6 <USB_ReadDevAllInEpInterrupt>
 8003c56:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c5c:	e0cd      	b.n	8003dfa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80c2 	beq.w	8003dee <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	4611      	mov	r1, r2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f004 f86e 	bl	8007d56 <USB_ReadDevInEPInterrupt>
 8003c7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d057      	beq.n	8003d36 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	69f9      	ldr	r1, [r7, #28]
 8003ca2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	2301      	movs	r3, #1
 8003cba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	799b      	ldrb	r3, [r3, #6]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d132      	bne.n	8003d2a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3320      	adds	r3, #32
 8003cd4:	6819      	ldr	r1, [r3, #0]
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cda:	4613      	mov	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4403      	add	r3, r0
 8003ce4:	331c      	adds	r3, #28
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4419      	add	r1, r3
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cee:	4613      	mov	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4403      	add	r3, r0
 8003cf8:	3320      	adds	r3, #32
 8003cfa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d113      	bne.n	8003d2a <HAL_PCD_IRQHandler+0x3a2>
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	3324      	adds	r3, #36	; 0x24
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d108      	bne.n	8003d2a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003d22:	461a      	mov	r2, r3
 8003d24:	2101      	movs	r1, #1
 8003d26:	f004 f875 	bl	8007e14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	4619      	mov	r1, r3
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f013 fd66 	bl	8017802 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2308      	movs	r3, #8
 8003d50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d68:	461a      	mov	r2, r3
 8003d6a:	2310      	movs	r3, #16
 8003d6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d84:	461a      	mov	r2, r3
 8003d86:	2340      	movs	r3, #64	; 0x40
 8003d88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d023      	beq.n	8003ddc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d96:	6a38      	ldr	r0, [r7, #32]
 8003d98:	f003 f862 	bl	8006e60 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	3310      	adds	r3, #16
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4413      	add	r3, r2
 8003dac:	3304      	adds	r3, #4
 8003dae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	78db      	ldrb	r3, [r3, #3]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d108      	bne.n	8003dca <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f013 fdb3 	bl	8017930 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	2302      	movs	r3, #2
 8003dda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fce8 	bl	80047be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	3301      	adds	r3, #1
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f47f af2e 	bne.w	8003c5e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f003 ff40 	bl	8007c8c <USB_ReadInterrupts>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e16:	d122      	bne.n	8003e5e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d108      	bne.n	8003e48 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e3e:	2100      	movs	r1, #0
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fecf 	bl	8004be4 <HAL_PCDEx_LPM_Callback>
 8003e46:	e002      	b.n	8003e4e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f013 fd51 	bl	80178f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f003 ff12 	bl	8007c8c <USB_ReadInterrupts>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e72:	d112      	bne.n	8003e9a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d102      	bne.n	8003e8a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f013 fd0d 	bl	80178a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e98:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f003 fef4 	bl	8007c8c <USB_ReadInterrupts>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eae:	f040 80b7 	bne.w	8004020 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2110      	movs	r1, #16
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f002 ffc7 	bl	8006e60 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed6:	e046      	b.n	8003f66 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003eea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003efc:	0151      	lsls	r1, r2, #5
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	440a      	add	r2, r1
 8003f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f1e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f30:	0151      	lsls	r1, r2, #5
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	440a      	add	r2, r1
 8003f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f50:	0151      	lsls	r1, r2, #5
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	440a      	add	r2, r1
 8003f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f5e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f62:	3301      	adds	r3, #1
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	791b      	ldrb	r3, [r3, #4]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d3b2      	bcc.n	8003ed8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f80:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f84:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	7bdb      	ldrb	r3, [r3, #15]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f9e:	f043 030b 	orr.w	r3, r3, #11
 8003fa2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb4:	f043 030b 	orr.w	r3, r3, #11
 8003fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fba:	e015      	b.n	8003fe8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fce:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003fd2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fe2:	f043 030b 	orr.w	r3, r3, #11
 8003fe6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ff6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ffa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800400a:	461a      	mov	r2, r3
 800400c:	f003 ff02 	bl	8007e14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800401e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f003 fe31 	bl	8007c8c <USB_ReadInterrupts>
 800402a:	4603      	mov	r3, r0
 800402c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004034:	d123      	bne.n	800407e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f003 fec7 	bl	8007dce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f002 ff84 	bl	8006f52 <USB_GetDevSpeed>
 800404a:	4603      	mov	r3, r0
 800404c:	461a      	mov	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681c      	ldr	r4, [r3, #0]
 8004056:	f001 fa01 	bl	800545c <HAL_RCC_GetHCLKFreq>
 800405a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004060:	461a      	mov	r2, r3
 8004062:	4620      	mov	r0, r4
 8004064:	f002 fc88 	bl	8006978 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f013 fbf2 	bl	8017852 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800407c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f003 fe02 	bl	8007c8c <USB_ReadInterrupts>
 8004088:	4603      	mov	r3, r0
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b08      	cmp	r3, #8
 8004090:	d10a      	bne.n	80040a8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f013 fbcf 	bl	8017836 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f002 0208 	and.w	r2, r2, #8
 80040a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f003 fded 	bl	8007c8c <USB_ReadInterrupts>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b8:	2b80      	cmp	r3, #128	; 0x80
 80040ba:	d123      	bne.n	8004104 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040c8:	2301      	movs	r3, #1
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
 80040cc:	e014      	b.n	80040f8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d2:	4613      	mov	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	f203 2357 	addw	r3, r3, #599	; 0x257
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d105      	bne.n	80040f2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	4619      	mov	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fb08 	bl	8004702 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	3301      	adds	r3, #1
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	791b      	ldrb	r3, [r3, #4]
 80040fc:	461a      	mov	r2, r3
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	4293      	cmp	r3, r2
 8004102:	d3e4      	bcc.n	80040ce <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f003 fdbf 	bl	8007c8c <USB_ReadInterrupts>
 800410e:	4603      	mov	r3, r0
 8004110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004118:	d13c      	bne.n	8004194 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800411a:	2301      	movs	r3, #1
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
 800411e:	e02b      	b.n	8004178 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004134:	4613      	mov	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	3318      	adds	r3, #24
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d115      	bne.n	8004172 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004146:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004148:	2b00      	cmp	r3, #0
 800414a:	da12      	bge.n	8004172 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004150:	4613      	mov	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	3317      	adds	r3, #23
 800415c:	2201      	movs	r2, #1
 800415e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004168:	b2db      	uxtb	r3, r3
 800416a:	4619      	mov	r1, r3
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fac8 	bl	8004702 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	3301      	adds	r3, #1
 8004176:	627b      	str	r3, [r7, #36]	; 0x24
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	791b      	ldrb	r3, [r3, #4]
 800417c:	461a      	mov	r2, r3
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	4293      	cmp	r3, r2
 8004182:	d3cd      	bcc.n	8004120 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004192:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f003 fd77 	bl	8007c8c <USB_ReadInterrupts>
 800419e:	4603      	mov	r3, r0
 80041a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041a8:	d156      	bne.n	8004258 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041aa:	2301      	movs	r3, #1
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
 80041ae:	e045      	b.n	800423c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c4:	4613      	mov	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d12e      	bne.n	8004236 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80041da:	2b00      	cmp	r3, #0
 80041dc:	da2b      	bge.n	8004236 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80041ea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d121      	bne.n	8004236 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f6:	4613      	mov	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004204:	2201      	movs	r2, #1
 8004206:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800422e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004232:	6053      	str	r3, [r2, #4]
            break;
 8004234:	e008      	b.n	8004248 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	3301      	adds	r3, #1
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	791b      	ldrb	r3, [r3, #4]
 8004240:	461a      	mov	r2, r3
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	4293      	cmp	r3, r2
 8004246:	d3b3      	bcc.n	80041b0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004256:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f003 fd15 	bl	8007c8c <USB_ReadInterrupts>
 8004262:	4603      	mov	r3, r0
 8004264:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426c:	d10a      	bne.n	8004284 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f013 fb70 	bl	8017954 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695a      	ldr	r2, [r3, #20]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004282:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f003 fcff 	bl	8007c8c <USB_ReadInterrupts>
 800428e:	4603      	mov	r3, r0
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b04      	cmp	r3, #4
 8004296:	d115      	bne.n	80042c4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f013 fb60 	bl	8017970 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6859      	ldr	r1, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	430a      	orrs	r2, r1
 80042be:	605a      	str	r2, [r3, #4]
 80042c0:	e000      	b.n	80042c4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80042c2:	bf00      	nop
    }
  }
}
 80042c4:	3734      	adds	r7, #52	; 0x34
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd90      	pop	{r4, r7, pc}

080042ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	460b      	mov	r3, r1
 80042d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_PCD_SetAddress+0x1a>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e012      	b.n	800430a <HAL_PCD_SetAddress+0x40>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	4611      	mov	r1, r2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f003 fc5e 	bl	8007bbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	4608      	mov	r0, r1
 800431c:	4611      	mov	r1, r2
 800431e:	461a      	mov	r2, r3
 8004320:	4603      	mov	r3, r0
 8004322:	70fb      	strb	r3, [r7, #3]
 8004324:	460b      	mov	r3, r1
 8004326:	803b      	strh	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004334:	2b00      	cmp	r3, #0
 8004336:	da0f      	bge.n	8004358 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	f003 020f 	and.w	r2, r3, #15
 800433e:	4613      	mov	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	3310      	adds	r3, #16
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	4413      	add	r3, r2
 800434c:	3304      	adds	r3, #4
 800434e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2201      	movs	r2, #1
 8004354:	705a      	strb	r2, [r3, #1]
 8004356:	e00f      	b.n	8004378 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	f003 020f 	and.w	r2, r3, #15
 800435e:	4613      	mov	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4413      	add	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4413      	add	r3, r2
 800436e:	3304      	adds	r3, #4
 8004370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	b2da      	uxtb	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004384:	883a      	ldrh	r2, [r7, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	78ba      	ldrb	r2, [r7, #2]
 800438e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	785b      	ldrb	r3, [r3, #1]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d004      	beq.n	80043a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043a2:	78bb      	ldrb	r3, [r7, #2]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d102      	bne.n	80043ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_PCD_EP_Open+0xaa>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e00e      	b.n	80043da <HAL_PCD_EP_Open+0xc8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68f9      	ldr	r1, [r7, #12]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f002 fde6 	bl	8006f9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80043d8:	7afb      	ldrb	r3, [r7, #11]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	460b      	mov	r3, r1
 80043ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	da0f      	bge.n	8004416 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	f003 020f 	and.w	r2, r3, #15
 80043fc:	4613      	mov	r3, r2
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	4413      	add	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	3310      	adds	r3, #16
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4413      	add	r3, r2
 800440a:	3304      	adds	r3, #4
 800440c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	705a      	strb	r2, [r3, #1]
 8004414:	e00f      	b.n	8004436 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	f003 020f 	and.w	r2, r3, #15
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	4413      	add	r3, r2
 800442c:	3304      	adds	r3, #4
 800442e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	f003 030f 	and.w	r3, r3, #15
 800443c:	b2da      	uxtb	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_PCD_EP_Close+0x6e>
 800444c:	2302      	movs	r3, #2
 800444e:	e00e      	b.n	800446e <HAL_PCD_EP_Close+0x8c>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68f9      	ldr	r1, [r7, #12]
 800445e:	4618      	mov	r0, r3
 8004460:	f002 fe24 	bl	80070ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b086      	sub	sp, #24
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	460b      	mov	r3, r1
 8004484:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004486:	7afb      	ldrb	r3, [r7, #11]
 8004488:	f003 020f 	and.w	r2, r3, #15
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	3304      	adds	r3, #4
 800449e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2200      	movs	r2, #0
 80044b0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2200      	movs	r2, #0
 80044b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044b8:	7afb      	ldrb	r3, [r7, #11]
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	799b      	ldrb	r3, [r3, #6]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d102      	bne.n	80044d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	799b      	ldrb	r3, [r3, #6]
 80044da:	461a      	mov	r2, r3
 80044dc:	6979      	ldr	r1, [r7, #20]
 80044de:	f002 fec1 	bl	8007264 <USB_EPStartXfer>

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	f003 020f 	and.w	r2, r3, #15
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800450e:	681b      	ldr	r3, [r3, #0]
}
 8004510:	4618      	mov	r0, r3
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	607a      	str	r2, [r7, #4]
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	460b      	mov	r3, r1
 800452a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800452c:	7afb      	ldrb	r3, [r7, #11]
 800452e:	f003 020f 	and.w	r2, r3, #15
 8004532:	4613      	mov	r3, r2
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	3310      	adds	r3, #16
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	3304      	adds	r3, #4
 8004542:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2200      	movs	r2, #0
 8004554:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2201      	movs	r2, #1
 800455a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800455c:	7afb      	ldrb	r3, [r7, #11]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	b2da      	uxtb	r2, r3
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	799b      	ldrb	r3, [r3, #6]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d102      	bne.n	8004576 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	799b      	ldrb	r3, [r3, #6]
 800457e:	461a      	mov	r2, r3
 8004580:	6979      	ldr	r1, [r7, #20]
 8004582:	f002 fe6f 	bl	8007264 <USB_EPStartXfer>

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	7912      	ldrb	r2, [r2, #4]
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e04f      	b.n	800464e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	da0f      	bge.n	80045d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b6:	78fb      	ldrb	r3, [r7, #3]
 80045b8:	f003 020f 	and.w	r2, r3, #15
 80045bc:	4613      	mov	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	3310      	adds	r3, #16
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	4413      	add	r3, r2
 80045ca:	3304      	adds	r3, #4
 80045cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	705a      	strb	r2, [r3, #1]
 80045d4:	e00d      	b.n	80045f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045d6:	78fa      	ldrb	r2, [r7, #3]
 80045d8:	4613      	mov	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	4413      	add	r3, r2
 80045e8:	3304      	adds	r3, #4
 80045ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_PCD_EP_SetStall+0x82>
 800460e:	2302      	movs	r3, #2
 8004610:	e01d      	b.n	800464e <HAL_PCD_EP_SetStall+0xbe>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68f9      	ldr	r1, [r7, #12]
 8004620:	4618      	mov	r0, r3
 8004622:	f003 f9f7 	bl	8007a14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004626:	78fb      	ldrb	r3, [r7, #3]
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	2b00      	cmp	r3, #0
 800462e:	d109      	bne.n	8004644 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	7999      	ldrb	r1, [r3, #6]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800463e:	461a      	mov	r2, r3
 8004640:	f003 fbe8 	bl	8007e14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	460b      	mov	r3, r1
 8004660:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004662:	78fb      	ldrb	r3, [r7, #3]
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	7912      	ldrb	r2, [r2, #4]
 800466c:	4293      	cmp	r3, r2
 800466e:	d901      	bls.n	8004674 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e042      	b.n	80046fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004674:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004678:	2b00      	cmp	r3, #0
 800467a:	da0f      	bge.n	800469c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	f003 020f 	and.w	r2, r3, #15
 8004682:	4613      	mov	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	3310      	adds	r3, #16
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	4413      	add	r3, r2
 8004690:	3304      	adds	r3, #4
 8004692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	705a      	strb	r2, [r3, #1]
 800469a:	e00f      	b.n	80046bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	f003 020f 	and.w	r2, r3, #15
 80046a2:	4613      	mov	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	4413      	add	r3, r2
 80046b2:	3304      	adds	r3, #4
 80046b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_PCD_EP_ClrStall+0x86>
 80046d8:	2302      	movs	r3, #2
 80046da:	e00e      	b.n	80046fa <HAL_PCD_EP_ClrStall+0xa4>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68f9      	ldr	r1, [r7, #12]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f003 fa00 	bl	8007af0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b084      	sub	sp, #16
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	460b      	mov	r3, r1
 800470c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800470e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004712:	2b00      	cmp	r3, #0
 8004714:	da0c      	bge.n	8004730 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004716:	78fb      	ldrb	r3, [r7, #3]
 8004718:	f003 020f 	and.w	r2, r3, #15
 800471c:	4613      	mov	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	3310      	adds	r3, #16
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	3304      	adds	r3, #4
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	e00c      	b.n	800474a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	f003 020f 	and.w	r2, r3, #15
 8004736:	4613      	mov	r3, r2
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	4413      	add	r3, r2
 8004746:	3304      	adds	r3, #4
 8004748:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68f9      	ldr	r1, [r7, #12]
 8004750:	4618      	mov	r0, r3
 8004752:	f003 f81f 	bl	8007794 <USB_EPStopXfer>
 8004756:	4603      	mov	r3, r0
 8004758:	72fb      	strb	r3, [r7, #11]

  return ret;
 800475a:	7afb      	ldrb	r3, [r7, #11]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_PCD_EP_Flush+0x1a>
 800477a:	2302      	movs	r3, #2
 800477c:	e01b      	b.n	80047b6 <HAL_PCD_EP_Flush+0x52>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8004786:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800478a:	2b00      	cmp	r3, #0
 800478c:	da09      	bge.n	80047a2 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	78fb      	ldrb	r3, [r7, #3]
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	4619      	mov	r1, r3
 800479a:	4610      	mov	r0, r2
 800479c:	f002 fb60 	bl	8006e60 <USB_FlushTxFifo>
 80047a0:	e004      	b.n	80047ac <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f002 fb8c 	bl	8006ec4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b08a      	sub	sp, #40	; 0x28
 80047c2:	af02      	add	r7, sp, #8
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	3310      	adds	r3, #16
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	4413      	add	r3, r2
 80047e2:	3304      	adds	r3, #4
 80047e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	695a      	ldr	r2, [r3, #20]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d901      	bls.n	80047f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e06b      	b.n	80048ce <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	429a      	cmp	r2, r3
 800480a:	d902      	bls.n	8004812 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	3303      	adds	r3, #3
 8004816:	089b      	lsrs	r3, r3, #2
 8004818:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800481a:	e02a      	b.n	8004872 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	429a      	cmp	r2, r3
 8004830:	d902      	bls.n	8004838 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	3303      	adds	r3, #3
 800483c:	089b      	lsrs	r3, r3, #2
 800483e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	68d9      	ldr	r1, [r3, #12]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	b2da      	uxtb	r2, r3
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	4603      	mov	r3, r0
 8004854:	6978      	ldr	r0, [r7, #20]
 8004856:	f003 f847 	bl	80078e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	441a      	add	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	695a      	ldr	r2, [r3, #20]
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	441a      	add	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4413      	add	r3, r2
 800487a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	429a      	cmp	r2, r3
 8004886:	d809      	bhi.n	800489c <PCD_WriteEmptyTxFifo+0xde>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	695a      	ldr	r2, [r3, #20]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004890:	429a      	cmp	r2, r3
 8004892:	d203      	bcs.n	800489c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1bf      	bne.n	800481c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d811      	bhi.n	80048cc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	2201      	movs	r2, #1
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	6939      	ldr	r1, [r7, #16]
 80048c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048c8:	4013      	ands	r3, r2
 80048ca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3720      	adds	r7, #32
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	333c      	adds	r3, #60	; 0x3c
 80048f0:	3304      	adds	r3, #4
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	799b      	ldrb	r3, [r3, #6]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d17b      	bne.n	8004a06 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b00      	cmp	r3, #0
 8004916:	d015      	beq.n	8004944 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	4a61      	ldr	r2, [pc, #388]	; (8004aa0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	f240 80b9 	bls.w	8004a94 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 80b3 	beq.w	8004a94 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493a:	461a      	mov	r2, r3
 800493c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004940:	6093      	str	r3, [r2, #8]
 8004942:	e0a7      	b.n	8004a94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495a:	461a      	mov	r2, r3
 800495c:	2320      	movs	r3, #32
 800495e:	6093      	str	r3, [r2, #8]
 8004960:	e098      	b.n	8004a94 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004968:	2b00      	cmp	r3, #0
 800496a:	f040 8093 	bne.w	8004a94 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	4a4b      	ldr	r2, [pc, #300]	; (8004aa0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d90f      	bls.n	8004996 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498c:	461a      	mov	r2, r3
 800498e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004992:	6093      	str	r3, [r2, #8]
 8004994:	e07e      	b.n	8004a94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	4613      	mov	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	4413      	add	r3, r2
 80049a8:	3304      	adds	r3, #4
 80049aa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a1a      	ldr	r2, [r3, #32]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	0159      	lsls	r1, r3, #5
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	440b      	add	r3, r1
 80049b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c2:	1ad2      	subs	r2, r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d114      	bne.n	80049f8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80049e0:	461a      	mov	r2, r3
 80049e2:	2101      	movs	r1, #1
 80049e4:	f003 fa16 	bl	8007e14 <USB_EP0_OutStart>
 80049e8:	e006      	b.n	80049f8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	441a      	add	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	4619      	mov	r1, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f012 fee4 	bl	80177cc <HAL_PCD_DataOutStageCallback>
 8004a04:	e046      	b.n	8004a94 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	4a26      	ldr	r2, [pc, #152]	; (8004aa4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d124      	bne.n	8004a58 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a24:	461a      	mov	r2, r3
 8004a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a2a:	6093      	str	r3, [r2, #8]
 8004a2c:	e032      	b.n	8004a94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a44:	461a      	mov	r2, r3
 8004a46:	2320      	movs	r3, #32
 8004a48:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	4619      	mov	r1, r3
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f012 febb 	bl	80177cc <HAL_PCD_DataOutStageCallback>
 8004a56:	e01d      	b.n	8004a94 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d114      	bne.n	8004a88 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	4613      	mov	r3, r2
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d108      	bne.n	8004a88 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6818      	ldr	r0, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004a80:	461a      	mov	r2, r3
 8004a82:	2100      	movs	r1, #0
 8004a84:	f003 f9c6 	bl	8007e14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f012 fe9c 	bl	80177cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	4f54300a 	.word	0x4f54300a
 8004aa4:	4f54310a 	.word	0x4f54310a

08004aa8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	333c      	adds	r3, #60	; 0x3c
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4a15      	ldr	r2, [pc, #84]	; (8004b30 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d90e      	bls.n	8004afc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d009      	beq.n	8004afc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af4:	461a      	mov	r2, r3
 8004af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004afa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f012 fe53 	bl	80177a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4a0a      	ldr	r2, [pc, #40]	; (8004b30 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d90c      	bls.n	8004b24 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	799b      	ldrb	r3, [r3, #6]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d108      	bne.n	8004b24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	2101      	movs	r1, #1
 8004b20:	f003 f978 	bl	8007e14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	4f54300a 	.word	0x4f54300a

08004b34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	70fb      	strb	r3, [r7, #3]
 8004b40:	4613      	mov	r3, r2
 8004b42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004b4c:	78fb      	ldrb	r3, [r7, #3]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d107      	bne.n	8004b62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004b52:	883b      	ldrh	r3, [r7, #0]
 8004b54:	0419      	lsls	r1, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b60:	e028      	b.n	8004bb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b68:	0c1b      	lsrs	r3, r3, #16
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b70:	2300      	movs	r3, #0
 8004b72:	73fb      	strb	r3, [r7, #15]
 8004b74:	e00d      	b.n	8004b92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	3340      	adds	r3, #64	; 0x40
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	0c1b      	lsrs	r3, r3, #16
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	4413      	add	r3, r2
 8004b8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
 8004b92:	7bfa      	ldrb	r2, [r7, #15]
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d3ec      	bcc.n	8004b76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b9c:	883b      	ldrh	r3, [r7, #0]
 8004b9e:	0418      	lsls	r0, r3, #16
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6819      	ldr	r1, [r3, #0]
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	4302      	orrs	r2, r0
 8004bac:	3340      	adds	r3, #64	; 0x40
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	887a      	ldrh	r2, [r7, #2]
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e267      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d075      	beq.n	8004d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c1a:	4b88      	ldr	r3, [pc, #544]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d00c      	beq.n	8004c40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c26:	4b85      	ldr	r3, [pc, #532]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d112      	bne.n	8004c58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c32:	4b82      	ldr	r3, [pc, #520]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c3e:	d10b      	bne.n	8004c58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c40:	4b7e      	ldr	r3, [pc, #504]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d05b      	beq.n	8004d04 <HAL_RCC_OscConfig+0x108>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d157      	bne.n	8004d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e242      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c60:	d106      	bne.n	8004c70 <HAL_RCC_OscConfig+0x74>
 8004c62:	4b76      	ldr	r3, [pc, #472]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a75      	ldr	r2, [pc, #468]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e01d      	b.n	8004cac <HAL_RCC_OscConfig+0xb0>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c78:	d10c      	bne.n	8004c94 <HAL_RCC_OscConfig+0x98>
 8004c7a:	4b70      	ldr	r3, [pc, #448]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a6f      	ldr	r2, [pc, #444]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	4b6d      	ldr	r3, [pc, #436]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a6c      	ldr	r2, [pc, #432]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	e00b      	b.n	8004cac <HAL_RCC_OscConfig+0xb0>
 8004c94:	4b69      	ldr	r3, [pc, #420]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a68      	ldr	r2, [pc, #416]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	4b66      	ldr	r3, [pc, #408]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a65      	ldr	r2, [pc, #404]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d013      	beq.n	8004cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb4:	f7fc fd42 	bl	800173c <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cbc:	f7fc fd3e 	bl	800173c <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b64      	cmp	r3, #100	; 0x64
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e207      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cce:	4b5b      	ldr	r3, [pc, #364]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0xc0>
 8004cda:	e014      	b.n	8004d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cdc:	f7fc fd2e 	bl	800173c <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ce4:	f7fc fd2a 	bl	800173c <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	; 0x64
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e1f3      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cf6:	4b51      	ldr	r3, [pc, #324]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0xe8>
 8004d02:	e000      	b.n	8004d06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d063      	beq.n	8004dda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d12:	4b4a      	ldr	r3, [pc, #296]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d1e:	4b47      	ldr	r3, [pc, #284]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d11c      	bne.n	8004d64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d2a:	4b44      	ldr	r3, [pc, #272]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d116      	bne.n	8004d64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d36:	4b41      	ldr	r3, [pc, #260]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <HAL_RCC_OscConfig+0x152>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d001      	beq.n	8004d4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e1c7      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4e:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	4937      	ldr	r1, [pc, #220]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d62:	e03a      	b.n	8004dda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d020      	beq.n	8004dae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d6c:	4b34      	ldr	r3, [pc, #208]	; (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004d6e:	2201      	movs	r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d72:	f7fc fce3 	bl	800173c <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d7a:	f7fc fcdf 	bl	800173c <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e1a8      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d8c:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0f0      	beq.n	8004d7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d98:	4b28      	ldr	r3, [pc, #160]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	4925      	ldr	r1, [pc, #148]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	600b      	str	r3, [r1, #0]
 8004dac:	e015      	b.n	8004dda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dae:	4b24      	ldr	r3, [pc, #144]	; (8004e40 <HAL_RCC_OscConfig+0x244>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fc fcc2 	bl	800173c <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dbc:	f7fc fcbe 	bl	800173c <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e187      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dce:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d036      	beq.n	8004e54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d016      	beq.n	8004e1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dee:	4b15      	ldr	r3, [pc, #84]	; (8004e44 <HAL_RCC_OscConfig+0x248>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df4:	f7fc fca2 	bl	800173c <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dfc:	f7fc fc9e 	bl	800173c <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e167      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0e:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_RCC_OscConfig+0x240>)
 8004e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCC_OscConfig+0x200>
 8004e1a:	e01b      	b.n	8004e54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <HAL_RCC_OscConfig+0x248>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e22:	f7fc fc8b 	bl	800173c <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e28:	e00e      	b.n	8004e48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e2a:	f7fc fc87 	bl	800173c <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d907      	bls.n	8004e48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e150      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	42470000 	.word	0x42470000
 8004e44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e48:	4b88      	ldr	r3, [pc, #544]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1ea      	bne.n	8004e2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8097 	beq.w	8004f90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e62:	2300      	movs	r3, #0
 8004e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e66:	4b81      	ldr	r3, [pc, #516]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10f      	bne.n	8004e92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e72:	2300      	movs	r3, #0
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	4b7d      	ldr	r3, [pc, #500]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	4a7c      	ldr	r2, [pc, #496]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e80:	6413      	str	r3, [r2, #64]	; 0x40
 8004e82:	4b7a      	ldr	r3, [pc, #488]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	60bb      	str	r3, [r7, #8]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e92:	4b77      	ldr	r3, [pc, #476]	; (8005070 <HAL_RCC_OscConfig+0x474>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d118      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e9e:	4b74      	ldr	r3, [pc, #464]	; (8005070 <HAL_RCC_OscConfig+0x474>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a73      	ldr	r2, [pc, #460]	; (8005070 <HAL_RCC_OscConfig+0x474>)
 8004ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eaa:	f7fc fc47 	bl	800173c <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb2:	f7fc fc43 	bl	800173c <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e10c      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec4:	4b6a      	ldr	r3, [pc, #424]	; (8005070 <HAL_RCC_OscConfig+0x474>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0f0      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d106      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x2ea>
 8004ed8:	4b64      	ldr	r3, [pc, #400]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004edc:	4a63      	ldr	r2, [pc, #396]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee4:	e01c      	b.n	8004f20 <HAL_RCC_OscConfig+0x324>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	2b05      	cmp	r3, #5
 8004eec:	d10c      	bne.n	8004f08 <HAL_RCC_OscConfig+0x30c>
 8004eee:	4b5f      	ldr	r3, [pc, #380]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef2:	4a5e      	ldr	r2, [pc, #376]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004ef4:	f043 0304 	orr.w	r3, r3, #4
 8004ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8004efa:	4b5c      	ldr	r3, [pc, #368]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	4a5b      	ldr	r2, [pc, #364]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004f00:	f043 0301 	orr.w	r3, r3, #1
 8004f04:	6713      	str	r3, [r2, #112]	; 0x70
 8004f06:	e00b      	b.n	8004f20 <HAL_RCC_OscConfig+0x324>
 8004f08:	4b58      	ldr	r3, [pc, #352]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0c:	4a57      	ldr	r2, [pc, #348]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004f0e:	f023 0301 	bic.w	r3, r3, #1
 8004f12:	6713      	str	r3, [r2, #112]	; 0x70
 8004f14:	4b55      	ldr	r3, [pc, #340]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f18:	4a54      	ldr	r2, [pc, #336]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004f1a:	f023 0304 	bic.w	r3, r3, #4
 8004f1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d015      	beq.n	8004f54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f28:	f7fc fc08 	bl	800173c <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2e:	e00a      	b.n	8004f46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f30:	f7fc fc04 	bl	800173c <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e0cb      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f46:	4b49      	ldr	r3, [pc, #292]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0ee      	beq.n	8004f30 <HAL_RCC_OscConfig+0x334>
 8004f52:	e014      	b.n	8004f7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f54:	f7fc fbf2 	bl	800173c <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f5a:	e00a      	b.n	8004f72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f5c:	f7fc fbee 	bl	800173c <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e0b5      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f72:	4b3e      	ldr	r3, [pc, #248]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1ee      	bne.n	8004f5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d105      	bne.n	8004f90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f84:	4b39      	ldr	r3, [pc, #228]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	4a38      	ldr	r2, [pc, #224]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80a1 	beq.w	80050dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f9a:	4b34      	ldr	r3, [pc, #208]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
 8004fa2:	2b08      	cmp	r3, #8
 8004fa4:	d05c      	beq.n	8005060 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d141      	bne.n	8005032 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fae:	4b31      	ldr	r3, [pc, #196]	; (8005074 <HAL_RCC_OscConfig+0x478>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb4:	f7fc fbc2 	bl	800173c <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fbc:	f7fc fbbe 	bl	800173c <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e087      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fce:	4b27      	ldr	r3, [pc, #156]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1f0      	bne.n	8004fbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69da      	ldr	r2, [r3, #28]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	019b      	lsls	r3, r3, #6
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	085b      	lsrs	r3, r3, #1
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	041b      	lsls	r3, r3, #16
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	061b      	lsls	r3, r3, #24
 8004ffe:	491b      	ldr	r1, [pc, #108]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8005000:	4313      	orrs	r3, r2
 8005002:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005004:	4b1b      	ldr	r3, [pc, #108]	; (8005074 <HAL_RCC_OscConfig+0x478>)
 8005006:	2201      	movs	r2, #1
 8005008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500a:	f7fc fb97 	bl	800173c <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005012:	f7fc fb93 	bl	800173c <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e05c      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005024:	4b11      	ldr	r3, [pc, #68]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <HAL_RCC_OscConfig+0x416>
 8005030:	e054      	b.n	80050dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005032:	4b10      	ldr	r3, [pc, #64]	; (8005074 <HAL_RCC_OscConfig+0x478>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005038:	f7fc fb80 	bl	800173c <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005040:	f7fc fb7c 	bl	800173c <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e045      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005052:	4b06      	ldr	r3, [pc, #24]	; (800506c <HAL_RCC_OscConfig+0x470>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x444>
 800505e:	e03d      	b.n	80050dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d107      	bne.n	8005078 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e038      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
 800506c:	40023800 	.word	0x40023800
 8005070:	40007000 	.word	0x40007000
 8005074:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005078:	4b1b      	ldr	r3, [pc, #108]	; (80050e8 <HAL_RCC_OscConfig+0x4ec>)
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d028      	beq.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005090:	429a      	cmp	r2, r3
 8005092:	d121      	bne.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800509e:	429a      	cmp	r2, r3
 80050a0:	d11a      	bne.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050a8:	4013      	ands	r3, r2
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d111      	bne.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	085b      	lsrs	r3, r3, #1
 80050c0:	3b01      	subs	r3, #1
 80050c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d107      	bne.n	80050d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d001      	beq.n	80050dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40023800 	.word	0x40023800

080050ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0cc      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005100:	4b68      	ldr	r3, [pc, #416]	; (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d90c      	bls.n	8005128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510e:	4b65      	ldr	r3, [pc, #404]	; (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005116:	4b63      	ldr	r3, [pc, #396]	; (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	429a      	cmp	r2, r3
 8005122:	d001      	beq.n	8005128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e0b8      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d020      	beq.n	8005176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005140:	4b59      	ldr	r3, [pc, #356]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	4a58      	ldr	r2, [pc, #352]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800514a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b00      	cmp	r3, #0
 8005156:	d005      	beq.n	8005164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005158:	4b53      	ldr	r3, [pc, #332]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	4a52      	ldr	r2, [pc, #328]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005164:	4b50      	ldr	r3, [pc, #320]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	494d      	ldr	r1, [pc, #308]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005172:	4313      	orrs	r3, r2
 8005174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d044      	beq.n	800520c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d107      	bne.n	800519a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800518a:	4b47      	ldr	r3, [pc, #284]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d119      	bne.n	80051ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e07f      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d003      	beq.n	80051aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d107      	bne.n	80051ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051aa:	4b3f      	ldr	r3, [pc, #252]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e06f      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ba:	4b3b      	ldr	r3, [pc, #236]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e067      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ca:	4b37      	ldr	r3, [pc, #220]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f023 0203 	bic.w	r2, r3, #3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	4934      	ldr	r1, [pc, #208]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051dc:	f7fc faae 	bl	800173c <HAL_GetTick>
 80051e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e2:	e00a      	b.n	80051fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e4:	f7fc faaa 	bl	800173c <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e04f      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051fa:	4b2b      	ldr	r3, [pc, #172]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 020c 	and.w	r2, r3, #12
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	429a      	cmp	r2, r3
 800520a:	d1eb      	bne.n	80051e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800520c:	4b25      	ldr	r3, [pc, #148]	; (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d20c      	bcs.n	8005234 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521a:	4b22      	ldr	r3, [pc, #136]	; (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005222:	4b20      	ldr	r3, [pc, #128]	; (80052a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d001      	beq.n	8005234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e032      	b.n	800529a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005240:	4b19      	ldr	r3, [pc, #100]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	4916      	ldr	r1, [pc, #88]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800524e:	4313      	orrs	r3, r2
 8005250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d009      	beq.n	8005272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800525e:	4b12      	ldr	r3, [pc, #72]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	490e      	ldr	r1, [pc, #56]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	4313      	orrs	r3, r2
 8005270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005272:	f000 f82d 	bl	80052d0 <HAL_RCC_GetSysClockFreq>
 8005276:	4602      	mov	r2, r0
 8005278:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	490a      	ldr	r1, [pc, #40]	; (80052ac <HAL_RCC_ClockConfig+0x1c0>)
 8005284:	5ccb      	ldrb	r3, [r1, r3]
 8005286:	fa22 f303 	lsr.w	r3, r2, r3
 800528a:	4a09      	ldr	r2, [pc, #36]	; (80052b0 <HAL_RCC_ClockConfig+0x1c4>)
 800528c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800528e:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7fc fa0e 	bl	80016b4 <HAL_InitTick>

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40023c00 	.word	0x40023c00
 80052a8:	40023800 	.word	0x40023800
 80052ac:	0801ba18 	.word	0x0801ba18
 80052b0:	20000000 	.word	0x20000000
 80052b4:	20000004 	.word	0x20000004

080052b8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80052bc:	4b03      	ldr	r3, [pc, #12]	; (80052cc <HAL_RCC_EnableCSS+0x14>)
 80052be:	2201      	movs	r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
}
 80052c2:	bf00      	nop
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	4247004c 	.word	0x4247004c

080052d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052d4:	b090      	sub	sp, #64	; 0x40
 80052d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	637b      	str	r3, [r7, #52]	; 0x34
 80052dc:	2300      	movs	r3, #0
 80052de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e0:	2300      	movs	r3, #0
 80052e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052e8:	4b59      	ldr	r3, [pc, #356]	; (8005450 <HAL_RCC_GetSysClockFreq+0x180>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 030c 	and.w	r3, r3, #12
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d00d      	beq.n	8005310 <HAL_RCC_GetSysClockFreq+0x40>
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	f200 80a1 	bhi.w	800543c <HAL_RCC_GetSysClockFreq+0x16c>
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <HAL_RCC_GetSysClockFreq+0x34>
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d003      	beq.n	800530a <HAL_RCC_GetSysClockFreq+0x3a>
 8005302:	e09b      	b.n	800543c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005304:	4b53      	ldr	r3, [pc, #332]	; (8005454 <HAL_RCC_GetSysClockFreq+0x184>)
 8005306:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005308:	e09b      	b.n	8005442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800530a:	4b53      	ldr	r3, [pc, #332]	; (8005458 <HAL_RCC_GetSysClockFreq+0x188>)
 800530c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800530e:	e098      	b.n	8005442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005310:	4b4f      	ldr	r3, [pc, #316]	; (8005450 <HAL_RCC_GetSysClockFreq+0x180>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005318:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800531a:	4b4d      	ldr	r3, [pc, #308]	; (8005450 <HAL_RCC_GetSysClockFreq+0x180>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d028      	beq.n	8005378 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005326:	4b4a      	ldr	r3, [pc, #296]	; (8005450 <HAL_RCC_GetSysClockFreq+0x180>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	099b      	lsrs	r3, r3, #6
 800532c:	2200      	movs	r2, #0
 800532e:	623b      	str	r3, [r7, #32]
 8005330:	627a      	str	r2, [r7, #36]	; 0x24
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005338:	2100      	movs	r1, #0
 800533a:	4b47      	ldr	r3, [pc, #284]	; (8005458 <HAL_RCC_GetSysClockFreq+0x188>)
 800533c:	fb03 f201 	mul.w	r2, r3, r1
 8005340:	2300      	movs	r3, #0
 8005342:	fb00 f303 	mul.w	r3, r0, r3
 8005346:	4413      	add	r3, r2
 8005348:	4a43      	ldr	r2, [pc, #268]	; (8005458 <HAL_RCC_GetSysClockFreq+0x188>)
 800534a:	fba0 1202 	umull	r1, r2, r0, r2
 800534e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005350:	460a      	mov	r2, r1
 8005352:	62ba      	str	r2, [r7, #40]	; 0x28
 8005354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005356:	4413      	add	r3, r2
 8005358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800535a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535c:	2200      	movs	r2, #0
 800535e:	61bb      	str	r3, [r7, #24]
 8005360:	61fa      	str	r2, [r7, #28]
 8005362:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005366:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800536a:	f7fa ff81 	bl	8000270 <__aeabi_uldivmod>
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	4613      	mov	r3, r2
 8005374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005376:	e053      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005378:	4b35      	ldr	r3, [pc, #212]	; (8005450 <HAL_RCC_GetSysClockFreq+0x180>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	099b      	lsrs	r3, r3, #6
 800537e:	2200      	movs	r2, #0
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	617a      	str	r2, [r7, #20]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800538a:	f04f 0b00 	mov.w	fp, #0
 800538e:	4652      	mov	r2, sl
 8005390:	465b      	mov	r3, fp
 8005392:	f04f 0000 	mov.w	r0, #0
 8005396:	f04f 0100 	mov.w	r1, #0
 800539a:	0159      	lsls	r1, r3, #5
 800539c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053a0:	0150      	lsls	r0, r2, #5
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	ebb2 080a 	subs.w	r8, r2, sl
 80053aa:	eb63 090b 	sbc.w	r9, r3, fp
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80053ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80053be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80053c2:	ebb2 0408 	subs.w	r4, r2, r8
 80053c6:	eb63 0509 	sbc.w	r5, r3, r9
 80053ca:	f04f 0200 	mov.w	r2, #0
 80053ce:	f04f 0300 	mov.w	r3, #0
 80053d2:	00eb      	lsls	r3, r5, #3
 80053d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053d8:	00e2      	lsls	r2, r4, #3
 80053da:	4614      	mov	r4, r2
 80053dc:	461d      	mov	r5, r3
 80053de:	eb14 030a 	adds.w	r3, r4, sl
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	eb45 030b 	adc.w	r3, r5, fp
 80053e8:	607b      	str	r3, [r7, #4]
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	f04f 0300 	mov.w	r3, #0
 80053f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053f6:	4629      	mov	r1, r5
 80053f8:	028b      	lsls	r3, r1, #10
 80053fa:	4621      	mov	r1, r4
 80053fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005400:	4621      	mov	r1, r4
 8005402:	028a      	lsls	r2, r1, #10
 8005404:	4610      	mov	r0, r2
 8005406:	4619      	mov	r1, r3
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	2200      	movs	r2, #0
 800540c:	60bb      	str	r3, [r7, #8]
 800540e:	60fa      	str	r2, [r7, #12]
 8005410:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005414:	f7fa ff2c 	bl	8000270 <__aeabi_uldivmod>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4613      	mov	r3, r2
 800541e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005420:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <HAL_RCC_GetSysClockFreq+0x180>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	0c1b      	lsrs	r3, r3, #16
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	3301      	adds	r3, #1
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	fbb2 f3f3 	udiv	r3, r2, r3
 8005438:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800543a:	e002      	b.n	8005442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800543c:	4b05      	ldr	r3, [pc, #20]	; (8005454 <HAL_RCC_GetSysClockFreq+0x184>)
 800543e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005444:	4618      	mov	r0, r3
 8005446:	3740      	adds	r7, #64	; 0x40
 8005448:	46bd      	mov	sp, r7
 800544a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800544e:	bf00      	nop
 8005450:	40023800 	.word	0x40023800
 8005454:	00f42400 	.word	0x00f42400
 8005458:	017d7840 	.word	0x017d7840

0800545c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005460:	4b03      	ldr	r3, [pc, #12]	; (8005470 <HAL_RCC_GetHCLKFreq+0x14>)
 8005462:	681b      	ldr	r3, [r3, #0]
}
 8005464:	4618      	mov	r0, r3
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	20000000 	.word	0x20000000

08005474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005478:	f7ff fff0 	bl	800545c <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b05      	ldr	r3, [pc, #20]	; (8005494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	0a9b      	lsrs	r3, r3, #10
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4903      	ldr	r1, [pc, #12]	; (8005498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005490:	4618      	mov	r0, r3
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40023800 	.word	0x40023800
 8005498:	0801ba28 	.word	0x0801ba28

0800549c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054a0:	f7ff ffdc 	bl	800545c <HAL_RCC_GetHCLKFreq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	4b05      	ldr	r3, [pc, #20]	; (80054bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	0b5b      	lsrs	r3, r3, #13
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	4903      	ldr	r1, [pc, #12]	; (80054c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054b2:	5ccb      	ldrb	r3, [r1, r3]
 80054b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40023800 	.word	0x40023800
 80054c0:	0801ba28 	.word	0x0801ba28

080054c4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80054c8:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d0:	2b80      	cmp	r3, #128	; 0x80
 80054d2:	d104      	bne.n	80054de <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80054d4:	f000 f80a 	bl	80054ec <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80054d8:	4b03      	ldr	r3, [pc, #12]	; (80054e8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80054da:	2280      	movs	r2, #128	; 0x80
 80054dc:	701a      	strb	r2, [r3, #0]
  }
}
 80054de:	bf00      	nop
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40023800 	.word	0x40023800
 80054e8:	4002380e 	.word	0x4002380e

080054ec <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e042      	b.n	8005592 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d106      	bne.n	8005526 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7fb f9a3 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2224      	movs	r2, #36	; 0x24
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800553c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 ff42 	bl	80063c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691a      	ldr	r2, [r3, #16]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005552:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695a      	ldr	r2, [r3, #20]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005562:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005572:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2220      	movs	r2, #32
 8005586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08c      	sub	sp, #48	; 0x30
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	4613      	mov	r3, r2
 80055a8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d156      	bne.n	8005664 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <HAL_UART_Transmit_DMA+0x26>
 80055bc:	88fb      	ldrh	r3, [r7, #6]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e04f      	b.n	8005666 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	88fa      	ldrh	r2, [r7, #6]
 80055d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	88fa      	ldrh	r2, [r7, #6]
 80055d6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2221      	movs	r2, #33	; 0x21
 80055e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	4a21      	ldr	r2, [pc, #132]	; (8005670 <HAL_UART_Transmit_DMA+0xd4>)
 80055ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	4a20      	ldr	r2, [pc, #128]	; (8005674 <HAL_UART_Transmit_DMA+0xd8>)
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	4a1f      	ldr	r2, [pc, #124]	; (8005678 <HAL_UART_Transmit_DMA+0xdc>)
 80055fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	2200      	movs	r2, #0
 8005604:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005606:	f107 0308 	add.w	r3, r7, #8
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	6819      	ldr	r1, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3304      	adds	r3, #4
 800561a:	461a      	mov	r2, r3
 800561c:	88fb      	ldrh	r3, [r7, #6]
 800561e:	f7fc fa7d 	bl	8001b1c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800562a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3314      	adds	r3, #20
 8005632:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	617b      	str	r3, [r7, #20]
   return(result);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3314      	adds	r3, #20
 800564a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800564c:	627a      	str	r2, [r7, #36]	; 0x24
 800564e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6a39      	ldr	r1, [r7, #32]
 8005652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	61fb      	str	r3, [r7, #28]
   return(result);
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e5      	bne.n	800562c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	3730      	adds	r7, #48	; 0x30
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	08005c55 	.word	0x08005c55
 8005674:	08005cef 	.word	0x08005cef
 8005678:	08005e73 	.word	0x08005e73

0800567c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	4613      	mov	r3, r2
 8005688:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b20      	cmp	r3, #32
 8005694:	d112      	bne.n	80056bc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <HAL_UART_Receive_DMA+0x26>
 800569c:	88fb      	ldrh	r3, [r7, #6]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e00b      	b.n	80056be <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80056ac:	88fb      	ldrh	r3, [r7, #6]
 80056ae:	461a      	mov	r2, r3
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 fc28 	bl	8005f08 <UART_Start_Receive_DMA>
 80056b8:	4603      	mov	r3, r0
 80056ba:	e000      	b.n	80056be <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80056bc:	2302      	movs	r3, #2
  }
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b0ba      	sub	sp, #232	; 0xe8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10f      	bne.n	800572e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <HAL_UART_IRQHandler+0x66>
 800571a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fd8f 	bl	800624a <UART_Receive_IT>
      return;
 800572c:	e25b      	b.n	8005be6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800572e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80de 	beq.w	80058f4 <HAL_UART_IRQHandler+0x22c>
 8005738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d106      	bne.n	8005752 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005748:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 80d1 	beq.w	80058f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <HAL_UART_IRQHandler+0xae>
 800575e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005766:	2b00      	cmp	r3, #0
 8005768:	d005      	beq.n	8005776 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576e:	f043 0201 	orr.w	r2, r3, #1
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00b      	beq.n	800579a <HAL_UART_IRQHandler+0xd2>
 8005782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d005      	beq.n	800579a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005792:	f043 0202 	orr.w	r2, r3, #2
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800579a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00b      	beq.n	80057be <HAL_UART_IRQHandler+0xf6>
 80057a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b6:	f043 0204 	orr.w	r2, r3, #4
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d011      	beq.n	80057ee <HAL_UART_IRQHandler+0x126>
 80057ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d105      	bne.n	80057e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d005      	beq.n	80057ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e6:	f043 0208 	orr.w	r2, r3, #8
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 81f2 	beq.w	8005bdc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fc:	f003 0320 	and.w	r3, r3, #32
 8005800:	2b00      	cmp	r3, #0
 8005802:	d008      	beq.n	8005816 <HAL_UART_IRQHandler+0x14e>
 8005804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fd1a 	bl	800624a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	bf0c      	ite	eq
 8005824:	2301      	moveq	r3, #1
 8005826:	2300      	movne	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d103      	bne.n	8005842 <HAL_UART_IRQHandler+0x17a>
 800583a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800583e:	2b00      	cmp	r3, #0
 8005840:	d04f      	beq.n	80058e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fc22 	bl	800608c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005852:	2b40      	cmp	r3, #64	; 0x40
 8005854:	d141      	bne.n	80058da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3314      	adds	r3, #20
 800585c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800586c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3314      	adds	r3, #20
 800587e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005882:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005886:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800588e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800589a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1d9      	bne.n	8005856 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d013      	beq.n	80058d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ae:	4a7e      	ldr	r2, [pc, #504]	; (8005aa8 <HAL_UART_IRQHandler+0x3e0>)
 80058b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fc f9f8 	bl	8001cac <HAL_DMA_Abort_IT>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d016      	beq.n	80058f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058cc:	4610      	mov	r0, r2
 80058ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d0:	e00e      	b.n	80058f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f9a8 	bl	8005c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d8:	e00a      	b.n	80058f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f9a4 	bl	8005c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e0:	e006      	b.n	80058f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f9a0 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80058ee:	e175      	b.n	8005bdc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f0:	bf00      	nop
    return;
 80058f2:	e173      	b.n	8005bdc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	f040 814f 	bne.w	8005b9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 8148 	beq.w	8005b9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800590c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8141 	beq.w	8005b9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800591a:	2300      	movs	r3, #0
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	60bb      	str	r3, [r7, #8]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593a:	2b40      	cmp	r3, #64	; 0x40
 800593c:	f040 80b6 	bne.w	8005aac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800594c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 8145 	beq.w	8005be0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800595a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800595e:	429a      	cmp	r2, r3
 8005960:	f080 813e 	bcs.w	8005be0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800596a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005976:	f000 8088 	beq.w	8005a8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	330c      	adds	r3, #12
 8005980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005990:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005998:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	330c      	adds	r3, #12
 80059a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80059a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1d9      	bne.n	800597a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3314      	adds	r3, #20
 80059cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d0:	e853 3f00 	ldrex	r3, [r3]
 80059d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3314      	adds	r3, #20
 80059e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e1      	bne.n	80059c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3314      	adds	r3, #20
 8005a08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3314      	adds	r3, #20
 8005a22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e3      	bne.n	8005a02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	330c      	adds	r3, #12
 8005a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a52:	e853 3f00 	ldrex	r3, [r3]
 8005a56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a5a:	f023 0310 	bic.w	r3, r3, #16
 8005a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	330c      	adds	r3, #12
 8005a68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a74:	e841 2300 	strex	r3, r2, [r1]
 8005a78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1e3      	bne.n	8005a48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fc f8a1 	bl	8001bcc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f8cb 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005aa6:	e09b      	b.n	8005be0 <HAL_UART_IRQHandler+0x518>
 8005aa8:	08006153 	.word	0x08006153
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 808e 	beq.w	8005be4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ac8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8089 	beq.w	8005be4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	330c      	adds	r3, #12
 8005af2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005af6:	647a      	str	r2, [r7, #68]	; 0x44
 8005af8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005afc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e3      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3314      	adds	r3, #20
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	e853 3f00 	ldrex	r3, [r3]
 8005b18:	623b      	str	r3, [r7, #32]
   return(result);
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	f023 0301 	bic.w	r3, r3, #1
 8005b20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3314      	adds	r3, #20
 8005b2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b2e:	633a      	str	r2, [r7, #48]	; 0x30
 8005b30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e3      	bne.n	8005b0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	330c      	adds	r3, #12
 8005b56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	e853 3f00 	ldrex	r3, [r3]
 8005b5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0310 	bic.w	r3, r3, #16
 8005b66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	330c      	adds	r3, #12
 8005b70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b74:	61fa      	str	r2, [r7, #28]
 8005b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	69b9      	ldr	r1, [r7, #24]
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	617b      	str	r3, [r7, #20]
   return(result);
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e3      	bne.n	8005b50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f851 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b9a:	e023      	b.n	8005be4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d009      	beq.n	8005bbc <HAL_UART_IRQHandler+0x4f4>
 8005ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fae0 	bl	800617a <UART_Transmit_IT>
    return;
 8005bba:	e014      	b.n	8005be6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00e      	beq.n	8005be6 <HAL_UART_IRQHandler+0x51e>
 8005bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fb20 	bl	800621a <UART_EndTransmit_IT>
    return;
 8005bda:	e004      	b.n	8005be6 <HAL_UART_IRQHandler+0x51e>
    return;
 8005bdc:	bf00      	nop
 8005bde:	e002      	b.n	8005be6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005be0:	bf00      	nop
 8005be2:	e000      	b.n	8005be6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005be4:	bf00      	nop
  }
}
 8005be6:	37e8      	adds	r7, #232	; 0xe8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b090      	sub	sp, #64	; 0x40
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d137      	bne.n	8005ce0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c72:	2200      	movs	r2, #0
 8005c74:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3314      	adds	r3, #20
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	623b      	str	r3, [r7, #32]
   return(result);
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3314      	adds	r3, #20
 8005c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c96:	633a      	str	r2, [r7, #48]	; 0x30
 8005c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e5      	bne.n	8005c76 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	330c      	adds	r3, #12
 8005cb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cca:	61fa      	str	r2, [r7, #28]
 8005ccc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	69b9      	ldr	r1, [r7, #24]
 8005cd0:	69fa      	ldr	r2, [r7, #28]
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	617b      	str	r3, [r7, #20]
   return(result);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e5      	bne.n	8005caa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cde:	e002      	b.n	8005ce6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005ce0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005ce2:	f7ff ff83 	bl	8005bec <HAL_UART_TxCpltCallback>
}
 8005ce6:	bf00      	nop
 8005ce8:	3740      	adds	r7, #64	; 0x40
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f7ff ff7f 	bl	8005c00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d02:	bf00      	nop
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b09c      	sub	sp, #112	; 0x70
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d172      	bne.n	8005e0c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d28:	2200      	movs	r2, #0
 8005d2a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	330c      	adds	r3, #12
 8005d4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e5      	bne.n	8005d2c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3314      	adds	r3, #20
 8005d66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d72:	f023 0301 	bic.w	r3, r3, #1
 8005d76:	667b      	str	r3, [r7, #100]	; 0x64
 8005d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3314      	adds	r3, #20
 8005d7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005d80:	647a      	str	r2, [r7, #68]	; 0x44
 8005d82:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e5      	bne.n	8005d60 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3314      	adds	r3, #20
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	e853 3f00 	ldrex	r3, [r3]
 8005da2:	623b      	str	r3, [r7, #32]
   return(result);
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005daa:	663b      	str	r3, [r7, #96]	; 0x60
 8005dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3314      	adds	r3, #20
 8005db2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005db4:	633a      	str	r2, [r7, #48]	; 0x30
 8005db6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dbc:	e841 2300 	strex	r3, r2, [r1]
 8005dc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1e5      	bne.n	8005d94 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d119      	bne.n	8005e0c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	330c      	adds	r3, #12
 8005dde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	e853 3f00 	ldrex	r3, [r3]
 8005de6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0310 	bic.w	r3, r3, #16
 8005dee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005df8:	61fa      	str	r2, [r7, #28]
 8005dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	69b9      	ldr	r1, [r7, #24]
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	617b      	str	r3, [r7, #20]
   return(result);
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e5      	bne.n	8005dd8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0e:	2200      	movs	r2, #0
 8005e10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d106      	bne.n	8005e28 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e22:	f7ff ff0b 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e26:	e002      	b.n	8005e2e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005e28:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e2a:	f7fa fccf 	bl	80007cc <HAL_UART_RxCpltCallback>
}
 8005e2e:	bf00      	nop
 8005e30:	3770      	adds	r7, #112	; 0x70
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b084      	sub	sp, #16
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2201      	movs	r2, #1
 8005e48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d108      	bne.n	8005e64 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e56:	085b      	lsrs	r3, r3, #1
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f7ff feed 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e62:	e002      	b.n	8005e6a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f7ff fed5 	bl	8005c14 <HAL_UART_RxHalfCpltCallback>
}
 8005e6a:	bf00      	nop
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8e:	2b80      	cmp	r3, #128	; 0x80
 8005e90:	bf0c      	ite	eq
 8005e92:	2301      	moveq	r3, #1
 8005e94:	2300      	movne	r3, #0
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b21      	cmp	r3, #33	; 0x21
 8005ea4:	d108      	bne.n	8005eb8 <UART_DMAError+0x46>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005eb2:	68b8      	ldr	r0, [r7, #8]
 8005eb4:	f000 f8c2 	bl	800603c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec2:	2b40      	cmp	r3, #64	; 0x40
 8005ec4:	bf0c      	ite	eq
 8005ec6:	2301      	moveq	r3, #1
 8005ec8:	2300      	movne	r3, #0
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b22      	cmp	r3, #34	; 0x22
 8005ed8:	d108      	bne.n	8005eec <UART_DMAError+0x7a>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005ee6:	68b8      	ldr	r0, [r7, #8]
 8005ee8:	f000 f8d0 	bl	800608c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef0:	f043 0210 	orr.w	r2, r3, #16
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ef8:	68b8      	ldr	r0, [r7, #8]
 8005efa:	f7ff fe95 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005efe:	bf00      	nop
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b098      	sub	sp, #96	; 0x60
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	4613      	mov	r3, r2
 8005f14:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	88fa      	ldrh	r2, [r7, #6]
 8005f20:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2222      	movs	r2, #34	; 0x22
 8005f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f34:	4a3e      	ldr	r2, [pc, #248]	; (8006030 <UART_Start_Receive_DMA+0x128>)
 8005f36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3c:	4a3d      	ldr	r2, [pc, #244]	; (8006034 <UART_Start_Receive_DMA+0x12c>)
 8005f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f44:	4a3c      	ldr	r2, [pc, #240]	; (8006038 <UART_Start_Receive_DMA+0x130>)
 8005f46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005f50:	f107 0308 	add.w	r3, r7, #8
 8005f54:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	88fb      	ldrh	r3, [r7, #6]
 8005f68:	f7fb fdd8 	bl	8001b1c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	613b      	str	r3, [r7, #16]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	613b      	str	r3, [r7, #16]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d019      	beq.n	8005fbe <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	330c      	adds	r3, #12
 8005fa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005faa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005fac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005fb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e5      	bne.n	8005f8a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3314      	adds	r3, #20
 8005fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	e853 3f00 	ldrex	r3, [r3]
 8005fcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd0:	f043 0301 	orr.w	r3, r3, #1
 8005fd4:	657b      	str	r3, [r7, #84]	; 0x54
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3314      	adds	r3, #20
 8005fdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005fde:	63ba      	str	r2, [r7, #56]	; 0x38
 8005fe0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005fe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fe6:	e841 2300 	strex	r3, r2, [r1]
 8005fea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1e5      	bne.n	8005fbe <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3314      	adds	r3, #20
 8005ff8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	617b      	str	r3, [r7, #20]
   return(result);
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006008:	653b      	str	r3, [r7, #80]	; 0x50
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3314      	adds	r3, #20
 8006010:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006012:	627a      	str	r2, [r7, #36]	; 0x24
 8006014:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	6a39      	ldr	r1, [r7, #32]
 8006018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e5      	bne.n	8005ff2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3760      	adds	r7, #96	; 0x60
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	08005d0b 	.word	0x08005d0b
 8006034:	08005e37 	.word	0x08005e37
 8006038:	08005e73 	.word	0x08005e73

0800603c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b089      	sub	sp, #36	; 0x24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330c      	adds	r3, #12
 800604a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	e853 3f00 	ldrex	r3, [r3]
 8006052:	60bb      	str	r3, [r7, #8]
   return(result);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800605a:	61fb      	str	r3, [r7, #28]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	61ba      	str	r2, [r7, #24]
 8006066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	6979      	ldr	r1, [r7, #20]
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	613b      	str	r3, [r7, #16]
   return(result);
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e5      	bne.n	8006044 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006080:	bf00      	nop
 8006082:	3724      	adds	r7, #36	; 0x24
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800608c:	b480      	push	{r7}
 800608e:	b095      	sub	sp, #84	; 0x54
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	330c      	adds	r3, #12
 800609a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	330c      	adds	r3, #12
 80060b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060b4:	643a      	str	r2, [r7, #64]	; 0x40
 80060b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060bc:	e841 2300 	strex	r3, r2, [r1]
 80060c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e5      	bne.n	8006094 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3314      	adds	r3, #20
 80060ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	f023 0301 	bic.w	r3, r3, #1
 80060de:	64bb      	str	r3, [r7, #72]	; 0x48
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3314      	adds	r3, #20
 80060e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e5      	bne.n	80060c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	2b01      	cmp	r3, #1
 8006102:	d119      	bne.n	8006138 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	330c      	adds	r3, #12
 800610a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	60bb      	str	r3, [r7, #8]
   return(result);
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f023 0310 	bic.w	r3, r3, #16
 800611a:	647b      	str	r3, [r7, #68]	; 0x44
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	330c      	adds	r3, #12
 8006122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006124:	61ba      	str	r2, [r7, #24]
 8006126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	6979      	ldr	r1, [r7, #20]
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	613b      	str	r3, [r7, #16]
   return(result);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e5      	bne.n	8006104 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006146:	bf00      	nop
 8006148:	3754      	adds	r7, #84	; 0x54
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f7ff fd5b 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006172:	bf00      	nop
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b21      	cmp	r3, #33	; 0x21
 800618c:	d13e      	bne.n	800620c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006196:	d114      	bne.n	80061c2 <UART_Transmit_IT+0x48>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d110      	bne.n	80061c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	1c9a      	adds	r2, r3, #2
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	621a      	str	r2, [r3, #32]
 80061c0:	e008      	b.n	80061d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	1c59      	adds	r1, r3, #1
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6211      	str	r1, [r2, #32]
 80061cc:	781a      	ldrb	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061d8:	b29b      	uxth	r3, r3
 80061da:	3b01      	subs	r3, #1
 80061dc:	b29b      	uxth	r3, r3
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	4619      	mov	r1, r3
 80061e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10f      	bne.n	8006208 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006206:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	e000      	b.n	800620e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800620c:	2302      	movs	r3, #2
  }
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b082      	sub	sp, #8
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68da      	ldr	r2, [r3, #12]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006230:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7ff fcd6 	bl	8005bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b08c      	sub	sp, #48	; 0x30
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b22      	cmp	r3, #34	; 0x22
 800625c:	f040 80ae 	bne.w	80063bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006268:	d117      	bne.n	800629a <UART_Receive_IT+0x50>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d113      	bne.n	800629a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006272:	2300      	movs	r3, #0
 8006274:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	b29b      	uxth	r3, r3
 8006284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006288:	b29a      	uxth	r2, r3
 800628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006292:	1c9a      	adds	r2, r3, #2
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	629a      	str	r2, [r3, #40]	; 0x28
 8006298:	e026      	b.n	80062e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80062a0:	2300      	movs	r3, #0
 80062a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ac:	d007      	beq.n	80062be <UART_Receive_IT+0x74>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10a      	bne.n	80062cc <UART_Receive_IT+0x82>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d106      	bne.n	80062cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	e008      	b.n	80062de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	3b01      	subs	r3, #1
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	4619      	mov	r1, r3
 80062f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d15d      	bne.n	80063b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0220 	bic.w	r2, r2, #32
 800630a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800631a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695a      	ldr	r2, [r3, #20]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	2b01      	cmp	r3, #1
 8006340:	d135      	bne.n	80063ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	330c      	adds	r3, #12
 800634e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	e853 3f00 	ldrex	r3, [r3]
 8006356:	613b      	str	r3, [r7, #16]
   return(result);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f023 0310 	bic.w	r3, r3, #16
 800635e:	627b      	str	r3, [r7, #36]	; 0x24
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	330c      	adds	r3, #12
 8006366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006368:	623a      	str	r2, [r7, #32]
 800636a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636c:	69f9      	ldr	r1, [r7, #28]
 800636e:	6a3a      	ldr	r2, [r7, #32]
 8006370:	e841 2300 	strex	r3, r2, [r1]
 8006374:	61bb      	str	r3, [r7, #24]
   return(result);
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1e5      	bne.n	8006348 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0310 	and.w	r3, r3, #16
 8006386:	2b10      	cmp	r3, #16
 8006388:	d10a      	bne.n	80063a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063a4:	4619      	mov	r1, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff fc48 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
 80063ac:	e002      	b.n	80063b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7fa fa0c 	bl	80007cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	e002      	b.n	80063be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	e000      	b.n	80063be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80063bc:	2302      	movs	r3, #2
  }
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3730      	adds	r7, #48	; 0x30
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063cc:	b0c0      	sub	sp, #256	; 0x100
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e4:	68d9      	ldr	r1, [r3, #12]
 80063e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	ea40 0301 	orr.w	r3, r0, r1
 80063f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	431a      	orrs	r2, r3
 8006400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	431a      	orrs	r2, r3
 8006408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	4313      	orrs	r3, r2
 8006410:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006420:	f021 010c 	bic.w	r1, r1, #12
 8006424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800642e:	430b      	orrs	r3, r1
 8006430:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800643e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006442:	6999      	ldr	r1, [r3, #24]
 8006444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	ea40 0301 	orr.w	r3, r0, r1
 800644e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	4b8f      	ldr	r3, [pc, #572]	; (8006694 <UART_SetConfig+0x2cc>)
 8006458:	429a      	cmp	r2, r3
 800645a:	d005      	beq.n	8006468 <UART_SetConfig+0xa0>
 800645c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	4b8d      	ldr	r3, [pc, #564]	; (8006698 <UART_SetConfig+0x2d0>)
 8006464:	429a      	cmp	r2, r3
 8006466:	d104      	bne.n	8006472 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006468:	f7ff f818 	bl	800549c <HAL_RCC_GetPCLK2Freq>
 800646c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006470:	e003      	b.n	800647a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006472:	f7fe ffff 	bl	8005474 <HAL_RCC_GetPCLK1Freq>
 8006476:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800647a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006484:	f040 810c 	bne.w	80066a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800648c:	2200      	movs	r2, #0
 800648e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006492:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006496:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800649a:	4622      	mov	r2, r4
 800649c:	462b      	mov	r3, r5
 800649e:	1891      	adds	r1, r2, r2
 80064a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80064a2:	415b      	adcs	r3, r3
 80064a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064aa:	4621      	mov	r1, r4
 80064ac:	eb12 0801 	adds.w	r8, r2, r1
 80064b0:	4629      	mov	r1, r5
 80064b2:	eb43 0901 	adc.w	r9, r3, r1
 80064b6:	f04f 0200 	mov.w	r2, #0
 80064ba:	f04f 0300 	mov.w	r3, #0
 80064be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064ca:	4690      	mov	r8, r2
 80064cc:	4699      	mov	r9, r3
 80064ce:	4623      	mov	r3, r4
 80064d0:	eb18 0303 	adds.w	r3, r8, r3
 80064d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064d8:	462b      	mov	r3, r5
 80064da:	eb49 0303 	adc.w	r3, r9, r3
 80064de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80064f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80064f6:	460b      	mov	r3, r1
 80064f8:	18db      	adds	r3, r3, r3
 80064fa:	653b      	str	r3, [r7, #80]	; 0x50
 80064fc:	4613      	mov	r3, r2
 80064fe:	eb42 0303 	adc.w	r3, r2, r3
 8006502:	657b      	str	r3, [r7, #84]	; 0x54
 8006504:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006508:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800650c:	f7f9 feb0 	bl	8000270 <__aeabi_uldivmod>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4b61      	ldr	r3, [pc, #388]	; (800669c <UART_SetConfig+0x2d4>)
 8006516:	fba3 2302 	umull	r2, r3, r3, r2
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	011c      	lsls	r4, r3, #4
 800651e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006522:	2200      	movs	r2, #0
 8006524:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006528:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800652c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006530:	4642      	mov	r2, r8
 8006532:	464b      	mov	r3, r9
 8006534:	1891      	adds	r1, r2, r2
 8006536:	64b9      	str	r1, [r7, #72]	; 0x48
 8006538:	415b      	adcs	r3, r3
 800653a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800653c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006540:	4641      	mov	r1, r8
 8006542:	eb12 0a01 	adds.w	sl, r2, r1
 8006546:	4649      	mov	r1, r9
 8006548:	eb43 0b01 	adc.w	fp, r3, r1
 800654c:	f04f 0200 	mov.w	r2, #0
 8006550:	f04f 0300 	mov.w	r3, #0
 8006554:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006558:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800655c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006560:	4692      	mov	sl, r2
 8006562:	469b      	mov	fp, r3
 8006564:	4643      	mov	r3, r8
 8006566:	eb1a 0303 	adds.w	r3, sl, r3
 800656a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800656e:	464b      	mov	r3, r9
 8006570:	eb4b 0303 	adc.w	r3, fp, r3
 8006574:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006584:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006588:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800658c:	460b      	mov	r3, r1
 800658e:	18db      	adds	r3, r3, r3
 8006590:	643b      	str	r3, [r7, #64]	; 0x40
 8006592:	4613      	mov	r3, r2
 8006594:	eb42 0303 	adc.w	r3, r2, r3
 8006598:	647b      	str	r3, [r7, #68]	; 0x44
 800659a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800659e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80065a2:	f7f9 fe65 	bl	8000270 <__aeabi_uldivmod>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	4611      	mov	r1, r2
 80065ac:	4b3b      	ldr	r3, [pc, #236]	; (800669c <UART_SetConfig+0x2d4>)
 80065ae:	fba3 2301 	umull	r2, r3, r3, r1
 80065b2:	095b      	lsrs	r3, r3, #5
 80065b4:	2264      	movs	r2, #100	; 0x64
 80065b6:	fb02 f303 	mul.w	r3, r2, r3
 80065ba:	1acb      	subs	r3, r1, r3
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80065c2:	4b36      	ldr	r3, [pc, #216]	; (800669c <UART_SetConfig+0x2d4>)
 80065c4:	fba3 2302 	umull	r2, r3, r3, r2
 80065c8:	095b      	lsrs	r3, r3, #5
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065d0:	441c      	add	r4, r3
 80065d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80065e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80065e4:	4642      	mov	r2, r8
 80065e6:	464b      	mov	r3, r9
 80065e8:	1891      	adds	r1, r2, r2
 80065ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80065ec:	415b      	adcs	r3, r3
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065f4:	4641      	mov	r1, r8
 80065f6:	1851      	adds	r1, r2, r1
 80065f8:	6339      	str	r1, [r7, #48]	; 0x30
 80065fa:	4649      	mov	r1, r9
 80065fc:	414b      	adcs	r3, r1
 80065fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006600:	f04f 0200 	mov.w	r2, #0
 8006604:	f04f 0300 	mov.w	r3, #0
 8006608:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800660c:	4659      	mov	r1, fp
 800660e:	00cb      	lsls	r3, r1, #3
 8006610:	4651      	mov	r1, sl
 8006612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006616:	4651      	mov	r1, sl
 8006618:	00ca      	lsls	r2, r1, #3
 800661a:	4610      	mov	r0, r2
 800661c:	4619      	mov	r1, r3
 800661e:	4603      	mov	r3, r0
 8006620:	4642      	mov	r2, r8
 8006622:	189b      	adds	r3, r3, r2
 8006624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006628:	464b      	mov	r3, r9
 800662a:	460a      	mov	r2, r1
 800662c:	eb42 0303 	adc.w	r3, r2, r3
 8006630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006640:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006644:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006648:	460b      	mov	r3, r1
 800664a:	18db      	adds	r3, r3, r3
 800664c:	62bb      	str	r3, [r7, #40]	; 0x28
 800664e:	4613      	mov	r3, r2
 8006650:	eb42 0303 	adc.w	r3, r2, r3
 8006654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006656:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800665a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800665e:	f7f9 fe07 	bl	8000270 <__aeabi_uldivmod>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	4b0d      	ldr	r3, [pc, #52]	; (800669c <UART_SetConfig+0x2d4>)
 8006668:	fba3 1302 	umull	r1, r3, r3, r2
 800666c:	095b      	lsrs	r3, r3, #5
 800666e:	2164      	movs	r1, #100	; 0x64
 8006670:	fb01 f303 	mul.w	r3, r1, r3
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	3332      	adds	r3, #50	; 0x32
 800667a:	4a08      	ldr	r2, [pc, #32]	; (800669c <UART_SetConfig+0x2d4>)
 800667c:	fba2 2303 	umull	r2, r3, r2, r3
 8006680:	095b      	lsrs	r3, r3, #5
 8006682:	f003 0207 	and.w	r2, r3, #7
 8006686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4422      	add	r2, r4
 800668e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006690:	e106      	b.n	80068a0 <UART_SetConfig+0x4d8>
 8006692:	bf00      	nop
 8006694:	40011000 	.word	0x40011000
 8006698:	40011400 	.word	0x40011400
 800669c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066a4:	2200      	movs	r2, #0
 80066a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80066ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80066b2:	4642      	mov	r2, r8
 80066b4:	464b      	mov	r3, r9
 80066b6:	1891      	adds	r1, r2, r2
 80066b8:	6239      	str	r1, [r7, #32]
 80066ba:	415b      	adcs	r3, r3
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
 80066be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066c2:	4641      	mov	r1, r8
 80066c4:	1854      	adds	r4, r2, r1
 80066c6:	4649      	mov	r1, r9
 80066c8:	eb43 0501 	adc.w	r5, r3, r1
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	f04f 0300 	mov.w	r3, #0
 80066d4:	00eb      	lsls	r3, r5, #3
 80066d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066da:	00e2      	lsls	r2, r4, #3
 80066dc:	4614      	mov	r4, r2
 80066de:	461d      	mov	r5, r3
 80066e0:	4643      	mov	r3, r8
 80066e2:	18e3      	adds	r3, r4, r3
 80066e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066e8:	464b      	mov	r3, r9
 80066ea:	eb45 0303 	adc.w	r3, r5, r3
 80066ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006702:	f04f 0200 	mov.w	r2, #0
 8006706:	f04f 0300 	mov.w	r3, #0
 800670a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800670e:	4629      	mov	r1, r5
 8006710:	008b      	lsls	r3, r1, #2
 8006712:	4621      	mov	r1, r4
 8006714:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006718:	4621      	mov	r1, r4
 800671a:	008a      	lsls	r2, r1, #2
 800671c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006720:	f7f9 fda6 	bl	8000270 <__aeabi_uldivmod>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4b60      	ldr	r3, [pc, #384]	; (80068ac <UART_SetConfig+0x4e4>)
 800672a:	fba3 2302 	umull	r2, r3, r3, r2
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	011c      	lsls	r4, r3, #4
 8006732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006736:	2200      	movs	r2, #0
 8006738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800673c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006740:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006744:	4642      	mov	r2, r8
 8006746:	464b      	mov	r3, r9
 8006748:	1891      	adds	r1, r2, r2
 800674a:	61b9      	str	r1, [r7, #24]
 800674c:	415b      	adcs	r3, r3
 800674e:	61fb      	str	r3, [r7, #28]
 8006750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006754:	4641      	mov	r1, r8
 8006756:	1851      	adds	r1, r2, r1
 8006758:	6139      	str	r1, [r7, #16]
 800675a:	4649      	mov	r1, r9
 800675c:	414b      	adcs	r3, r1
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	f04f 0300 	mov.w	r3, #0
 8006768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800676c:	4659      	mov	r1, fp
 800676e:	00cb      	lsls	r3, r1, #3
 8006770:	4651      	mov	r1, sl
 8006772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006776:	4651      	mov	r1, sl
 8006778:	00ca      	lsls	r2, r1, #3
 800677a:	4610      	mov	r0, r2
 800677c:	4619      	mov	r1, r3
 800677e:	4603      	mov	r3, r0
 8006780:	4642      	mov	r2, r8
 8006782:	189b      	adds	r3, r3, r2
 8006784:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006788:	464b      	mov	r3, r9
 800678a:	460a      	mov	r2, r1
 800678c:	eb42 0303 	adc.w	r3, r2, r3
 8006790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	67bb      	str	r3, [r7, #120]	; 0x78
 800679e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80067a0:	f04f 0200 	mov.w	r2, #0
 80067a4:	f04f 0300 	mov.w	r3, #0
 80067a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80067ac:	4649      	mov	r1, r9
 80067ae:	008b      	lsls	r3, r1, #2
 80067b0:	4641      	mov	r1, r8
 80067b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067b6:	4641      	mov	r1, r8
 80067b8:	008a      	lsls	r2, r1, #2
 80067ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80067be:	f7f9 fd57 	bl	8000270 <__aeabi_uldivmod>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	4611      	mov	r1, r2
 80067c8:	4b38      	ldr	r3, [pc, #224]	; (80068ac <UART_SetConfig+0x4e4>)
 80067ca:	fba3 2301 	umull	r2, r3, r3, r1
 80067ce:	095b      	lsrs	r3, r3, #5
 80067d0:	2264      	movs	r2, #100	; 0x64
 80067d2:	fb02 f303 	mul.w	r3, r2, r3
 80067d6:	1acb      	subs	r3, r1, r3
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	3332      	adds	r3, #50	; 0x32
 80067dc:	4a33      	ldr	r2, [pc, #204]	; (80068ac <UART_SetConfig+0x4e4>)
 80067de:	fba2 2303 	umull	r2, r3, r2, r3
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067e8:	441c      	add	r4, r3
 80067ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ee:	2200      	movs	r2, #0
 80067f0:	673b      	str	r3, [r7, #112]	; 0x70
 80067f2:	677a      	str	r2, [r7, #116]	; 0x74
 80067f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80067f8:	4642      	mov	r2, r8
 80067fa:	464b      	mov	r3, r9
 80067fc:	1891      	adds	r1, r2, r2
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	415b      	adcs	r3, r3
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006808:	4641      	mov	r1, r8
 800680a:	1851      	adds	r1, r2, r1
 800680c:	6039      	str	r1, [r7, #0]
 800680e:	4649      	mov	r1, r9
 8006810:	414b      	adcs	r3, r1
 8006812:	607b      	str	r3, [r7, #4]
 8006814:	f04f 0200 	mov.w	r2, #0
 8006818:	f04f 0300 	mov.w	r3, #0
 800681c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006820:	4659      	mov	r1, fp
 8006822:	00cb      	lsls	r3, r1, #3
 8006824:	4651      	mov	r1, sl
 8006826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800682a:	4651      	mov	r1, sl
 800682c:	00ca      	lsls	r2, r1, #3
 800682e:	4610      	mov	r0, r2
 8006830:	4619      	mov	r1, r3
 8006832:	4603      	mov	r3, r0
 8006834:	4642      	mov	r2, r8
 8006836:	189b      	adds	r3, r3, r2
 8006838:	66bb      	str	r3, [r7, #104]	; 0x68
 800683a:	464b      	mov	r3, r9
 800683c:	460a      	mov	r2, r1
 800683e:	eb42 0303 	adc.w	r3, r2, r3
 8006842:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	663b      	str	r3, [r7, #96]	; 0x60
 800684e:	667a      	str	r2, [r7, #100]	; 0x64
 8006850:	f04f 0200 	mov.w	r2, #0
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800685c:	4649      	mov	r1, r9
 800685e:	008b      	lsls	r3, r1, #2
 8006860:	4641      	mov	r1, r8
 8006862:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006866:	4641      	mov	r1, r8
 8006868:	008a      	lsls	r2, r1, #2
 800686a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800686e:	f7f9 fcff 	bl	8000270 <__aeabi_uldivmod>
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	4b0d      	ldr	r3, [pc, #52]	; (80068ac <UART_SetConfig+0x4e4>)
 8006878:	fba3 1302 	umull	r1, r3, r3, r2
 800687c:	095b      	lsrs	r3, r3, #5
 800687e:	2164      	movs	r1, #100	; 0x64
 8006880:	fb01 f303 	mul.w	r3, r1, r3
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	3332      	adds	r3, #50	; 0x32
 800688a:	4a08      	ldr	r2, [pc, #32]	; (80068ac <UART_SetConfig+0x4e4>)
 800688c:	fba2 2303 	umull	r2, r3, r2, r3
 8006890:	095b      	lsrs	r3, r3, #5
 8006892:	f003 020f 	and.w	r2, r3, #15
 8006896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4422      	add	r2, r4
 800689e:	609a      	str	r2, [r3, #8]
}
 80068a0:	bf00      	nop
 80068a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80068a6:	46bd      	mov	sp, r7
 80068a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ac:	51eb851f 	.word	0x51eb851f

080068b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068b0:	b084      	sub	sp, #16
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	f107 001c 	add.w	r0, r7, #28
 80068be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d123      	bne.n	8006912 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80068de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d105      	bne.n	8006906 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 fae2 	bl	8007ed0 <USB_CoreReset>
 800690c:	4603      	mov	r3, r0
 800690e:	73fb      	strb	r3, [r7, #15]
 8006910:	e01b      	b.n	800694a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f001 fad6 	bl	8007ed0 <USB_CoreReset>
 8006924:	4603      	mov	r3, r0
 8006926:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006928:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800692c:	2b00      	cmp	r3, #0
 800692e:	d106      	bne.n	800693e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	639a      	str	r2, [r3, #56]	; 0x38
 800693c:	e005      	b.n	800694a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800694a:	7fbb      	ldrb	r3, [r7, #30]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d10b      	bne.n	8006968 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f043 0206 	orr.w	r2, r3, #6
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f043 0220 	orr.w	r2, r3, #32
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006968:	7bfb      	ldrb	r3, [r7, #15]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006974:	b004      	add	sp, #16
 8006976:	4770      	bx	lr

08006978 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	4613      	mov	r3, r2
 8006984:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006986:	79fb      	ldrb	r3, [r7, #7]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d165      	bne.n	8006a58 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4a41      	ldr	r2, [pc, #260]	; (8006a94 <USB_SetTurnaroundTime+0x11c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d906      	bls.n	80069a2 <USB_SetTurnaroundTime+0x2a>
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	4a40      	ldr	r2, [pc, #256]	; (8006a98 <USB_SetTurnaroundTime+0x120>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d202      	bcs.n	80069a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800699c:	230f      	movs	r3, #15
 800699e:	617b      	str	r3, [r7, #20]
 80069a0:	e062      	b.n	8006a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	4a3c      	ldr	r2, [pc, #240]	; (8006a98 <USB_SetTurnaroundTime+0x120>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d306      	bcc.n	80069b8 <USB_SetTurnaroundTime+0x40>
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	4a3b      	ldr	r2, [pc, #236]	; (8006a9c <USB_SetTurnaroundTime+0x124>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d202      	bcs.n	80069b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80069b2:	230e      	movs	r3, #14
 80069b4:	617b      	str	r3, [r7, #20]
 80069b6:	e057      	b.n	8006a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	4a38      	ldr	r2, [pc, #224]	; (8006a9c <USB_SetTurnaroundTime+0x124>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d306      	bcc.n	80069ce <USB_SetTurnaroundTime+0x56>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	4a37      	ldr	r2, [pc, #220]	; (8006aa0 <USB_SetTurnaroundTime+0x128>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d202      	bcs.n	80069ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80069c8:	230d      	movs	r3, #13
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	e04c      	b.n	8006a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4a33      	ldr	r2, [pc, #204]	; (8006aa0 <USB_SetTurnaroundTime+0x128>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d306      	bcc.n	80069e4 <USB_SetTurnaroundTime+0x6c>
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	4a32      	ldr	r2, [pc, #200]	; (8006aa4 <USB_SetTurnaroundTime+0x12c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d802      	bhi.n	80069e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80069de:	230c      	movs	r3, #12
 80069e0:	617b      	str	r3, [r7, #20]
 80069e2:	e041      	b.n	8006a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4a2f      	ldr	r2, [pc, #188]	; (8006aa4 <USB_SetTurnaroundTime+0x12c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d906      	bls.n	80069fa <USB_SetTurnaroundTime+0x82>
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4a2e      	ldr	r2, [pc, #184]	; (8006aa8 <USB_SetTurnaroundTime+0x130>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d802      	bhi.n	80069fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80069f4:	230b      	movs	r3, #11
 80069f6:	617b      	str	r3, [r7, #20]
 80069f8:	e036      	b.n	8006a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	4a2a      	ldr	r2, [pc, #168]	; (8006aa8 <USB_SetTurnaroundTime+0x130>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d906      	bls.n	8006a10 <USB_SetTurnaroundTime+0x98>
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	4a29      	ldr	r2, [pc, #164]	; (8006aac <USB_SetTurnaroundTime+0x134>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d802      	bhi.n	8006a10 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006a0a:	230a      	movs	r3, #10
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	e02b      	b.n	8006a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4a26      	ldr	r2, [pc, #152]	; (8006aac <USB_SetTurnaroundTime+0x134>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d906      	bls.n	8006a26 <USB_SetTurnaroundTime+0xae>
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	4a25      	ldr	r2, [pc, #148]	; (8006ab0 <USB_SetTurnaroundTime+0x138>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d202      	bcs.n	8006a26 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006a20:	2309      	movs	r3, #9
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	e020      	b.n	8006a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	4a21      	ldr	r2, [pc, #132]	; (8006ab0 <USB_SetTurnaroundTime+0x138>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d306      	bcc.n	8006a3c <USB_SetTurnaroundTime+0xc4>
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	4a20      	ldr	r2, [pc, #128]	; (8006ab4 <USB_SetTurnaroundTime+0x13c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d802      	bhi.n	8006a3c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006a36:	2308      	movs	r3, #8
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	e015      	b.n	8006a68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	4a1d      	ldr	r2, [pc, #116]	; (8006ab4 <USB_SetTurnaroundTime+0x13c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d906      	bls.n	8006a52 <USB_SetTurnaroundTime+0xda>
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	4a1c      	ldr	r2, [pc, #112]	; (8006ab8 <USB_SetTurnaroundTime+0x140>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d202      	bcs.n	8006a52 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006a4c:	2307      	movs	r3, #7
 8006a4e:	617b      	str	r3, [r7, #20]
 8006a50:	e00a      	b.n	8006a68 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006a52:	2306      	movs	r3, #6
 8006a54:	617b      	str	r3, [r7, #20]
 8006a56:	e007      	b.n	8006a68 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a58:	79fb      	ldrb	r3, [r7, #7]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d102      	bne.n	8006a64 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a5e:	2309      	movs	r3, #9
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	e001      	b.n	8006a68 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a64:	2309      	movs	r3, #9
 8006a66:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	029b      	lsls	r3, r3, #10
 8006a7c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006a80:	431a      	orrs	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	00d8acbf 	.word	0x00d8acbf
 8006a98:	00e4e1c0 	.word	0x00e4e1c0
 8006a9c:	00f42400 	.word	0x00f42400
 8006aa0:	01067380 	.word	0x01067380
 8006aa4:	011a499f 	.word	0x011a499f
 8006aa8:	01312cff 	.word	0x01312cff
 8006aac:	014ca43f 	.word	0x014ca43f
 8006ab0:	016e3600 	.word	0x016e3600
 8006ab4:	01a6ab1f 	.word	0x01a6ab1f
 8006ab8:	01e84800 	.word	0x01e84800

08006abc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f043 0201 	orr.w	r2, r3, #1
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f023 0201 	bic.w	r2, r3, #1
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b1c:	78fb      	ldrb	r3, [r7, #3]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d115      	bne.n	8006b4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b2e:	200a      	movs	r0, #10
 8006b30:	f7fa fe10 	bl	8001754 <HAL_Delay>
      ms += 10U;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	330a      	adds	r3, #10
 8006b38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f001 f939 	bl	8007db2 <USB_GetMode>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d01e      	beq.n	8006b84 <USB_SetCurrentMode+0x84>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2bc7      	cmp	r3, #199	; 0xc7
 8006b4a:	d9f0      	bls.n	8006b2e <USB_SetCurrentMode+0x2e>
 8006b4c:	e01a      	b.n	8006b84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b4e:	78fb      	ldrb	r3, [r7, #3]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d115      	bne.n	8006b80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b60:	200a      	movs	r0, #10
 8006b62:	f7fa fdf7 	bl	8001754 <HAL_Delay>
      ms += 10U;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	330a      	adds	r3, #10
 8006b6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 f920 	bl	8007db2 <USB_GetMode>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <USB_SetCurrentMode+0x84>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2bc7      	cmp	r3, #199	; 0xc7
 8006b7c:	d9f0      	bls.n	8006b60 <USB_SetCurrentMode+0x60>
 8006b7e:	e001      	b.n	8006b84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e005      	b.n	8006b90 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2bc8      	cmp	r3, #200	; 0xc8
 8006b88:	d101      	bne.n	8006b8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e000      	b.n	8006b90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b98:	b084      	sub	sp, #16
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ba6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	613b      	str	r3, [r7, #16]
 8006bb6:	e009      	b.n	8006bcc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	3340      	adds	r3, #64	; 0x40
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	613b      	str	r3, [r7, #16]
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	2b0e      	cmp	r3, #14
 8006bd0:	d9f2      	bls.n	8006bb8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006bd2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d11c      	bne.n	8006c14 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006be8:	f043 0302 	orr.w	r3, r3, #2
 8006bec:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
 8006c12:	e00b      	b.n	8006c2c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c24:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c32:	461a      	mov	r2, r3
 8006c34:	2300      	movs	r3, #0
 8006c36:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c38:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d10d      	bne.n	8006c5c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d104      	bne.n	8006c52 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c48:	2100      	movs	r1, #0
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f968 	bl	8006f20 <USB_SetDevSpeed>
 8006c50:	e008      	b.n	8006c64 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c52:	2101      	movs	r1, #1
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f963 	bl	8006f20 <USB_SetDevSpeed>
 8006c5a:	e003      	b.n	8006c64 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c5c:	2103      	movs	r1, #3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f95e 	bl	8006f20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c64:	2110      	movs	r1, #16
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f8fa 	bl	8006e60 <USB_FlushTxFifo>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f924 	bl	8006ec4 <USB_FlushRxFifo>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	2300      	movs	r3, #0
 8006c90:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c98:	461a      	mov	r2, r3
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006caa:	2300      	movs	r3, #0
 8006cac:	613b      	str	r3, [r7, #16]
 8006cae:	e043      	b.n	8006d38 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cc6:	d118      	bne.n	8006cfa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10a      	bne.n	8006ce4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ce0:	6013      	str	r3, [r2, #0]
 8006ce2:	e013      	b.n	8006d0c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cf6:	6013      	str	r3, [r2, #0]
 8006cf8:	e008      	b.n	8006d0c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d06:	461a      	mov	r2, r3
 8006d08:	2300      	movs	r3, #0
 8006d0a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d18:	461a      	mov	r2, r3
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	3301      	adds	r3, #1
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d3b5      	bcc.n	8006cb0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d44:	2300      	movs	r3, #0
 8006d46:	613b      	str	r3, [r7, #16]
 8006d48:	e043      	b.n	8006dd2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d60:	d118      	bne.n	8006d94 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d74:	461a      	mov	r2, r3
 8006d76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d7a:	6013      	str	r3, [r2, #0]
 8006d7c:	e013      	b.n	8006da6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	e008      	b.n	8006da6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da0:	461a      	mov	r2, r3
 8006da2:	2300      	movs	r3, #0
 8006da4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db2:	461a      	mov	r2, r3
 8006db4:	2300      	movs	r3, #0
 8006db6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006dca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	613b      	str	r3, [r7, #16]
 8006dd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d3b5      	bcc.n	8006d4a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006df0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006dfe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d105      	bne.n	8006e14 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	f043 0210 	orr.w	r2, r3, #16
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	699a      	ldr	r2, [r3, #24]
 8006e18:	4b10      	ldr	r3, [pc, #64]	; (8006e5c <USB_DevInit+0x2c4>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e20:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	f043 0208 	orr.w	r2, r3, #8
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d107      	bne.n	8006e4c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e44:	f043 0304 	orr.w	r3, r3, #4
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3718      	adds	r7, #24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e58:	b004      	add	sp, #16
 8006e5a:	4770      	bx	lr
 8006e5c:	803c3800 	.word	0x803c3800

08006e60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3301      	adds	r3, #1
 8006e72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e7a:	d901      	bls.n	8006e80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e01b      	b.n	8006eb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	daf2      	bge.n	8006e6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	019b      	lsls	r3, r3, #6
 8006e90:	f043 0220 	orr.w	r2, r3, #32
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006ea4:	d901      	bls.n	8006eaa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e006      	b.n	8006eb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	2b20      	cmp	r3, #32
 8006eb4:	d0f0      	beq.n	8006e98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006edc:	d901      	bls.n	8006ee2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e018      	b.n	8006f14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	daf2      	bge.n	8006ed0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2210      	movs	r2, #16
 8006ef2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006f00:	d901      	bls.n	8006f06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e006      	b.n	8006f14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f003 0310 	and.w	r3, r3, #16
 8006f0e:	2b10      	cmp	r3, #16
 8006f10:	d0f0      	beq.n	8006ef4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	78fb      	ldrb	r3, [r7, #3]
 8006f3a:	68f9      	ldr	r1, [r7, #12]
 8006f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f40:	4313      	orrs	r3, r2
 8006f42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b087      	sub	sp, #28
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f003 0306 	and.w	r3, r3, #6
 8006f6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d102      	bne.n	8006f78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f72:	2300      	movs	r3, #0
 8006f74:	75fb      	strb	r3, [r7, #23]
 8006f76:	e00a      	b.n	8006f8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d002      	beq.n	8006f84 <USB_GetDevSpeed+0x32>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2b06      	cmp	r3, #6
 8006f82:	d102      	bne.n	8006f8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f84:	2302      	movs	r3, #2
 8006f86:	75fb      	strb	r3, [r7, #23]
 8006f88:	e001      	b.n	8006f8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f8a:	230f      	movs	r3, #15
 8006f8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	371c      	adds	r7, #28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	785b      	ldrb	r3, [r3, #1]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d13a      	bne.n	800702e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fbe:	69da      	ldr	r2, [r3, #28]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	f003 030f 	and.w	r3, r3, #15
 8006fc8:	2101      	movs	r1, #1
 8006fca:	fa01 f303 	lsl.w	r3, r1, r3
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	68f9      	ldr	r1, [r7, #12]
 8006fd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d155      	bne.n	800709c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	791b      	ldrb	r3, [r3, #4]
 800700a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800700c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	059b      	lsls	r3, r3, #22
 8007012:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007014:	4313      	orrs	r3, r2
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	0151      	lsls	r1, r2, #5
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	440a      	add	r2, r1
 800701e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	e036      	b.n	800709c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007034:	69da      	ldr	r2, [r3, #28]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	f003 030f 	and.w	r3, r3, #15
 800703e:	2101      	movs	r1, #1
 8007040:	fa01 f303 	lsl.w	r3, r1, r3
 8007044:	041b      	lsls	r3, r3, #16
 8007046:	68f9      	ldr	r1, [r7, #12]
 8007048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800704c:	4313      	orrs	r3, r2
 800704e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d11a      	bne.n	800709c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	791b      	ldrb	r3, [r3, #4]
 8007080:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007082:	430b      	orrs	r3, r1
 8007084:	4313      	orrs	r3, r2
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	0151      	lsls	r1, r2, #5
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	440a      	add	r2, r1
 800708e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800709a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
	...

080070ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	785b      	ldrb	r3, [r3, #1]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d161      	bne.n	800718c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070de:	d11f      	bne.n	8007120 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	0151      	lsls	r1, r2, #5
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	440a      	add	r2, r1
 80070f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	440a      	add	r2, r1
 8007116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800711a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800711e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007126:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	f003 030f 	and.w	r3, r3, #15
 8007130:	2101      	movs	r1, #1
 8007132:	fa01 f303 	lsl.w	r3, r1, r3
 8007136:	b29b      	uxth	r3, r3
 8007138:	43db      	mvns	r3, r3
 800713a:	68f9      	ldr	r1, [r7, #12]
 800713c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007140:	4013      	ands	r3, r2
 8007142:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714a:	69da      	ldr	r2, [r3, #28]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	f003 030f 	and.w	r3, r3, #15
 8007154:	2101      	movs	r1, #1
 8007156:	fa01 f303 	lsl.w	r3, r1, r3
 800715a:	b29b      	uxth	r3, r3
 800715c:	43db      	mvns	r3, r3
 800715e:	68f9      	ldr	r1, [r7, #12]
 8007160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007164:	4013      	ands	r3, r2
 8007166:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	0159      	lsls	r1, r3, #5
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	440b      	add	r3, r1
 800717e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007182:	4619      	mov	r1, r3
 8007184:	4b35      	ldr	r3, [pc, #212]	; (800725c <USB_DeactivateEndpoint+0x1b0>)
 8007186:	4013      	ands	r3, r2
 8007188:	600b      	str	r3, [r1, #0]
 800718a:	e060      	b.n	800724e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800719e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071a2:	d11f      	bne.n	80071e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	0151      	lsls	r1, r2, #5
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	440a      	add	r2, r1
 80071ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	0151      	lsls	r1, r2, #5
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	440a      	add	r2, r1
 80071da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	2101      	movs	r1, #1
 80071f6:	fa01 f303 	lsl.w	r3, r1, r3
 80071fa:	041b      	lsls	r3, r3, #16
 80071fc:	43db      	mvns	r3, r3
 80071fe:	68f9      	ldr	r1, [r7, #12]
 8007200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007204:	4013      	ands	r3, r2
 8007206:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720e:	69da      	ldr	r2, [r3, #28]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	f003 030f 	and.w	r3, r3, #15
 8007218:	2101      	movs	r1, #1
 800721a:	fa01 f303 	lsl.w	r3, r1, r3
 800721e:	041b      	lsls	r3, r3, #16
 8007220:	43db      	mvns	r3, r3
 8007222:	68f9      	ldr	r1, [r7, #12]
 8007224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007228:	4013      	ands	r3, r2
 800722a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	4413      	add	r3, r2
 8007234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	0159      	lsls	r1, r3, #5
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	440b      	add	r3, r1
 8007242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007246:	4619      	mov	r1, r3
 8007248:	4b05      	ldr	r3, [pc, #20]	; (8007260 <USB_DeactivateEndpoint+0x1b4>)
 800724a:	4013      	ands	r3, r2
 800724c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	ec337800 	.word	0xec337800
 8007260:	eff37800 	.word	0xeff37800

08007264 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08a      	sub	sp, #40	; 0x28
 8007268:	af02      	add	r7, sp, #8
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	4613      	mov	r3, r2
 8007270:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	785b      	ldrb	r3, [r3, #1]
 8007280:	2b01      	cmp	r3, #1
 8007282:	f040 817a 	bne.w	800757a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d132      	bne.n	80072f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	0151      	lsls	r1, r2, #5
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	440a      	add	r2, r1
 80072a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	0151      	lsls	r1, r2, #5
 80072c4:	69fa      	ldr	r2, [r7, #28]
 80072c6:	440a      	add	r2, r1
 80072c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	0151      	lsls	r1, r2, #5
 80072e4:	69fa      	ldr	r2, [r7, #28]
 80072e6:	440a      	add	r2, r1
 80072e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ec:	0cdb      	lsrs	r3, r3, #19
 80072ee:	04db      	lsls	r3, r3, #19
 80072f0:	6113      	str	r3, [r2, #16]
 80072f2:	e092      	b.n	800741a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	0151      	lsls	r1, r2, #5
 8007306:	69fa      	ldr	r2, [r7, #28]
 8007308:	440a      	add	r2, r1
 800730a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800730e:	0cdb      	lsrs	r3, r3, #19
 8007310:	04db      	lsls	r3, r3, #19
 8007312:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	0151      	lsls	r1, r2, #5
 8007326:	69fa      	ldr	r2, [r7, #28]
 8007328:	440a      	add	r2, r1
 800732a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800732e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007332:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007336:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d11a      	bne.n	8007374 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	691a      	ldr	r2, [r3, #16]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	429a      	cmp	r2, r3
 8007348:	d903      	bls.n	8007352 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	689a      	ldr	r2, [r3, #8]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	69fa      	ldr	r2, [r7, #28]
 8007366:	440a      	add	r2, r1
 8007368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800736c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007370:	6113      	str	r3, [r2, #16]
 8007372:	e01b      	b.n	80073ac <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007380:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	6919      	ldr	r1, [r3, #16]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	440b      	add	r3, r1
 800738c:	1e59      	subs	r1, r3, #1
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	fbb1 f3f3 	udiv	r3, r1, r3
 8007396:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007398:	4ba2      	ldr	r3, [pc, #648]	; (8007624 <USB_EPStartXfer+0x3c0>)
 800739a:	400b      	ands	r3, r1
 800739c:	69b9      	ldr	r1, [r7, #24]
 800739e:	0148      	lsls	r0, r1, #5
 80073a0:	69f9      	ldr	r1, [r7, #28]
 80073a2:	4401      	add	r1, r0
 80073a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073a8:	4313      	orrs	r3, r2
 80073aa:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b8:	691a      	ldr	r2, [r3, #16]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073c2:	69b9      	ldr	r1, [r7, #24]
 80073c4:	0148      	lsls	r0, r1, #5
 80073c6:	69f9      	ldr	r1, [r7, #28]
 80073c8:	4401      	add	r1, r0
 80073ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073ce:	4313      	orrs	r3, r2
 80073d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	791b      	ldrb	r3, [r3, #4]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d11f      	bne.n	800741a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	69ba      	ldr	r2, [r7, #24]
 80073ea:	0151      	lsls	r1, r2, #5
 80073ec:	69fa      	ldr	r2, [r7, #28]
 80073ee:	440a      	add	r2, r1
 80073f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80073f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	4413      	add	r3, r2
 8007402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	69ba      	ldr	r2, [r7, #24]
 800740a:	0151      	lsls	r1, r2, #5
 800740c:	69fa      	ldr	r2, [r7, #28]
 800740e:	440a      	add	r2, r1
 8007410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007418:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d14b      	bne.n	80074b8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d009      	beq.n	800743c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007434:	461a      	mov	r2, r3
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	791b      	ldrb	r3, [r3, #4]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d128      	bne.n	8007496 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007450:	2b00      	cmp	r3, #0
 8007452:	d110      	bne.n	8007476 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	4413      	add	r3, r2
 800745c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	0151      	lsls	r1, r2, #5
 8007466:	69fa      	ldr	r2, [r7, #28]
 8007468:	440a      	add	r2, r1
 800746a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800746e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007472:	6013      	str	r3, [r2, #0]
 8007474:	e00f      	b.n	8007496 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	0151      	lsls	r1, r2, #5
 8007488:	69fa      	ldr	r2, [r7, #28]
 800748a:	440a      	add	r2, r1
 800748c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007494:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	0151      	lsls	r1, r2, #5
 80074a8:	69fa      	ldr	r2, [r7, #28]
 80074aa:	440a      	add	r2, r1
 80074ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074b4:	6013      	str	r3, [r2, #0]
 80074b6:	e165      	b.n	8007784 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	0151      	lsls	r1, r2, #5
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	440a      	add	r2, r1
 80074ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	791b      	ldrb	r3, [r3, #4]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d015      	beq.n	800750c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 814d 	beq.w	8007784 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	2101      	movs	r1, #1
 80074fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007500:	69f9      	ldr	r1, [r7, #28]
 8007502:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007506:	4313      	orrs	r3, r2
 8007508:	634b      	str	r3, [r1, #52]	; 0x34
 800750a:	e13b      	b.n	8007784 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007518:	2b00      	cmp	r3, #0
 800751a:	d110      	bne.n	800753e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	0151      	lsls	r1, r2, #5
 800752e:	69fa      	ldr	r2, [r7, #28]
 8007530:	440a      	add	r2, r1
 8007532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007536:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	e00f      	b.n	800755e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	0151      	lsls	r1, r2, #5
 8007550:	69fa      	ldr	r2, [r7, #28]
 8007552:	440a      	add	r2, r1
 8007554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800755c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	68d9      	ldr	r1, [r3, #12]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	781a      	ldrb	r2, [r3, #0]
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	b298      	uxth	r0, r3
 800756c:	79fb      	ldrb	r3, [r7, #7]
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	4603      	mov	r3, r0
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 f9b8 	bl	80078e8 <USB_WritePacket>
 8007578:	e104      	b.n	8007784 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	4413      	add	r3, r2
 8007582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	69ba      	ldr	r2, [r7, #24]
 800758a:	0151      	lsls	r1, r2, #5
 800758c:	69fa      	ldr	r2, [r7, #28]
 800758e:	440a      	add	r2, r1
 8007590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007594:	0cdb      	lsrs	r3, r3, #19
 8007596:	04db      	lsls	r3, r3, #19
 8007598:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	0151      	lsls	r1, r2, #5
 80075ac:	69fa      	ldr	r2, [r7, #28]
 80075ae:	440a      	add	r2, r1
 80075b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075bc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d131      	bne.n	8007628 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	689a      	ldr	r2, [r3, #8]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e8:	691a      	ldr	r2, [r3, #16]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075f2:	69b9      	ldr	r1, [r7, #24]
 80075f4:	0148      	lsls	r0, r1, #5
 80075f6:	69f9      	ldr	r1, [r7, #28]
 80075f8:	4401      	add	r1, r0
 80075fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075fe:	4313      	orrs	r3, r2
 8007600:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	0151      	lsls	r1, r2, #5
 8007614:	69fa      	ldr	r2, [r7, #28]
 8007616:	440a      	add	r2, r1
 8007618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800761c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007620:	6113      	str	r3, [r2, #16]
 8007622:	e061      	b.n	80076e8 <USB_EPStartXfer+0x484>
 8007624:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d123      	bne.n	8007678 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763c:	691a      	ldr	r2, [r3, #16]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007646:	69b9      	ldr	r1, [r7, #24]
 8007648:	0148      	lsls	r0, r1, #5
 800764a:	69f9      	ldr	r1, [r7, #28]
 800764c:	4401      	add	r1, r0
 800764e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007652:	4313      	orrs	r3, r2
 8007654:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	0151      	lsls	r1, r2, #5
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	440a      	add	r2, r1
 800766c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007670:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007674:	6113      	str	r3, [r2, #16]
 8007676:	e037      	b.n	80076e8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	691a      	ldr	r2, [r3, #16]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	4413      	add	r3, r2
 8007682:	1e5a      	subs	r2, r3, #1
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	fbb2 f3f3 	udiv	r3, r2, r3
 800768c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	8afa      	ldrh	r2, [r7, #22]
 8007694:	fb03 f202 	mul.w	r2, r3, r2
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a8:	691a      	ldr	r2, [r3, #16]
 80076aa:	8afb      	ldrh	r3, [r7, #22]
 80076ac:	04d9      	lsls	r1, r3, #19
 80076ae:	4b38      	ldr	r3, [pc, #224]	; (8007790 <USB_EPStartXfer+0x52c>)
 80076b0:	400b      	ands	r3, r1
 80076b2:	69b9      	ldr	r1, [r7, #24]
 80076b4:	0148      	lsls	r0, r1, #5
 80076b6:	69f9      	ldr	r1, [r7, #28]
 80076b8:	4401      	add	r1, r0
 80076ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076be:	4313      	orrs	r3, r2
 80076c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ce:	691a      	ldr	r2, [r3, #16]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076d8:	69b9      	ldr	r1, [r7, #24]
 80076da:	0148      	lsls	r0, r1, #5
 80076dc:	69f9      	ldr	r1, [r7, #28]
 80076de:	4401      	add	r1, r0
 80076e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076e4:	4313      	orrs	r3, r2
 80076e6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80076e8:	79fb      	ldrb	r3, [r7, #7]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d10d      	bne.n	800770a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d009      	beq.n	800770a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	68d9      	ldr	r1, [r3, #12]
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007706:	460a      	mov	r2, r1
 8007708:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	791b      	ldrb	r3, [r3, #4]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d128      	bne.n	8007764 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771e:	2b00      	cmp	r3, #0
 8007720:	d110      	bne.n	8007744 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	0151      	lsls	r1, r2, #5
 8007734:	69fa      	ldr	r2, [r7, #28]
 8007736:	440a      	add	r2, r1
 8007738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800773c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	e00f      	b.n	8007764 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	0151      	lsls	r1, r2, #5
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	440a      	add	r2, r1
 800775a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800775e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007762:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	0151      	lsls	r1, r2, #5
 8007776:	69fa      	ldr	r2, [r7, #28]
 8007778:	440a      	add	r2, r1
 800777a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800777e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007782:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3720      	adds	r7, #32
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	1ff80000 	.word	0x1ff80000

08007794 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007794:	b480      	push	{r7}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	785b      	ldrb	r3, [r3, #1]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d14a      	bne.n	8007848 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ca:	f040 8086 	bne.w	80078da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	7812      	ldrb	r2, [r2, #0]
 80077e2:	0151      	lsls	r1, r2, #5
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	440a      	add	r2, r1
 80077e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	7812      	ldrb	r2, [r2, #0]
 8007806:	0151      	lsls	r1, r2, #5
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	440a      	add	r2, r1
 800780c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007810:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007814:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3301      	adds	r3, #1
 800781a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007822:	4293      	cmp	r3, r2
 8007824:	d902      	bls.n	800782c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	75fb      	strb	r3, [r7, #23]
          break;
 800782a:	e056      	b.n	80078da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	015a      	lsls	r2, r3, #5
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	4413      	add	r3, r2
 8007836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007844:	d0e7      	beq.n	8007816 <USB_EPStopXfer+0x82>
 8007846:	e048      	b.n	80078da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800785c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007860:	d13b      	bne.n	80078da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	7812      	ldrb	r2, [r2, #0]
 8007876:	0151      	lsls	r1, r2, #5
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	440a      	add	r2, r1
 800787c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007880:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007884:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	7812      	ldrb	r2, [r2, #0]
 800789a:	0151      	lsls	r1, r2, #5
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	440a      	add	r2, r1
 80078a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3301      	adds	r3, #1
 80078ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d902      	bls.n	80078c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	75fb      	strb	r3, [r7, #23]
          break;
 80078be:	e00c      	b.n	80078da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078d8:	d0e7      	beq.n	80078aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80078da:	7dfb      	ldrb	r3, [r7, #23]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	371c      	adds	r7, #28
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b089      	sub	sp, #36	; 0x24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	4611      	mov	r1, r2
 80078f4:	461a      	mov	r2, r3
 80078f6:	460b      	mov	r3, r1
 80078f8:	71fb      	strb	r3, [r7, #7]
 80078fa:	4613      	mov	r3, r2
 80078fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007906:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800790a:	2b00      	cmp	r3, #0
 800790c:	d123      	bne.n	8007956 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800790e:	88bb      	ldrh	r3, [r7, #4]
 8007910:	3303      	adds	r3, #3
 8007912:	089b      	lsrs	r3, r3, #2
 8007914:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007916:	2300      	movs	r3, #0
 8007918:	61bb      	str	r3, [r7, #24]
 800791a:	e018      	b.n	800794e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800791c:	79fb      	ldrb	r3, [r7, #7]
 800791e:	031a      	lsls	r2, r3, #12
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	4413      	add	r3, r2
 8007924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007928:	461a      	mov	r2, r3
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	3301      	adds	r3, #1
 8007934:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	3301      	adds	r3, #1
 800793a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	3301      	adds	r3, #1
 8007940:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	3301      	adds	r3, #1
 8007946:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	3301      	adds	r3, #1
 800794c:	61bb      	str	r3, [r7, #24]
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	429a      	cmp	r2, r3
 8007954:	d3e2      	bcc.n	800791c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3724      	adds	r7, #36	; 0x24
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007964:	b480      	push	{r7}
 8007966:	b08b      	sub	sp, #44	; 0x2c
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	4613      	mov	r3, r2
 8007970:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800797a:	88fb      	ldrh	r3, [r7, #6]
 800797c:	089b      	lsrs	r3, r3, #2
 800797e:	b29b      	uxth	r3, r3
 8007980:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007982:	88fb      	ldrh	r3, [r7, #6]
 8007984:	f003 0303 	and.w	r3, r3, #3
 8007988:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800798a:	2300      	movs	r3, #0
 800798c:	623b      	str	r3, [r7, #32]
 800798e:	e014      	b.n	80079ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	601a      	str	r2, [r3, #0]
    pDest++;
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	3301      	adds	r3, #1
 80079a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	3301      	adds	r3, #1
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	3301      	adds	r3, #1
 80079ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	3301      	adds	r3, #1
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	3301      	adds	r3, #1
 80079b8:	623b      	str	r3, [r7, #32]
 80079ba:	6a3a      	ldr	r2, [r7, #32]
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d3e6      	bcc.n	8007990 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80079c2:	8bfb      	ldrh	r3, [r7, #30]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d01e      	beq.n	8007a06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80079c8:	2300      	movs	r3, #0
 80079ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d2:	461a      	mov	r2, r3
 80079d4:	f107 0310 	add.w	r3, r7, #16
 80079d8:	6812      	ldr	r2, [r2, #0]
 80079da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	00db      	lsls	r3, r3, #3
 80079e4:	fa22 f303 	lsr.w	r3, r2, r3
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	701a      	strb	r2, [r3, #0]
      i++;
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	3301      	adds	r3, #1
 80079f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	3301      	adds	r3, #1
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80079fa:	8bfb      	ldrh	r3, [r7, #30]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007a00:	8bfb      	ldrh	r3, [r7, #30]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1ea      	bne.n	80079dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	372c      	adds	r7, #44	; 0x2c
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	785b      	ldrb	r3, [r3, #1]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d12c      	bne.n	8007a8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	db12      	blt.n	8007a68 <USB_EPSetStall+0x54>
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00f      	beq.n	8007a68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	0151      	lsls	r1, r2, #5
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	440a      	add	r2, r1
 8007a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	0151      	lsls	r1, r2, #5
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	440a      	add	r2, r1
 8007a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	e02b      	b.n	8007ae2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	015a      	lsls	r2, r3, #5
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	4413      	add	r3, r2
 8007a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	db12      	blt.n	8007ac2 <USB_EPSetStall+0xae>
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00f      	beq.n	8007ac2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	0151      	lsls	r1, r2, #5
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	440a      	add	r2, r1
 8007ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007abc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ac0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	0151      	lsls	r1, r2, #5
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	440a      	add	r2, r1
 8007ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007adc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ae0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	785b      	ldrb	r3, [r3, #1]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d128      	bne.n	8007b5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	0151      	lsls	r1, r2, #5
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	440a      	add	r2, r1
 8007b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	791b      	ldrb	r3, [r3, #4]
 8007b30:	2b03      	cmp	r3, #3
 8007b32:	d003      	beq.n	8007b3c <USB_EPClearStall+0x4c>
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	791b      	ldrb	r3, [r3, #4]
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d138      	bne.n	8007bae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	0151      	lsls	r1, r2, #5
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	440a      	add	r2, r1
 8007b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b5a:	6013      	str	r3, [r2, #0]
 8007b5c:	e027      	b.n	8007bae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	015a      	lsls	r2, r3, #5
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	4413      	add	r3, r2
 8007b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	0151      	lsls	r1, r2, #5
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	440a      	add	r2, r1
 8007b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	791b      	ldrb	r3, [r3, #4]
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d003      	beq.n	8007b8e <USB_EPClearStall+0x9e>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	791b      	ldrb	r3, [r3, #4]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d10f      	bne.n	8007bae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	0151      	lsls	r1, r2, #5
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	440a      	add	r2, r1
 8007ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007bde:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	78fb      	ldrb	r3, [r7, #3]
 8007bea:	011b      	lsls	r3, r3, #4
 8007bec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007bf0:	68f9      	ldr	r1, [r7, #12]
 8007bf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c22:	f023 0303 	bic.w	r3, r3, #3
 8007c26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c36:	f023 0302 	bic.w	r3, r3, #2
 8007c3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b085      	sub	sp, #20
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c64:	f023 0303 	bic.w	r3, r3, #3
 8007c68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c78:	f043 0302 	orr.w	r3, r3, #2
 8007c7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b085      	sub	sp, #20
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	0c1b      	lsrs	r3, r3, #16
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b085      	sub	sp, #20
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	4013      	ands	r3, r2
 8007d08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	b29b      	uxth	r3, r3
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b085      	sub	sp, #20
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	460b      	mov	r3, r1
 8007d24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	4013      	ands	r3, r2
 8007d46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d48:	68bb      	ldr	r3, [r7, #8]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b087      	sub	sp, #28
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	f003 030f 	and.w	r3, r3, #15
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	fa22 f303 	lsr.w	r3, r2, r3
 8007d86:	01db      	lsls	r3, r3, #7
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	4013      	ands	r3, r2
 8007da2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007da4:	68bb      	ldr	r3, [r7, #8]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	371c      	adds	r7, #28
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b085      	sub	sp, #20
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007de8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007dec:	f023 0307 	bic.w	r3, r3, #7
 8007df0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b087      	sub	sp, #28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	333c      	adds	r3, #60	; 0x3c
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	4a26      	ldr	r2, [pc, #152]	; (8007ecc <USB_EP0_OutStart+0xb8>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d90a      	bls.n	8007e4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e48:	d101      	bne.n	8007e4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	e037      	b.n	8007ebe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e54:	461a      	mov	r2, r3
 8007e56:	2300      	movs	r3, #0
 8007e58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e7c:	f043 0318 	orr.w	r3, r3, #24
 8007e80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007e94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007e96:	7afb      	ldrb	r3, [r7, #11]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d10f      	bne.n	8007ebc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eb6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007eba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	371c      	adds	r7, #28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop
 8007ecc:	4f54300a 	.word	0x4f54300a

08007ed0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007ee8:	d901      	bls.n	8007eee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e01b      	b.n	8007f26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	daf2      	bge.n	8007edc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	f043 0201 	orr.w	r2, r3, #1
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007f12:	d901      	bls.n	8007f18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e006      	b.n	8007f26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d0f0      	beq.n	8007f06 <USB_CoreReset+0x36>

  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
	...

08007f34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007f38:	4904      	ldr	r1, [pc, #16]	; (8007f4c <MX_FATFS_Init+0x18>)
 8007f3a:	4805      	ldr	r0, [pc, #20]	; (8007f50 <MX_FATFS_Init+0x1c>)
 8007f3c:	f004 fd08 	bl	800c950 <FATFS_LinkDriver>
 8007f40:	4603      	mov	r3, r0
 8007f42:	461a      	mov	r2, r3
 8007f44:	4b03      	ldr	r3, [pc, #12]	; (8007f54 <MX_FATFS_Init+0x20>)
 8007f46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007f48:	bf00      	nop
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	200003d8 	.word	0x200003d8
 8007f50:	2000000c 	.word	0x2000000c
 8007f54:	200003d4 	.word	0x200003d4

08007f58 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007f62:	4b06      	ldr	r3, [pc, #24]	; (8007f7c <USER_initialize+0x24>)
 8007f64:	2201      	movs	r2, #1
 8007f66:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007f68:	4b04      	ldr	r3, [pc, #16]	; (8007f7c <USER_initialize+0x24>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	20000009 	.word	0x20000009

08007f80 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	4603      	mov	r3, r0
 8007f88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007f8a:	4b06      	ldr	r3, [pc, #24]	; (8007fa4 <USER_status+0x24>)
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007f90:	4b04      	ldr	r3, [pc, #16]	; (8007fa4 <USER_status+0x24>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	20000009 	.word	0x20000009

08007fa8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	607a      	str	r2, [r7, #4]
 8007fb2:	603b      	str	r3, [r7, #0]
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8007fb8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
 8007fd0:	603b      	str	r3, [r7, #0]
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8007fd6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	603a      	str	r2, [r7, #0]
 8007fee:	71fb      	strb	r3, [r7, #7]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	73fb      	strb	r3, [r7, #15]
    return res;
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
	...

08008008 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800800e:	4b87      	ldr	r3, [pc, #540]	; (800822c <MX_LWIP_Init+0x224>)
 8008010:	22c0      	movs	r2, #192	; 0xc0
 8008012:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008014:	4b85      	ldr	r3, [pc, #532]	; (800822c <MX_LWIP_Init+0x224>)
 8008016:	22a8      	movs	r2, #168	; 0xa8
 8008018:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800801a:	4b84      	ldr	r3, [pc, #528]	; (800822c <MX_LWIP_Init+0x224>)
 800801c:	2200      	movs	r2, #0
 800801e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8008020:	4b82      	ldr	r3, [pc, #520]	; (800822c <MX_LWIP_Init+0x224>)
 8008022:	226f      	movs	r2, #111	; 0x6f
 8008024:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008026:	4b82      	ldr	r3, [pc, #520]	; (8008230 <MX_LWIP_Init+0x228>)
 8008028:	22ff      	movs	r2, #255	; 0xff
 800802a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800802c:	4b80      	ldr	r3, [pc, #512]	; (8008230 <MX_LWIP_Init+0x228>)
 800802e:	22ff      	movs	r2, #255	; 0xff
 8008030:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008032:	4b7f      	ldr	r3, [pc, #508]	; (8008230 <MX_LWIP_Init+0x228>)
 8008034:	22ff      	movs	r2, #255	; 0xff
 8008036:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008038:	4b7d      	ldr	r3, [pc, #500]	; (8008230 <MX_LWIP_Init+0x228>)
 800803a:	2200      	movs	r2, #0
 800803c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800803e:	4b7d      	ldr	r3, [pc, #500]	; (8008234 <MX_LWIP_Init+0x22c>)
 8008040:	22c0      	movs	r2, #192	; 0xc0
 8008042:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008044:	4b7b      	ldr	r3, [pc, #492]	; (8008234 <MX_LWIP_Init+0x22c>)
 8008046:	22a8      	movs	r2, #168	; 0xa8
 8008048:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800804a:	4b7a      	ldr	r3, [pc, #488]	; (8008234 <MX_LWIP_Init+0x22c>)
 800804c:	2200      	movs	r2, #0
 800804e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8008050:	4b78      	ldr	r3, [pc, #480]	; (8008234 <MX_LWIP_Init+0x22c>)
 8008052:	2201      	movs	r2, #1
 8008054:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8008056:	f004 fcb8 	bl	800c9ca <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800805a:	4b74      	ldr	r3, [pc, #464]	; (800822c <MX_LWIP_Init+0x224>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	061a      	lsls	r2, r3, #24
 8008060:	4b72      	ldr	r3, [pc, #456]	; (800822c <MX_LWIP_Init+0x224>)
 8008062:	785b      	ldrb	r3, [r3, #1]
 8008064:	041b      	lsls	r3, r3, #16
 8008066:	431a      	orrs	r2, r3
 8008068:	4b70      	ldr	r3, [pc, #448]	; (800822c <MX_LWIP_Init+0x224>)
 800806a:	789b      	ldrb	r3, [r3, #2]
 800806c:	021b      	lsls	r3, r3, #8
 800806e:	4313      	orrs	r3, r2
 8008070:	4a6e      	ldr	r2, [pc, #440]	; (800822c <MX_LWIP_Init+0x224>)
 8008072:	78d2      	ldrb	r2, [r2, #3]
 8008074:	4313      	orrs	r3, r2
 8008076:	061a      	lsls	r2, r3, #24
 8008078:	4b6c      	ldr	r3, [pc, #432]	; (800822c <MX_LWIP_Init+0x224>)
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	0619      	lsls	r1, r3, #24
 800807e:	4b6b      	ldr	r3, [pc, #428]	; (800822c <MX_LWIP_Init+0x224>)
 8008080:	785b      	ldrb	r3, [r3, #1]
 8008082:	041b      	lsls	r3, r3, #16
 8008084:	4319      	orrs	r1, r3
 8008086:	4b69      	ldr	r3, [pc, #420]	; (800822c <MX_LWIP_Init+0x224>)
 8008088:	789b      	ldrb	r3, [r3, #2]
 800808a:	021b      	lsls	r3, r3, #8
 800808c:	430b      	orrs	r3, r1
 800808e:	4967      	ldr	r1, [pc, #412]	; (800822c <MX_LWIP_Init+0x224>)
 8008090:	78c9      	ldrb	r1, [r1, #3]
 8008092:	430b      	orrs	r3, r1
 8008094:	021b      	lsls	r3, r3, #8
 8008096:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800809a:	431a      	orrs	r2, r3
 800809c:	4b63      	ldr	r3, [pc, #396]	; (800822c <MX_LWIP_Init+0x224>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	0619      	lsls	r1, r3, #24
 80080a2:	4b62      	ldr	r3, [pc, #392]	; (800822c <MX_LWIP_Init+0x224>)
 80080a4:	785b      	ldrb	r3, [r3, #1]
 80080a6:	041b      	lsls	r3, r3, #16
 80080a8:	4319      	orrs	r1, r3
 80080aa:	4b60      	ldr	r3, [pc, #384]	; (800822c <MX_LWIP_Init+0x224>)
 80080ac:	789b      	ldrb	r3, [r3, #2]
 80080ae:	021b      	lsls	r3, r3, #8
 80080b0:	430b      	orrs	r3, r1
 80080b2:	495e      	ldr	r1, [pc, #376]	; (800822c <MX_LWIP_Init+0x224>)
 80080b4:	78c9      	ldrb	r1, [r1, #3]
 80080b6:	430b      	orrs	r3, r1
 80080b8:	0a1b      	lsrs	r3, r3, #8
 80080ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80080be:	431a      	orrs	r2, r3
 80080c0:	4b5a      	ldr	r3, [pc, #360]	; (800822c <MX_LWIP_Init+0x224>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	0619      	lsls	r1, r3, #24
 80080c6:	4b59      	ldr	r3, [pc, #356]	; (800822c <MX_LWIP_Init+0x224>)
 80080c8:	785b      	ldrb	r3, [r3, #1]
 80080ca:	041b      	lsls	r3, r3, #16
 80080cc:	4319      	orrs	r1, r3
 80080ce:	4b57      	ldr	r3, [pc, #348]	; (800822c <MX_LWIP_Init+0x224>)
 80080d0:	789b      	ldrb	r3, [r3, #2]
 80080d2:	021b      	lsls	r3, r3, #8
 80080d4:	430b      	orrs	r3, r1
 80080d6:	4955      	ldr	r1, [pc, #340]	; (800822c <MX_LWIP_Init+0x224>)
 80080d8:	78c9      	ldrb	r1, [r1, #3]
 80080da:	430b      	orrs	r3, r1
 80080dc:	0e1b      	lsrs	r3, r3, #24
 80080de:	4313      	orrs	r3, r2
 80080e0:	4a55      	ldr	r2, [pc, #340]	; (8008238 <MX_LWIP_Init+0x230>)
 80080e2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80080e4:	4b52      	ldr	r3, [pc, #328]	; (8008230 <MX_LWIP_Init+0x228>)
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	061a      	lsls	r2, r3, #24
 80080ea:	4b51      	ldr	r3, [pc, #324]	; (8008230 <MX_LWIP_Init+0x228>)
 80080ec:	785b      	ldrb	r3, [r3, #1]
 80080ee:	041b      	lsls	r3, r3, #16
 80080f0:	431a      	orrs	r2, r3
 80080f2:	4b4f      	ldr	r3, [pc, #316]	; (8008230 <MX_LWIP_Init+0x228>)
 80080f4:	789b      	ldrb	r3, [r3, #2]
 80080f6:	021b      	lsls	r3, r3, #8
 80080f8:	4313      	orrs	r3, r2
 80080fa:	4a4d      	ldr	r2, [pc, #308]	; (8008230 <MX_LWIP_Init+0x228>)
 80080fc:	78d2      	ldrb	r2, [r2, #3]
 80080fe:	4313      	orrs	r3, r2
 8008100:	061a      	lsls	r2, r3, #24
 8008102:	4b4b      	ldr	r3, [pc, #300]	; (8008230 <MX_LWIP_Init+0x228>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	0619      	lsls	r1, r3, #24
 8008108:	4b49      	ldr	r3, [pc, #292]	; (8008230 <MX_LWIP_Init+0x228>)
 800810a:	785b      	ldrb	r3, [r3, #1]
 800810c:	041b      	lsls	r3, r3, #16
 800810e:	4319      	orrs	r1, r3
 8008110:	4b47      	ldr	r3, [pc, #284]	; (8008230 <MX_LWIP_Init+0x228>)
 8008112:	789b      	ldrb	r3, [r3, #2]
 8008114:	021b      	lsls	r3, r3, #8
 8008116:	430b      	orrs	r3, r1
 8008118:	4945      	ldr	r1, [pc, #276]	; (8008230 <MX_LWIP_Init+0x228>)
 800811a:	78c9      	ldrb	r1, [r1, #3]
 800811c:	430b      	orrs	r3, r1
 800811e:	021b      	lsls	r3, r3, #8
 8008120:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008124:	431a      	orrs	r2, r3
 8008126:	4b42      	ldr	r3, [pc, #264]	; (8008230 <MX_LWIP_Init+0x228>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	0619      	lsls	r1, r3, #24
 800812c:	4b40      	ldr	r3, [pc, #256]	; (8008230 <MX_LWIP_Init+0x228>)
 800812e:	785b      	ldrb	r3, [r3, #1]
 8008130:	041b      	lsls	r3, r3, #16
 8008132:	4319      	orrs	r1, r3
 8008134:	4b3e      	ldr	r3, [pc, #248]	; (8008230 <MX_LWIP_Init+0x228>)
 8008136:	789b      	ldrb	r3, [r3, #2]
 8008138:	021b      	lsls	r3, r3, #8
 800813a:	430b      	orrs	r3, r1
 800813c:	493c      	ldr	r1, [pc, #240]	; (8008230 <MX_LWIP_Init+0x228>)
 800813e:	78c9      	ldrb	r1, [r1, #3]
 8008140:	430b      	orrs	r3, r1
 8008142:	0a1b      	lsrs	r3, r3, #8
 8008144:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008148:	431a      	orrs	r2, r3
 800814a:	4b39      	ldr	r3, [pc, #228]	; (8008230 <MX_LWIP_Init+0x228>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	0619      	lsls	r1, r3, #24
 8008150:	4b37      	ldr	r3, [pc, #220]	; (8008230 <MX_LWIP_Init+0x228>)
 8008152:	785b      	ldrb	r3, [r3, #1]
 8008154:	041b      	lsls	r3, r3, #16
 8008156:	4319      	orrs	r1, r3
 8008158:	4b35      	ldr	r3, [pc, #212]	; (8008230 <MX_LWIP_Init+0x228>)
 800815a:	789b      	ldrb	r3, [r3, #2]
 800815c:	021b      	lsls	r3, r3, #8
 800815e:	430b      	orrs	r3, r1
 8008160:	4933      	ldr	r1, [pc, #204]	; (8008230 <MX_LWIP_Init+0x228>)
 8008162:	78c9      	ldrb	r1, [r1, #3]
 8008164:	430b      	orrs	r3, r1
 8008166:	0e1b      	lsrs	r3, r3, #24
 8008168:	4313      	orrs	r3, r2
 800816a:	4a34      	ldr	r2, [pc, #208]	; (800823c <MX_LWIP_Init+0x234>)
 800816c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800816e:	4b31      	ldr	r3, [pc, #196]	; (8008234 <MX_LWIP_Init+0x22c>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	061a      	lsls	r2, r3, #24
 8008174:	4b2f      	ldr	r3, [pc, #188]	; (8008234 <MX_LWIP_Init+0x22c>)
 8008176:	785b      	ldrb	r3, [r3, #1]
 8008178:	041b      	lsls	r3, r3, #16
 800817a:	431a      	orrs	r2, r3
 800817c:	4b2d      	ldr	r3, [pc, #180]	; (8008234 <MX_LWIP_Init+0x22c>)
 800817e:	789b      	ldrb	r3, [r3, #2]
 8008180:	021b      	lsls	r3, r3, #8
 8008182:	4313      	orrs	r3, r2
 8008184:	4a2b      	ldr	r2, [pc, #172]	; (8008234 <MX_LWIP_Init+0x22c>)
 8008186:	78d2      	ldrb	r2, [r2, #3]
 8008188:	4313      	orrs	r3, r2
 800818a:	061a      	lsls	r2, r3, #24
 800818c:	4b29      	ldr	r3, [pc, #164]	; (8008234 <MX_LWIP_Init+0x22c>)
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	0619      	lsls	r1, r3, #24
 8008192:	4b28      	ldr	r3, [pc, #160]	; (8008234 <MX_LWIP_Init+0x22c>)
 8008194:	785b      	ldrb	r3, [r3, #1]
 8008196:	041b      	lsls	r3, r3, #16
 8008198:	4319      	orrs	r1, r3
 800819a:	4b26      	ldr	r3, [pc, #152]	; (8008234 <MX_LWIP_Init+0x22c>)
 800819c:	789b      	ldrb	r3, [r3, #2]
 800819e:	021b      	lsls	r3, r3, #8
 80081a0:	430b      	orrs	r3, r1
 80081a2:	4924      	ldr	r1, [pc, #144]	; (8008234 <MX_LWIP_Init+0x22c>)
 80081a4:	78c9      	ldrb	r1, [r1, #3]
 80081a6:	430b      	orrs	r3, r1
 80081a8:	021b      	lsls	r3, r3, #8
 80081aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081ae:	431a      	orrs	r2, r3
 80081b0:	4b20      	ldr	r3, [pc, #128]	; (8008234 <MX_LWIP_Init+0x22c>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	0619      	lsls	r1, r3, #24
 80081b6:	4b1f      	ldr	r3, [pc, #124]	; (8008234 <MX_LWIP_Init+0x22c>)
 80081b8:	785b      	ldrb	r3, [r3, #1]
 80081ba:	041b      	lsls	r3, r3, #16
 80081bc:	4319      	orrs	r1, r3
 80081be:	4b1d      	ldr	r3, [pc, #116]	; (8008234 <MX_LWIP_Init+0x22c>)
 80081c0:	789b      	ldrb	r3, [r3, #2]
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	430b      	orrs	r3, r1
 80081c6:	491b      	ldr	r1, [pc, #108]	; (8008234 <MX_LWIP_Init+0x22c>)
 80081c8:	78c9      	ldrb	r1, [r1, #3]
 80081ca:	430b      	orrs	r3, r1
 80081cc:	0a1b      	lsrs	r3, r3, #8
 80081ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80081d2:	431a      	orrs	r2, r3
 80081d4:	4b17      	ldr	r3, [pc, #92]	; (8008234 <MX_LWIP_Init+0x22c>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	0619      	lsls	r1, r3, #24
 80081da:	4b16      	ldr	r3, [pc, #88]	; (8008234 <MX_LWIP_Init+0x22c>)
 80081dc:	785b      	ldrb	r3, [r3, #1]
 80081de:	041b      	lsls	r3, r3, #16
 80081e0:	4319      	orrs	r1, r3
 80081e2:	4b14      	ldr	r3, [pc, #80]	; (8008234 <MX_LWIP_Init+0x22c>)
 80081e4:	789b      	ldrb	r3, [r3, #2]
 80081e6:	021b      	lsls	r3, r3, #8
 80081e8:	430b      	orrs	r3, r1
 80081ea:	4912      	ldr	r1, [pc, #72]	; (8008234 <MX_LWIP_Init+0x22c>)
 80081ec:	78c9      	ldrb	r1, [r1, #3]
 80081ee:	430b      	orrs	r3, r1
 80081f0:	0e1b      	lsrs	r3, r3, #24
 80081f2:	4313      	orrs	r3, r2
 80081f4:	4a12      	ldr	r2, [pc, #72]	; (8008240 <MX_LWIP_Init+0x238>)
 80081f6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80081f8:	4b12      	ldr	r3, [pc, #72]	; (8008244 <MX_LWIP_Init+0x23c>)
 80081fa:	9302      	str	r3, [sp, #8]
 80081fc:	4b12      	ldr	r3, [pc, #72]	; (8008248 <MX_LWIP_Init+0x240>)
 80081fe:	9301      	str	r3, [sp, #4]
 8008200:	2300      	movs	r3, #0
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	4b0e      	ldr	r3, [pc, #56]	; (8008240 <MX_LWIP_Init+0x238>)
 8008206:	4a0d      	ldr	r2, [pc, #52]	; (800823c <MX_LWIP_Init+0x234>)
 8008208:	490b      	ldr	r1, [pc, #44]	; (8008238 <MX_LWIP_Init+0x230>)
 800820a:	4810      	ldr	r0, [pc, #64]	; (800824c <MX_LWIP_Init+0x244>)
 800820c:	f005 f8c8 	bl	800d3a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008210:	480e      	ldr	r0, [pc, #56]	; (800824c <MX_LWIP_Init+0x244>)
 8008212:	f005 fa77 	bl	800d704 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8008216:	480d      	ldr	r0, [pc, #52]	; (800824c <MX_LWIP_Init+0x244>)
 8008218:	f005 fa84 	bl	800d724 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800821c:	490c      	ldr	r1, [pc, #48]	; (8008250 <MX_LWIP_Init+0x248>)
 800821e:	480b      	ldr	r0, [pc, #44]	; (800824c <MX_LWIP_Init+0x244>)
 8008220:	f005 fb82 	bl	800d928 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008224:	bf00      	nop
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20000420 	.word	0x20000420
 8008230:	20000424 	.word	0x20000424
 8008234:	20000428 	.word	0x20000428
 8008238:	20000414 	.word	0x20000414
 800823c:	20000418 	.word	0x20000418
 8008240:	2000041c 	.word	0x2000041c
 8008244:	08016ead 	.word	0x08016ead
 8008248:	08008561 	.word	0x08008561
 800824c:	200003e0 	.word	0x200003e0
 8008250:	080082a5 	.word	0x080082a5

08008254 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800825c:	f7f9 fa6e 	bl	800173c <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	4b08      	ldr	r3, [pc, #32]	; (8008284 <Ethernet_Link_Periodic_Handle+0x30>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	2b63      	cmp	r3, #99	; 0x63
 800826a:	d907      	bls.n	800827c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800826c:	f7f9 fa66 	bl	800173c <HAL_GetTick>
 8008270:	4603      	mov	r3, r0
 8008272:	4a04      	ldr	r2, [pc, #16]	; (8008284 <Ethernet_Link_Periodic_Handle+0x30>)
 8008274:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fab6 	bl	80087e8 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	200003dc 	.word	0x200003dc

08008288 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800828c:	4804      	ldr	r0, [pc, #16]	; (80082a0 <MX_LWIP_Process+0x18>)
 800828e:	f000 f947 	bl	8008520 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8008292:	f00c fa1f 	bl	80146d4 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8008296:	4802      	ldr	r0, [pc, #8]	; (80082a0 <MX_LWIP_Process+0x18>)
 8008298:	f7ff ffdc 	bl	8008254 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800829c:	bf00      	nop
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	200003e0 	.word	0x200003e0

080082a4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80082c4:	4b40      	ldr	r3, [pc, #256]	; (80083c8 <low_level_init+0x110>)
 80082c6:	4a41      	ldr	r2, [pc, #260]	; (80083cc <low_level_init+0x114>)
 80082c8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80082ca:	2300      	movs	r3, #0
 80082cc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80082ce:	2380      	movs	r3, #128	; 0x80
 80082d0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80082d2:	23e1      	movs	r3, #225	; 0xe1
 80082d4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80082d6:	2300      	movs	r3, #0
 80082d8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80082da:	2300      	movs	r3, #0
 80082dc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80082de:	2300      	movs	r3, #0
 80082e0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80082e2:	4a39      	ldr	r2, [pc, #228]	; (80083c8 <low_level_init+0x110>)
 80082e4:	f107 0308 	add.w	r3, r7, #8
 80082e8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80082ea:	4b37      	ldr	r3, [pc, #220]	; (80083c8 <low_level_init+0x110>)
 80082ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80082f0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80082f2:	4b35      	ldr	r3, [pc, #212]	; (80083c8 <low_level_init+0x110>)
 80082f4:	4a36      	ldr	r2, [pc, #216]	; (80083d0 <low_level_init+0x118>)
 80082f6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80082f8:	4b33      	ldr	r3, [pc, #204]	; (80083c8 <low_level_init+0x110>)
 80082fa:	4a36      	ldr	r2, [pc, #216]	; (80083d4 <low_level_init+0x11c>)
 80082fc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80082fe:	4b32      	ldr	r3, [pc, #200]	; (80083c8 <low_level_init+0x110>)
 8008300:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008304:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008306:	4830      	ldr	r0, [pc, #192]	; (80083c8 <low_level_init+0x110>)
 8008308:	f7f9 ff5c 	bl	80021c4 <HAL_ETH_Init>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008310:	2238      	movs	r2, #56	; 0x38
 8008312:	2100      	movs	r1, #0
 8008314:	4830      	ldr	r0, [pc, #192]	; (80083d8 <low_level_init+0x120>)
 8008316:	f00f ff66 	bl	80181e6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800831a:	4b2f      	ldr	r3, [pc, #188]	; (80083d8 <low_level_init+0x120>)
 800831c:	2221      	movs	r2, #33	; 0x21
 800831e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008320:	4b2d      	ldr	r3, [pc, #180]	; (80083d8 <low_level_init+0x120>)
 8008322:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8008326:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008328:	4b2b      	ldr	r3, [pc, #172]	; (80083d8 <low_level_init+0x120>)
 800832a:	2200      	movs	r2, #0
 800832c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800832e:	482b      	ldr	r0, [pc, #172]	; (80083dc <low_level_init+0x124>)
 8008330:	f004 fefe 	bl	800d130 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2206      	movs	r2, #6
 8008338:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800833c:	4b22      	ldr	r3, [pc, #136]	; (80083c8 <low_level_init+0x110>)
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	781a      	ldrb	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008348:	4b1f      	ldr	r3, [pc, #124]	; (80083c8 <low_level_init+0x110>)
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	785a      	ldrb	r2, [r3, #1]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008354:	4b1c      	ldr	r3, [pc, #112]	; (80083c8 <low_level_init+0x110>)
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	789a      	ldrb	r2, [r3, #2]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008360:	4b19      	ldr	r3, [pc, #100]	; (80083c8 <low_level_init+0x110>)
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	78da      	ldrb	r2, [r3, #3]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800836c:	4b16      	ldr	r3, [pc, #88]	; (80083c8 <low_level_init+0x110>)
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	791a      	ldrb	r2, [r3, #4]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008378:	4b13      	ldr	r3, [pc, #76]	; (80083c8 <low_level_init+0x110>)
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	795a      	ldrb	r2, [r3, #5]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800838a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008392:	f043 030a 	orr.w	r3, r3, #10
 8008396:	b2da      	uxtb	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 800839e:	4910      	ldr	r1, [pc, #64]	; (80083e0 <low_level_init+0x128>)
 80083a0:	4810      	ldr	r0, [pc, #64]	; (80083e4 <low_level_init+0x12c>)
 80083a2:	f7f9 f804 	bl	80013ae <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 80083a6:	480f      	ldr	r0, [pc, #60]	; (80083e4 <low_level_init+0x12c>)
 80083a8:	f7f9 f833 	bl	8001412 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d103      	bne.n	80083ba <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fa18 	bl	80087e8 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80083b8:	e001      	b.n	80083be <low_level_init+0x106>
    Error_Handler();
 80083ba:	f7f8 fa29 	bl	8000810 <Error_Handler>
}
 80083be:	bf00      	nop
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20004ef8 	.word	0x20004ef8
 80083cc:	40028000 	.word	0x40028000
 80083d0:	20004e58 	.word	0x20004e58
 80083d4:	20004db8 	.word	0x20004db8
 80083d8:	20004fa8 	.word	0x20004fa8
 80083dc:	0801ba38 	.word	0x0801ba38
 80083e0:	20000020 	.word	0x20000020
 80083e4:	20004fe0 	.word	0x20004fe0

080083e8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b092      	sub	sp, #72	; 0x48
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80083f2:	2300      	movs	r3, #0
 80083f4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80083f6:	2300      	movs	r3, #0
 80083f8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008400:	f107 030c 	add.w	r3, r7, #12
 8008404:	2230      	movs	r2, #48	; 0x30
 8008406:	2100      	movs	r1, #0
 8008408:	4618      	mov	r0, r3
 800840a:	f00f feec 	bl	80181e6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800840e:	f107 030c 	add.w	r3, r7, #12
 8008412:	2230      	movs	r2, #48	; 0x30
 8008414:	2100      	movs	r1, #0
 8008416:	4618      	mov	r0, r3
 8008418:	f00f fee5 	bl	80181e6 <memset>

  for(q = p; q != NULL; q = q->next)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	643b      	str	r3, [r7, #64]	; 0x40
 8008420:	e045      	b.n	80084ae <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008424:	2b03      	cmp	r3, #3
 8008426:	d902      	bls.n	800842e <low_level_output+0x46>
      return ERR_IF;
 8008428:	f06f 030b 	mvn.w	r3, #11
 800842c:	e055      	b.n	80084da <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800842e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008430:	6859      	ldr	r1, [r3, #4]
 8008432:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008434:	4613      	mov	r3, r2
 8008436:	005b      	lsls	r3, r3, #1
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	3348      	adds	r3, #72	; 0x48
 800843e:	443b      	add	r3, r7
 8008440:	3b3c      	subs	r3, #60	; 0x3c
 8008442:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008446:	895b      	ldrh	r3, [r3, #10]
 8008448:	4619      	mov	r1, r3
 800844a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800844c:	4613      	mov	r3, r2
 800844e:	005b      	lsls	r3, r3, #1
 8008450:	4413      	add	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	3348      	adds	r3, #72	; 0x48
 8008456:	443b      	add	r3, r7
 8008458:	3b38      	subs	r3, #56	; 0x38
 800845a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800845c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800845e:	2b00      	cmp	r3, #0
 8008460:	d011      	beq.n	8008486 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008464:	1e5a      	subs	r2, r3, #1
 8008466:	f107 000c 	add.w	r0, r7, #12
 800846a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800846c:	460b      	mov	r3, r1
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	440b      	add	r3, r1
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	18c1      	adds	r1, r0, r3
 8008476:	4613      	mov	r3, r2
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	3348      	adds	r3, #72	; 0x48
 8008480:	443b      	add	r3, r7
 8008482:	3b34      	subs	r3, #52	; 0x34
 8008484:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d109      	bne.n	80084a2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800848e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008490:	4613      	mov	r3, r2
 8008492:	005b      	lsls	r3, r3, #1
 8008494:	4413      	add	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	3348      	adds	r3, #72	; 0x48
 800849a:	443b      	add	r3, r7
 800849c:	3b34      	subs	r3, #52	; 0x34
 800849e:	2200      	movs	r2, #0
 80084a0:	601a      	str	r2, [r3, #0]
    }

    i++;
 80084a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084a4:	3301      	adds	r3, #1
 80084a6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80084a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	643b      	str	r3, [r7, #64]	; 0x40
 80084ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1b6      	bne.n	8008422 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	891b      	ldrh	r3, [r3, #8]
 80084b8:	461a      	mov	r2, r3
 80084ba:	4b0a      	ldr	r3, [pc, #40]	; (80084e4 <low_level_output+0xfc>)
 80084bc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80084be:	4a09      	ldr	r2, [pc, #36]	; (80084e4 <low_level_output+0xfc>)
 80084c0:	f107 030c 	add.w	r3, r7, #12
 80084c4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80084c6:	4a07      	ldr	r2, [pc, #28]	; (80084e4 <low_level_output+0xfc>)
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80084cc:	2214      	movs	r2, #20
 80084ce:	4905      	ldr	r1, [pc, #20]	; (80084e4 <low_level_output+0xfc>)
 80084d0:	4805      	ldr	r0, [pc, #20]	; (80084e8 <low_level_output+0x100>)
 80084d2:	f7f9 ffad 	bl	8002430 <HAL_ETH_Transmit>

  return errval;
 80084d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3748      	adds	r7, #72	; 0x48
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	20004fa8 	.word	0x20004fa8
 80084e8:	20004ef8 	.word	0x20004ef8

080084ec <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80084f4:	2300      	movs	r3, #0
 80084f6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80084f8:	4b07      	ldr	r3, [pc, #28]	; (8008518 <low_level_input+0x2c>)
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d105      	bne.n	800850c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8008500:	f107 030c 	add.w	r3, r7, #12
 8008504:	4619      	mov	r1, r3
 8008506:	4805      	ldr	r0, [pc, #20]	; (800851c <low_level_input+0x30>)
 8008508:	f7fa f826 	bl	8002558 <HAL_ETH_ReadData>
  }

  return p;
 800850c:	68fb      	ldr	r3, [r7, #12]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20004db4 	.word	0x20004db4
 800851c:	20004ef8 	.word	0x20004ef8

08008520 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008528:	2300      	movs	r3, #0
 800852a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff ffdd 	bl	80084ec <low_level_input>
 8008532:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	4798      	blx	r3
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f005 fd6c 	bl	800e028 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1ea      	bne.n	800852c <ethernetif_input+0xc>
}
 8008556:	bf00      	nop
 8008558:	bf00      	nop
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d106      	bne.n	800857c <ethernetif_init+0x1c>
 800856e:	4b0e      	ldr	r3, [pc, #56]	; (80085a8 <ethernetif_init+0x48>)
 8008570:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008574:	490d      	ldr	r1, [pc, #52]	; (80085ac <ethernetif_init+0x4c>)
 8008576:	480e      	ldr	r0, [pc, #56]	; (80085b0 <ethernetif_init+0x50>)
 8008578:	f00f fdd0 	bl	801811c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2273      	movs	r2, #115	; 0x73
 8008580:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2274      	movs	r2, #116	; 0x74
 8008588:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a09      	ldr	r2, [pc, #36]	; (80085b4 <ethernetif_init+0x54>)
 8008590:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a08      	ldr	r2, [pc, #32]	; (80085b8 <ethernetif_init+0x58>)
 8008596:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7ff fe8d 	bl	80082b8 <low_level_init>

  return ERR_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	08018fc0 	.word	0x08018fc0
 80085ac:	08018fdc 	.word	0x08018fdc
 80085b0:	08018fec 	.word	0x08018fec
 80085b4:	08015365 	.word	0x08015365
 80085b8:	080083e9 	.word	0x080083e9

080085bc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80085c8:	68f9      	ldr	r1, [r7, #12]
 80085ca:	4807      	ldr	r0, [pc, #28]	; (80085e8 <pbuf_free_custom+0x2c>)
 80085cc:	f004 fe92 	bl	800d2f4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80085d0:	4b06      	ldr	r3, [pc, #24]	; (80085ec <pbuf_free_custom+0x30>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d102      	bne.n	80085de <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80085d8:	4b04      	ldr	r3, [pc, #16]	; (80085ec <pbuf_free_custom+0x30>)
 80085da:	2200      	movs	r2, #0
 80085dc:	701a      	strb	r2, [r3, #0]
  }
}
 80085de:	bf00      	nop
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	0801ba38 	.word	0x0801ba38
 80085ec:	20004db4 	.word	0x20004db4

080085f0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80085f4:	f7f9 f8a2 	bl	800173c <HAL_GetTick>
 80085f8:	4603      	mov	r3, r0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08e      	sub	sp, #56	; 0x38
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800860c:	2200      	movs	r2, #0
 800860e:	601a      	str	r2, [r3, #0]
 8008610:	605a      	str	r2, [r3, #4]
 8008612:	609a      	str	r2, [r3, #8]
 8008614:	60da      	str	r2, [r3, #12]
 8008616:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a46      	ldr	r2, [pc, #280]	; (8008738 <HAL_ETH_MspInit+0x138>)
 800861e:	4293      	cmp	r3, r2
 8008620:	f040 8085 	bne.w	800872e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008624:	2300      	movs	r3, #0
 8008626:	623b      	str	r3, [r7, #32]
 8008628:	4b44      	ldr	r3, [pc, #272]	; (800873c <HAL_ETH_MspInit+0x13c>)
 800862a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862c:	4a43      	ldr	r2, [pc, #268]	; (800873c <HAL_ETH_MspInit+0x13c>)
 800862e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008632:	6313      	str	r3, [r2, #48]	; 0x30
 8008634:	4b41      	ldr	r3, [pc, #260]	; (800873c <HAL_ETH_MspInit+0x13c>)
 8008636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800863c:	623b      	str	r3, [r7, #32]
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	2300      	movs	r3, #0
 8008642:	61fb      	str	r3, [r7, #28]
 8008644:	4b3d      	ldr	r3, [pc, #244]	; (800873c <HAL_ETH_MspInit+0x13c>)
 8008646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008648:	4a3c      	ldr	r2, [pc, #240]	; (800873c <HAL_ETH_MspInit+0x13c>)
 800864a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800864e:	6313      	str	r3, [r2, #48]	; 0x30
 8008650:	4b3a      	ldr	r3, [pc, #232]	; (800873c <HAL_ETH_MspInit+0x13c>)
 8008652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008654:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008658:	61fb      	str	r3, [r7, #28]
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	2300      	movs	r3, #0
 800865e:	61bb      	str	r3, [r7, #24]
 8008660:	4b36      	ldr	r3, [pc, #216]	; (800873c <HAL_ETH_MspInit+0x13c>)
 8008662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008664:	4a35      	ldr	r2, [pc, #212]	; (800873c <HAL_ETH_MspInit+0x13c>)
 8008666:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800866a:	6313      	str	r3, [r2, #48]	; 0x30
 800866c:	4b33      	ldr	r3, [pc, #204]	; (800873c <HAL_ETH_MspInit+0x13c>)
 800866e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008674:	61bb      	str	r3, [r7, #24]
 8008676:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008678:	2300      	movs	r3, #0
 800867a:	617b      	str	r3, [r7, #20]
 800867c:	4b2f      	ldr	r3, [pc, #188]	; (800873c <HAL_ETH_MspInit+0x13c>)
 800867e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008680:	4a2e      	ldr	r2, [pc, #184]	; (800873c <HAL_ETH_MspInit+0x13c>)
 8008682:	f043 0304 	orr.w	r3, r3, #4
 8008686:	6313      	str	r3, [r2, #48]	; 0x30
 8008688:	4b2c      	ldr	r3, [pc, #176]	; (800873c <HAL_ETH_MspInit+0x13c>)
 800868a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868c:	f003 0304 	and.w	r3, r3, #4
 8008690:	617b      	str	r3, [r7, #20]
 8008692:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008694:	2300      	movs	r3, #0
 8008696:	613b      	str	r3, [r7, #16]
 8008698:	4b28      	ldr	r3, [pc, #160]	; (800873c <HAL_ETH_MspInit+0x13c>)
 800869a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869c:	4a27      	ldr	r2, [pc, #156]	; (800873c <HAL_ETH_MspInit+0x13c>)
 800869e:	f043 0301 	orr.w	r3, r3, #1
 80086a2:	6313      	str	r3, [r2, #48]	; 0x30
 80086a4:	4b25      	ldr	r3, [pc, #148]	; (800873c <HAL_ETH_MspInit+0x13c>)
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	613b      	str	r3, [r7, #16]
 80086ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80086b0:	2300      	movs	r3, #0
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	4b21      	ldr	r3, [pc, #132]	; (800873c <HAL_ETH_MspInit+0x13c>)
 80086b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b8:	4a20      	ldr	r2, [pc, #128]	; (800873c <HAL_ETH_MspInit+0x13c>)
 80086ba:	f043 0302 	orr.w	r3, r3, #2
 80086be:	6313      	str	r3, [r2, #48]	; 0x30
 80086c0:	4b1e      	ldr	r3, [pc, #120]	; (800873c <HAL_ETH_MspInit+0x13c>)
 80086c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c4:	f003 0302 	and.w	r3, r3, #2
 80086c8:	60fb      	str	r3, [r7, #12]
 80086ca:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80086cc:	2332      	movs	r3, #50	; 0x32
 80086ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086d0:	2302      	movs	r3, #2
 80086d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086d4:	2300      	movs	r3, #0
 80086d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086d8:	2303      	movs	r3, #3
 80086da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80086dc:	230b      	movs	r3, #11
 80086de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086e4:	4619      	mov	r1, r3
 80086e6:	4816      	ldr	r0, [pc, #88]	; (8008740 <HAL_ETH_MspInit+0x140>)
 80086e8:	f7fa fe6e 	bl	80033c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80086ec:	2386      	movs	r3, #134	; 0x86
 80086ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086f0:	2302      	movs	r3, #2
 80086f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086f4:	2300      	movs	r3, #0
 80086f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086f8:	2303      	movs	r3, #3
 80086fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80086fc:	230b      	movs	r3, #11
 80086fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008704:	4619      	mov	r1, r3
 8008706:	480f      	ldr	r0, [pc, #60]	; (8008744 <HAL_ETH_MspInit+0x144>)
 8008708:	f7fa fe5e 	bl	80033c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800870c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008712:	2302      	movs	r3, #2
 8008714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008716:	2300      	movs	r3, #0
 8008718:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800871a:	2303      	movs	r3, #3
 800871c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800871e:	230b      	movs	r3, #11
 8008720:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008726:	4619      	mov	r1, r3
 8008728:	4807      	ldr	r0, [pc, #28]	; (8008748 <HAL_ETH_MspInit+0x148>)
 800872a:	f7fa fe4d 	bl	80033c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800872e:	bf00      	nop
 8008730:	3738      	adds	r7, #56	; 0x38
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	40028000 	.word	0x40028000
 800873c:	40023800 	.word	0x40023800
 8008740:	40020800 	.word	0x40020800
 8008744:	40020000 	.word	0x40020000
 8008748:	40020400 	.word	0x40020400

0800874c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008750:	4802      	ldr	r0, [pc, #8]	; (800875c <ETH_PHY_IO_Init+0x10>)
 8008752:	f7fa f9dd 	bl	8002b10 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	bd80      	pop	{r7, pc}
 800875c:	20004ef8 	.word	0x20004ef8

08008760 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008760:	b480      	push	{r7}
 8008762:	af00      	add	r7, sp, #0
  return 0;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	68f9      	ldr	r1, [r7, #12]
 8008782:	4807      	ldr	r0, [pc, #28]	; (80087a0 <ETH_PHY_IO_ReadReg+0x30>)
 8008784:	f7fa f82c 	bl	80027e0 <HAL_ETH_ReadPHYRegister>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800878e:	f04f 33ff 	mov.w	r3, #4294967295
 8008792:	e000      	b.n	8008796 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20004ef8 	.word	0x20004ef8

080087a4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	68f9      	ldr	r1, [r7, #12]
 80087b6:	4807      	ldr	r0, [pc, #28]	; (80087d4 <ETH_PHY_IO_WriteReg+0x30>)
 80087b8:	f7fa f85d 	bl	8002876 <HAL_ETH_WritePHYRegister>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d002      	beq.n	80087c8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80087c2:	f04f 33ff 	mov.w	r3, #4294967295
 80087c6:	e000      	b.n	80087ca <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20004ef8 	.word	0x20004ef8

080087d8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80087dc:	f7f8 ffae 	bl	800173c <HAL_GetTick>
 80087e0:	4603      	mov	r3, r0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	bd80      	pop	{r7, pc}
	...

080087e8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b0a0      	sub	sp, #128	; 0x80
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80087f0:	f107 030c 	add.w	r3, r7, #12
 80087f4:	2264      	movs	r2, #100	; 0x64
 80087f6:	2100      	movs	r1, #0
 80087f8:	4618      	mov	r0, r3
 80087fa:	f00f fcf4 	bl	80181e6 <memset>
  int32_t PHYLinkState = 0;
 80087fe:	2300      	movs	r3, #0
 8008800:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008806:	2300      	movs	r3, #0
 8008808:	67bb      	str	r3, [r7, #120]	; 0x78
 800880a:	2300      	movs	r3, #0
 800880c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 800880e:	483a      	ldr	r0, [pc, #232]	; (80088f8 <ethernet_link_check_state+0x110>)
 8008810:	f7f8 fea7 	bl	8001562 <DP83848_GetLinkState>
 8008814:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800881c:	089b      	lsrs	r3, r3, #2
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	b2db      	uxtb	r3, r3
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00c      	beq.n	8008842 <ethernet_link_check_state+0x5a>
 8008828:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800882a:	2b01      	cmp	r3, #1
 800882c:	dc09      	bgt.n	8008842 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800882e:	4833      	ldr	r0, [pc, #204]	; (80088fc <ethernet_link_check_state+0x114>)
 8008830:	f7f9 fda5 	bl	800237e <HAL_ETH_Stop>
    netif_set_down(netif);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f004 ffe1 	bl	800d7fc <netif_set_down>
    netif_set_link_down(netif);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f005 f844 	bl	800d8c8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8008840:	e055      	b.n	80088ee <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	d14e      	bne.n	80088ee <ethernet_link_check_state+0x106>
 8008850:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008852:	2b01      	cmp	r3, #1
 8008854:	dd4b      	ble.n	80088ee <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8008856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008858:	3b02      	subs	r3, #2
 800885a:	2b03      	cmp	r3, #3
 800885c:	d82a      	bhi.n	80088b4 <ethernet_link_check_state+0xcc>
 800885e:	a201      	add	r2, pc, #4	; (adr r2, 8008864 <ethernet_link_check_state+0x7c>)
 8008860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008864:	08008875 	.word	0x08008875
 8008868:	08008887 	.word	0x08008887
 800886c:	08008897 	.word	0x08008897
 8008870:	080088a7 	.word	0x080088a7
      duplex = ETH_FULLDUPLEX_MODE;
 8008874:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008878:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800887a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800887e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008880:	2301      	movs	r3, #1
 8008882:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008884:	e017      	b.n	80088b6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008886:	2300      	movs	r3, #0
 8008888:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800888a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800888e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008890:	2301      	movs	r3, #1
 8008892:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008894:	e00f      	b.n	80088b6 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8008896:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800889a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800889c:	2300      	movs	r3, #0
 800889e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80088a0:	2301      	movs	r3, #1
 80088a2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80088a4:	e007      	b.n	80088b6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80088a6:	2300      	movs	r3, #0
 80088a8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80088aa:	2300      	movs	r3, #0
 80088ac:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80088ae:	2301      	movs	r3, #1
 80088b0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80088b2:	e000      	b.n	80088b6 <ethernet_link_check_state+0xce>
      break;
 80088b4:	bf00      	nop
    if(linkchanged)
 80088b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d018      	beq.n	80088ee <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80088bc:	f107 030c 	add.w	r3, r7, #12
 80088c0:	4619      	mov	r1, r3
 80088c2:	480e      	ldr	r0, [pc, #56]	; (80088fc <ethernet_link_check_state+0x114>)
 80088c4:	f7fa f820 	bl	8002908 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80088c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088ca:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80088cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088ce:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80088d0:	f107 030c 	add.w	r3, r7, #12
 80088d4:	4619      	mov	r1, r3
 80088d6:	4809      	ldr	r0, [pc, #36]	; (80088fc <ethernet_link_check_state+0x114>)
 80088d8:	f7fa f900 	bl	8002adc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80088dc:	4807      	ldr	r0, [pc, #28]	; (80088fc <ethernet_link_check_state+0x114>)
 80088de:	f7f9 fcef 	bl	80022c0 <HAL_ETH_Start>
      netif_set_up(netif);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f004 ff1e 	bl	800d724 <netif_set_up>
      netif_set_link_up(netif);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f004 ffb9 	bl	800d860 <netif_set_link_up>
}
 80088ee:	bf00      	nop
 80088f0:	3780      	adds	r7, #128	; 0x80
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20004fe0 	.word	0x20004fe0
 80088fc:	20004ef8 	.word	0x20004ef8

08008900 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b086      	sub	sp, #24
 8008904:	af02      	add	r7, sp, #8
 8008906:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008908:	4812      	ldr	r0, [pc, #72]	; (8008954 <HAL_ETH_RxAllocateCallback+0x54>)
 800890a:	f004 fc85 	bl	800d218 <memp_malloc_pool>
 800890e:	60f8      	str	r0, [r7, #12]
  if (p)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d014      	beq.n	8008940 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f103 0220 	add.w	r2, r3, #32
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4a0d      	ldr	r2, [pc, #52]	; (8008958 <HAL_ETH_RxAllocateCallback+0x58>)
 8008924:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800892e:	9201      	str	r2, [sp, #4]
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2241      	movs	r2, #65	; 0x41
 8008936:	2100      	movs	r1, #0
 8008938:	2000      	movs	r0, #0
 800893a:	f005 f9bb 	bl	800dcb4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800893e:	e005      	b.n	800894c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008940:	4b06      	ldr	r3, [pc, #24]	; (800895c <HAL_ETH_RxAllocateCallback+0x5c>)
 8008942:	2201      	movs	r2, #1
 8008944:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	601a      	str	r2, [r3, #0]
}
 800894c:	bf00      	nop
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	0801ba38 	.word	0x0801ba38
 8008958:	080085bd 	.word	0x080085bd
 800895c:	20004db4 	.word	0x20004db4

08008960 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008960:	b480      	push	{r7}
 8008962:	b089      	sub	sp, #36	; 0x24
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	607a      	str	r2, [r7, #4]
 800896c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008976:	2300      	movs	r3, #0
 8008978:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	3b20      	subs	r3, #32
 800897e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	2200      	movs	r2, #0
 800898a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	887a      	ldrh	r2, [r7, #2]
 8008990:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d103      	bne.n	80089a2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	69fa      	ldr	r2, [r7, #28]
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	e003      	b.n	80089aa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	69fa      	ldr	r2, [r7, #28]
 80089a8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	69fa      	ldr	r2, [r7, #28]
 80089ae:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	61fb      	str	r3, [r7, #28]
 80089b6:	e009      	b.n	80089cc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	891a      	ldrh	r2, [r3, #8]
 80089bc:	887b      	ldrh	r3, [r7, #2]
 80089be:	4413      	add	r3, r2
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	61fb      	str	r3, [r7, #28]
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1f2      	bne.n	80089b8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80089d2:	bf00      	nop
 80089d4:	bf00      	nop
 80089d6:	3724      	adds	r7, #36	; 0x24
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80089ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80089f0:	f00f f9c0 	bl	8017d74 <USBD_static_malloc>
 80089f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d109      	bne.n	8008a10 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	32b0      	adds	r2, #176	; 0xb0
 8008a06:	2100      	movs	r1, #0
 8008a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	e0d4      	b.n	8008bba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008a10:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008a14:	2100      	movs	r1, #0
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f00f fbe5 	bl	80181e6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	32b0      	adds	r2, #176	; 0xb0
 8008a26:	68f9      	ldr	r1, [r7, #12]
 8008a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	32b0      	adds	r2, #176	; 0xb0
 8008a36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	7c1b      	ldrb	r3, [r3, #16]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d138      	bne.n	8008aba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008a48:	4b5e      	ldr	r3, [pc, #376]	; (8008bc4 <USBD_CDC_Init+0x1e4>)
 8008a4a:	7819      	ldrb	r1, [r3, #0]
 8008a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a50:	2202      	movs	r2, #2
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f00f f84b 	bl	8017aee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008a58:	4b5a      	ldr	r3, [pc, #360]	; (8008bc4 <USBD_CDC_Init+0x1e4>)
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	f003 020f 	and.w	r2, r3, #15
 8008a60:	6879      	ldr	r1, [r7, #4]
 8008a62:	4613      	mov	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	440b      	add	r3, r1
 8008a6c:	3324      	adds	r3, #36	; 0x24
 8008a6e:	2201      	movs	r2, #1
 8008a70:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008a72:	4b55      	ldr	r3, [pc, #340]	; (8008bc8 <USBD_CDC_Init+0x1e8>)
 8008a74:	7819      	ldrb	r1, [r3, #0]
 8008a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f00f f836 	bl	8017aee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008a82:	4b51      	ldr	r3, [pc, #324]	; (8008bc8 <USBD_CDC_Init+0x1e8>)
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	f003 020f 	and.w	r2, r3, #15
 8008a8a:	6879      	ldr	r1, [r7, #4]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	440b      	add	r3, r1
 8008a96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008a9e:	4b4b      	ldr	r3, [pc, #300]	; (8008bcc <USBD_CDC_Init+0x1ec>)
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	f003 020f 	and.w	r2, r3, #15
 8008aa6:	6879      	ldr	r1, [r7, #4]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	440b      	add	r3, r1
 8008ab2:	3326      	adds	r3, #38	; 0x26
 8008ab4:	2210      	movs	r2, #16
 8008ab6:	801a      	strh	r2, [r3, #0]
 8008ab8:	e035      	b.n	8008b26 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008aba:	4b42      	ldr	r3, [pc, #264]	; (8008bc4 <USBD_CDC_Init+0x1e4>)
 8008abc:	7819      	ldrb	r1, [r3, #0]
 8008abe:	2340      	movs	r3, #64	; 0x40
 8008ac0:	2202      	movs	r2, #2
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f00f f813 	bl	8017aee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008ac8:	4b3e      	ldr	r3, [pc, #248]	; (8008bc4 <USBD_CDC_Init+0x1e4>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	f003 020f 	and.w	r2, r3, #15
 8008ad0:	6879      	ldr	r1, [r7, #4]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	440b      	add	r3, r1
 8008adc:	3324      	adds	r3, #36	; 0x24
 8008ade:	2201      	movs	r2, #1
 8008ae0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008ae2:	4b39      	ldr	r3, [pc, #228]	; (8008bc8 <USBD_CDC_Init+0x1e8>)
 8008ae4:	7819      	ldrb	r1, [r3, #0]
 8008ae6:	2340      	movs	r3, #64	; 0x40
 8008ae8:	2202      	movs	r2, #2
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f00e ffff 	bl	8017aee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008af0:	4b35      	ldr	r3, [pc, #212]	; (8008bc8 <USBD_CDC_Init+0x1e8>)
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	f003 020f 	and.w	r2, r3, #15
 8008af8:	6879      	ldr	r1, [r7, #4]
 8008afa:	4613      	mov	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4413      	add	r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	440b      	add	r3, r1
 8008b04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b08:	2201      	movs	r2, #1
 8008b0a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008b0c:	4b2f      	ldr	r3, [pc, #188]	; (8008bcc <USBD_CDC_Init+0x1ec>)
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	f003 020f 	and.w	r2, r3, #15
 8008b14:	6879      	ldr	r1, [r7, #4]
 8008b16:	4613      	mov	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	440b      	add	r3, r1
 8008b20:	3326      	adds	r3, #38	; 0x26
 8008b22:	2210      	movs	r2, #16
 8008b24:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008b26:	4b29      	ldr	r3, [pc, #164]	; (8008bcc <USBD_CDC_Init+0x1ec>)
 8008b28:	7819      	ldrb	r1, [r3, #0]
 8008b2a:	2308      	movs	r3, #8
 8008b2c:	2203      	movs	r2, #3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f00e ffdd 	bl	8017aee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008b34:	4b25      	ldr	r3, [pc, #148]	; (8008bcc <USBD_CDC_Init+0x1ec>)
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	f003 020f 	and.w	r2, r3, #15
 8008b3c:	6879      	ldr	r1, [r7, #4]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	440b      	add	r3, r1
 8008b48:	3324      	adds	r3, #36	; 0x24
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	33b0      	adds	r3, #176	; 0xb0
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008b84:	2302      	movs	r3, #2
 8008b86:	e018      	b.n	8008bba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	7c1b      	ldrb	r3, [r3, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10a      	bne.n	8008ba6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b90:	4b0d      	ldr	r3, [pc, #52]	; (8008bc8 <USBD_CDC_Init+0x1e8>)
 8008b92:	7819      	ldrb	r1, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f00f f8b3 	bl	8017d0a <USBD_LL_PrepareReceive>
 8008ba4:	e008      	b.n	8008bb8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ba6:	4b08      	ldr	r3, [pc, #32]	; (8008bc8 <USBD_CDC_Init+0x1e8>)
 8008ba8:	7819      	ldrb	r1, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bb0:	2340      	movs	r3, #64	; 0x40
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f00f f8a9 	bl	8017d0a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	200000bb 	.word	0x200000bb
 8008bc8:	200000bc 	.word	0x200000bc
 8008bcc:	200000bd 	.word	0x200000bd

08008bd0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008bdc:	4b3a      	ldr	r3, [pc, #232]	; (8008cc8 <USBD_CDC_DeInit+0xf8>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f00e ffa9 	bl	8017b3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008be8:	4b37      	ldr	r3, [pc, #220]	; (8008cc8 <USBD_CDC_DeInit+0xf8>)
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	f003 020f 	and.w	r2, r3, #15
 8008bf0:	6879      	ldr	r1, [r7, #4]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	440b      	add	r3, r1
 8008bfc:	3324      	adds	r3, #36	; 0x24
 8008bfe:	2200      	movs	r2, #0
 8008c00:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008c02:	4b32      	ldr	r3, [pc, #200]	; (8008ccc <USBD_CDC_DeInit+0xfc>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	4619      	mov	r1, r3
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f00e ff96 	bl	8017b3a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008c0e:	4b2f      	ldr	r3, [pc, #188]	; (8008ccc <USBD_CDC_DeInit+0xfc>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	f003 020f 	and.w	r2, r3, #15
 8008c16:	6879      	ldr	r1, [r7, #4]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	440b      	add	r3, r1
 8008c22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c26:	2200      	movs	r2, #0
 8008c28:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008c2a:	4b29      	ldr	r3, [pc, #164]	; (8008cd0 <USBD_CDC_DeInit+0x100>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f00e ff82 	bl	8017b3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008c36:	4b26      	ldr	r3, [pc, #152]	; (8008cd0 <USBD_CDC_DeInit+0x100>)
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	f003 020f 	and.w	r2, r3, #15
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	4613      	mov	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	4413      	add	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	440b      	add	r3, r1
 8008c4a:	3324      	adds	r3, #36	; 0x24
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008c50:	4b1f      	ldr	r3, [pc, #124]	; (8008cd0 <USBD_CDC_DeInit+0x100>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	f003 020f 	and.w	r2, r3, #15
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	440b      	add	r3, r1
 8008c64:	3326      	adds	r3, #38	; 0x26
 8008c66:	2200      	movs	r2, #0
 8008c68:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	32b0      	adds	r2, #176	; 0xb0
 8008c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d01f      	beq.n	8008cbc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	33b0      	adds	r3, #176	; 0xb0
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	32b0      	adds	r2, #176	; 0xb0
 8008c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f00f f876 	bl	8017d90 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	32b0      	adds	r2, #176	; 0xb0
 8008cae:	2100      	movs	r1, #0
 8008cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	200000bb 	.word	0x200000bb
 8008ccc:	200000bc 	.word	0x200000bc
 8008cd0:	200000bd 	.word	0x200000bd

08008cd4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	32b0      	adds	r2, #176	; 0xb0
 8008ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e0bf      	b.n	8008e84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d050      	beq.n	8008db2 <USBD_CDC_Setup+0xde>
 8008d10:	2b20      	cmp	r3, #32
 8008d12:	f040 80af 	bne.w	8008e74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	88db      	ldrh	r3, [r3, #6]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d03a      	beq.n	8008d94 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	b25b      	sxtb	r3, r3
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	da1b      	bge.n	8008d60 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	33b0      	adds	r3, #176	; 0xb0
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4413      	add	r3, r2
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008d3e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	88d2      	ldrh	r2, [r2, #6]
 8008d44:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	88db      	ldrh	r3, [r3, #6]
 8008d4a:	2b07      	cmp	r3, #7
 8008d4c:	bf28      	it	cs
 8008d4e:	2307      	movcs	r3, #7
 8008d50:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	89fa      	ldrh	r2, [r7, #14]
 8008d56:	4619      	mov	r1, r3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f003 fd2d 	bl	800c7b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008d5e:	e090      	b.n	8008e82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	785a      	ldrb	r2, [r3, #1]
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	88db      	ldrh	r3, [r3, #6]
 8008d6e:	2b3f      	cmp	r3, #63	; 0x3f
 8008d70:	d803      	bhi.n	8008d7a <USBD_CDC_Setup+0xa6>
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	88db      	ldrh	r3, [r3, #6]
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	e000      	b.n	8008d7c <USBD_CDC_Setup+0xa8>
 8008d7a:	2240      	movs	r2, #64	; 0x40
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008d82:	6939      	ldr	r1, [r7, #16]
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f003 fd3f 	bl	800c810 <USBD_CtlPrepareRx>
      break;
 8008d92:	e076      	b.n	8008e82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	33b0      	adds	r3, #176	; 0xb0
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	7850      	ldrb	r0, [r2, #1]
 8008daa:	2200      	movs	r2, #0
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	4798      	blx	r3
      break;
 8008db0:	e067      	b.n	8008e82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	785b      	ldrb	r3, [r3, #1]
 8008db6:	2b0b      	cmp	r3, #11
 8008db8:	d851      	bhi.n	8008e5e <USBD_CDC_Setup+0x18a>
 8008dba:	a201      	add	r2, pc, #4	; (adr r2, 8008dc0 <USBD_CDC_Setup+0xec>)
 8008dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc0:	08008df1 	.word	0x08008df1
 8008dc4:	08008e6d 	.word	0x08008e6d
 8008dc8:	08008e5f 	.word	0x08008e5f
 8008dcc:	08008e5f 	.word	0x08008e5f
 8008dd0:	08008e5f 	.word	0x08008e5f
 8008dd4:	08008e5f 	.word	0x08008e5f
 8008dd8:	08008e5f 	.word	0x08008e5f
 8008ddc:	08008e5f 	.word	0x08008e5f
 8008de0:	08008e5f 	.word	0x08008e5f
 8008de4:	08008e5f 	.word	0x08008e5f
 8008de8:	08008e1b 	.word	0x08008e1b
 8008dec:	08008e45 	.word	0x08008e45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b03      	cmp	r3, #3
 8008dfa:	d107      	bne.n	8008e0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008dfc:	f107 030a 	add.w	r3, r7, #10
 8008e00:	2202      	movs	r2, #2
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f003 fcd7 	bl	800c7b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e0a:	e032      	b.n	8008e72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f003 fc61 	bl	800c6d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e14:	2303      	movs	r3, #3
 8008e16:	75fb      	strb	r3, [r7, #23]
          break;
 8008e18:	e02b      	b.n	8008e72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	d107      	bne.n	8008e36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e26:	f107 030d 	add.w	r3, r7, #13
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f003 fcc2 	bl	800c7b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e34:	e01d      	b.n	8008e72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f003 fc4c 	bl	800c6d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	75fb      	strb	r3, [r7, #23]
          break;
 8008e42:	e016      	b.n	8008e72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b03      	cmp	r3, #3
 8008e4e:	d00f      	beq.n	8008e70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f003 fc3f 	bl	800c6d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e5c:	e008      	b.n	8008e70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008e5e:	6839      	ldr	r1, [r7, #0]
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f003 fc38 	bl	800c6d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e66:	2303      	movs	r3, #3
 8008e68:	75fb      	strb	r3, [r7, #23]
          break;
 8008e6a:	e002      	b.n	8008e72 <USBD_CDC_Setup+0x19e>
          break;
 8008e6c:	bf00      	nop
 8008e6e:	e008      	b.n	8008e82 <USBD_CDC_Setup+0x1ae>
          break;
 8008e70:	bf00      	nop
      }
      break;
 8008e72:	e006      	b.n	8008e82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f003 fc2d 	bl	800c6d6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e80:	bf00      	nop
  }

  return (uint8_t)ret;
 8008e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3718      	adds	r7, #24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	460b      	mov	r3, r1
 8008e96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	32b0      	adds	r2, #176	; 0xb0
 8008eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d101      	bne.n	8008eb6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e065      	b.n	8008f82 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	32b0      	adds	r2, #176	; 0xb0
 8008ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008ec6:	78fb      	ldrb	r3, [r7, #3]
 8008ec8:	f003 020f 	and.w	r2, r3, #15
 8008ecc:	6879      	ldr	r1, [r7, #4]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	4413      	add	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	440b      	add	r3, r1
 8008ed8:	3318      	adds	r3, #24
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d02f      	beq.n	8008f40 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008ee0:	78fb      	ldrb	r3, [r7, #3]
 8008ee2:	f003 020f 	and.w	r2, r3, #15
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	440b      	add	r3, r1
 8008ef2:	3318      	adds	r3, #24
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	78fb      	ldrb	r3, [r7, #3]
 8008ef8:	f003 010f 	and.w	r1, r3, #15
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	460b      	mov	r3, r1
 8008f00:	00db      	lsls	r3, r3, #3
 8008f02:	440b      	add	r3, r1
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4403      	add	r3, r0
 8008f08:	331c      	adds	r3, #28
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f10:	fb01 f303 	mul.w	r3, r1, r3
 8008f14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d112      	bne.n	8008f40 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	f003 020f 	and.w	r2, r3, #15
 8008f20:	6879      	ldr	r1, [r7, #4]
 8008f22:	4613      	mov	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	440b      	add	r3, r1
 8008f2c:	3318      	adds	r3, #24
 8008f2e:	2200      	movs	r2, #0
 8008f30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008f32:	78f9      	ldrb	r1, [r7, #3]
 8008f34:	2300      	movs	r3, #0
 8008f36:	2200      	movs	r2, #0
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f00e fec5 	bl	8017cc8 <USBD_LL_Transmit>
 8008f3e:	e01f      	b.n	8008f80 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	33b0      	adds	r3, #176	; 0xb0
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	4413      	add	r3, r2
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d010      	beq.n	8008f80 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	33b0      	adds	r3, #176	; 0xb0
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4413      	add	r3, r2
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008f7c:	78fa      	ldrb	r2, [r7, #3]
 8008f7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	460b      	mov	r3, r1
 8008f94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	32b0      	adds	r2, #176	; 0xb0
 8008fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	32b0      	adds	r2, #176	; 0xb0
 8008fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d101      	bne.n	8008fbc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e01a      	b.n	8008ff2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008fbc:	78fb      	ldrb	r3, [r7, #3]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f00e fec3 	bl	8017d4c <USBD_LL_GetRxDataSize>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	33b0      	adds	r3, #176	; 0xb0
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008fec:	4611      	mov	r1, r2
 8008fee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	32b0      	adds	r2, #176	; 0xb0
 800900c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009010:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009018:	2303      	movs	r3, #3
 800901a:	e025      	b.n	8009068 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	33b0      	adds	r3, #176	; 0xb0
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d01a      	beq.n	8009066 <USBD_CDC_EP0_RxReady+0x6c>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009036:	2bff      	cmp	r3, #255	; 0xff
 8009038:	d015      	beq.n	8009066 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	33b0      	adds	r3, #176	; 0xb0
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4413      	add	r3, r2
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009052:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800905a:	b292      	uxth	r2, r2
 800905c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	22ff      	movs	r2, #255	; 0xff
 8009062:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009078:	2182      	movs	r1, #130	; 0x82
 800907a:	4818      	ldr	r0, [pc, #96]	; (80090dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800907c:	f002 fcf2 	bl	800ba64 <USBD_GetEpDesc>
 8009080:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009082:	2101      	movs	r1, #1
 8009084:	4815      	ldr	r0, [pc, #84]	; (80090dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009086:	f002 fced 	bl	800ba64 <USBD_GetEpDesc>
 800908a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800908c:	2181      	movs	r1, #129	; 0x81
 800908e:	4813      	ldr	r0, [pc, #76]	; (80090dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009090:	f002 fce8 	bl	800ba64 <USBD_GetEpDesc>
 8009094:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	2210      	movs	r2, #16
 80090a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d006      	beq.n	80090b6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090b0:	711a      	strb	r2, [r3, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d006      	beq.n	80090ca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2200      	movs	r2, #0
 80090c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090c4:	711a      	strb	r2, [r3, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2243      	movs	r2, #67	; 0x43
 80090ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80090d0:	4b02      	ldr	r3, [pc, #8]	; (80090dc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3718      	adds	r7, #24
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	20000078 	.word	0x20000078

080090e0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80090e8:	2182      	movs	r1, #130	; 0x82
 80090ea:	4818      	ldr	r0, [pc, #96]	; (800914c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80090ec:	f002 fcba 	bl	800ba64 <USBD_GetEpDesc>
 80090f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80090f2:	2101      	movs	r1, #1
 80090f4:	4815      	ldr	r0, [pc, #84]	; (800914c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80090f6:	f002 fcb5 	bl	800ba64 <USBD_GetEpDesc>
 80090fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80090fc:	2181      	movs	r1, #129	; 0x81
 80090fe:	4813      	ldr	r0, [pc, #76]	; (800914c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009100:	f002 fcb0 	bl	800ba64 <USBD_GetEpDesc>
 8009104:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	2210      	movs	r2, #16
 8009110:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d006      	beq.n	8009126 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	2200      	movs	r2, #0
 800911c:	711a      	strb	r2, [r3, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	f042 0202 	orr.w	r2, r2, #2
 8009124:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d006      	beq.n	800913a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	711a      	strb	r2, [r3, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f042 0202 	orr.w	r2, r2, #2
 8009138:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2243      	movs	r2, #67	; 0x43
 800913e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009140:	4b02      	ldr	r3, [pc, #8]	; (800914c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	20000078 	.word	0x20000078

08009150 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009158:	2182      	movs	r1, #130	; 0x82
 800915a:	4818      	ldr	r0, [pc, #96]	; (80091bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800915c:	f002 fc82 	bl	800ba64 <USBD_GetEpDesc>
 8009160:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009162:	2101      	movs	r1, #1
 8009164:	4815      	ldr	r0, [pc, #84]	; (80091bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009166:	f002 fc7d 	bl	800ba64 <USBD_GetEpDesc>
 800916a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800916c:	2181      	movs	r1, #129	; 0x81
 800916e:	4813      	ldr	r0, [pc, #76]	; (80091bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009170:	f002 fc78 	bl	800ba64 <USBD_GetEpDesc>
 8009174:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d002      	beq.n	8009182 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2210      	movs	r2, #16
 8009180:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d006      	beq.n	8009196 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	2200      	movs	r2, #0
 800918c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009190:	711a      	strb	r2, [r3, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d006      	beq.n	80091aa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091a4:	711a      	strb	r2, [r3, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2243      	movs	r2, #67	; 0x43
 80091ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80091b0:	4b02      	ldr	r3, [pc, #8]	; (80091bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3718      	adds	r7, #24
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	20000078 	.word	0x20000078

080091c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	220a      	movs	r2, #10
 80091cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80091ce:	4b03      	ldr	r3, [pc, #12]	; (80091dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	20000034 	.word	0x20000034

080091e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d101      	bne.n	80091f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80091f0:	2303      	movs	r3, #3
 80091f2:	e009      	b.n	8009208 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	33b0      	adds	r3, #176	; 0xb0
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009214:	b480      	push	{r7}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	32b0      	adds	r2, #176	; 0xb0
 800922a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800922e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d101      	bne.n	800923a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009236:	2303      	movs	r3, #3
 8009238:	e008      	b.n	800924c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	371c      	adds	r7, #28
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	32b0      	adds	r2, #176	; 0xb0
 800926c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009270:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009278:	2303      	movs	r3, #3
 800927a:	e004      	b.n	8009286 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
	...

08009294 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	32b0      	adds	r2, #176	; 0xb0
 80092a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092aa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	32b0      	adds	r2, #176	; 0xb0
 80092b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d101      	bne.n	80092c2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80092be:	2303      	movs	r3, #3
 80092c0:	e018      	b.n	80092f4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	7c1b      	ldrb	r3, [r3, #16]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10a      	bne.n	80092e0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80092ca:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <USBD_CDC_ReceivePacket+0x68>)
 80092cc:	7819      	ldrb	r1, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f00e fd16 	bl	8017d0a <USBD_LL_PrepareReceive>
 80092de:	e008      	b.n	80092f2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80092e0:	4b06      	ldr	r3, [pc, #24]	; (80092fc <USBD_CDC_ReceivePacket+0x68>)
 80092e2:	7819      	ldrb	r1, [r3, #0]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092ea:	2340      	movs	r3, #64	; 0x40
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f00e fd0c 	bl	8017d0a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	200000bc 	.word	0x200000bc

08009300 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	460b      	mov	r3, r1
 800930a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800930c:	f44f 701d 	mov.w	r0, #628	; 0x274
 8009310:	f00e fd30 	bl	8017d74 <USBD_static_malloc>
 8009314:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d109      	bne.n	8009330 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	32b0      	adds	r2, #176	; 0xb0
 8009326:	2100      	movs	r1, #0
 8009328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800932c:	2302      	movs	r3, #2
 800932e:	e06e      	b.n	800940e <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	32b0      	adds	r2, #176	; 0xb0
 800933a:	68f9      	ldr	r1, [r7, #12]
 800933c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	32b0      	adds	r2, #176	; 0xb0
 800934a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	7c1b      	ldrb	r3, [r3, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d12b      	bne.n	80093b4 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800935c:	4b2e      	ldr	r3, [pc, #184]	; (8009418 <USBD_MSC_Init+0x118>)
 800935e:	7819      	ldrb	r1, [r3, #0]
 8009360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009364:	2202      	movs	r2, #2
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f00e fbc1 	bl	8017aee <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800936c:	4b2a      	ldr	r3, [pc, #168]	; (8009418 <USBD_MSC_Init+0x118>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	f003 020f 	and.w	r2, r3, #15
 8009374:	6879      	ldr	r1, [r7, #4]
 8009376:	4613      	mov	r3, r2
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	4413      	add	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	440b      	add	r3, r1
 8009380:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009384:	2201      	movs	r2, #1
 8009386:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8009388:	4b24      	ldr	r3, [pc, #144]	; (800941c <USBD_MSC_Init+0x11c>)
 800938a:	7819      	ldrb	r1, [r3, #0]
 800938c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009390:	2202      	movs	r2, #2
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f00e fbab 	bl	8017aee <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8009398:	4b20      	ldr	r3, [pc, #128]	; (800941c <USBD_MSC_Init+0x11c>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	f003 020f 	and.w	r2, r3, #15
 80093a0:	6879      	ldr	r1, [r7, #4]
 80093a2:	4613      	mov	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	440b      	add	r3, r1
 80093ac:	3324      	adds	r3, #36	; 0x24
 80093ae:	2201      	movs	r2, #1
 80093b0:	801a      	strh	r2, [r3, #0]
 80093b2:	e028      	b.n	8009406 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80093b4:	4b18      	ldr	r3, [pc, #96]	; (8009418 <USBD_MSC_Init+0x118>)
 80093b6:	7819      	ldrb	r1, [r3, #0]
 80093b8:	2340      	movs	r3, #64	; 0x40
 80093ba:	2202      	movs	r2, #2
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f00e fb96 	bl	8017aee <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80093c2:	4b15      	ldr	r3, [pc, #84]	; (8009418 <USBD_MSC_Init+0x118>)
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	f003 020f 	and.w	r2, r3, #15
 80093ca:	6879      	ldr	r1, [r7, #4]
 80093cc:	4613      	mov	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	4413      	add	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	440b      	add	r3, r1
 80093d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093da:	2201      	movs	r2, #1
 80093dc:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80093de:	4b0f      	ldr	r3, [pc, #60]	; (800941c <USBD_MSC_Init+0x11c>)
 80093e0:	7819      	ldrb	r1, [r3, #0]
 80093e2:	2340      	movs	r3, #64	; 0x40
 80093e4:	2202      	movs	r2, #2
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f00e fb81 	bl	8017aee <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80093ec:	4b0b      	ldr	r3, [pc, #44]	; (800941c <USBD_MSC_Init+0x11c>)
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	f003 020f 	and.w	r2, r3, #15
 80093f4:	6879      	ldr	r1, [r7, #4]
 80093f6:	4613      	mov	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4413      	add	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	440b      	add	r3, r1
 8009400:	3324      	adds	r3, #36	; 0x24
 8009402:	2201      	movs	r2, #1
 8009404:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fa2c 	bl	8009864 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20000123 	.word	0x20000123
 800941c:	20000122 	.word	0x20000122

08009420 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	460b      	mov	r3, r1
 800942a:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800942c:	4b26      	ldr	r3, [pc, #152]	; (80094c8 <USBD_MSC_DeInit+0xa8>)
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	4619      	mov	r1, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f00e fb81 	bl	8017b3a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8009438:	4b23      	ldr	r3, [pc, #140]	; (80094c8 <USBD_MSC_DeInit+0xa8>)
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	f003 020f 	and.w	r2, r3, #15
 8009440:	6879      	ldr	r1, [r7, #4]
 8009442:	4613      	mov	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	440b      	add	r3, r1
 800944c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009450:	2200      	movs	r2, #0
 8009452:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8009454:	4b1d      	ldr	r3, [pc, #116]	; (80094cc <USBD_MSC_DeInit+0xac>)
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f00e fb6d 	bl	8017b3a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8009460:	4b1a      	ldr	r3, [pc, #104]	; (80094cc <USBD_MSC_DeInit+0xac>)
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	f003 020f 	and.w	r2, r3, #15
 8009468:	6879      	ldr	r1, [r7, #4]
 800946a:	4613      	mov	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4413      	add	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	440b      	add	r3, r1
 8009474:	3324      	adds	r3, #36	; 0x24
 8009476:	2200      	movs	r2, #0
 8009478:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	32b0      	adds	r2, #176	; 0xb0
 8009484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d018      	beq.n	80094be <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fa67 	bl	8009960 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	32b0      	adds	r2, #176	; 0xb0
 800949c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f00e fc75 	bl	8017d90 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	32b0      	adds	r2, #176	; 0xb0
 80094b0:	2100      	movs	r1, #0
 80094b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	20000123 	.word	0x20000123
 80094cc:	20000122 	.word	0x20000122

080094d0 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	32b0      	adds	r2, #176	; 0xb0
 80094e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80094ee:	2300      	movs	r3, #0
 80094f0:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e0e1      	b.n	80096c0 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009504:	2b00      	cmp	r3, #0
 8009506:	d053      	beq.n	80095b0 <USBD_MSC_Setup+0xe0>
 8009508:	2b20      	cmp	r3, #32
 800950a:	f040 80d1 	bne.w	80096b0 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	785b      	ldrb	r3, [r3, #1]
 8009512:	2bfe      	cmp	r3, #254	; 0xfe
 8009514:	d002      	beq.n	800951c <USBD_MSC_Setup+0x4c>
 8009516:	2bff      	cmp	r3, #255	; 0xff
 8009518:	d02a      	beq.n	8009570 <USBD_MSC_Setup+0xa0>
 800951a:	e041      	b.n	80095a0 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	885b      	ldrh	r3, [r3, #2]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d11e      	bne.n	8009562 <USBD_MSC_Setup+0x92>
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	88db      	ldrh	r3, [r3, #6]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d11a      	bne.n	8009562 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009532:	2b00      	cmp	r3, #0
 8009534:	da15      	bge.n	8009562 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	33b0      	adds	r3, #176	; 0xb0
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	4798      	blx	r3
 800954a:	4603      	mov	r3, r0
 800954c:	461a      	mov	r2, r3
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	2201      	movs	r2, #1
 8009556:	4619      	mov	r1, r3
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f003 f92d 	bl	800c7b8 <USBD_CtlSendData>
 800955e:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009560:	e025      	b.n	80095ae <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f003 f8b6 	bl	800c6d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800956a:	2303      	movs	r3, #3
 800956c:	75fb      	strb	r3, [r7, #23]
          break;
 800956e:	e01e      	b.n	80095ae <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	885b      	ldrh	r3, [r3, #2]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d10c      	bne.n	8009592 <USBD_MSC_Setup+0xc2>
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	88db      	ldrh	r3, [r3, #6]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d108      	bne.n	8009592 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8009586:	2b00      	cmp	r3, #0
 8009588:	db03      	blt.n	8009592 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f9b4 	bl	80098f8 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009590:	e00d      	b.n	80095ae <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f003 f89e 	bl	800c6d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800959a:	2303      	movs	r3, #3
 800959c:	75fb      	strb	r3, [r7, #23]
          break;
 800959e:	e006      	b.n	80095ae <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 80095a0:	6839      	ldr	r1, [r7, #0]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f003 f897 	bl	800c6d6 <USBD_CtlError>
          ret = USBD_FAIL;
 80095a8:	2303      	movs	r3, #3
 80095aa:	75fb      	strb	r3, [r7, #23]
          break;
 80095ac:	bf00      	nop
      }
      break;
 80095ae:	e086      	b.n	80096be <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	785b      	ldrb	r3, [r3, #1]
 80095b4:	2b0b      	cmp	r3, #11
 80095b6:	d872      	bhi.n	800969e <USBD_MSC_Setup+0x1ce>
 80095b8:	a201      	add	r2, pc, #4	; (adr r2, 80095c0 <USBD_MSC_Setup+0xf0>)
 80095ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095be:	bf00      	nop
 80095c0:	080095f1 	.word	0x080095f1
 80095c4:	0800966d 	.word	0x0800966d
 80095c8:	0800969f 	.word	0x0800969f
 80095cc:	0800969f 	.word	0x0800969f
 80095d0:	0800969f 	.word	0x0800969f
 80095d4:	0800969f 	.word	0x0800969f
 80095d8:	0800969f 	.word	0x0800969f
 80095dc:	0800969f 	.word	0x0800969f
 80095e0:	0800969f 	.word	0x0800969f
 80095e4:	0800969f 	.word	0x0800969f
 80095e8:	0800961b 	.word	0x0800961b
 80095ec:	08009645 	.word	0x08009645
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b03      	cmp	r3, #3
 80095fa:	d107      	bne.n	800960c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80095fc:	f107 030e 	add.w	r3, r7, #14
 8009600:	2202      	movs	r2, #2
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f003 f8d7 	bl	800c7b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800960a:	e050      	b.n	80096ae <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f003 f861 	bl	800c6d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009614:	2303      	movs	r3, #3
 8009616:	75fb      	strb	r3, [r7, #23]
          break;
 8009618:	e049      	b.n	80096ae <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009620:	b2db      	uxtb	r3, r3
 8009622:	2b03      	cmp	r3, #3
 8009624:	d107      	bne.n	8009636 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	3304      	adds	r3, #4
 800962a:	2201      	movs	r2, #1
 800962c:	4619      	mov	r1, r3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f003 f8c2 	bl	800c7b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009634:	e03b      	b.n	80096ae <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f003 f84c 	bl	800c6d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800963e:	2303      	movs	r3, #3
 8009640:	75fb      	strb	r3, [r7, #23]
          break;
 8009642:	e034      	b.n	80096ae <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800964a:	b2db      	uxtb	r3, r3
 800964c:	2b03      	cmp	r3, #3
 800964e:	d106      	bne.n	800965e <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	885b      	ldrh	r3, [r3, #2]
 8009654:	b2db      	uxtb	r3, r3
 8009656:	461a      	mov	r2, r3
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800965c:	e027      	b.n	80096ae <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f003 f838 	bl	800c6d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009666:	2303      	movs	r3, #3
 8009668:	75fb      	strb	r3, [r7, #23]
          break;
 800966a:	e020      	b.n	80096ae <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b03      	cmp	r3, #3
 8009676:	d119      	bne.n	80096ac <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	885b      	ldrh	r3, [r3, #2]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d115      	bne.n	80096ac <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	889b      	ldrh	r3, [r3, #4]
 8009684:	b2db      	uxtb	r3, r3
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f00e fa75 	bl	8017b78 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	889b      	ldrh	r3, [r3, #4]
 8009692:	b2db      	uxtb	r3, r3
 8009694:	4619      	mov	r1, r3
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fb2e 	bl	8009cf8 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800969c:	e006      	b.n	80096ac <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f003 f818 	bl	800c6d6 <USBD_CtlError>
          ret = USBD_FAIL;
 80096a6:	2303      	movs	r3, #3
 80096a8:	75fb      	strb	r3, [r7, #23]
          break;
 80096aa:	e000      	b.n	80096ae <USBD_MSC_Setup+0x1de>
          break;
 80096ac:	bf00      	nop
      }
      break;
 80096ae:	e006      	b.n	80096be <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f003 f80f 	bl	800c6d6 <USBD_CtlError>
      ret = USBD_FAIL;
 80096b8:	2303      	movs	r3, #3
 80096ba:	75fb      	strb	r3, [r7, #23]
      break;
 80096bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80096be:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	460b      	mov	r3, r1
 80096d2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80096d4:	78fb      	ldrb	r3, [r7, #3]
 80096d6:	4619      	mov	r1, r3
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 f959 	bl	8009990 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	460b      	mov	r3, r1
 80096f2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80096f4:	78fb      	ldrb	r3, [r7, #3]
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 f983 	bl	8009a04 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009710:	2181      	movs	r1, #129	; 0x81
 8009712:	4812      	ldr	r0, [pc, #72]	; (800975c <USBD_MSC_GetHSCfgDesc+0x54>)
 8009714:	f002 f9a6 	bl	800ba64 <USBD_GetEpDesc>
 8009718:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800971a:	2101      	movs	r1, #1
 800971c:	480f      	ldr	r0, [pc, #60]	; (800975c <USBD_MSC_GetHSCfgDesc+0x54>)
 800971e:	f002 f9a1 	bl	800ba64 <USBD_GetEpDesc>
 8009722:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d006      	beq.n	8009738 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	711a      	strb	r2, [r3, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	f042 0202 	orr.w	r2, r2, #2
 8009736:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d006      	beq.n	800974c <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	2200      	movs	r2, #0
 8009742:	711a      	strb	r2, [r3, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f042 0202 	orr.w	r2, r2, #2
 800974a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2220      	movs	r2, #32
 8009750:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009752:	4b02      	ldr	r3, [pc, #8]	; (800975c <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	200000f8 	.word	0x200000f8

08009760 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009768:	2181      	movs	r1, #129	; 0x81
 800976a:	4812      	ldr	r0, [pc, #72]	; (80097b4 <USBD_MSC_GetFSCfgDesc+0x54>)
 800976c:	f002 f97a 	bl	800ba64 <USBD_GetEpDesc>
 8009770:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009772:	2101      	movs	r1, #1
 8009774:	480f      	ldr	r0, [pc, #60]	; (80097b4 <USBD_MSC_GetFSCfgDesc+0x54>)
 8009776:	f002 f975 	bl	800ba64 <USBD_GetEpDesc>
 800977a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d006      	beq.n	8009790 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800978a:	711a      	strb	r2, [r3, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d006      	beq.n	80097a4 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	2200      	movs	r2, #0
 800979a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800979e:	711a      	strb	r2, [r3, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2220      	movs	r2, #32
 80097a8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80097aa:	4b02      	ldr	r3, [pc, #8]	; (80097b4 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	200000f8 	.word	0x200000f8

080097b8 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80097c0:	2181      	movs	r1, #129	; 0x81
 80097c2:	4812      	ldr	r0, [pc, #72]	; (800980c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80097c4:	f002 f94e 	bl	800ba64 <USBD_GetEpDesc>
 80097c8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80097ca:	2101      	movs	r1, #1
 80097cc:	480f      	ldr	r0, [pc, #60]	; (800980c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80097ce:	f002 f949 	bl	800ba64 <USBD_GetEpDesc>
 80097d2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d006      	beq.n	80097e8 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097e2:	711a      	strb	r2, [r3, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d006      	beq.n	80097fc <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097f6:	711a      	strb	r2, [r3, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2220      	movs	r2, #32
 8009800:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009802:	4b02      	ldr	r3, [pc, #8]	; (800980c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	200000f8 	.word	0x200000f8

08009810 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	220a      	movs	r2, #10
 800981c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800981e:	4b03      	ldr	r3, [pc, #12]	; (800982c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009820:	4618      	mov	r0, r3
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr
 800982c:	20000118 	.word	0x20000118

08009830 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009840:	2303      	movs	r3, #3
 8009842:	e009      	b.n	8009858 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	33b0      	adds	r3, #176	; 0xb0
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	32b0      	adds	r2, #176	; 0xb0
 8009876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800987a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d032      	beq.n	80098e8 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2200      	movs	r2, #0
 800988c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	33b0      	adds	r3, #176	; 0xb0
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2000      	movs	r0, #0
 80098ba:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80098bc:	4b0c      	ldr	r3, [pc, #48]	; (80098f0 <MSC_BOT_Init+0x8c>)
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	4619      	mov	r1, r3
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f00e f958 	bl	8017b78 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80098c8:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <MSC_BOT_Init+0x90>)
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	4619      	mov	r1, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f00e f952 	bl	8017b78 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80098d4:	4b06      	ldr	r3, [pc, #24]	; (80098f0 <MSC_BOT_Init+0x8c>)
 80098d6:	7819      	ldrb	r1, [r3, #0]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80098de:	231f      	movs	r3, #31
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f00e fa12 	bl	8017d0a <USBD_LL_PrepareReceive>
 80098e6:	e000      	b.n	80098ea <MSC_BOT_Init+0x86>
    return;
 80098e8:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	20000123 	.word	0x20000123
 80098f4:	20000122 	.word	0x20000122

080098f8 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	32b0      	adds	r2, #176	; 0xb0
 800990a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800990e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d01b      	beq.n	800994e <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2201      	movs	r2, #1
 8009920:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8009922:	4b0d      	ldr	r3, [pc, #52]	; (8009958 <MSC_BOT_Reset+0x60>)
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f00e f963 	bl	8017bf4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800992e:	4b0b      	ldr	r3, [pc, #44]	; (800995c <MSC_BOT_Reset+0x64>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f00e f95d 	bl	8017bf4 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800993a:	4b08      	ldr	r3, [pc, #32]	; (800995c <MSC_BOT_Reset+0x64>)
 800993c:	7819      	ldrb	r1, [r3, #0]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8009944:	231f      	movs	r3, #31
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f00e f9df 	bl	8017d0a <USBD_LL_PrepareReceive>
 800994c:	e000      	b.n	8009950 <MSC_BOT_Reset+0x58>
    return;
 800994e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	20000122 	.word	0x20000122
 800995c:	20000123 	.word	0x20000123

08009960 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	32b0      	adds	r2, #176	; 0xb0
 8009972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009976:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d002      	beq.n	8009984 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	721a      	strb	r2, [r3, #8]
  }
}
 8009984:	bf00      	nop
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	32b0      	adds	r2, #176	; 0xb0
 80099a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099aa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d020      	beq.n	80099f4 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	7a1b      	ldrb	r3, [r3, #8]
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d005      	beq.n	80099c6 <MSC_BOT_DataIn+0x36>
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	db1c      	blt.n	80099f8 <MSC_BOT_DataIn+0x68>
 80099be:	3b03      	subs	r3, #3
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d819      	bhi.n	80099f8 <MSC_BOT_DataIn+0x68>
 80099c4:	e011      	b.n	80099ea <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80099d2:	461a      	mov	r2, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f9c9 	bl	8009d6c <SCSI_ProcessCmd>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	da0d      	bge.n	80099fc <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80099e0:	2101      	movs	r1, #1
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f90c 	bl	8009c00 <MSC_BOT_SendCSW>
      }
      break;
 80099e8:	e008      	b.n	80099fc <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80099ea:	2100      	movs	r1, #0
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 f907 	bl	8009c00 <MSC_BOT_SendCSW>
      break;
 80099f2:	e004      	b.n	80099fe <MSC_BOT_DataIn+0x6e>
    return;
 80099f4:	bf00      	nop
 80099f6:	e002      	b.n	80099fe <MSC_BOT_DataIn+0x6e>

    default:
      break;
 80099f8:	bf00      	nop
 80099fa:	e000      	b.n	80099fe <MSC_BOT_DataIn+0x6e>
      break;
 80099fc:	bf00      	nop
  }
}
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	32b0      	adds	r2, #176	; 0xb0
 8009a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a1e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d01c      	beq.n	8009a60 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	7a1b      	ldrb	r3, [r3, #8]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d002      	beq.n	8009a34 <MSC_BOT_DataOut+0x30>
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d004      	beq.n	8009a3c <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8009a32:	e018      	b.n	8009a66 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f819 	bl	8009a6c <MSC_BOT_CBW_Decode>
      break;
 8009a3a:	e014      	b.n	8009a66 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8009a48:	461a      	mov	r2, r3
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f98e 	bl	8009d6c <SCSI_ProcessCmd>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	da06      	bge.n	8009a64 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009a56:	2101      	movs	r1, #1
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f8d1 	bl	8009c00 <MSC_BOT_SendCSW>
      break;
 8009a5e:	e001      	b.n	8009a64 <MSC_BOT_DataOut+0x60>
    return;
 8009a60:	bf00      	nop
 8009a62:	e000      	b.n	8009a66 <MSC_BOT_DataOut+0x62>
      break;
 8009a64:	bf00      	nop
  }
}
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	32b0      	adds	r2, #176	; 0xb0
 8009a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a82:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d079      	beq.n	8009b7e <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009aa2:	4b3a      	ldr	r3, [pc, #232]	; (8009b8c <MSC_BOT_CBW_Decode+0x120>)
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f00e f94f 	bl	8017d4c <USBD_LL_GetRxDataSize>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b1f      	cmp	r3, #31
 8009ab2:	d114      	bne.n	8009ade <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009aba:	4a35      	ldr	r2, [pc, #212]	; (8009b90 <MSC_BOT_CBW_Decode+0x124>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d10e      	bne.n	8009ade <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d809      	bhi.n	8009ade <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d004      	beq.n	8009ade <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009ada:	2b10      	cmp	r3, #16
 8009adc:	d90e      	bls.n	8009afc <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009ae4:	2320      	movs	r3, #32
 8009ae6:	2205      	movs	r2, #5
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fe56 	bl	800a79a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2202      	movs	r2, #2
 8009af2:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f8bd 	bl	8009c74 <MSC_BOT_Abort>
 8009afa:	e043      	b.n	8009b84 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8009b08:	461a      	mov	r2, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f92e 	bl	8009d6c <SCSI_ProcessCmd>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	da0c      	bge.n	8009b30 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	7a1b      	ldrb	r3, [r3, #8]
 8009b1a:	2b05      	cmp	r3, #5
 8009b1c:	d104      	bne.n	8009b28 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009b1e:	2101      	movs	r1, #1
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f86d 	bl	8009c00 <MSC_BOT_SendCSW>
 8009b26:	e02d      	b.n	8009b84 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f8a3 	bl	8009c74 <MSC_BOT_Abort>
 8009b2e:	e029      	b.n	8009b84 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	7a1b      	ldrb	r3, [r3, #8]
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d024      	beq.n	8009b82 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d020      	beq.n	8009b82 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8009b44:	2b03      	cmp	r3, #3
 8009b46:	d01c      	beq.n	8009b82 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d009      	beq.n	8009b64 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f103 0110 	add.w	r1, r3, #16
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f819 	bl	8009b94 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8009b62:	e00f      	b.n	8009b84 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d104      	bne.n	8009b76 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f846 	bl	8009c00 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8009b74:	e006      	b.n	8009b84 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f87c 	bl	8009c74 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8009b7c:	e002      	b.n	8009b84 <MSC_BOT_CBW_Decode+0x118>
    return;
 8009b7e:	bf00      	nop
 8009b80:	e000      	b.n	8009b84 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8009b82:	bf00      	nop
    }
  }
}
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20000123 	.word	0x20000123
 8009b90:	43425355 	.word	0x43425355

08009b94 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	32b0      	adds	r2, #176	; 0xb0
 8009baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bae:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d01e      	beq.n	8009bf4 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	bf28      	it	cs
 8009bc2:	4613      	movcs	r3, r2
 8009bc4:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	1ad2      	subs	r2, r2, r3
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	2204      	movs	r2, #4
 8009be2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8009be4:	4b05      	ldr	r3, [pc, #20]	; (8009bfc <MSC_BOT_SendData+0x68>)
 8009be6:	7819      	ldrb	r1, [r3, #0]
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f00e f86b 	bl	8017cc8 <USBD_LL_Transmit>
 8009bf2:	e000      	b.n	8009bf6 <MSC_BOT_SendData+0x62>
    return;
 8009bf4:	bf00      	nop
}
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	20000122 	.word	0x20000122

08009c00 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	460b      	mov	r3, r1
 8009c0a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	32b0      	adds	r2, #176	; 0xb0
 8009c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c1a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d01d      	beq.n	8009c5e <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	4a10      	ldr	r2, [pc, #64]	; (8009c68 <MSC_BOT_SendCSW+0x68>)
 8009c26:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	78fa      	ldrb	r2, [r7, #3]
 8009c2e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8009c38:	4b0c      	ldr	r3, [pc, #48]	; (8009c6c <MSC_BOT_SendCSW+0x6c>)
 8009c3a:	7819      	ldrb	r1, [r3, #0]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8009c42:	230d      	movs	r3, #13
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f00e f83f 	bl	8017cc8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009c4a:	4b09      	ldr	r3, [pc, #36]	; (8009c70 <MSC_BOT_SendCSW+0x70>)
 8009c4c:	7819      	ldrb	r1, [r3, #0]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8009c54:	231f      	movs	r3, #31
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f00e f857 	bl	8017d0a <USBD_LL_PrepareReceive>
 8009c5c:	e000      	b.n	8009c60 <MSC_BOT_SendCSW+0x60>
    return;
 8009c5e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	53425355 	.word	0x53425355
 8009c6c:	20000122 	.word	0x20000122
 8009c70:	20000123 	.word	0x20000123

08009c74 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	32b0      	adds	r2, #176	; 0xb0
 8009c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d02a      	beq.n	8009ce8 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d10e      	bne.n	8009cba <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d009      	beq.n	8009cba <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d105      	bne.n	8009cba <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009cae:	4b10      	ldr	r3, [pc, #64]	; (8009cf0 <MSC_BOT_Abort+0x7c>)
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f00d ff7e 	bl	8017bb6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009cba:	4b0e      	ldr	r3, [pc, #56]	; (8009cf4 <MSC_BOT_Abort+0x80>)
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f00d ff78 	bl	8017bb6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	7a5b      	ldrb	r3, [r3, #9]
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d10d      	bne.n	8009cea <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009cce:	4b09      	ldr	r3, [pc, #36]	; (8009cf4 <MSC_BOT_Abort+0x80>)
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f00d ff6e 	bl	8017bb6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009cda:	4b05      	ldr	r3, [pc, #20]	; (8009cf0 <MSC_BOT_Abort+0x7c>)
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f00d ff68 	bl	8017bb6 <USBD_LL_StallEP>
 8009ce6:	e000      	b.n	8009cea <MSC_BOT_Abort+0x76>
    return;
 8009ce8:	bf00      	nop
  }
}
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	20000123 	.word	0x20000123
 8009cf4:	20000122 	.word	0x20000122

08009cf8 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	460b      	mov	r3, r1
 8009d02:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	32b0      	adds	r2, #176	; 0xb0
 8009d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d12:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d01d      	beq.n	8009d56 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	7a5b      	ldrb	r3, [r3, #9]
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d10c      	bne.n	8009d3c <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009d22:	4b10      	ldr	r3, [pc, #64]	; (8009d64 <MSC_BOT_CplClrFeature+0x6c>)
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	4619      	mov	r1, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f00d ff44 	bl	8017bb6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009d2e:	4b0e      	ldr	r3, [pc, #56]	; (8009d68 <MSC_BOT_CplClrFeature+0x70>)
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f00d ff3e 	bl	8017bb6 <USBD_LL_StallEP>
 8009d3a:	e00f      	b.n	8009d5c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8009d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	da0a      	bge.n	8009d5a <MSC_BOT_CplClrFeature+0x62>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	7a5b      	ldrb	r3, [r3, #9]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d006      	beq.n	8009d5a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009d4c:	2101      	movs	r1, #1
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7ff ff56 	bl	8009c00 <MSC_BOT_SendCSW>
 8009d54:	e002      	b.n	8009d5c <MSC_BOT_CplClrFeature+0x64>
    return;
 8009d56:	bf00      	nop
 8009d58:	e000      	b.n	8009d5c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8009d5a:	bf00      	nop
  }
}
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20000122 	.word	0x20000122
 8009d68:	20000123 	.word	0x20000123

08009d6c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	460b      	mov	r3, r1
 8009d76:	607a      	str	r2, [r7, #4]
 8009d78:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	32b0      	adds	r2, #176	; 0xb0
 8009d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d88:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d102      	bne.n	8009d96 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8009d90:	f04f 33ff 	mov.w	r3, #4294967295
 8009d94:	e168      	b.n	800a068 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	2baa      	cmp	r3, #170	; 0xaa
 8009d9c:	f000 8144 	beq.w	800a028 <SCSI_ProcessCmd+0x2bc>
 8009da0:	2baa      	cmp	r3, #170	; 0xaa
 8009da2:	f300 8153 	bgt.w	800a04c <SCSI_ProcessCmd+0x2e0>
 8009da6:	2ba8      	cmp	r3, #168	; 0xa8
 8009da8:	f000 812c 	beq.w	800a004 <SCSI_ProcessCmd+0x298>
 8009dac:	2ba8      	cmp	r3, #168	; 0xa8
 8009dae:	f300 814d 	bgt.w	800a04c <SCSI_ProcessCmd+0x2e0>
 8009db2:	2b5a      	cmp	r3, #90	; 0x5a
 8009db4:	f300 80c0 	bgt.w	8009f38 <SCSI_ProcessCmd+0x1cc>
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f2c0 8147 	blt.w	800a04c <SCSI_ProcessCmd+0x2e0>
 8009dbe:	2b5a      	cmp	r3, #90	; 0x5a
 8009dc0:	f200 8144 	bhi.w	800a04c <SCSI_ProcessCmd+0x2e0>
 8009dc4:	a201      	add	r2, pc, #4	; (adr r2, 8009dcc <SCSI_ProcessCmd+0x60>)
 8009dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dca:	bf00      	nop
 8009dcc:	08009f3f 	.word	0x08009f3f
 8009dd0:	0800a04d 	.word	0x0800a04d
 8009dd4:	0800a04d 	.word	0x0800a04d
 8009dd8:	08009f51 	.word	0x08009f51
 8009ddc:	0800a04d 	.word	0x0800a04d
 8009de0:	0800a04d 	.word	0x0800a04d
 8009de4:	0800a04d 	.word	0x0800a04d
 8009de8:	0800a04d 	.word	0x0800a04d
 8009dec:	0800a04d 	.word	0x0800a04d
 8009df0:	0800a04d 	.word	0x0800a04d
 8009df4:	0800a04d 	.word	0x0800a04d
 8009df8:	0800a04d 	.word	0x0800a04d
 8009dfc:	0800a04d 	.word	0x0800a04d
 8009e00:	0800a04d 	.word	0x0800a04d
 8009e04:	0800a04d 	.word	0x0800a04d
 8009e08:	0800a04d 	.word	0x0800a04d
 8009e0c:	0800a04d 	.word	0x0800a04d
 8009e10:	0800a04d 	.word	0x0800a04d
 8009e14:	08009f63 	.word	0x08009f63
 8009e18:	0800a04d 	.word	0x0800a04d
 8009e1c:	0800a04d 	.word	0x0800a04d
 8009e20:	0800a04d 	.word	0x0800a04d
 8009e24:	0800a04d 	.word	0x0800a04d
 8009e28:	0800a04d 	.word	0x0800a04d
 8009e2c:	0800a04d 	.word	0x0800a04d
 8009e30:	0800a04d 	.word	0x0800a04d
 8009e34:	08009f99 	.word	0x08009f99
 8009e38:	08009f75 	.word	0x08009f75
 8009e3c:	0800a04d 	.word	0x0800a04d
 8009e40:	0800a04d 	.word	0x0800a04d
 8009e44:	08009f87 	.word	0x08009f87
 8009e48:	0800a04d 	.word	0x0800a04d
 8009e4c:	0800a04d 	.word	0x0800a04d
 8009e50:	0800a04d 	.word	0x0800a04d
 8009e54:	0800a04d 	.word	0x0800a04d
 8009e58:	08009fbd 	.word	0x08009fbd
 8009e5c:	0800a04d 	.word	0x0800a04d
 8009e60:	08009fcf 	.word	0x08009fcf
 8009e64:	0800a04d 	.word	0x0800a04d
 8009e68:	0800a04d 	.word	0x0800a04d
 8009e6c:	08009ff3 	.word	0x08009ff3
 8009e70:	0800a04d 	.word	0x0800a04d
 8009e74:	0800a017 	.word	0x0800a017
 8009e78:	0800a04d 	.word	0x0800a04d
 8009e7c:	0800a04d 	.word	0x0800a04d
 8009e80:	0800a04d 	.word	0x0800a04d
 8009e84:	0800a04d 	.word	0x0800a04d
 8009e88:	0800a03b 	.word	0x0800a03b
 8009e8c:	0800a04d 	.word	0x0800a04d
 8009e90:	0800a04d 	.word	0x0800a04d
 8009e94:	0800a04d 	.word	0x0800a04d
 8009e98:	0800a04d 	.word	0x0800a04d
 8009e9c:	0800a04d 	.word	0x0800a04d
 8009ea0:	0800a04d 	.word	0x0800a04d
 8009ea4:	0800a04d 	.word	0x0800a04d
 8009ea8:	0800a04d 	.word	0x0800a04d
 8009eac:	0800a04d 	.word	0x0800a04d
 8009eb0:	0800a04d 	.word	0x0800a04d
 8009eb4:	0800a04d 	.word	0x0800a04d
 8009eb8:	0800a04d 	.word	0x0800a04d
 8009ebc:	0800a04d 	.word	0x0800a04d
 8009ec0:	0800a04d 	.word	0x0800a04d
 8009ec4:	0800a04d 	.word	0x0800a04d
 8009ec8:	0800a04d 	.word	0x0800a04d
 8009ecc:	0800a04d 	.word	0x0800a04d
 8009ed0:	0800a04d 	.word	0x0800a04d
 8009ed4:	0800a04d 	.word	0x0800a04d
 8009ed8:	0800a04d 	.word	0x0800a04d
 8009edc:	0800a04d 	.word	0x0800a04d
 8009ee0:	0800a04d 	.word	0x0800a04d
 8009ee4:	0800a04d 	.word	0x0800a04d
 8009ee8:	0800a04d 	.word	0x0800a04d
 8009eec:	0800a04d 	.word	0x0800a04d
 8009ef0:	0800a04d 	.word	0x0800a04d
 8009ef4:	0800a04d 	.word	0x0800a04d
 8009ef8:	0800a04d 	.word	0x0800a04d
 8009efc:	0800a04d 	.word	0x0800a04d
 8009f00:	0800a04d 	.word	0x0800a04d
 8009f04:	0800a04d 	.word	0x0800a04d
 8009f08:	0800a04d 	.word	0x0800a04d
 8009f0c:	0800a04d 	.word	0x0800a04d
 8009f10:	0800a04d 	.word	0x0800a04d
 8009f14:	0800a04d 	.word	0x0800a04d
 8009f18:	0800a04d 	.word	0x0800a04d
 8009f1c:	0800a04d 	.word	0x0800a04d
 8009f20:	0800a04d 	.word	0x0800a04d
 8009f24:	0800a04d 	.word	0x0800a04d
 8009f28:	0800a04d 	.word	0x0800a04d
 8009f2c:	0800a04d 	.word	0x0800a04d
 8009f30:	0800a04d 	.word	0x0800a04d
 8009f34:	08009fab 	.word	0x08009fab
 8009f38:	2b9e      	cmp	r3, #158	; 0x9e
 8009f3a:	d051      	beq.n	8009fe0 <SCSI_ProcessCmd+0x274>
 8009f3c:	e086      	b.n	800a04c <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8009f3e:	7afb      	ldrb	r3, [r7, #11]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	4619      	mov	r1, r3
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f000 f893 	bl	800a070 <SCSI_TestUnitReady>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f4e:	e089      	b.n	800a064 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8009f50:	7afb      	ldrb	r3, [r7, #11]
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	4619      	mov	r1, r3
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f000 fb9c 	bl	800a694 <SCSI_RequestSense>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009f60:	e080      	b.n	800a064 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8009f62:	7afb      	ldrb	r3, [r7, #11]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	4619      	mov	r1, r3
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f000 f8db 	bl	800a124 <SCSI_Inquiry>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	75fb      	strb	r3, [r7, #23]
      break;
 8009f72:	e077      	b.n	800a064 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8009f74:	7afb      	ldrb	r3, [r7, #11]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f000 fc58 	bl	800a830 <SCSI_StartStopUnit>
 8009f80:	4603      	mov	r3, r0
 8009f82:	75fb      	strb	r3, [r7, #23]
      break;
 8009f84:	e06e      	b.n	800a064 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8009f86:	7afb      	ldrb	r3, [r7, #11]
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f000 fca4 	bl	800a8da <SCSI_AllowPreventRemovable>
 8009f92:	4603      	mov	r3, r0
 8009f94:	75fb      	strb	r3, [r7, #23]
      break;
 8009f96:	e065      	b.n	800a064 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009f98:	7afb      	ldrb	r3, [r7, #11]
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f000 faec 	bl	800a57c <SCSI_ModeSense6>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8009fa8:	e05c      	b.n	800a064 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009faa:	7afb      	ldrb	r3, [r7, #11]
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	4619      	mov	r1, r3
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f000 fb29 	bl	800a608 <SCSI_ModeSense10>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8009fba:	e053      	b.n	800a064 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8009fbc:	7afb      	ldrb	r3, [r7, #11]
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f000 fa5e 	bl	800a484 <SCSI_ReadFormatCapacity>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	75fb      	strb	r3, [r7, #23]
      break;
 8009fcc:	e04a      	b.n	800a064 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8009fce:	7afb      	ldrb	r3, [r7, #11]
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f000 f923 	bl	800a220 <SCSI_ReadCapacity10>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8009fde:	e041      	b.n	800a064 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8009fe0:	7afb      	ldrb	r3, [r7, #11]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f000 f998 	bl	800a31c <SCSI_ReadCapacity16>
 8009fec:	4603      	mov	r3, r0
 8009fee:	75fb      	strb	r3, [r7, #23]
      break;
 8009ff0:	e038      	b.n	800a064 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8009ff2:	7afb      	ldrb	r3, [r7, #11]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f000 fc9b 	bl	800a934 <SCSI_Read10>
 8009ffe:	4603      	mov	r3, r0
 800a000:	75fb      	strb	r3, [r7, #23]
      break;
 800a002:	e02f      	b.n	800a064 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800a004:	7afb      	ldrb	r3, [r7, #11]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	4619      	mov	r1, r3
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f000 fd3c 	bl	800aa88 <SCSI_Read12>
 800a010:	4603      	mov	r3, r0
 800a012:	75fb      	strb	r3, [r7, #23]
      break;
 800a014:	e026      	b.n	800a064 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800a016:	7afb      	ldrb	r3, [r7, #11]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	4619      	mov	r1, r3
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 fde7 	bl	800abf0 <SCSI_Write10>
 800a022:	4603      	mov	r3, r0
 800a024:	75fb      	strb	r3, [r7, #23]
      break;
 800a026:	e01d      	b.n	800a064 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800a028:	7afb      	ldrb	r3, [r7, #11]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	4619      	mov	r1, r3
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f000 feb4 	bl	800ad9c <SCSI_Write12>
 800a034:	4603      	mov	r3, r0
 800a036:	75fb      	strb	r3, [r7, #23]
      break;
 800a038:	e014      	b.n	800a064 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800a03a:	7afb      	ldrb	r3, [r7, #11]
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	4619      	mov	r1, r3
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f000 ff91 	bl	800af68 <SCSI_Verify10>
 800a046:	4603      	mov	r3, r0
 800a048:	75fb      	strb	r3, [r7, #23]
      break;
 800a04a:	e00b      	b.n	800a064 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800a04c:	7af9      	ldrb	r1, [r7, #11]
 800a04e:	2320      	movs	r3, #32
 800a050:	2205      	movs	r2, #5
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f000 fba1 	bl	800a79a <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	2202      	movs	r2, #2
 800a05c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800a05e:	23ff      	movs	r3, #255	; 0xff
 800a060:	75fb      	strb	r3, [r7, #23]
      break;
 800a062:	bf00      	nop
  }

  return ret;
 800a064:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3718      	adds	r7, #24
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	460b      	mov	r3, r1
 800a07a:	607a      	str	r2, [r7, #4]
 800a07c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	32b0      	adds	r2, #176	; 0xb0
 800a088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a08c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d102      	bne.n	800a09a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800a094:	f04f 33ff 	mov.w	r3, #4294967295
 800a098:	e03f      	b.n	800a11a <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00a      	beq.n	800a0ba <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a0aa:	2320      	movs	r3, #32
 800a0ac:	2205      	movs	r2, #5
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f000 fb73 	bl	800a79a <SCSI_SenseCode>

    return -1;
 800a0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b8:	e02f      	b.n	800a11a <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d10b      	bne.n	800a0dc <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a0c4:	7af9      	ldrb	r1, [r7, #11]
 800a0c6:	233a      	movs	r3, #58	; 0x3a
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f000 fb65 	bl	800a79a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	2205      	movs	r2, #5
 800a0d4:	721a      	strb	r2, [r3, #8]
    return -1;
 800a0d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0da:	e01e      	b.n	800a11a <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	33b0      	adds	r3, #176	; 0xb0
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4413      	add	r3, r2
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	7afa      	ldrb	r2, [r7, #11]
 800a0f0:	4610      	mov	r0, r2
 800a0f2:	4798      	blx	r3
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00b      	beq.n	800a112 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a0fa:	7af9      	ldrb	r1, [r7, #11]
 800a0fc:	233a      	movs	r3, #58	; 0x3a
 800a0fe:	2202      	movs	r2, #2
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 fb4a 	bl	800a79a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	2205      	movs	r2, #5
 800a10a:	721a      	strb	r2, [r3, #8]

    return -1;
 800a10c:	f04f 33ff 	mov.w	r3, #4294967295
 800a110:	e003      	b.n	800a11a <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	2200      	movs	r2, #0
 800a116:	60da      	str	r2, [r3, #12]

  return 0;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3718      	adds	r7, #24
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
	...

0800a124 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b088      	sub	sp, #32
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	460b      	mov	r3, r1
 800a12e:	607a      	str	r2, [r7, #4]
 800a130:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	32b0      	adds	r2, #176	; 0xb0
 800a13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a140:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d102      	bne.n	800a14e <SCSI_Inquiry+0x2a>
  {
    return -1;
 800a148:	f04f 33ff 	mov.w	r3, #4294967295
 800a14c:	e05f      	b.n	800a20e <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10a      	bne.n	800a16e <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a15e:	2320      	movs	r3, #32
 800a160:	2205      	movs	r2, #5
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f000 fb19 	bl	800a79a <SCSI_SenseCode>
    return -1;
 800a168:	f04f 33ff 	mov.w	r3, #4294967295
 800a16c:	e04f      	b.n	800a20e <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	3301      	adds	r3, #1
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	f003 0301 	and.w	r3, r3, #1
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d020      	beq.n	800a1be <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	3302      	adds	r3, #2
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d105      	bne.n	800a192 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800a186:	2206      	movs	r2, #6
 800a188:	4923      	ldr	r1, [pc, #140]	; (800a218 <SCSI_Inquiry+0xf4>)
 800a18a:	69b8      	ldr	r0, [r7, #24]
 800a18c:	f001 f872 	bl	800b274 <SCSI_UpdateBotData>
 800a190:	e03c      	b.n	800a20c <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	3302      	adds	r3, #2
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	2b80      	cmp	r3, #128	; 0x80
 800a19a:	d105      	bne.n	800a1a8 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800a19c:	2208      	movs	r2, #8
 800a19e:	491f      	ldr	r1, [pc, #124]	; (800a21c <SCSI_Inquiry+0xf8>)
 800a1a0:	69b8      	ldr	r0, [r7, #24]
 800a1a2:	f001 f867 	bl	800b274 <SCSI_UpdateBotData>
 800a1a6:	e031      	b.n	800a20c <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a1ae:	2324      	movs	r3, #36	; 0x24
 800a1b0:	2205      	movs	r2, #5
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f000 faf1 	bl	800a79a <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800a1b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1bc:	e027      	b.n	800a20e <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	33b0      	adds	r3, #176	; 0xb0
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800a1ce:	69d9      	ldr	r1, [r3, #28]
 800a1d0:	7afa      	ldrb	r2, [r7, #11]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	00db      	lsls	r3, r3, #3
 800a1d6:	4413      	add	r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800a1da:	440b      	add	r3, r1
 800a1dc:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	3304      	adds	r3, #4
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	3305      	adds	r3, #5
 800a1e8:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	3304      	adds	r3, #4
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	8bfa      	ldrh	r2, [r7, #30]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d303      	bcc.n	800a200 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	3304      	adds	r3, #4
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800a200:	8bfb      	ldrh	r3, [r7, #30]
 800a202:	461a      	mov	r2, r3
 800a204:	6979      	ldr	r1, [r7, #20]
 800a206:	69b8      	ldr	r0, [r7, #24]
 800a208:	f001 f834 	bl	800b274 <SCSI_UpdateBotData>
  }

  return 0;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3720      	adds	r7, #32
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	20000124 	.word	0x20000124
 800a21c:	2000012c 	.word	0x2000012c

0800a220 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	460b      	mov	r3, r1
 800a22a:	607a      	str	r2, [r7, #4]
 800a22c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	32b0      	adds	r2, #176	; 0xb0
 800a238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a23c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d102      	bne.n	800a24a <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800a244:	f04f 33ff 	mov.w	r3, #4294967295
 800a248:	e064      	b.n	800a314 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	33b0      	adds	r3, #176	; 0xb0
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	4413      	add	r3, r2
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	697a      	ldr	r2, [r7, #20]
 800a25e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800a268:	7af8      	ldrb	r0, [r7, #11]
 800a26a:	4798      	blx	r3
 800a26c:	4603      	mov	r3, r0
 800a26e:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a270:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d104      	bne.n	800a282 <SCSI_ReadCapacity10+0x62>
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d108      	bne.n	800a294 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a282:	7af9      	ldrb	r1, [r7, #11]
 800a284:	233a      	movs	r3, #58	; 0x3a
 800a286:	2202      	movs	r2, #2
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f000 fa86 	bl	800a79a <SCSI_SenseCode>
    return -1;
 800a28e:	f04f 33ff 	mov.w	r3, #4294967295
 800a292:	e03f      	b.n	800a314 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a29a:	3b01      	subs	r3, #1
 800a29c:	0e1b      	lsrs	r3, r3, #24
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	0c1b      	lsrs	r3, r3, #16
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	0a1b      	lsrs	r3, r3, #8
 800a2be:	b2da      	uxtb	r2, r3
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	b2da      	uxtb	r2, r3
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a2da:	161b      	asrs	r3, r3, #24
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a2e8:	141b      	asrs	r3, r3, #16
 800a2ea:	b2da      	uxtb	r2, r3
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a2f6:	0a1b      	lsrs	r3, r3, #8
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a306:	b2da      	uxtb	r2, r3
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	2208      	movs	r2, #8
 800a310:	60da      	str	r2, [r3, #12]

  return 0;
 800a312:	2300      	movs	r3, #0

}
 800a314:	4618      	mov	r0, r3
 800a316:	3718      	adds	r7, #24
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b088      	sub	sp, #32
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	460b      	mov	r3, r1
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	32b0      	adds	r2, #176	; 0xb0
 800a334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a338:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d102      	bne.n	800a346 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800a340:	f04f 33ff 	mov.w	r3, #4294967295
 800a344:	e09a      	b.n	800a47c <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	33b0      	adds	r3, #176	; 0xb0
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4413      	add	r3, r2
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	69ba      	ldr	r2, [r7, #24]
 800a35a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800a35e:	69ba      	ldr	r2, [r7, #24]
 800a360:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800a364:	7af8      	ldrb	r0, [r7, #11]
 800a366:	4798      	blx	r3
 800a368:	4603      	mov	r3, r0
 800a36a:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a36c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d104      	bne.n	800a37e <SCSI_ReadCapacity16+0x62>
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d108      	bne.n	800a390 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a37e:	7af9      	ldrb	r1, [r7, #11]
 800a380:	233a      	movs	r3, #58	; 0x3a
 800a382:	2202      	movs	r2, #2
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 fa08 	bl	800a79a <SCSI_SenseCode>
    return -1;
 800a38a:	f04f 33ff 	mov.w	r3, #4294967295
 800a38e:	e075      	b.n	800a47c <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	330a      	adds	r3, #10
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	330b      	adds	r3, #11
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a3a0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	330c      	adds	r3, #12
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a3aa:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	320d      	adds	r2, #13
 800a3b0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a3b2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	61fb      	str	r3, [r7, #28]
 800a3bc:	e008      	b.n	800a3d0 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 800a3be:	69ba      	ldr	r2, [r7, #24]
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	3310      	adds	r3, #16
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	61fb      	str	r3, [r7, #28]
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	69fa      	ldr	r2, [r7, #28]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d3f1      	bcc.n	800a3be <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	0e1b      	lsrs	r3, r3, #24
 800a3e4:	b2da      	uxtb	r2, r3
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	0c1b      	lsrs	r3, r3, #16
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a400:	3b01      	subs	r3, #1
 800a402:	0a1b      	lsrs	r3, r3, #8
 800a404:	b2da      	uxtb	r2, r3
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a410:	b2db      	uxtb	r3, r3
 800a412:	3b01      	subs	r3, #1
 800a414:	b2da      	uxtb	r2, r3
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a420:	161b      	asrs	r3, r3, #24
 800a422:	b2da      	uxtb	r2, r3
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a42e:	141b      	asrs	r3, r3, #16
 800a430:	b2da      	uxtb	r2, r3
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a43c:	0a1b      	lsrs	r3, r3, #8
 800a43e:	b29b      	uxth	r3, r3
 800a440:	b2da      	uxtb	r2, r3
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a44c:	b2da      	uxtb	r2, r3
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	330a      	adds	r3, #10
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	330b      	adds	r3, #11
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a462:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	330c      	adds	r3, #12
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800a46c:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	320d      	adds	r2, #13
 800a472:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800a474:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	60da      	str	r2, [r3, #12]

  return 0;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3720      	adds	r7, #32
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	460b      	mov	r3, r1
 800a48e:	607a      	str	r2, [r7, #4]
 800a490:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	32b0      	adds	r2, #176	; 0xb0
 800a49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d102      	bne.n	800a4ae <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800a4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ac:	e061      	b.n	800a572 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	33b0      	adds	r3, #176	; 0xb0
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	4413      	add	r3, r2
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	f107 0214 	add.w	r2, r7, #20
 800a4c4:	f107 0110 	add.w	r1, r7, #16
 800a4c8:	7af8      	ldrb	r0, [r7, #11]
 800a4ca:	4798      	blx	r3
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800a4d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d104      	bne.n	800a4e2 <SCSI_ReadFormatCapacity+0x5e>
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800a4de:	2b02      	cmp	r3, #2
 800a4e0:	d108      	bne.n	800a4f4 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a4e2:	7af9      	ldrb	r1, [r7, #11]
 800a4e4:	233a      	movs	r3, #58	; 0x3a
 800a4e6:	2202      	movs	r2, #2
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f000 f956 	bl	800a79a <SCSI_SenseCode>
    return -1;
 800a4ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f2:	e03e      	b.n	800a572 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	83fb      	strh	r3, [r7, #30]
 800a4f8:	e007      	b.n	800a50a <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800a4fa:	8bfb      	ldrh	r3, [r7, #30]
 800a4fc:	69ba      	ldr	r2, [r7, #24]
 800a4fe:	4413      	add	r3, r2
 800a500:	2200      	movs	r2, #0
 800a502:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800a504:	8bfb      	ldrh	r3, [r7, #30]
 800a506:	3301      	adds	r3, #1
 800a508:	83fb      	strh	r3, [r7, #30]
 800a50a:	8bfb      	ldrh	r3, [r7, #30]
 800a50c:	2b0b      	cmp	r3, #11
 800a50e:	d9f4      	bls.n	800a4fa <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	2208      	movs	r2, #8
 800a514:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	3b01      	subs	r3, #1
 800a51a:	0e1b      	lsrs	r3, r3, #24
 800a51c:	b2da      	uxtb	r2, r3
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	3b01      	subs	r3, #1
 800a526:	0c1b      	lsrs	r3, r3, #16
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	3b01      	subs	r3, #1
 800a532:	0a1b      	lsrs	r3, r3, #8
 800a534:	b2da      	uxtb	r2, r3
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	3b01      	subs	r3, #1
 800a540:	b2da      	uxtb	r2, r3
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	2202      	movs	r2, #2
 800a54a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800a54c:	8abb      	ldrh	r3, [r7, #20]
 800a54e:	141b      	asrs	r3, r3, #16
 800a550:	b2da      	uxtb	r2, r3
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800a556:	8abb      	ldrh	r3, [r7, #20]
 800a558:	0a1b      	lsrs	r3, r3, #8
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800a562:	8abb      	ldrh	r3, [r7, #20]
 800a564:	b2da      	uxtb	r2, r3
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	220c      	movs	r2, #12
 800a56e:	60da      	str	r2, [r3, #12]

  return 0;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3720      	adds	r7, #32
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
	...

0800a57c <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	460b      	mov	r3, r1
 800a586:	607a      	str	r2, [r7, #4]
 800a588:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	32b0      	adds	r2, #176	; 0xb0
 800a594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a598:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800a59a:	2304      	movs	r3, #4
 800a59c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d102      	bne.n	800a5aa <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800a5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a8:	e027      	b.n	800a5fa <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	33b0      	adds	r3, #176	; 0xb0
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4413      	add	r3, r2
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	7afa      	ldrb	r2, [r7, #11]
 800a5be:	4610      	mov	r0, r2
 800a5c0:	4798      	blx	r3
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d006      	beq.n	800a5d6 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800a5c8:	4b0e      	ldr	r3, [pc, #56]	; (800a604 <SCSI_ModeSense6+0x88>)
 800a5ca:	789b      	ldrb	r3, [r3, #2]
 800a5cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	4b0c      	ldr	r3, [pc, #48]	; (800a604 <SCSI_ModeSense6+0x88>)
 800a5d4:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	3304      	adds	r3, #4
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	8afa      	ldrh	r2, [r7, #22]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d303      	bcc.n	800a5ec <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800a5ec:	8afb      	ldrh	r3, [r7, #22]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	4904      	ldr	r1, [pc, #16]	; (800a604 <SCSI_ModeSense6+0x88>)
 800a5f2:	6938      	ldr	r0, [r7, #16]
 800a5f4:	f000 fe3e 	bl	800b274 <SCSI_UpdateBotData>

  return 0;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3718      	adds	r7, #24
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	20000134 	.word	0x20000134

0800a608 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b086      	sub	sp, #24
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	460b      	mov	r3, r1
 800a612:	607a      	str	r2, [r7, #4]
 800a614:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	32b0      	adds	r2, #176	; 0xb0
 800a620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a624:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800a626:	2308      	movs	r3, #8
 800a628:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d102      	bne.n	800a636 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800a630:	f04f 33ff 	mov.w	r3, #4294967295
 800a634:	e027      	b.n	800a686 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	33b0      	adds	r3, #176	; 0xb0
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	7afa      	ldrb	r2, [r7, #11]
 800a64a:	4610      	mov	r0, r2
 800a64c:	4798      	blx	r3
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d006      	beq.n	800a662 <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800a654:	4b0e      	ldr	r3, [pc, #56]	; (800a690 <SCSI_ModeSense10+0x88>)
 800a656:	78db      	ldrb	r3, [r3, #3]
 800a658:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	4b0c      	ldr	r3, [pc, #48]	; (800a690 <SCSI_ModeSense10+0x88>)
 800a660:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	3308      	adds	r3, #8
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	b29b      	uxth	r3, r3
 800a66a:	8afa      	ldrh	r2, [r7, #22]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d303      	bcc.n	800a678 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	3308      	adds	r3, #8
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800a678:	8afb      	ldrh	r3, [r7, #22]
 800a67a:	461a      	mov	r2, r3
 800a67c:	4904      	ldr	r1, [pc, #16]	; (800a690 <SCSI_ModeSense10+0x88>)
 800a67e:	6938      	ldr	r0, [r7, #16]
 800a680:	f000 fdf8 	bl	800b274 <SCSI_UpdateBotData>

  return 0;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3718      	adds	r7, #24
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	20000138 	.word	0x20000138

0800a694 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	460b      	mov	r3, r1
 800a69e:	607a      	str	r2, [r7, #4]
 800a6a0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	32b0      	adds	r2, #176	; 0xb0
 800a6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6b0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d102      	bne.n	800a6be <SCSI_RequestSense+0x2a>
  {
    return -1;
 800a6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6bc:	e069      	b.n	800a792 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10a      	bne.n	800a6de <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a6ce:	2320      	movs	r3, #32
 800a6d0:	2205      	movs	r2, #5
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f000 f861 	bl	800a79a <SCSI_SenseCode>
    return -1;
 800a6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6dc:	e059      	b.n	800a792 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a6de:	2300      	movs	r3, #0
 800a6e0:	75fb      	strb	r3, [r7, #23]
 800a6e2:	e007      	b.n	800a6f4 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800a6e4:	7dfb      	ldrb	r3, [r7, #23]
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800a6ee:	7dfb      	ldrb	r3, [r7, #23]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	75fb      	strb	r3, [r7, #23]
 800a6f4:	7dfb      	ldrb	r3, [r7, #23]
 800a6f6:	2b11      	cmp	r3, #17
 800a6f8:	d9f4      	bls.n	800a6e4 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	2270      	movs	r2, #112	; 0x70
 800a6fe:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	220c      	movs	r2, #12
 800a704:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800a712:	429a      	cmp	r2, r3
 800a714:	d02e      	beq.n	800a774 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800a71c:	461a      	mov	r2, r3
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	3248      	adds	r2, #72	; 0x48
 800a722:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800a730:	693a      	ldr	r2, [r7, #16]
 800a732:	3348      	adds	r3, #72	; 0x48
 800a734:	00db      	lsls	r3, r3, #3
 800a736:	4413      	add	r3, r2
 800a738:	791a      	ldrb	r2, [r3, #4]
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	3348      	adds	r3, #72	; 0x48
 800a748:	00db      	lsls	r3, r3, #3
 800a74a:	4413      	add	r3, r2
 800a74c:	795a      	ldrb	r2, [r3, #5]
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800a758:	3301      	adds	r3, #1
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800a768:	2b04      	cmp	r3, #4
 800a76a:	d103      	bne.n	800a774 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	2212      	movs	r2, #18
 800a778:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	3304      	adds	r3, #4
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	2b12      	cmp	r3, #18
 800a782:	d805      	bhi.n	800a790 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	3304      	adds	r3, #4
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	461a      	mov	r2, r3
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3718      	adds	r7, #24
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800a79a:	b480      	push	{r7}
 800a79c:	b085      	sub	sp, #20
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	4608      	mov	r0, r1
 800a7a4:	4611      	mov	r1, r2
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	70fb      	strb	r3, [r7, #3]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	70bb      	strb	r3, [r7, #2]
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	32b0      	adds	r2, #176	; 0xb0
 800a7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d02c      	beq.n	800a824 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	3248      	adds	r2, #72	; 0x48
 800a7d6:	78b9      	ldrb	r1, [r7, #2]
 800a7d8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	3348      	adds	r3, #72	; 0x48
 800a7e6:	00db      	lsls	r3, r3, #3
 800a7e8:	4413      	add	r3, r2
 800a7ea:	787a      	ldrb	r2, [r7, #1]
 800a7ec:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	3348      	adds	r3, #72	; 0x48
 800a7f8:	00db      	lsls	r3, r3, #3
 800a7fa:	4413      	add	r3, r2
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800a806:	3301      	adds	r3, #1
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800a816:	2b04      	cmp	r3, #4
 800a818:	d105      	bne.n	800a826 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800a822:	e000      	b.n	800a826 <SCSI_SenseCode+0x8c>
    return;
 800a824:	bf00      	nop
  }
}
 800a826:	3714      	adds	r7, #20
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	460b      	mov	r3, r1
 800a83a:	607a      	str	r2, [r7, #4]
 800a83c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	32b0      	adds	r2, #176	; 0xb0
 800a848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a84c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d102      	bne.n	800a85a <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800a854:	f04f 33ff 	mov.w	r3, #4294967295
 800a858:	e03b      	b.n	800a8d2 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800a860:	2b01      	cmp	r3, #1
 800a862:	d10f      	bne.n	800a884 <SCSI_StartStopUnit+0x54>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3304      	adds	r3, #4
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	f003 0303 	and.w	r3, r3, #3
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d108      	bne.n	800a884 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a872:	7af9      	ldrb	r1, [r7, #11]
 800a874:	2324      	movs	r3, #36	; 0x24
 800a876:	2205      	movs	r2, #5
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f7ff ff8e 	bl	800a79a <SCSI_SenseCode>

    return -1;
 800a87e:	f04f 33ff 	mov.w	r3, #4294967295
 800a882:	e026      	b.n	800a8d2 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	3304      	adds	r3, #4
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	f003 0303 	and.w	r3, r3, #3
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d104      	bne.n	800a89c <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800a89a:	e016      	b.n	800a8ca <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	3304      	adds	r3, #4
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	f003 0303 	and.w	r3, r3, #3
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d104      	bne.n	800a8b4 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2202      	movs	r2, #2
 800a8ae:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800a8b2:	e00a      	b.n	800a8ca <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	f003 0303 	and.w	r3, r3, #3
 800a8be:	2b03      	cmp	r3, #3
 800a8c0:	d103      	bne.n	800a8ca <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	60da      	str	r2, [r3, #12]

  return 0;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3718      	adds	r7, #24
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b087      	sub	sp, #28
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	60f8      	str	r0, [r7, #12]
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	607a      	str	r2, [r7, #4]
 800a8e6:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	32b0      	adds	r2, #176	; 0xb0
 800a8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d102      	bne.n	800a904 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800a8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a902:	e011      	b.n	800a928 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	3304      	adds	r3, #4
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d104      	bne.n	800a918 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800a916:	e003      	b.n	800a920 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	2200      	movs	r2, #0
 800a924:	60da      	str	r2, [r3, #12]

  return 0;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	371c      	adds	r7, #28
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b086      	sub	sp, #24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	460b      	mov	r3, r1
 800a93e:	607a      	str	r2, [r7, #4]
 800a940:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	32b0      	adds	r2, #176	; 0xb0
 800a94c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a950:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d102      	bne.n	800a95e <SCSI_Read10+0x2a>
  {
    return -1;
 800a958:	f04f 33ff 	mov.w	r3, #4294967295
 800a95c:	e090      	b.n	800aa80 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	7a1b      	ldrb	r3, [r3, #8]
 800a962:	2b00      	cmp	r3, #0
 800a964:	f040 8082 	bne.w	800aa6c <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800a96e:	b25b      	sxtb	r3, r3
 800a970:	2b00      	cmp	r3, #0
 800a972:	db0a      	blt.n	800a98a <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a97a:	2320      	movs	r3, #32
 800a97c:	2205      	movs	r2, #5
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f7ff ff0b 	bl	800a79a <SCSI_SenseCode>
      return -1;
 800a984:	f04f 33ff 	mov.w	r3, #4294967295
 800a988:	e07a      	b.n	800aa80 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800a990:	2b02      	cmp	r3, #2
 800a992:	d108      	bne.n	800a9a6 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a994:	7af9      	ldrb	r1, [r7, #11]
 800a996:	233a      	movs	r3, #58	; 0x3a
 800a998:	2202      	movs	r2, #2
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f7ff fefd 	bl	800a79a <SCSI_SenseCode>

      return -1;
 800a9a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9a4:	e06c      	b.n	800aa80 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9ac:	68fa      	ldr	r2, [r7, #12]
 800a9ae:	33b0      	adds	r3, #176	; 0xb0
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	7afa      	ldrb	r2, [r7, #11]
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	4798      	blx	r3
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d008      	beq.n	800a9d6 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a9c4:	7af9      	ldrb	r1, [r7, #11]
 800a9c6:	233a      	movs	r3, #58	; 0x3a
 800a9c8:	2202      	movs	r2, #2
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f7ff fee5 	bl	800a79a <SCSI_SenseCode>
      return -1;
 800a9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d4:	e054      	b.n	800aa80 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	3302      	adds	r3, #2
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	3303      	adds	r3, #3
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a9e6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a9f0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	3205      	adds	r2, #5
 800a9f6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a9f8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	3307      	adds	r3, #7
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	021b      	lsls	r3, r3, #8
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	3208      	adds	r2, #8
 800aa0c:	7812      	ldrb	r2, [r2, #0]
 800aa0e:	431a      	orrs	r2, r3
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800aa22:	7af9      	ldrb	r1, [r7, #11]
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f000 fadc 	bl	800afe2 <SCSI_CheckAddressRange>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	da02      	bge.n	800aa36 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800aa30:	f04f 33ff 	mov.w	r3, #4294967295
 800aa34:	e024      	b.n	800aa80 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800aa42:	6979      	ldr	r1, [r7, #20]
 800aa44:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800aa48:	fb01 f303 	mul.w	r3, r1, r3
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d00a      	beq.n	800aa66 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800aa56:	2320      	movs	r3, #32
 800aa58:	2205      	movs	r2, #5
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f7ff fe9d 	bl	800a79a <SCSI_SenseCode>
      return -1;
 800aa60:	f04f 33ff 	mov.w	r3, #4294967295
 800aa64:	e00c      	b.n	800aa80 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2202      	movs	r2, #2
 800aa6a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa72:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800aa74:	7afb      	ldrb	r3, [r7, #11]
 800aa76:	4619      	mov	r1, r3
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 fadf 	bl	800b03c <SCSI_ProcessRead>
 800aa7e:	4603      	mov	r3, r0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3718      	adds	r7, #24
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	460b      	mov	r3, r1
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	32b0      	adds	r2, #176	; 0xb0
 800aaa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaa4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d102      	bne.n	800aab2 <SCSI_Read12+0x2a>
  {
    return -1;
 800aaac:	f04f 33ff 	mov.w	r3, #4294967295
 800aab0:	e09a      	b.n	800abe8 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	7a1b      	ldrb	r3, [r3, #8]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f040 808c 	bne.w	800abd4 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800aac2:	b25b      	sxtb	r3, r3
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	db0a      	blt.n	800aade <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800aace:	2320      	movs	r3, #32
 800aad0:	2205      	movs	r2, #5
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f7ff fe61 	bl	800a79a <SCSI_SenseCode>
      return -1;
 800aad8:	f04f 33ff 	mov.w	r3, #4294967295
 800aadc:	e084      	b.n	800abe8 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d108      	bne.n	800aafa <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800aae8:	7af9      	ldrb	r1, [r7, #11]
 800aaea:	233a      	movs	r3, #58	; 0x3a
 800aaec:	2202      	movs	r2, #2
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f7ff fe53 	bl	800a79a <SCSI_SenseCode>
      return -1;
 800aaf4:	f04f 33ff 	mov.w	r3, #4294967295
 800aaf8:	e076      	b.n	800abe8 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	33b0      	adds	r3, #176	; 0xb0
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4413      	add	r3, r2
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	7afa      	ldrb	r2, [r7, #11]
 800ab0e:	4610      	mov	r0, r2
 800ab10:	4798      	blx	r3
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d008      	beq.n	800ab2a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ab18:	7af9      	ldrb	r1, [r7, #11]
 800ab1a:	233a      	movs	r3, #58	; 0x3a
 800ab1c:	2202      	movs	r2, #2
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f7ff fe3b 	bl	800a79a <SCSI_SenseCode>
      return -1;
 800ab24:	f04f 33ff 	mov.w	r3, #4294967295
 800ab28:	e05e      	b.n	800abe8 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	3302      	adds	r3, #2
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	3303      	adds	r3, #3
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab3a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	3304      	adds	r3, #4
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ab44:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	3205      	adds	r2, #5
 800ab4a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ab4c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	3306      	adds	r3, #6
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3307      	adds	r3, #7
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ab64:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	3308      	adds	r3, #8
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ab6e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	3209      	adds	r2, #9
 800ab74:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800ab76:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ab8a:	7af9      	ldrb	r1, [r7, #11]
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f000 fa28 	bl	800afe2 <SCSI_CheckAddressRange>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	da02      	bge.n	800ab9e <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ab98:	f04f 33ff 	mov.w	r3, #4294967295
 800ab9c:	e024      	b.n	800abe8 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800abaa:	6979      	ldr	r1, [r7, #20]
 800abac:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800abb0:	fb01 f303 	mul.w	r3, r1, r3
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d00a      	beq.n	800abce <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800abbe:	2320      	movs	r3, #32
 800abc0:	2205      	movs	r2, #5
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f7ff fde9 	bl	800a79a <SCSI_SenseCode>
      return -1;
 800abc8:	f04f 33ff 	mov.w	r3, #4294967295
 800abcc:	e00c      	b.n	800abe8 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	2202      	movs	r2, #2
 800abd2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abda:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800abdc:	7afb      	ldrb	r3, [r7, #11]
 800abde:	4619      	mov	r1, r3
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 fa2b 	bl	800b03c <SCSI_ProcessRead>
 800abe6:	4603      	mov	r3, r0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3718      	adds	r7, #24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	460b      	mov	r3, r1
 800abfa:	607a      	str	r2, [r7, #4]
 800abfc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	32b0      	adds	r2, #176	; 0xb0
 800ac08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac0c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d102      	bne.n	800ac1a <SCSI_Write10+0x2a>
  {
    return -1;
 800ac14:	f04f 33ff 	mov.w	r3, #4294967295
 800ac18:	e0ba      	b.n	800ad90 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	7a1b      	ldrb	r3, [r3, #8]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f040 80b0 	bne.w	800ad84 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10a      	bne.n	800ac44 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ac34:	2320      	movs	r3, #32
 800ac36:	2205      	movs	r2, #5
 800ac38:	68f8      	ldr	r0, [r7, #12]
 800ac3a:	f7ff fdae 	bl	800a79a <SCSI_SenseCode>
      return -1;
 800ac3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac42:	e0a5      	b.n	800ad90 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ac4a:	b25b      	sxtb	r3, r3
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	da0a      	bge.n	800ac66 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ac56:	2320      	movs	r3, #32
 800ac58:	2205      	movs	r2, #5
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f7ff fd9d 	bl	800a79a <SCSI_SenseCode>
      return -1;
 800ac60:	f04f 33ff 	mov.w	r3, #4294967295
 800ac64:	e094      	b.n	800ad90 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	33b0      	adds	r3, #176	; 0xb0
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	4413      	add	r3, r2
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	7afa      	ldrb	r2, [r7, #11]
 800ac7a:	4610      	mov	r0, r2
 800ac7c:	4798      	blx	r3
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d008      	beq.n	800ac96 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ac84:	7af9      	ldrb	r1, [r7, #11]
 800ac86:	233a      	movs	r3, #58	; 0x3a
 800ac88:	2202      	movs	r2, #2
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f7ff fd85 	bl	800a79a <SCSI_SenseCode>
      return -1;
 800ac90:	f04f 33ff 	mov.w	r3, #4294967295
 800ac94:	e07c      	b.n	800ad90 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	33b0      	adds	r3, #176	; 0xb0
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	4413      	add	r3, r2
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	7afa      	ldrb	r2, [r7, #11]
 800acaa:	4610      	mov	r0, r2
 800acac:	4798      	blx	r3
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d008      	beq.n	800acc6 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800acb4:	7af9      	ldrb	r1, [r7, #11]
 800acb6:	2327      	movs	r3, #39	; 0x27
 800acb8:	2202      	movs	r2, #2
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f7ff fd6d 	bl	800a79a <SCSI_SenseCode>
      return -1;
 800acc0:	f04f 33ff 	mov.w	r3, #4294967295
 800acc4:	e064      	b.n	800ad90 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	3302      	adds	r3, #2
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	3303      	adds	r3, #3
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800acd6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	3304      	adds	r3, #4
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ace0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	3205      	adds	r2, #5
 800ace6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ace8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	3307      	adds	r3, #7
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	3208      	adds	r2, #8
 800acfc:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800acfe:	431a      	orrs	r2, r3
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ad12:	7af9      	ldrb	r1, [r7, #11]
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 f964 	bl	800afe2 <SCSI_CheckAddressRange>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	da02      	bge.n	800ad26 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ad20:	f04f 33ff 	mov.w	r3, #4294967295
 800ad24:	e034      	b.n	800ad90 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ad2c:	697a      	ldr	r2, [r7, #20]
 800ad2e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800ad32:	fb02 f303 	mul.w	r3, r2, r3
 800ad36:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ad3e:	693a      	ldr	r2, [r7, #16]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d00a      	beq.n	800ad5a <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ad4a:	2320      	movs	r3, #32
 800ad4c:	2205      	movs	r2, #5
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f7ff fd23 	bl	800a79a <SCSI_SenseCode>
      return -1;
 800ad54:	f04f 33ff 	mov.w	r3, #4294967295
 800ad58:	e01a      	b.n	800ad90 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad60:	bf28      	it	cs
 800ad62:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ad66:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800ad6e:	4b0a      	ldr	r3, [pc, #40]	; (800ad98 <SCSI_Write10+0x1a8>)
 800ad70:	7819      	ldrb	r1, [r3, #0]
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	f103 0210 	add.w	r2, r3, #16
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f00c ffc5 	bl	8017d0a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	e005      	b.n	800ad90 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800ad84:	7afb      	ldrb	r3, [r7, #11]
 800ad86:	4619      	mov	r1, r3
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f000 f9dd 	bl	800b148 <SCSI_ProcessWrite>
 800ad8e:	4603      	mov	r3, r0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	20000123 	.word	0x20000123

0800ad9c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b086      	sub	sp, #24
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	460b      	mov	r3, r1
 800ada6:	607a      	str	r2, [r7, #4]
 800ada8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	32b0      	adds	r2, #176	; 0xb0
 800adb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d102      	bne.n	800adc6 <SCSI_Write12+0x2a>
  {
    return -1;
 800adc0:	f04f 33ff 	mov.w	r3, #4294967295
 800adc4:	e0ca      	b.n	800af5c <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	7a1b      	ldrb	r3, [r3, #8]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f040 80c0 	bne.w	800af50 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10a      	bne.n	800adf0 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ade0:	2320      	movs	r3, #32
 800ade2:	2205      	movs	r2, #5
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f7ff fcd8 	bl	800a79a <SCSI_SenseCode>
      return -1;
 800adea:	f04f 33ff 	mov.w	r3, #4294967295
 800adee:	e0b5      	b.n	800af5c <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800adf6:	b25b      	sxtb	r3, r3
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	da0a      	bge.n	800ae12 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ae02:	2320      	movs	r3, #32
 800ae04:	2205      	movs	r2, #5
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f7ff fcc7 	bl	800a79a <SCSI_SenseCode>
      return -1;
 800ae0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae10:	e0a4      	b.n	800af5c <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	33b0      	adds	r3, #176	; 0xb0
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	4413      	add	r3, r2
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	7afa      	ldrb	r2, [r7, #11]
 800ae26:	4610      	mov	r0, r2
 800ae28:	4798      	blx	r3
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00b      	beq.n	800ae48 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ae30:	7af9      	ldrb	r1, [r7, #11]
 800ae32:	233a      	movs	r3, #58	; 0x3a
 800ae34:	2202      	movs	r2, #2
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f7ff fcaf 	bl	800a79a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	2205      	movs	r2, #5
 800ae40:	721a      	strb	r2, [r3, #8]
      return -1;
 800ae42:	f04f 33ff 	mov.w	r3, #4294967295
 800ae46:	e089      	b.n	800af5c <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	33b0      	adds	r3, #176	; 0xb0
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	4413      	add	r3, r2
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	7afa      	ldrb	r2, [r7, #11]
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	4798      	blx	r3
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00b      	beq.n	800ae7e <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800ae66:	7af9      	ldrb	r1, [r7, #11]
 800ae68:	2327      	movs	r3, #39	; 0x27
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f7ff fc94 	bl	800a79a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	2205      	movs	r2, #5
 800ae76:	721a      	strb	r2, [r3, #8]
      return -1;
 800ae78:	f04f 33ff 	mov.w	r3, #4294967295
 800ae7c:	e06e      	b.n	800af5c <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	3302      	adds	r3, #2
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	3303      	adds	r3, #3
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ae8e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	3304      	adds	r3, #4
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ae98:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	3205      	adds	r2, #5
 800ae9e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800aea0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	3306      	adds	r3, #6
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	3307      	adds	r3, #7
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800aeb8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	3308      	adds	r3, #8
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800aec2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	3209      	adds	r2, #9
 800aec8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800aeca:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800aede:	7af9      	ldrb	r1, [r7, #11]
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f000 f87e 	bl	800afe2 <SCSI_CheckAddressRange>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	da02      	bge.n	800aef2 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800aeec:	f04f 33ff 	mov.w	r3, #4294967295
 800aef0:	e034      	b.n	800af5c <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800aef8:	697a      	ldr	r2, [r7, #20]
 800aefa:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800aefe:	fb02 f303 	mul.w	r3, r2, r3
 800af02:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800af0a:	693a      	ldr	r2, [r7, #16]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d00a      	beq.n	800af26 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800af16:	2320      	movs	r3, #32
 800af18:	2205      	movs	r2, #5
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	f7ff fc3d 	bl	800a79a <SCSI_SenseCode>
      return -1;
 800af20:	f04f 33ff 	mov.w	r3, #4294967295
 800af24:	e01a      	b.n	800af5c <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af2c:	bf28      	it	cs
 800af2e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800af32:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	2201      	movs	r2, #1
 800af38:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800af3a:	4b0a      	ldr	r3, [pc, #40]	; (800af64 <SCSI_Write12+0x1c8>)
 800af3c:	7819      	ldrb	r1, [r3, #0]
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	f103 0210 	add.w	r2, r3, #16
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	68f8      	ldr	r0, [r7, #12]
 800af48:	f00c fedf 	bl	8017d0a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800af4c:	2300      	movs	r3, #0
 800af4e:	e005      	b.n	800af5c <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800af50:	7afb      	ldrb	r3, [r7, #11]
 800af52:	4619      	mov	r1, r3
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f000 f8f7 	bl	800b148 <SCSI_ProcessWrite>
 800af5a:	4603      	mov	r3, r0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3718      	adds	r7, #24
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	20000123 	.word	0x20000123

0800af68 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	460b      	mov	r3, r1
 800af72:	607a      	str	r2, [r7, #4]
 800af74:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	32b0      	adds	r2, #176	; 0xb0
 800af80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af84:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d102      	bne.n	800af92 <SCSI_Verify10+0x2a>
  {
    return -1;
 800af8c:	f04f 33ff 	mov.w	r3, #4294967295
 800af90:	e023      	b.n	800afda <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	3301      	adds	r3, #1
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	f003 0302 	and.w	r3, r3, #2
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d008      	beq.n	800afb2 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800afa0:	7af9      	ldrb	r1, [r7, #11]
 800afa2:	2324      	movs	r3, #36	; 0x24
 800afa4:	2205      	movs	r2, #5
 800afa6:	68f8      	ldr	r0, [r7, #12]
 800afa8:	f7ff fbf7 	bl	800a79a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800afac:	f04f 33ff 	mov.w	r3, #4294967295
 800afb0:	e013      	b.n	800afda <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800afbe:	7af9      	ldrb	r1, [r7, #11]
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f000 f80e 	bl	800afe2 <SCSI_CheckAddressRange>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	da02      	bge.n	800afd2 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800afcc:	f04f 33ff 	mov.w	r3, #4294967295
 800afd0:	e003      	b.n	800afda <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	2200      	movs	r2, #0
 800afd6:	60da      	str	r2, [r3, #12]

  return 0;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b086      	sub	sp, #24
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	60f8      	str	r0, [r7, #12]
 800afea:	607a      	str	r2, [r7, #4]
 800afec:	603b      	str	r3, [r7, #0]
 800afee:	460b      	mov	r3, r1
 800aff0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	32b0      	adds	r2, #176	; 0xb0
 800affc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b000:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d102      	bne.n	800b00e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800b008:	f04f 33ff 	mov.w	r3, #4294967295
 800b00c:	e011      	b.n	800b032 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	441a      	add	r2, r3
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d908      	bls.n	800b030 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800b01e:	7af9      	ldrb	r1, [r7, #11]
 800b020:	2321      	movs	r3, #33	; 0x21
 800b022:	2205      	movs	r2, #5
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f7ff fbb8 	bl	800a79a <SCSI_SenseCode>
    return -1;
 800b02a:	f04f 33ff 	mov.w	r3, #4294967295
 800b02e:	e000      	b.n	800b032 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3718      	adds	r7, #24
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
	...

0800b03c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800b03c:	b590      	push	{r4, r7, lr}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	460b      	mov	r3, r1
 800b046:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	32b0      	adds	r2, #176	; 0xb0
 800b052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b056:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d102      	bne.n	800b064 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800b05e:	f04f 33ff 	mov.w	r3, #4294967295
 800b062:	e06a      	b.n	800b13a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800b070:	fb02 f303 	mul.w	r3, r2, r3
 800b074:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b07c:	bf28      	it	cs
 800b07e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800b082:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	33b0      	adds	r3, #176	; 0xb0
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	691c      	ldr	r4, [r3, #16]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f103 0110 	add.w	r1, r3, #16
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	78f8      	ldrb	r0, [r7, #3]
 800b0b4:	47a0      	blx	r4
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	da08      	bge.n	800b0ce <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800b0bc:	78f9      	ldrb	r1, [r7, #3]
 800b0be:	2311      	movs	r3, #17
 800b0c0:	2204      	movs	r2, #4
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7ff fb69 	bl	800a79a <SCSI_SenseCode>
    return -1;
 800b0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0cc:	e035      	b.n	800b13a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800b0ce:	4b1d      	ldr	r3, [pc, #116]	; (800b144 <SCSI_ProcessRead+0x108>)
 800b0d0:	7819      	ldrb	r1, [r3, #0]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f103 0210 	add.w	r2, r3, #16
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f00c fdf4 	bl	8017cc8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0f4:	441a      	add	r2, r3
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b108:	4619      	mov	r1, r3
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b110:	1ad2      	subs	r2, r2, r3
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	1ad2      	subs	r2, r2, r3
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d102      	bne.n	800b138 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2203      	movs	r2, #3
 800b136:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3714      	adds	r7, #20
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd90      	pop	{r4, r7, pc}
 800b142:	bf00      	nop
 800b144:	20000122 	.word	0x20000122

0800b148 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800b148:	b590      	push	{r4, r7, lr}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	460b      	mov	r3, r1
 800b152:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	32b0      	adds	r2, #176	; 0xb0
 800b15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b162:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d102      	bne.n	800b170 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800b16a:	f04f 33ff 	mov.w	r3, #4294967295
 800b16e:	e07a      	b.n	800b266 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800b17c:	fb02 f303 	mul.w	r3, r2, r3
 800b180:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b188:	bf28      	it	cs
 800b18a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800b18e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	33b0      	adds	r3, #176	; 0xb0
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	695c      	ldr	r4, [r3, #20]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f103 0110 	add.w	r1, r3, #16
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	78f8      	ldrb	r0, [r7, #3]
 800b1c0:	47a0      	blx	r4
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	da08      	bge.n	800b1da <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800b1c8:	78f9      	ldrb	r1, [r7, #3]
 800b1ca:	2303      	movs	r3, #3
 800b1cc:	2204      	movs	r2, #4
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f7ff fae3 	bl	800a79a <SCSI_SenseCode>
    return -1;
 800b1d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b1d8:	e045      	b.n	800b266 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1ee:	441a      	add	r2, r3
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b202:	4619      	mov	r1, r3
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	fbb3 f3f1 	udiv	r3, r3, r1
 800b20a:	1ad2      	subs	r2, r2, r3
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	1ad2      	subs	r2, r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d104      	bne.n	800b236 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b22c:	2100      	movs	r1, #0
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f7fe fce6 	bl	8009c00 <MSC_BOT_SendCSW>
 800b234:	e016      	b.n	800b264 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800b242:	fb02 f303 	mul.w	r3, r2, r3
 800b246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b24a:	bf28      	it	cs
 800b24c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800b250:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b252:	4b07      	ldr	r3, [pc, #28]	; (800b270 <SCSI_ProcessWrite+0x128>)
 800b254:	7819      	ldrb	r1, [r3, #0]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f103 0210 	add.w	r2, r3, #16
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f00c fd53 	bl	8017d0a <USBD_LL_PrepareReceive>
  }

  return 0;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd90      	pop	{r4, r7, pc}
 800b26e:	bf00      	nop
 800b270:	20000123 	.word	0x20000123

0800b274 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800b274:	b480      	push	{r7}
 800b276:	b087      	sub	sp, #28
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	4613      	mov	r3, r2
 800b280:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800b282:	88fb      	ldrh	r3, [r7, #6]
 800b284:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d102      	bne.n	800b292 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800b28c:	f04f 33ff 	mov.w	r3, #4294967295
 800b290:	e013      	b.n	800b2ba <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800b292:	8afa      	ldrh	r2, [r7, #22]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800b298:	e00b      	b.n	800b2b2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800b29a:	8afb      	ldrh	r3, [r7, #22]
 800b29c:	3b01      	subs	r3, #1
 800b29e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800b2a0:	8afb      	ldrh	r3, [r7, #22]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	441a      	add	r2, r3
 800b2a6:	8afb      	ldrh	r3, [r7, #22]
 800b2a8:	7811      	ldrb	r1, [r2, #0]
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	460a      	mov	r2, r1
 800b2b0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800b2b2:	8afb      	ldrh	r3, [r7, #22]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d1f0      	bne.n	800b29a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	371c      	adds	r7, #28
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b086      	sub	sp, #24
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	60f8      	str	r0, [r7, #12]
 800b2ce:	60b9      	str	r1, [r7, #8]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d101      	bne.n	800b2de <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b2da:	2303      	movs	r3, #3
 800b2dc:	e01f      	b.n	800b31e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d003      	beq.n	800b304 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2201      	movs	r2, #1
 800b308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	79fa      	ldrb	r2, [r7, #7]
 800b310:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f00c fb3a 	bl	801798c <USBD_LL_Init>
 800b318:	4603      	mov	r3, r0
 800b31a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b31c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3718      	adds	r7, #24
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b084      	sub	sp, #16
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b330:	2300      	movs	r3, #0
 800b332:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d101      	bne.n	800b33e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b33a:	2303      	movs	r3, #3
 800b33c:	e025      	b.n	800b38a <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	683a      	ldr	r2, [r7, #0]
 800b342:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	32ae      	adds	r2, #174	; 0xae
 800b350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00f      	beq.n	800b37a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	32ae      	adds	r2, #174	; 0xae
 800b364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36a:	f107 020e 	add.w	r2, r7, #14
 800b36e:	4610      	mov	r0, r2
 800b370:	4798      	blx	r3
 800b372:	4602      	mov	r2, r0
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b380:	1c5a      	adds	r2, r3, #1
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b388:	2300      	movs	r3, #0
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3710      	adds	r7, #16
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b082      	sub	sp, #8
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f00c fb8c 	bl	8017ab8 <USBD_LL_Start>
 800b3a0:	4603      	mov	r3, r0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3708      	adds	r7, #8
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b3aa:	b480      	push	{r7}
 800b3ac:	b083      	sub	sp, #12
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b3b2:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d009      	beq.n	800b3ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	78fa      	ldrb	r2, [r7, #3]
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	4798      	blx	r3
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	460b      	mov	r3, r1
 800b402:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b404:	2300      	movs	r3, #0
 800b406:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	78fa      	ldrb	r2, [r7, #3]
 800b412:	4611      	mov	r1, r2
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	4798      	blx	r3
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d001      	beq.n	800b422 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b41e:	2303      	movs	r3, #3
 800b420:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b422:	7bfb      	ldrb	r3, [r7, #15]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b43c:	6839      	ldr	r1, [r7, #0]
 800b43e:	4618      	mov	r0, r3
 800b440:	f001 f90f 	bl	800c662 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b452:	461a      	mov	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b460:	f003 031f 	and.w	r3, r3, #31
 800b464:	2b02      	cmp	r3, #2
 800b466:	d01a      	beq.n	800b49e <USBD_LL_SetupStage+0x72>
 800b468:	2b02      	cmp	r3, #2
 800b46a:	d822      	bhi.n	800b4b2 <USBD_LL_SetupStage+0x86>
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d002      	beq.n	800b476 <USBD_LL_SetupStage+0x4a>
 800b470:	2b01      	cmp	r3, #1
 800b472:	d00a      	beq.n	800b48a <USBD_LL_SetupStage+0x5e>
 800b474:	e01d      	b.n	800b4b2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b47c:	4619      	mov	r1, r3
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fb66 	bl	800bb50 <USBD_StdDevReq>
 800b484:	4603      	mov	r3, r0
 800b486:	73fb      	strb	r3, [r7, #15]
      break;
 800b488:	e020      	b.n	800b4cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b490:	4619      	mov	r1, r3
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 fbce 	bl	800bc34 <USBD_StdItfReq>
 800b498:	4603      	mov	r3, r0
 800b49a:	73fb      	strb	r3, [r7, #15]
      break;
 800b49c:	e016      	b.n	800b4cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 fc30 	bl	800bd0c <USBD_StdEPReq>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b4b0:	e00c      	b.n	800b4cc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b4b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	4619      	mov	r1, r3
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f00c fb78 	bl	8017bb6 <USBD_LL_StallEP>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ca:	bf00      	nop
  }

  return ret;
 800b4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b086      	sub	sp, #24
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	60f8      	str	r0, [r7, #12]
 800b4de:	460b      	mov	r3, r1
 800b4e0:	607a      	str	r2, [r7, #4]
 800b4e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b4e8:	7afb      	ldrb	r3, [r7, #11]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d16e      	bne.n	800b5cc <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b4f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b4fc:	2b03      	cmp	r3, #3
 800b4fe:	f040 8098 	bne.w	800b632 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	689a      	ldr	r2, [r3, #8]
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d913      	bls.n	800b536 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	689a      	ldr	r2, [r3, #8]
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	1ad2      	subs	r2, r2, r3
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	68da      	ldr	r2, [r3, #12]
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	4293      	cmp	r3, r2
 800b526:	bf28      	it	cs
 800b528:	4613      	movcs	r3, r2
 800b52a:	461a      	mov	r2, r3
 800b52c:	6879      	ldr	r1, [r7, #4]
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	f001 f98b 	bl	800c84a <USBD_CtlContinueRx>
 800b534:	e07d      	b.n	800b632 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b53c:	f003 031f 	and.w	r3, r3, #31
 800b540:	2b02      	cmp	r3, #2
 800b542:	d014      	beq.n	800b56e <USBD_LL_DataOutStage+0x98>
 800b544:	2b02      	cmp	r3, #2
 800b546:	d81d      	bhi.n	800b584 <USBD_LL_DataOutStage+0xae>
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d002      	beq.n	800b552 <USBD_LL_DataOutStage+0x7c>
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d003      	beq.n	800b558 <USBD_LL_DataOutStage+0x82>
 800b550:	e018      	b.n	800b584 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b552:	2300      	movs	r3, #0
 800b554:	75bb      	strb	r3, [r7, #22]
            break;
 800b556:	e018      	b.n	800b58a <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	4619      	mov	r1, r3
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f000 fa64 	bl	800ba30 <USBD_CoreFindIF>
 800b568:	4603      	mov	r3, r0
 800b56a:	75bb      	strb	r3, [r7, #22]
            break;
 800b56c:	e00d      	b.n	800b58a <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b574:	b2db      	uxtb	r3, r3
 800b576:	4619      	mov	r1, r3
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f000 fa66 	bl	800ba4a <USBD_CoreFindEP>
 800b57e:	4603      	mov	r3, r0
 800b580:	75bb      	strb	r3, [r7, #22]
            break;
 800b582:	e002      	b.n	800b58a <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b584:	2300      	movs	r3, #0
 800b586:	75bb      	strb	r3, [r7, #22]
            break;
 800b588:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b58a:	7dbb      	ldrb	r3, [r7, #22]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d119      	bne.n	800b5c4 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b03      	cmp	r3, #3
 800b59a:	d113      	bne.n	800b5c4 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b59c:	7dba      	ldrb	r2, [r7, #22]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	32ae      	adds	r2, #174	; 0xae
 800b5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00b      	beq.n	800b5c4 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b5ac:	7dba      	ldrb	r2, [r7, #22]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b5b4:	7dba      	ldrb	r2, [r7, #22]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	32ae      	adds	r2, #174	; 0xae
 800b5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5be:	691b      	ldr	r3, [r3, #16]
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f001 f951 	bl	800c86c <USBD_CtlSendStatus>
 800b5ca:	e032      	b.n	800b632 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b5cc:	7afb      	ldrb	r3, [r7, #11]
 800b5ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f000 fa37 	bl	800ba4a <USBD_CoreFindEP>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b5e0:	7dbb      	ldrb	r3, [r7, #22]
 800b5e2:	2bff      	cmp	r3, #255	; 0xff
 800b5e4:	d025      	beq.n	800b632 <USBD_LL_DataOutStage+0x15c>
 800b5e6:	7dbb      	ldrb	r3, [r7, #22]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d122      	bne.n	800b632 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	2b03      	cmp	r3, #3
 800b5f6:	d117      	bne.n	800b628 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b5f8:	7dba      	ldrb	r2, [r7, #22]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	32ae      	adds	r2, #174	; 0xae
 800b5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b602:	699b      	ldr	r3, [r3, #24]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00f      	beq.n	800b628 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b608:	7dba      	ldrb	r2, [r7, #22]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b610:	7dba      	ldrb	r2, [r7, #22]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	32ae      	adds	r2, #174	; 0xae
 800b616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b61a:	699b      	ldr	r3, [r3, #24]
 800b61c:	7afa      	ldrb	r2, [r7, #11]
 800b61e:	4611      	mov	r1, r2
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	4798      	blx	r3
 800b624:	4603      	mov	r3, r0
 800b626:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b628:	7dfb      	ldrb	r3, [r7, #23]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
 800b630:	e000      	b.n	800b634 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3718      	adds	r7, #24
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	460b      	mov	r3, r1
 800b646:	607a      	str	r2, [r7, #4]
 800b648:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b64a:	7afb      	ldrb	r3, [r7, #11]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d16f      	bne.n	800b730 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	3314      	adds	r3, #20
 800b654:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d15a      	bne.n	800b716 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	689a      	ldr	r2, [r3, #8]
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d914      	bls.n	800b696 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	689a      	ldr	r2, [r3, #8]
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	1ad2      	subs	r2, r2, r3
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	461a      	mov	r2, r3
 800b680:	6879      	ldr	r1, [r7, #4]
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f001 f8b3 	bl	800c7ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b688:	2300      	movs	r3, #0
 800b68a:	2200      	movs	r2, #0
 800b68c:	2100      	movs	r1, #0
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	f00c fb3b 	bl	8017d0a <USBD_LL_PrepareReceive>
 800b694:	e03f      	b.n	800b716 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	68da      	ldr	r2, [r3, #12]
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d11c      	bne.n	800b6dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	685a      	ldr	r2, [r3, #4]
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d316      	bcc.n	800b6dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	685a      	ldr	r2, [r3, #4]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d20f      	bcs.n	800b6dc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b6bc:	2200      	movs	r2, #0
 800b6be:	2100      	movs	r1, #0
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f001 f894 	bl	800c7ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f00c fb18 	bl	8017d0a <USBD_LL_PrepareReceive>
 800b6da:	e01c      	b.n	800b716 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	2b03      	cmp	r3, #3
 800b6e6:	d10f      	bne.n	800b708 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d009      	beq.n	800b708 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	68f8      	ldr	r0, [r7, #12]
 800b706:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b708:	2180      	movs	r1, #128	; 0x80
 800b70a:	68f8      	ldr	r0, [r7, #12]
 800b70c:	f00c fa53 	bl	8017bb6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f001 f8be 	bl	800c892 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d03a      	beq.n	800b796 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f7ff fe42 	bl	800b3aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b72e:	e032      	b.n	800b796 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b730:	7afb      	ldrb	r3, [r7, #11]
 800b732:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b736:	b2db      	uxtb	r3, r3
 800b738:	4619      	mov	r1, r3
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f000 f985 	bl	800ba4a <USBD_CoreFindEP>
 800b740:	4603      	mov	r3, r0
 800b742:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b744:	7dfb      	ldrb	r3, [r7, #23]
 800b746:	2bff      	cmp	r3, #255	; 0xff
 800b748:	d025      	beq.n	800b796 <USBD_LL_DataInStage+0x15a>
 800b74a:	7dfb      	ldrb	r3, [r7, #23]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d122      	bne.n	800b796 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b756:	b2db      	uxtb	r3, r3
 800b758:	2b03      	cmp	r3, #3
 800b75a:	d11c      	bne.n	800b796 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b75c:	7dfa      	ldrb	r2, [r7, #23]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	32ae      	adds	r2, #174	; 0xae
 800b762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b766:	695b      	ldr	r3, [r3, #20]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d014      	beq.n	800b796 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b76c:	7dfa      	ldrb	r2, [r7, #23]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b774:	7dfa      	ldrb	r2, [r7, #23]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	32ae      	adds	r2, #174	; 0xae
 800b77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b77e:	695b      	ldr	r3, [r3, #20]
 800b780:	7afa      	ldrb	r2, [r7, #11]
 800b782:	4611      	mov	r1, r2
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	4798      	blx	r3
 800b788:	4603      	mov	r3, r0
 800b78a:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b78c:	7dbb      	ldrb	r3, [r7, #22]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d001      	beq.n	800b796 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b792:	7dbb      	ldrb	r3, [r7, #22]
 800b794:	e000      	b.n	800b798 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d014      	beq.n	800b806 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00e      	beq.n	800b806 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	6852      	ldr	r2, [r2, #4]
 800b7f4:	b2d2      	uxtb	r2, r2
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	4798      	blx	r3
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b802:	2303      	movs	r3, #3
 800b804:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b806:	2340      	movs	r3, #64	; 0x40
 800b808:	2200      	movs	r2, #0
 800b80a:	2100      	movs	r1, #0
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f00c f96e 	bl	8017aee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2201      	movs	r2, #1
 800b816:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2240      	movs	r2, #64	; 0x40
 800b81e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b822:	2340      	movs	r3, #64	; 0x40
 800b824:	2200      	movs	r2, #0
 800b826:	2180      	movs	r1, #128	; 0x80
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f00c f960 	bl	8017aee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2201      	movs	r2, #1
 800b832:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2240      	movs	r2, #64	; 0x40
 800b838:	621a      	str	r2, [r3, #32]

  return ret;
 800b83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	460b      	mov	r3, r1
 800b84e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	78fa      	ldrb	r2, [r7, #3]
 800b854:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b872:	b2db      	uxtb	r3, r3
 800b874:	2b04      	cmp	r3, #4
 800b876:	d006      	beq.n	800b886 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b87e:	b2da      	uxtb	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2204      	movs	r2, #4
 800b88a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	2b04      	cmp	r3, #4
 800b8ae:	d106      	bne.n	800b8be <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b8be:	2300      	movs	r3, #0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	2b03      	cmp	r3, #3
 800b8de:	d110      	bne.n	800b902 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00b      	beq.n	800b902 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8f0:	69db      	ldr	r3, [r3, #28]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d005      	beq.n	800b902 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8fc:	69db      	ldr	r3, [r3, #28]
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b902:	2300      	movs	r3, #0
}
 800b904:	4618      	mov	r0, r3
 800b906:	3708      	adds	r7, #8
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	460b      	mov	r3, r1
 800b916:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	32ae      	adds	r2, #174	; 0xae
 800b922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d101      	bne.n	800b92e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b92a:	2303      	movs	r3, #3
 800b92c:	e01c      	b.n	800b968 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b934:	b2db      	uxtb	r3, r3
 800b936:	2b03      	cmp	r3, #3
 800b938:	d115      	bne.n	800b966 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	32ae      	adds	r2, #174	; 0xae
 800b944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b948:	6a1b      	ldr	r3, [r3, #32]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00b      	beq.n	800b966 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	32ae      	adds	r2, #174	; 0xae
 800b958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	78fa      	ldrb	r2, [r7, #3]
 800b960:	4611      	mov	r1, r2
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	460b      	mov	r3, r1
 800b97a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	32ae      	adds	r2, #174	; 0xae
 800b986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d101      	bne.n	800b992 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b98e:	2303      	movs	r3, #3
 800b990:	e01c      	b.n	800b9cc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	2b03      	cmp	r3, #3
 800b99c:	d115      	bne.n	800b9ca <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	32ae      	adds	r2, #174	; 0xae
 800b9a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00b      	beq.n	800b9ca <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	32ae      	adds	r2, #174	; 0xae
 800b9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c2:	78fa      	ldrb	r2, [r7, #3]
 800b9c4:	4611      	mov	r1, r2
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	370c      	adds	r7, #12
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr

0800b9ea <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b084      	sub	sp, #16
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d00e      	beq.n	800ba26 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	6852      	ldr	r2, [r2, #4]
 800ba14:	b2d2      	uxtb	r2, r2
 800ba16:	4611      	mov	r1, r2
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	4798      	blx	r3
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d001      	beq.n	800ba26 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ba22:	2303      	movs	r3, #3
 800ba24:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	460b      	mov	r3, r1
 800ba3a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ba3c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	370c      	adds	r7, #12
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr

0800ba4a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba4a:	b480      	push	{r7}
 800ba4c:	b083      	sub	sp, #12
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
 800ba52:	460b      	mov	r3, r1
 800ba54:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ba56:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	885b      	ldrh	r3, [r3, #2]
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d920      	bls.n	800bace <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ba94:	e013      	b.n	800babe <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ba96:	f107 030a 	add.w	r3, r7, #10
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	6978      	ldr	r0, [r7, #20]
 800ba9e:	f000 f81b 	bl	800bad8 <USBD_GetNextDesc>
 800baa2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	785b      	ldrb	r3, [r3, #1]
 800baa8:	2b05      	cmp	r3, #5
 800baaa:	d108      	bne.n	800babe <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	789b      	ldrb	r3, [r3, #2]
 800bab4:	78fa      	ldrb	r2, [r7, #3]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d008      	beq.n	800bacc <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800baba:	2300      	movs	r3, #0
 800babc:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	885b      	ldrh	r3, [r3, #2]
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	897b      	ldrh	r3, [r7, #10]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d8e5      	bhi.n	800ba96 <USBD_GetEpDesc+0x32>
 800baca:	e000      	b.n	800bace <USBD_GetEpDesc+0x6a>
          break;
 800bacc:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bace:	693b      	ldr	r3, [r7, #16]
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3718      	adds	r7, #24
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	881a      	ldrh	r2, [r3, #0]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	b29b      	uxth	r3, r3
 800baf0:	4413      	add	r3, r2
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	461a      	mov	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4413      	add	r3, r2
 800bb02:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bb04:	68fb      	ldr	r3, [r7, #12]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bb12:	b480      	push	{r7}
 800bb14:	b087      	sub	sp, #28
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	3301      	adds	r3, #1
 800bb28:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bb30:	8a3b      	ldrh	r3, [r7, #16]
 800bb32:	021b      	lsls	r3, r3, #8
 800bb34:	b21a      	sxth	r2, r3
 800bb36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	b21b      	sxth	r3, r3
 800bb3e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bb40:	89fb      	ldrh	r3, [r7, #14]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	371c      	adds	r7, #28
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr
	...

0800bb50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb66:	2b40      	cmp	r3, #64	; 0x40
 800bb68:	d005      	beq.n	800bb76 <USBD_StdDevReq+0x26>
 800bb6a:	2b40      	cmp	r3, #64	; 0x40
 800bb6c:	d857      	bhi.n	800bc1e <USBD_StdDevReq+0xce>
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00f      	beq.n	800bb92 <USBD_StdDevReq+0x42>
 800bb72:	2b20      	cmp	r3, #32
 800bb74:	d153      	bne.n	800bc1e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	32ae      	adds	r2, #174	; 0xae
 800bb80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	6839      	ldr	r1, [r7, #0]
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	4798      	blx	r3
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb90:	e04a      	b.n	800bc28 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	785b      	ldrb	r3, [r3, #1]
 800bb96:	2b09      	cmp	r3, #9
 800bb98:	d83b      	bhi.n	800bc12 <USBD_StdDevReq+0xc2>
 800bb9a:	a201      	add	r2, pc, #4	; (adr r2, 800bba0 <USBD_StdDevReq+0x50>)
 800bb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba0:	0800bbf5 	.word	0x0800bbf5
 800bba4:	0800bc09 	.word	0x0800bc09
 800bba8:	0800bc13 	.word	0x0800bc13
 800bbac:	0800bbff 	.word	0x0800bbff
 800bbb0:	0800bc13 	.word	0x0800bc13
 800bbb4:	0800bbd3 	.word	0x0800bbd3
 800bbb8:	0800bbc9 	.word	0x0800bbc9
 800bbbc:	0800bc13 	.word	0x0800bc13
 800bbc0:	0800bbeb 	.word	0x0800bbeb
 800bbc4:	0800bbdd 	.word	0x0800bbdd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bbc8:	6839      	ldr	r1, [r7, #0]
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 fa3c 	bl	800c048 <USBD_GetDescriptor>
          break;
 800bbd0:	e024      	b.n	800bc1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bbd2:	6839      	ldr	r1, [r7, #0]
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 fba1 	bl	800c31c <USBD_SetAddress>
          break;
 800bbda:	e01f      	b.n	800bc1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bbdc:	6839      	ldr	r1, [r7, #0]
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fbe0 	bl	800c3a4 <USBD_SetConfig>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	73fb      	strb	r3, [r7, #15]
          break;
 800bbe8:	e018      	b.n	800bc1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bbea:	6839      	ldr	r1, [r7, #0]
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 fc83 	bl	800c4f8 <USBD_GetConfig>
          break;
 800bbf2:	e013      	b.n	800bc1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bbf4:	6839      	ldr	r1, [r7, #0]
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 fcb4 	bl	800c564 <USBD_GetStatus>
          break;
 800bbfc:	e00e      	b.n	800bc1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bbfe:	6839      	ldr	r1, [r7, #0]
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 fce3 	bl	800c5cc <USBD_SetFeature>
          break;
 800bc06:	e009      	b.n	800bc1c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc08:	6839      	ldr	r1, [r7, #0]
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 fd07 	bl	800c61e <USBD_ClrFeature>
          break;
 800bc10:	e004      	b.n	800bc1c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bc12:	6839      	ldr	r1, [r7, #0]
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 fd5e 	bl	800c6d6 <USBD_CtlError>
          break;
 800bc1a:	bf00      	nop
      }
      break;
 800bc1c:	e004      	b.n	800bc28 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bc1e:	6839      	ldr	r1, [r7, #0]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fd58 	bl	800c6d6 <USBD_CtlError>
      break;
 800bc26:	bf00      	nop
  }

  return ret;
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop

0800bc34 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc4a:	2b40      	cmp	r3, #64	; 0x40
 800bc4c:	d005      	beq.n	800bc5a <USBD_StdItfReq+0x26>
 800bc4e:	2b40      	cmp	r3, #64	; 0x40
 800bc50:	d852      	bhi.n	800bcf8 <USBD_StdItfReq+0xc4>
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d001      	beq.n	800bc5a <USBD_StdItfReq+0x26>
 800bc56:	2b20      	cmp	r3, #32
 800bc58:	d14e      	bne.n	800bcf8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	3b01      	subs	r3, #1
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d840      	bhi.n	800bcea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	889b      	ldrh	r3, [r3, #4]
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d836      	bhi.n	800bce0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	889b      	ldrh	r3, [r3, #4]
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	4619      	mov	r1, r3
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7ff fed8 	bl	800ba30 <USBD_CoreFindIF>
 800bc80:	4603      	mov	r3, r0
 800bc82:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc84:	7bbb      	ldrb	r3, [r7, #14]
 800bc86:	2bff      	cmp	r3, #255	; 0xff
 800bc88:	d01d      	beq.n	800bcc6 <USBD_StdItfReq+0x92>
 800bc8a:	7bbb      	ldrb	r3, [r7, #14]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d11a      	bne.n	800bcc6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bc90:	7bba      	ldrb	r2, [r7, #14]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	32ae      	adds	r2, #174	; 0xae
 800bc96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d00f      	beq.n	800bcc0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bca0:	7bba      	ldrb	r2, [r7, #14]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bca8:	7bba      	ldrb	r2, [r7, #14]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	32ae      	adds	r2, #174	; 0xae
 800bcae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	6839      	ldr	r1, [r7, #0]
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	4798      	blx	r3
 800bcba:	4603      	mov	r3, r0
 800bcbc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bcbe:	e004      	b.n	800bcca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bcc0:	2303      	movs	r3, #3
 800bcc2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bcc4:	e001      	b.n	800bcca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bcc6:	2303      	movs	r3, #3
 800bcc8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	88db      	ldrh	r3, [r3, #6]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d110      	bne.n	800bcf4 <USBD_StdItfReq+0xc0>
 800bcd2:	7bfb      	ldrb	r3, [r7, #15]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d10d      	bne.n	800bcf4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 fdc7 	bl	800c86c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bcde:	e009      	b.n	800bcf4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fcf7 	bl	800c6d6 <USBD_CtlError>
          break;
 800bce8:	e004      	b.n	800bcf4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bcea:	6839      	ldr	r1, [r7, #0]
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 fcf2 	bl	800c6d6 <USBD_CtlError>
          break;
 800bcf2:	e000      	b.n	800bcf6 <USBD_StdItfReq+0xc2>
          break;
 800bcf4:	bf00      	nop
      }
      break;
 800bcf6:	e004      	b.n	800bd02 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bcf8:	6839      	ldr	r1, [r7, #0]
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 fceb 	bl	800c6d6 <USBD_CtlError>
      break;
 800bd00:	bf00      	nop
  }

  return ret;
 800bd02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3710      	adds	r7, #16
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd16:	2300      	movs	r3, #0
 800bd18:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	889b      	ldrh	r3, [r3, #4]
 800bd1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd28:	2b40      	cmp	r3, #64	; 0x40
 800bd2a:	d007      	beq.n	800bd3c <USBD_StdEPReq+0x30>
 800bd2c:	2b40      	cmp	r3, #64	; 0x40
 800bd2e:	f200 817f 	bhi.w	800c030 <USBD_StdEPReq+0x324>
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d02a      	beq.n	800bd8c <USBD_StdEPReq+0x80>
 800bd36:	2b20      	cmp	r3, #32
 800bd38:	f040 817a 	bne.w	800c030 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bd3c:	7bbb      	ldrb	r3, [r7, #14]
 800bd3e:	4619      	mov	r1, r3
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f7ff fe82 	bl	800ba4a <USBD_CoreFindEP>
 800bd46:	4603      	mov	r3, r0
 800bd48:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd4a:	7b7b      	ldrb	r3, [r7, #13]
 800bd4c:	2bff      	cmp	r3, #255	; 0xff
 800bd4e:	f000 8174 	beq.w	800c03a <USBD_StdEPReq+0x32e>
 800bd52:	7b7b      	ldrb	r3, [r7, #13]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f040 8170 	bne.w	800c03a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bd5a:	7b7a      	ldrb	r2, [r7, #13]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bd62:	7b7a      	ldrb	r2, [r7, #13]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	32ae      	adds	r2, #174	; 0xae
 800bd68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	f000 8163 	beq.w	800c03a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bd74:	7b7a      	ldrb	r2, [r7, #13]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	32ae      	adds	r2, #174	; 0xae
 800bd7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	6839      	ldr	r1, [r7, #0]
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	4798      	blx	r3
 800bd86:	4603      	mov	r3, r0
 800bd88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bd8a:	e156      	b.n	800c03a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	785b      	ldrb	r3, [r3, #1]
 800bd90:	2b03      	cmp	r3, #3
 800bd92:	d008      	beq.n	800bda6 <USBD_StdEPReq+0x9a>
 800bd94:	2b03      	cmp	r3, #3
 800bd96:	f300 8145 	bgt.w	800c024 <USBD_StdEPReq+0x318>
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f000 809b 	beq.w	800bed6 <USBD_StdEPReq+0x1ca>
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d03c      	beq.n	800be1e <USBD_StdEPReq+0x112>
 800bda4:	e13e      	b.n	800c024 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	d002      	beq.n	800bdb8 <USBD_StdEPReq+0xac>
 800bdb2:	2b03      	cmp	r3, #3
 800bdb4:	d016      	beq.n	800bde4 <USBD_StdEPReq+0xd8>
 800bdb6:	e02c      	b.n	800be12 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdb8:	7bbb      	ldrb	r3, [r7, #14]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00d      	beq.n	800bdda <USBD_StdEPReq+0xce>
 800bdbe:	7bbb      	ldrb	r3, [r7, #14]
 800bdc0:	2b80      	cmp	r3, #128	; 0x80
 800bdc2:	d00a      	beq.n	800bdda <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bdc4:	7bbb      	ldrb	r3, [r7, #14]
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f00b fef4 	bl	8017bb6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdce:	2180      	movs	r1, #128	; 0x80
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f00b fef0 	bl	8017bb6 <USBD_LL_StallEP>
 800bdd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bdd8:	e020      	b.n	800be1c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bdda:	6839      	ldr	r1, [r7, #0]
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 fc7a 	bl	800c6d6 <USBD_CtlError>
              break;
 800bde2:	e01b      	b.n	800be1c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	885b      	ldrh	r3, [r3, #2]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10e      	bne.n	800be0a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bdec:	7bbb      	ldrb	r3, [r7, #14]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00b      	beq.n	800be0a <USBD_StdEPReq+0xfe>
 800bdf2:	7bbb      	ldrb	r3, [r7, #14]
 800bdf4:	2b80      	cmp	r3, #128	; 0x80
 800bdf6:	d008      	beq.n	800be0a <USBD_StdEPReq+0xfe>
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	88db      	ldrh	r3, [r3, #6]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d104      	bne.n	800be0a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800be00:	7bbb      	ldrb	r3, [r7, #14]
 800be02:	4619      	mov	r1, r3
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f00b fed6 	bl	8017bb6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fd2e 	bl	800c86c <USBD_CtlSendStatus>

              break;
 800be10:	e004      	b.n	800be1c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800be12:	6839      	ldr	r1, [r7, #0]
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 fc5e 	bl	800c6d6 <USBD_CtlError>
              break;
 800be1a:	bf00      	nop
          }
          break;
 800be1c:	e107      	b.n	800c02e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be24:	b2db      	uxtb	r3, r3
 800be26:	2b02      	cmp	r3, #2
 800be28:	d002      	beq.n	800be30 <USBD_StdEPReq+0x124>
 800be2a:	2b03      	cmp	r3, #3
 800be2c:	d016      	beq.n	800be5c <USBD_StdEPReq+0x150>
 800be2e:	e04b      	b.n	800bec8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be30:	7bbb      	ldrb	r3, [r7, #14]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00d      	beq.n	800be52 <USBD_StdEPReq+0x146>
 800be36:	7bbb      	ldrb	r3, [r7, #14]
 800be38:	2b80      	cmp	r3, #128	; 0x80
 800be3a:	d00a      	beq.n	800be52 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be3c:	7bbb      	ldrb	r3, [r7, #14]
 800be3e:	4619      	mov	r1, r3
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f00b feb8 	bl	8017bb6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be46:	2180      	movs	r1, #128	; 0x80
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f00b feb4 	bl	8017bb6 <USBD_LL_StallEP>
 800be4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be50:	e040      	b.n	800bed4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 fc3e 	bl	800c6d6 <USBD_CtlError>
              break;
 800be5a:	e03b      	b.n	800bed4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	885b      	ldrh	r3, [r3, #2]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d136      	bne.n	800bed2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800be64:	7bbb      	ldrb	r3, [r7, #14]
 800be66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d004      	beq.n	800be78 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800be6e:	7bbb      	ldrb	r3, [r7, #14]
 800be70:	4619      	mov	r1, r3
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f00b febe 	bl	8017bf4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fcf7 	bl	800c86c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800be7e:	7bbb      	ldrb	r3, [r7, #14]
 800be80:	4619      	mov	r1, r3
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7ff fde1 	bl	800ba4a <USBD_CoreFindEP>
 800be88:	4603      	mov	r3, r0
 800be8a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be8c:	7b7b      	ldrb	r3, [r7, #13]
 800be8e:	2bff      	cmp	r3, #255	; 0xff
 800be90:	d01f      	beq.n	800bed2 <USBD_StdEPReq+0x1c6>
 800be92:	7b7b      	ldrb	r3, [r7, #13]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d11c      	bne.n	800bed2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800be98:	7b7a      	ldrb	r2, [r7, #13]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bea0:	7b7a      	ldrb	r2, [r7, #13]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	32ae      	adds	r2, #174	; 0xae
 800bea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d010      	beq.n	800bed2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800beb0:	7b7a      	ldrb	r2, [r7, #13]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	32ae      	adds	r2, #174	; 0xae
 800beb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	6839      	ldr	r1, [r7, #0]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	4798      	blx	r3
 800bec2:	4603      	mov	r3, r0
 800bec4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bec6:	e004      	b.n	800bed2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bec8:	6839      	ldr	r1, [r7, #0]
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 fc03 	bl	800c6d6 <USBD_CtlError>
              break;
 800bed0:	e000      	b.n	800bed4 <USBD_StdEPReq+0x1c8>
              break;
 800bed2:	bf00      	nop
          }
          break;
 800bed4:	e0ab      	b.n	800c02e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	2b02      	cmp	r3, #2
 800bee0:	d002      	beq.n	800bee8 <USBD_StdEPReq+0x1dc>
 800bee2:	2b03      	cmp	r3, #3
 800bee4:	d032      	beq.n	800bf4c <USBD_StdEPReq+0x240>
 800bee6:	e097      	b.n	800c018 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bee8:	7bbb      	ldrb	r3, [r7, #14]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d007      	beq.n	800befe <USBD_StdEPReq+0x1f2>
 800beee:	7bbb      	ldrb	r3, [r7, #14]
 800bef0:	2b80      	cmp	r3, #128	; 0x80
 800bef2:	d004      	beq.n	800befe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fbed 	bl	800c6d6 <USBD_CtlError>
                break;
 800befc:	e091      	b.n	800c022 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800befe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	da0b      	bge.n	800bf1e <USBD_StdEPReq+0x212>
 800bf06:	7bbb      	ldrb	r3, [r7, #14]
 800bf08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4413      	add	r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	3310      	adds	r3, #16
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	4413      	add	r3, r2
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	e00b      	b.n	800bf36 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf1e:	7bbb      	ldrb	r3, [r7, #14]
 800bf20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf24:	4613      	mov	r3, r2
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	4413      	add	r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	4413      	add	r3, r2
 800bf34:	3304      	adds	r3, #4
 800bf36:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	2202      	movs	r2, #2
 800bf42:	4619      	mov	r1, r3
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 fc37 	bl	800c7b8 <USBD_CtlSendData>
              break;
 800bf4a:	e06a      	b.n	800c022 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bf4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	da11      	bge.n	800bf78 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bf54:	7bbb      	ldrb	r3, [r7, #14]
 800bf56:	f003 020f 	and.w	r2, r3, #15
 800bf5a:	6879      	ldr	r1, [r7, #4]
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	4413      	add	r3, r2
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	440b      	add	r3, r1
 800bf66:	3324      	adds	r3, #36	; 0x24
 800bf68:	881b      	ldrh	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d117      	bne.n	800bf9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fbb0 	bl	800c6d6 <USBD_CtlError>
                  break;
 800bf76:	e054      	b.n	800c022 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bf78:	7bbb      	ldrb	r3, [r7, #14]
 800bf7a:	f003 020f 	and.w	r2, r3, #15
 800bf7e:	6879      	ldr	r1, [r7, #4]
 800bf80:	4613      	mov	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	4413      	add	r3, r2
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	440b      	add	r3, r1
 800bf8a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf8e:	881b      	ldrh	r3, [r3, #0]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d104      	bne.n	800bf9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bf94:	6839      	ldr	r1, [r7, #0]
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fb9d 	bl	800c6d6 <USBD_CtlError>
                  break;
 800bf9c:	e041      	b.n	800c022 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	da0b      	bge.n	800bfbe <USBD_StdEPReq+0x2b2>
 800bfa6:	7bbb      	ldrb	r3, [r7, #14]
 800bfa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bfac:	4613      	mov	r3, r2
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	4413      	add	r3, r2
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	3310      	adds	r3, #16
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	4413      	add	r3, r2
 800bfba:	3304      	adds	r3, #4
 800bfbc:	e00b      	b.n	800bfd6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bfbe:	7bbb      	ldrb	r3, [r7, #14]
 800bfc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	4413      	add	r3, r2
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	3304      	adds	r3, #4
 800bfd6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bfd8:	7bbb      	ldrb	r3, [r7, #14]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d002      	beq.n	800bfe4 <USBD_StdEPReq+0x2d8>
 800bfde:	7bbb      	ldrb	r3, [r7, #14]
 800bfe0:	2b80      	cmp	r3, #128	; 0x80
 800bfe2:	d103      	bne.n	800bfec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	601a      	str	r2, [r3, #0]
 800bfea:	e00e      	b.n	800c00a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bfec:	7bbb      	ldrb	r3, [r7, #14]
 800bfee:	4619      	mov	r1, r3
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f00b fe1e 	bl	8017c32 <USBD_LL_IsStallEP>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d003      	beq.n	800c004 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	2201      	movs	r2, #1
 800c000:	601a      	str	r2, [r3, #0]
 800c002:	e002      	b.n	800c00a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	2200      	movs	r2, #0
 800c008:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	2202      	movs	r2, #2
 800c00e:	4619      	mov	r1, r3
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fbd1 	bl	800c7b8 <USBD_CtlSendData>
              break;
 800c016:	e004      	b.n	800c022 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c018:	6839      	ldr	r1, [r7, #0]
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 fb5b 	bl	800c6d6 <USBD_CtlError>
              break;
 800c020:	bf00      	nop
          }
          break;
 800c022:	e004      	b.n	800c02e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c024:	6839      	ldr	r1, [r7, #0]
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 fb55 	bl	800c6d6 <USBD_CtlError>
          break;
 800c02c:	bf00      	nop
      }
      break;
 800c02e:	e005      	b.n	800c03c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c030:	6839      	ldr	r1, [r7, #0]
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 fb4f 	bl	800c6d6 <USBD_CtlError>
      break;
 800c038:	e000      	b.n	800c03c <USBD_StdEPReq+0x330>
      break;
 800c03a:	bf00      	nop
  }

  return ret;
 800c03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c052:	2300      	movs	r3, #0
 800c054:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c056:	2300      	movs	r3, #0
 800c058:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c05a:	2300      	movs	r3, #0
 800c05c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	885b      	ldrh	r3, [r3, #2]
 800c062:	0a1b      	lsrs	r3, r3, #8
 800c064:	b29b      	uxth	r3, r3
 800c066:	3b01      	subs	r3, #1
 800c068:	2b06      	cmp	r3, #6
 800c06a:	f200 8128 	bhi.w	800c2be <USBD_GetDescriptor+0x276>
 800c06e:	a201      	add	r2, pc, #4	; (adr r2, 800c074 <USBD_GetDescriptor+0x2c>)
 800c070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c074:	0800c091 	.word	0x0800c091
 800c078:	0800c0a9 	.word	0x0800c0a9
 800c07c:	0800c0e9 	.word	0x0800c0e9
 800c080:	0800c2bf 	.word	0x0800c2bf
 800c084:	0800c2bf 	.word	0x0800c2bf
 800c088:	0800c25f 	.word	0x0800c25f
 800c08c:	0800c28b 	.word	0x0800c28b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	7c12      	ldrb	r2, [r2, #16]
 800c09c:	f107 0108 	add.w	r1, r7, #8
 800c0a0:	4610      	mov	r0, r2
 800c0a2:	4798      	blx	r3
 800c0a4:	60f8      	str	r0, [r7, #12]
      break;
 800c0a6:	e112      	b.n	800c2ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	7c1b      	ldrb	r3, [r3, #16]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10d      	bne.n	800c0cc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b8:	f107 0208 	add.w	r2, r7, #8
 800c0bc:	4610      	mov	r0, r2
 800c0be:	4798      	blx	r3
 800c0c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	2202      	movs	r2, #2
 800c0c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c0ca:	e100      	b.n	800c2ce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d4:	f107 0208 	add.w	r2, r7, #8
 800c0d8:	4610      	mov	r0, r2
 800c0da:	4798      	blx	r3
 800c0dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	2202      	movs	r2, #2
 800c0e4:	701a      	strb	r2, [r3, #0]
      break;
 800c0e6:	e0f2      	b.n	800c2ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	885b      	ldrh	r3, [r3, #2]
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	2b05      	cmp	r3, #5
 800c0f0:	f200 80ac 	bhi.w	800c24c <USBD_GetDescriptor+0x204>
 800c0f4:	a201      	add	r2, pc, #4	; (adr r2, 800c0fc <USBD_GetDescriptor+0xb4>)
 800c0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0fa:	bf00      	nop
 800c0fc:	0800c115 	.word	0x0800c115
 800c100:	0800c149 	.word	0x0800c149
 800c104:	0800c17d 	.word	0x0800c17d
 800c108:	0800c1b1 	.word	0x0800c1b1
 800c10c:	0800c1e5 	.word	0x0800c1e5
 800c110:	0800c219 	.word	0x0800c219
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d00b      	beq.n	800c138 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	7c12      	ldrb	r2, [r2, #16]
 800c12c:	f107 0108 	add.w	r1, r7, #8
 800c130:	4610      	mov	r0, r2
 800c132:	4798      	blx	r3
 800c134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c136:	e091      	b.n	800c25c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c138:	6839      	ldr	r1, [r7, #0]
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 facb 	bl	800c6d6 <USBD_CtlError>
            err++;
 800c140:	7afb      	ldrb	r3, [r7, #11]
 800c142:	3301      	adds	r3, #1
 800c144:	72fb      	strb	r3, [r7, #11]
          break;
 800c146:	e089      	b.n	800c25c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00b      	beq.n	800c16c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	7c12      	ldrb	r2, [r2, #16]
 800c160:	f107 0108 	add.w	r1, r7, #8
 800c164:	4610      	mov	r0, r2
 800c166:	4798      	blx	r3
 800c168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c16a:	e077      	b.n	800c25c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c16c:	6839      	ldr	r1, [r7, #0]
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 fab1 	bl	800c6d6 <USBD_CtlError>
            err++;
 800c174:	7afb      	ldrb	r3, [r7, #11]
 800c176:	3301      	adds	r3, #1
 800c178:	72fb      	strb	r3, [r7, #11]
          break;
 800c17a:	e06f      	b.n	800c25c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c182:	68db      	ldr	r3, [r3, #12]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d00b      	beq.n	800c1a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	7c12      	ldrb	r2, [r2, #16]
 800c194:	f107 0108 	add.w	r1, r7, #8
 800c198:	4610      	mov	r0, r2
 800c19a:	4798      	blx	r3
 800c19c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c19e:	e05d      	b.n	800c25c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1a0:	6839      	ldr	r1, [r7, #0]
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 fa97 	bl	800c6d6 <USBD_CtlError>
            err++;
 800c1a8:	7afb      	ldrb	r3, [r7, #11]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c1ae:	e055      	b.n	800c25c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1b6:	691b      	ldr	r3, [r3, #16]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00b      	beq.n	800c1d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1c2:	691b      	ldr	r3, [r3, #16]
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	7c12      	ldrb	r2, [r2, #16]
 800c1c8:	f107 0108 	add.w	r1, r7, #8
 800c1cc:	4610      	mov	r0, r2
 800c1ce:	4798      	blx	r3
 800c1d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1d2:	e043      	b.n	800c25c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1d4:	6839      	ldr	r1, [r7, #0]
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 fa7d 	bl	800c6d6 <USBD_CtlError>
            err++;
 800c1dc:	7afb      	ldrb	r3, [r7, #11]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c1e2:	e03b      	b.n	800c25c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1ea:	695b      	ldr	r3, [r3, #20]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00b      	beq.n	800c208 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1f6:	695b      	ldr	r3, [r3, #20]
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	7c12      	ldrb	r2, [r2, #16]
 800c1fc:	f107 0108 	add.w	r1, r7, #8
 800c200:	4610      	mov	r0, r2
 800c202:	4798      	blx	r3
 800c204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c206:	e029      	b.n	800c25c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c208:	6839      	ldr	r1, [r7, #0]
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 fa63 	bl	800c6d6 <USBD_CtlError>
            err++;
 800c210:	7afb      	ldrb	r3, [r7, #11]
 800c212:	3301      	adds	r3, #1
 800c214:	72fb      	strb	r3, [r7, #11]
          break;
 800c216:	e021      	b.n	800c25c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c21e:	699b      	ldr	r3, [r3, #24]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00b      	beq.n	800c23c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	7c12      	ldrb	r2, [r2, #16]
 800c230:	f107 0108 	add.w	r1, r7, #8
 800c234:	4610      	mov	r0, r2
 800c236:	4798      	blx	r3
 800c238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c23a:	e00f      	b.n	800c25c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c23c:	6839      	ldr	r1, [r7, #0]
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 fa49 	bl	800c6d6 <USBD_CtlError>
            err++;
 800c244:	7afb      	ldrb	r3, [r7, #11]
 800c246:	3301      	adds	r3, #1
 800c248:	72fb      	strb	r3, [r7, #11]
          break;
 800c24a:	e007      	b.n	800c25c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 fa41 	bl	800c6d6 <USBD_CtlError>
          err++;
 800c254:	7afb      	ldrb	r3, [r7, #11]
 800c256:	3301      	adds	r3, #1
 800c258:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c25a:	bf00      	nop
      }
      break;
 800c25c:	e037      	b.n	800c2ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	7c1b      	ldrb	r3, [r3, #16]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d109      	bne.n	800c27a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c26c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c26e:	f107 0208 	add.w	r2, r7, #8
 800c272:	4610      	mov	r0, r2
 800c274:	4798      	blx	r3
 800c276:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c278:	e029      	b.n	800c2ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c27a:	6839      	ldr	r1, [r7, #0]
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 fa2a 	bl	800c6d6 <USBD_CtlError>
        err++;
 800c282:	7afb      	ldrb	r3, [r7, #11]
 800c284:	3301      	adds	r3, #1
 800c286:	72fb      	strb	r3, [r7, #11]
      break;
 800c288:	e021      	b.n	800c2ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	7c1b      	ldrb	r3, [r3, #16]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d10d      	bne.n	800c2ae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c29a:	f107 0208 	add.w	r2, r7, #8
 800c29e:	4610      	mov	r0, r2
 800c2a0:	4798      	blx	r3
 800c2a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	2207      	movs	r2, #7
 800c2aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c2ac:	e00f      	b.n	800c2ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c2ae:	6839      	ldr	r1, [r7, #0]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 fa10 	bl	800c6d6 <USBD_CtlError>
        err++;
 800c2b6:	7afb      	ldrb	r3, [r7, #11]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	72fb      	strb	r3, [r7, #11]
      break;
 800c2bc:	e007      	b.n	800c2ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c2be:	6839      	ldr	r1, [r7, #0]
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 fa08 	bl	800c6d6 <USBD_CtlError>
      err++;
 800c2c6:	7afb      	ldrb	r3, [r7, #11]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	72fb      	strb	r3, [r7, #11]
      break;
 800c2cc:	bf00      	nop
  }

  if (err != 0U)
 800c2ce:	7afb      	ldrb	r3, [r7, #11]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d11e      	bne.n	800c312 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	88db      	ldrh	r3, [r3, #6]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d016      	beq.n	800c30a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c2dc:	893b      	ldrh	r3, [r7, #8]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d00e      	beq.n	800c300 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	88da      	ldrh	r2, [r3, #6]
 800c2e6:	893b      	ldrh	r3, [r7, #8]
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	bf28      	it	cs
 800c2ec:	4613      	movcs	r3, r2
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c2f2:	893b      	ldrh	r3, [r7, #8]
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	68f9      	ldr	r1, [r7, #12]
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 fa5d 	bl	800c7b8 <USBD_CtlSendData>
 800c2fe:	e009      	b.n	800c314 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c300:	6839      	ldr	r1, [r7, #0]
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 f9e7 	bl	800c6d6 <USBD_CtlError>
 800c308:	e004      	b.n	800c314 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 faae 	bl	800c86c <USBD_CtlSendStatus>
 800c310:	e000      	b.n	800c314 <USBD_GetDescriptor+0x2cc>
    return;
 800c312:	bf00      	nop
  }
}
 800c314:	3710      	adds	r7, #16
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop

0800c31c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	889b      	ldrh	r3, [r3, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d131      	bne.n	800c392 <USBD_SetAddress+0x76>
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	88db      	ldrh	r3, [r3, #6]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d12d      	bne.n	800c392 <USBD_SetAddress+0x76>
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	885b      	ldrh	r3, [r3, #2]
 800c33a:	2b7f      	cmp	r3, #127	; 0x7f
 800c33c:	d829      	bhi.n	800c392 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	885b      	ldrh	r3, [r3, #2]
 800c342:	b2db      	uxtb	r3, r3
 800c344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c348:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c350:	b2db      	uxtb	r3, r3
 800c352:	2b03      	cmp	r3, #3
 800c354:	d104      	bne.n	800c360 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c356:	6839      	ldr	r1, [r7, #0]
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 f9bc 	bl	800c6d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c35e:	e01d      	b.n	800c39c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	7bfa      	ldrb	r2, [r7, #15]
 800c364:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c368:	7bfb      	ldrb	r3, [r7, #15]
 800c36a:	4619      	mov	r1, r3
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f00b fc8c 	bl	8017c8a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 fa7a 	bl	800c86c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c378:	7bfb      	ldrb	r3, [r7, #15]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d004      	beq.n	800c388 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2202      	movs	r2, #2
 800c382:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c386:	e009      	b.n	800c39c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2201      	movs	r2, #1
 800c38c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c390:	e004      	b.n	800c39c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 f99e 	bl	800c6d6 <USBD_CtlError>
  }
}
 800c39a:	bf00      	nop
 800c39c:	bf00      	nop
 800c39e:	3710      	adds	r7, #16
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	885b      	ldrh	r3, [r3, #2]
 800c3b6:	b2da      	uxtb	r2, r3
 800c3b8:	4b4e      	ldr	r3, [pc, #312]	; (800c4f4 <USBD_SetConfig+0x150>)
 800c3ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c3bc:	4b4d      	ldr	r3, [pc, #308]	; (800c4f4 <USBD_SetConfig+0x150>)
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d905      	bls.n	800c3d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c3c4:	6839      	ldr	r1, [r7, #0]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 f985 	bl	800c6d6 <USBD_CtlError>
    return USBD_FAIL;
 800c3cc:	2303      	movs	r3, #3
 800c3ce:	e08c      	b.n	800c4ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	d002      	beq.n	800c3e2 <USBD_SetConfig+0x3e>
 800c3dc:	2b03      	cmp	r3, #3
 800c3de:	d029      	beq.n	800c434 <USBD_SetConfig+0x90>
 800c3e0:	e075      	b.n	800c4ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c3e2:	4b44      	ldr	r3, [pc, #272]	; (800c4f4 <USBD_SetConfig+0x150>)
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d020      	beq.n	800c42c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c3ea:	4b42      	ldr	r3, [pc, #264]	; (800c4f4 <USBD_SetConfig+0x150>)
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c3f4:	4b3f      	ldr	r3, [pc, #252]	; (800c4f4 <USBD_SetConfig+0x150>)
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f7fe ffe0 	bl	800b3c0 <USBD_SetClassConfig>
 800c400:	4603      	mov	r3, r0
 800c402:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c404:	7bfb      	ldrb	r3, [r7, #15]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d008      	beq.n	800c41c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c40a:	6839      	ldr	r1, [r7, #0]
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 f962 	bl	800c6d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2202      	movs	r2, #2
 800c416:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c41a:	e065      	b.n	800c4e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 fa25 	bl	800c86c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2203      	movs	r2, #3
 800c426:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c42a:	e05d      	b.n	800c4e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fa1d 	bl	800c86c <USBD_CtlSendStatus>
      break;
 800c432:	e059      	b.n	800c4e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c434:	4b2f      	ldr	r3, [pc, #188]	; (800c4f4 <USBD_SetConfig+0x150>)
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d112      	bne.n	800c462 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2202      	movs	r2, #2
 800c440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c444:	4b2b      	ldr	r3, [pc, #172]	; (800c4f4 <USBD_SetConfig+0x150>)
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	461a      	mov	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c44e:	4b29      	ldr	r3, [pc, #164]	; (800c4f4 <USBD_SetConfig+0x150>)
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	4619      	mov	r1, r3
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f7fe ffcf 	bl	800b3f8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fa06 	bl	800c86c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c460:	e042      	b.n	800c4e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c462:	4b24      	ldr	r3, [pc, #144]	; (800c4f4 <USBD_SetConfig+0x150>)
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	461a      	mov	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d02a      	beq.n	800c4c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	b2db      	uxtb	r3, r3
 800c476:	4619      	mov	r1, r3
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f7fe ffbd 	bl	800b3f8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c47e:	4b1d      	ldr	r3, [pc, #116]	; (800c4f4 <USBD_SetConfig+0x150>)
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	461a      	mov	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c488:	4b1a      	ldr	r3, [pc, #104]	; (800c4f4 <USBD_SetConfig+0x150>)
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	4619      	mov	r1, r3
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f7fe ff96 	bl	800b3c0 <USBD_SetClassConfig>
 800c494:	4603      	mov	r3, r0
 800c496:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c498:	7bfb      	ldrb	r3, [r7, #15]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00f      	beq.n	800c4be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c49e:	6839      	ldr	r1, [r7, #0]
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 f918 	bl	800c6d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f7fe ffa2 	bl	800b3f8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2202      	movs	r2, #2
 800c4b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c4bc:	e014      	b.n	800c4e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 f9d4 	bl	800c86c <USBD_CtlSendStatus>
      break;
 800c4c4:	e010      	b.n	800c4e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 f9d0 	bl	800c86c <USBD_CtlSendStatus>
      break;
 800c4cc:	e00c      	b.n	800c4e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c4ce:	6839      	ldr	r1, [r7, #0]
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 f900 	bl	800c6d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c4d6:	4b07      	ldr	r3, [pc, #28]	; (800c4f4 <USBD_SetConfig+0x150>)
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	4619      	mov	r1, r3
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f7fe ff8b 	bl	800b3f8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	73fb      	strb	r3, [r7, #15]
      break;
 800c4e6:	bf00      	nop
  }

  return ret;
 800c4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3710      	adds	r7, #16
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	20005000 	.word	0x20005000

0800c4f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	88db      	ldrh	r3, [r3, #6]
 800c506:	2b01      	cmp	r3, #1
 800c508:	d004      	beq.n	800c514 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 f8e2 	bl	800c6d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c512:	e023      	b.n	800c55c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	2b02      	cmp	r3, #2
 800c51e:	dc02      	bgt.n	800c526 <USBD_GetConfig+0x2e>
 800c520:	2b00      	cmp	r3, #0
 800c522:	dc03      	bgt.n	800c52c <USBD_GetConfig+0x34>
 800c524:	e015      	b.n	800c552 <USBD_GetConfig+0x5a>
 800c526:	2b03      	cmp	r3, #3
 800c528:	d00b      	beq.n	800c542 <USBD_GetConfig+0x4a>
 800c52a:	e012      	b.n	800c552 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	3308      	adds	r3, #8
 800c536:	2201      	movs	r2, #1
 800c538:	4619      	mov	r1, r3
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 f93c 	bl	800c7b8 <USBD_CtlSendData>
        break;
 800c540:	e00c      	b.n	800c55c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	3304      	adds	r3, #4
 800c546:	2201      	movs	r2, #1
 800c548:	4619      	mov	r1, r3
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 f934 	bl	800c7b8 <USBD_CtlSendData>
        break;
 800c550:	e004      	b.n	800c55c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c552:	6839      	ldr	r1, [r7, #0]
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 f8be 	bl	800c6d6 <USBD_CtlError>
        break;
 800c55a:	bf00      	nop
}
 800c55c:	bf00      	nop
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c574:	b2db      	uxtb	r3, r3
 800c576:	3b01      	subs	r3, #1
 800c578:	2b02      	cmp	r3, #2
 800c57a:	d81e      	bhi.n	800c5ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	88db      	ldrh	r3, [r3, #6]
 800c580:	2b02      	cmp	r3, #2
 800c582:	d004      	beq.n	800c58e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c584:	6839      	ldr	r1, [r7, #0]
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 f8a5 	bl	800c6d6 <USBD_CtlError>
        break;
 800c58c:	e01a      	b.n	800c5c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2201      	movs	r2, #1
 800c592:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d005      	beq.n	800c5aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	f043 0202 	orr.w	r2, r3, #2
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	330c      	adds	r3, #12
 800c5ae:	2202      	movs	r2, #2
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 f900 	bl	800c7b8 <USBD_CtlSendData>
      break;
 800c5b8:	e004      	b.n	800c5c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c5ba:	6839      	ldr	r1, [r7, #0]
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 f88a 	bl	800c6d6 <USBD_CtlError>
      break;
 800c5c2:	bf00      	nop
  }
}
 800c5c4:	bf00      	nop
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	885b      	ldrh	r3, [r3, #2]
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d107      	bne.n	800c5ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f940 	bl	800c86c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c5ec:	e013      	b.n	800c616 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	885b      	ldrh	r3, [r3, #2]
 800c5f2:	2b02      	cmp	r3, #2
 800c5f4:	d10b      	bne.n	800c60e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	889b      	ldrh	r3, [r3, #4]
 800c5fa:	0a1b      	lsrs	r3, r3, #8
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	b2da      	uxtb	r2, r3
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 f930 	bl	800c86c <USBD_CtlSendStatus>
}
 800c60c:	e003      	b.n	800c616 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c60e:	6839      	ldr	r1, [r7, #0]
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 f860 	bl	800c6d6 <USBD_CtlError>
}
 800c616:	bf00      	nop
 800c618:	3708      	adds	r7, #8
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c61e:	b580      	push	{r7, lr}
 800c620:	b082      	sub	sp, #8
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
 800c626:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	3b01      	subs	r3, #1
 800c632:	2b02      	cmp	r3, #2
 800c634:	d80b      	bhi.n	800c64e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	885b      	ldrh	r3, [r3, #2]
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d10c      	bne.n	800c658 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 f910 	bl	800c86c <USBD_CtlSendStatus>
      }
      break;
 800c64c:	e004      	b.n	800c658 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 f840 	bl	800c6d6 <USBD_CtlError>
      break;
 800c656:	e000      	b.n	800c65a <USBD_ClrFeature+0x3c>
      break;
 800c658:	bf00      	nop
  }
}
 800c65a:	bf00      	nop
 800c65c:	3708      	adds	r7, #8
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c662:	b580      	push	{r7, lr}
 800c664:	b084      	sub	sp, #16
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
 800c66a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	781a      	ldrb	r2, [r3, #0]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	3301      	adds	r3, #1
 800c67c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	781a      	ldrb	r2, [r3, #0]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	3301      	adds	r3, #1
 800c68a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c68c:	68f8      	ldr	r0, [r7, #12]
 800c68e:	f7ff fa40 	bl	800bb12 <SWAPBYTE>
 800c692:	4603      	mov	r3, r0
 800c694:	461a      	mov	r2, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	3301      	adds	r3, #1
 800c69e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c6a6:	68f8      	ldr	r0, [r7, #12]
 800c6a8:	f7ff fa33 	bl	800bb12 <SWAPBYTE>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f7ff fa26 	bl	800bb12 <SWAPBYTE>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	80da      	strh	r2, [r3, #6]
}
 800c6ce:	bf00      	nop
 800c6d0:	3710      	adds	r7, #16
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b082      	sub	sp, #8
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
 800c6de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6e0:	2180      	movs	r1, #128	; 0x80
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f00b fa67 	bl	8017bb6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f00b fa63 	bl	8017bb6 <USBD_LL_StallEP>
}
 800c6f0:	bf00      	nop
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b086      	sub	sp, #24
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	60b9      	str	r1, [r7, #8]
 800c702:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c704:	2300      	movs	r3, #0
 800c706:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d036      	beq.n	800c77c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c712:	6938      	ldr	r0, [r7, #16]
 800c714:	f000 f836 	bl	800c784 <USBD_GetLen>
 800c718:	4603      	mov	r3, r0
 800c71a:	3301      	adds	r3, #1
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	005b      	lsls	r3, r3, #1
 800c720:	b29a      	uxth	r2, r3
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c726:	7dfb      	ldrb	r3, [r7, #23]
 800c728:	68ba      	ldr	r2, [r7, #8]
 800c72a:	4413      	add	r3, r2
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	7812      	ldrb	r2, [r2, #0]
 800c730:	701a      	strb	r2, [r3, #0]
  idx++;
 800c732:	7dfb      	ldrb	r3, [r7, #23]
 800c734:	3301      	adds	r3, #1
 800c736:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c738:	7dfb      	ldrb	r3, [r7, #23]
 800c73a:	68ba      	ldr	r2, [r7, #8]
 800c73c:	4413      	add	r3, r2
 800c73e:	2203      	movs	r2, #3
 800c740:	701a      	strb	r2, [r3, #0]
  idx++;
 800c742:	7dfb      	ldrb	r3, [r7, #23]
 800c744:	3301      	adds	r3, #1
 800c746:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c748:	e013      	b.n	800c772 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c74a:	7dfb      	ldrb	r3, [r7, #23]
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	4413      	add	r3, r2
 800c750:	693a      	ldr	r2, [r7, #16]
 800c752:	7812      	ldrb	r2, [r2, #0]
 800c754:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	3301      	adds	r3, #1
 800c75a:	613b      	str	r3, [r7, #16]
    idx++;
 800c75c:	7dfb      	ldrb	r3, [r7, #23]
 800c75e:	3301      	adds	r3, #1
 800c760:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c762:	7dfb      	ldrb	r3, [r7, #23]
 800c764:	68ba      	ldr	r2, [r7, #8]
 800c766:	4413      	add	r3, r2
 800c768:	2200      	movs	r2, #0
 800c76a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c76c:	7dfb      	ldrb	r3, [r7, #23]
 800c76e:	3301      	adds	r3, #1
 800c770:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d1e7      	bne.n	800c74a <USBD_GetString+0x52>
 800c77a:	e000      	b.n	800c77e <USBD_GetString+0x86>
    return;
 800c77c:	bf00      	nop
  }
}
 800c77e:	3718      	adds	r7, #24
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c784:	b480      	push	{r7}
 800c786:	b085      	sub	sp, #20
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c78c:	2300      	movs	r3, #0
 800c78e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c794:	e005      	b.n	800c7a2 <USBD_GetLen+0x1e>
  {
    len++;
 800c796:	7bfb      	ldrb	r3, [r7, #15]
 800c798:	3301      	adds	r3, #1
 800c79a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1f5      	bne.n	800c796 <USBD_GetLen+0x12>
  }

  return len;
 800c7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3714      	adds	r7, #20
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2202      	movs	r2, #2
 800c7c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	2100      	movs	r1, #0
 800c7de:	68f8      	ldr	r0, [r7, #12]
 800c7e0:	f00b fa72 	bl	8017cc8 <USBD_LL_Transmit>

  return USBD_OK;
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b084      	sub	sp, #16
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	60f8      	str	r0, [r7, #12]
 800c7f6:	60b9      	str	r1, [r7, #8]
 800c7f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	68ba      	ldr	r2, [r7, #8]
 800c7fe:	2100      	movs	r1, #0
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	f00b fa61 	bl	8017cc8 <USBD_LL_Transmit>

  return USBD_OK;
 800c806:	2300      	movs	r3, #0
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3710      	adds	r7, #16
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2203      	movs	r2, #3
 800c820:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	68ba      	ldr	r2, [r7, #8]
 800c838:	2100      	movs	r1, #0
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f00b fa65 	bl	8017d0a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b084      	sub	sp, #16
 800c84e:	af00      	add	r7, sp, #0
 800c850:	60f8      	str	r0, [r7, #12]
 800c852:	60b9      	str	r1, [r7, #8]
 800c854:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	68ba      	ldr	r2, [r7, #8]
 800c85a:	2100      	movs	r1, #0
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f00b fa54 	bl	8017d0a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c862:	2300      	movs	r3, #0
}
 800c864:	4618      	mov	r0, r3
 800c866:	3710      	adds	r7, #16
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2204      	movs	r2, #4
 800c878:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c87c:	2300      	movs	r3, #0
 800c87e:	2200      	movs	r2, #0
 800c880:	2100      	movs	r1, #0
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f00b fa20 	bl	8017cc8 <USBD_LL_Transmit>

  return USBD_OK;
 800c888:	2300      	movs	r3, #0
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3708      	adds	r7, #8
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b082      	sub	sp, #8
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2205      	movs	r2, #5
 800c89e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	2100      	movs	r1, #0
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f00b fa2e 	bl	8017d0a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8ae:	2300      	movs	r3, #0
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b087      	sub	sp, #28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	4613      	mov	r3, r2
 800c8c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c8ce:	4b1f      	ldr	r3, [pc, #124]	; (800c94c <FATFS_LinkDriverEx+0x94>)
 800c8d0:	7a5b      	ldrb	r3, [r3, #9]
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d131      	bne.n	800c93c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c8d8:	4b1c      	ldr	r3, [pc, #112]	; (800c94c <FATFS_LinkDriverEx+0x94>)
 800c8da:	7a5b      	ldrb	r3, [r3, #9]
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	461a      	mov	r2, r3
 800c8e0:	4b1a      	ldr	r3, [pc, #104]	; (800c94c <FATFS_LinkDriverEx+0x94>)
 800c8e2:	2100      	movs	r1, #0
 800c8e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c8e6:	4b19      	ldr	r3, [pc, #100]	; (800c94c <FATFS_LinkDriverEx+0x94>)
 800c8e8:	7a5b      	ldrb	r3, [r3, #9]
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	4a17      	ldr	r2, [pc, #92]	; (800c94c <FATFS_LinkDriverEx+0x94>)
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4413      	add	r3, r2
 800c8f2:	68fa      	ldr	r2, [r7, #12]
 800c8f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c8f6:	4b15      	ldr	r3, [pc, #84]	; (800c94c <FATFS_LinkDriverEx+0x94>)
 800c8f8:	7a5b      	ldrb	r3, [r3, #9]
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	4b13      	ldr	r3, [pc, #76]	; (800c94c <FATFS_LinkDriverEx+0x94>)
 800c900:	4413      	add	r3, r2
 800c902:	79fa      	ldrb	r2, [r7, #7]
 800c904:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c906:	4b11      	ldr	r3, [pc, #68]	; (800c94c <FATFS_LinkDriverEx+0x94>)
 800c908:	7a5b      	ldrb	r3, [r3, #9]
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	1c5a      	adds	r2, r3, #1
 800c90e:	b2d1      	uxtb	r1, r2
 800c910:	4a0e      	ldr	r2, [pc, #56]	; (800c94c <FATFS_LinkDriverEx+0x94>)
 800c912:	7251      	strb	r1, [r2, #9]
 800c914:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c916:	7dbb      	ldrb	r3, [r7, #22]
 800c918:	3330      	adds	r3, #48	; 0x30
 800c91a:	b2da      	uxtb	r2, r3
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	3301      	adds	r3, #1
 800c924:	223a      	movs	r2, #58	; 0x3a
 800c926:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	3302      	adds	r3, #2
 800c92c:	222f      	movs	r2, #47	; 0x2f
 800c92e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	3303      	adds	r3, #3
 800c934:	2200      	movs	r2, #0
 800c936:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c938:	2300      	movs	r3, #0
 800c93a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c93c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	371c      	adds	r7, #28
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	20005004 	.word	0x20005004

0800c950 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c95a:	2200      	movs	r2, #0
 800c95c:	6839      	ldr	r1, [r7, #0]
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f7ff ffaa 	bl	800c8b8 <FATFS_LinkDriverEx>
 800c964:	4603      	mov	r3, r0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c96e:	b480      	push	{r7}
 800c970:	b083      	sub	sp, #12
 800c972:	af00      	add	r7, sp, #0
 800c974:	4603      	mov	r3, r0
 800c976:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c978:	88fb      	ldrh	r3, [r7, #6]
 800c97a:	021b      	lsls	r3, r3, #8
 800c97c:	b21a      	sxth	r2, r3
 800c97e:	88fb      	ldrh	r3, [r7, #6]
 800c980:	0a1b      	lsrs	r3, r3, #8
 800c982:	b29b      	uxth	r3, r3
 800c984:	b21b      	sxth	r3, r3
 800c986:	4313      	orrs	r3, r2
 800c988:	b21b      	sxth	r3, r3
 800c98a:	b29b      	uxth	r3, r3
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	370c      	adds	r7, #12
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr

0800c998 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c998:	b480      	push	{r7}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	061a      	lsls	r2, r3, #24
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	021b      	lsls	r3, r3, #8
 800c9a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9ac:	431a      	orrs	r2, r3
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	0a1b      	lsrs	r3, r3, #8
 800c9b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c9b6:	431a      	orrs	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	0e1b      	lsrs	r3, r3, #24
 800c9bc:	4313      	orrs	r3, r2
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	370c      	adds	r7, #12
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr

0800c9ca <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b082      	sub	sp, #8
 800c9ce:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800c9d4:	f000 f8d4 	bl	800cb80 <mem_init>
  memp_init();
 800c9d8:	f000 fbda 	bl	800d190 <memp_init>
  pbuf_init();
  netif_init();
 800c9dc:	f000 fcd8 	bl	800d390 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c9e0:	f007 feba 	bl	8014758 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c9e4:	f001 fdae 	bl	800e544 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c9e8:	f007 fe2c 	bl	8014644 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c9ec:	bf00      	nop
 800c9ee:	3708      	adds	r7, #8
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c9fe:	4b05      	ldr	r3, [pc, #20]	; (800ca14 <ptr_to_mem+0x20>)
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	88fb      	ldrh	r3, [r7, #6]
 800ca04:	4413      	add	r3, r2
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	370c      	adds	r7, #12
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr
 800ca12:	bf00      	nop
 800ca14:	2000567c 	.word	0x2000567c

0800ca18 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ca20:	4b05      	ldr	r3, [pc, #20]	; (800ca38 <mem_to_ptr+0x20>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	1ad3      	subs	r3, r2, r3
 800ca28:	b29b      	uxth	r3, r3
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	370c      	adds	r7, #12
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr
 800ca36:	bf00      	nop
 800ca38:	2000567c 	.word	0x2000567c

0800ca3c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ca3c:	b590      	push	{r4, r7, lr}
 800ca3e:	b085      	sub	sp, #20
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ca44:	4b45      	ldr	r3, [pc, #276]	; (800cb5c <plug_holes+0x120>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d206      	bcs.n	800ca5c <plug_holes+0x20>
 800ca4e:	4b44      	ldr	r3, [pc, #272]	; (800cb60 <plug_holes+0x124>)
 800ca50:	f240 12df 	movw	r2, #479	; 0x1df
 800ca54:	4943      	ldr	r1, [pc, #268]	; (800cb64 <plug_holes+0x128>)
 800ca56:	4844      	ldr	r0, [pc, #272]	; (800cb68 <plug_holes+0x12c>)
 800ca58:	f00b fb60 	bl	801811c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ca5c:	4b43      	ldr	r3, [pc, #268]	; (800cb6c <plug_holes+0x130>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d306      	bcc.n	800ca74 <plug_holes+0x38>
 800ca66:	4b3e      	ldr	r3, [pc, #248]	; (800cb60 <plug_holes+0x124>)
 800ca68:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ca6c:	4940      	ldr	r1, [pc, #256]	; (800cb70 <plug_holes+0x134>)
 800ca6e:	483e      	ldr	r0, [pc, #248]	; (800cb68 <plug_holes+0x12c>)
 800ca70:	f00b fb54 	bl	801811c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	791b      	ldrb	r3, [r3, #4]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d006      	beq.n	800ca8a <plug_holes+0x4e>
 800ca7c:	4b38      	ldr	r3, [pc, #224]	; (800cb60 <plug_holes+0x124>)
 800ca7e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ca82:	493c      	ldr	r1, [pc, #240]	; (800cb74 <plug_holes+0x138>)
 800ca84:	4838      	ldr	r0, [pc, #224]	; (800cb68 <plug_holes+0x12c>)
 800ca86:	f00b fb49 	bl	801811c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	881b      	ldrh	r3, [r3, #0]
 800ca8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca92:	d906      	bls.n	800caa2 <plug_holes+0x66>
 800ca94:	4b32      	ldr	r3, [pc, #200]	; (800cb60 <plug_holes+0x124>)
 800ca96:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ca9a:	4937      	ldr	r1, [pc, #220]	; (800cb78 <plug_holes+0x13c>)
 800ca9c:	4832      	ldr	r0, [pc, #200]	; (800cb68 <plug_holes+0x12c>)
 800ca9e:	f00b fb3d 	bl	801811c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	881b      	ldrh	r3, [r3, #0]
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7ff ffa4 	bl	800c9f4 <ptr_to_mem>
 800caac:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d024      	beq.n	800cb00 <plug_holes+0xc4>
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	791b      	ldrb	r3, [r3, #4]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d120      	bne.n	800cb00 <plug_holes+0xc4>
 800cabe:	4b2b      	ldr	r3, [pc, #172]	; (800cb6c <plug_holes+0x130>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	68fa      	ldr	r2, [r7, #12]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d01b      	beq.n	800cb00 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cac8:	4b2c      	ldr	r3, [pc, #176]	; (800cb7c <plug_holes+0x140>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	429a      	cmp	r2, r3
 800cad0:	d102      	bne.n	800cad8 <plug_holes+0x9c>
      lfree = mem;
 800cad2:	4a2a      	ldr	r2, [pc, #168]	; (800cb7c <plug_holes+0x140>)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	881a      	ldrh	r2, [r3, #0]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	881b      	ldrh	r3, [r3, #0]
 800cae4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cae8:	d00a      	beq.n	800cb00 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	881b      	ldrh	r3, [r3, #0]
 800caee:	4618      	mov	r0, r3
 800caf0:	f7ff ff80 	bl	800c9f4 <ptr_to_mem>
 800caf4:	4604      	mov	r4, r0
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f7ff ff8e 	bl	800ca18 <mem_to_ptr>
 800cafc:	4603      	mov	r3, r0
 800cafe:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	885b      	ldrh	r3, [r3, #2]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7ff ff75 	bl	800c9f4 <ptr_to_mem>
 800cb0a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cb0c:	68ba      	ldr	r2, [r7, #8]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d01f      	beq.n	800cb54 <plug_holes+0x118>
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	791b      	ldrb	r3, [r3, #4]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d11b      	bne.n	800cb54 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cb1c:	4b17      	ldr	r3, [pc, #92]	; (800cb7c <plug_holes+0x140>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d102      	bne.n	800cb2c <plug_holes+0xf0>
      lfree = pmem;
 800cb26:	4a15      	ldr	r2, [pc, #84]	; (800cb7c <plug_holes+0x140>)
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	881a      	ldrh	r2, [r3, #0]
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	881b      	ldrh	r3, [r3, #0]
 800cb38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cb3c:	d00a      	beq.n	800cb54 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	881b      	ldrh	r3, [r3, #0]
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7ff ff56 	bl	800c9f4 <ptr_to_mem>
 800cb48:	4604      	mov	r4, r0
 800cb4a:	68b8      	ldr	r0, [r7, #8]
 800cb4c:	f7ff ff64 	bl	800ca18 <mem_to_ptr>
 800cb50:	4603      	mov	r3, r0
 800cb52:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800cb54:	bf00      	nop
 800cb56:	3714      	adds	r7, #20
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd90      	pop	{r4, r7, pc}
 800cb5c:	2000567c 	.word	0x2000567c
 800cb60:	08019014 	.word	0x08019014
 800cb64:	08019044 	.word	0x08019044
 800cb68:	0801905c 	.word	0x0801905c
 800cb6c:	20005680 	.word	0x20005680
 800cb70:	08019084 	.word	0x08019084
 800cb74:	080190a0 	.word	0x080190a0
 800cb78:	080190bc 	.word	0x080190bc
 800cb7c:	20005684 	.word	0x20005684

0800cb80 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cb86:	4b18      	ldr	r3, [pc, #96]	; (800cbe8 <mem_init+0x68>)
 800cb88:	3303      	adds	r3, #3
 800cb8a:	f023 0303 	bic.w	r3, r3, #3
 800cb8e:	461a      	mov	r2, r3
 800cb90:	4b16      	ldr	r3, [pc, #88]	; (800cbec <mem_init+0x6c>)
 800cb92:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cb94:	4b15      	ldr	r3, [pc, #84]	; (800cbec <mem_init+0x6c>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cba0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2200      	movs	r2, #0
 800cba6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cbae:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800cbb2:	f7ff ff1f 	bl	800c9f4 <ptr_to_mem>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	4a0d      	ldr	r2, [pc, #52]	; (800cbf0 <mem_init+0x70>)
 800cbba:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cbbc:	4b0c      	ldr	r3, [pc, #48]	; (800cbf0 <mem_init+0x70>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cbc4:	4b0a      	ldr	r3, [pc, #40]	; (800cbf0 <mem_init+0x70>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cbcc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cbce:	4b08      	ldr	r3, [pc, #32]	; (800cbf0 <mem_init+0x70>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cbd6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cbd8:	4b04      	ldr	r3, [pc, #16]	; (800cbec <mem_init+0x6c>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a05      	ldr	r2, [pc, #20]	; (800cbf4 <mem_init+0x74>)
 800cbde:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800cbe0:	bf00      	nop
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	20005028 	.word	0x20005028
 800cbec:	2000567c 	.word	0x2000567c
 800cbf0:	20005680 	.word	0x20005680
 800cbf4:	20005684 	.word	0x20005684

0800cbf8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b086      	sub	sp, #24
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f7ff ff09 	bl	800ca18 <mem_to_ptr>
 800cc06:	4603      	mov	r3, r0
 800cc08:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	881b      	ldrh	r3, [r3, #0]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7ff fef0 	bl	800c9f4 <ptr_to_mem>
 800cc14:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	885b      	ldrh	r3, [r3, #2]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7ff feea 	bl	800c9f4 <ptr_to_mem>
 800cc20:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	881b      	ldrh	r3, [r3, #0]
 800cc26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc2a:	d818      	bhi.n	800cc5e <mem_link_valid+0x66>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	885b      	ldrh	r3, [r3, #2]
 800cc30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc34:	d813      	bhi.n	800cc5e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cc3a:	8afa      	ldrh	r2, [r7, #22]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d004      	beq.n	800cc4a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	881b      	ldrh	r3, [r3, #0]
 800cc44:	8afa      	ldrh	r2, [r7, #22]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d109      	bne.n	800cc5e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cc4a:	4b08      	ldr	r3, [pc, #32]	; (800cc6c <mem_link_valid+0x74>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc4e:	693a      	ldr	r2, [r7, #16]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d006      	beq.n	800cc62 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	885b      	ldrh	r3, [r3, #2]
 800cc58:	8afa      	ldrh	r2, [r7, #22]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d001      	beq.n	800cc62 <mem_link_valid+0x6a>
    return 0;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	e000      	b.n	800cc64 <mem_link_valid+0x6c>
  }
  return 1;
 800cc62:	2301      	movs	r3, #1
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3718      	adds	r7, #24
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	20005680 	.word	0x20005680

0800cc70 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d04c      	beq.n	800cd18 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f003 0303 	and.w	r3, r3, #3
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d007      	beq.n	800cc98 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800cc88:	4b25      	ldr	r3, [pc, #148]	; (800cd20 <mem_free+0xb0>)
 800cc8a:	f240 2273 	movw	r2, #627	; 0x273
 800cc8e:	4925      	ldr	r1, [pc, #148]	; (800cd24 <mem_free+0xb4>)
 800cc90:	4825      	ldr	r0, [pc, #148]	; (800cd28 <mem_free+0xb8>)
 800cc92:	f00b fa43 	bl	801811c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cc96:	e040      	b.n	800cd1a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	3b08      	subs	r3, #8
 800cc9c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800cc9e:	4b23      	ldr	r3, [pc, #140]	; (800cd2c <mem_free+0xbc>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d306      	bcc.n	800ccb6 <mem_free+0x46>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f103 020c 	add.w	r2, r3, #12
 800ccae:	4b20      	ldr	r3, [pc, #128]	; (800cd30 <mem_free+0xc0>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d907      	bls.n	800ccc6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ccb6:	4b1a      	ldr	r3, [pc, #104]	; (800cd20 <mem_free+0xb0>)
 800ccb8:	f240 227f 	movw	r2, #639	; 0x27f
 800ccbc:	491d      	ldr	r1, [pc, #116]	; (800cd34 <mem_free+0xc4>)
 800ccbe:	481a      	ldr	r0, [pc, #104]	; (800cd28 <mem_free+0xb8>)
 800ccc0:	f00b fa2c 	bl	801811c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ccc4:	e029      	b.n	800cd1a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	791b      	ldrb	r3, [r3, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d107      	bne.n	800ccde <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ccce:	4b14      	ldr	r3, [pc, #80]	; (800cd20 <mem_free+0xb0>)
 800ccd0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ccd4:	4918      	ldr	r1, [pc, #96]	; (800cd38 <mem_free+0xc8>)
 800ccd6:	4814      	ldr	r0, [pc, #80]	; (800cd28 <mem_free+0xb8>)
 800ccd8:	f00b fa20 	bl	801811c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ccdc:	e01d      	b.n	800cd1a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800ccde:	68f8      	ldr	r0, [r7, #12]
 800cce0:	f7ff ff8a 	bl	800cbf8 <mem_link_valid>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d107      	bne.n	800ccfa <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ccea:	4b0d      	ldr	r3, [pc, #52]	; (800cd20 <mem_free+0xb0>)
 800ccec:	f240 2295 	movw	r2, #661	; 0x295
 800ccf0:	4912      	ldr	r1, [pc, #72]	; (800cd3c <mem_free+0xcc>)
 800ccf2:	480d      	ldr	r0, [pc, #52]	; (800cd28 <mem_free+0xb8>)
 800ccf4:	f00b fa12 	bl	801811c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ccf8:	e00f      	b.n	800cd1a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cd00:	4b0f      	ldr	r3, [pc, #60]	; (800cd40 <mem_free+0xd0>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	68fa      	ldr	r2, [r7, #12]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d202      	bcs.n	800cd10 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cd0a:	4a0d      	ldr	r2, [pc, #52]	; (800cd40 <mem_free+0xd0>)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cd10:	68f8      	ldr	r0, [r7, #12]
 800cd12:	f7ff fe93 	bl	800ca3c <plug_holes>
 800cd16:	e000      	b.n	800cd1a <mem_free+0xaa>
    return;
 800cd18:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	08019014 	.word	0x08019014
 800cd24:	080190e8 	.word	0x080190e8
 800cd28:	0801905c 	.word	0x0801905c
 800cd2c:	2000567c 	.word	0x2000567c
 800cd30:	20005680 	.word	0x20005680
 800cd34:	0801910c 	.word	0x0801910c
 800cd38:	08019128 	.word	0x08019128
 800cd3c:	08019150 	.word	0x08019150
 800cd40:	20005684 	.word	0x20005684

0800cd44 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b088      	sub	sp, #32
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cd50:	887b      	ldrh	r3, [r7, #2]
 800cd52:	3303      	adds	r3, #3
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	f023 0303 	bic.w	r3, r3, #3
 800cd5a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cd5c:	8bfb      	ldrh	r3, [r7, #30]
 800cd5e:	2b0b      	cmp	r3, #11
 800cd60:	d801      	bhi.n	800cd66 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cd62:	230c      	movs	r3, #12
 800cd64:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cd66:	8bfb      	ldrh	r3, [r7, #30]
 800cd68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd6c:	d803      	bhi.n	800cd76 <mem_trim+0x32>
 800cd6e:	8bfa      	ldrh	r2, [r7, #30]
 800cd70:	887b      	ldrh	r3, [r7, #2]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d201      	bcs.n	800cd7a <mem_trim+0x36>
    return NULL;
 800cd76:	2300      	movs	r3, #0
 800cd78:	e0cc      	b.n	800cf14 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cd7a:	4b68      	ldr	r3, [pc, #416]	; (800cf1c <mem_trim+0x1d8>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d304      	bcc.n	800cd8e <mem_trim+0x4a>
 800cd84:	4b66      	ldr	r3, [pc, #408]	; (800cf20 <mem_trim+0x1dc>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d306      	bcc.n	800cd9c <mem_trim+0x58>
 800cd8e:	4b65      	ldr	r3, [pc, #404]	; (800cf24 <mem_trim+0x1e0>)
 800cd90:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cd94:	4964      	ldr	r1, [pc, #400]	; (800cf28 <mem_trim+0x1e4>)
 800cd96:	4865      	ldr	r0, [pc, #404]	; (800cf2c <mem_trim+0x1e8>)
 800cd98:	f00b f9c0 	bl	801811c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cd9c:	4b5f      	ldr	r3, [pc, #380]	; (800cf1c <mem_trim+0x1d8>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d304      	bcc.n	800cdb0 <mem_trim+0x6c>
 800cda6:	4b5e      	ldr	r3, [pc, #376]	; (800cf20 <mem_trim+0x1dc>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	687a      	ldr	r2, [r7, #4]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d301      	bcc.n	800cdb4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	e0af      	b.n	800cf14 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	3b08      	subs	r3, #8
 800cdb8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cdba:	69b8      	ldr	r0, [r7, #24]
 800cdbc:	f7ff fe2c 	bl	800ca18 <mem_to_ptr>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cdc4:	69bb      	ldr	r3, [r7, #24]
 800cdc6:	881a      	ldrh	r2, [r3, #0]
 800cdc8:	8afb      	ldrh	r3, [r7, #22]
 800cdca:	1ad3      	subs	r3, r2, r3
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	3b08      	subs	r3, #8
 800cdd0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cdd2:	8bfa      	ldrh	r2, [r7, #30]
 800cdd4:	8abb      	ldrh	r3, [r7, #20]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d906      	bls.n	800cde8 <mem_trim+0xa4>
 800cdda:	4b52      	ldr	r3, [pc, #328]	; (800cf24 <mem_trim+0x1e0>)
 800cddc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cde0:	4953      	ldr	r1, [pc, #332]	; (800cf30 <mem_trim+0x1ec>)
 800cde2:	4852      	ldr	r0, [pc, #328]	; (800cf2c <mem_trim+0x1e8>)
 800cde4:	f00b f99a 	bl	801811c <iprintf>
  if (newsize > size) {
 800cde8:	8bfa      	ldrh	r2, [r7, #30]
 800cdea:	8abb      	ldrh	r3, [r7, #20]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d901      	bls.n	800cdf4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	e08f      	b.n	800cf14 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800cdf4:	8bfa      	ldrh	r2, [r7, #30]
 800cdf6:	8abb      	ldrh	r3, [r7, #20]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d101      	bne.n	800ce00 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	e089      	b.n	800cf14 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	881b      	ldrh	r3, [r3, #0]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7ff fdf5 	bl	800c9f4 <ptr_to_mem>
 800ce0a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	791b      	ldrb	r3, [r3, #4]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d13f      	bne.n	800ce94 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	881b      	ldrh	r3, [r3, #0]
 800ce18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce1c:	d106      	bne.n	800ce2c <mem_trim+0xe8>
 800ce1e:	4b41      	ldr	r3, [pc, #260]	; (800cf24 <mem_trim+0x1e0>)
 800ce20:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ce24:	4943      	ldr	r1, [pc, #268]	; (800cf34 <mem_trim+0x1f0>)
 800ce26:	4841      	ldr	r0, [pc, #260]	; (800cf2c <mem_trim+0x1e8>)
 800ce28:	f00b f978 	bl	801811c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	881b      	ldrh	r3, [r3, #0]
 800ce30:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ce32:	8afa      	ldrh	r2, [r7, #22]
 800ce34:	8bfb      	ldrh	r3, [r7, #30]
 800ce36:	4413      	add	r3, r2
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	3308      	adds	r3, #8
 800ce3c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ce3e:	4b3e      	ldr	r3, [pc, #248]	; (800cf38 <mem_trim+0x1f4>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	693a      	ldr	r2, [r7, #16]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d106      	bne.n	800ce56 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800ce48:	89fb      	ldrh	r3, [r7, #14]
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7ff fdd2 	bl	800c9f4 <ptr_to_mem>
 800ce50:	4603      	mov	r3, r0
 800ce52:	4a39      	ldr	r2, [pc, #228]	; (800cf38 <mem_trim+0x1f4>)
 800ce54:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ce56:	89fb      	ldrh	r3, [r7, #14]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7ff fdcb 	bl	800c9f4 <ptr_to_mem>
 800ce5e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	2200      	movs	r2, #0
 800ce64:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	89ba      	ldrh	r2, [r7, #12]
 800ce6a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	8afa      	ldrh	r2, [r7, #22]
 800ce70:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	89fa      	ldrh	r2, [r7, #14]
 800ce76:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	881b      	ldrh	r3, [r3, #0]
 800ce7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce80:	d047      	beq.n	800cf12 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	881b      	ldrh	r3, [r3, #0]
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7ff fdb4 	bl	800c9f4 <ptr_to_mem>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	89fb      	ldrh	r3, [r7, #14]
 800ce90:	8053      	strh	r3, [r2, #2]
 800ce92:	e03e      	b.n	800cf12 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ce94:	8bfb      	ldrh	r3, [r7, #30]
 800ce96:	f103 0214 	add.w	r2, r3, #20
 800ce9a:	8abb      	ldrh	r3, [r7, #20]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d838      	bhi.n	800cf12 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cea0:	8afa      	ldrh	r2, [r7, #22]
 800cea2:	8bfb      	ldrh	r3, [r7, #30]
 800cea4:	4413      	add	r3, r2
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	3308      	adds	r3, #8
 800ceaa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ceac:	69bb      	ldr	r3, [r7, #24]
 800ceae:	881b      	ldrh	r3, [r3, #0]
 800ceb0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ceb4:	d106      	bne.n	800cec4 <mem_trim+0x180>
 800ceb6:	4b1b      	ldr	r3, [pc, #108]	; (800cf24 <mem_trim+0x1e0>)
 800ceb8:	f240 3216 	movw	r2, #790	; 0x316
 800cebc:	491d      	ldr	r1, [pc, #116]	; (800cf34 <mem_trim+0x1f0>)
 800cebe:	481b      	ldr	r0, [pc, #108]	; (800cf2c <mem_trim+0x1e8>)
 800cec0:	f00b f92c 	bl	801811c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cec4:	89fb      	ldrh	r3, [r7, #14]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7ff fd94 	bl	800c9f4 <ptr_to_mem>
 800cecc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cece:	4b1a      	ldr	r3, [pc, #104]	; (800cf38 <mem_trim+0x1f4>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	693a      	ldr	r2, [r7, #16]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d202      	bcs.n	800cede <mem_trim+0x19a>
      lfree = mem2;
 800ced8:	4a17      	ldr	r2, [pc, #92]	; (800cf38 <mem_trim+0x1f4>)
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	2200      	movs	r2, #0
 800cee2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	881a      	ldrh	r2, [r3, #0]
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	8afa      	ldrh	r2, [r7, #22]
 800cef0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cef2:	69bb      	ldr	r3, [r7, #24]
 800cef4:	89fa      	ldrh	r2, [r7, #14]
 800cef6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	881b      	ldrh	r3, [r3, #0]
 800cefc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf00:	d007      	beq.n	800cf12 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	881b      	ldrh	r3, [r3, #0]
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7ff fd74 	bl	800c9f4 <ptr_to_mem>
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	89fb      	ldrh	r3, [r7, #14]
 800cf10:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800cf12:	687b      	ldr	r3, [r7, #4]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3720      	adds	r7, #32
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	2000567c 	.word	0x2000567c
 800cf20:	20005680 	.word	0x20005680
 800cf24:	08019014 	.word	0x08019014
 800cf28:	08019184 	.word	0x08019184
 800cf2c:	0801905c 	.word	0x0801905c
 800cf30:	0801919c 	.word	0x0801919c
 800cf34:	080191bc 	.word	0x080191bc
 800cf38:	20005684 	.word	0x20005684

0800cf3c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b088      	sub	sp, #32
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	4603      	mov	r3, r0
 800cf44:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cf46:	88fb      	ldrh	r3, [r7, #6]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d101      	bne.n	800cf50 <mem_malloc+0x14>
    return NULL;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	e0d9      	b.n	800d104 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cf50:	88fb      	ldrh	r3, [r7, #6]
 800cf52:	3303      	adds	r3, #3
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	f023 0303 	bic.w	r3, r3, #3
 800cf5a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cf5c:	8bbb      	ldrh	r3, [r7, #28]
 800cf5e:	2b0b      	cmp	r3, #11
 800cf60:	d801      	bhi.n	800cf66 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cf62:	230c      	movs	r3, #12
 800cf64:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cf66:	8bbb      	ldrh	r3, [r7, #28]
 800cf68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf6c:	d803      	bhi.n	800cf76 <mem_malloc+0x3a>
 800cf6e:	8bba      	ldrh	r2, [r7, #28]
 800cf70:	88fb      	ldrh	r3, [r7, #6]
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d201      	bcs.n	800cf7a <mem_malloc+0x3e>
    return NULL;
 800cf76:	2300      	movs	r3, #0
 800cf78:	e0c4      	b.n	800d104 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cf7a:	4b64      	ldr	r3, [pc, #400]	; (800d10c <mem_malloc+0x1d0>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7ff fd4a 	bl	800ca18 <mem_to_ptr>
 800cf84:	4603      	mov	r3, r0
 800cf86:	83fb      	strh	r3, [r7, #30]
 800cf88:	e0b4      	b.n	800d0f4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cf8a:	8bfb      	ldrh	r3, [r7, #30]
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7ff fd31 	bl	800c9f4 <ptr_to_mem>
 800cf92:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	791b      	ldrb	r3, [r3, #4]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	f040 80a4 	bne.w	800d0e6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	881b      	ldrh	r3, [r3, #0]
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	8bfb      	ldrh	r3, [r7, #30]
 800cfa6:	1ad3      	subs	r3, r2, r3
 800cfa8:	f1a3 0208 	sub.w	r2, r3, #8
 800cfac:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	f0c0 8099 	bcc.w	800d0e6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	881b      	ldrh	r3, [r3, #0]
 800cfb8:	461a      	mov	r2, r3
 800cfba:	8bfb      	ldrh	r3, [r7, #30]
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	f1a3 0208 	sub.w	r2, r3, #8
 800cfc2:	8bbb      	ldrh	r3, [r7, #28]
 800cfc4:	3314      	adds	r3, #20
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d333      	bcc.n	800d032 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cfca:	8bfa      	ldrh	r2, [r7, #30]
 800cfcc:	8bbb      	ldrh	r3, [r7, #28]
 800cfce:	4413      	add	r3, r2
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	3308      	adds	r3, #8
 800cfd4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cfd6:	8a7b      	ldrh	r3, [r7, #18]
 800cfd8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cfdc:	d106      	bne.n	800cfec <mem_malloc+0xb0>
 800cfde:	4b4c      	ldr	r3, [pc, #304]	; (800d110 <mem_malloc+0x1d4>)
 800cfe0:	f240 3287 	movw	r2, #903	; 0x387
 800cfe4:	494b      	ldr	r1, [pc, #300]	; (800d114 <mem_malloc+0x1d8>)
 800cfe6:	484c      	ldr	r0, [pc, #304]	; (800d118 <mem_malloc+0x1dc>)
 800cfe8:	f00b f898 	bl	801811c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cfec:	8a7b      	ldrh	r3, [r7, #18]
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7ff fd00 	bl	800c9f4 <ptr_to_mem>
 800cff4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2200      	movs	r2, #0
 800cffa:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	881a      	ldrh	r2, [r3, #0]
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	8bfa      	ldrh	r2, [r7, #30]
 800d008:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	8a7a      	ldrh	r2, [r7, #18]
 800d00e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	2201      	movs	r2, #1
 800d014:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	881b      	ldrh	r3, [r3, #0]
 800d01a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d01e:	d00b      	beq.n	800d038 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	881b      	ldrh	r3, [r3, #0]
 800d024:	4618      	mov	r0, r3
 800d026:	f7ff fce5 	bl	800c9f4 <ptr_to_mem>
 800d02a:	4602      	mov	r2, r0
 800d02c:	8a7b      	ldrh	r3, [r7, #18]
 800d02e:	8053      	strh	r3, [r2, #2]
 800d030:	e002      	b.n	800d038 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	2201      	movs	r2, #1
 800d036:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d038:	4b34      	ldr	r3, [pc, #208]	; (800d10c <mem_malloc+0x1d0>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	697a      	ldr	r2, [r7, #20]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d127      	bne.n	800d092 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800d042:	4b32      	ldr	r3, [pc, #200]	; (800d10c <mem_malloc+0x1d0>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d048:	e005      	b.n	800d056 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	881b      	ldrh	r3, [r3, #0]
 800d04e:	4618      	mov	r0, r3
 800d050:	f7ff fcd0 	bl	800c9f4 <ptr_to_mem>
 800d054:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	791b      	ldrb	r3, [r3, #4]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d004      	beq.n	800d068 <mem_malloc+0x12c>
 800d05e:	4b2f      	ldr	r3, [pc, #188]	; (800d11c <mem_malloc+0x1e0>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	69ba      	ldr	r2, [r7, #24]
 800d064:	429a      	cmp	r2, r3
 800d066:	d1f0      	bne.n	800d04a <mem_malloc+0x10e>
          }
          lfree = cur;
 800d068:	4a28      	ldr	r2, [pc, #160]	; (800d10c <mem_malloc+0x1d0>)
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d06e:	4b27      	ldr	r3, [pc, #156]	; (800d10c <mem_malloc+0x1d0>)
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	4b2a      	ldr	r3, [pc, #168]	; (800d11c <mem_malloc+0x1e0>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	429a      	cmp	r2, r3
 800d078:	d00b      	beq.n	800d092 <mem_malloc+0x156>
 800d07a:	4b24      	ldr	r3, [pc, #144]	; (800d10c <mem_malloc+0x1d0>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	791b      	ldrb	r3, [r3, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d006      	beq.n	800d092 <mem_malloc+0x156>
 800d084:	4b22      	ldr	r3, [pc, #136]	; (800d110 <mem_malloc+0x1d4>)
 800d086:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d08a:	4925      	ldr	r1, [pc, #148]	; (800d120 <mem_malloc+0x1e4>)
 800d08c:	4822      	ldr	r0, [pc, #136]	; (800d118 <mem_malloc+0x1dc>)
 800d08e:	f00b f845 	bl	801811c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d092:	8bba      	ldrh	r2, [r7, #28]
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	4413      	add	r3, r2
 800d098:	3308      	adds	r3, #8
 800d09a:	4a20      	ldr	r2, [pc, #128]	; (800d11c <mem_malloc+0x1e0>)
 800d09c:	6812      	ldr	r2, [r2, #0]
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d906      	bls.n	800d0b0 <mem_malloc+0x174>
 800d0a2:	4b1b      	ldr	r3, [pc, #108]	; (800d110 <mem_malloc+0x1d4>)
 800d0a4:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d0a8:	491e      	ldr	r1, [pc, #120]	; (800d124 <mem_malloc+0x1e8>)
 800d0aa:	481b      	ldr	r0, [pc, #108]	; (800d118 <mem_malloc+0x1dc>)
 800d0ac:	f00b f836 	bl	801811c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	f003 0303 	and.w	r3, r3, #3
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d006      	beq.n	800d0c8 <mem_malloc+0x18c>
 800d0ba:	4b15      	ldr	r3, [pc, #84]	; (800d110 <mem_malloc+0x1d4>)
 800d0bc:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d0c0:	4919      	ldr	r1, [pc, #100]	; (800d128 <mem_malloc+0x1ec>)
 800d0c2:	4815      	ldr	r0, [pc, #84]	; (800d118 <mem_malloc+0x1dc>)
 800d0c4:	f00b f82a 	bl	801811c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	f003 0303 	and.w	r3, r3, #3
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d006      	beq.n	800d0e0 <mem_malloc+0x1a4>
 800d0d2:	4b0f      	ldr	r3, [pc, #60]	; (800d110 <mem_malloc+0x1d4>)
 800d0d4:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d0d8:	4914      	ldr	r1, [pc, #80]	; (800d12c <mem_malloc+0x1f0>)
 800d0da:	480f      	ldr	r0, [pc, #60]	; (800d118 <mem_malloc+0x1dc>)
 800d0dc:	f00b f81e 	bl	801811c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	3308      	adds	r3, #8
 800d0e4:	e00e      	b.n	800d104 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800d0e6:	8bfb      	ldrh	r3, [r7, #30]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7ff fc83 	bl	800c9f4 <ptr_to_mem>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	881b      	ldrh	r3, [r3, #0]
 800d0f2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d0f4:	8bfa      	ldrh	r2, [r7, #30]
 800d0f6:	8bbb      	ldrh	r3, [r7, #28]
 800d0f8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	f4ff af44 	bcc.w	800cf8a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d102:	2300      	movs	r3, #0
}
 800d104:	4618      	mov	r0, r3
 800d106:	3720      	adds	r7, #32
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	20005684 	.word	0x20005684
 800d110:	08019014 	.word	0x08019014
 800d114:	080191bc 	.word	0x080191bc
 800d118:	0801905c 	.word	0x0801905c
 800d11c:	20005680 	.word	0x20005680
 800d120:	080191d0 	.word	0x080191d0
 800d124:	080191ec 	.word	0x080191ec
 800d128:	0801921c 	.word	0x0801921c
 800d12c:	0801924c 	.word	0x0801924c

0800d130 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d130:	b480      	push	{r7}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	2200      	movs	r2, #0
 800d13e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	3303      	adds	r3, #3
 800d146:	f023 0303 	bic.w	r3, r3, #3
 800d14a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d14c:	2300      	movs	r3, #0
 800d14e:	60fb      	str	r3, [r7, #12]
 800d150:	e011      	b.n	800d176 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	689b      	ldr	r3, [r3, #8]
 800d160:	68ba      	ldr	r2, [r7, #8]
 800d162:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	881b      	ldrh	r3, [r3, #0]
 800d168:	461a      	mov	r2, r3
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	4413      	add	r3, r2
 800d16e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	3301      	adds	r3, #1
 800d174:	60fb      	str	r3, [r7, #12]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	885b      	ldrh	r3, [r3, #2]
 800d17a:	461a      	mov	r2, r3
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	4293      	cmp	r3, r2
 800d180:	dbe7      	blt.n	800d152 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d182:	bf00      	nop
 800d184:	bf00      	nop
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d196:	2300      	movs	r3, #0
 800d198:	80fb      	strh	r3, [r7, #6]
 800d19a:	e009      	b.n	800d1b0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d19c:	88fb      	ldrh	r3, [r7, #6]
 800d19e:	4a08      	ldr	r2, [pc, #32]	; (800d1c0 <memp_init+0x30>)
 800d1a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7ff ffc3 	bl	800d130 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d1aa:	88fb      	ldrh	r3, [r7, #6]
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	80fb      	strh	r3, [r7, #6]
 800d1b0:	88fb      	ldrh	r3, [r7, #6]
 800d1b2:	2b08      	cmp	r3, #8
 800d1b4:	d9f2      	bls.n	800d19c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d1b6:	bf00      	nop
 800d1b8:	bf00      	nop
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	0801bab0 	.word	0x0801bab0

0800d1c4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	689b      	ldr	r3, [r3, #8]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d012      	beq.n	800d200 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	68fa      	ldr	r2, [r7, #12]
 800d1e0:	6812      	ldr	r2, [r2, #0]
 800d1e2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f003 0303 	and.w	r3, r3, #3
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d006      	beq.n	800d1fc <do_memp_malloc_pool+0x38>
 800d1ee:	4b07      	ldr	r3, [pc, #28]	; (800d20c <do_memp_malloc_pool+0x48>)
 800d1f0:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d1f4:	4906      	ldr	r1, [pc, #24]	; (800d210 <do_memp_malloc_pool+0x4c>)
 800d1f6:	4807      	ldr	r0, [pc, #28]	; (800d214 <do_memp_malloc_pool+0x50>)
 800d1f8:	f00a ff90 	bl	801811c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	e000      	b.n	800d202 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d200:	2300      	movs	r3, #0
}
 800d202:	4618      	mov	r0, r3
 800d204:	3710      	adds	r7, #16
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	08019270 	.word	0x08019270
 800d210:	080192a0 	.word	0x080192a0
 800d214:	080192c4 	.word	0x080192c4

0800d218 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d106      	bne.n	800d234 <memp_malloc_pool+0x1c>
 800d226:	4b0a      	ldr	r3, [pc, #40]	; (800d250 <memp_malloc_pool+0x38>)
 800d228:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800d22c:	4909      	ldr	r1, [pc, #36]	; (800d254 <memp_malloc_pool+0x3c>)
 800d22e:	480a      	ldr	r0, [pc, #40]	; (800d258 <memp_malloc_pool+0x40>)
 800d230:	f00a ff74 	bl	801811c <iprintf>
  if (desc == NULL) {
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d101      	bne.n	800d23e <memp_malloc_pool+0x26>
    return NULL;
 800d23a:	2300      	movs	r3, #0
 800d23c:	e003      	b.n	800d246 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7ff ffc0 	bl	800d1c4 <do_memp_malloc_pool>
 800d244:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d246:	4618      	mov	r0, r3
 800d248:	3708      	adds	r7, #8
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop
 800d250:	08019270 	.word	0x08019270
 800d254:	080192ec 	.word	0x080192ec
 800d258:	080192c4 	.word	0x080192c4

0800d25c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	4603      	mov	r3, r0
 800d264:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d266:	79fb      	ldrb	r3, [r7, #7]
 800d268:	2b08      	cmp	r3, #8
 800d26a:	d908      	bls.n	800d27e <memp_malloc+0x22>
 800d26c:	4b0a      	ldr	r3, [pc, #40]	; (800d298 <memp_malloc+0x3c>)
 800d26e:	f240 1257 	movw	r2, #343	; 0x157
 800d272:	490a      	ldr	r1, [pc, #40]	; (800d29c <memp_malloc+0x40>)
 800d274:	480a      	ldr	r0, [pc, #40]	; (800d2a0 <memp_malloc+0x44>)
 800d276:	f00a ff51 	bl	801811c <iprintf>
 800d27a:	2300      	movs	r3, #0
 800d27c:	e008      	b.n	800d290 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d27e:	79fb      	ldrb	r3, [r7, #7]
 800d280:	4a08      	ldr	r2, [pc, #32]	; (800d2a4 <memp_malloc+0x48>)
 800d282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d286:	4618      	mov	r0, r3
 800d288:	f7ff ff9c 	bl	800d1c4 <do_memp_malloc_pool>
 800d28c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d28e:	68fb      	ldr	r3, [r7, #12]
}
 800d290:	4618      	mov	r0, r3
 800d292:	3710      	adds	r7, #16
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	08019270 	.word	0x08019270
 800d29c:	08019300 	.word	0x08019300
 800d2a0:	080192c4 	.word	0x080192c4
 800d2a4:	0801bab0 	.word	0x0801bab0

0800d2a8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b084      	sub	sp, #16
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	f003 0303 	and.w	r3, r3, #3
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d006      	beq.n	800d2ca <do_memp_free_pool+0x22>
 800d2bc:	4b0a      	ldr	r3, [pc, #40]	; (800d2e8 <do_memp_free_pool+0x40>)
 800d2be:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d2c2:	490a      	ldr	r1, [pc, #40]	; (800d2ec <do_memp_free_pool+0x44>)
 800d2c4:	480a      	ldr	r0, [pc, #40]	; (800d2f0 <do_memp_free_pool+0x48>)
 800d2c6:	f00a ff29 	bl	801811c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	689b      	ldr	r3, [r3, #8]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	68fa      	ldr	r2, [r7, #12]
 800d2de:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800d2e0:	bf00      	nop
 800d2e2:	3710      	adds	r7, #16
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	08019270 	.word	0x08019270
 800d2ec:	08019320 	.word	0x08019320
 800d2f0:	080192c4 	.word	0x080192c4

0800d2f4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d106      	bne.n	800d312 <memp_free_pool+0x1e>
 800d304:	4b0a      	ldr	r3, [pc, #40]	; (800d330 <memp_free_pool+0x3c>)
 800d306:	f240 1295 	movw	r2, #405	; 0x195
 800d30a:	490a      	ldr	r1, [pc, #40]	; (800d334 <memp_free_pool+0x40>)
 800d30c:	480a      	ldr	r0, [pc, #40]	; (800d338 <memp_free_pool+0x44>)
 800d30e:	f00a ff05 	bl	801811c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d007      	beq.n	800d328 <memp_free_pool+0x34>
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d004      	beq.n	800d328 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d31e:	6839      	ldr	r1, [r7, #0]
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f7ff ffc1 	bl	800d2a8 <do_memp_free_pool>
 800d326:	e000      	b.n	800d32a <memp_free_pool+0x36>
    return;
 800d328:	bf00      	nop
}
 800d32a:	3708      	adds	r7, #8
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	08019270 	.word	0x08019270
 800d334:	080192ec 	.word	0x080192ec
 800d338:	080192c4 	.word	0x080192c4

0800d33c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	4603      	mov	r3, r0
 800d344:	6039      	str	r1, [r7, #0]
 800d346:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d348:	79fb      	ldrb	r3, [r7, #7]
 800d34a:	2b08      	cmp	r3, #8
 800d34c:	d907      	bls.n	800d35e <memp_free+0x22>
 800d34e:	4b0c      	ldr	r3, [pc, #48]	; (800d380 <memp_free+0x44>)
 800d350:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d354:	490b      	ldr	r1, [pc, #44]	; (800d384 <memp_free+0x48>)
 800d356:	480c      	ldr	r0, [pc, #48]	; (800d388 <memp_free+0x4c>)
 800d358:	f00a fee0 	bl	801811c <iprintf>
 800d35c:	e00c      	b.n	800d378 <memp_free+0x3c>

  if (mem == NULL) {
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d008      	beq.n	800d376 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d364:	79fb      	ldrb	r3, [r7, #7]
 800d366:	4a09      	ldr	r2, [pc, #36]	; (800d38c <memp_free+0x50>)
 800d368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d36c:	6839      	ldr	r1, [r7, #0]
 800d36e:	4618      	mov	r0, r3
 800d370:	f7ff ff9a 	bl	800d2a8 <do_memp_free_pool>
 800d374:	e000      	b.n	800d378 <memp_free+0x3c>
    return;
 800d376:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d378:	3708      	adds	r7, #8
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	08019270 	.word	0x08019270
 800d384:	08019340 	.word	0x08019340
 800d388:	080192c4 	.word	0x080192c4
 800d38c:	0801bab0 	.word	0x0801bab0

0800d390 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d390:	b480      	push	{r7}
 800d392:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d394:	bf00      	nop
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr
	...

0800d3a0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b086      	sub	sp, #24
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	60f8      	str	r0, [r7, #12]
 800d3a8:	60b9      	str	r1, [r7, #8]
 800d3aa:	607a      	str	r2, [r7, #4]
 800d3ac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d108      	bne.n	800d3c6 <netif_add+0x26>
 800d3b4:	4b57      	ldr	r3, [pc, #348]	; (800d514 <netif_add+0x174>)
 800d3b6:	f240 1227 	movw	r2, #295	; 0x127
 800d3ba:	4957      	ldr	r1, [pc, #348]	; (800d518 <netif_add+0x178>)
 800d3bc:	4857      	ldr	r0, [pc, #348]	; (800d51c <netif_add+0x17c>)
 800d3be:	f00a fead 	bl	801811c <iprintf>
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	e0a2      	b.n	800d50c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d108      	bne.n	800d3de <netif_add+0x3e>
 800d3cc:	4b51      	ldr	r3, [pc, #324]	; (800d514 <netif_add+0x174>)
 800d3ce:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d3d2:	4953      	ldr	r1, [pc, #332]	; (800d520 <netif_add+0x180>)
 800d3d4:	4851      	ldr	r0, [pc, #324]	; (800d51c <netif_add+0x17c>)
 800d3d6:	f00a fea1 	bl	801811c <iprintf>
 800d3da:	2300      	movs	r3, #0
 800d3dc:	e096      	b.n	800d50c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d101      	bne.n	800d3e8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d3e4:	4b4f      	ldr	r3, [pc, #316]	; (800d524 <netif_add+0x184>)
 800d3e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d101      	bne.n	800d3f2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d3ee:	4b4d      	ldr	r3, [pc, #308]	; (800d524 <netif_add+0x184>)
 800d3f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d101      	bne.n	800d3fc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d3f8:	4b4a      	ldr	r3, [pc, #296]	; (800d524 <netif_add+0x184>)
 800d3fa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2200      	movs	r2, #0
 800d400:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2200      	movs	r2, #0
 800d406:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2200      	movs	r2, #0
 800d40c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	4a45      	ldr	r2, [pc, #276]	; (800d528 <netif_add+0x188>)
 800d412:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2200      	movs	r2, #0
 800d418:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2200      	movs	r2, #0
 800d41e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2200      	movs	r2, #0
 800d426:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6a3a      	ldr	r2, [r7, #32]
 800d42c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d42e:	4b3f      	ldr	r3, [pc, #252]	; (800d52c <netif_add+0x18c>)
 800d430:	781a      	ldrb	r2, [r3, #0]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d43c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	68b9      	ldr	r1, [r7, #8]
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f000 f913 	bl	800d670 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44c:	68f8      	ldr	r0, [r7, #12]
 800d44e:	4798      	blx	r3
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d001      	beq.n	800d45a <netif_add+0xba>
    return NULL;
 800d456:	2300      	movs	r3, #0
 800d458:	e058      	b.n	800d50c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d460:	2bff      	cmp	r3, #255	; 0xff
 800d462:	d103      	bne.n	800d46c <netif_add+0xcc>
        netif->num = 0;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2200      	movs	r2, #0
 800d468:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d46c:	2300      	movs	r3, #0
 800d46e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d470:	4b2f      	ldr	r3, [pc, #188]	; (800d530 <netif_add+0x190>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	617b      	str	r3, [r7, #20]
 800d476:	e02b      	b.n	800d4d0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d478:	697a      	ldr	r2, [r7, #20]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d106      	bne.n	800d48e <netif_add+0xee>
 800d480:	4b24      	ldr	r3, [pc, #144]	; (800d514 <netif_add+0x174>)
 800d482:	f240 128b 	movw	r2, #395	; 0x18b
 800d486:	492b      	ldr	r1, [pc, #172]	; (800d534 <netif_add+0x194>)
 800d488:	4824      	ldr	r0, [pc, #144]	; (800d51c <netif_add+0x17c>)
 800d48a:	f00a fe47 	bl	801811c <iprintf>
        num_netifs++;
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	3301      	adds	r3, #1
 800d492:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	2bff      	cmp	r3, #255	; 0xff
 800d498:	dd06      	ble.n	800d4a8 <netif_add+0x108>
 800d49a:	4b1e      	ldr	r3, [pc, #120]	; (800d514 <netif_add+0x174>)
 800d49c:	f240 128d 	movw	r2, #397	; 0x18d
 800d4a0:	4925      	ldr	r1, [pc, #148]	; (800d538 <netif_add+0x198>)
 800d4a2:	481e      	ldr	r0, [pc, #120]	; (800d51c <netif_add+0x17c>)
 800d4a4:	f00a fe3a 	bl	801811c <iprintf>
        if (netif2->num == netif->num) {
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d108      	bne.n	800d4ca <netif_add+0x12a>
          netif->num++;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4be:	3301      	adds	r3, #1
 800d4c0:	b2da      	uxtb	r2, r3
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d4c8:	e005      	b.n	800d4d6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	617b      	str	r3, [r7, #20]
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1d0      	bne.n	800d478 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d1be      	bne.n	800d45a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4e2:	2bfe      	cmp	r3, #254	; 0xfe
 800d4e4:	d103      	bne.n	800d4ee <netif_add+0x14e>
    netif_num = 0;
 800d4e6:	4b11      	ldr	r3, [pc, #68]	; (800d52c <netif_add+0x18c>)
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	701a      	strb	r2, [r3, #0]
 800d4ec:	e006      	b.n	800d4fc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	b2da      	uxtb	r2, r3
 800d4f8:	4b0c      	ldr	r3, [pc, #48]	; (800d52c <netif_add+0x18c>)
 800d4fa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d4fc:	4b0c      	ldr	r3, [pc, #48]	; (800d530 <netif_add+0x190>)
 800d4fe:	681a      	ldr	r2, [r3, #0]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d504:	4a0a      	ldr	r2, [pc, #40]	; (800d530 <netif_add+0x190>)
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d50a:	68fb      	ldr	r3, [r7, #12]
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3718      	adds	r7, #24
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	0801935c 	.word	0x0801935c
 800d518:	080193f0 	.word	0x080193f0
 800d51c:	080193ac 	.word	0x080193ac
 800d520:	0801940c 	.word	0x0801940c
 800d524:	0801bb14 	.word	0x0801bb14
 800d528:	0800d94b 	.word	0x0800d94b
 800d52c:	2000813c 	.word	0x2000813c
 800d530:	20008134 	.word	0x20008134
 800d534:	08019430 	.word	0x08019430
 800d538:	08019444 	.word	0x08019444

0800d53c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d546:	6839      	ldr	r1, [r7, #0]
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f002 fd51 	bl	800fff0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d54e:	6839      	ldr	r1, [r7, #0]
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f007 fa8b 	bl	8014a6c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d556:	bf00      	nop
 800d558:	3708      	adds	r7, #8
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
	...

0800d560 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b086      	sub	sp, #24
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d106      	bne.n	800d580 <netif_do_set_ipaddr+0x20>
 800d572:	4b1d      	ldr	r3, [pc, #116]	; (800d5e8 <netif_do_set_ipaddr+0x88>)
 800d574:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d578:	491c      	ldr	r1, [pc, #112]	; (800d5ec <netif_do_set_ipaddr+0x8c>)
 800d57a:	481d      	ldr	r0, [pc, #116]	; (800d5f0 <netif_do_set_ipaddr+0x90>)
 800d57c:	f00a fdce 	bl	801811c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d106      	bne.n	800d594 <netif_do_set_ipaddr+0x34>
 800d586:	4b18      	ldr	r3, [pc, #96]	; (800d5e8 <netif_do_set_ipaddr+0x88>)
 800d588:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d58c:	4917      	ldr	r1, [pc, #92]	; (800d5ec <netif_do_set_ipaddr+0x8c>)
 800d58e:	4818      	ldr	r0, [pc, #96]	; (800d5f0 <netif_do_set_ipaddr+0x90>)
 800d590:	f00a fdc4 	bl	801811c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	3304      	adds	r3, #4
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d01c      	beq.n	800d5dc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	3304      	adds	r3, #4
 800d5ac:	681a      	ldr	r2, [r3, #0]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d5b2:	f107 0314 	add.w	r3, r7, #20
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f7ff ffbf 	bl	800d53c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d002      	beq.n	800d5ca <netif_do_set_ipaddr+0x6a>
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	e000      	b.n	800d5cc <netif_do_set_ipaddr+0x6c>
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	68fa      	ldr	r2, [r7, #12]
 800d5ce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d5d0:	2101      	movs	r1, #1
 800d5d2:	68f8      	ldr	r0, [r7, #12]
 800d5d4:	f000 f8d2 	bl	800d77c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d5d8:	2301      	movs	r3, #1
 800d5da:	e000      	b.n	800d5de <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3718      	adds	r7, #24
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	0801935c 	.word	0x0801935c
 800d5ec:	08019474 	.word	0x08019474
 800d5f0:	080193ac 	.word	0x080193ac

0800d5f4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b085      	sub	sp, #20
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	60b9      	str	r1, [r7, #8]
 800d5fe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	681a      	ldr	r2, [r3, #0]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	3308      	adds	r3, #8
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d00a      	beq.n	800d624 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d002      	beq.n	800d61a <netif_do_set_netmask+0x26>
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	e000      	b.n	800d61c <netif_do_set_netmask+0x28>
 800d61a:	2300      	movs	r3, #0
 800d61c:	68fa      	ldr	r2, [r7, #12]
 800d61e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d620:	2301      	movs	r3, #1
 800d622:	e000      	b.n	800d626 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d624:	2300      	movs	r3, #0
}
 800d626:	4618      	mov	r0, r3
 800d628:	3714      	adds	r7, #20
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr

0800d632 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d632:	b480      	push	{r7}
 800d634:	b085      	sub	sp, #20
 800d636:	af00      	add	r7, sp, #0
 800d638:	60f8      	str	r0, [r7, #12]
 800d63a:	60b9      	str	r1, [r7, #8]
 800d63c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	330c      	adds	r3, #12
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	429a      	cmp	r2, r3
 800d64a:	d00a      	beq.n	800d662 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d002      	beq.n	800d658 <netif_do_set_gw+0x26>
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	e000      	b.n	800d65a <netif_do_set_gw+0x28>
 800d658:	2300      	movs	r3, #0
 800d65a:	68fa      	ldr	r2, [r7, #12]
 800d65c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d65e:	2301      	movs	r3, #1
 800d660:	e000      	b.n	800d664 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d662:	2300      	movs	r3, #0
}
 800d664:	4618      	mov	r0, r3
 800d666:	3714      	adds	r7, #20
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b088      	sub	sp, #32
 800d674:	af00      	add	r7, sp, #0
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	607a      	str	r2, [r7, #4]
 800d67c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d67e:	2300      	movs	r3, #0
 800d680:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d682:	2300      	movs	r3, #0
 800d684:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d101      	bne.n	800d690 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d68c:	4b1c      	ldr	r3, [pc, #112]	; (800d700 <netif_set_addr+0x90>)
 800d68e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d101      	bne.n	800d69a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d696:	4b1a      	ldr	r3, [pc, #104]	; (800d700 <netif_set_addr+0x90>)
 800d698:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d101      	bne.n	800d6a4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d6a0:	4b17      	ldr	r3, [pc, #92]	; (800d700 <netif_set_addr+0x90>)
 800d6a2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d003      	beq.n	800d6b2 <netif_set_addr+0x42>
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d101      	bne.n	800d6b6 <netif_set_addr+0x46>
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e000      	b.n	800d6b8 <netif_set_addr+0x48>
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d006      	beq.n	800d6ce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d6c0:	f107 0310 	add.w	r3, r7, #16
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	68b9      	ldr	r1, [r7, #8]
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f7ff ff49 	bl	800d560 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d6ce:	69fa      	ldr	r2, [r7, #28]
 800d6d0:	6879      	ldr	r1, [r7, #4]
 800d6d2:	68f8      	ldr	r0, [r7, #12]
 800d6d4:	f7ff ff8e 	bl	800d5f4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d6d8:	69ba      	ldr	r2, [r7, #24]
 800d6da:	6839      	ldr	r1, [r7, #0]
 800d6dc:	68f8      	ldr	r0, [r7, #12]
 800d6de:	f7ff ffa8 	bl	800d632 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d106      	bne.n	800d6f6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d6e8:	f107 0310 	add.w	r3, r7, #16
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	68b9      	ldr	r1, [r7, #8]
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	f7ff ff35 	bl	800d560 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d6f6:	bf00      	nop
 800d6f8:	3720      	adds	r7, #32
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	0801bb14 	.word	0x0801bb14

0800d704 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d704:	b480      	push	{r7}
 800d706:	b083      	sub	sp, #12
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d70c:	4a04      	ldr	r2, [pc, #16]	; (800d720 <netif_set_default+0x1c>)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d712:	bf00      	nop
 800d714:	370c      	adds	r7, #12
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop
 800d720:	20008138 	.word	0x20008138

0800d724 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b082      	sub	sp, #8
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d107      	bne.n	800d742 <netif_set_up+0x1e>
 800d732:	4b0f      	ldr	r3, [pc, #60]	; (800d770 <netif_set_up+0x4c>)
 800d734:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d738:	490e      	ldr	r1, [pc, #56]	; (800d774 <netif_set_up+0x50>)
 800d73a:	480f      	ldr	r0, [pc, #60]	; (800d778 <netif_set_up+0x54>)
 800d73c:	f00a fcee 	bl	801811c <iprintf>
 800d740:	e013      	b.n	800d76a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d748:	f003 0301 	and.w	r3, r3, #1
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d10c      	bne.n	800d76a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d756:	f043 0301 	orr.w	r3, r3, #1
 800d75a:	b2da      	uxtb	r2, r3
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d762:	2103      	movs	r1, #3
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f000 f809 	bl	800d77c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d76a:	3708      	adds	r7, #8
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	0801935c 	.word	0x0801935c
 800d774:	080194e4 	.word	0x080194e4
 800d778:	080193ac 	.word	0x080193ac

0800d77c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	460b      	mov	r3, r1
 800d786:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d106      	bne.n	800d79c <netif_issue_reports+0x20>
 800d78e:	4b18      	ldr	r3, [pc, #96]	; (800d7f0 <netif_issue_reports+0x74>)
 800d790:	f240 326d 	movw	r2, #877	; 0x36d
 800d794:	4917      	ldr	r1, [pc, #92]	; (800d7f4 <netif_issue_reports+0x78>)
 800d796:	4818      	ldr	r0, [pc, #96]	; (800d7f8 <netif_issue_reports+0x7c>)
 800d798:	f00a fcc0 	bl	801811c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7a2:	f003 0304 	and.w	r3, r3, #4
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d01e      	beq.n	800d7e8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7b0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d017      	beq.n	800d7e8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d7b8:	78fb      	ldrb	r3, [r7, #3]
 800d7ba:	f003 0301 	and.w	r3, r3, #1
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d013      	beq.n	800d7ea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d00e      	beq.n	800d7ea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7d2:	f003 0308 	and.w	r3, r3, #8
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d007      	beq.n	800d7ea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	3304      	adds	r3, #4
 800d7de:	4619      	mov	r1, r3
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f008 f8ad 	bl	8015940 <etharp_request>
 800d7e6:	e000      	b.n	800d7ea <netif_issue_reports+0x6e>
    return;
 800d7e8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d7ea:	3708      	adds	r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	0801935c 	.word	0x0801935c
 800d7f4:	08019500 	.word	0x08019500
 800d7f8:	080193ac 	.word	0x080193ac

0800d7fc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d107      	bne.n	800d81a <netif_set_down+0x1e>
 800d80a:	4b12      	ldr	r3, [pc, #72]	; (800d854 <netif_set_down+0x58>)
 800d80c:	f240 329b 	movw	r2, #923	; 0x39b
 800d810:	4911      	ldr	r1, [pc, #68]	; (800d858 <netif_set_down+0x5c>)
 800d812:	4812      	ldr	r0, [pc, #72]	; (800d85c <netif_set_down+0x60>)
 800d814:	f00a fc82 	bl	801811c <iprintf>
 800d818:	e019      	b.n	800d84e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d820:	f003 0301 	and.w	r3, r3, #1
 800d824:	2b00      	cmp	r3, #0
 800d826:	d012      	beq.n	800d84e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d82e:	f023 0301 	bic.w	r3, r3, #1
 800d832:	b2da      	uxtb	r2, r3
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d840:	f003 0308 	and.w	r3, r3, #8
 800d844:	2b00      	cmp	r3, #0
 800d846:	d002      	beq.n	800d84e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f007 fc37 	bl	80150bc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	0801935c 	.word	0x0801935c
 800d858:	08019524 	.word	0x08019524
 800d85c:	080193ac 	.word	0x080193ac

0800d860 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d107      	bne.n	800d87e <netif_set_link_up+0x1e>
 800d86e:	4b13      	ldr	r3, [pc, #76]	; (800d8bc <netif_set_link_up+0x5c>)
 800d870:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d874:	4912      	ldr	r1, [pc, #72]	; (800d8c0 <netif_set_link_up+0x60>)
 800d876:	4813      	ldr	r0, [pc, #76]	; (800d8c4 <netif_set_link_up+0x64>)
 800d878:	f00a fc50 	bl	801811c <iprintf>
 800d87c:	e01b      	b.n	800d8b6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d884:	f003 0304 	and.w	r3, r3, #4
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d114      	bne.n	800d8b6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d892:	f043 0304 	orr.w	r3, r3, #4
 800d896:	b2da      	uxtb	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d89e:	2103      	movs	r1, #3
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f7ff ff6b 	bl	800d77c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	69db      	ldr	r3, [r3, #28]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d003      	beq.n	800d8b6 <netif_set_link_up+0x56>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	69db      	ldr	r3, [r3, #28]
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d8b6:	3708      	adds	r7, #8
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	0801935c 	.word	0x0801935c
 800d8c0:	08019544 	.word	0x08019544
 800d8c4:	080193ac 	.word	0x080193ac

0800d8c8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d107      	bne.n	800d8e6 <netif_set_link_down+0x1e>
 800d8d6:	4b11      	ldr	r3, [pc, #68]	; (800d91c <netif_set_link_down+0x54>)
 800d8d8:	f240 4206 	movw	r2, #1030	; 0x406
 800d8dc:	4910      	ldr	r1, [pc, #64]	; (800d920 <netif_set_link_down+0x58>)
 800d8de:	4811      	ldr	r0, [pc, #68]	; (800d924 <netif_set_link_down+0x5c>)
 800d8e0:	f00a fc1c 	bl	801811c <iprintf>
 800d8e4:	e017      	b.n	800d916 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8ec:	f003 0304 	and.w	r3, r3, #4
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d010      	beq.n	800d916 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8fa:	f023 0304 	bic.w	r3, r3, #4
 800d8fe:	b2da      	uxtb	r2, r3
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	69db      	ldr	r3, [r3, #28]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d003      	beq.n	800d916 <netif_set_link_down+0x4e>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	69db      	ldr	r3, [r3, #28]
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d916:	3708      	adds	r7, #8
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	0801935c 	.word	0x0801935c
 800d920:	08019568 	.word	0x08019568
 800d924:	080193ac 	.word	0x080193ac

0800d928 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d928:	b480      	push	{r7}
 800d92a:	b083      	sub	sp, #12
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d002      	beq.n	800d93e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	683a      	ldr	r2, [r7, #0]
 800d93c:	61da      	str	r2, [r3, #28]
  }
}
 800d93e:	bf00      	nop
 800d940:	370c      	adds	r7, #12
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr

0800d94a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d94a:	b480      	push	{r7}
 800d94c:	b085      	sub	sp, #20
 800d94e:	af00      	add	r7, sp, #0
 800d950:	60f8      	str	r0, [r7, #12]
 800d952:	60b9      	str	r1, [r7, #8]
 800d954:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d956:	f06f 030b 	mvn.w	r3, #11
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3714      	adds	r7, #20
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr
	...

0800d968 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d968:	b480      	push	{r7}
 800d96a:	b085      	sub	sp, #20
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	4603      	mov	r3, r0
 800d970:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d972:	79fb      	ldrb	r3, [r7, #7]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d013      	beq.n	800d9a0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d978:	4b0d      	ldr	r3, [pc, #52]	; (800d9b0 <netif_get_by_index+0x48>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	60fb      	str	r3, [r7, #12]
 800d97e:	e00c      	b.n	800d99a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d986:	3301      	adds	r3, #1
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	79fa      	ldrb	r2, [r7, #7]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d101      	bne.n	800d994 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	e006      	b.n	800d9a2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	60fb      	str	r3, [r7, #12]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d1ef      	bne.n	800d980 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d9a0:	2300      	movs	r3, #0
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3714      	adds	r7, #20
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop
 800d9b0:	20008134 	.word	0x20008134

0800d9b4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d9ba:	4b0c      	ldr	r3, [pc, #48]	; (800d9ec <pbuf_free_ooseq+0x38>)
 800d9bc:	2200      	movs	r2, #0
 800d9be:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d9c0:	4b0b      	ldr	r3, [pc, #44]	; (800d9f0 <pbuf_free_ooseq+0x3c>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	607b      	str	r3, [r7, #4]
 800d9c6:	e00a      	b.n	800d9de <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d003      	beq.n	800d9d8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f002 fb4b 	bl	801006c <tcp_free_ooseq>
      return;
 800d9d6:	e005      	b.n	800d9e4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	607b      	str	r3, [r7, #4]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d1f1      	bne.n	800d9c8 <pbuf_free_ooseq+0x14>
    }
  }
}
 800d9e4:	3708      	adds	r7, #8
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	2000813d 	.word	0x2000813d
 800d9f0:	2000814c 	.word	0x2000814c

0800d9f4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d9f8:	4b03      	ldr	r3, [pc, #12]	; (800da08 <pbuf_pool_is_empty+0x14>)
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d9fe:	bf00      	nop
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr
 800da08:	2000813d 	.word	0x2000813d

0800da0c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b085      	sub	sp, #20
 800da10:	af00      	add	r7, sp, #0
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	4611      	mov	r1, r2
 800da18:	461a      	mov	r2, r3
 800da1a:	460b      	mov	r3, r1
 800da1c:	80fb      	strh	r3, [r7, #6]
 800da1e:	4613      	mov	r3, r2
 800da20:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2200      	movs	r2, #0
 800da26:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	68ba      	ldr	r2, [r7, #8]
 800da2c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	88fa      	ldrh	r2, [r7, #6]
 800da32:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	88ba      	ldrh	r2, [r7, #4]
 800da38:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800da3a:	8b3b      	ldrh	r3, [r7, #24]
 800da3c:	b2da      	uxtb	r2, r3
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	7f3a      	ldrb	r2, [r7, #28]
 800da46:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2201      	movs	r2, #1
 800da4c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2200      	movs	r2, #0
 800da52:	73da      	strb	r2, [r3, #15]
}
 800da54:	bf00      	nop
 800da56:	3714      	adds	r7, #20
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr

0800da60 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b08c      	sub	sp, #48	; 0x30
 800da64:	af02      	add	r7, sp, #8
 800da66:	4603      	mov	r3, r0
 800da68:	71fb      	strb	r3, [r7, #7]
 800da6a:	460b      	mov	r3, r1
 800da6c:	80bb      	strh	r3, [r7, #4]
 800da6e:	4613      	mov	r3, r2
 800da70:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800da72:	79fb      	ldrb	r3, [r7, #7]
 800da74:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800da76:	887b      	ldrh	r3, [r7, #2]
 800da78:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800da7c:	d07f      	beq.n	800db7e <pbuf_alloc+0x11e>
 800da7e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800da82:	f300 80c8 	bgt.w	800dc16 <pbuf_alloc+0x1b6>
 800da86:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800da8a:	d010      	beq.n	800daae <pbuf_alloc+0x4e>
 800da8c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800da90:	f300 80c1 	bgt.w	800dc16 <pbuf_alloc+0x1b6>
 800da94:	2b01      	cmp	r3, #1
 800da96:	d002      	beq.n	800da9e <pbuf_alloc+0x3e>
 800da98:	2b41      	cmp	r3, #65	; 0x41
 800da9a:	f040 80bc 	bne.w	800dc16 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800da9e:	887a      	ldrh	r2, [r7, #2]
 800daa0:	88bb      	ldrh	r3, [r7, #4]
 800daa2:	4619      	mov	r1, r3
 800daa4:	2000      	movs	r0, #0
 800daa6:	f000 f8d1 	bl	800dc4c <pbuf_alloc_reference>
 800daaa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800daac:	e0bd      	b.n	800dc2a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800daae:	2300      	movs	r3, #0
 800dab0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800dab2:	2300      	movs	r3, #0
 800dab4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800dab6:	88bb      	ldrh	r3, [r7, #4]
 800dab8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800daba:	2008      	movs	r0, #8
 800dabc:	f7ff fbce 	bl	800d25c <memp_malloc>
 800dac0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d109      	bne.n	800dadc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800dac8:	f7ff ff94 	bl	800d9f4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800dacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d002      	beq.n	800dad8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800dad2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dad4:	f000 faa8 	bl	800e028 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800dad8:	2300      	movs	r3, #0
 800dada:	e0a7      	b.n	800dc2c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dadc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dade:	3303      	adds	r3, #3
 800dae0:	b29b      	uxth	r3, r3
 800dae2:	f023 0303 	bic.w	r3, r3, #3
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 800daec:	b29b      	uxth	r3, r3
 800daee:	8b7a      	ldrh	r2, [r7, #26]
 800daf0:	4293      	cmp	r3, r2
 800daf2:	bf28      	it	cs
 800daf4:	4613      	movcs	r3, r2
 800daf6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800daf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dafa:	3310      	adds	r3, #16
 800dafc:	693a      	ldr	r2, [r7, #16]
 800dafe:	4413      	add	r3, r2
 800db00:	3303      	adds	r3, #3
 800db02:	f023 0303 	bic.w	r3, r3, #3
 800db06:	4618      	mov	r0, r3
 800db08:	89f9      	ldrh	r1, [r7, #14]
 800db0a:	8b7a      	ldrh	r2, [r7, #26]
 800db0c:	2300      	movs	r3, #0
 800db0e:	9301      	str	r3, [sp, #4]
 800db10:	887b      	ldrh	r3, [r7, #2]
 800db12:	9300      	str	r3, [sp, #0]
 800db14:	460b      	mov	r3, r1
 800db16:	4601      	mov	r1, r0
 800db18:	6938      	ldr	r0, [r7, #16]
 800db1a:	f7ff ff77 	bl	800da0c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	f003 0303 	and.w	r3, r3, #3
 800db26:	2b00      	cmp	r3, #0
 800db28:	d006      	beq.n	800db38 <pbuf_alloc+0xd8>
 800db2a:	4b42      	ldr	r3, [pc, #264]	; (800dc34 <pbuf_alloc+0x1d4>)
 800db2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db30:	4941      	ldr	r1, [pc, #260]	; (800dc38 <pbuf_alloc+0x1d8>)
 800db32:	4842      	ldr	r0, [pc, #264]	; (800dc3c <pbuf_alloc+0x1dc>)
 800db34:	f00a faf2 	bl	801811c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800db38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db3a:	3303      	adds	r3, #3
 800db3c:	f023 0303 	bic.w	r3, r3, #3
 800db40:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800db44:	d106      	bne.n	800db54 <pbuf_alloc+0xf4>
 800db46:	4b3b      	ldr	r3, [pc, #236]	; (800dc34 <pbuf_alloc+0x1d4>)
 800db48:	f44f 7281 	mov.w	r2, #258	; 0x102
 800db4c:	493c      	ldr	r1, [pc, #240]	; (800dc40 <pbuf_alloc+0x1e0>)
 800db4e:	483b      	ldr	r0, [pc, #236]	; (800dc3c <pbuf_alloc+0x1dc>)
 800db50:	f00a fae4 	bl	801811c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800db54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db56:	2b00      	cmp	r3, #0
 800db58:	d102      	bne.n	800db60 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	627b      	str	r3, [r7, #36]	; 0x24
 800db5e:	e002      	b.n	800db66 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	693a      	ldr	r2, [r7, #16]
 800db64:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800db6a:	8b7a      	ldrh	r2, [r7, #26]
 800db6c:	89fb      	ldrh	r3, [r7, #14]
 800db6e:	1ad3      	subs	r3, r2, r3
 800db70:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800db72:	2300      	movs	r3, #0
 800db74:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800db76:	8b7b      	ldrh	r3, [r7, #26]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d19e      	bne.n	800daba <pbuf_alloc+0x5a>
      break;
 800db7c:	e055      	b.n	800dc2a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800db7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db80:	3303      	adds	r3, #3
 800db82:	b29b      	uxth	r3, r3
 800db84:	f023 0303 	bic.w	r3, r3, #3
 800db88:	b29a      	uxth	r2, r3
 800db8a:	88bb      	ldrh	r3, [r7, #4]
 800db8c:	3303      	adds	r3, #3
 800db8e:	b29b      	uxth	r3, r3
 800db90:	f023 0303 	bic.w	r3, r3, #3
 800db94:	b29b      	uxth	r3, r3
 800db96:	4413      	add	r3, r2
 800db98:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800db9a:	8b3b      	ldrh	r3, [r7, #24]
 800db9c:	3310      	adds	r3, #16
 800db9e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dba0:	8b3a      	ldrh	r2, [r7, #24]
 800dba2:	88bb      	ldrh	r3, [r7, #4]
 800dba4:	3303      	adds	r3, #3
 800dba6:	f023 0303 	bic.w	r3, r3, #3
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d306      	bcc.n	800dbbc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800dbae:	8afa      	ldrh	r2, [r7, #22]
 800dbb0:	88bb      	ldrh	r3, [r7, #4]
 800dbb2:	3303      	adds	r3, #3
 800dbb4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d201      	bcs.n	800dbc0 <pbuf_alloc+0x160>
        return NULL;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	e035      	b.n	800dc2c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800dbc0:	8afb      	ldrh	r3, [r7, #22]
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7ff f9ba 	bl	800cf3c <mem_malloc>
 800dbc8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800dbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d101      	bne.n	800dbd4 <pbuf_alloc+0x174>
        return NULL;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	e02b      	b.n	800dc2c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800dbd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbd6:	3310      	adds	r3, #16
 800dbd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbda:	4413      	add	r3, r2
 800dbdc:	3303      	adds	r3, #3
 800dbde:	f023 0303 	bic.w	r3, r3, #3
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	88b9      	ldrh	r1, [r7, #4]
 800dbe6:	88ba      	ldrh	r2, [r7, #4]
 800dbe8:	2300      	movs	r3, #0
 800dbea:	9301      	str	r3, [sp, #4]
 800dbec:	887b      	ldrh	r3, [r7, #2]
 800dbee:	9300      	str	r3, [sp, #0]
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	4601      	mov	r1, r0
 800dbf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbf6:	f7ff ff09 	bl	800da0c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800dbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	f003 0303 	and.w	r3, r3, #3
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d010      	beq.n	800dc28 <pbuf_alloc+0x1c8>
 800dc06:	4b0b      	ldr	r3, [pc, #44]	; (800dc34 <pbuf_alloc+0x1d4>)
 800dc08:	f44f 7291 	mov.w	r2, #290	; 0x122
 800dc0c:	490d      	ldr	r1, [pc, #52]	; (800dc44 <pbuf_alloc+0x1e4>)
 800dc0e:	480b      	ldr	r0, [pc, #44]	; (800dc3c <pbuf_alloc+0x1dc>)
 800dc10:	f00a fa84 	bl	801811c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800dc14:	e008      	b.n	800dc28 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800dc16:	4b07      	ldr	r3, [pc, #28]	; (800dc34 <pbuf_alloc+0x1d4>)
 800dc18:	f240 1227 	movw	r2, #295	; 0x127
 800dc1c:	490a      	ldr	r1, [pc, #40]	; (800dc48 <pbuf_alloc+0x1e8>)
 800dc1e:	4807      	ldr	r0, [pc, #28]	; (800dc3c <pbuf_alloc+0x1dc>)
 800dc20:	f00a fa7c 	bl	801811c <iprintf>
      return NULL;
 800dc24:	2300      	movs	r3, #0
 800dc26:	e001      	b.n	800dc2c <pbuf_alloc+0x1cc>
      break;
 800dc28:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3728      	adds	r7, #40	; 0x28
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	0801958c 	.word	0x0801958c
 800dc38:	080195bc 	.word	0x080195bc
 800dc3c:	080195ec 	.word	0x080195ec
 800dc40:	08019614 	.word	0x08019614
 800dc44:	08019648 	.word	0x08019648
 800dc48:	08019674 	.word	0x08019674

0800dc4c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b086      	sub	sp, #24
 800dc50:	af02      	add	r7, sp, #8
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	460b      	mov	r3, r1
 800dc56:	807b      	strh	r3, [r7, #2]
 800dc58:	4613      	mov	r3, r2
 800dc5a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800dc5c:	883b      	ldrh	r3, [r7, #0]
 800dc5e:	2b41      	cmp	r3, #65	; 0x41
 800dc60:	d009      	beq.n	800dc76 <pbuf_alloc_reference+0x2a>
 800dc62:	883b      	ldrh	r3, [r7, #0]
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d006      	beq.n	800dc76 <pbuf_alloc_reference+0x2a>
 800dc68:	4b0f      	ldr	r3, [pc, #60]	; (800dca8 <pbuf_alloc_reference+0x5c>)
 800dc6a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800dc6e:	490f      	ldr	r1, [pc, #60]	; (800dcac <pbuf_alloc_reference+0x60>)
 800dc70:	480f      	ldr	r0, [pc, #60]	; (800dcb0 <pbuf_alloc_reference+0x64>)
 800dc72:	f00a fa53 	bl	801811c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800dc76:	2007      	movs	r0, #7
 800dc78:	f7ff faf0 	bl	800d25c <memp_malloc>
 800dc7c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d101      	bne.n	800dc88 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800dc84:	2300      	movs	r3, #0
 800dc86:	e00b      	b.n	800dca0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800dc88:	8879      	ldrh	r1, [r7, #2]
 800dc8a:	887a      	ldrh	r2, [r7, #2]
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	9301      	str	r3, [sp, #4]
 800dc90:	883b      	ldrh	r3, [r7, #0]
 800dc92:	9300      	str	r3, [sp, #0]
 800dc94:	460b      	mov	r3, r1
 800dc96:	6879      	ldr	r1, [r7, #4]
 800dc98:	68f8      	ldr	r0, [r7, #12]
 800dc9a:	f7ff feb7 	bl	800da0c <pbuf_init_alloced_pbuf>
  return p;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3710      	adds	r7, #16
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	0801958c 	.word	0x0801958c
 800dcac:	08019690 	.word	0x08019690
 800dcb0:	080195ec 	.word	0x080195ec

0800dcb4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b088      	sub	sp, #32
 800dcb8:	af02      	add	r7, sp, #8
 800dcba:	607b      	str	r3, [r7, #4]
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	73fb      	strb	r3, [r7, #15]
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	81bb      	strh	r3, [r7, #12]
 800dcc4:	4613      	mov	r3, r2
 800dcc6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800dcc8:	7bfb      	ldrb	r3, [r7, #15]
 800dcca:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800dccc:	8a7b      	ldrh	r3, [r7, #18]
 800dcce:	3303      	adds	r3, #3
 800dcd0:	f023 0203 	bic.w	r2, r3, #3
 800dcd4:	89bb      	ldrh	r3, [r7, #12]
 800dcd6:	441a      	add	r2, r3
 800dcd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d901      	bls.n	800dce2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800dcde:	2300      	movs	r3, #0
 800dce0:	e018      	b.n	800dd14 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800dce2:	6a3b      	ldr	r3, [r7, #32]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d007      	beq.n	800dcf8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dce8:	8a7b      	ldrh	r3, [r7, #18]
 800dcea:	3303      	adds	r3, #3
 800dcec:	f023 0303 	bic.w	r3, r3, #3
 800dcf0:	6a3a      	ldr	r2, [r7, #32]
 800dcf2:	4413      	add	r3, r2
 800dcf4:	617b      	str	r3, [r7, #20]
 800dcf6:	e001      	b.n	800dcfc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	89b9      	ldrh	r1, [r7, #12]
 800dd00:	89ba      	ldrh	r2, [r7, #12]
 800dd02:	2302      	movs	r3, #2
 800dd04:	9301      	str	r3, [sp, #4]
 800dd06:	897b      	ldrh	r3, [r7, #10]
 800dd08:	9300      	str	r3, [sp, #0]
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	6979      	ldr	r1, [r7, #20]
 800dd0e:	f7ff fe7d 	bl	800da0c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800dd12:	687b      	ldr	r3, [r7, #4]
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3718      	adds	r7, #24
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	460b      	mov	r3, r1
 800dd26:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d106      	bne.n	800dd3c <pbuf_realloc+0x20>
 800dd2e:	4b3a      	ldr	r3, [pc, #232]	; (800de18 <pbuf_realloc+0xfc>)
 800dd30:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800dd34:	4939      	ldr	r1, [pc, #228]	; (800de1c <pbuf_realloc+0x100>)
 800dd36:	483a      	ldr	r0, [pc, #232]	; (800de20 <pbuf_realloc+0x104>)
 800dd38:	f00a f9f0 	bl	801811c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	891b      	ldrh	r3, [r3, #8]
 800dd40:	887a      	ldrh	r2, [r7, #2]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d263      	bcs.n	800de0e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	891a      	ldrh	r2, [r3, #8]
 800dd4a:	887b      	ldrh	r3, [r7, #2]
 800dd4c:	1ad3      	subs	r3, r2, r3
 800dd4e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800dd50:	887b      	ldrh	r3, [r7, #2]
 800dd52:	817b      	strh	r3, [r7, #10]
  q = p;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800dd58:	e018      	b.n	800dd8c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	895b      	ldrh	r3, [r3, #10]
 800dd5e:	897a      	ldrh	r2, [r7, #10]
 800dd60:	1ad3      	subs	r3, r2, r3
 800dd62:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	891a      	ldrh	r2, [r3, #8]
 800dd68:	893b      	ldrh	r3, [r7, #8]
 800dd6a:	1ad3      	subs	r3, r2, r3
 800dd6c:	b29a      	uxth	r2, r3
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d106      	bne.n	800dd8c <pbuf_realloc+0x70>
 800dd7e:	4b26      	ldr	r3, [pc, #152]	; (800de18 <pbuf_realloc+0xfc>)
 800dd80:	f240 12af 	movw	r2, #431	; 0x1af
 800dd84:	4927      	ldr	r1, [pc, #156]	; (800de24 <pbuf_realloc+0x108>)
 800dd86:	4826      	ldr	r0, [pc, #152]	; (800de20 <pbuf_realloc+0x104>)
 800dd88:	f00a f9c8 	bl	801811c <iprintf>
  while (rem_len > q->len) {
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	895b      	ldrh	r3, [r3, #10]
 800dd90:	897a      	ldrh	r2, [r7, #10]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d8e1      	bhi.n	800dd5a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	7b1b      	ldrb	r3, [r3, #12]
 800dd9a:	f003 030f 	and.w	r3, r3, #15
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d121      	bne.n	800dde6 <pbuf_realloc+0xca>
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	895b      	ldrh	r3, [r3, #10]
 800dda6:	897a      	ldrh	r2, [r7, #10]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d01c      	beq.n	800dde6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	7b5b      	ldrb	r3, [r3, #13]
 800ddb0:	f003 0302 	and.w	r3, r3, #2
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d116      	bne.n	800dde6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	685a      	ldr	r2, [r3, #4]
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	1ad3      	subs	r3, r2, r3
 800ddc0:	b29a      	uxth	r2, r3
 800ddc2:	897b      	ldrh	r3, [r7, #10]
 800ddc4:	4413      	add	r3, r2
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	4619      	mov	r1, r3
 800ddca:	68f8      	ldr	r0, [r7, #12]
 800ddcc:	f7fe ffba 	bl	800cd44 <mem_trim>
 800ddd0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d106      	bne.n	800dde6 <pbuf_realloc+0xca>
 800ddd8:	4b0f      	ldr	r3, [pc, #60]	; (800de18 <pbuf_realloc+0xfc>)
 800ddda:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ddde:	4912      	ldr	r1, [pc, #72]	; (800de28 <pbuf_realloc+0x10c>)
 800dde0:	480f      	ldr	r0, [pc, #60]	; (800de20 <pbuf_realloc+0x104>)
 800dde2:	f00a f99b 	bl	801811c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	897a      	ldrh	r2, [r7, #10]
 800ddea:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	895a      	ldrh	r2, [r3, #10]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d004      	beq.n	800de06 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4618      	mov	r0, r3
 800de02:	f000 f911 	bl	800e028 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2200      	movs	r2, #0
 800de0a:	601a      	str	r2, [r3, #0]
 800de0c:	e000      	b.n	800de10 <pbuf_realloc+0xf4>
    return;
 800de0e:	bf00      	nop

}
 800de10:	3710      	adds	r7, #16
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	0801958c 	.word	0x0801958c
 800de1c:	080196a4 	.word	0x080196a4
 800de20:	080195ec 	.word	0x080195ec
 800de24:	080196bc 	.word	0x080196bc
 800de28:	080196d4 	.word	0x080196d4

0800de2c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b086      	sub	sp, #24
 800de30:	af00      	add	r7, sp, #0
 800de32:	60f8      	str	r0, [r7, #12]
 800de34:	60b9      	str	r1, [r7, #8]
 800de36:	4613      	mov	r3, r2
 800de38:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d106      	bne.n	800de4e <pbuf_add_header_impl+0x22>
 800de40:	4b2b      	ldr	r3, [pc, #172]	; (800def0 <pbuf_add_header_impl+0xc4>)
 800de42:	f240 12df 	movw	r2, #479	; 0x1df
 800de46:	492b      	ldr	r1, [pc, #172]	; (800def4 <pbuf_add_header_impl+0xc8>)
 800de48:	482b      	ldr	r0, [pc, #172]	; (800def8 <pbuf_add_header_impl+0xcc>)
 800de4a:	f00a f967 	bl	801811c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d003      	beq.n	800de5c <pbuf_add_header_impl+0x30>
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de5a:	d301      	bcc.n	800de60 <pbuf_add_header_impl+0x34>
    return 1;
 800de5c:	2301      	movs	r3, #1
 800de5e:	e043      	b.n	800dee8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d101      	bne.n	800de6a <pbuf_add_header_impl+0x3e>
    return 0;
 800de66:	2300      	movs	r3, #0
 800de68:	e03e      	b.n	800dee8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	891a      	ldrh	r2, [r3, #8]
 800de72:	8a7b      	ldrh	r3, [r7, #18]
 800de74:	4413      	add	r3, r2
 800de76:	b29b      	uxth	r3, r3
 800de78:	8a7a      	ldrh	r2, [r7, #18]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d901      	bls.n	800de82 <pbuf_add_header_impl+0x56>
    return 1;
 800de7e:	2301      	movs	r3, #1
 800de80:	e032      	b.n	800dee8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	7b1b      	ldrb	r3, [r3, #12]
 800de86:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800de88:	8a3b      	ldrh	r3, [r7, #16]
 800de8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d00c      	beq.n	800deac <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	685a      	ldr	r2, [r3, #4]
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	425b      	negs	r3, r3
 800de9a:	4413      	add	r3, r2
 800de9c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	3310      	adds	r3, #16
 800dea2:	697a      	ldr	r2, [r7, #20]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d20d      	bcs.n	800dec4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dea8:	2301      	movs	r3, #1
 800deaa:	e01d      	b.n	800dee8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800deac:	79fb      	ldrb	r3, [r7, #7]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d006      	beq.n	800dec0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	685a      	ldr	r2, [r3, #4]
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	425b      	negs	r3, r3
 800deba:	4413      	add	r3, r2
 800debc:	617b      	str	r3, [r7, #20]
 800debe:	e001      	b.n	800dec4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dec0:	2301      	movs	r3, #1
 800dec2:	e011      	b.n	800dee8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	697a      	ldr	r2, [r7, #20]
 800dec8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	895a      	ldrh	r2, [r3, #10]
 800dece:	8a7b      	ldrh	r3, [r7, #18]
 800ded0:	4413      	add	r3, r2
 800ded2:	b29a      	uxth	r2, r3
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	891a      	ldrh	r2, [r3, #8]
 800dedc:	8a7b      	ldrh	r3, [r7, #18]
 800dede:	4413      	add	r3, r2
 800dee0:	b29a      	uxth	r2, r3
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	811a      	strh	r2, [r3, #8]


  return 0;
 800dee6:	2300      	movs	r3, #0
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3718      	adds	r7, #24
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	0801958c 	.word	0x0801958c
 800def4:	080196f0 	.word	0x080196f0
 800def8:	080195ec 	.word	0x080195ec

0800defc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800df06:	2200      	movs	r2, #0
 800df08:	6839      	ldr	r1, [r7, #0]
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f7ff ff8e 	bl	800de2c <pbuf_add_header_impl>
 800df10:	4603      	mov	r3, r0
}
 800df12:	4618      	mov	r0, r3
 800df14:	3708      	adds	r7, #8
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
	...

0800df1c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b084      	sub	sp, #16
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d106      	bne.n	800df3a <pbuf_remove_header+0x1e>
 800df2c:	4b20      	ldr	r3, [pc, #128]	; (800dfb0 <pbuf_remove_header+0x94>)
 800df2e:	f240 224b 	movw	r2, #587	; 0x24b
 800df32:	4920      	ldr	r1, [pc, #128]	; (800dfb4 <pbuf_remove_header+0x98>)
 800df34:	4820      	ldr	r0, [pc, #128]	; (800dfb8 <pbuf_remove_header+0x9c>)
 800df36:	f00a f8f1 	bl	801811c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d003      	beq.n	800df48 <pbuf_remove_header+0x2c>
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df46:	d301      	bcc.n	800df4c <pbuf_remove_header+0x30>
    return 1;
 800df48:	2301      	movs	r3, #1
 800df4a:	e02c      	b.n	800dfa6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d101      	bne.n	800df56 <pbuf_remove_header+0x3a>
    return 0;
 800df52:	2300      	movs	r3, #0
 800df54:	e027      	b.n	800dfa6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	895b      	ldrh	r3, [r3, #10]
 800df5e:	89fa      	ldrh	r2, [r7, #14]
 800df60:	429a      	cmp	r2, r3
 800df62:	d908      	bls.n	800df76 <pbuf_remove_header+0x5a>
 800df64:	4b12      	ldr	r3, [pc, #72]	; (800dfb0 <pbuf_remove_header+0x94>)
 800df66:	f240 2255 	movw	r2, #597	; 0x255
 800df6a:	4914      	ldr	r1, [pc, #80]	; (800dfbc <pbuf_remove_header+0xa0>)
 800df6c:	4812      	ldr	r0, [pc, #72]	; (800dfb8 <pbuf_remove_header+0x9c>)
 800df6e:	f00a f8d5 	bl	801811c <iprintf>
 800df72:	2301      	movs	r3, #1
 800df74:	e017      	b.n	800dfa6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	685a      	ldr	r2, [r3, #4]
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	441a      	add	r2, r3
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	895a      	ldrh	r2, [r3, #10]
 800df8c:	89fb      	ldrh	r3, [r7, #14]
 800df8e:	1ad3      	subs	r3, r2, r3
 800df90:	b29a      	uxth	r2, r3
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	891a      	ldrh	r2, [r3, #8]
 800df9a:	89fb      	ldrh	r3, [r7, #14]
 800df9c:	1ad3      	subs	r3, r2, r3
 800df9e:	b29a      	uxth	r2, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dfa4:	2300      	movs	r3, #0
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3710      	adds	r7, #16
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	0801958c 	.word	0x0801958c
 800dfb4:	080196f0 	.word	0x080196f0
 800dfb8:	080195ec 	.word	0x080195ec
 800dfbc:	080196fc 	.word	0x080196fc

0800dfc0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	460b      	mov	r3, r1
 800dfca:	807b      	strh	r3, [r7, #2]
 800dfcc:	4613      	mov	r3, r2
 800dfce:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dfd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	da08      	bge.n	800dfea <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dfd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dfdc:	425b      	negs	r3, r3
 800dfde:	4619      	mov	r1, r3
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f7ff ff9b 	bl	800df1c <pbuf_remove_header>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	e007      	b.n	800dffa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dfea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dfee:	787a      	ldrb	r2, [r7, #1]
 800dff0:	4619      	mov	r1, r3
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f7ff ff1a 	bl	800de2c <pbuf_add_header_impl>
 800dff8:	4603      	mov	r3, r0
  }
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3708      	adds	r7, #8
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b082      	sub	sp, #8
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
 800e00a:	460b      	mov	r3, r1
 800e00c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e00e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e012:	2201      	movs	r2, #1
 800e014:	4619      	mov	r1, r3
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f7ff ffd2 	bl	800dfc0 <pbuf_header_impl>
 800e01c:	4603      	mov	r3, r0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3708      	adds	r7, #8
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
	...

0800e028 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b086      	sub	sp, #24
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10b      	bne.n	800e04e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d106      	bne.n	800e04a <pbuf_free+0x22>
 800e03c:	4b38      	ldr	r3, [pc, #224]	; (800e120 <pbuf_free+0xf8>)
 800e03e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e042:	4938      	ldr	r1, [pc, #224]	; (800e124 <pbuf_free+0xfc>)
 800e044:	4838      	ldr	r0, [pc, #224]	; (800e128 <pbuf_free+0x100>)
 800e046:	f00a f869 	bl	801811c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e04a:	2300      	movs	r3, #0
 800e04c:	e063      	b.n	800e116 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e04e:	2300      	movs	r3, #0
 800e050:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e052:	e05c      	b.n	800e10e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	7b9b      	ldrb	r3, [r3, #14]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d106      	bne.n	800e06a <pbuf_free+0x42>
 800e05c:	4b30      	ldr	r3, [pc, #192]	; (800e120 <pbuf_free+0xf8>)
 800e05e:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e062:	4932      	ldr	r1, [pc, #200]	; (800e12c <pbuf_free+0x104>)
 800e064:	4830      	ldr	r0, [pc, #192]	; (800e128 <pbuf_free+0x100>)
 800e066:	f00a f859 	bl	801811c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	7b9b      	ldrb	r3, [r3, #14]
 800e06e:	3b01      	subs	r3, #1
 800e070:	b2da      	uxtb	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	739a      	strb	r2, [r3, #14]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	7b9b      	ldrb	r3, [r3, #14]
 800e07a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e07c:	7dbb      	ldrb	r3, [r7, #22]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d143      	bne.n	800e10a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	7b1b      	ldrb	r3, [r3, #12]
 800e08c:	f003 030f 	and.w	r3, r3, #15
 800e090:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	7b5b      	ldrb	r3, [r3, #13]
 800e096:	f003 0302 	and.w	r3, r3, #2
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d011      	beq.n	800e0c2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	691b      	ldr	r3, [r3, #16]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d106      	bne.n	800e0b8 <pbuf_free+0x90>
 800e0aa:	4b1d      	ldr	r3, [pc, #116]	; (800e120 <pbuf_free+0xf8>)
 800e0ac:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e0b0:	491f      	ldr	r1, [pc, #124]	; (800e130 <pbuf_free+0x108>)
 800e0b2:	481d      	ldr	r0, [pc, #116]	; (800e128 <pbuf_free+0x100>)
 800e0b4:	f00a f832 	bl	801811c <iprintf>
        pc->custom_free_function(p);
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	691b      	ldr	r3, [r3, #16]
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	4798      	blx	r3
 800e0c0:	e01d      	b.n	800e0fe <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e0c2:	7bfb      	ldrb	r3, [r7, #15]
 800e0c4:	2b02      	cmp	r3, #2
 800e0c6:	d104      	bne.n	800e0d2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800e0c8:	6879      	ldr	r1, [r7, #4]
 800e0ca:	2008      	movs	r0, #8
 800e0cc:	f7ff f936 	bl	800d33c <memp_free>
 800e0d0:	e015      	b.n	800e0fe <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e0d2:	7bfb      	ldrb	r3, [r7, #15]
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d104      	bne.n	800e0e2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800e0d8:	6879      	ldr	r1, [r7, #4]
 800e0da:	2007      	movs	r0, #7
 800e0dc:	f7ff f92e 	bl	800d33c <memp_free>
 800e0e0:	e00d      	b.n	800e0fe <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e0e2:	7bfb      	ldrb	r3, [r7, #15]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d103      	bne.n	800e0f0 <pbuf_free+0xc8>
          mem_free(p);
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f7fe fdc1 	bl	800cc70 <mem_free>
 800e0ee:	e006      	b.n	800e0fe <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e0f0:	4b0b      	ldr	r3, [pc, #44]	; (800e120 <pbuf_free+0xf8>)
 800e0f2:	f240 320f 	movw	r2, #783	; 0x30f
 800e0f6:	490f      	ldr	r1, [pc, #60]	; (800e134 <pbuf_free+0x10c>)
 800e0f8:	480b      	ldr	r0, [pc, #44]	; (800e128 <pbuf_free+0x100>)
 800e0fa:	f00a f80f 	bl	801811c <iprintf>
        }
      }
      count++;
 800e0fe:	7dfb      	ldrb	r3, [r7, #23]
 800e100:	3301      	adds	r3, #1
 800e102:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	607b      	str	r3, [r7, #4]
 800e108:	e001      	b.n	800e10e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e10a:	2300      	movs	r3, #0
 800e10c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d19f      	bne.n	800e054 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e114:	7dfb      	ldrb	r3, [r7, #23]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3718      	adds	r7, #24
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	0801958c 	.word	0x0801958c
 800e124:	080196f0 	.word	0x080196f0
 800e128:	080195ec 	.word	0x080195ec
 800e12c:	0801971c 	.word	0x0801971c
 800e130:	08019734 	.word	0x08019734
 800e134:	08019758 	.word	0x08019758

0800e138 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e138:	b480      	push	{r7}
 800e13a:	b085      	sub	sp, #20
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e140:	2300      	movs	r3, #0
 800e142:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e144:	e005      	b.n	800e152 <pbuf_clen+0x1a>
    ++len;
 800e146:	89fb      	ldrh	r3, [r7, #14]
 800e148:	3301      	adds	r3, #1
 800e14a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d1f6      	bne.n	800e146 <pbuf_clen+0xe>
  }
  return len;
 800e158:	89fb      	ldrh	r3, [r7, #14]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3714      	adds	r7, #20
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr
	...

0800e168 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b082      	sub	sp, #8
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d010      	beq.n	800e198 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	7b9b      	ldrb	r3, [r3, #14]
 800e17a:	3301      	adds	r3, #1
 800e17c:	b2da      	uxtb	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	7b9b      	ldrb	r3, [r3, #14]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d106      	bne.n	800e198 <pbuf_ref+0x30>
 800e18a:	4b05      	ldr	r3, [pc, #20]	; (800e1a0 <pbuf_ref+0x38>)
 800e18c:	f240 3242 	movw	r2, #834	; 0x342
 800e190:	4904      	ldr	r1, [pc, #16]	; (800e1a4 <pbuf_ref+0x3c>)
 800e192:	4805      	ldr	r0, [pc, #20]	; (800e1a8 <pbuf_ref+0x40>)
 800e194:	f009 ffc2 	bl	801811c <iprintf>
  }
}
 800e198:	bf00      	nop
 800e19a:	3708      	adds	r7, #8
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	0801958c 	.word	0x0801958c
 800e1a4:	0801976c 	.word	0x0801976c
 800e1a8:	080195ec 	.word	0x080195ec

0800e1ac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d002      	beq.n	800e1c2 <pbuf_cat+0x16>
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d107      	bne.n	800e1d2 <pbuf_cat+0x26>
 800e1c2:	4b20      	ldr	r3, [pc, #128]	; (800e244 <pbuf_cat+0x98>)
 800e1c4:	f240 3259 	movw	r2, #857	; 0x359
 800e1c8:	491f      	ldr	r1, [pc, #124]	; (800e248 <pbuf_cat+0x9c>)
 800e1ca:	4820      	ldr	r0, [pc, #128]	; (800e24c <pbuf_cat+0xa0>)
 800e1cc:	f009 ffa6 	bl	801811c <iprintf>
 800e1d0:	e034      	b.n	800e23c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	60fb      	str	r3, [r7, #12]
 800e1d6:	e00a      	b.n	800e1ee <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	891a      	ldrh	r2, [r3, #8]
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	891b      	ldrh	r3, [r3, #8]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	b29a      	uxth	r2, r3
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	60fb      	str	r3, [r7, #12]
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d1f0      	bne.n	800e1d8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	891a      	ldrh	r2, [r3, #8]
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	895b      	ldrh	r3, [r3, #10]
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d006      	beq.n	800e210 <pbuf_cat+0x64>
 800e202:	4b10      	ldr	r3, [pc, #64]	; (800e244 <pbuf_cat+0x98>)
 800e204:	f240 3262 	movw	r2, #866	; 0x362
 800e208:	4911      	ldr	r1, [pc, #68]	; (800e250 <pbuf_cat+0xa4>)
 800e20a:	4810      	ldr	r0, [pc, #64]	; (800e24c <pbuf_cat+0xa0>)
 800e20c:	f009 ff86 	bl	801811c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d006      	beq.n	800e226 <pbuf_cat+0x7a>
 800e218:	4b0a      	ldr	r3, [pc, #40]	; (800e244 <pbuf_cat+0x98>)
 800e21a:	f240 3263 	movw	r2, #867	; 0x363
 800e21e:	490d      	ldr	r1, [pc, #52]	; (800e254 <pbuf_cat+0xa8>)
 800e220:	480a      	ldr	r0, [pc, #40]	; (800e24c <pbuf_cat+0xa0>)
 800e222:	f009 ff7b 	bl	801811c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	891a      	ldrh	r2, [r3, #8]
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	891b      	ldrh	r3, [r3, #8]
 800e22e:	4413      	add	r3, r2
 800e230:	b29a      	uxth	r2, r3
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	683a      	ldr	r2, [r7, #0]
 800e23a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e23c:	3710      	adds	r7, #16
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	0801958c 	.word	0x0801958c
 800e248:	08019780 	.word	0x08019780
 800e24c:	080195ec 	.word	0x080195ec
 800e250:	080197b8 	.word	0x080197b8
 800e254:	080197e8 	.word	0x080197e8

0800e258 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b086      	sub	sp, #24
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e262:	2300      	movs	r3, #0
 800e264:	617b      	str	r3, [r7, #20]
 800e266:	2300      	movs	r3, #0
 800e268:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d008      	beq.n	800e282 <pbuf_copy+0x2a>
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d005      	beq.n	800e282 <pbuf_copy+0x2a>
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	891a      	ldrh	r2, [r3, #8]
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	891b      	ldrh	r3, [r3, #8]
 800e27e:	429a      	cmp	r2, r3
 800e280:	d209      	bcs.n	800e296 <pbuf_copy+0x3e>
 800e282:	4b57      	ldr	r3, [pc, #348]	; (800e3e0 <pbuf_copy+0x188>)
 800e284:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e288:	4956      	ldr	r1, [pc, #344]	; (800e3e4 <pbuf_copy+0x18c>)
 800e28a:	4857      	ldr	r0, [pc, #348]	; (800e3e8 <pbuf_copy+0x190>)
 800e28c:	f009 ff46 	bl	801811c <iprintf>
 800e290:	f06f 030f 	mvn.w	r3, #15
 800e294:	e09f      	b.n	800e3d6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	895b      	ldrh	r3, [r3, #10]
 800e29a:	461a      	mov	r2, r3
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	1ad2      	subs	r2, r2, r3
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	895b      	ldrh	r3, [r3, #10]
 800e2a4:	4619      	mov	r1, r3
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	1acb      	subs	r3, r1, r3
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d306      	bcc.n	800e2bc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	895b      	ldrh	r3, [r3, #10]
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	1ad3      	subs	r3, r2, r3
 800e2b8:	60fb      	str	r3, [r7, #12]
 800e2ba:	e005      	b.n	800e2c8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	895b      	ldrh	r3, [r3, #10]
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	1ad3      	subs	r3, r2, r3
 800e2c6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	685a      	ldr	r2, [r3, #4]
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	18d0      	adds	r0, r2, r3
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	685a      	ldr	r2, [r3, #4]
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	68fa      	ldr	r2, [r7, #12]
 800e2da:	4619      	mov	r1, r3
 800e2dc:	f00a f811 	bl	8018302 <memcpy>
    offset_to += len;
 800e2e0:	697a      	ldr	r2, [r7, #20]
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	4413      	add	r3, r2
 800e2e6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e2e8:	693a      	ldr	r2, [r7, #16]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	4413      	add	r3, r2
 800e2ee:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	895b      	ldrh	r3, [r3, #10]
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d906      	bls.n	800e30a <pbuf_copy+0xb2>
 800e2fc:	4b38      	ldr	r3, [pc, #224]	; (800e3e0 <pbuf_copy+0x188>)
 800e2fe:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e302:	493a      	ldr	r1, [pc, #232]	; (800e3ec <pbuf_copy+0x194>)
 800e304:	4838      	ldr	r0, [pc, #224]	; (800e3e8 <pbuf_copy+0x190>)
 800e306:	f009 ff09 	bl	801811c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	895b      	ldrh	r3, [r3, #10]
 800e30e:	461a      	mov	r2, r3
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	4293      	cmp	r3, r2
 800e314:	d906      	bls.n	800e324 <pbuf_copy+0xcc>
 800e316:	4b32      	ldr	r3, [pc, #200]	; (800e3e0 <pbuf_copy+0x188>)
 800e318:	f240 32da 	movw	r2, #986	; 0x3da
 800e31c:	4934      	ldr	r1, [pc, #208]	; (800e3f0 <pbuf_copy+0x198>)
 800e31e:	4832      	ldr	r0, [pc, #200]	; (800e3e8 <pbuf_copy+0x190>)
 800e320:	f009 fefc 	bl	801811c <iprintf>
    if (offset_from >= p_from->len) {
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	895b      	ldrh	r3, [r3, #10]
 800e328:	461a      	mov	r2, r3
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d304      	bcc.n	800e33a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e330:	2300      	movs	r3, #0
 800e332:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	895b      	ldrh	r3, [r3, #10]
 800e33e:	461a      	mov	r2, r3
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	4293      	cmp	r3, r2
 800e344:	d114      	bne.n	800e370 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e346:	2300      	movs	r3, #0
 800e348:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d10c      	bne.n	800e370 <pbuf_copy+0x118>
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d009      	beq.n	800e370 <pbuf_copy+0x118>
 800e35c:	4b20      	ldr	r3, [pc, #128]	; (800e3e0 <pbuf_copy+0x188>)
 800e35e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e362:	4924      	ldr	r1, [pc, #144]	; (800e3f4 <pbuf_copy+0x19c>)
 800e364:	4820      	ldr	r0, [pc, #128]	; (800e3e8 <pbuf_copy+0x190>)
 800e366:	f009 fed9 	bl	801811c <iprintf>
 800e36a:	f06f 030f 	mvn.w	r3, #15
 800e36e:	e032      	b.n	800e3d6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d013      	beq.n	800e39e <pbuf_copy+0x146>
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	895a      	ldrh	r2, [r3, #10]
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	891b      	ldrh	r3, [r3, #8]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d10d      	bne.n	800e39e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d009      	beq.n	800e39e <pbuf_copy+0x146>
 800e38a:	4b15      	ldr	r3, [pc, #84]	; (800e3e0 <pbuf_copy+0x188>)
 800e38c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e390:	4919      	ldr	r1, [pc, #100]	; (800e3f8 <pbuf_copy+0x1a0>)
 800e392:	4815      	ldr	r0, [pc, #84]	; (800e3e8 <pbuf_copy+0x190>)
 800e394:	f009 fec2 	bl	801811c <iprintf>
 800e398:	f06f 0305 	mvn.w	r3, #5
 800e39c:	e01b      	b.n	800e3d6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d013      	beq.n	800e3cc <pbuf_copy+0x174>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	895a      	ldrh	r2, [r3, #10]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	891b      	ldrh	r3, [r3, #8]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d10d      	bne.n	800e3cc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d009      	beq.n	800e3cc <pbuf_copy+0x174>
 800e3b8:	4b09      	ldr	r3, [pc, #36]	; (800e3e0 <pbuf_copy+0x188>)
 800e3ba:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e3be:	490e      	ldr	r1, [pc, #56]	; (800e3f8 <pbuf_copy+0x1a0>)
 800e3c0:	4809      	ldr	r0, [pc, #36]	; (800e3e8 <pbuf_copy+0x190>)
 800e3c2:	f009 feab 	bl	801811c <iprintf>
 800e3c6:	f06f 0305 	mvn.w	r3, #5
 800e3ca:	e004      	b.n	800e3d6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	f47f af61 	bne.w	800e296 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e3d4:	2300      	movs	r3, #0
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3718      	adds	r7, #24
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	0801958c 	.word	0x0801958c
 800e3e4:	08019834 	.word	0x08019834
 800e3e8:	080195ec 	.word	0x080195ec
 800e3ec:	08019864 	.word	0x08019864
 800e3f0:	0801987c 	.word	0x0801987c
 800e3f4:	08019898 	.word	0x08019898
 800e3f8:	080198a8 	.word	0x080198a8

0800e3fc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b088      	sub	sp, #32
 800e400:	af00      	add	r7, sp, #0
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	4611      	mov	r1, r2
 800e408:	461a      	mov	r2, r3
 800e40a:	460b      	mov	r3, r1
 800e40c:	80fb      	strh	r3, [r7, #6]
 800e40e:	4613      	mov	r3, r2
 800e410:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e412:	2300      	movs	r3, #0
 800e414:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e416:	2300      	movs	r3, #0
 800e418:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d108      	bne.n	800e432 <pbuf_copy_partial+0x36>
 800e420:	4b2b      	ldr	r3, [pc, #172]	; (800e4d0 <pbuf_copy_partial+0xd4>)
 800e422:	f240 420a 	movw	r2, #1034	; 0x40a
 800e426:	492b      	ldr	r1, [pc, #172]	; (800e4d4 <pbuf_copy_partial+0xd8>)
 800e428:	482b      	ldr	r0, [pc, #172]	; (800e4d8 <pbuf_copy_partial+0xdc>)
 800e42a:	f009 fe77 	bl	801811c <iprintf>
 800e42e:	2300      	movs	r3, #0
 800e430:	e04a      	b.n	800e4c8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d108      	bne.n	800e44a <pbuf_copy_partial+0x4e>
 800e438:	4b25      	ldr	r3, [pc, #148]	; (800e4d0 <pbuf_copy_partial+0xd4>)
 800e43a:	f240 420b 	movw	r2, #1035	; 0x40b
 800e43e:	4927      	ldr	r1, [pc, #156]	; (800e4dc <pbuf_copy_partial+0xe0>)
 800e440:	4825      	ldr	r0, [pc, #148]	; (800e4d8 <pbuf_copy_partial+0xdc>)
 800e442:	f009 fe6b 	bl	801811c <iprintf>
 800e446:	2300      	movs	r3, #0
 800e448:	e03e      	b.n	800e4c8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	61fb      	str	r3, [r7, #28]
 800e44e:	e034      	b.n	800e4ba <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e450:	88bb      	ldrh	r3, [r7, #4]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d00a      	beq.n	800e46c <pbuf_copy_partial+0x70>
 800e456:	69fb      	ldr	r3, [r7, #28]
 800e458:	895b      	ldrh	r3, [r3, #10]
 800e45a:	88ba      	ldrh	r2, [r7, #4]
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d305      	bcc.n	800e46c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	895b      	ldrh	r3, [r3, #10]
 800e464:	88ba      	ldrh	r2, [r7, #4]
 800e466:	1ad3      	subs	r3, r2, r3
 800e468:	80bb      	strh	r3, [r7, #4]
 800e46a:	e023      	b.n	800e4b4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	895a      	ldrh	r2, [r3, #10]
 800e470:	88bb      	ldrh	r3, [r7, #4]
 800e472:	1ad3      	subs	r3, r2, r3
 800e474:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e476:	8b3a      	ldrh	r2, [r7, #24]
 800e478:	88fb      	ldrh	r3, [r7, #6]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d901      	bls.n	800e482 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e47e:	88fb      	ldrh	r3, [r7, #6]
 800e480:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e482:	8b7b      	ldrh	r3, [r7, #26]
 800e484:	68ba      	ldr	r2, [r7, #8]
 800e486:	18d0      	adds	r0, r2, r3
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	685a      	ldr	r2, [r3, #4]
 800e48c:	88bb      	ldrh	r3, [r7, #4]
 800e48e:	4413      	add	r3, r2
 800e490:	8b3a      	ldrh	r2, [r7, #24]
 800e492:	4619      	mov	r1, r3
 800e494:	f009 ff35 	bl	8018302 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e498:	8afa      	ldrh	r2, [r7, #22]
 800e49a:	8b3b      	ldrh	r3, [r7, #24]
 800e49c:	4413      	add	r3, r2
 800e49e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e4a0:	8b7a      	ldrh	r2, [r7, #26]
 800e4a2:	8b3b      	ldrh	r3, [r7, #24]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e4a8:	88fa      	ldrh	r2, [r7, #6]
 800e4aa:	8b3b      	ldrh	r3, [r7, #24]
 800e4ac:	1ad3      	subs	r3, r2, r3
 800e4ae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	61fb      	str	r3, [r7, #28]
 800e4ba:	88fb      	ldrh	r3, [r7, #6]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d002      	beq.n	800e4c6 <pbuf_copy_partial+0xca>
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d1c4      	bne.n	800e450 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e4c6:	8afb      	ldrh	r3, [r7, #22]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3720      	adds	r7, #32
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	0801958c 	.word	0x0801958c
 800e4d4:	080198d4 	.word	0x080198d4
 800e4d8:	080195ec 	.word	0x080195ec
 800e4dc:	080198f4 	.word	0x080198f4

0800e4e0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b084      	sub	sp, #16
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	603a      	str	r2, [r7, #0]
 800e4ea:	71fb      	strb	r3, [r7, #7]
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	8919      	ldrh	r1, [r3, #8]
 800e4f4:	88ba      	ldrh	r2, [r7, #4]
 800e4f6:	79fb      	ldrb	r3, [r7, #7]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7ff fab1 	bl	800da60 <pbuf_alloc>
 800e4fe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d101      	bne.n	800e50a <pbuf_clone+0x2a>
    return NULL;
 800e506:	2300      	movs	r3, #0
 800e508:	e011      	b.n	800e52e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e50a:	6839      	ldr	r1, [r7, #0]
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f7ff fea3 	bl	800e258 <pbuf_copy>
 800e512:	4603      	mov	r3, r0
 800e514:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e516:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d006      	beq.n	800e52c <pbuf_clone+0x4c>
 800e51e:	4b06      	ldr	r3, [pc, #24]	; (800e538 <pbuf_clone+0x58>)
 800e520:	f240 5224 	movw	r2, #1316	; 0x524
 800e524:	4905      	ldr	r1, [pc, #20]	; (800e53c <pbuf_clone+0x5c>)
 800e526:	4806      	ldr	r0, [pc, #24]	; (800e540 <pbuf_clone+0x60>)
 800e528:	f009 fdf8 	bl	801811c <iprintf>
  return q;
 800e52c:	68fb      	ldr	r3, [r7, #12]
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3710      	adds	r7, #16
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
 800e536:	bf00      	nop
 800e538:	0801958c 	.word	0x0801958c
 800e53c:	08019a00 	.word	0x08019a00
 800e540:	080195ec 	.word	0x080195ec

0800e544 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e548:	f009 fc5c 	bl	8017e04 <rand>
 800e54c:	4603      	mov	r3, r0
 800e54e:	b29b      	uxth	r3, r3
 800e550:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e554:	b29b      	uxth	r3, r3
 800e556:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e55a:	b29a      	uxth	r2, r3
 800e55c:	4b01      	ldr	r3, [pc, #4]	; (800e564 <tcp_init+0x20>)
 800e55e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e560:	bf00      	nop
 800e562:	bd80      	pop	{r7, pc}
 800e564:	20000140 	.word	0x20000140

0800e568 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	7d1b      	ldrb	r3, [r3, #20]
 800e574:	2b01      	cmp	r3, #1
 800e576:	d105      	bne.n	800e584 <tcp_free+0x1c>
 800e578:	4b06      	ldr	r3, [pc, #24]	; (800e594 <tcp_free+0x2c>)
 800e57a:	22d4      	movs	r2, #212	; 0xd4
 800e57c:	4906      	ldr	r1, [pc, #24]	; (800e598 <tcp_free+0x30>)
 800e57e:	4807      	ldr	r0, [pc, #28]	; (800e59c <tcp_free+0x34>)
 800e580:	f009 fdcc 	bl	801811c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e584:	6879      	ldr	r1, [r7, #4]
 800e586:	2001      	movs	r0, #1
 800e588:	f7fe fed8 	bl	800d33c <memp_free>
}
 800e58c:	bf00      	nop
 800e58e:	3708      	adds	r7, #8
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}
 800e594:	08019a8c 	.word	0x08019a8c
 800e598:	08019abc 	.word	0x08019abc
 800e59c:	08019ad0 	.word	0x08019ad0

0800e5a0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	7d1b      	ldrb	r3, [r3, #20]
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	d105      	bne.n	800e5bc <tcp_free_listen+0x1c>
 800e5b0:	4b06      	ldr	r3, [pc, #24]	; (800e5cc <tcp_free_listen+0x2c>)
 800e5b2:	22df      	movs	r2, #223	; 0xdf
 800e5b4:	4906      	ldr	r1, [pc, #24]	; (800e5d0 <tcp_free_listen+0x30>)
 800e5b6:	4807      	ldr	r0, [pc, #28]	; (800e5d4 <tcp_free_listen+0x34>)
 800e5b8:	f009 fdb0 	bl	801811c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e5bc:	6879      	ldr	r1, [r7, #4]
 800e5be:	2002      	movs	r0, #2
 800e5c0:	f7fe febc 	bl	800d33c <memp_free>
}
 800e5c4:	bf00      	nop
 800e5c6:	3708      	adds	r7, #8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	08019a8c 	.word	0x08019a8c
 800e5d0:	08019af8 	.word	0x08019af8
 800e5d4:	08019ad0 	.word	0x08019ad0

0800e5d8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e5dc:	f001 f800 	bl	800f5e0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e5e0:	4b07      	ldr	r3, [pc, #28]	; (800e600 <tcp_tmr+0x28>)
 800e5e2:	781b      	ldrb	r3, [r3, #0]
 800e5e4:	3301      	adds	r3, #1
 800e5e6:	b2da      	uxtb	r2, r3
 800e5e8:	4b05      	ldr	r3, [pc, #20]	; (800e600 <tcp_tmr+0x28>)
 800e5ea:	701a      	strb	r2, [r3, #0]
 800e5ec:	4b04      	ldr	r3, [pc, #16]	; (800e600 <tcp_tmr+0x28>)
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	f003 0301 	and.w	r3, r3, #1
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d001      	beq.n	800e5fc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e5f8:	f000 fcb2 	bl	800ef60 <tcp_slowtmr>
  }
}
 800e5fc:	bf00      	nop
 800e5fe:	bd80      	pop	{r7, pc}
 800e600:	20008155 	.word	0x20008155

0800e604 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d105      	bne.n	800e620 <tcp_remove_listener+0x1c>
 800e614:	4b0d      	ldr	r3, [pc, #52]	; (800e64c <tcp_remove_listener+0x48>)
 800e616:	22ff      	movs	r2, #255	; 0xff
 800e618:	490d      	ldr	r1, [pc, #52]	; (800e650 <tcp_remove_listener+0x4c>)
 800e61a:	480e      	ldr	r0, [pc, #56]	; (800e654 <tcp_remove_listener+0x50>)
 800e61c:	f009 fd7e 	bl	801811c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	60fb      	str	r3, [r7, #12]
 800e624:	e00a      	b.n	800e63c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e62a:	683a      	ldr	r2, [r7, #0]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d102      	bne.n	800e636 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2200      	movs	r2, #0
 800e634:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	60fb      	str	r3, [r7, #12]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d1f1      	bne.n	800e626 <tcp_remove_listener+0x22>
    }
  }
}
 800e642:	bf00      	nop
 800e644:	bf00      	nop
 800e646:	3710      	adds	r7, #16
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	08019a8c 	.word	0x08019a8c
 800e650:	08019b14 	.word	0x08019b14
 800e654:	08019ad0 	.word	0x08019ad0

0800e658 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d106      	bne.n	800e674 <tcp_listen_closed+0x1c>
 800e666:	4b14      	ldr	r3, [pc, #80]	; (800e6b8 <tcp_listen_closed+0x60>)
 800e668:	f240 1211 	movw	r2, #273	; 0x111
 800e66c:	4913      	ldr	r1, [pc, #76]	; (800e6bc <tcp_listen_closed+0x64>)
 800e66e:	4814      	ldr	r0, [pc, #80]	; (800e6c0 <tcp_listen_closed+0x68>)
 800e670:	f009 fd54 	bl	801811c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	7d1b      	ldrb	r3, [r3, #20]
 800e678:	2b01      	cmp	r3, #1
 800e67a:	d006      	beq.n	800e68a <tcp_listen_closed+0x32>
 800e67c:	4b0e      	ldr	r3, [pc, #56]	; (800e6b8 <tcp_listen_closed+0x60>)
 800e67e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e682:	4910      	ldr	r1, [pc, #64]	; (800e6c4 <tcp_listen_closed+0x6c>)
 800e684:	480e      	ldr	r0, [pc, #56]	; (800e6c0 <tcp_listen_closed+0x68>)
 800e686:	f009 fd49 	bl	801811c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e68a:	2301      	movs	r3, #1
 800e68c:	60fb      	str	r3, [r7, #12]
 800e68e:	e00b      	b.n	800e6a8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e690:	4a0d      	ldr	r2, [pc, #52]	; (800e6c8 <tcp_listen_closed+0x70>)
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	6879      	ldr	r1, [r7, #4]
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7ff ffb1 	bl	800e604 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	3301      	adds	r3, #1
 800e6a6:	60fb      	str	r3, [r7, #12]
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2b03      	cmp	r3, #3
 800e6ac:	d9f0      	bls.n	800e690 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e6ae:	bf00      	nop
 800e6b0:	bf00      	nop
 800e6b2:	3710      	adds	r7, #16
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	08019a8c 	.word	0x08019a8c
 800e6bc:	08019b3c 	.word	0x08019b3c
 800e6c0:	08019ad0 	.word	0x08019ad0
 800e6c4:	08019b48 	.word	0x08019b48
 800e6c8:	0801baec 	.word	0x0801baec

0800e6cc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e6cc:	b5b0      	push	{r4, r5, r7, lr}
 800e6ce:	b088      	sub	sp, #32
 800e6d0:	af04      	add	r7, sp, #16
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d106      	bne.n	800e6ec <tcp_close_shutdown+0x20>
 800e6de:	4b63      	ldr	r3, [pc, #396]	; (800e86c <tcp_close_shutdown+0x1a0>)
 800e6e0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e6e4:	4962      	ldr	r1, [pc, #392]	; (800e870 <tcp_close_shutdown+0x1a4>)
 800e6e6:	4863      	ldr	r0, [pc, #396]	; (800e874 <tcp_close_shutdown+0x1a8>)
 800e6e8:	f009 fd18 	bl	801811c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e6ec:	78fb      	ldrb	r3, [r7, #3]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d066      	beq.n	800e7c0 <tcp_close_shutdown+0xf4>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	7d1b      	ldrb	r3, [r3, #20]
 800e6f6:	2b04      	cmp	r3, #4
 800e6f8:	d003      	beq.n	800e702 <tcp_close_shutdown+0x36>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	7d1b      	ldrb	r3, [r3, #20]
 800e6fe:	2b07      	cmp	r3, #7
 800e700:	d15e      	bne.n	800e7c0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e706:	2b00      	cmp	r3, #0
 800e708:	d104      	bne.n	800e714 <tcp_close_shutdown+0x48>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e70e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e712:	d055      	beq.n	800e7c0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	8b5b      	ldrh	r3, [r3, #26]
 800e718:	f003 0310 	and.w	r3, r3, #16
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d106      	bne.n	800e72e <tcp_close_shutdown+0x62>
 800e720:	4b52      	ldr	r3, [pc, #328]	; (800e86c <tcp_close_shutdown+0x1a0>)
 800e722:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e726:	4954      	ldr	r1, [pc, #336]	; (800e878 <tcp_close_shutdown+0x1ac>)
 800e728:	4852      	ldr	r0, [pc, #328]	; (800e874 <tcp_close_shutdown+0x1a8>)
 800e72a:	f009 fcf7 	bl	801811c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e736:	687d      	ldr	r5, [r7, #4]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	3304      	adds	r3, #4
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	8ad2      	ldrh	r2, [r2, #22]
 800e740:	6879      	ldr	r1, [r7, #4]
 800e742:	8b09      	ldrh	r1, [r1, #24]
 800e744:	9102      	str	r1, [sp, #8]
 800e746:	9201      	str	r2, [sp, #4]
 800e748:	9300      	str	r3, [sp, #0]
 800e74a:	462b      	mov	r3, r5
 800e74c:	4622      	mov	r2, r4
 800e74e:	4601      	mov	r1, r0
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f005 fcf7 	bl	8014144 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f001 fad4 	bl	800fd04 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e75c:	4b47      	ldr	r3, [pc, #284]	; (800e87c <tcp_close_shutdown+0x1b0>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	687a      	ldr	r2, [r7, #4]
 800e762:	429a      	cmp	r2, r3
 800e764:	d105      	bne.n	800e772 <tcp_close_shutdown+0xa6>
 800e766:	4b45      	ldr	r3, [pc, #276]	; (800e87c <tcp_close_shutdown+0x1b0>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	68db      	ldr	r3, [r3, #12]
 800e76c:	4a43      	ldr	r2, [pc, #268]	; (800e87c <tcp_close_shutdown+0x1b0>)
 800e76e:	6013      	str	r3, [r2, #0]
 800e770:	e013      	b.n	800e79a <tcp_close_shutdown+0xce>
 800e772:	4b42      	ldr	r3, [pc, #264]	; (800e87c <tcp_close_shutdown+0x1b0>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	60fb      	str	r3, [r7, #12]
 800e778:	e00c      	b.n	800e794 <tcp_close_shutdown+0xc8>
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	68db      	ldr	r3, [r3, #12]
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	429a      	cmp	r2, r3
 800e782:	d104      	bne.n	800e78e <tcp_close_shutdown+0xc2>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	68da      	ldr	r2, [r3, #12]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	60da      	str	r2, [r3, #12]
 800e78c:	e005      	b.n	800e79a <tcp_close_shutdown+0xce>
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	68db      	ldr	r3, [r3, #12]
 800e792:	60fb      	str	r3, [r7, #12]
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d1ef      	bne.n	800e77a <tcp_close_shutdown+0xae>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2200      	movs	r2, #0
 800e79e:	60da      	str	r2, [r3, #12]
 800e7a0:	4b37      	ldr	r3, [pc, #220]	; (800e880 <tcp_close_shutdown+0x1b4>)
 800e7a2:	2201      	movs	r2, #1
 800e7a4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e7a6:	4b37      	ldr	r3, [pc, #220]	; (800e884 <tcp_close_shutdown+0x1b8>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	687a      	ldr	r2, [r7, #4]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d102      	bne.n	800e7b6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e7b0:	f003 ff6c 	bl	801268c <tcp_trigger_input_pcb_close>
 800e7b4:	e002      	b.n	800e7bc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7ff fed6 	bl	800e568 <tcp_free>
      }
      return ERR_OK;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	e050      	b.n	800e862 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	7d1b      	ldrb	r3, [r3, #20]
 800e7c4:	2b02      	cmp	r3, #2
 800e7c6:	d03b      	beq.n	800e840 <tcp_close_shutdown+0x174>
 800e7c8:	2b02      	cmp	r3, #2
 800e7ca:	dc44      	bgt.n	800e856 <tcp_close_shutdown+0x18a>
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d002      	beq.n	800e7d6 <tcp_close_shutdown+0x10a>
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d02a      	beq.n	800e82a <tcp_close_shutdown+0x15e>
 800e7d4:	e03f      	b.n	800e856 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	8adb      	ldrh	r3, [r3, #22]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d021      	beq.n	800e822 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e7de:	4b2a      	ldr	r3, [pc, #168]	; (800e888 <tcp_close_shutdown+0x1bc>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	687a      	ldr	r2, [r7, #4]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d105      	bne.n	800e7f4 <tcp_close_shutdown+0x128>
 800e7e8:	4b27      	ldr	r3, [pc, #156]	; (800e888 <tcp_close_shutdown+0x1bc>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	4a26      	ldr	r2, [pc, #152]	; (800e888 <tcp_close_shutdown+0x1bc>)
 800e7f0:	6013      	str	r3, [r2, #0]
 800e7f2:	e013      	b.n	800e81c <tcp_close_shutdown+0x150>
 800e7f4:	4b24      	ldr	r3, [pc, #144]	; (800e888 <tcp_close_shutdown+0x1bc>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	60bb      	str	r3, [r7, #8]
 800e7fa:	e00c      	b.n	800e816 <tcp_close_shutdown+0x14a>
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	687a      	ldr	r2, [r7, #4]
 800e802:	429a      	cmp	r2, r3
 800e804:	d104      	bne.n	800e810 <tcp_close_shutdown+0x144>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	68da      	ldr	r2, [r3, #12]
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	60da      	str	r2, [r3, #12]
 800e80e:	e005      	b.n	800e81c <tcp_close_shutdown+0x150>
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	68db      	ldr	r3, [r3, #12]
 800e814:	60bb      	str	r3, [r7, #8]
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d1ef      	bne.n	800e7fc <tcp_close_shutdown+0x130>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2200      	movs	r2, #0
 800e820:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f7ff fea0 	bl	800e568 <tcp_free>
      break;
 800e828:	e01a      	b.n	800e860 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f7ff ff14 	bl	800e658 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e830:	6879      	ldr	r1, [r7, #4]
 800e832:	4816      	ldr	r0, [pc, #88]	; (800e88c <tcp_close_shutdown+0x1c0>)
 800e834:	f001 fab6 	bl	800fda4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f7ff feb1 	bl	800e5a0 <tcp_free_listen>
      break;
 800e83e:	e00f      	b.n	800e860 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e840:	6879      	ldr	r1, [r7, #4]
 800e842:	480e      	ldr	r0, [pc, #56]	; (800e87c <tcp_close_shutdown+0x1b0>)
 800e844:	f001 faae 	bl	800fda4 <tcp_pcb_remove>
 800e848:	4b0d      	ldr	r3, [pc, #52]	; (800e880 <tcp_close_shutdown+0x1b4>)
 800e84a:	2201      	movs	r2, #1
 800e84c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f7ff fe8a 	bl	800e568 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e854:	e004      	b.n	800e860 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f000 f81a 	bl	800e890 <tcp_close_shutdown_fin>
 800e85c:	4603      	mov	r3, r0
 800e85e:	e000      	b.n	800e862 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e860:	2300      	movs	r3, #0
}
 800e862:	4618      	mov	r0, r3
 800e864:	3710      	adds	r7, #16
 800e866:	46bd      	mov	sp, r7
 800e868:	bdb0      	pop	{r4, r5, r7, pc}
 800e86a:	bf00      	nop
 800e86c:	08019a8c 	.word	0x08019a8c
 800e870:	08019b60 	.word	0x08019b60
 800e874:	08019ad0 	.word	0x08019ad0
 800e878:	08019b80 	.word	0x08019b80
 800e87c:	2000814c 	.word	0x2000814c
 800e880:	20008154 	.word	0x20008154
 800e884:	2000818c 	.word	0x2000818c
 800e888:	20008144 	.word	0x20008144
 800e88c:	20008148 	.word	0x20008148

0800e890 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b084      	sub	sp, #16
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d106      	bne.n	800e8ac <tcp_close_shutdown_fin+0x1c>
 800e89e:	4b2e      	ldr	r3, [pc, #184]	; (800e958 <tcp_close_shutdown_fin+0xc8>)
 800e8a0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e8a4:	492d      	ldr	r1, [pc, #180]	; (800e95c <tcp_close_shutdown_fin+0xcc>)
 800e8a6:	482e      	ldr	r0, [pc, #184]	; (800e960 <tcp_close_shutdown_fin+0xd0>)
 800e8a8:	f009 fc38 	bl	801811c <iprintf>

  switch (pcb->state) {
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	7d1b      	ldrb	r3, [r3, #20]
 800e8b0:	2b07      	cmp	r3, #7
 800e8b2:	d020      	beq.n	800e8f6 <tcp_close_shutdown_fin+0x66>
 800e8b4:	2b07      	cmp	r3, #7
 800e8b6:	dc2b      	bgt.n	800e910 <tcp_close_shutdown_fin+0x80>
 800e8b8:	2b03      	cmp	r3, #3
 800e8ba:	d002      	beq.n	800e8c2 <tcp_close_shutdown_fin+0x32>
 800e8bc:	2b04      	cmp	r3, #4
 800e8be:	d00d      	beq.n	800e8dc <tcp_close_shutdown_fin+0x4c>
 800e8c0:	e026      	b.n	800e910 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f004 fd4c 	bl	8013360 <tcp_send_fin>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e8cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d11f      	bne.n	800e914 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2205      	movs	r2, #5
 800e8d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e8da:	e01b      	b.n	800e914 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f004 fd3f 	bl	8013360 <tcp_send_fin>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e8e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d114      	bne.n	800e918 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2205      	movs	r2, #5
 800e8f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e8f4:	e010      	b.n	800e918 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f004 fd32 	bl	8013360 <tcp_send_fin>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d109      	bne.n	800e91c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2209      	movs	r2, #9
 800e90c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e90e:	e005      	b.n	800e91c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e910:	2300      	movs	r3, #0
 800e912:	e01c      	b.n	800e94e <tcp_close_shutdown_fin+0xbe>
      break;
 800e914:	bf00      	nop
 800e916:	e002      	b.n	800e91e <tcp_close_shutdown_fin+0x8e>
      break;
 800e918:	bf00      	nop
 800e91a:	e000      	b.n	800e91e <tcp_close_shutdown_fin+0x8e>
      break;
 800e91c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e91e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d103      	bne.n	800e92e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f004 fe58 	bl	80135dc <tcp_output>
 800e92c:	e00d      	b.n	800e94a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e92e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e936:	d108      	bne.n	800e94a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	8b5b      	ldrh	r3, [r3, #26]
 800e93c:	f043 0308 	orr.w	r3, r3, #8
 800e940:	b29a      	uxth	r2, r3
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e946:	2300      	movs	r3, #0
 800e948:	e001      	b.n	800e94e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e94a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3710      	adds	r7, #16
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	08019a8c 	.word	0x08019a8c
 800e95c:	08019b3c 	.word	0x08019b3c
 800e960:	08019ad0 	.word	0x08019ad0

0800e964 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d109      	bne.n	800e986 <tcp_close+0x22>
 800e972:	4b0f      	ldr	r3, [pc, #60]	; (800e9b0 <tcp_close+0x4c>)
 800e974:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e978:	490e      	ldr	r1, [pc, #56]	; (800e9b4 <tcp_close+0x50>)
 800e97a:	480f      	ldr	r0, [pc, #60]	; (800e9b8 <tcp_close+0x54>)
 800e97c:	f009 fbce 	bl	801811c <iprintf>
 800e980:	f06f 030f 	mvn.w	r3, #15
 800e984:	e00f      	b.n	800e9a6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	7d1b      	ldrb	r3, [r3, #20]
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d006      	beq.n	800e99c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	8b5b      	ldrh	r3, [r3, #26]
 800e992:	f043 0310 	orr.w	r3, r3, #16
 800e996:	b29a      	uxth	r2, r3
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e99c:	2101      	movs	r1, #1
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f7ff fe94 	bl	800e6cc <tcp_close_shutdown>
 800e9a4:	4603      	mov	r3, r0
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3708      	adds	r7, #8
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	08019a8c 	.word	0x08019a8c
 800e9b4:	08019b9c 	.word	0x08019b9c
 800e9b8:	08019ad0 	.word	0x08019ad0

0800e9bc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b08e      	sub	sp, #56	; 0x38
 800e9c0:	af04      	add	r7, sp, #16
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d107      	bne.n	800e9dc <tcp_abandon+0x20>
 800e9cc:	4b52      	ldr	r3, [pc, #328]	; (800eb18 <tcp_abandon+0x15c>)
 800e9ce:	f240 223d 	movw	r2, #573	; 0x23d
 800e9d2:	4952      	ldr	r1, [pc, #328]	; (800eb1c <tcp_abandon+0x160>)
 800e9d4:	4852      	ldr	r0, [pc, #328]	; (800eb20 <tcp_abandon+0x164>)
 800e9d6:	f009 fba1 	bl	801811c <iprintf>
 800e9da:	e099      	b.n	800eb10 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	7d1b      	ldrb	r3, [r3, #20]
 800e9e0:	2b01      	cmp	r3, #1
 800e9e2:	d106      	bne.n	800e9f2 <tcp_abandon+0x36>
 800e9e4:	4b4c      	ldr	r3, [pc, #304]	; (800eb18 <tcp_abandon+0x15c>)
 800e9e6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e9ea:	494e      	ldr	r1, [pc, #312]	; (800eb24 <tcp_abandon+0x168>)
 800e9ec:	484c      	ldr	r0, [pc, #304]	; (800eb20 <tcp_abandon+0x164>)
 800e9ee:	f009 fb95 	bl	801811c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	7d1b      	ldrb	r3, [r3, #20]
 800e9f6:	2b0a      	cmp	r3, #10
 800e9f8:	d107      	bne.n	800ea0a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e9fa:	6879      	ldr	r1, [r7, #4]
 800e9fc:	484a      	ldr	r0, [pc, #296]	; (800eb28 <tcp_abandon+0x16c>)
 800e9fe:	f001 f9d1 	bl	800fda4 <tcp_pcb_remove>
    tcp_free(pcb);
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f7ff fdb0 	bl	800e568 <tcp_free>
 800ea08:	e082      	b.n	800eb10 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea16:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea1c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea24:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	691b      	ldr	r3, [r3, #16]
 800ea2a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	7d1b      	ldrb	r3, [r3, #20]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d126      	bne.n	800ea82 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	8adb      	ldrh	r3, [r3, #22]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d02e      	beq.n	800ea9a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ea3c:	4b3b      	ldr	r3, [pc, #236]	; (800eb2c <tcp_abandon+0x170>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	687a      	ldr	r2, [r7, #4]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d105      	bne.n	800ea52 <tcp_abandon+0x96>
 800ea46:	4b39      	ldr	r3, [pc, #228]	; (800eb2c <tcp_abandon+0x170>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	4a37      	ldr	r2, [pc, #220]	; (800eb2c <tcp_abandon+0x170>)
 800ea4e:	6013      	str	r3, [r2, #0]
 800ea50:	e013      	b.n	800ea7a <tcp_abandon+0xbe>
 800ea52:	4b36      	ldr	r3, [pc, #216]	; (800eb2c <tcp_abandon+0x170>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	61fb      	str	r3, [r7, #28]
 800ea58:	e00c      	b.n	800ea74 <tcp_abandon+0xb8>
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	68db      	ldr	r3, [r3, #12]
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d104      	bne.n	800ea6e <tcp_abandon+0xb2>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	68da      	ldr	r2, [r3, #12]
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	60da      	str	r2, [r3, #12]
 800ea6c:	e005      	b.n	800ea7a <tcp_abandon+0xbe>
 800ea6e:	69fb      	ldr	r3, [r7, #28]
 800ea70:	68db      	ldr	r3, [r3, #12]
 800ea72:	61fb      	str	r3, [r7, #28]
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d1ef      	bne.n	800ea5a <tcp_abandon+0x9e>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	60da      	str	r2, [r3, #12]
 800ea80:	e00b      	b.n	800ea9a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	8adb      	ldrh	r3, [r3, #22]
 800ea8a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ea8c:	6879      	ldr	r1, [r7, #4]
 800ea8e:	4828      	ldr	r0, [pc, #160]	; (800eb30 <tcp_abandon+0x174>)
 800ea90:	f001 f988 	bl	800fda4 <tcp_pcb_remove>
 800ea94:	4b27      	ldr	r3, [pc, #156]	; (800eb34 <tcp_abandon+0x178>)
 800ea96:	2201      	movs	r2, #1
 800ea98:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d004      	beq.n	800eaac <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f000 fe7a 	bl	800f7a0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d004      	beq.n	800eabe <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eab8:	4618      	mov	r0, r3
 800eaba:	f000 fe71 	bl	800f7a0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d004      	beq.n	800ead0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eaca:	4618      	mov	r0, r3
 800eacc:	f000 fe68 	bl	800f7a0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ead0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d00e      	beq.n	800eaf4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ead6:	6879      	ldr	r1, [r7, #4]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	3304      	adds	r3, #4
 800eadc:	687a      	ldr	r2, [r7, #4]
 800eade:	8b12      	ldrh	r2, [r2, #24]
 800eae0:	9202      	str	r2, [sp, #8]
 800eae2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800eae4:	9201      	str	r2, [sp, #4]
 800eae6:	9300      	str	r3, [sp, #0]
 800eae8:	460b      	mov	r3, r1
 800eaea:	697a      	ldr	r2, [r7, #20]
 800eaec:	69b9      	ldr	r1, [r7, #24]
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f005 fb28 	bl	8014144 <tcp_rst>
    }
    last_state = pcb->state;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	7d1b      	ldrb	r3, [r3, #20]
 800eaf8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f7ff fd34 	bl	800e568 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d004      	beq.n	800eb10 <tcp_abandon+0x154>
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	f06f 010c 	mvn.w	r1, #12
 800eb0c:	68f8      	ldr	r0, [r7, #12]
 800eb0e:	4798      	blx	r3
  }
}
 800eb10:	3728      	adds	r7, #40	; 0x28
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	08019a8c 	.word	0x08019a8c
 800eb1c:	08019bd0 	.word	0x08019bd0
 800eb20:	08019ad0 	.word	0x08019ad0
 800eb24:	08019bec 	.word	0x08019bec
 800eb28:	20008150 	.word	0x20008150
 800eb2c:	20008144 	.word	0x20008144
 800eb30:	2000814c 	.word	0x2000814c
 800eb34:	20008154 	.word	0x20008154

0800eb38 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800eb40:	2101      	movs	r1, #1
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f7ff ff3a 	bl	800e9bc <tcp_abandon>
}
 800eb48:	bf00      	nop
 800eb4a:	3708      	adds	r7, #8
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d106      	bne.n	800eb6c <tcp_update_rcv_ann_wnd+0x1c>
 800eb5e:	4b25      	ldr	r3, [pc, #148]	; (800ebf4 <tcp_update_rcv_ann_wnd+0xa4>)
 800eb60:	f240 32a6 	movw	r2, #934	; 0x3a6
 800eb64:	4924      	ldr	r1, [pc, #144]	; (800ebf8 <tcp_update_rcv_ann_wnd+0xa8>)
 800eb66:	4825      	ldr	r0, [pc, #148]	; (800ebfc <tcp_update_rcv_ann_wnd+0xac>)
 800eb68:	f009 fad8 	bl	801811c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb70:	687a      	ldr	r2, [r7, #4]
 800eb72:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800eb74:	4413      	add	r3, r2
 800eb76:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800eb80:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800eb84:	bf28      	it	cs
 800eb86:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 800eb8a:	b292      	uxth	r2, r2
 800eb8c:	4413      	add	r3, r2
 800eb8e:	68fa      	ldr	r2, [r7, #12]
 800eb90:	1ad3      	subs	r3, r2, r3
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	db08      	blt.n	800eba8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eba2:	68fa      	ldr	r2, [r7, #12]
 800eba4:	1ad3      	subs	r3, r2, r3
 800eba6:	e020      	b.n	800ebea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb0:	1ad3      	subs	r3, r2, r3
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	dd03      	ble.n	800ebbe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ebbc:	e014      	b.n	800ebe8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc6:	1ad3      	subs	r3, r2, r3
 800ebc8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebd0:	d306      	bcc.n	800ebe0 <tcp_update_rcv_ann_wnd+0x90>
 800ebd2:	4b08      	ldr	r3, [pc, #32]	; (800ebf4 <tcp_update_rcv_ann_wnd+0xa4>)
 800ebd4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ebd8:	4909      	ldr	r1, [pc, #36]	; (800ec00 <tcp_update_rcv_ann_wnd+0xb0>)
 800ebda:	4808      	ldr	r0, [pc, #32]	; (800ebfc <tcp_update_rcv_ann_wnd+0xac>)
 800ebdc:	f009 fa9e 	bl	801811c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	b29a      	uxth	r2, r3
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ebe8:	2300      	movs	r3, #0
  }
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3710      	adds	r7, #16
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	08019a8c 	.word	0x08019a8c
 800ebf8:	08019ce8 	.word	0x08019ce8
 800ebfc:	08019ad0 	.word	0x08019ad0
 800ec00:	08019d0c 	.word	0x08019d0c

0800ec04 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d107      	bne.n	800ec26 <tcp_recved+0x22>
 800ec16:	4b1f      	ldr	r3, [pc, #124]	; (800ec94 <tcp_recved+0x90>)
 800ec18:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ec1c:	491e      	ldr	r1, [pc, #120]	; (800ec98 <tcp_recved+0x94>)
 800ec1e:	481f      	ldr	r0, [pc, #124]	; (800ec9c <tcp_recved+0x98>)
 800ec20:	f009 fa7c 	bl	801811c <iprintf>
 800ec24:	e032      	b.n	800ec8c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	7d1b      	ldrb	r3, [r3, #20]
 800ec2a:	2b01      	cmp	r3, #1
 800ec2c:	d106      	bne.n	800ec3c <tcp_recved+0x38>
 800ec2e:	4b19      	ldr	r3, [pc, #100]	; (800ec94 <tcp_recved+0x90>)
 800ec30:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ec34:	491a      	ldr	r1, [pc, #104]	; (800eca0 <tcp_recved+0x9c>)
 800ec36:	4819      	ldr	r0, [pc, #100]	; (800ec9c <tcp_recved+0x98>)
 800ec38:	f009 fa70 	bl	801811c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec40:	887b      	ldrh	r3, [r7, #2]
 800ec42:	4413      	add	r3, r2
 800ec44:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ec46:	89fb      	ldrh	r3, [r7, #14]
 800ec48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec4c:	d804      	bhi.n	800ec58 <tcp_recved+0x54>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec52:	89fa      	ldrh	r2, [r7, #14]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d204      	bcs.n	800ec62 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec5e:	851a      	strh	r2, [r3, #40]	; 0x28
 800ec60:	e002      	b.n	800ec68 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	89fa      	ldrh	r2, [r7, #14]
 800ec66:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f7ff ff71 	bl	800eb50 <tcp_update_rcv_ann_wnd>
 800ec6e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec76:	d309      	bcc.n	800ec8c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	8b5b      	ldrh	r3, [r3, #26]
 800ec7c:	f043 0302 	orr.w	r3, r3, #2
 800ec80:	b29a      	uxth	r2, r3
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f004 fca8 	bl	80135dc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ec8c:	3710      	adds	r7, #16
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	08019a8c 	.word	0x08019a8c
 800ec98:	08019d28 	.word	0x08019d28
 800ec9c:	08019ad0 	.word	0x08019ad0
 800eca0:	08019d40 	.word	0x08019d40

0800eca4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ecae:	4b1e      	ldr	r3, [pc, #120]	; (800ed28 <tcp_new_port+0x84>)
 800ecb0:	881b      	ldrh	r3, [r3, #0]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	b29a      	uxth	r2, r3
 800ecb6:	4b1c      	ldr	r3, [pc, #112]	; (800ed28 <tcp_new_port+0x84>)
 800ecb8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ecba:	4b1b      	ldr	r3, [pc, #108]	; (800ed28 <tcp_new_port+0x84>)
 800ecbc:	881b      	ldrh	r3, [r3, #0]
 800ecbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d103      	bne.n	800ecce <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ecc6:	4b18      	ldr	r3, [pc, #96]	; (800ed28 <tcp_new_port+0x84>)
 800ecc8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800eccc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ecce:	2300      	movs	r3, #0
 800ecd0:	71fb      	strb	r3, [r7, #7]
 800ecd2:	e01e      	b.n	800ed12 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ecd4:	79fb      	ldrb	r3, [r7, #7]
 800ecd6:	4a15      	ldr	r2, [pc, #84]	; (800ed2c <tcp_new_port+0x88>)
 800ecd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	603b      	str	r3, [r7, #0]
 800ece0:	e011      	b.n	800ed06 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	8ada      	ldrh	r2, [r3, #22]
 800ece6:	4b10      	ldr	r3, [pc, #64]	; (800ed28 <tcp_new_port+0x84>)
 800ece8:	881b      	ldrh	r3, [r3, #0]
 800ecea:	429a      	cmp	r2, r3
 800ecec:	d108      	bne.n	800ed00 <tcp_new_port+0x5c>
        n++;
 800ecee:	88bb      	ldrh	r3, [r7, #4]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ecf4:	88bb      	ldrh	r3, [r7, #4]
 800ecf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ecfa:	d3d8      	bcc.n	800ecae <tcp_new_port+0xa>
          return 0;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	e00d      	b.n	800ed1c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	68db      	ldr	r3, [r3, #12]
 800ed04:	603b      	str	r3, [r7, #0]
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d1ea      	bne.n	800ece2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ed0c:	79fb      	ldrb	r3, [r7, #7]
 800ed0e:	3301      	adds	r3, #1
 800ed10:	71fb      	strb	r3, [r7, #7]
 800ed12:	79fb      	ldrb	r3, [r7, #7]
 800ed14:	2b03      	cmp	r3, #3
 800ed16:	d9dd      	bls.n	800ecd4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ed18:	4b03      	ldr	r3, [pc, #12]	; (800ed28 <tcp_new_port+0x84>)
 800ed1a:	881b      	ldrh	r3, [r3, #0]
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr
 800ed28:	20000140 	.word	0x20000140
 800ed2c:	0801baec 	.word	0x0801baec

0800ed30 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b08a      	sub	sp, #40	; 0x28
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	60b9      	str	r1, [r7, #8]
 800ed3a:	603b      	str	r3, [r7, #0]
 800ed3c:	4613      	mov	r3, r2
 800ed3e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800ed40:	2300      	movs	r3, #0
 800ed42:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d109      	bne.n	800ed5e <tcp_connect+0x2e>
 800ed4a:	4b7d      	ldr	r3, [pc, #500]	; (800ef40 <tcp_connect+0x210>)
 800ed4c:	f240 4235 	movw	r2, #1077	; 0x435
 800ed50:	497c      	ldr	r1, [pc, #496]	; (800ef44 <tcp_connect+0x214>)
 800ed52:	487d      	ldr	r0, [pc, #500]	; (800ef48 <tcp_connect+0x218>)
 800ed54:	f009 f9e2 	bl	801811c <iprintf>
 800ed58:	f06f 030f 	mvn.w	r3, #15
 800ed5c:	e0ec      	b.n	800ef38 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d109      	bne.n	800ed78 <tcp_connect+0x48>
 800ed64:	4b76      	ldr	r3, [pc, #472]	; (800ef40 <tcp_connect+0x210>)
 800ed66:	f240 4236 	movw	r2, #1078	; 0x436
 800ed6a:	4978      	ldr	r1, [pc, #480]	; (800ef4c <tcp_connect+0x21c>)
 800ed6c:	4876      	ldr	r0, [pc, #472]	; (800ef48 <tcp_connect+0x218>)
 800ed6e:	f009 f9d5 	bl	801811c <iprintf>
 800ed72:	f06f 030f 	mvn.w	r3, #15
 800ed76:	e0df      	b.n	800ef38 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	7d1b      	ldrb	r3, [r3, #20]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d009      	beq.n	800ed94 <tcp_connect+0x64>
 800ed80:	4b6f      	ldr	r3, [pc, #444]	; (800ef40 <tcp_connect+0x210>)
 800ed82:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800ed86:	4972      	ldr	r1, [pc, #456]	; (800ef50 <tcp_connect+0x220>)
 800ed88:	486f      	ldr	r0, [pc, #444]	; (800ef48 <tcp_connect+0x218>)
 800ed8a:	f009 f9c7 	bl	801811c <iprintf>
 800ed8e:	f06f 0309 	mvn.w	r3, #9
 800ed92:	e0d1      	b.n	800ef38 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d002      	beq.n	800eda0 <tcp_connect+0x70>
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	e000      	b.n	800eda2 <tcp_connect+0x72>
 800eda0:	2300      	movs	r3, #0
 800eda2:	68fa      	ldr	r2, [r7, #12]
 800eda4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	88fa      	ldrh	r2, [r7, #6]
 800edaa:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	7a1b      	ldrb	r3, [r3, #8]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d006      	beq.n	800edc2 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	7a1b      	ldrb	r3, [r3, #8]
 800edb8:	4618      	mov	r0, r3
 800edba:	f7fe fdd5 	bl	800d968 <netif_get_by_index>
 800edbe:	6278      	str	r0, [r7, #36]	; 0x24
 800edc0:	e005      	b.n	800edce <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	3304      	adds	r3, #4
 800edc6:	4618      	mov	r0, r3
 800edc8:	f006 ff5a 	bl	8015c80 <ip4_route>
 800edcc:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800edce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d102      	bne.n	800edda <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800edd4:	f06f 0303 	mvn.w	r3, #3
 800edd8:	e0ae      	b.n	800ef38 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d003      	beq.n	800ede8 <tcp_connect+0xb8>
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d111      	bne.n	800ee0c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800ede8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edea:	2b00      	cmp	r3, #0
 800edec:	d002      	beq.n	800edf4 <tcp_connect+0xc4>
 800edee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf0:	3304      	adds	r3, #4
 800edf2:	e000      	b.n	800edf6 <tcp_connect+0xc6>
 800edf4:	2300      	movs	r3, #0
 800edf6:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d102      	bne.n	800ee04 <tcp_connect+0xd4>
      return ERR_RTE;
 800edfe:	f06f 0303 	mvn.w	r3, #3
 800ee02:	e099      	b.n	800ef38 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	681a      	ldr	r2, [r3, #0]
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	8adb      	ldrh	r3, [r3, #22]
 800ee10:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	8adb      	ldrh	r3, [r3, #22]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d10c      	bne.n	800ee34 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800ee1a:	f7ff ff43 	bl	800eca4 <tcp_new_port>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	461a      	mov	r2, r3
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	8adb      	ldrh	r3, [r3, #22]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d102      	bne.n	800ee34 <tcp_connect+0x104>
      return ERR_BUF;
 800ee2e:	f06f 0301 	mvn.w	r3, #1
 800ee32:	e081      	b.n	800ef38 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f001 f849 	bl	800fecc <tcp_next_iss>
 800ee3a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	697a      	ldr	r2, [r7, #20]
 800ee46:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	1e5a      	subs	r2, r3, #1
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	1e5a      	subs	r2, r3, #1
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	1e5a      	subs	r2, r3, #1
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee66:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ee88:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	3304      	adds	r3, #4
 800ee92:	461a      	mov	r2, r3
 800ee94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee96:	f001 f83f 	bl	800ff18 <tcp_eff_send_mss_netif>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2201      	movs	r2, #1
 800eea6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	683a      	ldr	r2, [r7, #0]
 800eeae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800eeb2:	2102      	movs	r1, #2
 800eeb4:	68f8      	ldr	r0, [r7, #12]
 800eeb6:	f004 faa3 	bl	8013400 <tcp_enqueue_flags>
 800eeba:	4603      	mov	r3, r0
 800eebc:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800eebe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d136      	bne.n	800ef34 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2202      	movs	r2, #2
 800eeca:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800eecc:	8b7b      	ldrh	r3, [r7, #26]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d021      	beq.n	800ef16 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800eed2:	4b20      	ldr	r3, [pc, #128]	; (800ef54 <tcp_connect+0x224>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	68fa      	ldr	r2, [r7, #12]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d105      	bne.n	800eee8 <tcp_connect+0x1b8>
 800eedc:	4b1d      	ldr	r3, [pc, #116]	; (800ef54 <tcp_connect+0x224>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	68db      	ldr	r3, [r3, #12]
 800eee2:	4a1c      	ldr	r2, [pc, #112]	; (800ef54 <tcp_connect+0x224>)
 800eee4:	6013      	str	r3, [r2, #0]
 800eee6:	e013      	b.n	800ef10 <tcp_connect+0x1e0>
 800eee8:	4b1a      	ldr	r3, [pc, #104]	; (800ef54 <tcp_connect+0x224>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	623b      	str	r3, [r7, #32]
 800eeee:	e00c      	b.n	800ef0a <tcp_connect+0x1da>
 800eef0:	6a3b      	ldr	r3, [r7, #32]
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	68fa      	ldr	r2, [r7, #12]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d104      	bne.n	800ef04 <tcp_connect+0x1d4>
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	68da      	ldr	r2, [r3, #12]
 800eefe:	6a3b      	ldr	r3, [r7, #32]
 800ef00:	60da      	str	r2, [r3, #12]
 800ef02:	e005      	b.n	800ef10 <tcp_connect+0x1e0>
 800ef04:	6a3b      	ldr	r3, [r7, #32]
 800ef06:	68db      	ldr	r3, [r3, #12]
 800ef08:	623b      	str	r3, [r7, #32]
 800ef0a:	6a3b      	ldr	r3, [r7, #32]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d1ef      	bne.n	800eef0 <tcp_connect+0x1c0>
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	2200      	movs	r2, #0
 800ef14:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800ef16:	4b10      	ldr	r3, [pc, #64]	; (800ef58 <tcp_connect+0x228>)
 800ef18:	681a      	ldr	r2, [r3, #0]
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	60da      	str	r2, [r3, #12]
 800ef1e:	4a0e      	ldr	r2, [pc, #56]	; (800ef58 <tcp_connect+0x228>)
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	6013      	str	r3, [r2, #0]
 800ef24:	f005 face 	bl	80144c4 <tcp_timer_needed>
 800ef28:	4b0c      	ldr	r3, [pc, #48]	; (800ef5c <tcp_connect+0x22c>)
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800ef2e:	68f8      	ldr	r0, [r7, #12]
 800ef30:	f004 fb54 	bl	80135dc <tcp_output>
  }
  return ret;
 800ef34:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3728      	adds	r7, #40	; 0x28
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}
 800ef40:	08019a8c 	.word	0x08019a8c
 800ef44:	08019d68 	.word	0x08019d68
 800ef48:	08019ad0 	.word	0x08019ad0
 800ef4c:	08019d84 	.word	0x08019d84
 800ef50:	08019da0 	.word	0x08019da0
 800ef54:	20008144 	.word	0x20008144
 800ef58:	2000814c 	.word	0x2000814c
 800ef5c:	20008154 	.word	0x20008154

0800ef60 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ef60:	b5b0      	push	{r4, r5, r7, lr}
 800ef62:	b090      	sub	sp, #64	; 0x40
 800ef64:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ef66:	2300      	movs	r3, #0
 800ef68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ef6c:	4b94      	ldr	r3, [pc, #592]	; (800f1c0 <tcp_slowtmr+0x260>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	3301      	adds	r3, #1
 800ef72:	4a93      	ldr	r2, [pc, #588]	; (800f1c0 <tcp_slowtmr+0x260>)
 800ef74:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ef76:	4b93      	ldr	r3, [pc, #588]	; (800f1c4 <tcp_slowtmr+0x264>)
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	b2da      	uxtb	r2, r3
 800ef7e:	4b91      	ldr	r3, [pc, #580]	; (800f1c4 <tcp_slowtmr+0x264>)
 800ef80:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ef82:	2300      	movs	r3, #0
 800ef84:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ef86:	4b90      	ldr	r3, [pc, #576]	; (800f1c8 <tcp_slowtmr+0x268>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ef8c:	e29f      	b.n	800f4ce <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ef8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef90:	7d1b      	ldrb	r3, [r3, #20]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d106      	bne.n	800efa4 <tcp_slowtmr+0x44>
 800ef96:	4b8d      	ldr	r3, [pc, #564]	; (800f1cc <tcp_slowtmr+0x26c>)
 800ef98:	f240 42be 	movw	r2, #1214	; 0x4be
 800ef9c:	498c      	ldr	r1, [pc, #560]	; (800f1d0 <tcp_slowtmr+0x270>)
 800ef9e:	488d      	ldr	r0, [pc, #564]	; (800f1d4 <tcp_slowtmr+0x274>)
 800efa0:	f009 f8bc 	bl	801811c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800efa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa6:	7d1b      	ldrb	r3, [r3, #20]
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d106      	bne.n	800efba <tcp_slowtmr+0x5a>
 800efac:	4b87      	ldr	r3, [pc, #540]	; (800f1cc <tcp_slowtmr+0x26c>)
 800efae:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800efb2:	4989      	ldr	r1, [pc, #548]	; (800f1d8 <tcp_slowtmr+0x278>)
 800efb4:	4887      	ldr	r0, [pc, #540]	; (800f1d4 <tcp_slowtmr+0x274>)
 800efb6:	f009 f8b1 	bl	801811c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800efba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbc:	7d1b      	ldrb	r3, [r3, #20]
 800efbe:	2b0a      	cmp	r3, #10
 800efc0:	d106      	bne.n	800efd0 <tcp_slowtmr+0x70>
 800efc2:	4b82      	ldr	r3, [pc, #520]	; (800f1cc <tcp_slowtmr+0x26c>)
 800efc4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800efc8:	4984      	ldr	r1, [pc, #528]	; (800f1dc <tcp_slowtmr+0x27c>)
 800efca:	4882      	ldr	r0, [pc, #520]	; (800f1d4 <tcp_slowtmr+0x274>)
 800efcc:	f009 f8a6 	bl	801811c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800efd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd2:	7f9a      	ldrb	r2, [r3, #30]
 800efd4:	4b7b      	ldr	r3, [pc, #492]	; (800f1c4 <tcp_slowtmr+0x264>)
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d105      	bne.n	800efe8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800efdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efde:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800efe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe2:	68db      	ldr	r3, [r3, #12]
 800efe4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800efe6:	e272      	b.n	800f4ce <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800efe8:	4b76      	ldr	r3, [pc, #472]	; (800f1c4 <tcp_slowtmr+0x264>)
 800efea:	781a      	ldrb	r2, [r3, #0]
 800efec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efee:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800eff0:	2300      	movs	r3, #0
 800eff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800eff6:	2300      	movs	r3, #0
 800eff8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800effc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effe:	7d1b      	ldrb	r3, [r3, #20]
 800f000:	2b02      	cmp	r3, #2
 800f002:	d10a      	bne.n	800f01a <tcp_slowtmr+0xba>
 800f004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f006:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f00a:	2b05      	cmp	r3, #5
 800f00c:	d905      	bls.n	800f01a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f00e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f012:	3301      	adds	r3, #1
 800f014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f018:	e11e      	b.n	800f258 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f01c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f020:	2b0b      	cmp	r3, #11
 800f022:	d905      	bls.n	800f030 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f028:	3301      	adds	r3, #1
 800f02a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f02e:	e113      	b.n	800f258 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f032:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f036:	2b00      	cmp	r3, #0
 800f038:	d075      	beq.n	800f126 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d006      	beq.n	800f050 <tcp_slowtmr+0xf0>
 800f042:	4b62      	ldr	r3, [pc, #392]	; (800f1cc <tcp_slowtmr+0x26c>)
 800f044:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f048:	4965      	ldr	r1, [pc, #404]	; (800f1e0 <tcp_slowtmr+0x280>)
 800f04a:	4862      	ldr	r0, [pc, #392]	; (800f1d4 <tcp_slowtmr+0x274>)
 800f04c:	f009 f866 	bl	801811c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f054:	2b00      	cmp	r3, #0
 800f056:	d106      	bne.n	800f066 <tcp_slowtmr+0x106>
 800f058:	4b5c      	ldr	r3, [pc, #368]	; (800f1cc <tcp_slowtmr+0x26c>)
 800f05a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f05e:	4961      	ldr	r1, [pc, #388]	; (800f1e4 <tcp_slowtmr+0x284>)
 800f060:	485c      	ldr	r0, [pc, #368]	; (800f1d4 <tcp_slowtmr+0x274>)
 800f062:	f009 f85b 	bl	801811c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f068:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f06c:	2b0b      	cmp	r3, #11
 800f06e:	d905      	bls.n	800f07c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f074:	3301      	adds	r3, #1
 800f076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f07a:	e0ed      	b.n	800f258 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f082:	3b01      	subs	r3, #1
 800f084:	4a58      	ldr	r2, [pc, #352]	; (800f1e8 <tcp_slowtmr+0x288>)
 800f086:	5cd3      	ldrb	r3, [r2, r3]
 800f088:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f090:	7c7a      	ldrb	r2, [r7, #17]
 800f092:	429a      	cmp	r2, r3
 800f094:	d907      	bls.n	800f0a6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f098:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f09c:	3301      	adds	r3, #1
 800f09e:	b2da      	uxtb	r2, r3
 800f0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f0ac:	7c7a      	ldrb	r2, [r7, #17]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	f200 80d2 	bhi.w	800f258 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d108      	bne.n	800f0d4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f0c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0c4:	f005 f930 	bl	8014328 <tcp_zero_window_probe>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d014      	beq.n	800f0f8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	623b      	str	r3, [r7, #32]
 800f0d2:	e011      	b.n	800f0f8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0da:	4619      	mov	r1, r3
 800f0dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0de:	f003 fff7 	bl	80130d0 <tcp_split_unsent_seg>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d107      	bne.n	800f0f8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f0e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0ea:	f004 fa77 	bl	80135dc <tcp_output>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d101      	bne.n	800f0f8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f0f8:	6a3b      	ldr	r3, [r7, #32]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	f000 80ac 	beq.w	800f258 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f102:	2200      	movs	r2, #0
 800f104:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f10e:	2b06      	cmp	r3, #6
 800f110:	f200 80a2 	bhi.w	800f258 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f116:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f11a:	3301      	adds	r3, #1
 800f11c:	b2da      	uxtb	r2, r3
 800f11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f120:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f124:	e098      	b.n	800f258 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f128:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	db0f      	blt.n	800f150 <tcp_slowtmr+0x1f0>
 800f130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f132:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f136:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f13a:	4293      	cmp	r3, r2
 800f13c:	d008      	beq.n	800f150 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f140:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f144:	b29b      	uxth	r3, r3
 800f146:	3301      	adds	r3, #1
 800f148:	b29b      	uxth	r3, r3
 800f14a:	b21a      	sxth	r2, r3
 800f14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f152:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f158:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f15c:	429a      	cmp	r2, r3
 800f15e:	db7b      	blt.n	800f258 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f162:	f004 fd2f 	bl	8013bc4 <tcp_rexmit_rto_prepare>
 800f166:	4603      	mov	r3, r0
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d007      	beq.n	800f17c <tcp_slowtmr+0x21c>
 800f16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f170:	2b00      	cmp	r3, #0
 800f172:	d171      	bne.n	800f258 <tcp_slowtmr+0x2f8>
 800f174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d06d      	beq.n	800f258 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17e:	7d1b      	ldrb	r3, [r3, #20]
 800f180:	2b02      	cmp	r3, #2
 800f182:	d03a      	beq.n	800f1fa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f186:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f18a:	2b0c      	cmp	r3, #12
 800f18c:	bf28      	it	cs
 800f18e:	230c      	movcs	r3, #12
 800f190:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f194:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f198:	10db      	asrs	r3, r3, #3
 800f19a:	b21b      	sxth	r3, r3
 800f19c:	461a      	mov	r2, r3
 800f19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f1a4:	4413      	add	r3, r2
 800f1a6:	7efa      	ldrb	r2, [r7, #27]
 800f1a8:	4910      	ldr	r1, [pc, #64]	; (800f1ec <tcp_slowtmr+0x28c>)
 800f1aa:	5c8a      	ldrb	r2, [r1, r2]
 800f1ac:	4093      	lsls	r3, r2
 800f1ae:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	dc1a      	bgt.n	800f1f0 <tcp_slowtmr+0x290>
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	b21a      	sxth	r2, r3
 800f1be:	e019      	b.n	800f1f4 <tcp_slowtmr+0x294>
 800f1c0:	20008140 	.word	0x20008140
 800f1c4:	20008156 	.word	0x20008156
 800f1c8:	2000814c 	.word	0x2000814c
 800f1cc:	08019a8c 	.word	0x08019a8c
 800f1d0:	08019dd0 	.word	0x08019dd0
 800f1d4:	08019ad0 	.word	0x08019ad0
 800f1d8:	08019dfc 	.word	0x08019dfc
 800f1dc:	08019e28 	.word	0x08019e28
 800f1e0:	08019e58 	.word	0x08019e58
 800f1e4:	08019e8c 	.word	0x08019e8c
 800f1e8:	0801bae4 	.word	0x0801bae4
 800f1ec:	0801bad4 	.word	0x0801bad4
 800f1f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f202:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f208:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f20c:	4293      	cmp	r3, r2
 800f20e:	bf28      	it	cs
 800f210:	4613      	movcs	r3, r2
 800f212:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f214:	8a7b      	ldrh	r3, [r7, #18]
 800f216:	085b      	lsrs	r3, r3, #1
 800f218:	b29a      	uxth	r2, r3
 800f21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f222:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f228:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f22a:	005b      	lsls	r3, r3, #1
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	429a      	cmp	r2, r3
 800f230:	d206      	bcs.n	800f240 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f234:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f236:	005b      	lsls	r3, r3, #1
 800f238:	b29a      	uxth	r2, r3
 800f23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f242:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f246:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24c:	2200      	movs	r2, #0
 800f24e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f252:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f254:	f004 fd26 	bl	8013ca4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25a:	7d1b      	ldrb	r3, [r3, #20]
 800f25c:	2b06      	cmp	r3, #6
 800f25e:	d111      	bne.n	800f284 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f262:	8b5b      	ldrh	r3, [r3, #26]
 800f264:	f003 0310 	and.w	r3, r3, #16
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d00b      	beq.n	800f284 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f26c:	4b9d      	ldr	r3, [pc, #628]	; (800f4e4 <tcp_slowtmr+0x584>)
 800f26e:	681a      	ldr	r2, [r3, #0]
 800f270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f272:	6a1b      	ldr	r3, [r3, #32]
 800f274:	1ad3      	subs	r3, r2, r3
 800f276:	2b28      	cmp	r3, #40	; 0x28
 800f278:	d904      	bls.n	800f284 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f27a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f27e:	3301      	adds	r3, #1
 800f280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f286:	7a5b      	ldrb	r3, [r3, #9]
 800f288:	f003 0308 	and.w	r3, r3, #8
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d04c      	beq.n	800f32a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f292:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f294:	2b04      	cmp	r3, #4
 800f296:	d003      	beq.n	800f2a0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f29c:	2b07      	cmp	r3, #7
 800f29e:	d144      	bne.n	800f32a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f2a0:	4b90      	ldr	r3, [pc, #576]	; (800f4e4 <tcp_slowtmr+0x584>)
 800f2a2:	681a      	ldr	r2, [r3, #0]
 800f2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a6:	6a1b      	ldr	r3, [r3, #32]
 800f2a8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f2b0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800f2b4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800f2b8:	498b      	ldr	r1, [pc, #556]	; (800f4e8 <tcp_slowtmr+0x588>)
 800f2ba:	fba1 1303 	umull	r1, r3, r1, r3
 800f2be:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d90a      	bls.n	800f2da <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f2c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2c8:	3301      	adds	r3, #1
 800f2ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f2ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f2d8:	e027      	b.n	800f32a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f2da:	4b82      	ldr	r3, [pc, #520]	; (800f4e4 <tcp_slowtmr+0x584>)
 800f2dc:	681a      	ldr	r2, [r3, #0]
 800f2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e0:	6a1b      	ldr	r3, [r3, #32]
 800f2e2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	4b7e      	ldr	r3, [pc, #504]	; (800f4ec <tcp_slowtmr+0x58c>)
 800f2f4:	fb00 f303 	mul.w	r3, r0, r3
 800f2f8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f2fa:	497b      	ldr	r1, [pc, #492]	; (800f4e8 <tcp_slowtmr+0x588>)
 800f2fc:	fba1 1303 	umull	r1, r3, r1, r3
 800f300:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f302:	429a      	cmp	r2, r3
 800f304:	d911      	bls.n	800f32a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f306:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f308:	f004 ffce 	bl	80142a8 <tcp_keepalive>
 800f30c:	4603      	mov	r3, r0
 800f30e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f312:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f316:	2b00      	cmp	r3, #0
 800f318:	d107      	bne.n	800f32a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f320:	3301      	adds	r3, #1
 800f322:	b2da      	uxtb	r2, r3
 800f324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f326:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d011      	beq.n	800f356 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f332:	4b6c      	ldr	r3, [pc, #432]	; (800f4e4 <tcp_slowtmr+0x584>)
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f338:	6a1b      	ldr	r3, [r3, #32]
 800f33a:	1ad2      	subs	r2, r2, r3
 800f33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f342:	4619      	mov	r1, r3
 800f344:	460b      	mov	r3, r1
 800f346:	005b      	lsls	r3, r3, #1
 800f348:	440b      	add	r3, r1
 800f34a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d302      	bcc.n	800f356 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f352:	f000 fe8b 	bl	801006c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f358:	7d1b      	ldrb	r3, [r3, #20]
 800f35a:	2b03      	cmp	r3, #3
 800f35c:	d10b      	bne.n	800f376 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f35e:	4b61      	ldr	r3, [pc, #388]	; (800f4e4 <tcp_slowtmr+0x584>)
 800f360:	681a      	ldr	r2, [r3, #0]
 800f362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f364:	6a1b      	ldr	r3, [r3, #32]
 800f366:	1ad3      	subs	r3, r2, r3
 800f368:	2b28      	cmp	r3, #40	; 0x28
 800f36a:	d904      	bls.n	800f376 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f36c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f370:	3301      	adds	r3, #1
 800f372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f378:	7d1b      	ldrb	r3, [r3, #20]
 800f37a:	2b09      	cmp	r3, #9
 800f37c:	d10b      	bne.n	800f396 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f37e:	4b59      	ldr	r3, [pc, #356]	; (800f4e4 <tcp_slowtmr+0x584>)
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f384:	6a1b      	ldr	r3, [r3, #32]
 800f386:	1ad3      	subs	r3, r2, r3
 800f388:	2bf0      	cmp	r3, #240	; 0xf0
 800f38a:	d904      	bls.n	800f396 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f38c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f390:	3301      	adds	r3, #1
 800f392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d060      	beq.n	800f460 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3a4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f3a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3a8:	f000 fcac 	bl	800fd04 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d010      	beq.n	800f3d4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f3b2:	4b4f      	ldr	r3, [pc, #316]	; (800f4f0 <tcp_slowtmr+0x590>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d106      	bne.n	800f3ca <tcp_slowtmr+0x46a>
 800f3bc:	4b4d      	ldr	r3, [pc, #308]	; (800f4f4 <tcp_slowtmr+0x594>)
 800f3be:	f240 526d 	movw	r2, #1389	; 0x56d
 800f3c2:	494d      	ldr	r1, [pc, #308]	; (800f4f8 <tcp_slowtmr+0x598>)
 800f3c4:	484d      	ldr	r0, [pc, #308]	; (800f4fc <tcp_slowtmr+0x59c>)
 800f3c6:	f008 fea9 	bl	801811c <iprintf>
        prev->next = pcb->next;
 800f3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3cc:	68da      	ldr	r2, [r3, #12]
 800f3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d0:	60da      	str	r2, [r3, #12]
 800f3d2:	e00f      	b.n	800f3f4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f3d4:	4b46      	ldr	r3, [pc, #280]	; (800f4f0 <tcp_slowtmr+0x590>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d006      	beq.n	800f3ec <tcp_slowtmr+0x48c>
 800f3de:	4b45      	ldr	r3, [pc, #276]	; (800f4f4 <tcp_slowtmr+0x594>)
 800f3e0:	f240 5271 	movw	r2, #1393	; 0x571
 800f3e4:	4946      	ldr	r1, [pc, #280]	; (800f500 <tcp_slowtmr+0x5a0>)
 800f3e6:	4845      	ldr	r0, [pc, #276]	; (800f4fc <tcp_slowtmr+0x59c>)
 800f3e8:	f008 fe98 	bl	801811c <iprintf>
        tcp_active_pcbs = pcb->next;
 800f3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ee:	68db      	ldr	r3, [r3, #12]
 800f3f0:	4a3f      	ldr	r2, [pc, #252]	; (800f4f0 <tcp_slowtmr+0x590>)
 800f3f2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f3f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d013      	beq.n	800f424 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fe:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f402:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f404:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f408:	3304      	adds	r3, #4
 800f40a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f40c:	8ad2      	ldrh	r2, [r2, #22]
 800f40e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f410:	8b09      	ldrh	r1, [r1, #24]
 800f412:	9102      	str	r1, [sp, #8]
 800f414:	9201      	str	r2, [sp, #4]
 800f416:	9300      	str	r3, [sp, #0]
 800f418:	462b      	mov	r3, r5
 800f41a:	4622      	mov	r2, r4
 800f41c:	4601      	mov	r1, r0
 800f41e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f420:	f004 fe90 	bl	8014144 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f426:	691b      	ldr	r3, [r3, #16]
 800f428:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42c:	7d1b      	ldrb	r3, [r3, #20]
 800f42e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f432:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f436:	68db      	ldr	r3, [r3, #12]
 800f438:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f43a:	6838      	ldr	r0, [r7, #0]
 800f43c:	f7ff f894 	bl	800e568 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f440:	4b30      	ldr	r3, [pc, #192]	; (800f504 <tcp_slowtmr+0x5a4>)
 800f442:	2200      	movs	r2, #0
 800f444:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d004      	beq.n	800f456 <tcp_slowtmr+0x4f6>
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f06f 010c 	mvn.w	r1, #12
 800f452:	68b8      	ldr	r0, [r7, #8]
 800f454:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f456:	4b2b      	ldr	r3, [pc, #172]	; (800f504 <tcp_slowtmr+0x5a4>)
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d037      	beq.n	800f4ce <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f45e:	e590      	b.n	800ef82 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f462:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f466:	68db      	ldr	r3, [r3, #12]
 800f468:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46c:	7f1b      	ldrb	r3, [r3, #28]
 800f46e:	3301      	adds	r3, #1
 800f470:	b2da      	uxtb	r2, r3
 800f472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f474:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f478:	7f1a      	ldrb	r2, [r3, #28]
 800f47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47c:	7f5b      	ldrb	r3, [r3, #29]
 800f47e:	429a      	cmp	r2, r3
 800f480:	d325      	bcc.n	800f4ce <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f484:	2200      	movs	r2, #0
 800f486:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f488:	4b1e      	ldr	r3, [pc, #120]	; (800f504 <tcp_slowtmr+0x5a4>)
 800f48a:	2200      	movs	r2, #0
 800f48c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f494:	2b00      	cmp	r3, #0
 800f496:	d00b      	beq.n	800f4b0 <tcp_slowtmr+0x550>
 800f498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f49e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4a0:	6912      	ldr	r2, [r2, #16]
 800f4a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f4a4:	4610      	mov	r0, r2
 800f4a6:	4798      	blx	r3
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f4ae:	e002      	b.n	800f4b6 <tcp_slowtmr+0x556>
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f4b6:	4b13      	ldr	r3, [pc, #76]	; (800f504 <tcp_slowtmr+0x5a4>)
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d000      	beq.n	800f4c0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800f4be:	e560      	b.n	800ef82 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f4c0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d102      	bne.n	800f4ce <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f4c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4ca:	f004 f887 	bl	80135dc <tcp_output>
  while (pcb != NULL) {
 800f4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	f47f ad5c 	bne.w	800ef8e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f4da:	4b0b      	ldr	r3, [pc, #44]	; (800f508 <tcp_slowtmr+0x5a8>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f4e0:	e067      	b.n	800f5b2 <tcp_slowtmr+0x652>
 800f4e2:	bf00      	nop
 800f4e4:	20008140 	.word	0x20008140
 800f4e8:	10624dd3 	.word	0x10624dd3
 800f4ec:	000124f8 	.word	0x000124f8
 800f4f0:	2000814c 	.word	0x2000814c
 800f4f4:	08019a8c 	.word	0x08019a8c
 800f4f8:	08019ec4 	.word	0x08019ec4
 800f4fc:	08019ad0 	.word	0x08019ad0
 800f500:	08019ef0 	.word	0x08019ef0
 800f504:	20008154 	.word	0x20008154
 800f508:	20008150 	.word	0x20008150
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f50e:	7d1b      	ldrb	r3, [r3, #20]
 800f510:	2b0a      	cmp	r3, #10
 800f512:	d006      	beq.n	800f522 <tcp_slowtmr+0x5c2>
 800f514:	4b2b      	ldr	r3, [pc, #172]	; (800f5c4 <tcp_slowtmr+0x664>)
 800f516:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f51a:	492b      	ldr	r1, [pc, #172]	; (800f5c8 <tcp_slowtmr+0x668>)
 800f51c:	482b      	ldr	r0, [pc, #172]	; (800f5cc <tcp_slowtmr+0x66c>)
 800f51e:	f008 fdfd 	bl	801811c <iprintf>
    pcb_remove = 0;
 800f522:	2300      	movs	r3, #0
 800f524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f528:	4b29      	ldr	r3, [pc, #164]	; (800f5d0 <tcp_slowtmr+0x670>)
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f52e:	6a1b      	ldr	r3, [r3, #32]
 800f530:	1ad3      	subs	r3, r2, r3
 800f532:	2bf0      	cmp	r3, #240	; 0xf0
 800f534:	d904      	bls.n	800f540 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f53a:	3301      	adds	r3, #1
 800f53c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f544:	2b00      	cmp	r3, #0
 800f546:	d02f      	beq.n	800f5a8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f548:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f54a:	f000 fbdb 	bl	800fd04 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f550:	2b00      	cmp	r3, #0
 800f552:	d010      	beq.n	800f576 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f554:	4b1f      	ldr	r3, [pc, #124]	; (800f5d4 <tcp_slowtmr+0x674>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d106      	bne.n	800f56c <tcp_slowtmr+0x60c>
 800f55e:	4b19      	ldr	r3, [pc, #100]	; (800f5c4 <tcp_slowtmr+0x664>)
 800f560:	f240 52af 	movw	r2, #1455	; 0x5af
 800f564:	491c      	ldr	r1, [pc, #112]	; (800f5d8 <tcp_slowtmr+0x678>)
 800f566:	4819      	ldr	r0, [pc, #100]	; (800f5cc <tcp_slowtmr+0x66c>)
 800f568:	f008 fdd8 	bl	801811c <iprintf>
        prev->next = pcb->next;
 800f56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f56e:	68da      	ldr	r2, [r3, #12]
 800f570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f572:	60da      	str	r2, [r3, #12]
 800f574:	e00f      	b.n	800f596 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f576:	4b17      	ldr	r3, [pc, #92]	; (800f5d4 <tcp_slowtmr+0x674>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d006      	beq.n	800f58e <tcp_slowtmr+0x62e>
 800f580:	4b10      	ldr	r3, [pc, #64]	; (800f5c4 <tcp_slowtmr+0x664>)
 800f582:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f586:	4915      	ldr	r1, [pc, #84]	; (800f5dc <tcp_slowtmr+0x67c>)
 800f588:	4810      	ldr	r0, [pc, #64]	; (800f5cc <tcp_slowtmr+0x66c>)
 800f58a:	f008 fdc7 	bl	801811c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	4a10      	ldr	r2, [pc, #64]	; (800f5d4 <tcp_slowtmr+0x674>)
 800f594:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f598:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f59c:	68db      	ldr	r3, [r3, #12]
 800f59e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f5a0:	69f8      	ldr	r0, [r7, #28]
 800f5a2:	f7fe ffe1 	bl	800e568 <tcp_free>
 800f5a6:	e004      	b.n	800f5b2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ae:	68db      	ldr	r3, [r3, #12]
 800f5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d1a9      	bne.n	800f50c <tcp_slowtmr+0x5ac>
    }
  }
}
 800f5b8:	bf00      	nop
 800f5ba:	bf00      	nop
 800f5bc:	3730      	adds	r7, #48	; 0x30
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bdb0      	pop	{r4, r5, r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	08019a8c 	.word	0x08019a8c
 800f5c8:	08019f1c 	.word	0x08019f1c
 800f5cc:	08019ad0 	.word	0x08019ad0
 800f5d0:	20008140 	.word	0x20008140
 800f5d4:	20008150 	.word	0x20008150
 800f5d8:	08019f4c 	.word	0x08019f4c
 800f5dc:	08019f74 	.word	0x08019f74

0800f5e0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f5e6:	4b2d      	ldr	r3, [pc, #180]	; (800f69c <tcp_fasttmr+0xbc>)
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	b2da      	uxtb	r2, r3
 800f5ee:	4b2b      	ldr	r3, [pc, #172]	; (800f69c <tcp_fasttmr+0xbc>)
 800f5f0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f5f2:	4b2b      	ldr	r3, [pc, #172]	; (800f6a0 <tcp_fasttmr+0xc0>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f5f8:	e048      	b.n	800f68c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	7f9a      	ldrb	r2, [r3, #30]
 800f5fe:	4b27      	ldr	r3, [pc, #156]	; (800f69c <tcp_fasttmr+0xbc>)
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	429a      	cmp	r2, r3
 800f604:	d03f      	beq.n	800f686 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f606:	4b25      	ldr	r3, [pc, #148]	; (800f69c <tcp_fasttmr+0xbc>)
 800f608:	781a      	ldrb	r2, [r3, #0]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	8b5b      	ldrh	r3, [r3, #26]
 800f612:	f003 0301 	and.w	r3, r3, #1
 800f616:	2b00      	cmp	r3, #0
 800f618:	d010      	beq.n	800f63c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	8b5b      	ldrh	r3, [r3, #26]
 800f61e:	f043 0302 	orr.w	r3, r3, #2
 800f622:	b29a      	uxth	r2, r3
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f003 ffd7 	bl	80135dc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	8b5b      	ldrh	r3, [r3, #26]
 800f632:	f023 0303 	bic.w	r3, r3, #3
 800f636:	b29a      	uxth	r2, r3
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	8b5b      	ldrh	r3, [r3, #26]
 800f640:	f003 0308 	and.w	r3, r3, #8
 800f644:	2b00      	cmp	r3, #0
 800f646:	d009      	beq.n	800f65c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	8b5b      	ldrh	r3, [r3, #26]
 800f64c:	f023 0308 	bic.w	r3, r3, #8
 800f650:	b29a      	uxth	r2, r3
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f7ff f91a 	bl	800e890 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	68db      	ldr	r3, [r3, #12]
 800f660:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f666:	2b00      	cmp	r3, #0
 800f668:	d00a      	beq.n	800f680 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f66a:	4b0e      	ldr	r3, [pc, #56]	; (800f6a4 <tcp_fasttmr+0xc4>)
 800f66c:	2200      	movs	r2, #0
 800f66e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f000 f819 	bl	800f6a8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f676:	4b0b      	ldr	r3, [pc, #44]	; (800f6a4 <tcp_fasttmr+0xc4>)
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d000      	beq.n	800f680 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f67e:	e7b8      	b.n	800f5f2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	607b      	str	r3, [r7, #4]
 800f684:	e002      	b.n	800f68c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	68db      	ldr	r3, [r3, #12]
 800f68a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d1b3      	bne.n	800f5fa <tcp_fasttmr+0x1a>
    }
  }
}
 800f692:	bf00      	nop
 800f694:	bf00      	nop
 800f696:	3708      	adds	r7, #8
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	20008156 	.word	0x20008156
 800f6a0:	2000814c 	.word	0x2000814c
 800f6a4:	20008154 	.word	0x20008154

0800f6a8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f6a8:	b590      	push	{r4, r7, lr}
 800f6aa:	b085      	sub	sp, #20
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d109      	bne.n	800f6ca <tcp_process_refused_data+0x22>
 800f6b6:	4b37      	ldr	r3, [pc, #220]	; (800f794 <tcp_process_refused_data+0xec>)
 800f6b8:	f240 6209 	movw	r2, #1545	; 0x609
 800f6bc:	4936      	ldr	r1, [pc, #216]	; (800f798 <tcp_process_refused_data+0xf0>)
 800f6be:	4837      	ldr	r0, [pc, #220]	; (800f79c <tcp_process_refused_data+0xf4>)
 800f6c0:	f008 fd2c 	bl	801811c <iprintf>
 800f6c4:	f06f 030f 	mvn.w	r3, #15
 800f6c8:	e060      	b.n	800f78c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6ce:	7b5b      	ldrb	r3, [r3, #13]
 800f6d0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6d6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d00b      	beq.n	800f700 <tcp_process_refused_data+0x58>
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6918      	ldr	r0, [r3, #16]
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	68ba      	ldr	r2, [r7, #8]
 800f6f6:	6879      	ldr	r1, [r7, #4]
 800f6f8:	47a0      	blx	r4
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	73fb      	strb	r3, [r7, #15]
 800f6fe:	e007      	b.n	800f710 <tcp_process_refused_data+0x68>
 800f700:	2300      	movs	r3, #0
 800f702:	68ba      	ldr	r2, [r7, #8]
 800f704:	6879      	ldr	r1, [r7, #4]
 800f706:	2000      	movs	r0, #0
 800f708:	f000 f8a4 	bl	800f854 <tcp_recv_null>
 800f70c:	4603      	mov	r3, r0
 800f70e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d12a      	bne.n	800f76e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f718:	7bbb      	ldrb	r3, [r7, #14]
 800f71a:	f003 0320 	and.w	r3, r3, #32
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d033      	beq.n	800f78a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f72a:	d005      	beq.n	800f738 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f730:	3301      	adds	r3, #1
 800f732:	b29a      	uxth	r2, r3
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d00b      	beq.n	800f75a <tcp_process_refused_data+0xb2>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6918      	ldr	r0, [r3, #16]
 800f74c:	2300      	movs	r3, #0
 800f74e:	2200      	movs	r2, #0
 800f750:	6879      	ldr	r1, [r7, #4]
 800f752:	47a0      	blx	r4
 800f754:	4603      	mov	r3, r0
 800f756:	73fb      	strb	r3, [r7, #15]
 800f758:	e001      	b.n	800f75e <tcp_process_refused_data+0xb6>
 800f75a:	2300      	movs	r3, #0
 800f75c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f75e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f762:	f113 0f0d 	cmn.w	r3, #13
 800f766:	d110      	bne.n	800f78a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f768:	f06f 030c 	mvn.w	r3, #12
 800f76c:	e00e      	b.n	800f78c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f76e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f772:	f113 0f0d 	cmn.w	r3, #13
 800f776:	d102      	bne.n	800f77e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f778:	f06f 030c 	mvn.w	r3, #12
 800f77c:	e006      	b.n	800f78c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	68ba      	ldr	r2, [r7, #8]
 800f782:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f784:	f06f 0304 	mvn.w	r3, #4
 800f788:	e000      	b.n	800f78c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f78a:	2300      	movs	r3, #0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3714      	adds	r7, #20
 800f790:	46bd      	mov	sp, r7
 800f792:	bd90      	pop	{r4, r7, pc}
 800f794:	08019a8c 	.word	0x08019a8c
 800f798:	08019f9c 	.word	0x08019f9c
 800f79c:	08019ad0 	.word	0x08019ad0

0800f7a0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b084      	sub	sp, #16
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f7a8:	e007      	b.n	800f7ba <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f000 f80a 	bl	800f7ca <tcp_seg_free>
    seg = next;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d1f4      	bne.n	800f7aa <tcp_segs_free+0xa>
  }
}
 800f7c0:	bf00      	nop
 800f7c2:	bf00      	nop
 800f7c4:	3710      	adds	r7, #16
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}

0800f7ca <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f7ca:	b580      	push	{r7, lr}
 800f7cc:	b082      	sub	sp, #8
 800f7ce:	af00      	add	r7, sp, #0
 800f7d0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d00c      	beq.n	800f7f2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	685b      	ldr	r3, [r3, #4]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d004      	beq.n	800f7ea <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7fe fc1f 	bl	800e028 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f7ea:	6879      	ldr	r1, [r7, #4]
 800f7ec:	2003      	movs	r0, #3
 800f7ee:	f7fd fda5 	bl	800d33c <memp_free>
  }
}
 800f7f2:	bf00      	nop
 800f7f4:	3708      	adds	r7, #8
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
	...

0800f7fc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b084      	sub	sp, #16
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d106      	bne.n	800f818 <tcp_seg_copy+0x1c>
 800f80a:	4b0f      	ldr	r3, [pc, #60]	; (800f848 <tcp_seg_copy+0x4c>)
 800f80c:	f240 6282 	movw	r2, #1666	; 0x682
 800f810:	490e      	ldr	r1, [pc, #56]	; (800f84c <tcp_seg_copy+0x50>)
 800f812:	480f      	ldr	r0, [pc, #60]	; (800f850 <tcp_seg_copy+0x54>)
 800f814:	f008 fc82 	bl	801811c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f818:	2003      	movs	r0, #3
 800f81a:	f7fd fd1f 	bl	800d25c <memp_malloc>
 800f81e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d101      	bne.n	800f82a <tcp_seg_copy+0x2e>
    return NULL;
 800f826:	2300      	movs	r3, #0
 800f828:	e00a      	b.n	800f840 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f82a:	2210      	movs	r2, #16
 800f82c:	6879      	ldr	r1, [r7, #4]
 800f82e:	68f8      	ldr	r0, [r7, #12]
 800f830:	f008 fd67 	bl	8018302 <memcpy>
  pbuf_ref(cseg->p);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	4618      	mov	r0, r3
 800f83a:	f7fe fc95 	bl	800e168 <pbuf_ref>
  return cseg;
 800f83e:	68fb      	ldr	r3, [r7, #12]
}
 800f840:	4618      	mov	r0, r3
 800f842:	3710      	adds	r7, #16
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}
 800f848:	08019a8c 	.word	0x08019a8c
 800f84c:	08019fe0 	.word	0x08019fe0
 800f850:	08019ad0 	.word	0x08019ad0

0800f854 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	60f8      	str	r0, [r7, #12]
 800f85c:	60b9      	str	r1, [r7, #8]
 800f85e:	607a      	str	r2, [r7, #4]
 800f860:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d109      	bne.n	800f87c <tcp_recv_null+0x28>
 800f868:	4b12      	ldr	r3, [pc, #72]	; (800f8b4 <tcp_recv_null+0x60>)
 800f86a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f86e:	4912      	ldr	r1, [pc, #72]	; (800f8b8 <tcp_recv_null+0x64>)
 800f870:	4812      	ldr	r0, [pc, #72]	; (800f8bc <tcp_recv_null+0x68>)
 800f872:	f008 fc53 	bl	801811c <iprintf>
 800f876:	f06f 030f 	mvn.w	r3, #15
 800f87a:	e016      	b.n	800f8aa <tcp_recv_null+0x56>

  if (p != NULL) {
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d009      	beq.n	800f896 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	891b      	ldrh	r3, [r3, #8]
 800f886:	4619      	mov	r1, r3
 800f888:	68b8      	ldr	r0, [r7, #8]
 800f88a:	f7ff f9bb 	bl	800ec04 <tcp_recved>
    pbuf_free(p);
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f7fe fbca 	bl	800e028 <pbuf_free>
 800f894:	e008      	b.n	800f8a8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f896:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d104      	bne.n	800f8a8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f89e:	68b8      	ldr	r0, [r7, #8]
 800f8a0:	f7ff f860 	bl	800e964 <tcp_close>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	e000      	b.n	800f8aa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f8a8:	2300      	movs	r3, #0
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3710      	adds	r7, #16
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	08019a8c 	.word	0x08019a8c
 800f8b8:	08019ffc 	.word	0x08019ffc
 800f8bc:	08019ad0 	.word	0x08019ad0

0800f8c0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b086      	sub	sp, #24
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f8ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	db01      	blt.n	800f8d6 <tcp_kill_prio+0x16>
 800f8d2:	79fb      	ldrb	r3, [r7, #7]
 800f8d4:	e000      	b.n	800f8d8 <tcp_kill_prio+0x18>
 800f8d6:	237f      	movs	r3, #127	; 0x7f
 800f8d8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f8da:	7afb      	ldrb	r3, [r7, #11]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d034      	beq.n	800f94a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f8e0:	7afb      	ldrb	r3, [r7, #11]
 800f8e2:	3b01      	subs	r3, #1
 800f8e4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8ee:	4b19      	ldr	r3, [pc, #100]	; (800f954 <tcp_kill_prio+0x94>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	617b      	str	r3, [r7, #20]
 800f8f4:	e01f      	b.n	800f936 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	7d5b      	ldrb	r3, [r3, #21]
 800f8fa:	7afa      	ldrb	r2, [r7, #11]
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d80c      	bhi.n	800f91a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f904:	7afa      	ldrb	r2, [r7, #11]
 800f906:	429a      	cmp	r2, r3
 800f908:	d112      	bne.n	800f930 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f90a:	4b13      	ldr	r3, [pc, #76]	; (800f958 <tcp_kill_prio+0x98>)
 800f90c:	681a      	ldr	r2, [r3, #0]
 800f90e:	697b      	ldr	r3, [r7, #20]
 800f910:	6a1b      	ldr	r3, [r3, #32]
 800f912:	1ad3      	subs	r3, r2, r3
 800f914:	68fa      	ldr	r2, [r7, #12]
 800f916:	429a      	cmp	r2, r3
 800f918:	d80a      	bhi.n	800f930 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f91a:	4b0f      	ldr	r3, [pc, #60]	; (800f958 <tcp_kill_prio+0x98>)
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	697b      	ldr	r3, [r7, #20]
 800f920:	6a1b      	ldr	r3, [r3, #32]
 800f922:	1ad3      	subs	r3, r2, r3
 800f924:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	7d5b      	ldrb	r3, [r3, #21]
 800f92e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	617b      	str	r3, [r7, #20]
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d1dc      	bne.n	800f8f6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d004      	beq.n	800f94c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f942:	6938      	ldr	r0, [r7, #16]
 800f944:	f7ff f8f8 	bl	800eb38 <tcp_abort>
 800f948:	e000      	b.n	800f94c <tcp_kill_prio+0x8c>
    return;
 800f94a:	bf00      	nop
  }
}
 800f94c:	3718      	adds	r7, #24
 800f94e:	46bd      	mov	sp, r7
 800f950:	bd80      	pop	{r7, pc}
 800f952:	bf00      	nop
 800f954:	2000814c 	.word	0x2000814c
 800f958:	20008140 	.word	0x20008140

0800f95c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b086      	sub	sp, #24
 800f960:	af00      	add	r7, sp, #0
 800f962:	4603      	mov	r3, r0
 800f964:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f966:	79fb      	ldrb	r3, [r7, #7]
 800f968:	2b08      	cmp	r3, #8
 800f96a:	d009      	beq.n	800f980 <tcp_kill_state+0x24>
 800f96c:	79fb      	ldrb	r3, [r7, #7]
 800f96e:	2b09      	cmp	r3, #9
 800f970:	d006      	beq.n	800f980 <tcp_kill_state+0x24>
 800f972:	4b1a      	ldr	r3, [pc, #104]	; (800f9dc <tcp_kill_state+0x80>)
 800f974:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f978:	4919      	ldr	r1, [pc, #100]	; (800f9e0 <tcp_kill_state+0x84>)
 800f97a:	481a      	ldr	r0, [pc, #104]	; (800f9e4 <tcp_kill_state+0x88>)
 800f97c:	f008 fbce 	bl	801811c <iprintf>

  inactivity = 0;
 800f980:	2300      	movs	r3, #0
 800f982:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f984:	2300      	movs	r3, #0
 800f986:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f988:	4b17      	ldr	r3, [pc, #92]	; (800f9e8 <tcp_kill_state+0x8c>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	617b      	str	r3, [r7, #20]
 800f98e:	e017      	b.n	800f9c0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f990:	697b      	ldr	r3, [r7, #20]
 800f992:	7d1b      	ldrb	r3, [r3, #20]
 800f994:	79fa      	ldrb	r2, [r7, #7]
 800f996:	429a      	cmp	r2, r3
 800f998:	d10f      	bne.n	800f9ba <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f99a:	4b14      	ldr	r3, [pc, #80]	; (800f9ec <tcp_kill_state+0x90>)
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	6a1b      	ldr	r3, [r3, #32]
 800f9a2:	1ad3      	subs	r3, r2, r3
 800f9a4:	68fa      	ldr	r2, [r7, #12]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d807      	bhi.n	800f9ba <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f9aa:	4b10      	ldr	r3, [pc, #64]	; (800f9ec <tcp_kill_state+0x90>)
 800f9ac:	681a      	ldr	r2, [r3, #0]
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	6a1b      	ldr	r3, [r3, #32]
 800f9b2:	1ad3      	subs	r3, r2, r3
 800f9b4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	68db      	ldr	r3, [r3, #12]
 800f9be:	617b      	str	r3, [r7, #20]
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d1e4      	bne.n	800f990 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d003      	beq.n	800f9d4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f9cc:	2100      	movs	r1, #0
 800f9ce:	6938      	ldr	r0, [r7, #16]
 800f9d0:	f7fe fff4 	bl	800e9bc <tcp_abandon>
  }
}
 800f9d4:	bf00      	nop
 800f9d6:	3718      	adds	r7, #24
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}
 800f9dc:	08019a8c 	.word	0x08019a8c
 800f9e0:	0801a018 	.word	0x0801a018
 800f9e4:	08019ad0 	.word	0x08019ad0
 800f9e8:	2000814c 	.word	0x2000814c
 800f9ec:	20008140 	.word	0x20008140

0800f9f0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9fe:	4b12      	ldr	r3, [pc, #72]	; (800fa48 <tcp_kill_timewait+0x58>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	60fb      	str	r3, [r7, #12]
 800fa04:	e012      	b.n	800fa2c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fa06:	4b11      	ldr	r3, [pc, #68]	; (800fa4c <tcp_kill_timewait+0x5c>)
 800fa08:	681a      	ldr	r2, [r3, #0]
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	6a1b      	ldr	r3, [r3, #32]
 800fa0e:	1ad3      	subs	r3, r2, r3
 800fa10:	687a      	ldr	r2, [r7, #4]
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d807      	bhi.n	800fa26 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800fa16:	4b0d      	ldr	r3, [pc, #52]	; (800fa4c <tcp_kill_timewait+0x5c>)
 800fa18:	681a      	ldr	r2, [r3, #0]
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	6a1b      	ldr	r3, [r3, #32]
 800fa1e:	1ad3      	subs	r3, r2, r3
 800fa20:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	68db      	ldr	r3, [r3, #12]
 800fa2a:	60fb      	str	r3, [r7, #12]
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d1e9      	bne.n	800fa06 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d002      	beq.n	800fa3e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fa38:	68b8      	ldr	r0, [r7, #8]
 800fa3a:	f7ff f87d 	bl	800eb38 <tcp_abort>
  }
}
 800fa3e:	bf00      	nop
 800fa40:	3710      	adds	r7, #16
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}
 800fa46:	bf00      	nop
 800fa48:	20008150 	.word	0x20008150
 800fa4c:	20008140 	.word	0x20008140

0800fa50 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800fa56:	4b10      	ldr	r3, [pc, #64]	; (800fa98 <tcp_handle_closepend+0x48>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fa5c:	e014      	b.n	800fa88 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	68db      	ldr	r3, [r3, #12]
 800fa62:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	8b5b      	ldrh	r3, [r3, #26]
 800fa68:	f003 0308 	and.w	r3, r3, #8
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d009      	beq.n	800fa84 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	8b5b      	ldrh	r3, [r3, #26]
 800fa74:	f023 0308 	bic.w	r3, r3, #8
 800fa78:	b29a      	uxth	r2, r3
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f7fe ff06 	bl	800e890 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d1e7      	bne.n	800fa5e <tcp_handle_closepend+0xe>
  }
}
 800fa8e:	bf00      	nop
 800fa90:	bf00      	nop
 800fa92:	3708      	adds	r7, #8
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}
 800fa98:	2000814c 	.word	0x2000814c

0800fa9c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	4603      	mov	r3, r0
 800faa4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800faa6:	2001      	movs	r0, #1
 800faa8:	f7fd fbd8 	bl	800d25c <memp_malloc>
 800faac:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d126      	bne.n	800fb02 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fab4:	f7ff ffcc 	bl	800fa50 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fab8:	f7ff ff9a 	bl	800f9f0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fabc:	2001      	movs	r0, #1
 800fabe:	f7fd fbcd 	bl	800d25c <memp_malloc>
 800fac2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d11b      	bne.n	800fb02 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800faca:	2009      	movs	r0, #9
 800facc:	f7ff ff46 	bl	800f95c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fad0:	2001      	movs	r0, #1
 800fad2:	f7fd fbc3 	bl	800d25c <memp_malloc>
 800fad6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d111      	bne.n	800fb02 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fade:	2008      	movs	r0, #8
 800fae0:	f7ff ff3c 	bl	800f95c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fae4:	2001      	movs	r0, #1
 800fae6:	f7fd fbb9 	bl	800d25c <memp_malloc>
 800faea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d107      	bne.n	800fb02 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800faf2:	79fb      	ldrb	r3, [r7, #7]
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7ff fee3 	bl	800f8c0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fafa:	2001      	movs	r0, #1
 800fafc:	f7fd fbae 	bl	800d25c <memp_malloc>
 800fb00:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d03f      	beq.n	800fb88 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fb08:	229c      	movs	r2, #156	; 0x9c
 800fb0a:	2100      	movs	r1, #0
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	f008 fb6a 	bl	80181e6 <memset>
    pcb->prio = prio;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	79fa      	ldrb	r2, [r7, #7]
 800fb16:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800fb1e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fb28:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	22ff      	movs	r2, #255	; 0xff
 800fb36:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800fb3e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	2206      	movs	r2, #6
 800fb44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	2206      	movs	r2, #6
 800fb4c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb54:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	2201      	movs	r2, #1
 800fb5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fb5e:	4b0d      	ldr	r3, [pc, #52]	; (800fb94 <tcp_alloc+0xf8>)
 800fb60:	681a      	ldr	r2, [r3, #0]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fb66:	4b0c      	ldr	r3, [pc, #48]	; (800fb98 <tcp_alloc+0xfc>)
 800fb68:	781a      	ldrb	r2, [r3, #0]
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800fb74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	4a08      	ldr	r2, [pc, #32]	; (800fb9c <tcp_alloc+0x100>)
 800fb7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	4a07      	ldr	r2, [pc, #28]	; (800fba0 <tcp_alloc+0x104>)
 800fb84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fb88:	68fb      	ldr	r3, [r7, #12]
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3710      	adds	r7, #16
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	bf00      	nop
 800fb94:	20008140 	.word	0x20008140
 800fb98:	20008156 	.word	0x20008156
 800fb9c:	0800f855 	.word	0x0800f855
 800fba0:	006ddd00 	.word	0x006ddd00

0800fba4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800fba8:	2040      	movs	r0, #64	; 0x40
 800fbaa:	f7ff ff77 	bl	800fa9c <tcp_alloc>
 800fbae:	4603      	mov	r3, r0
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	bd80      	pop	{r7, pc}

0800fbb4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b083      	sub	sp, #12
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d002      	beq.n	800fbca <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	683a      	ldr	r2, [r7, #0]
 800fbc8:	611a      	str	r2, [r3, #16]
  }
}
 800fbca:	bf00      	nop
 800fbcc:	370c      	adds	r7, #12
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd4:	4770      	bx	lr
	...

0800fbd8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d00e      	beq.n	800fc06 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	7d1b      	ldrb	r3, [r3, #20]
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	d106      	bne.n	800fbfe <tcp_recv+0x26>
 800fbf0:	4b07      	ldr	r3, [pc, #28]	; (800fc10 <tcp_recv+0x38>)
 800fbf2:	f240 72df 	movw	r2, #2015	; 0x7df
 800fbf6:	4907      	ldr	r1, [pc, #28]	; (800fc14 <tcp_recv+0x3c>)
 800fbf8:	4807      	ldr	r0, [pc, #28]	; (800fc18 <tcp_recv+0x40>)
 800fbfa:	f008 fa8f 	bl	801811c <iprintf>
    pcb->recv = recv;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	683a      	ldr	r2, [r7, #0]
 800fc02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800fc06:	bf00      	nop
 800fc08:	3708      	adds	r7, #8
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	08019a8c 	.word	0x08019a8c
 800fc14:	0801a028 	.word	0x0801a028
 800fc18:	08019ad0 	.word	0x08019ad0

0800fc1c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d00e      	beq.n	800fc4a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	7d1b      	ldrb	r3, [r3, #20]
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	d106      	bne.n	800fc42 <tcp_sent+0x26>
 800fc34:	4b07      	ldr	r3, [pc, #28]	; (800fc54 <tcp_sent+0x38>)
 800fc36:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800fc3a:	4907      	ldr	r1, [pc, #28]	; (800fc58 <tcp_sent+0x3c>)
 800fc3c:	4807      	ldr	r0, [pc, #28]	; (800fc5c <tcp_sent+0x40>)
 800fc3e:	f008 fa6d 	bl	801811c <iprintf>
    pcb->sent = sent;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	683a      	ldr	r2, [r7, #0]
 800fc46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800fc4a:	bf00      	nop
 800fc4c:	3708      	adds	r7, #8
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
 800fc52:	bf00      	nop
 800fc54:	08019a8c 	.word	0x08019a8c
 800fc58:	0801a050 	.word	0x0801a050
 800fc5c:	08019ad0 	.word	0x08019ad0

0800fc60 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b082      	sub	sp, #8
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d00e      	beq.n	800fc8e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	7d1b      	ldrb	r3, [r3, #20]
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	d106      	bne.n	800fc86 <tcp_err+0x26>
 800fc78:	4b07      	ldr	r3, [pc, #28]	; (800fc98 <tcp_err+0x38>)
 800fc7a:	f640 020d 	movw	r2, #2061	; 0x80d
 800fc7e:	4907      	ldr	r1, [pc, #28]	; (800fc9c <tcp_err+0x3c>)
 800fc80:	4807      	ldr	r0, [pc, #28]	; (800fca0 <tcp_err+0x40>)
 800fc82:	f008 fa4b 	bl	801811c <iprintf>
    pcb->errf = err;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	683a      	ldr	r2, [r7, #0]
 800fc8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800fc8e:	bf00      	nop
 800fc90:	3708      	adds	r7, #8
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}
 800fc96:	bf00      	nop
 800fc98:	08019a8c 	.word	0x08019a8c
 800fc9c:	0801a078 	.word	0x0801a078
 800fca0:	08019ad0 	.word	0x08019ad0

0800fca4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	4613      	mov	r3, r2
 800fcb0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d107      	bne.n	800fcc8 <tcp_poll+0x24>
 800fcb8:	4b0e      	ldr	r3, [pc, #56]	; (800fcf4 <tcp_poll+0x50>)
 800fcba:	f640 023d 	movw	r2, #2109	; 0x83d
 800fcbe:	490e      	ldr	r1, [pc, #56]	; (800fcf8 <tcp_poll+0x54>)
 800fcc0:	480e      	ldr	r0, [pc, #56]	; (800fcfc <tcp_poll+0x58>)
 800fcc2:	f008 fa2b 	bl	801811c <iprintf>
 800fcc6:	e011      	b.n	800fcec <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	7d1b      	ldrb	r3, [r3, #20]
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	d106      	bne.n	800fcde <tcp_poll+0x3a>
 800fcd0:	4b08      	ldr	r3, [pc, #32]	; (800fcf4 <tcp_poll+0x50>)
 800fcd2:	f640 023e 	movw	r2, #2110	; 0x83e
 800fcd6:	490a      	ldr	r1, [pc, #40]	; (800fd00 <tcp_poll+0x5c>)
 800fcd8:	4808      	ldr	r0, [pc, #32]	; (800fcfc <tcp_poll+0x58>)
 800fcda:	f008 fa1f 	bl	801811c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	68ba      	ldr	r2, [r7, #8]
 800fce2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	79fa      	ldrb	r2, [r7, #7]
 800fcea:	775a      	strb	r2, [r3, #29]
}
 800fcec:	3710      	adds	r7, #16
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}
 800fcf2:	bf00      	nop
 800fcf4:	08019a8c 	.word	0x08019a8c
 800fcf8:	0801a0a0 	.word	0x0801a0a0
 800fcfc:	08019ad0 	.word	0x08019ad0
 800fd00:	0801a0b8 	.word	0x0801a0b8

0800fd04 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d107      	bne.n	800fd22 <tcp_pcb_purge+0x1e>
 800fd12:	4b21      	ldr	r3, [pc, #132]	; (800fd98 <tcp_pcb_purge+0x94>)
 800fd14:	f640 0251 	movw	r2, #2129	; 0x851
 800fd18:	4920      	ldr	r1, [pc, #128]	; (800fd9c <tcp_pcb_purge+0x98>)
 800fd1a:	4821      	ldr	r0, [pc, #132]	; (800fda0 <tcp_pcb_purge+0x9c>)
 800fd1c:	f008 f9fe 	bl	801811c <iprintf>
 800fd20:	e037      	b.n	800fd92 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	7d1b      	ldrb	r3, [r3, #20]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d033      	beq.n	800fd92 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fd2e:	2b0a      	cmp	r3, #10
 800fd30:	d02f      	beq.n	800fd92 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fd36:	2b01      	cmp	r3, #1
 800fd38:	d02b      	beq.n	800fd92 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d007      	beq.n	800fd52 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fe f96e 	bl	800e028 <pbuf_free>
      pcb->refused_data = NULL;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2200      	movs	r2, #0
 800fd50:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d002      	beq.n	800fd60 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f000 f986 	bl	801006c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd66:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f7ff fd17 	bl	800f7a0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7ff fd12 	bl	800f7a0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	66da      	str	r2, [r3, #108]	; 0x6c
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fd92:	3708      	adds	r7, #8
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}
 800fd98:	08019a8c 	.word	0x08019a8c
 800fd9c:	0801a0d8 	.word	0x0801a0d8
 800fda0:	08019ad0 	.word	0x08019ad0

0800fda4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d106      	bne.n	800fdc2 <tcp_pcb_remove+0x1e>
 800fdb4:	4b3e      	ldr	r3, [pc, #248]	; (800feb0 <tcp_pcb_remove+0x10c>)
 800fdb6:	f640 0283 	movw	r2, #2179	; 0x883
 800fdba:	493e      	ldr	r1, [pc, #248]	; (800feb4 <tcp_pcb_remove+0x110>)
 800fdbc:	483e      	ldr	r0, [pc, #248]	; (800feb8 <tcp_pcb_remove+0x114>)
 800fdbe:	f008 f9ad 	bl	801811c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d106      	bne.n	800fdd6 <tcp_pcb_remove+0x32>
 800fdc8:	4b39      	ldr	r3, [pc, #228]	; (800feb0 <tcp_pcb_remove+0x10c>)
 800fdca:	f640 0284 	movw	r2, #2180	; 0x884
 800fdce:	493b      	ldr	r1, [pc, #236]	; (800febc <tcp_pcb_remove+0x118>)
 800fdd0:	4839      	ldr	r0, [pc, #228]	; (800feb8 <tcp_pcb_remove+0x114>)
 800fdd2:	f008 f9a3 	bl	801811c <iprintf>

  TCP_RMV(pcblist, pcb);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	683a      	ldr	r2, [r7, #0]
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d105      	bne.n	800fdec <tcp_pcb_remove+0x48>
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	68da      	ldr	r2, [r3, #12]
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	601a      	str	r2, [r3, #0]
 800fdea:	e013      	b.n	800fe14 <tcp_pcb_remove+0x70>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	60fb      	str	r3, [r7, #12]
 800fdf2:	e00c      	b.n	800fe0e <tcp_pcb_remove+0x6a>
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	68db      	ldr	r3, [r3, #12]
 800fdf8:	683a      	ldr	r2, [r7, #0]
 800fdfa:	429a      	cmp	r2, r3
 800fdfc:	d104      	bne.n	800fe08 <tcp_pcb_remove+0x64>
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	68da      	ldr	r2, [r3, #12]
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	60da      	str	r2, [r3, #12]
 800fe06:	e005      	b.n	800fe14 <tcp_pcb_remove+0x70>
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	68db      	ldr	r3, [r3, #12]
 800fe0c:	60fb      	str	r3, [r7, #12]
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d1ef      	bne.n	800fdf4 <tcp_pcb_remove+0x50>
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	2200      	movs	r2, #0
 800fe18:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fe1a:	6838      	ldr	r0, [r7, #0]
 800fe1c:	f7ff ff72 	bl	800fd04 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	7d1b      	ldrb	r3, [r3, #20]
 800fe24:	2b0a      	cmp	r3, #10
 800fe26:	d013      	beq.n	800fe50 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	d00f      	beq.n	800fe50 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	8b5b      	ldrh	r3, [r3, #26]
 800fe34:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d009      	beq.n	800fe50 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	8b5b      	ldrh	r3, [r3, #26]
 800fe40:	f043 0302 	orr.w	r3, r3, #2
 800fe44:	b29a      	uxth	r2, r3
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fe4a:	6838      	ldr	r0, [r7, #0]
 800fe4c:	f003 fbc6 	bl	80135dc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	7d1b      	ldrb	r3, [r3, #20]
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	d020      	beq.n	800fe9a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d006      	beq.n	800fe6e <tcp_pcb_remove+0xca>
 800fe60:	4b13      	ldr	r3, [pc, #76]	; (800feb0 <tcp_pcb_remove+0x10c>)
 800fe62:	f640 0293 	movw	r2, #2195	; 0x893
 800fe66:	4916      	ldr	r1, [pc, #88]	; (800fec0 <tcp_pcb_remove+0x11c>)
 800fe68:	4813      	ldr	r0, [pc, #76]	; (800feb8 <tcp_pcb_remove+0x114>)
 800fe6a:	f008 f957 	bl	801811c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d006      	beq.n	800fe84 <tcp_pcb_remove+0xe0>
 800fe76:	4b0e      	ldr	r3, [pc, #56]	; (800feb0 <tcp_pcb_remove+0x10c>)
 800fe78:	f640 0294 	movw	r2, #2196	; 0x894
 800fe7c:	4911      	ldr	r1, [pc, #68]	; (800fec4 <tcp_pcb_remove+0x120>)
 800fe7e:	480e      	ldr	r0, [pc, #56]	; (800feb8 <tcp_pcb_remove+0x114>)
 800fe80:	f008 f94c 	bl	801811c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d006      	beq.n	800fe9a <tcp_pcb_remove+0xf6>
 800fe8c:	4b08      	ldr	r3, [pc, #32]	; (800feb0 <tcp_pcb_remove+0x10c>)
 800fe8e:	f640 0296 	movw	r2, #2198	; 0x896
 800fe92:	490d      	ldr	r1, [pc, #52]	; (800fec8 <tcp_pcb_remove+0x124>)
 800fe94:	4808      	ldr	r0, [pc, #32]	; (800feb8 <tcp_pcb_remove+0x114>)
 800fe96:	f008 f941 	bl	801811c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	2200      	movs	r2, #0
 800fea4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fea6:	bf00      	nop
 800fea8:	3710      	adds	r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	08019a8c 	.word	0x08019a8c
 800feb4:	0801a0f4 	.word	0x0801a0f4
 800feb8:	08019ad0 	.word	0x08019ad0
 800febc:	0801a110 	.word	0x0801a110
 800fec0:	0801a130 	.word	0x0801a130
 800fec4:	0801a148 	.word	0x0801a148
 800fec8:	0801a164 	.word	0x0801a164

0800fecc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b082      	sub	sp, #8
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d106      	bne.n	800fee8 <tcp_next_iss+0x1c>
 800feda:	4b0a      	ldr	r3, [pc, #40]	; (800ff04 <tcp_next_iss+0x38>)
 800fedc:	f640 02af 	movw	r2, #2223	; 0x8af
 800fee0:	4909      	ldr	r1, [pc, #36]	; (800ff08 <tcp_next_iss+0x3c>)
 800fee2:	480a      	ldr	r0, [pc, #40]	; (800ff0c <tcp_next_iss+0x40>)
 800fee4:	f008 f91a 	bl	801811c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fee8:	4b09      	ldr	r3, [pc, #36]	; (800ff10 <tcp_next_iss+0x44>)
 800feea:	681a      	ldr	r2, [r3, #0]
 800feec:	4b09      	ldr	r3, [pc, #36]	; (800ff14 <tcp_next_iss+0x48>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	4413      	add	r3, r2
 800fef2:	4a07      	ldr	r2, [pc, #28]	; (800ff10 <tcp_next_iss+0x44>)
 800fef4:	6013      	str	r3, [r2, #0]
  return iss;
 800fef6:	4b06      	ldr	r3, [pc, #24]	; (800ff10 <tcp_next_iss+0x44>)
 800fef8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3708      	adds	r7, #8
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}
 800ff02:	bf00      	nop
 800ff04:	08019a8c 	.word	0x08019a8c
 800ff08:	0801a17c 	.word	0x0801a17c
 800ff0c:	08019ad0 	.word	0x08019ad0
 800ff10:	20000144 	.word	0x20000144
 800ff14:	20008140 	.word	0x20008140

0800ff18 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b086      	sub	sp, #24
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	4603      	mov	r3, r0
 800ff20:	60b9      	str	r1, [r7, #8]
 800ff22:	607a      	str	r2, [r7, #4]
 800ff24:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d106      	bne.n	800ff3a <tcp_eff_send_mss_netif+0x22>
 800ff2c:	4b14      	ldr	r3, [pc, #80]	; (800ff80 <tcp_eff_send_mss_netif+0x68>)
 800ff2e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ff32:	4914      	ldr	r1, [pc, #80]	; (800ff84 <tcp_eff_send_mss_netif+0x6c>)
 800ff34:	4814      	ldr	r0, [pc, #80]	; (800ff88 <tcp_eff_send_mss_netif+0x70>)
 800ff36:	f008 f8f1 	bl	801811c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d101      	bne.n	800ff44 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ff40:	89fb      	ldrh	r3, [r7, #14]
 800ff42:	e019      	b.n	800ff78 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ff48:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ff4a:	8afb      	ldrh	r3, [r7, #22]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d012      	beq.n	800ff76 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ff50:	2328      	movs	r3, #40	; 0x28
 800ff52:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ff54:	8afa      	ldrh	r2, [r7, #22]
 800ff56:	8abb      	ldrh	r3, [r7, #20]
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d904      	bls.n	800ff66 <tcp_eff_send_mss_netif+0x4e>
 800ff5c:	8afa      	ldrh	r2, [r7, #22]
 800ff5e:	8abb      	ldrh	r3, [r7, #20]
 800ff60:	1ad3      	subs	r3, r2, r3
 800ff62:	b29b      	uxth	r3, r3
 800ff64:	e000      	b.n	800ff68 <tcp_eff_send_mss_netif+0x50>
 800ff66:	2300      	movs	r3, #0
 800ff68:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ff6a:	8a7a      	ldrh	r2, [r7, #18]
 800ff6c:	89fb      	ldrh	r3, [r7, #14]
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	bf28      	it	cs
 800ff72:	4613      	movcs	r3, r2
 800ff74:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ff76:	89fb      	ldrh	r3, [r7, #14]
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3718      	adds	r7, #24
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	08019a8c 	.word	0x08019a8c
 800ff84:	0801a198 	.word	0x0801a198
 800ff88:	08019ad0 	.word	0x08019ad0

0800ff8c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b084      	sub	sp, #16
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d119      	bne.n	800ffd4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ffa0:	4b10      	ldr	r3, [pc, #64]	; (800ffe4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ffa2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ffa6:	4910      	ldr	r1, [pc, #64]	; (800ffe8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ffa8:	4810      	ldr	r0, [pc, #64]	; (800ffec <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ffaa:	f008 f8b7 	bl	801811c <iprintf>

  while (pcb != NULL) {
 800ffae:	e011      	b.n	800ffd4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681a      	ldr	r2, [r3, #0]
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d108      	bne.n	800ffce <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ffc2:	68f8      	ldr	r0, [r7, #12]
 800ffc4:	f7fe fdb8 	bl	800eb38 <tcp_abort>
      pcb = next;
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	60fb      	str	r3, [r7, #12]
 800ffcc:	e002      	b.n	800ffd4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	68db      	ldr	r3, [r3, #12]
 800ffd2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d1ea      	bne.n	800ffb0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ffda:	bf00      	nop
 800ffdc:	bf00      	nop
 800ffde:	3710      	adds	r7, #16
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}
 800ffe4:	08019a8c 	.word	0x08019a8c
 800ffe8:	0801a1c0 	.word	0x0801a1c0
 800ffec:	08019ad0 	.word	0x08019ad0

0800fff0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b084      	sub	sp, #16
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d02a      	beq.n	8010056 <tcp_netif_ip_addr_changed+0x66>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d026      	beq.n	8010056 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010008:	4b15      	ldr	r3, [pc, #84]	; (8010060 <tcp_netif_ip_addr_changed+0x70>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	4619      	mov	r1, r3
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f7ff ffbc 	bl	800ff8c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010014:	4b13      	ldr	r3, [pc, #76]	; (8010064 <tcp_netif_ip_addr_changed+0x74>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	4619      	mov	r1, r3
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f7ff ffb6 	bl	800ff8c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d017      	beq.n	8010056 <tcp_netif_ip_addr_changed+0x66>
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d013      	beq.n	8010056 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801002e:	4b0e      	ldr	r3, [pc, #56]	; (8010068 <tcp_netif_ip_addr_changed+0x78>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	60fb      	str	r3, [r7, #12]
 8010034:	e00c      	b.n	8010050 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	681a      	ldr	r2, [r3, #0]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	429a      	cmp	r2, r3
 8010040:	d103      	bne.n	801004a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	681a      	ldr	r2, [r3, #0]
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	68db      	ldr	r3, [r3, #12]
 801004e:	60fb      	str	r3, [r7, #12]
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d1ef      	bne.n	8010036 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010056:	bf00      	nop
 8010058:	3710      	adds	r7, #16
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
 801005e:	bf00      	nop
 8010060:	2000814c 	.word	0x2000814c
 8010064:	20008144 	.word	0x20008144
 8010068:	20008148 	.word	0x20008148

0801006c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b082      	sub	sp, #8
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010078:	2b00      	cmp	r3, #0
 801007a:	d007      	beq.n	801008c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010080:	4618      	mov	r0, r3
 8010082:	f7ff fb8d 	bl	800f7a0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2200      	movs	r2, #0
 801008a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801008c:	bf00      	nop
 801008e:	3708      	adds	r7, #8
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010094:	b590      	push	{r4, r7, lr}
 8010096:	b08d      	sub	sp, #52	; 0x34
 8010098:	af04      	add	r7, sp, #16
 801009a:	6078      	str	r0, [r7, #4]
 801009c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d105      	bne.n	80100b0 <tcp_input+0x1c>
 80100a4:	4b9b      	ldr	r3, [pc, #620]	; (8010314 <tcp_input+0x280>)
 80100a6:	2283      	movs	r2, #131	; 0x83
 80100a8:	499b      	ldr	r1, [pc, #620]	; (8010318 <tcp_input+0x284>)
 80100aa:	489c      	ldr	r0, [pc, #624]	; (801031c <tcp_input+0x288>)
 80100ac:	f008 f836 	bl	801811c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	685b      	ldr	r3, [r3, #4]
 80100b4:	4a9a      	ldr	r2, [pc, #616]	; (8010320 <tcp_input+0x28c>)
 80100b6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	895b      	ldrh	r3, [r3, #10]
 80100bc:	2b13      	cmp	r3, #19
 80100be:	f240 83d1 	bls.w	8010864 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80100c2:	4b98      	ldr	r3, [pc, #608]	; (8010324 <tcp_input+0x290>)
 80100c4:	695b      	ldr	r3, [r3, #20]
 80100c6:	4a97      	ldr	r2, [pc, #604]	; (8010324 <tcp_input+0x290>)
 80100c8:	6812      	ldr	r2, [r2, #0]
 80100ca:	4611      	mov	r1, r2
 80100cc:	4618      	mov	r0, r3
 80100ce:	f006 f86d 	bl	80161ac <ip4_addr_isbroadcast_u32>
 80100d2:	4603      	mov	r3, r0
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	f040 83c7 	bne.w	8010868 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80100da:	4b92      	ldr	r3, [pc, #584]	; (8010324 <tcp_input+0x290>)
 80100dc:	695b      	ldr	r3, [r3, #20]
 80100de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80100e2:	2be0      	cmp	r3, #224	; 0xe0
 80100e4:	f000 83c0 	beq.w	8010868 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80100e8:	4b8d      	ldr	r3, [pc, #564]	; (8010320 <tcp_input+0x28c>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	899b      	ldrh	r3, [r3, #12]
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7fc fc3c 	bl	800c96e <lwip_htons>
 80100f6:	4603      	mov	r3, r0
 80100f8:	0b1b      	lsrs	r3, r3, #12
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	009b      	lsls	r3, r3, #2
 8010100:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010102:	7cbb      	ldrb	r3, [r7, #18]
 8010104:	2b13      	cmp	r3, #19
 8010106:	f240 83b1 	bls.w	801086c <tcp_input+0x7d8>
 801010a:	7cbb      	ldrb	r3, [r7, #18]
 801010c:	b29a      	uxth	r2, r3
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	891b      	ldrh	r3, [r3, #8]
 8010112:	429a      	cmp	r2, r3
 8010114:	f200 83aa 	bhi.w	801086c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010118:	7cbb      	ldrb	r3, [r7, #18]
 801011a:	b29b      	uxth	r3, r3
 801011c:	3b14      	subs	r3, #20
 801011e:	b29a      	uxth	r2, r3
 8010120:	4b81      	ldr	r3, [pc, #516]	; (8010328 <tcp_input+0x294>)
 8010122:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010124:	4b81      	ldr	r3, [pc, #516]	; (801032c <tcp_input+0x298>)
 8010126:	2200      	movs	r2, #0
 8010128:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	895a      	ldrh	r2, [r3, #10]
 801012e:	7cbb      	ldrb	r3, [r7, #18]
 8010130:	b29b      	uxth	r3, r3
 8010132:	429a      	cmp	r2, r3
 8010134:	d309      	bcc.n	801014a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010136:	4b7c      	ldr	r3, [pc, #496]	; (8010328 <tcp_input+0x294>)
 8010138:	881a      	ldrh	r2, [r3, #0]
 801013a:	4b7d      	ldr	r3, [pc, #500]	; (8010330 <tcp_input+0x29c>)
 801013c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801013e:	7cbb      	ldrb	r3, [r7, #18]
 8010140:	4619      	mov	r1, r3
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f7fd feea 	bl	800df1c <pbuf_remove_header>
 8010148:	e04e      	b.n	80101e8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d105      	bne.n	801015e <tcp_input+0xca>
 8010152:	4b70      	ldr	r3, [pc, #448]	; (8010314 <tcp_input+0x280>)
 8010154:	22c2      	movs	r2, #194	; 0xc2
 8010156:	4977      	ldr	r1, [pc, #476]	; (8010334 <tcp_input+0x2a0>)
 8010158:	4870      	ldr	r0, [pc, #448]	; (801031c <tcp_input+0x288>)
 801015a:	f007 ffdf 	bl	801811c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801015e:	2114      	movs	r1, #20
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f7fd fedb 	bl	800df1c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	895a      	ldrh	r2, [r3, #10]
 801016a:	4b71      	ldr	r3, [pc, #452]	; (8010330 <tcp_input+0x29c>)
 801016c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801016e:	4b6e      	ldr	r3, [pc, #440]	; (8010328 <tcp_input+0x294>)
 8010170:	881a      	ldrh	r2, [r3, #0]
 8010172:	4b6f      	ldr	r3, [pc, #444]	; (8010330 <tcp_input+0x29c>)
 8010174:	881b      	ldrh	r3, [r3, #0]
 8010176:	1ad3      	subs	r3, r2, r3
 8010178:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801017a:	4b6d      	ldr	r3, [pc, #436]	; (8010330 <tcp_input+0x29c>)
 801017c:	881b      	ldrh	r3, [r3, #0]
 801017e:	4619      	mov	r1, r3
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f7fd fecb 	bl	800df1c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	895b      	ldrh	r3, [r3, #10]
 801018c:	8a3a      	ldrh	r2, [r7, #16]
 801018e:	429a      	cmp	r2, r3
 8010190:	f200 836e 	bhi.w	8010870 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	685b      	ldr	r3, [r3, #4]
 801019a:	4a64      	ldr	r2, [pc, #400]	; (801032c <tcp_input+0x298>)
 801019c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	8a3a      	ldrh	r2, [r7, #16]
 80101a4:	4611      	mov	r1, r2
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7fd feb8 	bl	800df1c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	891a      	ldrh	r2, [r3, #8]
 80101b0:	8a3b      	ldrh	r3, [r7, #16]
 80101b2:	1ad3      	subs	r3, r2, r3
 80101b4:	b29a      	uxth	r2, r3
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	895b      	ldrh	r3, [r3, #10]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d005      	beq.n	80101ce <tcp_input+0x13a>
 80101c2:	4b54      	ldr	r3, [pc, #336]	; (8010314 <tcp_input+0x280>)
 80101c4:	22df      	movs	r2, #223	; 0xdf
 80101c6:	495c      	ldr	r1, [pc, #368]	; (8010338 <tcp_input+0x2a4>)
 80101c8:	4854      	ldr	r0, [pc, #336]	; (801031c <tcp_input+0x288>)
 80101ca:	f007 ffa7 	bl	801811c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	891a      	ldrh	r2, [r3, #8]
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	891b      	ldrh	r3, [r3, #8]
 80101d8:	429a      	cmp	r2, r3
 80101da:	d005      	beq.n	80101e8 <tcp_input+0x154>
 80101dc:	4b4d      	ldr	r3, [pc, #308]	; (8010314 <tcp_input+0x280>)
 80101de:	22e0      	movs	r2, #224	; 0xe0
 80101e0:	4956      	ldr	r1, [pc, #344]	; (801033c <tcp_input+0x2a8>)
 80101e2:	484e      	ldr	r0, [pc, #312]	; (801031c <tcp_input+0x288>)
 80101e4:	f007 ff9a 	bl	801811c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80101e8:	4b4d      	ldr	r3, [pc, #308]	; (8010320 <tcp_input+0x28c>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	881b      	ldrh	r3, [r3, #0]
 80101ee:	b29b      	uxth	r3, r3
 80101f0:	4a4b      	ldr	r2, [pc, #300]	; (8010320 <tcp_input+0x28c>)
 80101f2:	6814      	ldr	r4, [r2, #0]
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7fc fbba 	bl	800c96e <lwip_htons>
 80101fa:	4603      	mov	r3, r0
 80101fc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80101fe:	4b48      	ldr	r3, [pc, #288]	; (8010320 <tcp_input+0x28c>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	885b      	ldrh	r3, [r3, #2]
 8010204:	b29b      	uxth	r3, r3
 8010206:	4a46      	ldr	r2, [pc, #280]	; (8010320 <tcp_input+0x28c>)
 8010208:	6814      	ldr	r4, [r2, #0]
 801020a:	4618      	mov	r0, r3
 801020c:	f7fc fbaf 	bl	800c96e <lwip_htons>
 8010210:	4603      	mov	r3, r0
 8010212:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010214:	4b42      	ldr	r3, [pc, #264]	; (8010320 <tcp_input+0x28c>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	4a41      	ldr	r2, [pc, #260]	; (8010320 <tcp_input+0x28c>)
 801021c:	6814      	ldr	r4, [r2, #0]
 801021e:	4618      	mov	r0, r3
 8010220:	f7fc fbba 	bl	800c998 <lwip_htonl>
 8010224:	4603      	mov	r3, r0
 8010226:	6063      	str	r3, [r4, #4]
 8010228:	6863      	ldr	r3, [r4, #4]
 801022a:	4a45      	ldr	r2, [pc, #276]	; (8010340 <tcp_input+0x2ac>)
 801022c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801022e:	4b3c      	ldr	r3, [pc, #240]	; (8010320 <tcp_input+0x28c>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	689b      	ldr	r3, [r3, #8]
 8010234:	4a3a      	ldr	r2, [pc, #232]	; (8010320 <tcp_input+0x28c>)
 8010236:	6814      	ldr	r4, [r2, #0]
 8010238:	4618      	mov	r0, r3
 801023a:	f7fc fbad 	bl	800c998 <lwip_htonl>
 801023e:	4603      	mov	r3, r0
 8010240:	60a3      	str	r3, [r4, #8]
 8010242:	68a3      	ldr	r3, [r4, #8]
 8010244:	4a3f      	ldr	r2, [pc, #252]	; (8010344 <tcp_input+0x2b0>)
 8010246:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010248:	4b35      	ldr	r3, [pc, #212]	; (8010320 <tcp_input+0x28c>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	89db      	ldrh	r3, [r3, #14]
 801024e:	b29b      	uxth	r3, r3
 8010250:	4a33      	ldr	r2, [pc, #204]	; (8010320 <tcp_input+0x28c>)
 8010252:	6814      	ldr	r4, [r2, #0]
 8010254:	4618      	mov	r0, r3
 8010256:	f7fc fb8a 	bl	800c96e <lwip_htons>
 801025a:	4603      	mov	r3, r0
 801025c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801025e:	4b30      	ldr	r3, [pc, #192]	; (8010320 <tcp_input+0x28c>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	899b      	ldrh	r3, [r3, #12]
 8010264:	b29b      	uxth	r3, r3
 8010266:	4618      	mov	r0, r3
 8010268:	f7fc fb81 	bl	800c96e <lwip_htons>
 801026c:	4603      	mov	r3, r0
 801026e:	b2db      	uxtb	r3, r3
 8010270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010274:	b2da      	uxtb	r2, r3
 8010276:	4b34      	ldr	r3, [pc, #208]	; (8010348 <tcp_input+0x2b4>)
 8010278:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	891a      	ldrh	r2, [r3, #8]
 801027e:	4b33      	ldr	r3, [pc, #204]	; (801034c <tcp_input+0x2b8>)
 8010280:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010282:	4b31      	ldr	r3, [pc, #196]	; (8010348 <tcp_input+0x2b4>)
 8010284:	781b      	ldrb	r3, [r3, #0]
 8010286:	f003 0303 	and.w	r3, r3, #3
 801028a:	2b00      	cmp	r3, #0
 801028c:	d00c      	beq.n	80102a8 <tcp_input+0x214>
    tcplen++;
 801028e:	4b2f      	ldr	r3, [pc, #188]	; (801034c <tcp_input+0x2b8>)
 8010290:	881b      	ldrh	r3, [r3, #0]
 8010292:	3301      	adds	r3, #1
 8010294:	b29a      	uxth	r2, r3
 8010296:	4b2d      	ldr	r3, [pc, #180]	; (801034c <tcp_input+0x2b8>)
 8010298:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	891a      	ldrh	r2, [r3, #8]
 801029e:	4b2b      	ldr	r3, [pc, #172]	; (801034c <tcp_input+0x2b8>)
 80102a0:	881b      	ldrh	r3, [r3, #0]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	f200 82e6 	bhi.w	8010874 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80102a8:	2300      	movs	r3, #0
 80102aa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102ac:	4b28      	ldr	r3, [pc, #160]	; (8010350 <tcp_input+0x2bc>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	61fb      	str	r3, [r7, #28]
 80102b2:	e09d      	b.n	80103f0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	7d1b      	ldrb	r3, [r3, #20]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d105      	bne.n	80102c8 <tcp_input+0x234>
 80102bc:	4b15      	ldr	r3, [pc, #84]	; (8010314 <tcp_input+0x280>)
 80102be:	22fb      	movs	r2, #251	; 0xfb
 80102c0:	4924      	ldr	r1, [pc, #144]	; (8010354 <tcp_input+0x2c0>)
 80102c2:	4816      	ldr	r0, [pc, #88]	; (801031c <tcp_input+0x288>)
 80102c4:	f007 ff2a 	bl	801811c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80102c8:	69fb      	ldr	r3, [r7, #28]
 80102ca:	7d1b      	ldrb	r3, [r3, #20]
 80102cc:	2b0a      	cmp	r3, #10
 80102ce:	d105      	bne.n	80102dc <tcp_input+0x248>
 80102d0:	4b10      	ldr	r3, [pc, #64]	; (8010314 <tcp_input+0x280>)
 80102d2:	22fc      	movs	r2, #252	; 0xfc
 80102d4:	4920      	ldr	r1, [pc, #128]	; (8010358 <tcp_input+0x2c4>)
 80102d6:	4811      	ldr	r0, [pc, #68]	; (801031c <tcp_input+0x288>)
 80102d8:	f007 ff20 	bl	801811c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80102dc:	69fb      	ldr	r3, [r7, #28]
 80102de:	7d1b      	ldrb	r3, [r3, #20]
 80102e0:	2b01      	cmp	r3, #1
 80102e2:	d105      	bne.n	80102f0 <tcp_input+0x25c>
 80102e4:	4b0b      	ldr	r3, [pc, #44]	; (8010314 <tcp_input+0x280>)
 80102e6:	22fd      	movs	r2, #253	; 0xfd
 80102e8:	491c      	ldr	r1, [pc, #112]	; (801035c <tcp_input+0x2c8>)
 80102ea:	480c      	ldr	r0, [pc, #48]	; (801031c <tcp_input+0x288>)
 80102ec:	f007 ff16 	bl	801811c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	7a1b      	ldrb	r3, [r3, #8]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d033      	beq.n	8010360 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80102f8:	69fb      	ldr	r3, [r7, #28]
 80102fa:	7a1a      	ldrb	r2, [r3, #8]
 80102fc:	4b09      	ldr	r3, [pc, #36]	; (8010324 <tcp_input+0x290>)
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010304:	3301      	adds	r3, #1
 8010306:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010308:	429a      	cmp	r2, r3
 801030a:	d029      	beq.n	8010360 <tcp_input+0x2cc>
      prev = pcb;
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	61bb      	str	r3, [r7, #24]
      continue;
 8010310:	e06b      	b.n	80103ea <tcp_input+0x356>
 8010312:	bf00      	nop
 8010314:	0801a1f4 	.word	0x0801a1f4
 8010318:	0801a228 	.word	0x0801a228
 801031c:	0801a240 	.word	0x0801a240
 8010320:	20008168 	.word	0x20008168
 8010324:	20005010 	.word	0x20005010
 8010328:	2000816c 	.word	0x2000816c
 801032c:	20008170 	.word	0x20008170
 8010330:	2000816e 	.word	0x2000816e
 8010334:	0801a268 	.word	0x0801a268
 8010338:	0801a278 	.word	0x0801a278
 801033c:	0801a284 	.word	0x0801a284
 8010340:	20008178 	.word	0x20008178
 8010344:	2000817c 	.word	0x2000817c
 8010348:	20008184 	.word	0x20008184
 801034c:	20008182 	.word	0x20008182
 8010350:	2000814c 	.word	0x2000814c
 8010354:	0801a2a4 	.word	0x0801a2a4
 8010358:	0801a2cc 	.word	0x0801a2cc
 801035c:	0801a2f8 	.word	0x0801a2f8
    }

    if (pcb->remote_port == tcphdr->src &&
 8010360:	69fb      	ldr	r3, [r7, #28]
 8010362:	8b1a      	ldrh	r2, [r3, #24]
 8010364:	4b72      	ldr	r3, [pc, #456]	; (8010530 <tcp_input+0x49c>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	881b      	ldrh	r3, [r3, #0]
 801036a:	b29b      	uxth	r3, r3
 801036c:	429a      	cmp	r2, r3
 801036e:	d13a      	bne.n	80103e6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010370:	69fb      	ldr	r3, [r7, #28]
 8010372:	8ada      	ldrh	r2, [r3, #22]
 8010374:	4b6e      	ldr	r3, [pc, #440]	; (8010530 <tcp_input+0x49c>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	885b      	ldrh	r3, [r3, #2]
 801037a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801037c:	429a      	cmp	r2, r3
 801037e:	d132      	bne.n	80103e6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010380:	69fb      	ldr	r3, [r7, #28]
 8010382:	685a      	ldr	r2, [r3, #4]
 8010384:	4b6b      	ldr	r3, [pc, #428]	; (8010534 <tcp_input+0x4a0>)
 8010386:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010388:	429a      	cmp	r2, r3
 801038a:	d12c      	bne.n	80103e6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801038c:	69fb      	ldr	r3, [r7, #28]
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	4b68      	ldr	r3, [pc, #416]	; (8010534 <tcp_input+0x4a0>)
 8010392:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010394:	429a      	cmp	r2, r3
 8010396:	d126      	bne.n	80103e6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	68db      	ldr	r3, [r3, #12]
 801039c:	69fa      	ldr	r2, [r7, #28]
 801039e:	429a      	cmp	r2, r3
 80103a0:	d106      	bne.n	80103b0 <tcp_input+0x31c>
 80103a2:	4b65      	ldr	r3, [pc, #404]	; (8010538 <tcp_input+0x4a4>)
 80103a4:	f240 120d 	movw	r2, #269	; 0x10d
 80103a8:	4964      	ldr	r1, [pc, #400]	; (801053c <tcp_input+0x4a8>)
 80103aa:	4865      	ldr	r0, [pc, #404]	; (8010540 <tcp_input+0x4ac>)
 80103ac:	f007 feb6 	bl	801811c <iprintf>
      if (prev != NULL) {
 80103b0:	69bb      	ldr	r3, [r7, #24]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d00a      	beq.n	80103cc <tcp_input+0x338>
        prev->next = pcb->next;
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	68da      	ldr	r2, [r3, #12]
 80103ba:	69bb      	ldr	r3, [r7, #24]
 80103bc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80103be:	4b61      	ldr	r3, [pc, #388]	; (8010544 <tcp_input+0x4b0>)
 80103c0:	681a      	ldr	r2, [r3, #0]
 80103c2:	69fb      	ldr	r3, [r7, #28]
 80103c4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80103c6:	4a5f      	ldr	r2, [pc, #380]	; (8010544 <tcp_input+0x4b0>)
 80103c8:	69fb      	ldr	r3, [r7, #28]
 80103ca:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80103cc:	69fb      	ldr	r3, [r7, #28]
 80103ce:	68db      	ldr	r3, [r3, #12]
 80103d0:	69fa      	ldr	r2, [r7, #28]
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d111      	bne.n	80103fa <tcp_input+0x366>
 80103d6:	4b58      	ldr	r3, [pc, #352]	; (8010538 <tcp_input+0x4a4>)
 80103d8:	f240 1215 	movw	r2, #277	; 0x115
 80103dc:	495a      	ldr	r1, [pc, #360]	; (8010548 <tcp_input+0x4b4>)
 80103de:	4858      	ldr	r0, [pc, #352]	; (8010540 <tcp_input+0x4ac>)
 80103e0:	f007 fe9c 	bl	801811c <iprintf>
      break;
 80103e4:	e009      	b.n	80103fa <tcp_input+0x366>
    }
    prev = pcb;
 80103e6:	69fb      	ldr	r3, [r7, #28]
 80103e8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80103ea:	69fb      	ldr	r3, [r7, #28]
 80103ec:	68db      	ldr	r3, [r3, #12]
 80103ee:	61fb      	str	r3, [r7, #28]
 80103f0:	69fb      	ldr	r3, [r7, #28]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	f47f af5e 	bne.w	80102b4 <tcp_input+0x220>
 80103f8:	e000      	b.n	80103fc <tcp_input+0x368>
      break;
 80103fa:	bf00      	nop
  }

  if (pcb == NULL) {
 80103fc:	69fb      	ldr	r3, [r7, #28]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	f040 80aa 	bne.w	8010558 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010404:	4b51      	ldr	r3, [pc, #324]	; (801054c <tcp_input+0x4b8>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	61fb      	str	r3, [r7, #28]
 801040a:	e03f      	b.n	801048c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801040c:	69fb      	ldr	r3, [r7, #28]
 801040e:	7d1b      	ldrb	r3, [r3, #20]
 8010410:	2b0a      	cmp	r3, #10
 8010412:	d006      	beq.n	8010422 <tcp_input+0x38e>
 8010414:	4b48      	ldr	r3, [pc, #288]	; (8010538 <tcp_input+0x4a4>)
 8010416:	f240 121f 	movw	r2, #287	; 0x11f
 801041a:	494d      	ldr	r1, [pc, #308]	; (8010550 <tcp_input+0x4bc>)
 801041c:	4848      	ldr	r0, [pc, #288]	; (8010540 <tcp_input+0x4ac>)
 801041e:	f007 fe7d 	bl	801811c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010422:	69fb      	ldr	r3, [r7, #28]
 8010424:	7a1b      	ldrb	r3, [r3, #8]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d009      	beq.n	801043e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801042a:	69fb      	ldr	r3, [r7, #28]
 801042c:	7a1a      	ldrb	r2, [r3, #8]
 801042e:	4b41      	ldr	r3, [pc, #260]	; (8010534 <tcp_input+0x4a0>)
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010436:	3301      	adds	r3, #1
 8010438:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801043a:	429a      	cmp	r2, r3
 801043c:	d122      	bne.n	8010484 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801043e:	69fb      	ldr	r3, [r7, #28]
 8010440:	8b1a      	ldrh	r2, [r3, #24]
 8010442:	4b3b      	ldr	r3, [pc, #236]	; (8010530 <tcp_input+0x49c>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	881b      	ldrh	r3, [r3, #0]
 8010448:	b29b      	uxth	r3, r3
 801044a:	429a      	cmp	r2, r3
 801044c:	d11b      	bne.n	8010486 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801044e:	69fb      	ldr	r3, [r7, #28]
 8010450:	8ada      	ldrh	r2, [r3, #22]
 8010452:	4b37      	ldr	r3, [pc, #220]	; (8010530 <tcp_input+0x49c>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	885b      	ldrh	r3, [r3, #2]
 8010458:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801045a:	429a      	cmp	r2, r3
 801045c:	d113      	bne.n	8010486 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801045e:	69fb      	ldr	r3, [r7, #28]
 8010460:	685a      	ldr	r2, [r3, #4]
 8010462:	4b34      	ldr	r3, [pc, #208]	; (8010534 <tcp_input+0x4a0>)
 8010464:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010466:	429a      	cmp	r2, r3
 8010468:	d10d      	bne.n	8010486 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801046a:	69fb      	ldr	r3, [r7, #28]
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	4b31      	ldr	r3, [pc, #196]	; (8010534 <tcp_input+0x4a0>)
 8010470:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010472:	429a      	cmp	r2, r3
 8010474:	d107      	bne.n	8010486 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010476:	69f8      	ldr	r0, [r7, #28]
 8010478:	f000 fb56 	bl	8010b28 <tcp_timewait_input>
        }
        pbuf_free(p);
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f7fd fdd3 	bl	800e028 <pbuf_free>
        return;
 8010482:	e1fd      	b.n	8010880 <tcp_input+0x7ec>
        continue;
 8010484:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010486:	69fb      	ldr	r3, [r7, #28]
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	61fb      	str	r3, [r7, #28]
 801048c:	69fb      	ldr	r3, [r7, #28]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d1bc      	bne.n	801040c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010492:	2300      	movs	r3, #0
 8010494:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010496:	4b2f      	ldr	r3, [pc, #188]	; (8010554 <tcp_input+0x4c0>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	617b      	str	r3, [r7, #20]
 801049c:	e02a      	b.n	80104f4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	7a1b      	ldrb	r3, [r3, #8]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d00c      	beq.n	80104c0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	7a1a      	ldrb	r2, [r3, #8]
 80104aa:	4b22      	ldr	r3, [pc, #136]	; (8010534 <tcp_input+0x4a0>)
 80104ac:	685b      	ldr	r3, [r3, #4]
 80104ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80104b2:	3301      	adds	r3, #1
 80104b4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d002      	beq.n	80104c0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80104ba:	697b      	ldr	r3, [r7, #20]
 80104bc:	61bb      	str	r3, [r7, #24]
        continue;
 80104be:	e016      	b.n	80104ee <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	8ada      	ldrh	r2, [r3, #22]
 80104c4:	4b1a      	ldr	r3, [pc, #104]	; (8010530 <tcp_input+0x49c>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	885b      	ldrh	r3, [r3, #2]
 80104ca:	b29b      	uxth	r3, r3
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d10c      	bne.n	80104ea <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	4b17      	ldr	r3, [pc, #92]	; (8010534 <tcp_input+0x4a0>)
 80104d6:	695b      	ldr	r3, [r3, #20]
 80104d8:	429a      	cmp	r2, r3
 80104da:	d00f      	beq.n	80104fc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d00d      	beq.n	80104fe <tcp_input+0x46a>
 80104e2:	697b      	ldr	r3, [r7, #20]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d009      	beq.n	80104fe <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	68db      	ldr	r3, [r3, #12]
 80104f2:	617b      	str	r3, [r7, #20]
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d1d1      	bne.n	801049e <tcp_input+0x40a>
 80104fa:	e000      	b.n	80104fe <tcp_input+0x46a>
            break;
 80104fc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d029      	beq.n	8010558 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010504:	69bb      	ldr	r3, [r7, #24]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d00a      	beq.n	8010520 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	68da      	ldr	r2, [r3, #12]
 801050e:	69bb      	ldr	r3, [r7, #24]
 8010510:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010512:	4b10      	ldr	r3, [pc, #64]	; (8010554 <tcp_input+0x4c0>)
 8010514:	681a      	ldr	r2, [r3, #0]
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801051a:	4a0e      	ldr	r2, [pc, #56]	; (8010554 <tcp_input+0x4c0>)
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010520:	6978      	ldr	r0, [r7, #20]
 8010522:	f000 fa03 	bl	801092c <tcp_listen_input>
      }
      pbuf_free(p);
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f7fd fd7e 	bl	800e028 <pbuf_free>
      return;
 801052c:	e1a8      	b.n	8010880 <tcp_input+0x7ec>
 801052e:	bf00      	nop
 8010530:	20008168 	.word	0x20008168
 8010534:	20005010 	.word	0x20005010
 8010538:	0801a1f4 	.word	0x0801a1f4
 801053c:	0801a320 	.word	0x0801a320
 8010540:	0801a240 	.word	0x0801a240
 8010544:	2000814c 	.word	0x2000814c
 8010548:	0801a34c 	.word	0x0801a34c
 801054c:	20008150 	.word	0x20008150
 8010550:	0801a378 	.word	0x0801a378
 8010554:	20008148 	.word	0x20008148
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010558:	69fb      	ldr	r3, [r7, #28]
 801055a:	2b00      	cmp	r3, #0
 801055c:	f000 8158 	beq.w	8010810 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010560:	4b95      	ldr	r3, [pc, #596]	; (80107b8 <tcp_input+0x724>)
 8010562:	2200      	movs	r2, #0
 8010564:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	891a      	ldrh	r2, [r3, #8]
 801056a:	4b93      	ldr	r3, [pc, #588]	; (80107b8 <tcp_input+0x724>)
 801056c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801056e:	4a92      	ldr	r2, [pc, #584]	; (80107b8 <tcp_input+0x724>)
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010574:	4b91      	ldr	r3, [pc, #580]	; (80107bc <tcp_input+0x728>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	4a8f      	ldr	r2, [pc, #572]	; (80107b8 <tcp_input+0x724>)
 801057a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801057c:	4b90      	ldr	r3, [pc, #576]	; (80107c0 <tcp_input+0x72c>)
 801057e:	2200      	movs	r2, #0
 8010580:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010582:	4b90      	ldr	r3, [pc, #576]	; (80107c4 <tcp_input+0x730>)
 8010584:	2200      	movs	r2, #0
 8010586:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010588:	4b8f      	ldr	r3, [pc, #572]	; (80107c8 <tcp_input+0x734>)
 801058a:	2200      	movs	r2, #0
 801058c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801058e:	4b8f      	ldr	r3, [pc, #572]	; (80107cc <tcp_input+0x738>)
 8010590:	781b      	ldrb	r3, [r3, #0]
 8010592:	f003 0308 	and.w	r3, r3, #8
 8010596:	2b00      	cmp	r3, #0
 8010598:	d006      	beq.n	80105a8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	7b5b      	ldrb	r3, [r3, #13]
 801059e:	f043 0301 	orr.w	r3, r3, #1
 80105a2:	b2da      	uxtb	r2, r3
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80105a8:	69fb      	ldr	r3, [r7, #28]
 80105aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d017      	beq.n	80105e0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80105b0:	69f8      	ldr	r0, [r7, #28]
 80105b2:	f7ff f879 	bl	800f6a8 <tcp_process_refused_data>
 80105b6:	4603      	mov	r3, r0
 80105b8:	f113 0f0d 	cmn.w	r3, #13
 80105bc:	d007      	beq.n	80105ce <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80105be:	69fb      	ldr	r3, [r7, #28]
 80105c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d00c      	beq.n	80105e0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80105c6:	4b82      	ldr	r3, [pc, #520]	; (80107d0 <tcp_input+0x73c>)
 80105c8:	881b      	ldrh	r3, [r3, #0]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d008      	beq.n	80105e0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80105ce:	69fb      	ldr	r3, [r7, #28]
 80105d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	f040 80e3 	bne.w	801079e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80105d8:	69f8      	ldr	r0, [r7, #28]
 80105da:	f003 fe03 	bl	80141e4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80105de:	e0de      	b.n	801079e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80105e0:	4a7c      	ldr	r2, [pc, #496]	; (80107d4 <tcp_input+0x740>)
 80105e2:	69fb      	ldr	r3, [r7, #28]
 80105e4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80105e6:	69f8      	ldr	r0, [r7, #28]
 80105e8:	f000 fb18 	bl	8010c1c <tcp_process>
 80105ec:	4603      	mov	r3, r0
 80105ee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80105f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80105f4:	f113 0f0d 	cmn.w	r3, #13
 80105f8:	f000 80d3 	beq.w	80107a2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80105fc:	4b71      	ldr	r3, [pc, #452]	; (80107c4 <tcp_input+0x730>)
 80105fe:	781b      	ldrb	r3, [r3, #0]
 8010600:	f003 0308 	and.w	r3, r3, #8
 8010604:	2b00      	cmp	r3, #0
 8010606:	d015      	beq.n	8010634 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010608:	69fb      	ldr	r3, [r7, #28]
 801060a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801060e:	2b00      	cmp	r3, #0
 8010610:	d008      	beq.n	8010624 <tcp_input+0x590>
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010618:	69fa      	ldr	r2, [r7, #28]
 801061a:	6912      	ldr	r2, [r2, #16]
 801061c:	f06f 010d 	mvn.w	r1, #13
 8010620:	4610      	mov	r0, r2
 8010622:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010624:	69f9      	ldr	r1, [r7, #28]
 8010626:	486c      	ldr	r0, [pc, #432]	; (80107d8 <tcp_input+0x744>)
 8010628:	f7ff fbbc 	bl	800fda4 <tcp_pcb_remove>
        tcp_free(pcb);
 801062c:	69f8      	ldr	r0, [r7, #28]
 801062e:	f7fd ff9b 	bl	800e568 <tcp_free>
 8010632:	e0da      	b.n	80107ea <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010634:	2300      	movs	r3, #0
 8010636:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010638:	4b63      	ldr	r3, [pc, #396]	; (80107c8 <tcp_input+0x734>)
 801063a:	881b      	ldrh	r3, [r3, #0]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d01d      	beq.n	801067c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010640:	4b61      	ldr	r3, [pc, #388]	; (80107c8 <tcp_input+0x734>)
 8010642:	881b      	ldrh	r3, [r3, #0]
 8010644:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010646:	69fb      	ldr	r3, [r7, #28]
 8010648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801064c:	2b00      	cmp	r3, #0
 801064e:	d00a      	beq.n	8010666 <tcp_input+0x5d2>
 8010650:	69fb      	ldr	r3, [r7, #28]
 8010652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010656:	69fa      	ldr	r2, [r7, #28]
 8010658:	6910      	ldr	r0, [r2, #16]
 801065a:	89fa      	ldrh	r2, [r7, #14]
 801065c:	69f9      	ldr	r1, [r7, #28]
 801065e:	4798      	blx	r3
 8010660:	4603      	mov	r3, r0
 8010662:	74fb      	strb	r3, [r7, #19]
 8010664:	e001      	b.n	801066a <tcp_input+0x5d6>
 8010666:	2300      	movs	r3, #0
 8010668:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801066a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801066e:	f113 0f0d 	cmn.w	r3, #13
 8010672:	f000 8098 	beq.w	80107a6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010676:	4b54      	ldr	r3, [pc, #336]	; (80107c8 <tcp_input+0x734>)
 8010678:	2200      	movs	r2, #0
 801067a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801067c:	69f8      	ldr	r0, [r7, #28]
 801067e:	f000 f915 	bl	80108ac <tcp_input_delayed_close>
 8010682:	4603      	mov	r3, r0
 8010684:	2b00      	cmp	r3, #0
 8010686:	f040 8090 	bne.w	80107aa <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801068a:	4b4d      	ldr	r3, [pc, #308]	; (80107c0 <tcp_input+0x72c>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d041      	beq.n	8010716 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010696:	2b00      	cmp	r3, #0
 8010698:	d006      	beq.n	80106a8 <tcp_input+0x614>
 801069a:	4b50      	ldr	r3, [pc, #320]	; (80107dc <tcp_input+0x748>)
 801069c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80106a0:	494f      	ldr	r1, [pc, #316]	; (80107e0 <tcp_input+0x74c>)
 80106a2:	4850      	ldr	r0, [pc, #320]	; (80107e4 <tcp_input+0x750>)
 80106a4:	f007 fd3a 	bl	801811c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80106a8:	69fb      	ldr	r3, [r7, #28]
 80106aa:	8b5b      	ldrh	r3, [r3, #26]
 80106ac:	f003 0310 	and.w	r3, r3, #16
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d008      	beq.n	80106c6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80106b4:	4b42      	ldr	r3, [pc, #264]	; (80107c0 <tcp_input+0x72c>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7fd fcb5 	bl	800e028 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80106be:	69f8      	ldr	r0, [r7, #28]
 80106c0:	f7fe fa3a 	bl	800eb38 <tcp_abort>
            goto aborted;
 80106c4:	e091      	b.n	80107ea <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80106c6:	69fb      	ldr	r3, [r7, #28]
 80106c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d00c      	beq.n	80106ea <tcp_input+0x656>
 80106d0:	69fb      	ldr	r3, [r7, #28]
 80106d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	6918      	ldr	r0, [r3, #16]
 80106da:	4b39      	ldr	r3, [pc, #228]	; (80107c0 <tcp_input+0x72c>)
 80106dc:	681a      	ldr	r2, [r3, #0]
 80106de:	2300      	movs	r3, #0
 80106e0:	69f9      	ldr	r1, [r7, #28]
 80106e2:	47a0      	blx	r4
 80106e4:	4603      	mov	r3, r0
 80106e6:	74fb      	strb	r3, [r7, #19]
 80106e8:	e008      	b.n	80106fc <tcp_input+0x668>
 80106ea:	4b35      	ldr	r3, [pc, #212]	; (80107c0 <tcp_input+0x72c>)
 80106ec:	681a      	ldr	r2, [r3, #0]
 80106ee:	2300      	movs	r3, #0
 80106f0:	69f9      	ldr	r1, [r7, #28]
 80106f2:	2000      	movs	r0, #0
 80106f4:	f7ff f8ae 	bl	800f854 <tcp_recv_null>
 80106f8:	4603      	mov	r3, r0
 80106fa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80106fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010700:	f113 0f0d 	cmn.w	r3, #13
 8010704:	d053      	beq.n	80107ae <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010706:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d003      	beq.n	8010716 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801070e:	4b2c      	ldr	r3, [pc, #176]	; (80107c0 <tcp_input+0x72c>)
 8010710:	681a      	ldr	r2, [r3, #0]
 8010712:	69fb      	ldr	r3, [r7, #28]
 8010714:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010716:	4b2b      	ldr	r3, [pc, #172]	; (80107c4 <tcp_input+0x730>)
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	f003 0320 	and.w	r3, r3, #32
 801071e:	2b00      	cmp	r3, #0
 8010720:	d030      	beq.n	8010784 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010722:	69fb      	ldr	r3, [r7, #28]
 8010724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010726:	2b00      	cmp	r3, #0
 8010728:	d009      	beq.n	801073e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801072a:	69fb      	ldr	r3, [r7, #28]
 801072c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801072e:	7b5a      	ldrb	r2, [r3, #13]
 8010730:	69fb      	ldr	r3, [r7, #28]
 8010732:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010734:	f042 0220 	orr.w	r2, r2, #32
 8010738:	b2d2      	uxtb	r2, r2
 801073a:	735a      	strb	r2, [r3, #13]
 801073c:	e022      	b.n	8010784 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801073e:	69fb      	ldr	r3, [r7, #28]
 8010740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010746:	d005      	beq.n	8010754 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801074c:	3301      	adds	r3, #1
 801074e:	b29a      	uxth	r2, r3
 8010750:	69fb      	ldr	r3, [r7, #28]
 8010752:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010754:	69fb      	ldr	r3, [r7, #28]
 8010756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801075a:	2b00      	cmp	r3, #0
 801075c:	d00b      	beq.n	8010776 <tcp_input+0x6e2>
 801075e:	69fb      	ldr	r3, [r7, #28]
 8010760:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010764:	69fb      	ldr	r3, [r7, #28]
 8010766:	6918      	ldr	r0, [r3, #16]
 8010768:	2300      	movs	r3, #0
 801076a:	2200      	movs	r2, #0
 801076c:	69f9      	ldr	r1, [r7, #28]
 801076e:	47a0      	blx	r4
 8010770:	4603      	mov	r3, r0
 8010772:	74fb      	strb	r3, [r7, #19]
 8010774:	e001      	b.n	801077a <tcp_input+0x6e6>
 8010776:	2300      	movs	r3, #0
 8010778:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801077a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801077e:	f113 0f0d 	cmn.w	r3, #13
 8010782:	d016      	beq.n	80107b2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010784:	4b13      	ldr	r3, [pc, #76]	; (80107d4 <tcp_input+0x740>)
 8010786:	2200      	movs	r2, #0
 8010788:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801078a:	69f8      	ldr	r0, [r7, #28]
 801078c:	f000 f88e 	bl	80108ac <tcp_input_delayed_close>
 8010790:	4603      	mov	r3, r0
 8010792:	2b00      	cmp	r3, #0
 8010794:	d128      	bne.n	80107e8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010796:	69f8      	ldr	r0, [r7, #28]
 8010798:	f002 ff20 	bl	80135dc <tcp_output>
 801079c:	e025      	b.n	80107ea <tcp_input+0x756>
        goto aborted;
 801079e:	bf00      	nop
 80107a0:	e023      	b.n	80107ea <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80107a2:	bf00      	nop
 80107a4:	e021      	b.n	80107ea <tcp_input+0x756>
              goto aborted;
 80107a6:	bf00      	nop
 80107a8:	e01f      	b.n	80107ea <tcp_input+0x756>
          goto aborted;
 80107aa:	bf00      	nop
 80107ac:	e01d      	b.n	80107ea <tcp_input+0x756>
            goto aborted;
 80107ae:	bf00      	nop
 80107b0:	e01b      	b.n	80107ea <tcp_input+0x756>
              goto aborted;
 80107b2:	bf00      	nop
 80107b4:	e019      	b.n	80107ea <tcp_input+0x756>
 80107b6:	bf00      	nop
 80107b8:	20008158 	.word	0x20008158
 80107bc:	20008168 	.word	0x20008168
 80107c0:	20008188 	.word	0x20008188
 80107c4:	20008185 	.word	0x20008185
 80107c8:	20008180 	.word	0x20008180
 80107cc:	20008184 	.word	0x20008184
 80107d0:	20008182 	.word	0x20008182
 80107d4:	2000818c 	.word	0x2000818c
 80107d8:	2000814c 	.word	0x2000814c
 80107dc:	0801a1f4 	.word	0x0801a1f4
 80107e0:	0801a3a8 	.word	0x0801a3a8
 80107e4:	0801a240 	.word	0x0801a240
          goto aborted;
 80107e8:	bf00      	nop
    tcp_input_pcb = NULL;
 80107ea:	4b27      	ldr	r3, [pc, #156]	; (8010888 <tcp_input+0x7f4>)
 80107ec:	2200      	movs	r2, #0
 80107ee:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80107f0:	4b26      	ldr	r3, [pc, #152]	; (801088c <tcp_input+0x7f8>)
 80107f2:	2200      	movs	r2, #0
 80107f4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80107f6:	4b26      	ldr	r3, [pc, #152]	; (8010890 <tcp_input+0x7fc>)
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d03f      	beq.n	801087e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80107fe:	4b24      	ldr	r3, [pc, #144]	; (8010890 <tcp_input+0x7fc>)
 8010800:	685b      	ldr	r3, [r3, #4]
 8010802:	4618      	mov	r0, r3
 8010804:	f7fd fc10 	bl	800e028 <pbuf_free>
      inseg.p = NULL;
 8010808:	4b21      	ldr	r3, [pc, #132]	; (8010890 <tcp_input+0x7fc>)
 801080a:	2200      	movs	r2, #0
 801080c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801080e:	e036      	b.n	801087e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010810:	4b20      	ldr	r3, [pc, #128]	; (8010894 <tcp_input+0x800>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	899b      	ldrh	r3, [r3, #12]
 8010816:	b29b      	uxth	r3, r3
 8010818:	4618      	mov	r0, r3
 801081a:	f7fc f8a8 	bl	800c96e <lwip_htons>
 801081e:	4603      	mov	r3, r0
 8010820:	b2db      	uxtb	r3, r3
 8010822:	f003 0304 	and.w	r3, r3, #4
 8010826:	2b00      	cmp	r3, #0
 8010828:	d118      	bne.n	801085c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801082a:	4b1b      	ldr	r3, [pc, #108]	; (8010898 <tcp_input+0x804>)
 801082c:	6819      	ldr	r1, [r3, #0]
 801082e:	4b1b      	ldr	r3, [pc, #108]	; (801089c <tcp_input+0x808>)
 8010830:	881b      	ldrh	r3, [r3, #0]
 8010832:	461a      	mov	r2, r3
 8010834:	4b1a      	ldr	r3, [pc, #104]	; (80108a0 <tcp_input+0x80c>)
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801083a:	4b16      	ldr	r3, [pc, #88]	; (8010894 <tcp_input+0x800>)
 801083c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801083e:	885b      	ldrh	r3, [r3, #2]
 8010840:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010842:	4a14      	ldr	r2, [pc, #80]	; (8010894 <tcp_input+0x800>)
 8010844:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010846:	8812      	ldrh	r2, [r2, #0]
 8010848:	b292      	uxth	r2, r2
 801084a:	9202      	str	r2, [sp, #8]
 801084c:	9301      	str	r3, [sp, #4]
 801084e:	4b15      	ldr	r3, [pc, #84]	; (80108a4 <tcp_input+0x810>)
 8010850:	9300      	str	r3, [sp, #0]
 8010852:	4b15      	ldr	r3, [pc, #84]	; (80108a8 <tcp_input+0x814>)
 8010854:	4602      	mov	r2, r0
 8010856:	2000      	movs	r0, #0
 8010858:	f003 fc74 	bl	8014144 <tcp_rst>
    pbuf_free(p);
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	f7fd fbe3 	bl	800e028 <pbuf_free>
  return;
 8010862:	e00c      	b.n	801087e <tcp_input+0x7ea>
    goto dropped;
 8010864:	bf00      	nop
 8010866:	e006      	b.n	8010876 <tcp_input+0x7e2>
    goto dropped;
 8010868:	bf00      	nop
 801086a:	e004      	b.n	8010876 <tcp_input+0x7e2>
    goto dropped;
 801086c:	bf00      	nop
 801086e:	e002      	b.n	8010876 <tcp_input+0x7e2>
      goto dropped;
 8010870:	bf00      	nop
 8010872:	e000      	b.n	8010876 <tcp_input+0x7e2>
      goto dropped;
 8010874:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	f7fd fbd6 	bl	800e028 <pbuf_free>
 801087c:	e000      	b.n	8010880 <tcp_input+0x7ec>
  return;
 801087e:	bf00      	nop
}
 8010880:	3724      	adds	r7, #36	; 0x24
 8010882:	46bd      	mov	sp, r7
 8010884:	bd90      	pop	{r4, r7, pc}
 8010886:	bf00      	nop
 8010888:	2000818c 	.word	0x2000818c
 801088c:	20008188 	.word	0x20008188
 8010890:	20008158 	.word	0x20008158
 8010894:	20008168 	.word	0x20008168
 8010898:	2000817c 	.word	0x2000817c
 801089c:	20008182 	.word	0x20008182
 80108a0:	20008178 	.word	0x20008178
 80108a4:	20005020 	.word	0x20005020
 80108a8:	20005024 	.word	0x20005024

080108ac <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b082      	sub	sp, #8
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d106      	bne.n	80108c8 <tcp_input_delayed_close+0x1c>
 80108ba:	4b17      	ldr	r3, [pc, #92]	; (8010918 <tcp_input_delayed_close+0x6c>)
 80108bc:	f240 225a 	movw	r2, #602	; 0x25a
 80108c0:	4916      	ldr	r1, [pc, #88]	; (801091c <tcp_input_delayed_close+0x70>)
 80108c2:	4817      	ldr	r0, [pc, #92]	; (8010920 <tcp_input_delayed_close+0x74>)
 80108c4:	f007 fc2a 	bl	801811c <iprintf>

  if (recv_flags & TF_CLOSED) {
 80108c8:	4b16      	ldr	r3, [pc, #88]	; (8010924 <tcp_input_delayed_close+0x78>)
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	f003 0310 	and.w	r3, r3, #16
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d01c      	beq.n	801090e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	8b5b      	ldrh	r3, [r3, #26]
 80108d8:	f003 0310 	and.w	r3, r3, #16
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d10d      	bne.n	80108fc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d008      	beq.n	80108fc <tcp_input_delayed_close+0x50>
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108f0:	687a      	ldr	r2, [r7, #4]
 80108f2:	6912      	ldr	r2, [r2, #16]
 80108f4:	f06f 010e 	mvn.w	r1, #14
 80108f8:	4610      	mov	r0, r2
 80108fa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80108fc:	6879      	ldr	r1, [r7, #4]
 80108fe:	480a      	ldr	r0, [pc, #40]	; (8010928 <tcp_input_delayed_close+0x7c>)
 8010900:	f7ff fa50 	bl	800fda4 <tcp_pcb_remove>
    tcp_free(pcb);
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f7fd fe2f 	bl	800e568 <tcp_free>
    return 1;
 801090a:	2301      	movs	r3, #1
 801090c:	e000      	b.n	8010910 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801090e:	2300      	movs	r3, #0
}
 8010910:	4618      	mov	r0, r3
 8010912:	3708      	adds	r7, #8
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}
 8010918:	0801a1f4 	.word	0x0801a1f4
 801091c:	0801a3c4 	.word	0x0801a3c4
 8010920:	0801a240 	.word	0x0801a240
 8010924:	20008185 	.word	0x20008185
 8010928:	2000814c 	.word	0x2000814c

0801092c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801092c:	b590      	push	{r4, r7, lr}
 801092e:	b08b      	sub	sp, #44	; 0x2c
 8010930:	af04      	add	r7, sp, #16
 8010932:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010934:	4b6f      	ldr	r3, [pc, #444]	; (8010af4 <tcp_listen_input+0x1c8>)
 8010936:	781b      	ldrb	r3, [r3, #0]
 8010938:	f003 0304 	and.w	r3, r3, #4
 801093c:	2b00      	cmp	r3, #0
 801093e:	f040 80d2 	bne.w	8010ae6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d106      	bne.n	8010956 <tcp_listen_input+0x2a>
 8010948:	4b6b      	ldr	r3, [pc, #428]	; (8010af8 <tcp_listen_input+0x1cc>)
 801094a:	f240 2281 	movw	r2, #641	; 0x281
 801094e:	496b      	ldr	r1, [pc, #428]	; (8010afc <tcp_listen_input+0x1d0>)
 8010950:	486b      	ldr	r0, [pc, #428]	; (8010b00 <tcp_listen_input+0x1d4>)
 8010952:	f007 fbe3 	bl	801811c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010956:	4b67      	ldr	r3, [pc, #412]	; (8010af4 <tcp_listen_input+0x1c8>)
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	f003 0310 	and.w	r3, r3, #16
 801095e:	2b00      	cmp	r3, #0
 8010960:	d019      	beq.n	8010996 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010962:	4b68      	ldr	r3, [pc, #416]	; (8010b04 <tcp_listen_input+0x1d8>)
 8010964:	6819      	ldr	r1, [r3, #0]
 8010966:	4b68      	ldr	r3, [pc, #416]	; (8010b08 <tcp_listen_input+0x1dc>)
 8010968:	881b      	ldrh	r3, [r3, #0]
 801096a:	461a      	mov	r2, r3
 801096c:	4b67      	ldr	r3, [pc, #412]	; (8010b0c <tcp_listen_input+0x1e0>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010972:	4b67      	ldr	r3, [pc, #412]	; (8010b10 <tcp_listen_input+0x1e4>)
 8010974:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010976:	885b      	ldrh	r3, [r3, #2]
 8010978:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801097a:	4a65      	ldr	r2, [pc, #404]	; (8010b10 <tcp_listen_input+0x1e4>)
 801097c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801097e:	8812      	ldrh	r2, [r2, #0]
 8010980:	b292      	uxth	r2, r2
 8010982:	9202      	str	r2, [sp, #8]
 8010984:	9301      	str	r3, [sp, #4]
 8010986:	4b63      	ldr	r3, [pc, #396]	; (8010b14 <tcp_listen_input+0x1e8>)
 8010988:	9300      	str	r3, [sp, #0]
 801098a:	4b63      	ldr	r3, [pc, #396]	; (8010b18 <tcp_listen_input+0x1ec>)
 801098c:	4602      	mov	r2, r0
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f003 fbd8 	bl	8014144 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010994:	e0a9      	b.n	8010aea <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010996:	4b57      	ldr	r3, [pc, #348]	; (8010af4 <tcp_listen_input+0x1c8>)
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	f003 0302 	and.w	r3, r3, #2
 801099e:	2b00      	cmp	r3, #0
 80109a0:	f000 80a3 	beq.w	8010aea <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	7d5b      	ldrb	r3, [r3, #21]
 80109a8:	4618      	mov	r0, r3
 80109aa:	f7ff f877 	bl	800fa9c <tcp_alloc>
 80109ae:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d111      	bne.n	80109da <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	699b      	ldr	r3, [r3, #24]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d00a      	beq.n	80109d4 <tcp_listen_input+0xa8>
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	699b      	ldr	r3, [r3, #24]
 80109c2:	687a      	ldr	r2, [r7, #4]
 80109c4:	6910      	ldr	r0, [r2, #16]
 80109c6:	f04f 32ff 	mov.w	r2, #4294967295
 80109ca:	2100      	movs	r1, #0
 80109cc:	4798      	blx	r3
 80109ce:	4603      	mov	r3, r0
 80109d0:	73bb      	strb	r3, [r7, #14]
      return;
 80109d2:	e08b      	b.n	8010aec <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80109d4:	23f0      	movs	r3, #240	; 0xf0
 80109d6:	73bb      	strb	r3, [r7, #14]
      return;
 80109d8:	e088      	b.n	8010aec <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80109da:	4b50      	ldr	r3, [pc, #320]	; (8010b1c <tcp_listen_input+0x1f0>)
 80109dc:	695a      	ldr	r2, [r3, #20]
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80109e2:	4b4e      	ldr	r3, [pc, #312]	; (8010b1c <tcp_listen_input+0x1f0>)
 80109e4:	691a      	ldr	r2, [r3, #16]
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	8ada      	ldrh	r2, [r3, #22]
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80109f2:	4b47      	ldr	r3, [pc, #284]	; (8010b10 <tcp_listen_input+0x1e4>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	881b      	ldrh	r3, [r3, #0]
 80109f8:	b29a      	uxth	r2, r3
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	2203      	movs	r2, #3
 8010a02:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010a04:	4b41      	ldr	r3, [pc, #260]	; (8010b0c <tcp_listen_input+0x1e0>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	1c5a      	adds	r2, r3, #1
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010a0e:	697b      	ldr	r3, [r7, #20]
 8010a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a12:	697b      	ldr	r3, [r7, #20]
 8010a14:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010a16:	6978      	ldr	r0, [r7, #20]
 8010a18:	f7ff fa58 	bl	800fecc <tcp_next_iss>
 8010a1c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	693a      	ldr	r2, [r7, #16]
 8010a22:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	693a      	ldr	r2, [r7, #16]
 8010a28:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	693a      	ldr	r2, [r7, #16]
 8010a2e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010a30:	697b      	ldr	r3, [r7, #20]
 8010a32:	693a      	ldr	r2, [r7, #16]
 8010a34:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010a36:	4b35      	ldr	r3, [pc, #212]	; (8010b0c <tcp_listen_input+0x1e0>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	1e5a      	subs	r2, r3, #1
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	691a      	ldr	r2, [r3, #16]
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	687a      	ldr	r2, [r7, #4]
 8010a4c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	7a5b      	ldrb	r3, [r3, #9]
 8010a52:	f003 030c 	and.w	r3, r3, #12
 8010a56:	b2da      	uxtb	r2, r3
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	7a1a      	ldrb	r2, [r3, #8]
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010a64:	4b2e      	ldr	r3, [pc, #184]	; (8010b20 <tcp_listen_input+0x1f4>)
 8010a66:	681a      	ldr	r2, [r3, #0]
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	60da      	str	r2, [r3, #12]
 8010a6c:	4a2c      	ldr	r2, [pc, #176]	; (8010b20 <tcp_listen_input+0x1f4>)
 8010a6e:	697b      	ldr	r3, [r7, #20]
 8010a70:	6013      	str	r3, [r2, #0]
 8010a72:	f003 fd27 	bl	80144c4 <tcp_timer_needed>
 8010a76:	4b2b      	ldr	r3, [pc, #172]	; (8010b24 <tcp_listen_input+0x1f8>)
 8010a78:	2201      	movs	r2, #1
 8010a7a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010a7c:	6978      	ldr	r0, [r7, #20]
 8010a7e:	f001 fd8f 	bl	80125a0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010a82:	4b23      	ldr	r3, [pc, #140]	; (8010b10 <tcp_listen_input+0x1e4>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	89db      	ldrh	r3, [r3, #14]
 8010a88:	b29a      	uxth	r2, r3
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010a9c:	697b      	ldr	r3, [r7, #20]
 8010a9e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	3304      	adds	r3, #4
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f005 f8eb 	bl	8015c80 <ip4_route>
 8010aaa:	4601      	mov	r1, r0
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	3304      	adds	r3, #4
 8010ab0:	461a      	mov	r2, r3
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	f7ff fa30 	bl	800ff18 <tcp_eff_send_mss_netif>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	461a      	mov	r2, r3
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010ac0:	2112      	movs	r1, #18
 8010ac2:	6978      	ldr	r0, [r7, #20]
 8010ac4:	f002 fc9c 	bl	8013400 <tcp_enqueue_flags>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d004      	beq.n	8010ade <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010ad4:	2100      	movs	r1, #0
 8010ad6:	6978      	ldr	r0, [r7, #20]
 8010ad8:	f7fd ff70 	bl	800e9bc <tcp_abandon>
      return;
 8010adc:	e006      	b.n	8010aec <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010ade:	6978      	ldr	r0, [r7, #20]
 8010ae0:	f002 fd7c 	bl	80135dc <tcp_output>
  return;
 8010ae4:	e001      	b.n	8010aea <tcp_listen_input+0x1be>
    return;
 8010ae6:	bf00      	nop
 8010ae8:	e000      	b.n	8010aec <tcp_listen_input+0x1c0>
  return;
 8010aea:	bf00      	nop
}
 8010aec:	371c      	adds	r7, #28
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd90      	pop	{r4, r7, pc}
 8010af2:	bf00      	nop
 8010af4:	20008184 	.word	0x20008184
 8010af8:	0801a1f4 	.word	0x0801a1f4
 8010afc:	0801a3ec 	.word	0x0801a3ec
 8010b00:	0801a240 	.word	0x0801a240
 8010b04:	2000817c 	.word	0x2000817c
 8010b08:	20008182 	.word	0x20008182
 8010b0c:	20008178 	.word	0x20008178
 8010b10:	20008168 	.word	0x20008168
 8010b14:	20005020 	.word	0x20005020
 8010b18:	20005024 	.word	0x20005024
 8010b1c:	20005010 	.word	0x20005010
 8010b20:	2000814c 	.word	0x2000814c
 8010b24:	20008154 	.word	0x20008154

08010b28 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b086      	sub	sp, #24
 8010b2c:	af04      	add	r7, sp, #16
 8010b2e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010b30:	4b2f      	ldr	r3, [pc, #188]	; (8010bf0 <tcp_timewait_input+0xc8>)
 8010b32:	781b      	ldrb	r3, [r3, #0]
 8010b34:	f003 0304 	and.w	r3, r3, #4
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d153      	bne.n	8010be4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d106      	bne.n	8010b50 <tcp_timewait_input+0x28>
 8010b42:	4b2c      	ldr	r3, [pc, #176]	; (8010bf4 <tcp_timewait_input+0xcc>)
 8010b44:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010b48:	492b      	ldr	r1, [pc, #172]	; (8010bf8 <tcp_timewait_input+0xd0>)
 8010b4a:	482c      	ldr	r0, [pc, #176]	; (8010bfc <tcp_timewait_input+0xd4>)
 8010b4c:	f007 fae6 	bl	801811c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010b50:	4b27      	ldr	r3, [pc, #156]	; (8010bf0 <tcp_timewait_input+0xc8>)
 8010b52:	781b      	ldrb	r3, [r3, #0]
 8010b54:	f003 0302 	and.w	r3, r3, #2
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d02a      	beq.n	8010bb2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010b5c:	4b28      	ldr	r3, [pc, #160]	; (8010c00 <tcp_timewait_input+0xd8>)
 8010b5e:	681a      	ldr	r2, [r3, #0]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b64:	1ad3      	subs	r3, r2, r3
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	db2d      	blt.n	8010bc6 <tcp_timewait_input+0x9e>
 8010b6a:	4b25      	ldr	r3, [pc, #148]	; (8010c00 <tcp_timewait_input+0xd8>)
 8010b6c:	681a      	ldr	r2, [r3, #0]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b72:	6879      	ldr	r1, [r7, #4]
 8010b74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010b76:	440b      	add	r3, r1
 8010b78:	1ad3      	subs	r3, r2, r3
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	dc23      	bgt.n	8010bc6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b7e:	4b21      	ldr	r3, [pc, #132]	; (8010c04 <tcp_timewait_input+0xdc>)
 8010b80:	6819      	ldr	r1, [r3, #0]
 8010b82:	4b21      	ldr	r3, [pc, #132]	; (8010c08 <tcp_timewait_input+0xe0>)
 8010b84:	881b      	ldrh	r3, [r3, #0]
 8010b86:	461a      	mov	r2, r3
 8010b88:	4b1d      	ldr	r3, [pc, #116]	; (8010c00 <tcp_timewait_input+0xd8>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b8e:	4b1f      	ldr	r3, [pc, #124]	; (8010c0c <tcp_timewait_input+0xe4>)
 8010b90:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b92:	885b      	ldrh	r3, [r3, #2]
 8010b94:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b96:	4a1d      	ldr	r2, [pc, #116]	; (8010c0c <tcp_timewait_input+0xe4>)
 8010b98:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b9a:	8812      	ldrh	r2, [r2, #0]
 8010b9c:	b292      	uxth	r2, r2
 8010b9e:	9202      	str	r2, [sp, #8]
 8010ba0:	9301      	str	r3, [sp, #4]
 8010ba2:	4b1b      	ldr	r3, [pc, #108]	; (8010c10 <tcp_timewait_input+0xe8>)
 8010ba4:	9300      	str	r3, [sp, #0]
 8010ba6:	4b1b      	ldr	r3, [pc, #108]	; (8010c14 <tcp_timewait_input+0xec>)
 8010ba8:	4602      	mov	r2, r0
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f003 faca 	bl	8014144 <tcp_rst>
      return;
 8010bb0:	e01b      	b.n	8010bea <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010bb2:	4b0f      	ldr	r3, [pc, #60]	; (8010bf0 <tcp_timewait_input+0xc8>)
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	f003 0301 	and.w	r3, r3, #1
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d003      	beq.n	8010bc6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010bbe:	4b16      	ldr	r3, [pc, #88]	; (8010c18 <tcp_timewait_input+0xf0>)
 8010bc0:	681a      	ldr	r2, [r3, #0]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010bc6:	4b10      	ldr	r3, [pc, #64]	; (8010c08 <tcp_timewait_input+0xe0>)
 8010bc8:	881b      	ldrh	r3, [r3, #0]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d00c      	beq.n	8010be8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	8b5b      	ldrh	r3, [r3, #26]
 8010bd2:	f043 0302 	orr.w	r3, r3, #2
 8010bd6:	b29a      	uxth	r2, r3
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f002 fcfd 	bl	80135dc <tcp_output>
  }
  return;
 8010be2:	e001      	b.n	8010be8 <tcp_timewait_input+0xc0>
    return;
 8010be4:	bf00      	nop
 8010be6:	e000      	b.n	8010bea <tcp_timewait_input+0xc2>
  return;
 8010be8:	bf00      	nop
}
 8010bea:	3708      	adds	r7, #8
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}
 8010bf0:	20008184 	.word	0x20008184
 8010bf4:	0801a1f4 	.word	0x0801a1f4
 8010bf8:	0801a40c 	.word	0x0801a40c
 8010bfc:	0801a240 	.word	0x0801a240
 8010c00:	20008178 	.word	0x20008178
 8010c04:	2000817c 	.word	0x2000817c
 8010c08:	20008182 	.word	0x20008182
 8010c0c:	20008168 	.word	0x20008168
 8010c10:	20005020 	.word	0x20005020
 8010c14:	20005024 	.word	0x20005024
 8010c18:	20008140 	.word	0x20008140

08010c1c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010c1c:	b590      	push	{r4, r7, lr}
 8010c1e:	b08d      	sub	sp, #52	; 0x34
 8010c20:	af04      	add	r7, sp, #16
 8010c22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010c24:	2300      	movs	r3, #0
 8010c26:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d106      	bne.n	8010c40 <tcp_process+0x24>
 8010c32:	4b9d      	ldr	r3, [pc, #628]	; (8010ea8 <tcp_process+0x28c>)
 8010c34:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010c38:	499c      	ldr	r1, [pc, #624]	; (8010eac <tcp_process+0x290>)
 8010c3a:	489d      	ldr	r0, [pc, #628]	; (8010eb0 <tcp_process+0x294>)
 8010c3c:	f007 fa6e 	bl	801811c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010c40:	4b9c      	ldr	r3, [pc, #624]	; (8010eb4 <tcp_process+0x298>)
 8010c42:	781b      	ldrb	r3, [r3, #0]
 8010c44:	f003 0304 	and.w	r3, r3, #4
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d04e      	beq.n	8010cea <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	7d1b      	ldrb	r3, [r3, #20]
 8010c50:	2b02      	cmp	r3, #2
 8010c52:	d108      	bne.n	8010c66 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c58:	4b97      	ldr	r3, [pc, #604]	; (8010eb8 <tcp_process+0x29c>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	429a      	cmp	r2, r3
 8010c5e:	d123      	bne.n	8010ca8 <tcp_process+0x8c>
        acceptable = 1;
 8010c60:	2301      	movs	r3, #1
 8010c62:	76fb      	strb	r3, [r7, #27]
 8010c64:	e020      	b.n	8010ca8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c6a:	4b94      	ldr	r3, [pc, #592]	; (8010ebc <tcp_process+0x2a0>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	429a      	cmp	r2, r3
 8010c70:	d102      	bne.n	8010c78 <tcp_process+0x5c>
        acceptable = 1;
 8010c72:	2301      	movs	r3, #1
 8010c74:	76fb      	strb	r3, [r7, #27]
 8010c76:	e017      	b.n	8010ca8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010c78:	4b90      	ldr	r3, [pc, #576]	; (8010ebc <tcp_process+0x2a0>)
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c80:	1ad3      	subs	r3, r2, r3
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	db10      	blt.n	8010ca8 <tcp_process+0x8c>
 8010c86:	4b8d      	ldr	r3, [pc, #564]	; (8010ebc <tcp_process+0x2a0>)
 8010c88:	681a      	ldr	r2, [r3, #0]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c8e:	6879      	ldr	r1, [r7, #4]
 8010c90:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010c92:	440b      	add	r3, r1
 8010c94:	1ad3      	subs	r3, r2, r3
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	dc06      	bgt.n	8010ca8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	8b5b      	ldrh	r3, [r3, #26]
 8010c9e:	f043 0302 	orr.w	r3, r3, #2
 8010ca2:	b29a      	uxth	r2, r3
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010ca8:	7efb      	ldrb	r3, [r7, #27]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d01b      	beq.n	8010ce6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	7d1b      	ldrb	r3, [r3, #20]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d106      	bne.n	8010cc4 <tcp_process+0xa8>
 8010cb6:	4b7c      	ldr	r3, [pc, #496]	; (8010ea8 <tcp_process+0x28c>)
 8010cb8:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010cbc:	4980      	ldr	r1, [pc, #512]	; (8010ec0 <tcp_process+0x2a4>)
 8010cbe:	487c      	ldr	r0, [pc, #496]	; (8010eb0 <tcp_process+0x294>)
 8010cc0:	f007 fa2c 	bl	801811c <iprintf>
      recv_flags |= TF_RESET;
 8010cc4:	4b7f      	ldr	r3, [pc, #508]	; (8010ec4 <tcp_process+0x2a8>)
 8010cc6:	781b      	ldrb	r3, [r3, #0]
 8010cc8:	f043 0308 	orr.w	r3, r3, #8
 8010ccc:	b2da      	uxtb	r2, r3
 8010cce:	4b7d      	ldr	r3, [pc, #500]	; (8010ec4 <tcp_process+0x2a8>)
 8010cd0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	8b5b      	ldrh	r3, [r3, #26]
 8010cd6:	f023 0301 	bic.w	r3, r3, #1
 8010cda:	b29a      	uxth	r2, r3
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010ce0:	f06f 030d 	mvn.w	r3, #13
 8010ce4:	e37a      	b.n	80113dc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	e378      	b.n	80113dc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010cea:	4b72      	ldr	r3, [pc, #456]	; (8010eb4 <tcp_process+0x298>)
 8010cec:	781b      	ldrb	r3, [r3, #0]
 8010cee:	f003 0302 	and.w	r3, r3, #2
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d010      	beq.n	8010d18 <tcp_process+0xfc>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	7d1b      	ldrb	r3, [r3, #20]
 8010cfa:	2b02      	cmp	r3, #2
 8010cfc:	d00c      	beq.n	8010d18 <tcp_process+0xfc>
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	7d1b      	ldrb	r3, [r3, #20]
 8010d02:	2b03      	cmp	r3, #3
 8010d04:	d008      	beq.n	8010d18 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	8b5b      	ldrh	r3, [r3, #26]
 8010d0a:	f043 0302 	orr.w	r3, r3, #2
 8010d0e:	b29a      	uxth	r2, r3
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010d14:	2300      	movs	r3, #0
 8010d16:	e361      	b.n	80113dc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	8b5b      	ldrh	r3, [r3, #26]
 8010d1c:	f003 0310 	and.w	r3, r3, #16
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d103      	bne.n	8010d2c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010d24:	4b68      	ldr	r3, [pc, #416]	; (8010ec8 <tcp_process+0x2ac>)
 8010d26:	681a      	ldr	r2, [r3, #0]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2200      	movs	r2, #0
 8010d38:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f001 fc2f 	bl	80125a0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	7d1b      	ldrb	r3, [r3, #20]
 8010d46:	3b02      	subs	r3, #2
 8010d48:	2b07      	cmp	r3, #7
 8010d4a:	f200 8337 	bhi.w	80113bc <tcp_process+0x7a0>
 8010d4e:	a201      	add	r2, pc, #4	; (adr r2, 8010d54 <tcp_process+0x138>)
 8010d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d54:	08010d75 	.word	0x08010d75
 8010d58:	08010fa5 	.word	0x08010fa5
 8010d5c:	0801111d 	.word	0x0801111d
 8010d60:	08011147 	.word	0x08011147
 8010d64:	0801126b 	.word	0x0801126b
 8010d68:	0801111d 	.word	0x0801111d
 8010d6c:	080112f7 	.word	0x080112f7
 8010d70:	08011387 	.word	0x08011387
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010d74:	4b4f      	ldr	r3, [pc, #316]	; (8010eb4 <tcp_process+0x298>)
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	f003 0310 	and.w	r3, r3, #16
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	f000 80e4 	beq.w	8010f4a <tcp_process+0x32e>
 8010d82:	4b4c      	ldr	r3, [pc, #304]	; (8010eb4 <tcp_process+0x298>)
 8010d84:	781b      	ldrb	r3, [r3, #0]
 8010d86:	f003 0302 	and.w	r3, r3, #2
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	f000 80dd 	beq.w	8010f4a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d94:	1c5a      	adds	r2, r3, #1
 8010d96:	4b48      	ldr	r3, [pc, #288]	; (8010eb8 <tcp_process+0x29c>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	f040 80d5 	bne.w	8010f4a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010da0:	4b46      	ldr	r3, [pc, #280]	; (8010ebc <tcp_process+0x2a0>)
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	1c5a      	adds	r2, r3, #1
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010db2:	4b41      	ldr	r3, [pc, #260]	; (8010eb8 <tcp_process+0x29c>)
 8010db4:	681a      	ldr	r2, [r3, #0]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010dba:	4b44      	ldr	r3, [pc, #272]	; (8010ecc <tcp_process+0x2b0>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	89db      	ldrh	r3, [r3, #14]
 8010dc0:	b29a      	uxth	r2, r3
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010dd4:	4b39      	ldr	r3, [pc, #228]	; (8010ebc <tcp_process+0x2a0>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	1e5a      	subs	r2, r3, #1
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	2204      	movs	r2, #4
 8010de2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	3304      	adds	r3, #4
 8010dec:	4618      	mov	r0, r3
 8010dee:	f004 ff47 	bl	8015c80 <ip4_route>
 8010df2:	4601      	mov	r1, r0
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	3304      	adds	r3, #4
 8010df8:	461a      	mov	r2, r3
 8010dfa:	4620      	mov	r0, r4
 8010dfc:	f7ff f88c 	bl	800ff18 <tcp_eff_send_mss_netif>
 8010e00:	4603      	mov	r3, r0
 8010e02:	461a      	mov	r2, r3
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e0c:	009a      	lsls	r2, r3, #2
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e12:	005b      	lsls	r3, r3, #1
 8010e14:	f241 111c 	movw	r1, #4380	; 0x111c
 8010e18:	428b      	cmp	r3, r1
 8010e1a:	bf38      	it	cc
 8010e1c:	460b      	movcc	r3, r1
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d204      	bcs.n	8010e2c <tcp_process+0x210>
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e26:	009b      	lsls	r3, r3, #2
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	e00d      	b.n	8010e48 <tcp_process+0x22c>
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e30:	005b      	lsls	r3, r3, #1
 8010e32:	f241 121c 	movw	r2, #4380	; 0x111c
 8010e36:	4293      	cmp	r3, r2
 8010e38:	d904      	bls.n	8010e44 <tcp_process+0x228>
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e3e:	005b      	lsls	r3, r3, #1
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	e001      	b.n	8010e48 <tcp_process+0x22c>
 8010e44:	f241 131c 	movw	r3, #4380	; 0x111c
 8010e48:	687a      	ldr	r2, [r7, #4]
 8010e4a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d106      	bne.n	8010e66 <tcp_process+0x24a>
 8010e58:	4b13      	ldr	r3, [pc, #76]	; (8010ea8 <tcp_process+0x28c>)
 8010e5a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010e5e:	491c      	ldr	r1, [pc, #112]	; (8010ed0 <tcp_process+0x2b4>)
 8010e60:	4813      	ldr	r0, [pc, #76]	; (8010eb0 <tcp_process+0x294>)
 8010e62:	f007 f95b 	bl	801811c <iprintf>
        --pcb->snd_queuelen;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e6c:	3b01      	subs	r3, #1
 8010e6e:	b29a      	uxth	r2, r3
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e7a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010e7c:	69fb      	ldr	r3, [r7, #28]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d12a      	bne.n	8010ed8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e86:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010e88:	69fb      	ldr	r3, [r7, #28]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d106      	bne.n	8010e9c <tcp_process+0x280>
 8010e8e:	4b06      	ldr	r3, [pc, #24]	; (8010ea8 <tcp_process+0x28c>)
 8010e90:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010e94:	490f      	ldr	r1, [pc, #60]	; (8010ed4 <tcp_process+0x2b8>)
 8010e96:	4806      	ldr	r0, [pc, #24]	; (8010eb0 <tcp_process+0x294>)
 8010e98:	f007 f940 	bl	801811c <iprintf>
          pcb->unsent = rseg->next;
 8010e9c:	69fb      	ldr	r3, [r7, #28]
 8010e9e:	681a      	ldr	r2, [r3, #0]
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	66da      	str	r2, [r3, #108]	; 0x6c
 8010ea4:	e01c      	b.n	8010ee0 <tcp_process+0x2c4>
 8010ea6:	bf00      	nop
 8010ea8:	0801a1f4 	.word	0x0801a1f4
 8010eac:	0801a42c 	.word	0x0801a42c
 8010eb0:	0801a240 	.word	0x0801a240
 8010eb4:	20008184 	.word	0x20008184
 8010eb8:	2000817c 	.word	0x2000817c
 8010ebc:	20008178 	.word	0x20008178
 8010ec0:	0801a448 	.word	0x0801a448
 8010ec4:	20008185 	.word	0x20008185
 8010ec8:	20008140 	.word	0x20008140
 8010ecc:	20008168 	.word	0x20008168
 8010ed0:	0801a468 	.word	0x0801a468
 8010ed4:	0801a480 	.word	0x0801a480
        } else {
          pcb->unacked = rseg->next;
 8010ed8:	69fb      	ldr	r3, [r7, #28]
 8010eda:	681a      	ldr	r2, [r3, #0]
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010ee0:	69f8      	ldr	r0, [r7, #28]
 8010ee2:	f7fe fc72 	bl	800f7ca <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d104      	bne.n	8010ef8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ef4:	861a      	strh	r2, [r3, #48]	; 0x30
 8010ef6:	e006      	b.n	8010f06 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2200      	movs	r2, #0
 8010efc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2200      	movs	r2, #0
 8010f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d00a      	beq.n	8010f26 <tcp_process+0x30a>
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f16:	687a      	ldr	r2, [r7, #4]
 8010f18:	6910      	ldr	r0, [r2, #16]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	6879      	ldr	r1, [r7, #4]
 8010f1e:	4798      	blx	r3
 8010f20:	4603      	mov	r3, r0
 8010f22:	76bb      	strb	r3, [r7, #26]
 8010f24:	e001      	b.n	8010f2a <tcp_process+0x30e>
 8010f26:	2300      	movs	r3, #0
 8010f28:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010f2a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f2e:	f113 0f0d 	cmn.w	r3, #13
 8010f32:	d102      	bne.n	8010f3a <tcp_process+0x31e>
          return ERR_ABRT;
 8010f34:	f06f 030c 	mvn.w	r3, #12
 8010f38:	e250      	b.n	80113dc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	8b5b      	ldrh	r3, [r3, #26]
 8010f3e:	f043 0302 	orr.w	r3, r3, #2
 8010f42:	b29a      	uxth	r2, r3
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010f48:	e23a      	b.n	80113c0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010f4a:	4b98      	ldr	r3, [pc, #608]	; (80111ac <tcp_process+0x590>)
 8010f4c:	781b      	ldrb	r3, [r3, #0]
 8010f4e:	f003 0310 	and.w	r3, r3, #16
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	f000 8234 	beq.w	80113c0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f58:	4b95      	ldr	r3, [pc, #596]	; (80111b0 <tcp_process+0x594>)
 8010f5a:	6819      	ldr	r1, [r3, #0]
 8010f5c:	4b95      	ldr	r3, [pc, #596]	; (80111b4 <tcp_process+0x598>)
 8010f5e:	881b      	ldrh	r3, [r3, #0]
 8010f60:	461a      	mov	r2, r3
 8010f62:	4b95      	ldr	r3, [pc, #596]	; (80111b8 <tcp_process+0x59c>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f68:	4b94      	ldr	r3, [pc, #592]	; (80111bc <tcp_process+0x5a0>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f6c:	885b      	ldrh	r3, [r3, #2]
 8010f6e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f70:	4a92      	ldr	r2, [pc, #584]	; (80111bc <tcp_process+0x5a0>)
 8010f72:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f74:	8812      	ldrh	r2, [r2, #0]
 8010f76:	b292      	uxth	r2, r2
 8010f78:	9202      	str	r2, [sp, #8]
 8010f7a:	9301      	str	r3, [sp, #4]
 8010f7c:	4b90      	ldr	r3, [pc, #576]	; (80111c0 <tcp_process+0x5a4>)
 8010f7e:	9300      	str	r3, [sp, #0]
 8010f80:	4b90      	ldr	r3, [pc, #576]	; (80111c4 <tcp_process+0x5a8>)
 8010f82:	4602      	mov	r2, r0
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f003 f8dd 	bl	8014144 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010f90:	2b05      	cmp	r3, #5
 8010f92:	f200 8215 	bhi.w	80113c0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f002 fea9 	bl	8013cf4 <tcp_rexmit_rto>
      break;
 8010fa2:	e20d      	b.n	80113c0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010fa4:	4b81      	ldr	r3, [pc, #516]	; (80111ac <tcp_process+0x590>)
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	f003 0310 	and.w	r3, r3, #16
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	f000 80a1 	beq.w	80110f4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010fb2:	4b7f      	ldr	r3, [pc, #508]	; (80111b0 <tcp_process+0x594>)
 8010fb4:	681a      	ldr	r2, [r3, #0]
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fba:	1ad3      	subs	r3, r2, r3
 8010fbc:	3b01      	subs	r3, #1
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	db7e      	blt.n	80110c0 <tcp_process+0x4a4>
 8010fc2:	4b7b      	ldr	r3, [pc, #492]	; (80111b0 <tcp_process+0x594>)
 8010fc4:	681a      	ldr	r2, [r3, #0]
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fca:	1ad3      	subs	r3, r2, r3
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	dc77      	bgt.n	80110c0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	2204      	movs	r2, #4
 8010fd4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d102      	bne.n	8010fe4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010fde:	23fa      	movs	r3, #250	; 0xfa
 8010fe0:	76bb      	strb	r3, [r7, #26]
 8010fe2:	e01d      	b.n	8011020 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010fe8:	699b      	ldr	r3, [r3, #24]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d106      	bne.n	8010ffc <tcp_process+0x3e0>
 8010fee:	4b76      	ldr	r3, [pc, #472]	; (80111c8 <tcp_process+0x5ac>)
 8010ff0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010ff4:	4975      	ldr	r1, [pc, #468]	; (80111cc <tcp_process+0x5b0>)
 8010ff6:	4876      	ldr	r0, [pc, #472]	; (80111d0 <tcp_process+0x5b4>)
 8010ff8:	f007 f890 	bl	801811c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011000:	699b      	ldr	r3, [r3, #24]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d00a      	beq.n	801101c <tcp_process+0x400>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801100a:	699b      	ldr	r3, [r3, #24]
 801100c:	687a      	ldr	r2, [r7, #4]
 801100e:	6910      	ldr	r0, [r2, #16]
 8011010:	2200      	movs	r2, #0
 8011012:	6879      	ldr	r1, [r7, #4]
 8011014:	4798      	blx	r3
 8011016:	4603      	mov	r3, r0
 8011018:	76bb      	strb	r3, [r7, #26]
 801101a:	e001      	b.n	8011020 <tcp_process+0x404>
 801101c:	23f0      	movs	r3, #240	; 0xf0
 801101e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011020:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d00a      	beq.n	801103e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011028:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801102c:	f113 0f0d 	cmn.w	r3, #13
 8011030:	d002      	beq.n	8011038 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f7fd fd80 	bl	800eb38 <tcp_abort>
            }
            return ERR_ABRT;
 8011038:	f06f 030c 	mvn.w	r3, #12
 801103c:	e1ce      	b.n	80113dc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f000 fae0 	bl	8011604 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011044:	4b63      	ldr	r3, [pc, #396]	; (80111d4 <tcp_process+0x5b8>)
 8011046:	881b      	ldrh	r3, [r3, #0]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d005      	beq.n	8011058 <tcp_process+0x43c>
            recv_acked--;
 801104c:	4b61      	ldr	r3, [pc, #388]	; (80111d4 <tcp_process+0x5b8>)
 801104e:	881b      	ldrh	r3, [r3, #0]
 8011050:	3b01      	subs	r3, #1
 8011052:	b29a      	uxth	r2, r3
 8011054:	4b5f      	ldr	r3, [pc, #380]	; (80111d4 <tcp_process+0x5b8>)
 8011056:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801105c:	009a      	lsls	r2, r3, #2
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011062:	005b      	lsls	r3, r3, #1
 8011064:	f241 111c 	movw	r1, #4380	; 0x111c
 8011068:	428b      	cmp	r3, r1
 801106a:	bf38      	it	cc
 801106c:	460b      	movcc	r3, r1
 801106e:	429a      	cmp	r2, r3
 8011070:	d204      	bcs.n	801107c <tcp_process+0x460>
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011076:	009b      	lsls	r3, r3, #2
 8011078:	b29b      	uxth	r3, r3
 801107a:	e00d      	b.n	8011098 <tcp_process+0x47c>
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011080:	005b      	lsls	r3, r3, #1
 8011082:	f241 121c 	movw	r2, #4380	; 0x111c
 8011086:	4293      	cmp	r3, r2
 8011088:	d904      	bls.n	8011094 <tcp_process+0x478>
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801108e:	005b      	lsls	r3, r3, #1
 8011090:	b29b      	uxth	r3, r3
 8011092:	e001      	b.n	8011098 <tcp_process+0x47c>
 8011094:	f241 131c 	movw	r3, #4380	; 0x111c
 8011098:	687a      	ldr	r2, [r7, #4]
 801109a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801109e:	4b4e      	ldr	r3, [pc, #312]	; (80111d8 <tcp_process+0x5bc>)
 80110a0:	781b      	ldrb	r3, [r3, #0]
 80110a2:	f003 0320 	and.w	r3, r3, #32
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d037      	beq.n	801111a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	8b5b      	ldrh	r3, [r3, #26]
 80110ae:	f043 0302 	orr.w	r3, r3, #2
 80110b2:	b29a      	uxth	r2, r3
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2207      	movs	r2, #7
 80110bc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80110be:	e02c      	b.n	801111a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110c0:	4b3b      	ldr	r3, [pc, #236]	; (80111b0 <tcp_process+0x594>)
 80110c2:	6819      	ldr	r1, [r3, #0]
 80110c4:	4b3b      	ldr	r3, [pc, #236]	; (80111b4 <tcp_process+0x598>)
 80110c6:	881b      	ldrh	r3, [r3, #0]
 80110c8:	461a      	mov	r2, r3
 80110ca:	4b3b      	ldr	r3, [pc, #236]	; (80111b8 <tcp_process+0x59c>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110d0:	4b3a      	ldr	r3, [pc, #232]	; (80111bc <tcp_process+0x5a0>)
 80110d2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110d4:	885b      	ldrh	r3, [r3, #2]
 80110d6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110d8:	4a38      	ldr	r2, [pc, #224]	; (80111bc <tcp_process+0x5a0>)
 80110da:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110dc:	8812      	ldrh	r2, [r2, #0]
 80110de:	b292      	uxth	r2, r2
 80110e0:	9202      	str	r2, [sp, #8]
 80110e2:	9301      	str	r3, [sp, #4]
 80110e4:	4b36      	ldr	r3, [pc, #216]	; (80111c0 <tcp_process+0x5a4>)
 80110e6:	9300      	str	r3, [sp, #0]
 80110e8:	4b36      	ldr	r3, [pc, #216]	; (80111c4 <tcp_process+0x5a8>)
 80110ea:	4602      	mov	r2, r0
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f003 f829 	bl	8014144 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80110f2:	e167      	b.n	80113c4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80110f4:	4b2d      	ldr	r3, [pc, #180]	; (80111ac <tcp_process+0x590>)
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	f003 0302 	and.w	r3, r3, #2
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	f000 8161 	beq.w	80113c4 <tcp_process+0x7a8>
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011106:	1e5a      	subs	r2, r3, #1
 8011108:	4b2b      	ldr	r3, [pc, #172]	; (80111b8 <tcp_process+0x59c>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	429a      	cmp	r2, r3
 801110e:	f040 8159 	bne.w	80113c4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f002 fe10 	bl	8013d38 <tcp_rexmit>
      break;
 8011118:	e154      	b.n	80113c4 <tcp_process+0x7a8>
 801111a:	e153      	b.n	80113c4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f000 fa71 	bl	8011604 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011122:	4b2d      	ldr	r3, [pc, #180]	; (80111d8 <tcp_process+0x5bc>)
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	f003 0320 	and.w	r3, r3, #32
 801112a:	2b00      	cmp	r3, #0
 801112c:	f000 814c 	beq.w	80113c8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	8b5b      	ldrh	r3, [r3, #26]
 8011134:	f043 0302 	orr.w	r3, r3, #2
 8011138:	b29a      	uxth	r2, r3
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2207      	movs	r2, #7
 8011142:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011144:	e140      	b.n	80113c8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f000 fa5c 	bl	8011604 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801114c:	4b22      	ldr	r3, [pc, #136]	; (80111d8 <tcp_process+0x5bc>)
 801114e:	781b      	ldrb	r3, [r3, #0]
 8011150:	f003 0320 	and.w	r3, r3, #32
 8011154:	2b00      	cmp	r3, #0
 8011156:	d071      	beq.n	801123c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011158:	4b14      	ldr	r3, [pc, #80]	; (80111ac <tcp_process+0x590>)
 801115a:	781b      	ldrb	r3, [r3, #0]
 801115c:	f003 0310 	and.w	r3, r3, #16
 8011160:	2b00      	cmp	r3, #0
 8011162:	d060      	beq.n	8011226 <tcp_process+0x60a>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011168:	4b11      	ldr	r3, [pc, #68]	; (80111b0 <tcp_process+0x594>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	429a      	cmp	r2, r3
 801116e:	d15a      	bne.n	8011226 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011174:	2b00      	cmp	r3, #0
 8011176:	d156      	bne.n	8011226 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	8b5b      	ldrh	r3, [r3, #26]
 801117c:	f043 0302 	orr.w	r3, r3, #2
 8011180:	b29a      	uxth	r2, r3
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f7fe fdbc 	bl	800fd04 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801118c:	4b13      	ldr	r3, [pc, #76]	; (80111dc <tcp_process+0x5c0>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	687a      	ldr	r2, [r7, #4]
 8011192:	429a      	cmp	r2, r3
 8011194:	d105      	bne.n	80111a2 <tcp_process+0x586>
 8011196:	4b11      	ldr	r3, [pc, #68]	; (80111dc <tcp_process+0x5c0>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	68db      	ldr	r3, [r3, #12]
 801119c:	4a0f      	ldr	r2, [pc, #60]	; (80111dc <tcp_process+0x5c0>)
 801119e:	6013      	str	r3, [r2, #0]
 80111a0:	e02e      	b.n	8011200 <tcp_process+0x5e4>
 80111a2:	4b0e      	ldr	r3, [pc, #56]	; (80111dc <tcp_process+0x5c0>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	617b      	str	r3, [r7, #20]
 80111a8:	e027      	b.n	80111fa <tcp_process+0x5de>
 80111aa:	bf00      	nop
 80111ac:	20008184 	.word	0x20008184
 80111b0:	2000817c 	.word	0x2000817c
 80111b4:	20008182 	.word	0x20008182
 80111b8:	20008178 	.word	0x20008178
 80111bc:	20008168 	.word	0x20008168
 80111c0:	20005020 	.word	0x20005020
 80111c4:	20005024 	.word	0x20005024
 80111c8:	0801a1f4 	.word	0x0801a1f4
 80111cc:	0801a494 	.word	0x0801a494
 80111d0:	0801a240 	.word	0x0801a240
 80111d4:	20008180 	.word	0x20008180
 80111d8:	20008185 	.word	0x20008185
 80111dc:	2000814c 	.word	0x2000814c
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	68db      	ldr	r3, [r3, #12]
 80111e4:	687a      	ldr	r2, [r7, #4]
 80111e6:	429a      	cmp	r2, r3
 80111e8:	d104      	bne.n	80111f4 <tcp_process+0x5d8>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	68da      	ldr	r2, [r3, #12]
 80111ee:	697b      	ldr	r3, [r7, #20]
 80111f0:	60da      	str	r2, [r3, #12]
 80111f2:	e005      	b.n	8011200 <tcp_process+0x5e4>
 80111f4:	697b      	ldr	r3, [r7, #20]
 80111f6:	68db      	ldr	r3, [r3, #12]
 80111f8:	617b      	str	r3, [r7, #20]
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d1ef      	bne.n	80111e0 <tcp_process+0x5c4>
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2200      	movs	r2, #0
 8011204:	60da      	str	r2, [r3, #12]
 8011206:	4b77      	ldr	r3, [pc, #476]	; (80113e4 <tcp_process+0x7c8>)
 8011208:	2201      	movs	r2, #1
 801120a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	220a      	movs	r2, #10
 8011210:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011212:	4b75      	ldr	r3, [pc, #468]	; (80113e8 <tcp_process+0x7cc>)
 8011214:	681a      	ldr	r2, [r3, #0]
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	60da      	str	r2, [r3, #12]
 801121a:	4a73      	ldr	r2, [pc, #460]	; (80113e8 <tcp_process+0x7cc>)
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	6013      	str	r3, [r2, #0]
 8011220:	f003 f950 	bl	80144c4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011224:	e0d2      	b.n	80113cc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	8b5b      	ldrh	r3, [r3, #26]
 801122a:	f043 0302 	orr.w	r3, r3, #2
 801122e:	b29a      	uxth	r2, r3
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2208      	movs	r2, #8
 8011238:	751a      	strb	r2, [r3, #20]
      break;
 801123a:	e0c7      	b.n	80113cc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801123c:	4b6b      	ldr	r3, [pc, #428]	; (80113ec <tcp_process+0x7d0>)
 801123e:	781b      	ldrb	r3, [r3, #0]
 8011240:	f003 0310 	and.w	r3, r3, #16
 8011244:	2b00      	cmp	r3, #0
 8011246:	f000 80c1 	beq.w	80113cc <tcp_process+0x7b0>
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801124e:	4b68      	ldr	r3, [pc, #416]	; (80113f0 <tcp_process+0x7d4>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	429a      	cmp	r2, r3
 8011254:	f040 80ba 	bne.w	80113cc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801125c:	2b00      	cmp	r3, #0
 801125e:	f040 80b5 	bne.w	80113cc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	2206      	movs	r2, #6
 8011266:	751a      	strb	r2, [r3, #20]
      break;
 8011268:	e0b0      	b.n	80113cc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f000 f9ca 	bl	8011604 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011270:	4b60      	ldr	r3, [pc, #384]	; (80113f4 <tcp_process+0x7d8>)
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	f003 0320 	and.w	r3, r3, #32
 8011278:	2b00      	cmp	r3, #0
 801127a:	f000 80a9 	beq.w	80113d0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	8b5b      	ldrh	r3, [r3, #26]
 8011282:	f043 0302 	orr.w	r3, r3, #2
 8011286:	b29a      	uxth	r2, r3
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f7fe fd39 	bl	800fd04 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011292:	4b59      	ldr	r3, [pc, #356]	; (80113f8 <tcp_process+0x7dc>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	687a      	ldr	r2, [r7, #4]
 8011298:	429a      	cmp	r2, r3
 801129a:	d105      	bne.n	80112a8 <tcp_process+0x68c>
 801129c:	4b56      	ldr	r3, [pc, #344]	; (80113f8 <tcp_process+0x7dc>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	68db      	ldr	r3, [r3, #12]
 80112a2:	4a55      	ldr	r2, [pc, #340]	; (80113f8 <tcp_process+0x7dc>)
 80112a4:	6013      	str	r3, [r2, #0]
 80112a6:	e013      	b.n	80112d0 <tcp_process+0x6b4>
 80112a8:	4b53      	ldr	r3, [pc, #332]	; (80113f8 <tcp_process+0x7dc>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	613b      	str	r3, [r7, #16]
 80112ae:	e00c      	b.n	80112ca <tcp_process+0x6ae>
 80112b0:	693b      	ldr	r3, [r7, #16]
 80112b2:	68db      	ldr	r3, [r3, #12]
 80112b4:	687a      	ldr	r2, [r7, #4]
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d104      	bne.n	80112c4 <tcp_process+0x6a8>
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	68da      	ldr	r2, [r3, #12]
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	60da      	str	r2, [r3, #12]
 80112c2:	e005      	b.n	80112d0 <tcp_process+0x6b4>
 80112c4:	693b      	ldr	r3, [r7, #16]
 80112c6:	68db      	ldr	r3, [r3, #12]
 80112c8:	613b      	str	r3, [r7, #16]
 80112ca:	693b      	ldr	r3, [r7, #16]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d1ef      	bne.n	80112b0 <tcp_process+0x694>
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2200      	movs	r2, #0
 80112d4:	60da      	str	r2, [r3, #12]
 80112d6:	4b43      	ldr	r3, [pc, #268]	; (80113e4 <tcp_process+0x7c8>)
 80112d8:	2201      	movs	r2, #1
 80112da:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	220a      	movs	r2, #10
 80112e0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80112e2:	4b41      	ldr	r3, [pc, #260]	; (80113e8 <tcp_process+0x7cc>)
 80112e4:	681a      	ldr	r2, [r3, #0]
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	60da      	str	r2, [r3, #12]
 80112ea:	4a3f      	ldr	r2, [pc, #252]	; (80113e8 <tcp_process+0x7cc>)
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6013      	str	r3, [r2, #0]
 80112f0:	f003 f8e8 	bl	80144c4 <tcp_timer_needed>
      }
      break;
 80112f4:	e06c      	b.n	80113d0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80112f6:	6878      	ldr	r0, [r7, #4]
 80112f8:	f000 f984 	bl	8011604 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80112fc:	4b3b      	ldr	r3, [pc, #236]	; (80113ec <tcp_process+0x7d0>)
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	f003 0310 	and.w	r3, r3, #16
 8011304:	2b00      	cmp	r3, #0
 8011306:	d065      	beq.n	80113d4 <tcp_process+0x7b8>
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801130c:	4b38      	ldr	r3, [pc, #224]	; (80113f0 <tcp_process+0x7d4>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	429a      	cmp	r2, r3
 8011312:	d15f      	bne.n	80113d4 <tcp_process+0x7b8>
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011318:	2b00      	cmp	r3, #0
 801131a:	d15b      	bne.n	80113d4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f7fe fcf1 	bl	800fd04 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011322:	4b35      	ldr	r3, [pc, #212]	; (80113f8 <tcp_process+0x7dc>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	687a      	ldr	r2, [r7, #4]
 8011328:	429a      	cmp	r2, r3
 801132a:	d105      	bne.n	8011338 <tcp_process+0x71c>
 801132c:	4b32      	ldr	r3, [pc, #200]	; (80113f8 <tcp_process+0x7dc>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	68db      	ldr	r3, [r3, #12]
 8011332:	4a31      	ldr	r2, [pc, #196]	; (80113f8 <tcp_process+0x7dc>)
 8011334:	6013      	str	r3, [r2, #0]
 8011336:	e013      	b.n	8011360 <tcp_process+0x744>
 8011338:	4b2f      	ldr	r3, [pc, #188]	; (80113f8 <tcp_process+0x7dc>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	60fb      	str	r3, [r7, #12]
 801133e:	e00c      	b.n	801135a <tcp_process+0x73e>
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	68db      	ldr	r3, [r3, #12]
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	429a      	cmp	r2, r3
 8011348:	d104      	bne.n	8011354 <tcp_process+0x738>
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	68da      	ldr	r2, [r3, #12]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	60da      	str	r2, [r3, #12]
 8011352:	e005      	b.n	8011360 <tcp_process+0x744>
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	68db      	ldr	r3, [r3, #12]
 8011358:	60fb      	str	r3, [r7, #12]
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d1ef      	bne.n	8011340 <tcp_process+0x724>
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2200      	movs	r2, #0
 8011364:	60da      	str	r2, [r3, #12]
 8011366:	4b1f      	ldr	r3, [pc, #124]	; (80113e4 <tcp_process+0x7c8>)
 8011368:	2201      	movs	r2, #1
 801136a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	220a      	movs	r2, #10
 8011370:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011372:	4b1d      	ldr	r3, [pc, #116]	; (80113e8 <tcp_process+0x7cc>)
 8011374:	681a      	ldr	r2, [r3, #0]
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	60da      	str	r2, [r3, #12]
 801137a:	4a1b      	ldr	r2, [pc, #108]	; (80113e8 <tcp_process+0x7cc>)
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	6013      	str	r3, [r2, #0]
 8011380:	f003 f8a0 	bl	80144c4 <tcp_timer_needed>
      }
      break;
 8011384:	e026      	b.n	80113d4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f000 f93c 	bl	8011604 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801138c:	4b17      	ldr	r3, [pc, #92]	; (80113ec <tcp_process+0x7d0>)
 801138e:	781b      	ldrb	r3, [r3, #0]
 8011390:	f003 0310 	and.w	r3, r3, #16
 8011394:	2b00      	cmp	r3, #0
 8011396:	d01f      	beq.n	80113d8 <tcp_process+0x7bc>
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801139c:	4b14      	ldr	r3, [pc, #80]	; (80113f0 <tcp_process+0x7d4>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d119      	bne.n	80113d8 <tcp_process+0x7bc>
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d115      	bne.n	80113d8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80113ac:	4b11      	ldr	r3, [pc, #68]	; (80113f4 <tcp_process+0x7d8>)
 80113ae:	781b      	ldrb	r3, [r3, #0]
 80113b0:	f043 0310 	orr.w	r3, r3, #16
 80113b4:	b2da      	uxtb	r2, r3
 80113b6:	4b0f      	ldr	r3, [pc, #60]	; (80113f4 <tcp_process+0x7d8>)
 80113b8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80113ba:	e00d      	b.n	80113d8 <tcp_process+0x7bc>
    default:
      break;
 80113bc:	bf00      	nop
 80113be:	e00c      	b.n	80113da <tcp_process+0x7be>
      break;
 80113c0:	bf00      	nop
 80113c2:	e00a      	b.n	80113da <tcp_process+0x7be>
      break;
 80113c4:	bf00      	nop
 80113c6:	e008      	b.n	80113da <tcp_process+0x7be>
      break;
 80113c8:	bf00      	nop
 80113ca:	e006      	b.n	80113da <tcp_process+0x7be>
      break;
 80113cc:	bf00      	nop
 80113ce:	e004      	b.n	80113da <tcp_process+0x7be>
      break;
 80113d0:	bf00      	nop
 80113d2:	e002      	b.n	80113da <tcp_process+0x7be>
      break;
 80113d4:	bf00      	nop
 80113d6:	e000      	b.n	80113da <tcp_process+0x7be>
      break;
 80113d8:	bf00      	nop
  }
  return ERR_OK;
 80113da:	2300      	movs	r3, #0
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3724      	adds	r7, #36	; 0x24
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd90      	pop	{r4, r7, pc}
 80113e4:	20008154 	.word	0x20008154
 80113e8:	20008150 	.word	0x20008150
 80113ec:	20008184 	.word	0x20008184
 80113f0:	2000817c 	.word	0x2000817c
 80113f4:	20008185 	.word	0x20008185
 80113f8:	2000814c 	.word	0x2000814c

080113fc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80113fc:	b590      	push	{r4, r7, lr}
 80113fe:	b085      	sub	sp, #20
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d106      	bne.n	801141a <tcp_oos_insert_segment+0x1e>
 801140c:	4b3b      	ldr	r3, [pc, #236]	; (80114fc <tcp_oos_insert_segment+0x100>)
 801140e:	f240 421f 	movw	r2, #1055	; 0x41f
 8011412:	493b      	ldr	r1, [pc, #236]	; (8011500 <tcp_oos_insert_segment+0x104>)
 8011414:	483b      	ldr	r0, [pc, #236]	; (8011504 <tcp_oos_insert_segment+0x108>)
 8011416:	f006 fe81 	bl	801811c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	68db      	ldr	r3, [r3, #12]
 801141e:	899b      	ldrh	r3, [r3, #12]
 8011420:	b29b      	uxth	r3, r3
 8011422:	4618      	mov	r0, r3
 8011424:	f7fb faa3 	bl	800c96e <lwip_htons>
 8011428:	4603      	mov	r3, r0
 801142a:	b2db      	uxtb	r3, r3
 801142c:	f003 0301 	and.w	r3, r3, #1
 8011430:	2b00      	cmp	r3, #0
 8011432:	d028      	beq.n	8011486 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011434:	6838      	ldr	r0, [r7, #0]
 8011436:	f7fe f9b3 	bl	800f7a0 <tcp_segs_free>
    next = NULL;
 801143a:	2300      	movs	r3, #0
 801143c:	603b      	str	r3, [r7, #0]
 801143e:	e056      	b.n	80114ee <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	68db      	ldr	r3, [r3, #12]
 8011444:	899b      	ldrh	r3, [r3, #12]
 8011446:	b29b      	uxth	r3, r3
 8011448:	4618      	mov	r0, r3
 801144a:	f7fb fa90 	bl	800c96e <lwip_htons>
 801144e:	4603      	mov	r3, r0
 8011450:	b2db      	uxtb	r3, r3
 8011452:	f003 0301 	and.w	r3, r3, #1
 8011456:	2b00      	cmp	r3, #0
 8011458:	d00d      	beq.n	8011476 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	68db      	ldr	r3, [r3, #12]
 801145e:	899b      	ldrh	r3, [r3, #12]
 8011460:	b29c      	uxth	r4, r3
 8011462:	2001      	movs	r0, #1
 8011464:	f7fb fa83 	bl	800c96e <lwip_htons>
 8011468:	4603      	mov	r3, r0
 801146a:	461a      	mov	r2, r3
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	68db      	ldr	r3, [r3, #12]
 8011470:	4322      	orrs	r2, r4
 8011472:	b292      	uxth	r2, r2
 8011474:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011480:	68f8      	ldr	r0, [r7, #12]
 8011482:	f7fe f9a2 	bl	800f7ca <tcp_seg_free>
    while (next &&
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d00e      	beq.n	80114aa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	891b      	ldrh	r3, [r3, #8]
 8011490:	461a      	mov	r2, r3
 8011492:	4b1d      	ldr	r3, [pc, #116]	; (8011508 <tcp_oos_insert_segment+0x10c>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	441a      	add	r2, r3
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	68db      	ldr	r3, [r3, #12]
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	6839      	ldr	r1, [r7, #0]
 80114a0:	8909      	ldrh	r1, [r1, #8]
 80114a2:	440b      	add	r3, r1
 80114a4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	daca      	bge.n	8011440 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d01e      	beq.n	80114ee <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	891b      	ldrh	r3, [r3, #8]
 80114b4:	461a      	mov	r2, r3
 80114b6:	4b14      	ldr	r3, [pc, #80]	; (8011508 <tcp_oos_insert_segment+0x10c>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	441a      	add	r2, r3
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	68db      	ldr	r3, [r3, #12]
 80114c0:	685b      	ldr	r3, [r3, #4]
 80114c2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	dd12      	ble.n	80114ee <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	685b      	ldr	r3, [r3, #4]
 80114ce:	b29a      	uxth	r2, r3
 80114d0:	4b0d      	ldr	r3, [pc, #52]	; (8011508 <tcp_oos_insert_segment+0x10c>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	b29b      	uxth	r3, r3
 80114d6:	1ad3      	subs	r3, r2, r3
 80114d8:	b29a      	uxth	r2, r3
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	685a      	ldr	r2, [r3, #4]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	891b      	ldrh	r3, [r3, #8]
 80114e6:	4619      	mov	r1, r3
 80114e8:	4610      	mov	r0, r2
 80114ea:	f7fc fc17 	bl	800dd1c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	683a      	ldr	r2, [r7, #0]
 80114f2:	601a      	str	r2, [r3, #0]
}
 80114f4:	bf00      	nop
 80114f6:	3714      	adds	r7, #20
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd90      	pop	{r4, r7, pc}
 80114fc:	0801a1f4 	.word	0x0801a1f4
 8011500:	0801a4b4 	.word	0x0801a4b4
 8011504:	0801a240 	.word	0x0801a240
 8011508:	20008178 	.word	0x20008178

0801150c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801150c:	b5b0      	push	{r4, r5, r7, lr}
 801150e:	b086      	sub	sp, #24
 8011510:	af00      	add	r7, sp, #0
 8011512:	60f8      	str	r0, [r7, #12]
 8011514:	60b9      	str	r1, [r7, #8]
 8011516:	607a      	str	r2, [r7, #4]
 8011518:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801151a:	e03e      	b.n	801159a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	685b      	ldr	r3, [r3, #4]
 801152a:	4618      	mov	r0, r3
 801152c:	f7fc fe04 	bl	800e138 <pbuf_clen>
 8011530:	4603      	mov	r3, r0
 8011532:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801153a:	8a7a      	ldrh	r2, [r7, #18]
 801153c:	429a      	cmp	r2, r3
 801153e:	d906      	bls.n	801154e <tcp_free_acked_segments+0x42>
 8011540:	4b2a      	ldr	r3, [pc, #168]	; (80115ec <tcp_free_acked_segments+0xe0>)
 8011542:	f240 4257 	movw	r2, #1111	; 0x457
 8011546:	492a      	ldr	r1, [pc, #168]	; (80115f0 <tcp_free_acked_segments+0xe4>)
 8011548:	482a      	ldr	r0, [pc, #168]	; (80115f4 <tcp_free_acked_segments+0xe8>)
 801154a:	f006 fde7 	bl	801811c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011554:	8a7b      	ldrh	r3, [r7, #18]
 8011556:	1ad3      	subs	r3, r2, r3
 8011558:	b29a      	uxth	r2, r3
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	891a      	ldrh	r2, [r3, #8]
 8011564:	4b24      	ldr	r3, [pc, #144]	; (80115f8 <tcp_free_acked_segments+0xec>)
 8011566:	881b      	ldrh	r3, [r3, #0]
 8011568:	4413      	add	r3, r2
 801156a:	b29a      	uxth	r2, r3
 801156c:	4b22      	ldr	r3, [pc, #136]	; (80115f8 <tcp_free_acked_segments+0xec>)
 801156e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011570:	6978      	ldr	r0, [r7, #20]
 8011572:	f7fe f92a 	bl	800f7ca <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801157c:	2b00      	cmp	r3, #0
 801157e:	d00c      	beq.n	801159a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d109      	bne.n	801159a <tcp_free_acked_segments+0x8e>
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d106      	bne.n	801159a <tcp_free_acked_segments+0x8e>
 801158c:	4b17      	ldr	r3, [pc, #92]	; (80115ec <tcp_free_acked_segments+0xe0>)
 801158e:	f240 4261 	movw	r2, #1121	; 0x461
 8011592:	491a      	ldr	r1, [pc, #104]	; (80115fc <tcp_free_acked_segments+0xf0>)
 8011594:	4817      	ldr	r0, [pc, #92]	; (80115f4 <tcp_free_acked_segments+0xe8>)
 8011596:	f006 fdc1 	bl	801811c <iprintf>
  while (seg_list != NULL &&
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d020      	beq.n	80115e2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	68db      	ldr	r3, [r3, #12]
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7fb f9f6 	bl	800c998 <lwip_htonl>
 80115ac:	4604      	mov	r4, r0
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	891b      	ldrh	r3, [r3, #8]
 80115b2:	461d      	mov	r5, r3
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	68db      	ldr	r3, [r3, #12]
 80115b8:	899b      	ldrh	r3, [r3, #12]
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	4618      	mov	r0, r3
 80115be:	f7fb f9d6 	bl	800c96e <lwip_htons>
 80115c2:	4603      	mov	r3, r0
 80115c4:	b2db      	uxtb	r3, r3
 80115c6:	f003 0303 	and.w	r3, r3, #3
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d001      	beq.n	80115d2 <tcp_free_acked_segments+0xc6>
 80115ce:	2301      	movs	r3, #1
 80115d0:	e000      	b.n	80115d4 <tcp_free_acked_segments+0xc8>
 80115d2:	2300      	movs	r3, #0
 80115d4:	442b      	add	r3, r5
 80115d6:	18e2      	adds	r2, r4, r3
 80115d8:	4b09      	ldr	r3, [pc, #36]	; (8011600 <tcp_free_acked_segments+0xf4>)
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80115de:	2b00      	cmp	r3, #0
 80115e0:	dd9c      	ble.n	801151c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80115e2:	68bb      	ldr	r3, [r7, #8]
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	3718      	adds	r7, #24
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bdb0      	pop	{r4, r5, r7, pc}
 80115ec:	0801a1f4 	.word	0x0801a1f4
 80115f0:	0801a4dc 	.word	0x0801a4dc
 80115f4:	0801a240 	.word	0x0801a240
 80115f8:	20008180 	.word	0x20008180
 80115fc:	0801a504 	.word	0x0801a504
 8011600:	2000817c 	.word	0x2000817c

08011604 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011604:	b5b0      	push	{r4, r5, r7, lr}
 8011606:	b094      	sub	sp, #80	; 0x50
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801160c:	2300      	movs	r3, #0
 801160e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d106      	bne.n	8011624 <tcp_receive+0x20>
 8011616:	4b91      	ldr	r3, [pc, #580]	; (801185c <tcp_receive+0x258>)
 8011618:	f240 427b 	movw	r2, #1147	; 0x47b
 801161c:	4990      	ldr	r1, [pc, #576]	; (8011860 <tcp_receive+0x25c>)
 801161e:	4891      	ldr	r0, [pc, #580]	; (8011864 <tcp_receive+0x260>)
 8011620:	f006 fd7c 	bl	801811c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	7d1b      	ldrb	r3, [r3, #20]
 8011628:	2b03      	cmp	r3, #3
 801162a:	d806      	bhi.n	801163a <tcp_receive+0x36>
 801162c:	4b8b      	ldr	r3, [pc, #556]	; (801185c <tcp_receive+0x258>)
 801162e:	f240 427c 	movw	r2, #1148	; 0x47c
 8011632:	498d      	ldr	r1, [pc, #564]	; (8011868 <tcp_receive+0x264>)
 8011634:	488b      	ldr	r0, [pc, #556]	; (8011864 <tcp_receive+0x260>)
 8011636:	f006 fd71 	bl	801811c <iprintf>

  if (flags & TCP_ACK) {
 801163a:	4b8c      	ldr	r3, [pc, #560]	; (801186c <tcp_receive+0x268>)
 801163c:	781b      	ldrb	r3, [r3, #0]
 801163e:	f003 0310 	and.w	r3, r3, #16
 8011642:	2b00      	cmp	r3, #0
 8011644:	f000 8264 	beq.w	8011b10 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801164e:	461a      	mov	r2, r3
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011654:	4413      	add	r3, r2
 8011656:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801165c:	4b84      	ldr	r3, [pc, #528]	; (8011870 <tcp_receive+0x26c>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	1ad3      	subs	r3, r2, r3
 8011662:	2b00      	cmp	r3, #0
 8011664:	db1b      	blt.n	801169e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801166a:	4b81      	ldr	r3, [pc, #516]	; (8011870 <tcp_receive+0x26c>)
 801166c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801166e:	429a      	cmp	r2, r3
 8011670:	d106      	bne.n	8011680 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011676:	4b7f      	ldr	r3, [pc, #508]	; (8011874 <tcp_receive+0x270>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	1ad3      	subs	r3, r2, r3
 801167c:	2b00      	cmp	r3, #0
 801167e:	db0e      	blt.n	801169e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011684:	4b7b      	ldr	r3, [pc, #492]	; (8011874 <tcp_receive+0x270>)
 8011686:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011688:	429a      	cmp	r2, r3
 801168a:	d125      	bne.n	80116d8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801168c:	4b7a      	ldr	r3, [pc, #488]	; (8011878 <tcp_receive+0x274>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	89db      	ldrh	r3, [r3, #14]
 8011692:	b29a      	uxth	r2, r3
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801169a:	429a      	cmp	r2, r3
 801169c:	d91c      	bls.n	80116d8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801169e:	4b76      	ldr	r3, [pc, #472]	; (8011878 <tcp_receive+0x274>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	89db      	ldrh	r3, [r3, #14]
 80116a4:	b29a      	uxth	r2, r3
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80116b8:	429a      	cmp	r2, r3
 80116ba:	d205      	bcs.n	80116c8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80116c8:	4b69      	ldr	r3, [pc, #420]	; (8011870 <tcp_receive+0x26c>)
 80116ca:	681a      	ldr	r2, [r3, #0]
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80116d0:	4b68      	ldr	r3, [pc, #416]	; (8011874 <tcp_receive+0x270>)
 80116d2:	681a      	ldr	r2, [r3, #0]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80116d8:	4b66      	ldr	r3, [pc, #408]	; (8011874 <tcp_receive+0x270>)
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116e0:	1ad3      	subs	r3, r2, r3
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	dc58      	bgt.n	8011798 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80116e6:	4b65      	ldr	r3, [pc, #404]	; (801187c <tcp_receive+0x278>)
 80116e8:	881b      	ldrh	r3, [r3, #0]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d14b      	bne.n	8011786 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80116f2:	687a      	ldr	r2, [r7, #4]
 80116f4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80116f8:	4413      	add	r3, r2
 80116fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d142      	bne.n	8011786 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011706:	2b00      	cmp	r3, #0
 8011708:	db3d      	blt.n	8011786 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801170e:	4b59      	ldr	r3, [pc, #356]	; (8011874 <tcp_receive+0x270>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	429a      	cmp	r2, r3
 8011714:	d137      	bne.n	8011786 <tcp_receive+0x182>
              found_dupack = 1;
 8011716:	2301      	movs	r3, #1
 8011718:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011720:	2bff      	cmp	r3, #255	; 0xff
 8011722:	d007      	beq.n	8011734 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801172a:	3301      	adds	r3, #1
 801172c:	b2da      	uxtb	r2, r3
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801173a:	2b03      	cmp	r3, #3
 801173c:	d91b      	bls.n	8011776 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011748:	4413      	add	r3, r2
 801174a:	b29a      	uxth	r2, r3
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011752:	429a      	cmp	r2, r3
 8011754:	d30a      	bcc.n	801176c <tcp_receive+0x168>
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011760:	4413      	add	r3, r2
 8011762:	b29a      	uxth	r2, r3
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801176a:	e004      	b.n	8011776 <tcp_receive+0x172>
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011772:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801177c:	2b02      	cmp	r3, #2
 801177e:	d902      	bls.n	8011786 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f002 fb45 	bl	8013e10 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011788:	2b00      	cmp	r3, #0
 801178a:	f040 8161 	bne.w	8011a50 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2200      	movs	r2, #0
 8011792:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011796:	e15b      	b.n	8011a50 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011798:	4b36      	ldr	r3, [pc, #216]	; (8011874 <tcp_receive+0x270>)
 801179a:	681a      	ldr	r2, [r3, #0]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117a0:	1ad3      	subs	r3, r2, r3
 80117a2:	3b01      	subs	r3, #1
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	f2c0 814e 	blt.w	8011a46 <tcp_receive+0x442>
 80117aa:	4b32      	ldr	r3, [pc, #200]	; (8011874 <tcp_receive+0x270>)
 80117ac:	681a      	ldr	r2, [r3, #0]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80117b2:	1ad3      	subs	r3, r2, r3
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	f300 8146 	bgt.w	8011a46 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	8b5b      	ldrh	r3, [r3, #26]
 80117be:	f003 0304 	and.w	r3, r3, #4
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d010      	beq.n	80117e8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	8b5b      	ldrh	r3, [r3, #26]
 80117ca:	f023 0304 	bic.w	r3, r3, #4
 80117ce:	b29a      	uxth	r2, r3
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2200      	movs	r2, #0
 80117e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2200      	movs	r2, #0
 80117ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80117f6:	10db      	asrs	r3, r3, #3
 80117f8:	b21b      	sxth	r3, r3
 80117fa:	b29a      	uxth	r2, r3
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011802:	b29b      	uxth	r3, r3
 8011804:	4413      	add	r3, r2
 8011806:	b29b      	uxth	r3, r3
 8011808:	b21a      	sxth	r2, r3
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011810:	4b18      	ldr	r3, [pc, #96]	; (8011874 <tcp_receive+0x270>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	b29a      	uxth	r2, r3
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801181a:	b29b      	uxth	r3, r3
 801181c:	1ad3      	subs	r3, r2, r3
 801181e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2200      	movs	r2, #0
 8011824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011828:	4b12      	ldr	r3, [pc, #72]	; (8011874 <tcp_receive+0x270>)
 801182a:	681a      	ldr	r2, [r3, #0]
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	7d1b      	ldrb	r3, [r3, #20]
 8011834:	2b03      	cmp	r3, #3
 8011836:	f240 8097 	bls.w	8011968 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011846:	429a      	cmp	r2, r3
 8011848:	d245      	bcs.n	80118d6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	8b5b      	ldrh	r3, [r3, #26]
 801184e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011852:	2b00      	cmp	r3, #0
 8011854:	d014      	beq.n	8011880 <tcp_receive+0x27c>
 8011856:	2301      	movs	r3, #1
 8011858:	e013      	b.n	8011882 <tcp_receive+0x27e>
 801185a:	bf00      	nop
 801185c:	0801a1f4 	.word	0x0801a1f4
 8011860:	0801a524 	.word	0x0801a524
 8011864:	0801a240 	.word	0x0801a240
 8011868:	0801a540 	.word	0x0801a540
 801186c:	20008184 	.word	0x20008184
 8011870:	20008178 	.word	0x20008178
 8011874:	2000817c 	.word	0x2000817c
 8011878:	20008168 	.word	0x20008168
 801187c:	20008182 	.word	0x20008182
 8011880:	2302      	movs	r3, #2
 8011882:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011886:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801188a:	b29a      	uxth	r2, r3
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011890:	fb12 f303 	smulbb	r3, r2, r3
 8011894:	b29b      	uxth	r3, r3
 8011896:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011898:	4293      	cmp	r3, r2
 801189a:	bf28      	it	cs
 801189c:	4613      	movcs	r3, r2
 801189e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80118a8:	4413      	add	r3, r2
 80118aa:	b29a      	uxth	r2, r3
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118b2:	429a      	cmp	r2, r3
 80118b4:	d309      	bcc.n	80118ca <tcp_receive+0x2c6>
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80118be:	4413      	add	r3, r2
 80118c0:	b29a      	uxth	r2, r3
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80118c8:	e04e      	b.n	8011968 <tcp_receive+0x364>
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80118d4:	e048      	b.n	8011968 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80118dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80118de:	4413      	add	r3, r2
 80118e0:	b29a      	uxth	r2, r3
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d309      	bcc.n	8011900 <tcp_receive+0x2fc>
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80118f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80118f4:	4413      	add	r3, r2
 80118f6:	b29a      	uxth	r2, r3
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80118fe:	e004      	b.n	801190a <tcp_receive+0x306>
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011906:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011916:	429a      	cmp	r2, r3
 8011918:	d326      	bcc.n	8011968 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011926:	1ad3      	subs	r3, r2, r3
 8011928:	b29a      	uxth	r2, r3
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801193a:	4413      	add	r3, r2
 801193c:	b29a      	uxth	r2, r3
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011944:	429a      	cmp	r2, r3
 8011946:	d30a      	bcc.n	801195e <tcp_receive+0x35a>
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011952:	4413      	add	r3, r2
 8011954:	b29a      	uxth	r2, r3
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801195c:	e004      	b.n	8011968 <tcp_receive+0x364>
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011964:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011970:	4a98      	ldr	r2, [pc, #608]	; (8011bd4 <tcp_receive+0x5d0>)
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f7ff fdca 	bl	801150c <tcp_free_acked_segments>
 8011978:	4602      	mov	r2, r0
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011986:	4a94      	ldr	r2, [pc, #592]	; (8011bd8 <tcp_receive+0x5d4>)
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f7ff fdbf 	bl	801150c <tcp_free_acked_segments>
 801198e:	4602      	mov	r2, r0
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011998:	2b00      	cmp	r3, #0
 801199a:	d104      	bne.n	80119a6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119a2:	861a      	strh	r2, [r3, #48]	; 0x30
 80119a4:	e002      	b.n	80119ac <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2200      	movs	r2, #0
 80119aa:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2200      	movs	r2, #0
 80119b0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d103      	bne.n	80119c2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	2200      	movs	r2, #0
 80119be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80119c8:	4b84      	ldr	r3, [pc, #528]	; (8011bdc <tcp_receive+0x5d8>)
 80119ca:	881b      	ldrh	r3, [r3, #0]
 80119cc:	4413      	add	r3, r2
 80119ce:	b29a      	uxth	r2, r3
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	8b5b      	ldrh	r3, [r3, #26]
 80119da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d035      	beq.n	8011a4e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d118      	bne.n	8011a1c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d00c      	beq.n	8011a0c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119fa:	68db      	ldr	r3, [r3, #12]
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7fa ffca 	bl	800c998 <lwip_htonl>
 8011a04:	4603      	mov	r3, r0
 8011a06:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	dc20      	bgt.n	8011a4e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	8b5b      	ldrh	r3, [r3, #26]
 8011a10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011a14:	b29a      	uxth	r2, r3
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011a1a:	e018      	b.n	8011a4e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a24:	68db      	ldr	r3, [r3, #12]
 8011a26:	685b      	ldr	r3, [r3, #4]
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7fa ffb5 	bl	800c998 <lwip_htonl>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	1ae3      	subs	r3, r4, r3
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	dc0b      	bgt.n	8011a4e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	8b5b      	ldrh	r3, [r3, #26]
 8011a3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011a3e:	b29a      	uxth	r2, r3
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011a44:	e003      	b.n	8011a4e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	f002 fbcc 	bl	80141e4 <tcp_send_empty_ack>
 8011a4c:	e000      	b.n	8011a50 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011a4e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d05b      	beq.n	8011b10 <tcp_receive+0x50c>
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a5c:	4b60      	ldr	r3, [pc, #384]	; (8011be0 <tcp_receive+0x5dc>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	1ad3      	subs	r3, r2, r3
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	da54      	bge.n	8011b10 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011a66:	4b5f      	ldr	r3, [pc, #380]	; (8011be4 <tcp_receive+0x5e0>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	b29a      	uxth	r2, r3
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	1ad3      	subs	r3, r2, r3
 8011a74:	b29b      	uxth	r3, r3
 8011a76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011a7a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a84:	10db      	asrs	r3, r3, #3
 8011a86:	b21b      	sxth	r3, r3
 8011a88:	b29b      	uxth	r3, r3
 8011a8a:	1ad3      	subs	r3, r2, r3
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a98:	b29a      	uxth	r2, r3
 8011a9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011a9e:	4413      	add	r3, r2
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	b21a      	sxth	r2, r3
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011aa8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	da05      	bge.n	8011abc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011ab0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011ab4:	425b      	negs	r3, r3
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011abc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011ac6:	109b      	asrs	r3, r3, #2
 8011ac8:	b21b      	sxth	r3, r3
 8011aca:	b29b      	uxth	r3, r3
 8011acc:	1ad3      	subs	r3, r2, r3
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011ada:	b29a      	uxth	r2, r3
 8011adc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011ae0:	4413      	add	r3, r2
 8011ae2:	b29b      	uxth	r3, r3
 8011ae4:	b21a      	sxth	r2, r3
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011af0:	10db      	asrs	r3, r3, #3
 8011af2:	b21b      	sxth	r3, r3
 8011af4:	b29a      	uxth	r2, r3
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	4413      	add	r3, r2
 8011b00:	b29b      	uxth	r3, r3
 8011b02:	b21a      	sxth	r2, r3
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011b10:	4b35      	ldr	r3, [pc, #212]	; (8011be8 <tcp_receive+0x5e4>)
 8011b12:	881b      	ldrh	r3, [r3, #0]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	f000 84e2 	beq.w	80124de <tcp_receive+0xeda>
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	7d1b      	ldrb	r3, [r3, #20]
 8011b1e:	2b06      	cmp	r3, #6
 8011b20:	f200 84dd 	bhi.w	80124de <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b28:	4b30      	ldr	r3, [pc, #192]	; (8011bec <tcp_receive+0x5e8>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	1ad3      	subs	r3, r2, r3
 8011b2e:	3b01      	subs	r3, #1
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	f2c0 808f 	blt.w	8011c54 <tcp_receive+0x650>
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b3a:	4b2b      	ldr	r3, [pc, #172]	; (8011be8 <tcp_receive+0x5e4>)
 8011b3c:	881b      	ldrh	r3, [r3, #0]
 8011b3e:	4619      	mov	r1, r3
 8011b40:	4b2a      	ldr	r3, [pc, #168]	; (8011bec <tcp_receive+0x5e8>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	440b      	add	r3, r1
 8011b46:	1ad3      	subs	r3, r2, r3
 8011b48:	3301      	adds	r3, #1
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	f300 8082 	bgt.w	8011c54 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011b50:	4b27      	ldr	r3, [pc, #156]	; (8011bf0 <tcp_receive+0x5ec>)
 8011b52:	685b      	ldr	r3, [r3, #4]
 8011b54:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b5a:	4b24      	ldr	r3, [pc, #144]	; (8011bec <tcp_receive+0x5e8>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	1ad3      	subs	r3, r2, r3
 8011b60:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011b62:	4b23      	ldr	r3, [pc, #140]	; (8011bf0 <tcp_receive+0x5ec>)
 8011b64:	685b      	ldr	r3, [r3, #4]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d106      	bne.n	8011b78 <tcp_receive+0x574>
 8011b6a:	4b22      	ldr	r3, [pc, #136]	; (8011bf4 <tcp_receive+0x5f0>)
 8011b6c:	f240 5294 	movw	r2, #1428	; 0x594
 8011b70:	4921      	ldr	r1, [pc, #132]	; (8011bf8 <tcp_receive+0x5f4>)
 8011b72:	4822      	ldr	r0, [pc, #136]	; (8011bfc <tcp_receive+0x5f8>)
 8011b74:	f006 fad2 	bl	801811c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	d906      	bls.n	8011b90 <tcp_receive+0x58c>
 8011b82:	4b1c      	ldr	r3, [pc, #112]	; (8011bf4 <tcp_receive+0x5f0>)
 8011b84:	f240 5295 	movw	r2, #1429	; 0x595
 8011b88:	491d      	ldr	r1, [pc, #116]	; (8011c00 <tcp_receive+0x5fc>)
 8011b8a:	481c      	ldr	r0, [pc, #112]	; (8011bfc <tcp_receive+0x5f8>)
 8011b8c:	f006 fac6 	bl	801811c <iprintf>
      off = (u16_t)off32;
 8011b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011b96:	4b16      	ldr	r3, [pc, #88]	; (8011bf0 <tcp_receive+0x5ec>)
 8011b98:	685b      	ldr	r3, [r3, #4]
 8011b9a:	891b      	ldrh	r3, [r3, #8]
 8011b9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d906      	bls.n	8011bb2 <tcp_receive+0x5ae>
 8011ba4:	4b13      	ldr	r3, [pc, #76]	; (8011bf4 <tcp_receive+0x5f0>)
 8011ba6:	f240 5297 	movw	r2, #1431	; 0x597
 8011baa:	4916      	ldr	r1, [pc, #88]	; (8011c04 <tcp_receive+0x600>)
 8011bac:	4813      	ldr	r0, [pc, #76]	; (8011bfc <tcp_receive+0x5f8>)
 8011bae:	f006 fab5 	bl	801811c <iprintf>
      inseg.len -= off;
 8011bb2:	4b0f      	ldr	r3, [pc, #60]	; (8011bf0 <tcp_receive+0x5ec>)
 8011bb4:	891a      	ldrh	r2, [r3, #8]
 8011bb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011bba:	1ad3      	subs	r3, r2, r3
 8011bbc:	b29a      	uxth	r2, r3
 8011bbe:	4b0c      	ldr	r3, [pc, #48]	; (8011bf0 <tcp_receive+0x5ec>)
 8011bc0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011bc2:	4b0b      	ldr	r3, [pc, #44]	; (8011bf0 <tcp_receive+0x5ec>)
 8011bc4:	685b      	ldr	r3, [r3, #4]
 8011bc6:	891a      	ldrh	r2, [r3, #8]
 8011bc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011bcc:	1ad3      	subs	r3, r2, r3
 8011bce:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011bd0:	e02a      	b.n	8011c28 <tcp_receive+0x624>
 8011bd2:	bf00      	nop
 8011bd4:	0801a55c 	.word	0x0801a55c
 8011bd8:	0801a564 	.word	0x0801a564
 8011bdc:	20008180 	.word	0x20008180
 8011be0:	2000817c 	.word	0x2000817c
 8011be4:	20008140 	.word	0x20008140
 8011be8:	20008182 	.word	0x20008182
 8011bec:	20008178 	.word	0x20008178
 8011bf0:	20008158 	.word	0x20008158
 8011bf4:	0801a1f4 	.word	0x0801a1f4
 8011bf8:	0801a56c 	.word	0x0801a56c
 8011bfc:	0801a240 	.word	0x0801a240
 8011c00:	0801a57c 	.word	0x0801a57c
 8011c04:	0801a58c 	.word	0x0801a58c
        off -= p->len;
 8011c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c0a:	895b      	ldrh	r3, [r3, #10]
 8011c0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011c10:	1ad3      	subs	r3, r2, r3
 8011c12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c18:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011c1a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c1e:	2200      	movs	r2, #0
 8011c20:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c2a:	895b      	ldrh	r3, [r3, #10]
 8011c2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d8e9      	bhi.n	8011c08 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011c34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c38:	4619      	mov	r1, r3
 8011c3a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011c3c:	f7fc f96e 	bl	800df1c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c44:	4a91      	ldr	r2, [pc, #580]	; (8011e8c <tcp_receive+0x888>)
 8011c46:	6013      	str	r3, [r2, #0]
 8011c48:	4b91      	ldr	r3, [pc, #580]	; (8011e90 <tcp_receive+0x88c>)
 8011c4a:	68db      	ldr	r3, [r3, #12]
 8011c4c:	4a8f      	ldr	r2, [pc, #572]	; (8011e8c <tcp_receive+0x888>)
 8011c4e:	6812      	ldr	r2, [r2, #0]
 8011c50:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011c52:	e00d      	b.n	8011c70 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011c54:	4b8d      	ldr	r3, [pc, #564]	; (8011e8c <tcp_receive+0x888>)
 8011c56:	681a      	ldr	r2, [r3, #0]
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c5c:	1ad3      	subs	r3, r2, r3
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	da06      	bge.n	8011c70 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	8b5b      	ldrh	r3, [r3, #26]
 8011c66:	f043 0302 	orr.w	r3, r3, #2
 8011c6a:	b29a      	uxth	r2, r3
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011c70:	4b86      	ldr	r3, [pc, #536]	; (8011e8c <tcp_receive+0x888>)
 8011c72:	681a      	ldr	r2, [r3, #0]
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c78:	1ad3      	subs	r3, r2, r3
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	f2c0 842a 	blt.w	80124d4 <tcp_receive+0xed0>
 8011c80:	4b82      	ldr	r3, [pc, #520]	; (8011e8c <tcp_receive+0x888>)
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c88:	6879      	ldr	r1, [r7, #4]
 8011c8a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011c8c:	440b      	add	r3, r1
 8011c8e:	1ad3      	subs	r3, r2, r3
 8011c90:	3301      	adds	r3, #1
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	f300 841e 	bgt.w	80124d4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c9c:	4b7b      	ldr	r3, [pc, #492]	; (8011e8c <tcp_receive+0x888>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	f040 829a 	bne.w	80121da <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011ca6:	4b7a      	ldr	r3, [pc, #488]	; (8011e90 <tcp_receive+0x88c>)
 8011ca8:	891c      	ldrh	r4, [r3, #8]
 8011caa:	4b79      	ldr	r3, [pc, #484]	; (8011e90 <tcp_receive+0x88c>)
 8011cac:	68db      	ldr	r3, [r3, #12]
 8011cae:	899b      	ldrh	r3, [r3, #12]
 8011cb0:	b29b      	uxth	r3, r3
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7fa fe5b 	bl	800c96e <lwip_htons>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	b2db      	uxtb	r3, r3
 8011cbc:	f003 0303 	and.w	r3, r3, #3
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d001      	beq.n	8011cc8 <tcp_receive+0x6c4>
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	e000      	b.n	8011cca <tcp_receive+0x6c6>
 8011cc8:	2300      	movs	r3, #0
 8011cca:	4423      	add	r3, r4
 8011ccc:	b29a      	uxth	r2, r3
 8011cce:	4b71      	ldr	r3, [pc, #452]	; (8011e94 <tcp_receive+0x890>)
 8011cd0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011cd6:	4b6f      	ldr	r3, [pc, #444]	; (8011e94 <tcp_receive+0x890>)
 8011cd8:	881b      	ldrh	r3, [r3, #0]
 8011cda:	429a      	cmp	r2, r3
 8011cdc:	d275      	bcs.n	8011dca <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011cde:	4b6c      	ldr	r3, [pc, #432]	; (8011e90 <tcp_receive+0x88c>)
 8011ce0:	68db      	ldr	r3, [r3, #12]
 8011ce2:	899b      	ldrh	r3, [r3, #12]
 8011ce4:	b29b      	uxth	r3, r3
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7fa fe41 	bl	800c96e <lwip_htons>
 8011cec:	4603      	mov	r3, r0
 8011cee:	b2db      	uxtb	r3, r3
 8011cf0:	f003 0301 	and.w	r3, r3, #1
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d01f      	beq.n	8011d38 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011cf8:	4b65      	ldr	r3, [pc, #404]	; (8011e90 <tcp_receive+0x88c>)
 8011cfa:	68db      	ldr	r3, [r3, #12]
 8011cfc:	899b      	ldrh	r3, [r3, #12]
 8011cfe:	b29b      	uxth	r3, r3
 8011d00:	b21b      	sxth	r3, r3
 8011d02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011d06:	b21c      	sxth	r4, r3
 8011d08:	4b61      	ldr	r3, [pc, #388]	; (8011e90 <tcp_receive+0x88c>)
 8011d0a:	68db      	ldr	r3, [r3, #12]
 8011d0c:	899b      	ldrh	r3, [r3, #12]
 8011d0e:	b29b      	uxth	r3, r3
 8011d10:	4618      	mov	r0, r3
 8011d12:	f7fa fe2c 	bl	800c96e <lwip_htons>
 8011d16:	4603      	mov	r3, r0
 8011d18:	b2db      	uxtb	r3, r3
 8011d1a:	b29b      	uxth	r3, r3
 8011d1c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011d20:	b29b      	uxth	r3, r3
 8011d22:	4618      	mov	r0, r3
 8011d24:	f7fa fe23 	bl	800c96e <lwip_htons>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	b21b      	sxth	r3, r3
 8011d2c:	4323      	orrs	r3, r4
 8011d2e:	b21a      	sxth	r2, r3
 8011d30:	4b57      	ldr	r3, [pc, #348]	; (8011e90 <tcp_receive+0x88c>)
 8011d32:	68db      	ldr	r3, [r3, #12]
 8011d34:	b292      	uxth	r2, r2
 8011d36:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011d3c:	4b54      	ldr	r3, [pc, #336]	; (8011e90 <tcp_receive+0x88c>)
 8011d3e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011d40:	4b53      	ldr	r3, [pc, #332]	; (8011e90 <tcp_receive+0x88c>)
 8011d42:	68db      	ldr	r3, [r3, #12]
 8011d44:	899b      	ldrh	r3, [r3, #12]
 8011d46:	b29b      	uxth	r3, r3
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f7fa fe10 	bl	800c96e <lwip_htons>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	b2db      	uxtb	r3, r3
 8011d52:	f003 0302 	and.w	r3, r3, #2
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d005      	beq.n	8011d66 <tcp_receive+0x762>
            inseg.len -= 1;
 8011d5a:	4b4d      	ldr	r3, [pc, #308]	; (8011e90 <tcp_receive+0x88c>)
 8011d5c:	891b      	ldrh	r3, [r3, #8]
 8011d5e:	3b01      	subs	r3, #1
 8011d60:	b29a      	uxth	r2, r3
 8011d62:	4b4b      	ldr	r3, [pc, #300]	; (8011e90 <tcp_receive+0x88c>)
 8011d64:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011d66:	4b4a      	ldr	r3, [pc, #296]	; (8011e90 <tcp_receive+0x88c>)
 8011d68:	685b      	ldr	r3, [r3, #4]
 8011d6a:	4a49      	ldr	r2, [pc, #292]	; (8011e90 <tcp_receive+0x88c>)
 8011d6c:	8912      	ldrh	r2, [r2, #8]
 8011d6e:	4611      	mov	r1, r2
 8011d70:	4618      	mov	r0, r3
 8011d72:	f7fb ffd3 	bl	800dd1c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011d76:	4b46      	ldr	r3, [pc, #280]	; (8011e90 <tcp_receive+0x88c>)
 8011d78:	891c      	ldrh	r4, [r3, #8]
 8011d7a:	4b45      	ldr	r3, [pc, #276]	; (8011e90 <tcp_receive+0x88c>)
 8011d7c:	68db      	ldr	r3, [r3, #12]
 8011d7e:	899b      	ldrh	r3, [r3, #12]
 8011d80:	b29b      	uxth	r3, r3
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7fa fdf3 	bl	800c96e <lwip_htons>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	b2db      	uxtb	r3, r3
 8011d8c:	f003 0303 	and.w	r3, r3, #3
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d001      	beq.n	8011d98 <tcp_receive+0x794>
 8011d94:	2301      	movs	r3, #1
 8011d96:	e000      	b.n	8011d9a <tcp_receive+0x796>
 8011d98:	2300      	movs	r3, #0
 8011d9a:	4423      	add	r3, r4
 8011d9c:	b29a      	uxth	r2, r3
 8011d9e:	4b3d      	ldr	r3, [pc, #244]	; (8011e94 <tcp_receive+0x890>)
 8011da0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011da2:	4b3c      	ldr	r3, [pc, #240]	; (8011e94 <tcp_receive+0x890>)
 8011da4:	881b      	ldrh	r3, [r3, #0]
 8011da6:	461a      	mov	r2, r3
 8011da8:	4b38      	ldr	r3, [pc, #224]	; (8011e8c <tcp_receive+0x888>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	441a      	add	r2, r3
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011db2:	6879      	ldr	r1, [r7, #4]
 8011db4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011db6:	440b      	add	r3, r1
 8011db8:	429a      	cmp	r2, r3
 8011dba:	d006      	beq.n	8011dca <tcp_receive+0x7c6>
 8011dbc:	4b36      	ldr	r3, [pc, #216]	; (8011e98 <tcp_receive+0x894>)
 8011dbe:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011dc2:	4936      	ldr	r1, [pc, #216]	; (8011e9c <tcp_receive+0x898>)
 8011dc4:	4836      	ldr	r0, [pc, #216]	; (8011ea0 <tcp_receive+0x89c>)
 8011dc6:	f006 f9a9 	bl	801811c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	f000 80e7 	beq.w	8011fa2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011dd4:	4b2e      	ldr	r3, [pc, #184]	; (8011e90 <tcp_receive+0x88c>)
 8011dd6:	68db      	ldr	r3, [r3, #12]
 8011dd8:	899b      	ldrh	r3, [r3, #12]
 8011dda:	b29b      	uxth	r3, r3
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f7fa fdc6 	bl	800c96e <lwip_htons>
 8011de2:	4603      	mov	r3, r0
 8011de4:	b2db      	uxtb	r3, r3
 8011de6:	f003 0301 	and.w	r3, r3, #1
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d010      	beq.n	8011e10 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011dee:	e00a      	b.n	8011e06 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011df4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dfa:	681a      	ldr	r2, [r3, #0]
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011e00:	68f8      	ldr	r0, [r7, #12]
 8011e02:	f7fd fce2 	bl	800f7ca <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d1f0      	bne.n	8011df0 <tcp_receive+0x7ec>
 8011e0e:	e0c8      	b.n	8011fa2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e14:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011e16:	e052      	b.n	8011ebe <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e1a:	68db      	ldr	r3, [r3, #12]
 8011e1c:	899b      	ldrh	r3, [r3, #12]
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7fa fda4 	bl	800c96e <lwip_htons>
 8011e26:	4603      	mov	r3, r0
 8011e28:	b2db      	uxtb	r3, r3
 8011e2a:	f003 0301 	and.w	r3, r3, #1
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d03d      	beq.n	8011eae <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011e32:	4b17      	ldr	r3, [pc, #92]	; (8011e90 <tcp_receive+0x88c>)
 8011e34:	68db      	ldr	r3, [r3, #12]
 8011e36:	899b      	ldrh	r3, [r3, #12]
 8011e38:	b29b      	uxth	r3, r3
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7fa fd97 	bl	800c96e <lwip_htons>
 8011e40:	4603      	mov	r3, r0
 8011e42:	b2db      	uxtb	r3, r3
 8011e44:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d130      	bne.n	8011eae <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011e4c:	4b10      	ldr	r3, [pc, #64]	; (8011e90 <tcp_receive+0x88c>)
 8011e4e:	68db      	ldr	r3, [r3, #12]
 8011e50:	899b      	ldrh	r3, [r3, #12]
 8011e52:	b29c      	uxth	r4, r3
 8011e54:	2001      	movs	r0, #1
 8011e56:	f7fa fd8a 	bl	800c96e <lwip_htons>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	461a      	mov	r2, r3
 8011e5e:	4b0c      	ldr	r3, [pc, #48]	; (8011e90 <tcp_receive+0x88c>)
 8011e60:	68db      	ldr	r3, [r3, #12]
 8011e62:	4322      	orrs	r2, r4
 8011e64:	b292      	uxth	r2, r2
 8011e66:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011e68:	4b09      	ldr	r3, [pc, #36]	; (8011e90 <tcp_receive+0x88c>)
 8011e6a:	891c      	ldrh	r4, [r3, #8]
 8011e6c:	4b08      	ldr	r3, [pc, #32]	; (8011e90 <tcp_receive+0x88c>)
 8011e6e:	68db      	ldr	r3, [r3, #12]
 8011e70:	899b      	ldrh	r3, [r3, #12]
 8011e72:	b29b      	uxth	r3, r3
 8011e74:	4618      	mov	r0, r3
 8011e76:	f7fa fd7a 	bl	800c96e <lwip_htons>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	f003 0303 	and.w	r3, r3, #3
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d00e      	beq.n	8011ea4 <tcp_receive+0x8a0>
 8011e86:	2301      	movs	r3, #1
 8011e88:	e00d      	b.n	8011ea6 <tcp_receive+0x8a2>
 8011e8a:	bf00      	nop
 8011e8c:	20008178 	.word	0x20008178
 8011e90:	20008158 	.word	0x20008158
 8011e94:	20008182 	.word	0x20008182
 8011e98:	0801a1f4 	.word	0x0801a1f4
 8011e9c:	0801a59c 	.word	0x0801a59c
 8011ea0:	0801a240 	.word	0x0801a240
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	4423      	add	r3, r4
 8011ea8:	b29a      	uxth	r2, r3
 8011eaa:	4b98      	ldr	r3, [pc, #608]	; (801210c <tcp_receive+0xb08>)
 8011eac:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011eb0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011eb8:	6938      	ldr	r0, [r7, #16]
 8011eba:	f7fd fc86 	bl	800f7ca <tcp_seg_free>
            while (next &&
 8011ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d00e      	beq.n	8011ee2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011ec4:	4b91      	ldr	r3, [pc, #580]	; (801210c <tcp_receive+0xb08>)
 8011ec6:	881b      	ldrh	r3, [r3, #0]
 8011ec8:	461a      	mov	r2, r3
 8011eca:	4b91      	ldr	r3, [pc, #580]	; (8012110 <tcp_receive+0xb0c>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	441a      	add	r2, r3
 8011ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ed2:	68db      	ldr	r3, [r3, #12]
 8011ed4:	685b      	ldr	r3, [r3, #4]
 8011ed6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ed8:	8909      	ldrh	r1, [r1, #8]
 8011eda:	440b      	add	r3, r1
 8011edc:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	da9a      	bge.n	8011e18 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d059      	beq.n	8011f9c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011ee8:	4b88      	ldr	r3, [pc, #544]	; (801210c <tcp_receive+0xb08>)
 8011eea:	881b      	ldrh	r3, [r3, #0]
 8011eec:	461a      	mov	r2, r3
 8011eee:	4b88      	ldr	r3, [pc, #544]	; (8012110 <tcp_receive+0xb0c>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	441a      	add	r2, r3
 8011ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ef6:	68db      	ldr	r3, [r3, #12]
 8011ef8:	685b      	ldr	r3, [r3, #4]
 8011efa:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	dd4d      	ble.n	8011f9c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f02:	68db      	ldr	r3, [r3, #12]
 8011f04:	685b      	ldr	r3, [r3, #4]
 8011f06:	b29a      	uxth	r2, r3
 8011f08:	4b81      	ldr	r3, [pc, #516]	; (8012110 <tcp_receive+0xb0c>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	b29b      	uxth	r3, r3
 8011f0e:	1ad3      	subs	r3, r2, r3
 8011f10:	b29a      	uxth	r2, r3
 8011f12:	4b80      	ldr	r3, [pc, #512]	; (8012114 <tcp_receive+0xb10>)
 8011f14:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011f16:	4b7f      	ldr	r3, [pc, #508]	; (8012114 <tcp_receive+0xb10>)
 8011f18:	68db      	ldr	r3, [r3, #12]
 8011f1a:	899b      	ldrh	r3, [r3, #12]
 8011f1c:	b29b      	uxth	r3, r3
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7fa fd25 	bl	800c96e <lwip_htons>
 8011f24:	4603      	mov	r3, r0
 8011f26:	b2db      	uxtb	r3, r3
 8011f28:	f003 0302 	and.w	r3, r3, #2
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d005      	beq.n	8011f3c <tcp_receive+0x938>
                inseg.len -= 1;
 8011f30:	4b78      	ldr	r3, [pc, #480]	; (8012114 <tcp_receive+0xb10>)
 8011f32:	891b      	ldrh	r3, [r3, #8]
 8011f34:	3b01      	subs	r3, #1
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	4b76      	ldr	r3, [pc, #472]	; (8012114 <tcp_receive+0xb10>)
 8011f3a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011f3c:	4b75      	ldr	r3, [pc, #468]	; (8012114 <tcp_receive+0xb10>)
 8011f3e:	685b      	ldr	r3, [r3, #4]
 8011f40:	4a74      	ldr	r2, [pc, #464]	; (8012114 <tcp_receive+0xb10>)
 8011f42:	8912      	ldrh	r2, [r2, #8]
 8011f44:	4611      	mov	r1, r2
 8011f46:	4618      	mov	r0, r3
 8011f48:	f7fb fee8 	bl	800dd1c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011f4c:	4b71      	ldr	r3, [pc, #452]	; (8012114 <tcp_receive+0xb10>)
 8011f4e:	891c      	ldrh	r4, [r3, #8]
 8011f50:	4b70      	ldr	r3, [pc, #448]	; (8012114 <tcp_receive+0xb10>)
 8011f52:	68db      	ldr	r3, [r3, #12]
 8011f54:	899b      	ldrh	r3, [r3, #12]
 8011f56:	b29b      	uxth	r3, r3
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f7fa fd08 	bl	800c96e <lwip_htons>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	b2db      	uxtb	r3, r3
 8011f62:	f003 0303 	and.w	r3, r3, #3
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d001      	beq.n	8011f6e <tcp_receive+0x96a>
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	e000      	b.n	8011f70 <tcp_receive+0x96c>
 8011f6e:	2300      	movs	r3, #0
 8011f70:	4423      	add	r3, r4
 8011f72:	b29a      	uxth	r2, r3
 8011f74:	4b65      	ldr	r3, [pc, #404]	; (801210c <tcp_receive+0xb08>)
 8011f76:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011f78:	4b64      	ldr	r3, [pc, #400]	; (801210c <tcp_receive+0xb08>)
 8011f7a:	881b      	ldrh	r3, [r3, #0]
 8011f7c:	461a      	mov	r2, r3
 8011f7e:	4b64      	ldr	r3, [pc, #400]	; (8012110 <tcp_receive+0xb0c>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	441a      	add	r2, r3
 8011f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f86:	68db      	ldr	r3, [r3, #12]
 8011f88:	685b      	ldr	r3, [r3, #4]
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	d006      	beq.n	8011f9c <tcp_receive+0x998>
 8011f8e:	4b62      	ldr	r3, [pc, #392]	; (8012118 <tcp_receive+0xb14>)
 8011f90:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011f94:	4961      	ldr	r1, [pc, #388]	; (801211c <tcp_receive+0xb18>)
 8011f96:	4862      	ldr	r0, [pc, #392]	; (8012120 <tcp_receive+0xb1c>)
 8011f98:	f006 f8c0 	bl	801811c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011fa0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011fa2:	4b5a      	ldr	r3, [pc, #360]	; (801210c <tcp_receive+0xb08>)
 8011fa4:	881b      	ldrh	r3, [r3, #0]
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	4b59      	ldr	r3, [pc, #356]	; (8012110 <tcp_receive+0xb0c>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	441a      	add	r2, r3
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011fb6:	4b55      	ldr	r3, [pc, #340]	; (801210c <tcp_receive+0xb08>)
 8011fb8:	881b      	ldrh	r3, [r3, #0]
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d206      	bcs.n	8011fcc <tcp_receive+0x9c8>
 8011fbe:	4b56      	ldr	r3, [pc, #344]	; (8012118 <tcp_receive+0xb14>)
 8011fc0:	f240 6207 	movw	r2, #1543	; 0x607
 8011fc4:	4957      	ldr	r1, [pc, #348]	; (8012124 <tcp_receive+0xb20>)
 8011fc6:	4856      	ldr	r0, [pc, #344]	; (8012120 <tcp_receive+0xb1c>)
 8011fc8:	f006 f8a8 	bl	801811c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011fd0:	4b4e      	ldr	r3, [pc, #312]	; (801210c <tcp_receive+0xb08>)
 8011fd2:	881b      	ldrh	r3, [r3, #0]
 8011fd4:	1ad3      	subs	r3, r2, r3
 8011fd6:	b29a      	uxth	r2, r3
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f7fc fdb7 	bl	800eb50 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011fe2:	4b4c      	ldr	r3, [pc, #304]	; (8012114 <tcp_receive+0xb10>)
 8011fe4:	685b      	ldr	r3, [r3, #4]
 8011fe6:	891b      	ldrh	r3, [r3, #8]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d006      	beq.n	8011ffa <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011fec:	4b49      	ldr	r3, [pc, #292]	; (8012114 <tcp_receive+0xb10>)
 8011fee:	685b      	ldr	r3, [r3, #4]
 8011ff0:	4a4d      	ldr	r2, [pc, #308]	; (8012128 <tcp_receive+0xb24>)
 8011ff2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011ff4:	4b47      	ldr	r3, [pc, #284]	; (8012114 <tcp_receive+0xb10>)
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011ffa:	4b46      	ldr	r3, [pc, #280]	; (8012114 <tcp_receive+0xb10>)
 8011ffc:	68db      	ldr	r3, [r3, #12]
 8011ffe:	899b      	ldrh	r3, [r3, #12]
 8012000:	b29b      	uxth	r3, r3
 8012002:	4618      	mov	r0, r3
 8012004:	f7fa fcb3 	bl	800c96e <lwip_htons>
 8012008:	4603      	mov	r3, r0
 801200a:	b2db      	uxtb	r3, r3
 801200c:	f003 0301 	and.w	r3, r3, #1
 8012010:	2b00      	cmp	r3, #0
 8012012:	f000 80b8 	beq.w	8012186 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012016:	4b45      	ldr	r3, [pc, #276]	; (801212c <tcp_receive+0xb28>)
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	f043 0320 	orr.w	r3, r3, #32
 801201e:	b2da      	uxtb	r2, r3
 8012020:	4b42      	ldr	r3, [pc, #264]	; (801212c <tcp_receive+0xb28>)
 8012022:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012024:	e0af      	b.n	8012186 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801202a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012030:	68db      	ldr	r3, [r3, #12]
 8012032:	685b      	ldr	r3, [r3, #4]
 8012034:	4a36      	ldr	r2, [pc, #216]	; (8012110 <tcp_receive+0xb0c>)
 8012036:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	891b      	ldrh	r3, [r3, #8]
 801203c:	461c      	mov	r4, r3
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	68db      	ldr	r3, [r3, #12]
 8012042:	899b      	ldrh	r3, [r3, #12]
 8012044:	b29b      	uxth	r3, r3
 8012046:	4618      	mov	r0, r3
 8012048:	f7fa fc91 	bl	800c96e <lwip_htons>
 801204c:	4603      	mov	r3, r0
 801204e:	b2db      	uxtb	r3, r3
 8012050:	f003 0303 	and.w	r3, r3, #3
 8012054:	2b00      	cmp	r3, #0
 8012056:	d001      	beq.n	801205c <tcp_receive+0xa58>
 8012058:	2301      	movs	r3, #1
 801205a:	e000      	b.n	801205e <tcp_receive+0xa5a>
 801205c:	2300      	movs	r3, #0
 801205e:	191a      	adds	r2, r3, r4
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012064:	441a      	add	r2, r3
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801206e:	461c      	mov	r4, r3
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	891b      	ldrh	r3, [r3, #8]
 8012074:	461d      	mov	r5, r3
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	68db      	ldr	r3, [r3, #12]
 801207a:	899b      	ldrh	r3, [r3, #12]
 801207c:	b29b      	uxth	r3, r3
 801207e:	4618      	mov	r0, r3
 8012080:	f7fa fc75 	bl	800c96e <lwip_htons>
 8012084:	4603      	mov	r3, r0
 8012086:	b2db      	uxtb	r3, r3
 8012088:	f003 0303 	and.w	r3, r3, #3
 801208c:	2b00      	cmp	r3, #0
 801208e:	d001      	beq.n	8012094 <tcp_receive+0xa90>
 8012090:	2301      	movs	r3, #1
 8012092:	e000      	b.n	8012096 <tcp_receive+0xa92>
 8012094:	2300      	movs	r3, #0
 8012096:	442b      	add	r3, r5
 8012098:	429c      	cmp	r4, r3
 801209a:	d206      	bcs.n	80120aa <tcp_receive+0xaa6>
 801209c:	4b1e      	ldr	r3, [pc, #120]	; (8012118 <tcp_receive+0xb14>)
 801209e:	f240 622b 	movw	r2, #1579	; 0x62b
 80120a2:	4923      	ldr	r1, [pc, #140]	; (8012130 <tcp_receive+0xb2c>)
 80120a4:	481e      	ldr	r0, [pc, #120]	; (8012120 <tcp_receive+0xb1c>)
 80120a6:	f006 f839 	bl	801811c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	891b      	ldrh	r3, [r3, #8]
 80120ae:	461c      	mov	r4, r3
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	68db      	ldr	r3, [r3, #12]
 80120b4:	899b      	ldrh	r3, [r3, #12]
 80120b6:	b29b      	uxth	r3, r3
 80120b8:	4618      	mov	r0, r3
 80120ba:	f7fa fc58 	bl	800c96e <lwip_htons>
 80120be:	4603      	mov	r3, r0
 80120c0:	b2db      	uxtb	r3, r3
 80120c2:	f003 0303 	and.w	r3, r3, #3
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d001      	beq.n	80120ce <tcp_receive+0xaca>
 80120ca:	2301      	movs	r3, #1
 80120cc:	e000      	b.n	80120d0 <tcp_receive+0xacc>
 80120ce:	2300      	movs	r3, #0
 80120d0:	1919      	adds	r1, r3, r4
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80120d6:	b28b      	uxth	r3, r1
 80120d8:	1ad3      	subs	r3, r2, r3
 80120da:	b29a      	uxth	r2, r3
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f7fc fd35 	bl	800eb50 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	685b      	ldr	r3, [r3, #4]
 80120ea:	891b      	ldrh	r3, [r3, #8]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d028      	beq.n	8012142 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80120f0:	4b0d      	ldr	r3, [pc, #52]	; (8012128 <tcp_receive+0xb24>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d01d      	beq.n	8012134 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80120f8:	4b0b      	ldr	r3, [pc, #44]	; (8012128 <tcp_receive+0xb24>)
 80120fa:	681a      	ldr	r2, [r3, #0]
 80120fc:	68bb      	ldr	r3, [r7, #8]
 80120fe:	685b      	ldr	r3, [r3, #4]
 8012100:	4619      	mov	r1, r3
 8012102:	4610      	mov	r0, r2
 8012104:	f7fc f852 	bl	800e1ac <pbuf_cat>
 8012108:	e018      	b.n	801213c <tcp_receive+0xb38>
 801210a:	bf00      	nop
 801210c:	20008182 	.word	0x20008182
 8012110:	20008178 	.word	0x20008178
 8012114:	20008158 	.word	0x20008158
 8012118:	0801a1f4 	.word	0x0801a1f4
 801211c:	0801a5d4 	.word	0x0801a5d4
 8012120:	0801a240 	.word	0x0801a240
 8012124:	0801a610 	.word	0x0801a610
 8012128:	20008188 	.word	0x20008188
 801212c:	20008185 	.word	0x20008185
 8012130:	0801a630 	.word	0x0801a630
            } else {
              recv_data = cseg->p;
 8012134:	68bb      	ldr	r3, [r7, #8]
 8012136:	685b      	ldr	r3, [r3, #4]
 8012138:	4a70      	ldr	r2, [pc, #448]	; (80122fc <tcp_receive+0xcf8>)
 801213a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	2200      	movs	r2, #0
 8012140:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	68db      	ldr	r3, [r3, #12]
 8012146:	899b      	ldrh	r3, [r3, #12]
 8012148:	b29b      	uxth	r3, r3
 801214a:	4618      	mov	r0, r3
 801214c:	f7fa fc0f 	bl	800c96e <lwip_htons>
 8012150:	4603      	mov	r3, r0
 8012152:	b2db      	uxtb	r3, r3
 8012154:	f003 0301 	and.w	r3, r3, #1
 8012158:	2b00      	cmp	r3, #0
 801215a:	d00d      	beq.n	8012178 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801215c:	4b68      	ldr	r3, [pc, #416]	; (8012300 <tcp_receive+0xcfc>)
 801215e:	781b      	ldrb	r3, [r3, #0]
 8012160:	f043 0320 	orr.w	r3, r3, #32
 8012164:	b2da      	uxtb	r2, r3
 8012166:	4b66      	ldr	r3, [pc, #408]	; (8012300 <tcp_receive+0xcfc>)
 8012168:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	7d1b      	ldrb	r3, [r3, #20]
 801216e:	2b04      	cmp	r3, #4
 8012170:	d102      	bne.n	8012178 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	2207      	movs	r2, #7
 8012176:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	681a      	ldr	r2, [r3, #0]
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012180:	68b8      	ldr	r0, [r7, #8]
 8012182:	f7fd fb22 	bl	800f7ca <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801218a:	2b00      	cmp	r3, #0
 801218c:	d008      	beq.n	80121a0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012192:	68db      	ldr	r3, [r3, #12]
 8012194:	685a      	ldr	r2, [r3, #4]
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801219a:	429a      	cmp	r2, r3
 801219c:	f43f af43 	beq.w	8012026 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	8b5b      	ldrh	r3, [r3, #26]
 80121a4:	f003 0301 	and.w	r3, r3, #1
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d00e      	beq.n	80121ca <tcp_receive+0xbc6>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	8b5b      	ldrh	r3, [r3, #26]
 80121b0:	f023 0301 	bic.w	r3, r3, #1
 80121b4:	b29a      	uxth	r2, r3
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	835a      	strh	r2, [r3, #26]
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	8b5b      	ldrh	r3, [r3, #26]
 80121be:	f043 0302 	orr.w	r3, r3, #2
 80121c2:	b29a      	uxth	r2, r3
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80121c8:	e188      	b.n	80124dc <tcp_receive+0xed8>
        tcp_ack(pcb);
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	8b5b      	ldrh	r3, [r3, #26]
 80121ce:	f043 0301 	orr.w	r3, r3, #1
 80121d2:	b29a      	uxth	r2, r3
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80121d8:	e180      	b.n	80124dc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d106      	bne.n	80121f0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80121e2:	4848      	ldr	r0, [pc, #288]	; (8012304 <tcp_receive+0xd00>)
 80121e4:	f7fd fb0a 	bl	800f7fc <tcp_seg_copy>
 80121e8:	4602      	mov	r2, r0
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	675a      	str	r2, [r3, #116]	; 0x74
 80121ee:	e16d      	b.n	80124cc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80121f0:	2300      	movs	r3, #0
 80121f2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80121fa:	e157      	b.n	80124ac <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80121fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121fe:	68db      	ldr	r3, [r3, #12]
 8012200:	685a      	ldr	r2, [r3, #4]
 8012202:	4b41      	ldr	r3, [pc, #260]	; (8012308 <tcp_receive+0xd04>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	429a      	cmp	r2, r3
 8012208:	d11d      	bne.n	8012246 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801220a:	4b3e      	ldr	r3, [pc, #248]	; (8012304 <tcp_receive+0xd00>)
 801220c:	891a      	ldrh	r2, [r3, #8]
 801220e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012210:	891b      	ldrh	r3, [r3, #8]
 8012212:	429a      	cmp	r2, r3
 8012214:	f240 814f 	bls.w	80124b6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012218:	483a      	ldr	r0, [pc, #232]	; (8012304 <tcp_receive+0xd00>)
 801221a:	f7fd faef 	bl	800f7fc <tcp_seg_copy>
 801221e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012220:	697b      	ldr	r3, [r7, #20]
 8012222:	2b00      	cmp	r3, #0
 8012224:	f000 8149 	beq.w	80124ba <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8012228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801222a:	2b00      	cmp	r3, #0
 801222c:	d003      	beq.n	8012236 <tcp_receive+0xc32>
                    prev->next = cseg;
 801222e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012230:	697a      	ldr	r2, [r7, #20]
 8012232:	601a      	str	r2, [r3, #0]
 8012234:	e002      	b.n	801223c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	697a      	ldr	r2, [r7, #20]
 801223a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801223c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801223e:	6978      	ldr	r0, [r7, #20]
 8012240:	f7ff f8dc 	bl	80113fc <tcp_oos_insert_segment>
                }
                break;
 8012244:	e139      	b.n	80124ba <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012248:	2b00      	cmp	r3, #0
 801224a:	d117      	bne.n	801227c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801224c:	4b2e      	ldr	r3, [pc, #184]	; (8012308 <tcp_receive+0xd04>)
 801224e:	681a      	ldr	r2, [r3, #0]
 8012250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012252:	68db      	ldr	r3, [r3, #12]
 8012254:	685b      	ldr	r3, [r3, #4]
 8012256:	1ad3      	subs	r3, r2, r3
 8012258:	2b00      	cmp	r3, #0
 801225a:	da57      	bge.n	801230c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801225c:	4829      	ldr	r0, [pc, #164]	; (8012304 <tcp_receive+0xd00>)
 801225e:	f7fd facd 	bl	800f7fc <tcp_seg_copy>
 8012262:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012264:	69bb      	ldr	r3, [r7, #24]
 8012266:	2b00      	cmp	r3, #0
 8012268:	f000 8129 	beq.w	80124be <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	69ba      	ldr	r2, [r7, #24]
 8012270:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012272:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012274:	69b8      	ldr	r0, [r7, #24]
 8012276:	f7ff f8c1 	bl	80113fc <tcp_oos_insert_segment>
                  }
                  break;
 801227a:	e120      	b.n	80124be <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801227c:	4b22      	ldr	r3, [pc, #136]	; (8012308 <tcp_receive+0xd04>)
 801227e:	681a      	ldr	r2, [r3, #0]
 8012280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012282:	68db      	ldr	r3, [r3, #12]
 8012284:	685b      	ldr	r3, [r3, #4]
 8012286:	1ad3      	subs	r3, r2, r3
 8012288:	3b01      	subs	r3, #1
 801228a:	2b00      	cmp	r3, #0
 801228c:	db3e      	blt.n	801230c <tcp_receive+0xd08>
 801228e:	4b1e      	ldr	r3, [pc, #120]	; (8012308 <tcp_receive+0xd04>)
 8012290:	681a      	ldr	r2, [r3, #0]
 8012292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012294:	68db      	ldr	r3, [r3, #12]
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	1ad3      	subs	r3, r2, r3
 801229a:	3301      	adds	r3, #1
 801229c:	2b00      	cmp	r3, #0
 801229e:	dc35      	bgt.n	801230c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80122a0:	4818      	ldr	r0, [pc, #96]	; (8012304 <tcp_receive+0xd00>)
 80122a2:	f7fd faab 	bl	800f7fc <tcp_seg_copy>
 80122a6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80122a8:	69fb      	ldr	r3, [r7, #28]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	f000 8109 	beq.w	80124c2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80122b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122b2:	68db      	ldr	r3, [r3, #12]
 80122b4:	685b      	ldr	r3, [r3, #4]
 80122b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122b8:	8912      	ldrh	r2, [r2, #8]
 80122ba:	441a      	add	r2, r3
 80122bc:	4b12      	ldr	r3, [pc, #72]	; (8012308 <tcp_receive+0xd04>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	1ad3      	subs	r3, r2, r3
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	dd12      	ble.n	80122ec <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80122c6:	4b10      	ldr	r3, [pc, #64]	; (8012308 <tcp_receive+0xd04>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	b29a      	uxth	r2, r3
 80122cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122ce:	68db      	ldr	r3, [r3, #12]
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	b29b      	uxth	r3, r3
 80122d4:	1ad3      	subs	r3, r2, r3
 80122d6:	b29a      	uxth	r2, r3
 80122d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122da:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80122dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122de:	685a      	ldr	r2, [r3, #4]
 80122e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122e2:	891b      	ldrh	r3, [r3, #8]
 80122e4:	4619      	mov	r1, r3
 80122e6:	4610      	mov	r0, r2
 80122e8:	f7fb fd18 	bl	800dd1c <pbuf_realloc>
                    }
                    prev->next = cseg;
 80122ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122ee:	69fa      	ldr	r2, [r7, #28]
 80122f0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80122f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80122f4:	69f8      	ldr	r0, [r7, #28]
 80122f6:	f7ff f881 	bl	80113fc <tcp_oos_insert_segment>
                  }
                  break;
 80122fa:	e0e2      	b.n	80124c2 <tcp_receive+0xebe>
 80122fc:	20008188 	.word	0x20008188
 8012300:	20008185 	.word	0x20008185
 8012304:	20008158 	.word	0x20008158
 8012308:	20008178 	.word	0x20008178
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801230c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801230e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	2b00      	cmp	r3, #0
 8012316:	f040 80c6 	bne.w	80124a6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801231a:	4b80      	ldr	r3, [pc, #512]	; (801251c <tcp_receive+0xf18>)
 801231c:	681a      	ldr	r2, [r3, #0]
 801231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012320:	68db      	ldr	r3, [r3, #12]
 8012322:	685b      	ldr	r3, [r3, #4]
 8012324:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012326:	2b00      	cmp	r3, #0
 8012328:	f340 80bd 	ble.w	80124a6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801232c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801232e:	68db      	ldr	r3, [r3, #12]
 8012330:	899b      	ldrh	r3, [r3, #12]
 8012332:	b29b      	uxth	r3, r3
 8012334:	4618      	mov	r0, r3
 8012336:	f7fa fb1a 	bl	800c96e <lwip_htons>
 801233a:	4603      	mov	r3, r0
 801233c:	b2db      	uxtb	r3, r3
 801233e:	f003 0301 	and.w	r3, r3, #1
 8012342:	2b00      	cmp	r3, #0
 8012344:	f040 80bf 	bne.w	80124c6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012348:	4875      	ldr	r0, [pc, #468]	; (8012520 <tcp_receive+0xf1c>)
 801234a:	f7fd fa57 	bl	800f7fc <tcp_seg_copy>
 801234e:	4602      	mov	r2, r0
 8012350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012352:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	2b00      	cmp	r3, #0
 801235a:	f000 80b6 	beq.w	80124ca <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801235e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012360:	68db      	ldr	r3, [r3, #12]
 8012362:	685b      	ldr	r3, [r3, #4]
 8012364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012366:	8912      	ldrh	r2, [r2, #8]
 8012368:	441a      	add	r2, r3
 801236a:	4b6c      	ldr	r3, [pc, #432]	; (801251c <tcp_receive+0xf18>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	1ad3      	subs	r3, r2, r3
 8012370:	2b00      	cmp	r3, #0
 8012372:	dd12      	ble.n	801239a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012374:	4b69      	ldr	r3, [pc, #420]	; (801251c <tcp_receive+0xf18>)
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	b29a      	uxth	r2, r3
 801237a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801237c:	68db      	ldr	r3, [r3, #12]
 801237e:	685b      	ldr	r3, [r3, #4]
 8012380:	b29b      	uxth	r3, r3
 8012382:	1ad3      	subs	r3, r2, r3
 8012384:	b29a      	uxth	r2, r3
 8012386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012388:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801238a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801238c:	685a      	ldr	r2, [r3, #4]
 801238e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012390:	891b      	ldrh	r3, [r3, #8]
 8012392:	4619      	mov	r1, r3
 8012394:	4610      	mov	r0, r2
 8012396:	f7fb fcc1 	bl	800dd1c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801239a:	4b62      	ldr	r3, [pc, #392]	; (8012524 <tcp_receive+0xf20>)
 801239c:	881b      	ldrh	r3, [r3, #0]
 801239e:	461a      	mov	r2, r3
 80123a0:	4b5e      	ldr	r3, [pc, #376]	; (801251c <tcp_receive+0xf18>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	441a      	add	r2, r3
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123aa:	6879      	ldr	r1, [r7, #4]
 80123ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80123ae:	440b      	add	r3, r1
 80123b0:	1ad3      	subs	r3, r2, r3
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	f340 8089 	ble.w	80124ca <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80123b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	68db      	ldr	r3, [r3, #12]
 80123be:	899b      	ldrh	r3, [r3, #12]
 80123c0:	b29b      	uxth	r3, r3
 80123c2:	4618      	mov	r0, r3
 80123c4:	f7fa fad3 	bl	800c96e <lwip_htons>
 80123c8:	4603      	mov	r3, r0
 80123ca:	b2db      	uxtb	r3, r3
 80123cc:	f003 0301 	and.w	r3, r3, #1
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d022      	beq.n	801241a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80123d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	68db      	ldr	r3, [r3, #12]
 80123da:	899b      	ldrh	r3, [r3, #12]
 80123dc:	b29b      	uxth	r3, r3
 80123de:	b21b      	sxth	r3, r3
 80123e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80123e4:	b21c      	sxth	r4, r3
 80123e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	68db      	ldr	r3, [r3, #12]
 80123ec:	899b      	ldrh	r3, [r3, #12]
 80123ee:	b29b      	uxth	r3, r3
 80123f0:	4618      	mov	r0, r3
 80123f2:	f7fa fabc 	bl	800c96e <lwip_htons>
 80123f6:	4603      	mov	r3, r0
 80123f8:	b2db      	uxtb	r3, r3
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012400:	b29b      	uxth	r3, r3
 8012402:	4618      	mov	r0, r3
 8012404:	f7fa fab3 	bl	800c96e <lwip_htons>
 8012408:	4603      	mov	r3, r0
 801240a:	b21b      	sxth	r3, r3
 801240c:	4323      	orrs	r3, r4
 801240e:	b21a      	sxth	r2, r3
 8012410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	68db      	ldr	r3, [r3, #12]
 8012416:	b292      	uxth	r2, r2
 8012418:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801241e:	b29a      	uxth	r2, r3
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012424:	4413      	add	r3, r2
 8012426:	b299      	uxth	r1, r3
 8012428:	4b3c      	ldr	r3, [pc, #240]	; (801251c <tcp_receive+0xf18>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	b29a      	uxth	r2, r3
 801242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	1a8a      	subs	r2, r1, r2
 8012434:	b292      	uxth	r2, r2
 8012436:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	685a      	ldr	r2, [r3, #4]
 801243e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	891b      	ldrh	r3, [r3, #8]
 8012444:	4619      	mov	r1, r3
 8012446:	4610      	mov	r0, r2
 8012448:	f7fb fc68 	bl	800dd1c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801244c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	891c      	ldrh	r4, [r3, #8]
 8012452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	68db      	ldr	r3, [r3, #12]
 8012458:	899b      	ldrh	r3, [r3, #12]
 801245a:	b29b      	uxth	r3, r3
 801245c:	4618      	mov	r0, r3
 801245e:	f7fa fa86 	bl	800c96e <lwip_htons>
 8012462:	4603      	mov	r3, r0
 8012464:	b2db      	uxtb	r3, r3
 8012466:	f003 0303 	and.w	r3, r3, #3
 801246a:	2b00      	cmp	r3, #0
 801246c:	d001      	beq.n	8012472 <tcp_receive+0xe6e>
 801246e:	2301      	movs	r3, #1
 8012470:	e000      	b.n	8012474 <tcp_receive+0xe70>
 8012472:	2300      	movs	r3, #0
 8012474:	4423      	add	r3, r4
 8012476:	b29a      	uxth	r2, r3
 8012478:	4b2a      	ldr	r3, [pc, #168]	; (8012524 <tcp_receive+0xf20>)
 801247a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801247c:	4b29      	ldr	r3, [pc, #164]	; (8012524 <tcp_receive+0xf20>)
 801247e:	881b      	ldrh	r3, [r3, #0]
 8012480:	461a      	mov	r2, r3
 8012482:	4b26      	ldr	r3, [pc, #152]	; (801251c <tcp_receive+0xf18>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	441a      	add	r2, r3
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801248c:	6879      	ldr	r1, [r7, #4]
 801248e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012490:	440b      	add	r3, r1
 8012492:	429a      	cmp	r2, r3
 8012494:	d019      	beq.n	80124ca <tcp_receive+0xec6>
 8012496:	4b24      	ldr	r3, [pc, #144]	; (8012528 <tcp_receive+0xf24>)
 8012498:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801249c:	4923      	ldr	r1, [pc, #140]	; (801252c <tcp_receive+0xf28>)
 801249e:	4824      	ldr	r0, [pc, #144]	; (8012530 <tcp_receive+0xf2c>)
 80124a0:	f005 fe3c 	bl	801811c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80124a4:	e011      	b.n	80124ca <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80124a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80124ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	f47f aea4 	bne.w	80121fc <tcp_receive+0xbf8>
 80124b4:	e00a      	b.n	80124cc <tcp_receive+0xec8>
                break;
 80124b6:	bf00      	nop
 80124b8:	e008      	b.n	80124cc <tcp_receive+0xec8>
                break;
 80124ba:	bf00      	nop
 80124bc:	e006      	b.n	80124cc <tcp_receive+0xec8>
                  break;
 80124be:	bf00      	nop
 80124c0:	e004      	b.n	80124cc <tcp_receive+0xec8>
                  break;
 80124c2:	bf00      	nop
 80124c4:	e002      	b.n	80124cc <tcp_receive+0xec8>
                  break;
 80124c6:	bf00      	nop
 80124c8:	e000      	b.n	80124cc <tcp_receive+0xec8>
                break;
 80124ca:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f001 fe89 	bl	80141e4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80124d2:	e003      	b.n	80124dc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	f001 fe85 	bl	80141e4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80124da:	e01a      	b.n	8012512 <tcp_receive+0xf0e>
 80124dc:	e019      	b.n	8012512 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80124de:	4b0f      	ldr	r3, [pc, #60]	; (801251c <tcp_receive+0xf18>)
 80124e0:	681a      	ldr	r2, [r3, #0]
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124e6:	1ad3      	subs	r3, r2, r3
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	db0a      	blt.n	8012502 <tcp_receive+0xefe>
 80124ec:	4b0b      	ldr	r3, [pc, #44]	; (801251c <tcp_receive+0xf18>)
 80124ee:	681a      	ldr	r2, [r3, #0]
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124f4:	6879      	ldr	r1, [r7, #4]
 80124f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80124f8:	440b      	add	r3, r1
 80124fa:	1ad3      	subs	r3, r2, r3
 80124fc:	3301      	adds	r3, #1
 80124fe:	2b00      	cmp	r3, #0
 8012500:	dd07      	ble.n	8012512 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	8b5b      	ldrh	r3, [r3, #26]
 8012506:	f043 0302 	orr.w	r3, r3, #2
 801250a:	b29a      	uxth	r2, r3
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012510:	e7ff      	b.n	8012512 <tcp_receive+0xf0e>
 8012512:	bf00      	nop
 8012514:	3750      	adds	r7, #80	; 0x50
 8012516:	46bd      	mov	sp, r7
 8012518:	bdb0      	pop	{r4, r5, r7, pc}
 801251a:	bf00      	nop
 801251c:	20008178 	.word	0x20008178
 8012520:	20008158 	.word	0x20008158
 8012524:	20008182 	.word	0x20008182
 8012528:	0801a1f4 	.word	0x0801a1f4
 801252c:	0801a59c 	.word	0x0801a59c
 8012530:	0801a240 	.word	0x0801a240

08012534 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012534:	b480      	push	{r7}
 8012536:	b083      	sub	sp, #12
 8012538:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801253a:	4b15      	ldr	r3, [pc, #84]	; (8012590 <tcp_get_next_optbyte+0x5c>)
 801253c:	881b      	ldrh	r3, [r3, #0]
 801253e:	1c5a      	adds	r2, r3, #1
 8012540:	b291      	uxth	r1, r2
 8012542:	4a13      	ldr	r2, [pc, #76]	; (8012590 <tcp_get_next_optbyte+0x5c>)
 8012544:	8011      	strh	r1, [r2, #0]
 8012546:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012548:	4b12      	ldr	r3, [pc, #72]	; (8012594 <tcp_get_next_optbyte+0x60>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d004      	beq.n	801255a <tcp_get_next_optbyte+0x26>
 8012550:	4b11      	ldr	r3, [pc, #68]	; (8012598 <tcp_get_next_optbyte+0x64>)
 8012552:	881b      	ldrh	r3, [r3, #0]
 8012554:	88fa      	ldrh	r2, [r7, #6]
 8012556:	429a      	cmp	r2, r3
 8012558:	d208      	bcs.n	801256c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801255a:	4b10      	ldr	r3, [pc, #64]	; (801259c <tcp_get_next_optbyte+0x68>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	3314      	adds	r3, #20
 8012560:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012562:	88fb      	ldrh	r3, [r7, #6]
 8012564:	683a      	ldr	r2, [r7, #0]
 8012566:	4413      	add	r3, r2
 8012568:	781b      	ldrb	r3, [r3, #0]
 801256a:	e00b      	b.n	8012584 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801256c:	88fb      	ldrh	r3, [r7, #6]
 801256e:	b2da      	uxtb	r2, r3
 8012570:	4b09      	ldr	r3, [pc, #36]	; (8012598 <tcp_get_next_optbyte+0x64>)
 8012572:	881b      	ldrh	r3, [r3, #0]
 8012574:	b2db      	uxtb	r3, r3
 8012576:	1ad3      	subs	r3, r2, r3
 8012578:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801257a:	4b06      	ldr	r3, [pc, #24]	; (8012594 <tcp_get_next_optbyte+0x60>)
 801257c:	681a      	ldr	r2, [r3, #0]
 801257e:	797b      	ldrb	r3, [r7, #5]
 8012580:	4413      	add	r3, r2
 8012582:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012584:	4618      	mov	r0, r3
 8012586:	370c      	adds	r7, #12
 8012588:	46bd      	mov	sp, r7
 801258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258e:	4770      	bx	lr
 8012590:	20008174 	.word	0x20008174
 8012594:	20008170 	.word	0x20008170
 8012598:	2000816e 	.word	0x2000816e
 801259c:	20008168 	.word	0x20008168

080125a0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b084      	sub	sp, #16
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d106      	bne.n	80125bc <tcp_parseopt+0x1c>
 80125ae:	4b32      	ldr	r3, [pc, #200]	; (8012678 <tcp_parseopt+0xd8>)
 80125b0:	f240 727d 	movw	r2, #1917	; 0x77d
 80125b4:	4931      	ldr	r1, [pc, #196]	; (801267c <tcp_parseopt+0xdc>)
 80125b6:	4832      	ldr	r0, [pc, #200]	; (8012680 <tcp_parseopt+0xe0>)
 80125b8:	f005 fdb0 	bl	801811c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80125bc:	4b31      	ldr	r3, [pc, #196]	; (8012684 <tcp_parseopt+0xe4>)
 80125be:	881b      	ldrh	r3, [r3, #0]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d055      	beq.n	8012670 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80125c4:	4b30      	ldr	r3, [pc, #192]	; (8012688 <tcp_parseopt+0xe8>)
 80125c6:	2200      	movs	r2, #0
 80125c8:	801a      	strh	r2, [r3, #0]
 80125ca:	e045      	b.n	8012658 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80125cc:	f7ff ffb2 	bl	8012534 <tcp_get_next_optbyte>
 80125d0:	4603      	mov	r3, r0
 80125d2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80125d4:	7bfb      	ldrb	r3, [r7, #15]
 80125d6:	2b02      	cmp	r3, #2
 80125d8:	d006      	beq.n	80125e8 <tcp_parseopt+0x48>
 80125da:	2b02      	cmp	r3, #2
 80125dc:	dc2b      	bgt.n	8012636 <tcp_parseopt+0x96>
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d041      	beq.n	8012666 <tcp_parseopt+0xc6>
 80125e2:	2b01      	cmp	r3, #1
 80125e4:	d127      	bne.n	8012636 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80125e6:	e037      	b.n	8012658 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80125e8:	f7ff ffa4 	bl	8012534 <tcp_get_next_optbyte>
 80125ec:	4603      	mov	r3, r0
 80125ee:	2b04      	cmp	r3, #4
 80125f0:	d13b      	bne.n	801266a <tcp_parseopt+0xca>
 80125f2:	4b25      	ldr	r3, [pc, #148]	; (8012688 <tcp_parseopt+0xe8>)
 80125f4:	881b      	ldrh	r3, [r3, #0]
 80125f6:	3301      	adds	r3, #1
 80125f8:	4a22      	ldr	r2, [pc, #136]	; (8012684 <tcp_parseopt+0xe4>)
 80125fa:	8812      	ldrh	r2, [r2, #0]
 80125fc:	4293      	cmp	r3, r2
 80125fe:	da34      	bge.n	801266a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012600:	f7ff ff98 	bl	8012534 <tcp_get_next_optbyte>
 8012604:	4603      	mov	r3, r0
 8012606:	b29b      	uxth	r3, r3
 8012608:	021b      	lsls	r3, r3, #8
 801260a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801260c:	f7ff ff92 	bl	8012534 <tcp_get_next_optbyte>
 8012610:	4603      	mov	r3, r0
 8012612:	b29a      	uxth	r2, r3
 8012614:	89bb      	ldrh	r3, [r7, #12]
 8012616:	4313      	orrs	r3, r2
 8012618:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801261a:	89bb      	ldrh	r3, [r7, #12]
 801261c:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8012620:	d804      	bhi.n	801262c <tcp_parseopt+0x8c>
 8012622:	89bb      	ldrh	r3, [r7, #12]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d001      	beq.n	801262c <tcp_parseopt+0x8c>
 8012628:	89ba      	ldrh	r2, [r7, #12]
 801262a:	e001      	b.n	8012630 <tcp_parseopt+0x90>
 801262c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012634:	e010      	b.n	8012658 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012636:	f7ff ff7d 	bl	8012534 <tcp_get_next_optbyte>
 801263a:	4603      	mov	r3, r0
 801263c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801263e:	7afb      	ldrb	r3, [r7, #11]
 8012640:	2b01      	cmp	r3, #1
 8012642:	d914      	bls.n	801266e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012644:	7afb      	ldrb	r3, [r7, #11]
 8012646:	b29a      	uxth	r2, r3
 8012648:	4b0f      	ldr	r3, [pc, #60]	; (8012688 <tcp_parseopt+0xe8>)
 801264a:	881b      	ldrh	r3, [r3, #0]
 801264c:	4413      	add	r3, r2
 801264e:	b29b      	uxth	r3, r3
 8012650:	3b02      	subs	r3, #2
 8012652:	b29a      	uxth	r2, r3
 8012654:	4b0c      	ldr	r3, [pc, #48]	; (8012688 <tcp_parseopt+0xe8>)
 8012656:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012658:	4b0b      	ldr	r3, [pc, #44]	; (8012688 <tcp_parseopt+0xe8>)
 801265a:	881a      	ldrh	r2, [r3, #0]
 801265c:	4b09      	ldr	r3, [pc, #36]	; (8012684 <tcp_parseopt+0xe4>)
 801265e:	881b      	ldrh	r3, [r3, #0]
 8012660:	429a      	cmp	r2, r3
 8012662:	d3b3      	bcc.n	80125cc <tcp_parseopt+0x2c>
 8012664:	e004      	b.n	8012670 <tcp_parseopt+0xd0>
          return;
 8012666:	bf00      	nop
 8012668:	e002      	b.n	8012670 <tcp_parseopt+0xd0>
            return;
 801266a:	bf00      	nop
 801266c:	e000      	b.n	8012670 <tcp_parseopt+0xd0>
            return;
 801266e:	bf00      	nop
      }
    }
  }
}
 8012670:	3710      	adds	r7, #16
 8012672:	46bd      	mov	sp, r7
 8012674:	bd80      	pop	{r7, pc}
 8012676:	bf00      	nop
 8012678:	0801a1f4 	.word	0x0801a1f4
 801267c:	0801a658 	.word	0x0801a658
 8012680:	0801a240 	.word	0x0801a240
 8012684:	2000816c 	.word	0x2000816c
 8012688:	20008174 	.word	0x20008174

0801268c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801268c:	b480      	push	{r7}
 801268e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012690:	4b05      	ldr	r3, [pc, #20]	; (80126a8 <tcp_trigger_input_pcb_close+0x1c>)
 8012692:	781b      	ldrb	r3, [r3, #0]
 8012694:	f043 0310 	orr.w	r3, r3, #16
 8012698:	b2da      	uxtb	r2, r3
 801269a:	4b03      	ldr	r3, [pc, #12]	; (80126a8 <tcp_trigger_input_pcb_close+0x1c>)
 801269c:	701a      	strb	r2, [r3, #0]
}
 801269e:	bf00      	nop
 80126a0:	46bd      	mov	sp, r7
 80126a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a6:	4770      	bx	lr
 80126a8:	20008185 	.word	0x20008185

080126ac <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b084      	sub	sp, #16
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	60f8      	str	r0, [r7, #12]
 80126b4:	60b9      	str	r1, [r7, #8]
 80126b6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d00a      	beq.n	80126d4 <tcp_route+0x28>
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	7a1b      	ldrb	r3, [r3, #8]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d006      	beq.n	80126d4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	7a1b      	ldrb	r3, [r3, #8]
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7fb f94c 	bl	800d968 <netif_get_by_index>
 80126d0:	4603      	mov	r3, r0
 80126d2:	e003      	b.n	80126dc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f003 fad3 	bl	8015c80 <ip4_route>
 80126da:	4603      	mov	r3, r0
  }
}
 80126dc:	4618      	mov	r0, r3
 80126de:	3710      	adds	r7, #16
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}

080126e4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80126e4:	b590      	push	{r4, r7, lr}
 80126e6:	b087      	sub	sp, #28
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	60f8      	str	r0, [r7, #12]
 80126ec:	60b9      	str	r1, [r7, #8]
 80126ee:	603b      	str	r3, [r7, #0]
 80126f0:	4613      	mov	r3, r2
 80126f2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d105      	bne.n	8012706 <tcp_create_segment+0x22>
 80126fa:	4b44      	ldr	r3, [pc, #272]	; (801280c <tcp_create_segment+0x128>)
 80126fc:	22a3      	movs	r2, #163	; 0xa3
 80126fe:	4944      	ldr	r1, [pc, #272]	; (8012810 <tcp_create_segment+0x12c>)
 8012700:	4844      	ldr	r0, [pc, #272]	; (8012814 <tcp_create_segment+0x130>)
 8012702:	f005 fd0b 	bl	801811c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012706:	68bb      	ldr	r3, [r7, #8]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d105      	bne.n	8012718 <tcp_create_segment+0x34>
 801270c:	4b3f      	ldr	r3, [pc, #252]	; (801280c <tcp_create_segment+0x128>)
 801270e:	22a4      	movs	r2, #164	; 0xa4
 8012710:	4941      	ldr	r1, [pc, #260]	; (8012818 <tcp_create_segment+0x134>)
 8012712:	4840      	ldr	r0, [pc, #256]	; (8012814 <tcp_create_segment+0x130>)
 8012714:	f005 fd02 	bl	801811c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012718:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801271c:	009b      	lsls	r3, r3, #2
 801271e:	b2db      	uxtb	r3, r3
 8012720:	f003 0304 	and.w	r3, r3, #4
 8012724:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012726:	2003      	movs	r0, #3
 8012728:	f7fa fd98 	bl	800d25c <memp_malloc>
 801272c:	6138      	str	r0, [r7, #16]
 801272e:	693b      	ldr	r3, [r7, #16]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d104      	bne.n	801273e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012734:	68b8      	ldr	r0, [r7, #8]
 8012736:	f7fb fc77 	bl	800e028 <pbuf_free>
    return NULL;
 801273a:	2300      	movs	r3, #0
 801273c:	e061      	b.n	8012802 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012744:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012746:	693b      	ldr	r3, [r7, #16]
 8012748:	2200      	movs	r2, #0
 801274a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	68ba      	ldr	r2, [r7, #8]
 8012750:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	891a      	ldrh	r2, [r3, #8]
 8012756:	7dfb      	ldrb	r3, [r7, #23]
 8012758:	b29b      	uxth	r3, r3
 801275a:	429a      	cmp	r2, r3
 801275c:	d205      	bcs.n	801276a <tcp_create_segment+0x86>
 801275e:	4b2b      	ldr	r3, [pc, #172]	; (801280c <tcp_create_segment+0x128>)
 8012760:	22b0      	movs	r2, #176	; 0xb0
 8012762:	492e      	ldr	r1, [pc, #184]	; (801281c <tcp_create_segment+0x138>)
 8012764:	482b      	ldr	r0, [pc, #172]	; (8012814 <tcp_create_segment+0x130>)
 8012766:	f005 fcd9 	bl	801811c <iprintf>
  seg->len = p->tot_len - optlen;
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	891a      	ldrh	r2, [r3, #8]
 801276e:	7dfb      	ldrb	r3, [r7, #23]
 8012770:	b29b      	uxth	r3, r3
 8012772:	1ad3      	subs	r3, r2, r3
 8012774:	b29a      	uxth	r2, r3
 8012776:	693b      	ldr	r3, [r7, #16]
 8012778:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801277a:	2114      	movs	r1, #20
 801277c:	68b8      	ldr	r0, [r7, #8]
 801277e:	f7fb fbbd 	bl	800defc <pbuf_add_header>
 8012782:	4603      	mov	r3, r0
 8012784:	2b00      	cmp	r3, #0
 8012786:	d004      	beq.n	8012792 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012788:	6938      	ldr	r0, [r7, #16]
 801278a:	f7fd f81e 	bl	800f7ca <tcp_seg_free>
    return NULL;
 801278e:	2300      	movs	r3, #0
 8012790:	e037      	b.n	8012802 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	685b      	ldr	r3, [r3, #4]
 8012796:	685a      	ldr	r2, [r3, #4]
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	8ada      	ldrh	r2, [r3, #22]
 80127a0:	693b      	ldr	r3, [r7, #16]
 80127a2:	68dc      	ldr	r4, [r3, #12]
 80127a4:	4610      	mov	r0, r2
 80127a6:	f7fa f8e2 	bl	800c96e <lwip_htons>
 80127aa:	4603      	mov	r3, r0
 80127ac:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	8b1a      	ldrh	r2, [r3, #24]
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	68dc      	ldr	r4, [r3, #12]
 80127b6:	4610      	mov	r0, r2
 80127b8:	f7fa f8d9 	bl	800c96e <lwip_htons>
 80127bc:	4603      	mov	r3, r0
 80127be:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80127c0:	693b      	ldr	r3, [r7, #16]
 80127c2:	68dc      	ldr	r4, [r3, #12]
 80127c4:	6838      	ldr	r0, [r7, #0]
 80127c6:	f7fa f8e7 	bl	800c998 <lwip_htonl>
 80127ca:	4603      	mov	r3, r0
 80127cc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80127ce:	7dfb      	ldrb	r3, [r7, #23]
 80127d0:	089b      	lsrs	r3, r3, #2
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	b29b      	uxth	r3, r3
 80127d6:	3305      	adds	r3, #5
 80127d8:	b29b      	uxth	r3, r3
 80127da:	031b      	lsls	r3, r3, #12
 80127dc:	b29a      	uxth	r2, r3
 80127de:	79fb      	ldrb	r3, [r7, #7]
 80127e0:	b29b      	uxth	r3, r3
 80127e2:	4313      	orrs	r3, r2
 80127e4:	b29a      	uxth	r2, r3
 80127e6:	693b      	ldr	r3, [r7, #16]
 80127e8:	68dc      	ldr	r4, [r3, #12]
 80127ea:	4610      	mov	r0, r2
 80127ec:	f7fa f8bf 	bl	800c96e <lwip_htons>
 80127f0:	4603      	mov	r3, r0
 80127f2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	68db      	ldr	r3, [r3, #12]
 80127f8:	2200      	movs	r2, #0
 80127fa:	749a      	strb	r2, [r3, #18]
 80127fc:	2200      	movs	r2, #0
 80127fe:	74da      	strb	r2, [r3, #19]
  return seg;
 8012800:	693b      	ldr	r3, [r7, #16]
}
 8012802:	4618      	mov	r0, r3
 8012804:	371c      	adds	r7, #28
 8012806:	46bd      	mov	sp, r7
 8012808:	bd90      	pop	{r4, r7, pc}
 801280a:	bf00      	nop
 801280c:	0801a674 	.word	0x0801a674
 8012810:	0801a6a8 	.word	0x0801a6a8
 8012814:	0801a6c8 	.word	0x0801a6c8
 8012818:	0801a6f0 	.word	0x0801a6f0
 801281c:	0801a714 	.word	0x0801a714

08012820 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b086      	sub	sp, #24
 8012824:	af00      	add	r7, sp, #0
 8012826:	607b      	str	r3, [r7, #4]
 8012828:	4603      	mov	r3, r0
 801282a:	73fb      	strb	r3, [r7, #15]
 801282c:	460b      	mov	r3, r1
 801282e:	81bb      	strh	r3, [r7, #12]
 8012830:	4613      	mov	r3, r2
 8012832:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012834:	89bb      	ldrh	r3, [r7, #12]
 8012836:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d105      	bne.n	801284a <tcp_pbuf_prealloc+0x2a>
 801283e:	4b30      	ldr	r3, [pc, #192]	; (8012900 <tcp_pbuf_prealloc+0xe0>)
 8012840:	22e8      	movs	r2, #232	; 0xe8
 8012842:	4930      	ldr	r1, [pc, #192]	; (8012904 <tcp_pbuf_prealloc+0xe4>)
 8012844:	4830      	ldr	r0, [pc, #192]	; (8012908 <tcp_pbuf_prealloc+0xe8>)
 8012846:	f005 fc69 	bl	801811c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801284a:	6a3b      	ldr	r3, [r7, #32]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d105      	bne.n	801285c <tcp_pbuf_prealloc+0x3c>
 8012850:	4b2b      	ldr	r3, [pc, #172]	; (8012900 <tcp_pbuf_prealloc+0xe0>)
 8012852:	22e9      	movs	r2, #233	; 0xe9
 8012854:	492d      	ldr	r1, [pc, #180]	; (801290c <tcp_pbuf_prealloc+0xec>)
 8012856:	482c      	ldr	r0, [pc, #176]	; (8012908 <tcp_pbuf_prealloc+0xe8>)
 8012858:	f005 fc60 	bl	801811c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801285c:	89ba      	ldrh	r2, [r7, #12]
 801285e:	897b      	ldrh	r3, [r7, #10]
 8012860:	429a      	cmp	r2, r3
 8012862:	d221      	bcs.n	80128a8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012864:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012868:	f003 0302 	and.w	r3, r3, #2
 801286c:	2b00      	cmp	r3, #0
 801286e:	d111      	bne.n	8012894 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012870:	6a3b      	ldr	r3, [r7, #32]
 8012872:	8b5b      	ldrh	r3, [r3, #26]
 8012874:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012878:	2b00      	cmp	r3, #0
 801287a:	d115      	bne.n	80128a8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801287c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012880:	2b00      	cmp	r3, #0
 8012882:	d007      	beq.n	8012894 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012884:	6a3b      	ldr	r3, [r7, #32]
 8012886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012888:	2b00      	cmp	r3, #0
 801288a:	d103      	bne.n	8012894 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801288c:	6a3b      	ldr	r3, [r7, #32]
 801288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012890:	2b00      	cmp	r3, #0
 8012892:	d009      	beq.n	80128a8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012894:	89bb      	ldrh	r3, [r7, #12]
 8012896:	f203 13cf 	addw	r3, r3, #463	; 0x1cf
 801289a:	f023 0203 	bic.w	r2, r3, #3
 801289e:	897b      	ldrh	r3, [r7, #10]
 80128a0:	4293      	cmp	r3, r2
 80128a2:	bf28      	it	cs
 80128a4:	4613      	movcs	r3, r2
 80128a6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80128a8:	8af9      	ldrh	r1, [r7, #22]
 80128aa:	7bfb      	ldrb	r3, [r7, #15]
 80128ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7fb f8d5 	bl	800da60 <pbuf_alloc>
 80128b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80128b8:	693b      	ldr	r3, [r7, #16]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d101      	bne.n	80128c2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80128be:	2300      	movs	r3, #0
 80128c0:	e019      	b.n	80128f6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d006      	beq.n	80128d8 <tcp_pbuf_prealloc+0xb8>
 80128ca:	4b0d      	ldr	r3, [pc, #52]	; (8012900 <tcp_pbuf_prealloc+0xe0>)
 80128cc:	f240 120b 	movw	r2, #267	; 0x10b
 80128d0:	490f      	ldr	r1, [pc, #60]	; (8012910 <tcp_pbuf_prealloc+0xf0>)
 80128d2:	480d      	ldr	r0, [pc, #52]	; (8012908 <tcp_pbuf_prealloc+0xe8>)
 80128d4:	f005 fc22 	bl	801811c <iprintf>
  *oversize = p->len - length;
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	895a      	ldrh	r2, [r3, #10]
 80128dc:	89bb      	ldrh	r3, [r7, #12]
 80128de:	1ad3      	subs	r3, r2, r3
 80128e0:	b29a      	uxth	r2, r3
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80128e6:	693b      	ldr	r3, [r7, #16]
 80128e8:	89ba      	ldrh	r2, [r7, #12]
 80128ea:	811a      	strh	r2, [r3, #8]
 80128ec:	693b      	ldr	r3, [r7, #16]
 80128ee:	891a      	ldrh	r2, [r3, #8]
 80128f0:	693b      	ldr	r3, [r7, #16]
 80128f2:	815a      	strh	r2, [r3, #10]
  return p;
 80128f4:	693b      	ldr	r3, [r7, #16]
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	3718      	adds	r7, #24
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}
 80128fe:	bf00      	nop
 8012900:	0801a674 	.word	0x0801a674
 8012904:	0801a72c 	.word	0x0801a72c
 8012908:	0801a6c8 	.word	0x0801a6c8
 801290c:	0801a750 	.word	0x0801a750
 8012910:	0801a770 	.word	0x0801a770

08012914 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b082      	sub	sp, #8
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
 801291c:	460b      	mov	r3, r1
 801291e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d106      	bne.n	8012934 <tcp_write_checks+0x20>
 8012926:	4b33      	ldr	r3, [pc, #204]	; (80129f4 <tcp_write_checks+0xe0>)
 8012928:	f240 1233 	movw	r2, #307	; 0x133
 801292c:	4932      	ldr	r1, [pc, #200]	; (80129f8 <tcp_write_checks+0xe4>)
 801292e:	4833      	ldr	r0, [pc, #204]	; (80129fc <tcp_write_checks+0xe8>)
 8012930:	f005 fbf4 	bl	801811c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	7d1b      	ldrb	r3, [r3, #20]
 8012938:	2b04      	cmp	r3, #4
 801293a:	d00e      	beq.n	801295a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012940:	2b07      	cmp	r3, #7
 8012942:	d00a      	beq.n	801295a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012948:	2b02      	cmp	r3, #2
 801294a:	d006      	beq.n	801295a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012950:	2b03      	cmp	r3, #3
 8012952:	d002      	beq.n	801295a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012954:	f06f 030a 	mvn.w	r3, #10
 8012958:	e048      	b.n	80129ec <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801295a:	887b      	ldrh	r3, [r7, #2]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d101      	bne.n	8012964 <tcp_write_checks+0x50>
    return ERR_OK;
 8012960:	2300      	movs	r3, #0
 8012962:	e043      	b.n	80129ec <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801296a:	887a      	ldrh	r2, [r7, #2]
 801296c:	429a      	cmp	r2, r3
 801296e:	d909      	bls.n	8012984 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	8b5b      	ldrh	r3, [r3, #26]
 8012974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012978:	b29a      	uxth	r2, r3
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801297e:	f04f 33ff 	mov.w	r3, #4294967295
 8012982:	e033      	b.n	80129ec <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801298a:	2b0f      	cmp	r3, #15
 801298c:	d909      	bls.n	80129a2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	8b5b      	ldrh	r3, [r3, #26]
 8012992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012996:	b29a      	uxth	r2, r3
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801299c:	f04f 33ff 	mov.w	r3, #4294967295
 80129a0:	e024      	b.n	80129ec <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d00f      	beq.n	80129cc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d11a      	bne.n	80129ea <tcp_write_checks+0xd6>
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d116      	bne.n	80129ea <tcp_write_checks+0xd6>
 80129bc:	4b0d      	ldr	r3, [pc, #52]	; (80129f4 <tcp_write_checks+0xe0>)
 80129be:	f240 1255 	movw	r2, #341	; 0x155
 80129c2:	490f      	ldr	r1, [pc, #60]	; (8012a00 <tcp_write_checks+0xec>)
 80129c4:	480d      	ldr	r0, [pc, #52]	; (80129fc <tcp_write_checks+0xe8>)
 80129c6:	f005 fba9 	bl	801811c <iprintf>
 80129ca:	e00e      	b.n	80129ea <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d103      	bne.n	80129dc <tcp_write_checks+0xc8>
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d006      	beq.n	80129ea <tcp_write_checks+0xd6>
 80129dc:	4b05      	ldr	r3, [pc, #20]	; (80129f4 <tcp_write_checks+0xe0>)
 80129de:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80129e2:	4908      	ldr	r1, [pc, #32]	; (8012a04 <tcp_write_checks+0xf0>)
 80129e4:	4805      	ldr	r0, [pc, #20]	; (80129fc <tcp_write_checks+0xe8>)
 80129e6:	f005 fb99 	bl	801811c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80129ea:	2300      	movs	r3, #0
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	3708      	adds	r7, #8
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	0801a674 	.word	0x0801a674
 80129f8:	0801a784 	.word	0x0801a784
 80129fc:	0801a6c8 	.word	0x0801a6c8
 8012a00:	0801a7a4 	.word	0x0801a7a4
 8012a04:	0801a7e0 	.word	0x0801a7e0

08012a08 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012a08:	b590      	push	{r4, r7, lr}
 8012a0a:	b09b      	sub	sp, #108	; 0x6c
 8012a0c:	af04      	add	r7, sp, #16
 8012a0e:	60f8      	str	r0, [r7, #12]
 8012a10:	60b9      	str	r1, [r7, #8]
 8012a12:	4611      	mov	r1, r2
 8012a14:	461a      	mov	r2, r3
 8012a16:	460b      	mov	r3, r1
 8012a18:	80fb      	strh	r3, [r7, #6]
 8012a1a:	4613      	mov	r3, r2
 8012a1c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012a1e:	2300      	movs	r3, #0
 8012a20:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012a22:	2300      	movs	r3, #0
 8012a24:	653b      	str	r3, [r7, #80]	; 0x50
 8012a26:	2300      	movs	r3, #0
 8012a28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8012a2e:	2300      	movs	r3, #0
 8012a30:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012a32:	2300      	movs	r3, #0
 8012a34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012a42:	2300      	movs	r3, #0
 8012a44:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012a46:	2300      	movs	r3, #0
 8012a48:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d109      	bne.n	8012a64 <tcp_write+0x5c>
 8012a50:	4ba4      	ldr	r3, [pc, #656]	; (8012ce4 <tcp_write+0x2dc>)
 8012a52:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012a56:	49a4      	ldr	r1, [pc, #656]	; (8012ce8 <tcp_write+0x2e0>)
 8012a58:	48a4      	ldr	r0, [pc, #656]	; (8012cec <tcp_write+0x2e4>)
 8012a5a:	f005 fb5f 	bl	801811c <iprintf>
 8012a5e:	f06f 030f 	mvn.w	r3, #15
 8012a62:	e32a      	b.n	80130ba <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012a6a:	085b      	lsrs	r3, r3, #1
 8012a6c:	b29a      	uxth	r2, r3
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a72:	4293      	cmp	r3, r2
 8012a74:	bf28      	it	cs
 8012a76:	4613      	movcs	r3, r2
 8012a78:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012a7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d102      	bne.n	8012a86 <tcp_write+0x7e>
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a84:	e000      	b.n	8012a88 <tcp_write+0x80>
 8012a86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a88:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d109      	bne.n	8012aa4 <tcp_write+0x9c>
 8012a90:	4b94      	ldr	r3, [pc, #592]	; (8012ce4 <tcp_write+0x2dc>)
 8012a92:	f240 12ad 	movw	r2, #429	; 0x1ad
 8012a96:	4996      	ldr	r1, [pc, #600]	; (8012cf0 <tcp_write+0x2e8>)
 8012a98:	4894      	ldr	r0, [pc, #592]	; (8012cec <tcp_write+0x2e4>)
 8012a9a:	f005 fb3f 	bl	801811c <iprintf>
 8012a9e:	f06f 030f 	mvn.w	r3, #15
 8012aa2:	e30a      	b.n	80130ba <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012aa4:	88fb      	ldrh	r3, [r7, #6]
 8012aa6:	4619      	mov	r1, r3
 8012aa8:	68f8      	ldr	r0, [r7, #12]
 8012aaa:	f7ff ff33 	bl	8012914 <tcp_write_checks>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012ab4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d002      	beq.n	8012ac2 <tcp_write+0xba>
    return err;
 8012abc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012ac0:	e2fb      	b.n	80130ba <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ac8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012acc:	2300      	movs	r3, #0
 8012ace:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	f000 80f6 	beq.w	8012cc8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ae0:	653b      	str	r3, [r7, #80]	; 0x50
 8012ae2:	e002      	b.n	8012aea <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d1f8      	bne.n	8012ae4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012af4:	7a9b      	ldrb	r3, [r3, #10]
 8012af6:	009b      	lsls	r3, r3, #2
 8012af8:	b29b      	uxth	r3, r3
 8012afa:	f003 0304 	and.w	r3, r3, #4
 8012afe:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012b00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b04:	891b      	ldrh	r3, [r3, #8]
 8012b06:	4619      	mov	r1, r3
 8012b08:	8c3b      	ldrh	r3, [r7, #32]
 8012b0a:	440b      	add	r3, r1
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	da06      	bge.n	8012b1e <tcp_write+0x116>
 8012b10:	4b74      	ldr	r3, [pc, #464]	; (8012ce4 <tcp_write+0x2dc>)
 8012b12:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012b16:	4977      	ldr	r1, [pc, #476]	; (8012cf4 <tcp_write+0x2ec>)
 8012b18:	4874      	ldr	r0, [pc, #464]	; (8012cec <tcp_write+0x2e4>)
 8012b1a:	f005 faff 	bl	801811c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b20:	891a      	ldrh	r2, [r3, #8]
 8012b22:	8c3b      	ldrh	r3, [r7, #32]
 8012b24:	4413      	add	r3, r2
 8012b26:	b29b      	uxth	r3, r3
 8012b28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012b2a:	1ad3      	subs	r3, r2, r3
 8012b2c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012b34:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012b36:	8a7b      	ldrh	r3, [r7, #18]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d026      	beq.n	8012b8a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012b3c:	8a7b      	ldrh	r3, [r7, #18]
 8012b3e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b40:	429a      	cmp	r2, r3
 8012b42:	d206      	bcs.n	8012b52 <tcp_write+0x14a>
 8012b44:	4b67      	ldr	r3, [pc, #412]	; (8012ce4 <tcp_write+0x2dc>)
 8012b46:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012b4a:	496b      	ldr	r1, [pc, #428]	; (8012cf8 <tcp_write+0x2f0>)
 8012b4c:	4867      	ldr	r0, [pc, #412]	; (8012cec <tcp_write+0x2e4>)
 8012b4e:	f005 fae5 	bl	801811c <iprintf>
      seg = last_unsent;
 8012b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b54:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012b56:	8a7b      	ldrh	r3, [r7, #18]
 8012b58:	88fa      	ldrh	r2, [r7, #6]
 8012b5a:	4293      	cmp	r3, r2
 8012b5c:	bf28      	it	cs
 8012b5e:	4613      	movcs	r3, r2
 8012b60:	b29b      	uxth	r3, r3
 8012b62:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b64:	4293      	cmp	r3, r2
 8012b66:	bf28      	it	cs
 8012b68:	4613      	movcs	r3, r2
 8012b6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012b6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b72:	4413      	add	r3, r2
 8012b74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012b78:	8a7a      	ldrh	r2, [r7, #18]
 8012b7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b7c:	1ad3      	subs	r3, r2, r3
 8012b7e:	b29b      	uxth	r3, r3
 8012b80:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012b82:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b86:	1ad3      	subs	r3, r2, r3
 8012b88:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012b8a:	8a7b      	ldrh	r3, [r7, #18]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d00b      	beq.n	8012ba8 <tcp_write+0x1a0>
 8012b90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b94:	88fb      	ldrh	r3, [r7, #6]
 8012b96:	429a      	cmp	r2, r3
 8012b98:	d006      	beq.n	8012ba8 <tcp_write+0x1a0>
 8012b9a:	4b52      	ldr	r3, [pc, #328]	; (8012ce4 <tcp_write+0x2dc>)
 8012b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ba0:	4956      	ldr	r1, [pc, #344]	; (8012cfc <tcp_write+0x2f4>)
 8012ba2:	4852      	ldr	r0, [pc, #328]	; (8012cec <tcp_write+0x2e4>)
 8012ba4:	f005 faba 	bl	801811c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012ba8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012bac:	88fb      	ldrh	r3, [r7, #6]
 8012bae:	429a      	cmp	r2, r3
 8012bb0:	f080 8167 	bcs.w	8012e82 <tcp_write+0x47a>
 8012bb4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	f000 8163 	beq.w	8012e82 <tcp_write+0x47a>
 8012bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bbe:	891b      	ldrh	r3, [r3, #8]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	f000 815e 	beq.w	8012e82 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012bc6:	88fa      	ldrh	r2, [r7, #6]
 8012bc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012bcc:	1ad2      	subs	r2, r2, r3
 8012bce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012bd0:	4293      	cmp	r3, r2
 8012bd2:	bfa8      	it	ge
 8012bd4:	4613      	movge	r3, r2
 8012bd6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bda:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012bdc:	797b      	ldrb	r3, [r7, #5]
 8012bde:	f003 0301 	and.w	r3, r3, #1
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d027      	beq.n	8012c36 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012be6:	f107 0012 	add.w	r0, r7, #18
 8012bea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012bec:	8bf9      	ldrh	r1, [r7, #30]
 8012bee:	2301      	movs	r3, #1
 8012bf0:	9302      	str	r3, [sp, #8]
 8012bf2:	797b      	ldrb	r3, [r7, #5]
 8012bf4:	9301      	str	r3, [sp, #4]
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	9300      	str	r3, [sp, #0]
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	2000      	movs	r0, #0
 8012bfe:	f7ff fe0f 	bl	8012820 <tcp_pbuf_prealloc>
 8012c02:	6578      	str	r0, [r7, #84]	; 0x54
 8012c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	f000 8225 	beq.w	8013056 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c0e:	6858      	ldr	r0, [r3, #4]
 8012c10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c14:	68ba      	ldr	r2, [r7, #8]
 8012c16:	4413      	add	r3, r2
 8012c18:	8bfa      	ldrh	r2, [r7, #30]
 8012c1a:	4619      	mov	r1, r3
 8012c1c:	f005 fb71 	bl	8018302 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012c20:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012c22:	f7fb fa89 	bl	800e138 <pbuf_clen>
 8012c26:	4603      	mov	r3, r0
 8012c28:	461a      	mov	r2, r3
 8012c2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012c2e:	4413      	add	r3, r2
 8012c30:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012c34:	e041      	b.n	8012cba <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c38:	685b      	ldr	r3, [r3, #4]
 8012c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8012c3c:	e002      	b.n	8012c44 <tcp_write+0x23c>
 8012c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	637b      	str	r3, [r7, #52]	; 0x34
 8012c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d1f8      	bne.n	8012c3e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c4e:	7b1b      	ldrb	r3, [r3, #12]
 8012c50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d115      	bne.n	8012c84 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c5a:	685b      	ldr	r3, [r3, #4]
 8012c5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c5e:	8952      	ldrh	r2, [r2, #10]
 8012c60:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012c62:	68ba      	ldr	r2, [r7, #8]
 8012c64:	429a      	cmp	r2, r3
 8012c66:	d10d      	bne.n	8012c84 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012c68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d006      	beq.n	8012c7e <tcp_write+0x276>
 8012c70:	4b1c      	ldr	r3, [pc, #112]	; (8012ce4 <tcp_write+0x2dc>)
 8012c72:	f240 2231 	movw	r2, #561	; 0x231
 8012c76:	4922      	ldr	r1, [pc, #136]	; (8012d00 <tcp_write+0x2f8>)
 8012c78:	481c      	ldr	r0, [pc, #112]	; (8012cec <tcp_write+0x2e4>)
 8012c7a:	f005 fa4f 	bl	801811c <iprintf>
          extendlen = seglen;
 8012c7e:	8bfb      	ldrh	r3, [r7, #30]
 8012c80:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012c82:	e01a      	b.n	8012cba <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012c84:	8bfb      	ldrh	r3, [r7, #30]
 8012c86:	2201      	movs	r2, #1
 8012c88:	4619      	mov	r1, r3
 8012c8a:	2000      	movs	r0, #0
 8012c8c:	f7fa fee8 	bl	800da60 <pbuf_alloc>
 8012c90:	6578      	str	r0, [r7, #84]	; 0x54
 8012c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	f000 81e0 	beq.w	801305a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012c9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c9e:	68ba      	ldr	r2, [r7, #8]
 8012ca0:	441a      	add	r2, r3
 8012ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ca4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012ca6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012ca8:	f7fb fa46 	bl	800e138 <pbuf_clen>
 8012cac:	4603      	mov	r3, r0
 8012cae:	461a      	mov	r2, r3
 8012cb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012cb4:	4413      	add	r3, r2
 8012cb6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012cba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012cbe:	8bfb      	ldrh	r3, [r7, #30]
 8012cc0:	4413      	add	r3, r2
 8012cc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012cc6:	e0dc      	b.n	8012e82 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	f000 80d7 	beq.w	8012e82 <tcp_write+0x47a>
 8012cd4:	4b03      	ldr	r3, [pc, #12]	; (8012ce4 <tcp_write+0x2dc>)
 8012cd6:	f240 224a 	movw	r2, #586	; 0x24a
 8012cda:	490a      	ldr	r1, [pc, #40]	; (8012d04 <tcp_write+0x2fc>)
 8012cdc:	4803      	ldr	r0, [pc, #12]	; (8012cec <tcp_write+0x2e4>)
 8012cde:	f005 fa1d 	bl	801811c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012ce2:	e0ce      	b.n	8012e82 <tcp_write+0x47a>
 8012ce4:	0801a674 	.word	0x0801a674
 8012ce8:	0801a814 	.word	0x0801a814
 8012cec:	0801a6c8 	.word	0x0801a6c8
 8012cf0:	0801a82c 	.word	0x0801a82c
 8012cf4:	0801a860 	.word	0x0801a860
 8012cf8:	0801a878 	.word	0x0801a878
 8012cfc:	0801a898 	.word	0x0801a898
 8012d00:	0801a8b8 	.word	0x0801a8b8
 8012d04:	0801a8e4 	.word	0x0801a8e4
    struct pbuf *p;
    u16_t left = len - pos;
 8012d08:	88fa      	ldrh	r2, [r7, #6]
 8012d0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d0e:	1ad3      	subs	r3, r2, r3
 8012d10:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012d12:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012d16:	b29b      	uxth	r3, r3
 8012d18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012d1a:	1ad3      	subs	r3, r2, r3
 8012d1c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012d1e:	8b7a      	ldrh	r2, [r7, #26]
 8012d20:	8bbb      	ldrh	r3, [r7, #28]
 8012d22:	4293      	cmp	r3, r2
 8012d24:	bf28      	it	cs
 8012d26:	4613      	movcs	r3, r2
 8012d28:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012d2a:	797b      	ldrb	r3, [r7, #5]
 8012d2c:	f003 0301 	and.w	r3, r3, #1
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d036      	beq.n	8012da2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012d34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012d38:	b29a      	uxth	r2, r3
 8012d3a:	8b3b      	ldrh	r3, [r7, #24]
 8012d3c:	4413      	add	r3, r2
 8012d3e:	b299      	uxth	r1, r3
 8012d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	bf0c      	ite	eq
 8012d46:	2301      	moveq	r3, #1
 8012d48:	2300      	movne	r3, #0
 8012d4a:	b2db      	uxtb	r3, r3
 8012d4c:	f107 0012 	add.w	r0, r7, #18
 8012d50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012d52:	9302      	str	r3, [sp, #8]
 8012d54:	797b      	ldrb	r3, [r7, #5]
 8012d56:	9301      	str	r3, [sp, #4]
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	9300      	str	r3, [sp, #0]
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	2036      	movs	r0, #54	; 0x36
 8012d60:	f7ff fd5e 	bl	8012820 <tcp_pbuf_prealloc>
 8012d64:	6338      	str	r0, [r7, #48]	; 0x30
 8012d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	f000 8178 	beq.w	801305e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d70:	895b      	ldrh	r3, [r3, #10]
 8012d72:	8b3a      	ldrh	r2, [r7, #24]
 8012d74:	429a      	cmp	r2, r3
 8012d76:	d906      	bls.n	8012d86 <tcp_write+0x37e>
 8012d78:	4b8c      	ldr	r3, [pc, #560]	; (8012fac <tcp_write+0x5a4>)
 8012d7a:	f240 2266 	movw	r2, #614	; 0x266
 8012d7e:	498c      	ldr	r1, [pc, #560]	; (8012fb0 <tcp_write+0x5a8>)
 8012d80:	488c      	ldr	r0, [pc, #560]	; (8012fb4 <tcp_write+0x5ac>)
 8012d82:	f005 f9cb 	bl	801811c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d88:	685a      	ldr	r2, [r3, #4]
 8012d8a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012d8e:	18d0      	adds	r0, r2, r3
 8012d90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d94:	68ba      	ldr	r2, [r7, #8]
 8012d96:	4413      	add	r3, r2
 8012d98:	8b3a      	ldrh	r2, [r7, #24]
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	f005 fab1 	bl	8018302 <memcpy>
 8012da0:	e02f      	b.n	8012e02 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012da2:	8a7b      	ldrh	r3, [r7, #18]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d006      	beq.n	8012db6 <tcp_write+0x3ae>
 8012da8:	4b80      	ldr	r3, [pc, #512]	; (8012fac <tcp_write+0x5a4>)
 8012daa:	f240 2271 	movw	r2, #625	; 0x271
 8012dae:	4982      	ldr	r1, [pc, #520]	; (8012fb8 <tcp_write+0x5b0>)
 8012db0:	4880      	ldr	r0, [pc, #512]	; (8012fb4 <tcp_write+0x5ac>)
 8012db2:	f005 f9b3 	bl	801811c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012db6:	8b3b      	ldrh	r3, [r7, #24]
 8012db8:	2201      	movs	r2, #1
 8012dba:	4619      	mov	r1, r3
 8012dbc:	2036      	movs	r0, #54	; 0x36
 8012dbe:	f7fa fe4f 	bl	800da60 <pbuf_alloc>
 8012dc2:	6178      	str	r0, [r7, #20]
 8012dc4:	697b      	ldr	r3, [r7, #20]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	f000 814b 	beq.w	8013062 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012dcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012dd0:	68ba      	ldr	r2, [r7, #8]
 8012dd2:	441a      	add	r2, r3
 8012dd4:	697b      	ldr	r3, [r7, #20]
 8012dd6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012dd8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012ddc:	b29b      	uxth	r3, r3
 8012dde:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012de2:	4619      	mov	r1, r3
 8012de4:	2036      	movs	r0, #54	; 0x36
 8012de6:	f7fa fe3b 	bl	800da60 <pbuf_alloc>
 8012dea:	6338      	str	r0, [r7, #48]	; 0x30
 8012dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d103      	bne.n	8012dfa <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012df2:	6978      	ldr	r0, [r7, #20]
 8012df4:	f7fb f918 	bl	800e028 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012df8:	e136      	b.n	8013068 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012dfa:	6979      	ldr	r1, [r7, #20]
 8012dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012dfe:	f7fb f9d5 	bl	800e1ac <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012e02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e04:	f7fb f998 	bl	800e138 <pbuf_clen>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	461a      	mov	r2, r3
 8012e0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012e10:	4413      	add	r3, r2
 8012e12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012e16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012e1a:	2b10      	cmp	r3, #16
 8012e1c:	d903      	bls.n	8012e26 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012e1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e20:	f7fb f902 	bl	800e028 <pbuf_free>
      goto memerr;
 8012e24:	e120      	b.n	8013068 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012e2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012e2e:	441a      	add	r2, r3
 8012e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e34:	9300      	str	r3, [sp, #0]
 8012e36:	4613      	mov	r3, r2
 8012e38:	2200      	movs	r2, #0
 8012e3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012e3c:	68f8      	ldr	r0, [r7, #12]
 8012e3e:	f7ff fc51 	bl	80126e4 <tcp_create_segment>
 8012e42:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	f000 810d 	beq.w	8013066 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d102      	bne.n	8012e58 <tcp_write+0x450>
      queue = seg;
 8012e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e54:	647b      	str	r3, [r7, #68]	; 0x44
 8012e56:	e00c      	b.n	8012e72 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d106      	bne.n	8012e6c <tcp_write+0x464>
 8012e5e:	4b53      	ldr	r3, [pc, #332]	; (8012fac <tcp_write+0x5a4>)
 8012e60:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012e64:	4955      	ldr	r1, [pc, #340]	; (8012fbc <tcp_write+0x5b4>)
 8012e66:	4853      	ldr	r0, [pc, #332]	; (8012fb4 <tcp_write+0x5ac>)
 8012e68:	f005 f958 	bl	801811c <iprintf>
      prev_seg->next = seg;
 8012e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e70:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e74:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012e76:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e7a:	8b3b      	ldrh	r3, [r7, #24]
 8012e7c:	4413      	add	r3, r2
 8012e7e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012e82:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e86:	88fb      	ldrh	r3, [r7, #6]
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	f4ff af3d 	bcc.w	8012d08 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012e8e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d02c      	beq.n	8012eee <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e9a:	e01e      	b.n	8012eda <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e9e:	891a      	ldrh	r2, [r3, #8]
 8012ea0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ea2:	4413      	add	r3, r2
 8012ea4:	b29a      	uxth	r2, r3
 8012ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ea8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d110      	bne.n	8012ed4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eb4:	685b      	ldr	r3, [r3, #4]
 8012eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012eb8:	8952      	ldrh	r2, [r2, #10]
 8012eba:	4413      	add	r3, r2
 8012ebc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012ebe:	68b9      	ldr	r1, [r7, #8]
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f005 fa1e 	bl	8018302 <memcpy>
        p->len += oversize_used;
 8012ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec8:	895a      	ldrh	r2, [r3, #10]
 8012eca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ecc:	4413      	add	r3, r2
 8012ece:	b29a      	uxth	r2, r3
 8012ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ed2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d1dd      	bne.n	8012e9c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ee2:	891a      	ldrh	r2, [r3, #8]
 8012ee4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ee6:	4413      	add	r3, r2
 8012ee8:	b29a      	uxth	r2, r3
 8012eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eec:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012eee:	8a7a      	ldrh	r2, [r7, #18]
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d018      	beq.n	8012f2e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d106      	bne.n	8012f10 <tcp_write+0x508>
 8012f02:	4b2a      	ldr	r3, [pc, #168]	; (8012fac <tcp_write+0x5a4>)
 8012f04:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012f08:	492d      	ldr	r1, [pc, #180]	; (8012fc0 <tcp_write+0x5b8>)
 8012f0a:	482a      	ldr	r0, [pc, #168]	; (8012fb4 <tcp_write+0x5ac>)
 8012f0c:	f005 f906 	bl	801811c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f12:	685b      	ldr	r3, [r3, #4]
 8012f14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012f16:	4618      	mov	r0, r3
 8012f18:	f7fb f948 	bl	800e1ac <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f1e:	891a      	ldrh	r2, [r3, #8]
 8012f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f22:	891b      	ldrh	r3, [r3, #8]
 8012f24:	4413      	add	r3, r2
 8012f26:	b29a      	uxth	r2, r3
 8012f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f2a:	811a      	strh	r2, [r3, #8]
 8012f2c:	e037      	b.n	8012f9e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012f2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d034      	beq.n	8012f9e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d003      	beq.n	8012f42 <tcp_write+0x53a>
 8012f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f3c:	685b      	ldr	r3, [r3, #4]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d106      	bne.n	8012f50 <tcp_write+0x548>
 8012f42:	4b1a      	ldr	r3, [pc, #104]	; (8012fac <tcp_write+0x5a4>)
 8012f44:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012f48:	491e      	ldr	r1, [pc, #120]	; (8012fc4 <tcp_write+0x5bc>)
 8012f4a:	481a      	ldr	r0, [pc, #104]	; (8012fb4 <tcp_write+0x5ac>)
 8012f4c:	f005 f8e6 	bl	801811c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f56:	e009      	b.n	8012f6c <tcp_write+0x564>
      p->tot_len += extendlen;
 8012f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f5a:	891a      	ldrh	r2, [r3, #8]
 8012f5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f5e:	4413      	add	r3, r2
 8012f60:	b29a      	uxth	r2, r3
 8012f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f64:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d1f1      	bne.n	8012f58 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f76:	891a      	ldrh	r2, [r3, #8]
 8012f78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f7a:	4413      	add	r3, r2
 8012f7c:	b29a      	uxth	r2, r3
 8012f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f80:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f84:	895a      	ldrh	r2, [r3, #10]
 8012f86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f88:	4413      	add	r3, r2
 8012f8a:	b29a      	uxth	r2, r3
 8012f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f8e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f92:	891a      	ldrh	r2, [r3, #8]
 8012f94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f96:	4413      	add	r3, r2
 8012f98:	b29a      	uxth	r2, r3
 8012f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f9c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d111      	bne.n	8012fc8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012fa8:	66da      	str	r2, [r3, #108]	; 0x6c
 8012faa:	e010      	b.n	8012fce <tcp_write+0x5c6>
 8012fac:	0801a674 	.word	0x0801a674
 8012fb0:	0801a914 	.word	0x0801a914
 8012fb4:	0801a6c8 	.word	0x0801a6c8
 8012fb8:	0801a954 	.word	0x0801a954
 8012fbc:	0801a964 	.word	0x0801a964
 8012fc0:	0801a978 	.word	0x0801a978
 8012fc4:	0801a9b0 	.word	0x0801a9b0
  } else {
    last_unsent->next = queue;
 8012fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012fcc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012fd2:	88fb      	ldrh	r3, [r7, #6]
 8012fd4:	441a      	add	r2, r3
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012fe0:	88fb      	ldrh	r3, [r7, #6]
 8012fe2:	1ad3      	subs	r3, r2, r3
 8012fe4:	b29a      	uxth	r2, r3
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012ff2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d00e      	beq.n	801301e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013004:	2b00      	cmp	r3, #0
 8013006:	d10a      	bne.n	801301e <tcp_write+0x616>
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801300c:	2b00      	cmp	r3, #0
 801300e:	d106      	bne.n	801301e <tcp_write+0x616>
 8013010:	4b2c      	ldr	r3, [pc, #176]	; (80130c4 <tcp_write+0x6bc>)
 8013012:	f240 3212 	movw	r2, #786	; 0x312
 8013016:	492c      	ldr	r1, [pc, #176]	; (80130c8 <tcp_write+0x6c0>)
 8013018:	482c      	ldr	r0, [pc, #176]	; (80130cc <tcp_write+0x6c4>)
 801301a:	f005 f87f 	bl	801811c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801301e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013020:	2b00      	cmp	r3, #0
 8013022:	d016      	beq.n	8013052 <tcp_write+0x64a>
 8013024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013026:	68db      	ldr	r3, [r3, #12]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d012      	beq.n	8013052 <tcp_write+0x64a>
 801302c:	797b      	ldrb	r3, [r7, #5]
 801302e:	f003 0302 	and.w	r3, r3, #2
 8013032:	2b00      	cmp	r3, #0
 8013034:	d10d      	bne.n	8013052 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013038:	68db      	ldr	r3, [r3, #12]
 801303a:	899b      	ldrh	r3, [r3, #12]
 801303c:	b29c      	uxth	r4, r3
 801303e:	2008      	movs	r0, #8
 8013040:	f7f9 fc95 	bl	800c96e <lwip_htons>
 8013044:	4603      	mov	r3, r0
 8013046:	461a      	mov	r2, r3
 8013048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801304a:	68db      	ldr	r3, [r3, #12]
 801304c:	4322      	orrs	r2, r4
 801304e:	b292      	uxth	r2, r2
 8013050:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013052:	2300      	movs	r3, #0
 8013054:	e031      	b.n	80130ba <tcp_write+0x6b2>
          goto memerr;
 8013056:	bf00      	nop
 8013058:	e006      	b.n	8013068 <tcp_write+0x660>
            goto memerr;
 801305a:	bf00      	nop
 801305c:	e004      	b.n	8013068 <tcp_write+0x660>
        goto memerr;
 801305e:	bf00      	nop
 8013060:	e002      	b.n	8013068 <tcp_write+0x660>
        goto memerr;
 8013062:	bf00      	nop
 8013064:	e000      	b.n	8013068 <tcp_write+0x660>
      goto memerr;
 8013066:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	8b5b      	ldrh	r3, [r3, #26]
 801306c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013070:	b29a      	uxth	r2, r3
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013078:	2b00      	cmp	r3, #0
 801307a:	d002      	beq.n	8013082 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801307c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801307e:	f7fa ffd3 	bl	800e028 <pbuf_free>
  }
  if (queue != NULL) {
 8013082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013084:	2b00      	cmp	r3, #0
 8013086:	d002      	beq.n	801308e <tcp_write+0x686>
    tcp_segs_free(queue);
 8013088:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801308a:	f7fc fb89 	bl	800f7a0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013094:	2b00      	cmp	r3, #0
 8013096:	d00e      	beq.n	80130b6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801309c:	2b00      	cmp	r3, #0
 801309e:	d10a      	bne.n	80130b6 <tcp_write+0x6ae>
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d106      	bne.n	80130b6 <tcp_write+0x6ae>
 80130a8:	4b06      	ldr	r3, [pc, #24]	; (80130c4 <tcp_write+0x6bc>)
 80130aa:	f240 3227 	movw	r2, #807	; 0x327
 80130ae:	4906      	ldr	r1, [pc, #24]	; (80130c8 <tcp_write+0x6c0>)
 80130b0:	4806      	ldr	r0, [pc, #24]	; (80130cc <tcp_write+0x6c4>)
 80130b2:	f005 f833 	bl	801811c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80130b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80130ba:	4618      	mov	r0, r3
 80130bc:	375c      	adds	r7, #92	; 0x5c
 80130be:	46bd      	mov	sp, r7
 80130c0:	bd90      	pop	{r4, r7, pc}
 80130c2:	bf00      	nop
 80130c4:	0801a674 	.word	0x0801a674
 80130c8:	0801a9e8 	.word	0x0801a9e8
 80130cc:	0801a6c8 	.word	0x0801a6c8

080130d0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80130d0:	b590      	push	{r4, r7, lr}
 80130d2:	b08b      	sub	sp, #44	; 0x2c
 80130d4:	af02      	add	r7, sp, #8
 80130d6:	6078      	str	r0, [r7, #4]
 80130d8:	460b      	mov	r3, r1
 80130da:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80130dc:	2300      	movs	r3, #0
 80130de:	61fb      	str	r3, [r7, #28]
 80130e0:	2300      	movs	r3, #0
 80130e2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80130e4:	2300      	movs	r3, #0
 80130e6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d106      	bne.n	80130fc <tcp_split_unsent_seg+0x2c>
 80130ee:	4b95      	ldr	r3, [pc, #596]	; (8013344 <tcp_split_unsent_seg+0x274>)
 80130f0:	f240 324b 	movw	r2, #843	; 0x34b
 80130f4:	4994      	ldr	r1, [pc, #592]	; (8013348 <tcp_split_unsent_seg+0x278>)
 80130f6:	4895      	ldr	r0, [pc, #596]	; (801334c <tcp_split_unsent_seg+0x27c>)
 80130f8:	f005 f810 	bl	801811c <iprintf>

  useg = pcb->unsent;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013100:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d102      	bne.n	801310e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013108:	f04f 33ff 	mov.w	r3, #4294967295
 801310c:	e116      	b.n	801333c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801310e:	887b      	ldrh	r3, [r7, #2]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d109      	bne.n	8013128 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013114:	4b8b      	ldr	r3, [pc, #556]	; (8013344 <tcp_split_unsent_seg+0x274>)
 8013116:	f240 3253 	movw	r2, #851	; 0x353
 801311a:	498d      	ldr	r1, [pc, #564]	; (8013350 <tcp_split_unsent_seg+0x280>)
 801311c:	488b      	ldr	r0, [pc, #556]	; (801334c <tcp_split_unsent_seg+0x27c>)
 801311e:	f004 fffd 	bl	801811c <iprintf>
    return ERR_VAL;
 8013122:	f06f 0305 	mvn.w	r3, #5
 8013126:	e109      	b.n	801333c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	891b      	ldrh	r3, [r3, #8]
 801312c:	887a      	ldrh	r2, [r7, #2]
 801312e:	429a      	cmp	r2, r3
 8013130:	d301      	bcc.n	8013136 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013132:	2300      	movs	r3, #0
 8013134:	e102      	b.n	801333c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801313a:	887a      	ldrh	r2, [r7, #2]
 801313c:	429a      	cmp	r2, r3
 801313e:	d906      	bls.n	801314e <tcp_split_unsent_seg+0x7e>
 8013140:	4b80      	ldr	r3, [pc, #512]	; (8013344 <tcp_split_unsent_seg+0x274>)
 8013142:	f240 325b 	movw	r2, #859	; 0x35b
 8013146:	4983      	ldr	r1, [pc, #524]	; (8013354 <tcp_split_unsent_seg+0x284>)
 8013148:	4880      	ldr	r0, [pc, #512]	; (801334c <tcp_split_unsent_seg+0x27c>)
 801314a:	f004 ffe7 	bl	801811c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801314e:	697b      	ldr	r3, [r7, #20]
 8013150:	891b      	ldrh	r3, [r3, #8]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d106      	bne.n	8013164 <tcp_split_unsent_seg+0x94>
 8013156:	4b7b      	ldr	r3, [pc, #492]	; (8013344 <tcp_split_unsent_seg+0x274>)
 8013158:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801315c:	497e      	ldr	r1, [pc, #504]	; (8013358 <tcp_split_unsent_seg+0x288>)
 801315e:	487b      	ldr	r0, [pc, #492]	; (801334c <tcp_split_unsent_seg+0x27c>)
 8013160:	f004 ffdc 	bl	801811c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013164:	697b      	ldr	r3, [r7, #20]
 8013166:	7a9b      	ldrb	r3, [r3, #10]
 8013168:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801316a:	7bfb      	ldrb	r3, [r7, #15]
 801316c:	009b      	lsls	r3, r3, #2
 801316e:	b2db      	uxtb	r3, r3
 8013170:	f003 0304 	and.w	r3, r3, #4
 8013174:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013176:	697b      	ldr	r3, [r7, #20]
 8013178:	891a      	ldrh	r2, [r3, #8]
 801317a:	887b      	ldrh	r3, [r7, #2]
 801317c:	1ad3      	subs	r3, r2, r3
 801317e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013180:	7bbb      	ldrb	r3, [r7, #14]
 8013182:	b29a      	uxth	r2, r3
 8013184:	89bb      	ldrh	r3, [r7, #12]
 8013186:	4413      	add	r3, r2
 8013188:	b29b      	uxth	r3, r3
 801318a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801318e:	4619      	mov	r1, r3
 8013190:	2036      	movs	r0, #54	; 0x36
 8013192:	f7fa fc65 	bl	800da60 <pbuf_alloc>
 8013196:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013198:	693b      	ldr	r3, [r7, #16]
 801319a:	2b00      	cmp	r3, #0
 801319c:	f000 80b7 	beq.w	801330e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	685b      	ldr	r3, [r3, #4]
 80131a4:	891a      	ldrh	r2, [r3, #8]
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	891b      	ldrh	r3, [r3, #8]
 80131aa:	1ad3      	subs	r3, r2, r3
 80131ac:	b29a      	uxth	r2, r3
 80131ae:	887b      	ldrh	r3, [r7, #2]
 80131b0:	4413      	add	r3, r2
 80131b2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80131b4:	697b      	ldr	r3, [r7, #20]
 80131b6:	6858      	ldr	r0, [r3, #4]
 80131b8:	693b      	ldr	r3, [r7, #16]
 80131ba:	685a      	ldr	r2, [r3, #4]
 80131bc:	7bbb      	ldrb	r3, [r7, #14]
 80131be:	18d1      	adds	r1, r2, r3
 80131c0:	897b      	ldrh	r3, [r7, #10]
 80131c2:	89ba      	ldrh	r2, [r7, #12]
 80131c4:	f7fb f91a 	bl	800e3fc <pbuf_copy_partial>
 80131c8:	4603      	mov	r3, r0
 80131ca:	461a      	mov	r2, r3
 80131cc:	89bb      	ldrh	r3, [r7, #12]
 80131ce:	4293      	cmp	r3, r2
 80131d0:	f040 809f 	bne.w	8013312 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	68db      	ldr	r3, [r3, #12]
 80131d8:	899b      	ldrh	r3, [r3, #12]
 80131da:	b29b      	uxth	r3, r3
 80131dc:	4618      	mov	r0, r3
 80131de:	f7f9 fbc6 	bl	800c96e <lwip_htons>
 80131e2:	4603      	mov	r3, r0
 80131e4:	b2db      	uxtb	r3, r3
 80131e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80131ea:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80131ec:	2300      	movs	r3, #0
 80131ee:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80131f0:	7efb      	ldrb	r3, [r7, #27]
 80131f2:	f003 0308 	and.w	r3, r3, #8
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d007      	beq.n	801320a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80131fa:	7efb      	ldrb	r3, [r7, #27]
 80131fc:	f023 0308 	bic.w	r3, r3, #8
 8013200:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013202:	7ebb      	ldrb	r3, [r7, #26]
 8013204:	f043 0308 	orr.w	r3, r3, #8
 8013208:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801320a:	7efb      	ldrb	r3, [r7, #27]
 801320c:	f003 0301 	and.w	r3, r3, #1
 8013210:	2b00      	cmp	r3, #0
 8013212:	d007      	beq.n	8013224 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013214:	7efb      	ldrb	r3, [r7, #27]
 8013216:	f023 0301 	bic.w	r3, r3, #1
 801321a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801321c:	7ebb      	ldrb	r3, [r7, #26]
 801321e:	f043 0301 	orr.w	r3, r3, #1
 8013222:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013224:	697b      	ldr	r3, [r7, #20]
 8013226:	68db      	ldr	r3, [r3, #12]
 8013228:	685b      	ldr	r3, [r3, #4]
 801322a:	4618      	mov	r0, r3
 801322c:	f7f9 fbb4 	bl	800c998 <lwip_htonl>
 8013230:	4602      	mov	r2, r0
 8013232:	887b      	ldrh	r3, [r7, #2]
 8013234:	18d1      	adds	r1, r2, r3
 8013236:	7eba      	ldrb	r2, [r7, #26]
 8013238:	7bfb      	ldrb	r3, [r7, #15]
 801323a:	9300      	str	r3, [sp, #0]
 801323c:	460b      	mov	r3, r1
 801323e:	6939      	ldr	r1, [r7, #16]
 8013240:	6878      	ldr	r0, [r7, #4]
 8013242:	f7ff fa4f 	bl	80126e4 <tcp_create_segment>
 8013246:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013248:	69fb      	ldr	r3, [r7, #28]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d063      	beq.n	8013316 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	685b      	ldr	r3, [r3, #4]
 8013252:	4618      	mov	r0, r3
 8013254:	f7fa ff70 	bl	800e138 <pbuf_clen>
 8013258:	4603      	mov	r3, r0
 801325a:	461a      	mov	r2, r3
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013262:	1a9b      	subs	r3, r3, r2
 8013264:	b29a      	uxth	r2, r3
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801326c:	697b      	ldr	r3, [r7, #20]
 801326e:	6858      	ldr	r0, [r3, #4]
 8013270:	697b      	ldr	r3, [r7, #20]
 8013272:	685b      	ldr	r3, [r3, #4]
 8013274:	891a      	ldrh	r2, [r3, #8]
 8013276:	89bb      	ldrh	r3, [r7, #12]
 8013278:	1ad3      	subs	r3, r2, r3
 801327a:	b29b      	uxth	r3, r3
 801327c:	4619      	mov	r1, r3
 801327e:	f7fa fd4d 	bl	800dd1c <pbuf_realloc>
  useg->len -= remainder;
 8013282:	697b      	ldr	r3, [r7, #20]
 8013284:	891a      	ldrh	r2, [r3, #8]
 8013286:	89bb      	ldrh	r3, [r7, #12]
 8013288:	1ad3      	subs	r3, r2, r3
 801328a:	b29a      	uxth	r2, r3
 801328c:	697b      	ldr	r3, [r7, #20]
 801328e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	68db      	ldr	r3, [r3, #12]
 8013294:	899b      	ldrh	r3, [r3, #12]
 8013296:	b29c      	uxth	r4, r3
 8013298:	7efb      	ldrb	r3, [r7, #27]
 801329a:	b29b      	uxth	r3, r3
 801329c:	4618      	mov	r0, r3
 801329e:	f7f9 fb66 	bl	800c96e <lwip_htons>
 80132a2:	4603      	mov	r3, r0
 80132a4:	461a      	mov	r2, r3
 80132a6:	697b      	ldr	r3, [r7, #20]
 80132a8:	68db      	ldr	r3, [r3, #12]
 80132aa:	4322      	orrs	r2, r4
 80132ac:	b292      	uxth	r2, r2
 80132ae:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	685b      	ldr	r3, [r3, #4]
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7fa ff3f 	bl	800e138 <pbuf_clen>
 80132ba:	4603      	mov	r3, r0
 80132bc:	461a      	mov	r2, r3
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80132c4:	4413      	add	r3, r2
 80132c6:	b29a      	uxth	r2, r3
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80132ce:	69fb      	ldr	r3, [r7, #28]
 80132d0:	685b      	ldr	r3, [r3, #4]
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7fa ff30 	bl	800e138 <pbuf_clen>
 80132d8:	4603      	mov	r3, r0
 80132da:	461a      	mov	r2, r3
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80132e2:	4413      	add	r3, r2
 80132e4:	b29a      	uxth	r2, r3
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80132ec:	697b      	ldr	r3, [r7, #20]
 80132ee:	681a      	ldr	r2, [r3, #0]
 80132f0:	69fb      	ldr	r3, [r7, #28]
 80132f2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	69fa      	ldr	r2, [r7, #28]
 80132f8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80132fa:	69fb      	ldr	r3, [r7, #28]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d103      	bne.n	801330a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2200      	movs	r2, #0
 8013306:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801330a:	2300      	movs	r3, #0
 801330c:	e016      	b.n	801333c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801330e:	bf00      	nop
 8013310:	e002      	b.n	8013318 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013312:	bf00      	nop
 8013314:	e000      	b.n	8013318 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013316:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013318:	69fb      	ldr	r3, [r7, #28]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d006      	beq.n	801332c <tcp_split_unsent_seg+0x25c>
 801331e:	4b09      	ldr	r3, [pc, #36]	; (8013344 <tcp_split_unsent_seg+0x274>)
 8013320:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013324:	490d      	ldr	r1, [pc, #52]	; (801335c <tcp_split_unsent_seg+0x28c>)
 8013326:	4809      	ldr	r0, [pc, #36]	; (801334c <tcp_split_unsent_seg+0x27c>)
 8013328:	f004 fef8 	bl	801811c <iprintf>
  if (p != NULL) {
 801332c:	693b      	ldr	r3, [r7, #16]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d002      	beq.n	8013338 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013332:	6938      	ldr	r0, [r7, #16]
 8013334:	f7fa fe78 	bl	800e028 <pbuf_free>
  }

  return ERR_MEM;
 8013338:	f04f 33ff 	mov.w	r3, #4294967295
}
 801333c:	4618      	mov	r0, r3
 801333e:	3724      	adds	r7, #36	; 0x24
 8013340:	46bd      	mov	sp, r7
 8013342:	bd90      	pop	{r4, r7, pc}
 8013344:	0801a674 	.word	0x0801a674
 8013348:	0801aa08 	.word	0x0801aa08
 801334c:	0801a6c8 	.word	0x0801a6c8
 8013350:	0801aa2c 	.word	0x0801aa2c
 8013354:	0801aa50 	.word	0x0801aa50
 8013358:	0801aa60 	.word	0x0801aa60
 801335c:	0801aa70 	.word	0x0801aa70

08013360 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013360:	b590      	push	{r4, r7, lr}
 8013362:	b085      	sub	sp, #20
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d106      	bne.n	801337c <tcp_send_fin+0x1c>
 801336e:	4b21      	ldr	r3, [pc, #132]	; (80133f4 <tcp_send_fin+0x94>)
 8013370:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013374:	4920      	ldr	r1, [pc, #128]	; (80133f8 <tcp_send_fin+0x98>)
 8013376:	4821      	ldr	r0, [pc, #132]	; (80133fc <tcp_send_fin+0x9c>)
 8013378:	f004 fed0 	bl	801811c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013380:	2b00      	cmp	r3, #0
 8013382:	d02e      	beq.n	80133e2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013388:	60fb      	str	r3, [r7, #12]
 801338a:	e002      	b.n	8013392 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d1f8      	bne.n	801338c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	68db      	ldr	r3, [r3, #12]
 801339e:	899b      	ldrh	r3, [r3, #12]
 80133a0:	b29b      	uxth	r3, r3
 80133a2:	4618      	mov	r0, r3
 80133a4:	f7f9 fae3 	bl	800c96e <lwip_htons>
 80133a8:	4603      	mov	r3, r0
 80133aa:	b2db      	uxtb	r3, r3
 80133ac:	f003 0307 	and.w	r3, r3, #7
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d116      	bne.n	80133e2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	68db      	ldr	r3, [r3, #12]
 80133b8:	899b      	ldrh	r3, [r3, #12]
 80133ba:	b29c      	uxth	r4, r3
 80133bc:	2001      	movs	r0, #1
 80133be:	f7f9 fad6 	bl	800c96e <lwip_htons>
 80133c2:	4603      	mov	r3, r0
 80133c4:	461a      	mov	r2, r3
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	68db      	ldr	r3, [r3, #12]
 80133ca:	4322      	orrs	r2, r4
 80133cc:	b292      	uxth	r2, r2
 80133ce:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	8b5b      	ldrh	r3, [r3, #26]
 80133d4:	f043 0320 	orr.w	r3, r3, #32
 80133d8:	b29a      	uxth	r2, r3
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80133de:	2300      	movs	r3, #0
 80133e0:	e004      	b.n	80133ec <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80133e2:	2101      	movs	r1, #1
 80133e4:	6878      	ldr	r0, [r7, #4]
 80133e6:	f000 f80b 	bl	8013400 <tcp_enqueue_flags>
 80133ea:	4603      	mov	r3, r0
}
 80133ec:	4618      	mov	r0, r3
 80133ee:	3714      	adds	r7, #20
 80133f0:	46bd      	mov	sp, r7
 80133f2:	bd90      	pop	{r4, r7, pc}
 80133f4:	0801a674 	.word	0x0801a674
 80133f8:	0801aa7c 	.word	0x0801aa7c
 80133fc:	0801a6c8 	.word	0x0801a6c8

08013400 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013400:	b580      	push	{r7, lr}
 8013402:	b08a      	sub	sp, #40	; 0x28
 8013404:	af02      	add	r7, sp, #8
 8013406:	6078      	str	r0, [r7, #4]
 8013408:	460b      	mov	r3, r1
 801340a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801340c:	2300      	movs	r3, #0
 801340e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013410:	2300      	movs	r3, #0
 8013412:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013414:	78fb      	ldrb	r3, [r7, #3]
 8013416:	f003 0303 	and.w	r3, r3, #3
 801341a:	2b00      	cmp	r3, #0
 801341c:	d106      	bne.n	801342c <tcp_enqueue_flags+0x2c>
 801341e:	4b67      	ldr	r3, [pc, #412]	; (80135bc <tcp_enqueue_flags+0x1bc>)
 8013420:	f240 4211 	movw	r2, #1041	; 0x411
 8013424:	4966      	ldr	r1, [pc, #408]	; (80135c0 <tcp_enqueue_flags+0x1c0>)
 8013426:	4867      	ldr	r0, [pc, #412]	; (80135c4 <tcp_enqueue_flags+0x1c4>)
 8013428:	f004 fe78 	bl	801811c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d106      	bne.n	8013440 <tcp_enqueue_flags+0x40>
 8013432:	4b62      	ldr	r3, [pc, #392]	; (80135bc <tcp_enqueue_flags+0x1bc>)
 8013434:	f240 4213 	movw	r2, #1043	; 0x413
 8013438:	4963      	ldr	r1, [pc, #396]	; (80135c8 <tcp_enqueue_flags+0x1c8>)
 801343a:	4862      	ldr	r0, [pc, #392]	; (80135c4 <tcp_enqueue_flags+0x1c4>)
 801343c:	f004 fe6e 	bl	801811c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013440:	78fb      	ldrb	r3, [r7, #3]
 8013442:	f003 0302 	and.w	r3, r3, #2
 8013446:	2b00      	cmp	r3, #0
 8013448:	d001      	beq.n	801344e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801344a:	2301      	movs	r3, #1
 801344c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801344e:	7ffb      	ldrb	r3, [r7, #31]
 8013450:	009b      	lsls	r3, r3, #2
 8013452:	b2db      	uxtb	r3, r3
 8013454:	f003 0304 	and.w	r3, r3, #4
 8013458:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801345a:	7dfb      	ldrb	r3, [r7, #23]
 801345c:	b29b      	uxth	r3, r3
 801345e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013462:	4619      	mov	r1, r3
 8013464:	2036      	movs	r0, #54	; 0x36
 8013466:	f7fa fafb 	bl	800da60 <pbuf_alloc>
 801346a:	6138      	str	r0, [r7, #16]
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d109      	bne.n	8013486 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	8b5b      	ldrh	r3, [r3, #26]
 8013476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801347a:	b29a      	uxth	r2, r3
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013480:	f04f 33ff 	mov.w	r3, #4294967295
 8013484:	e095      	b.n	80135b2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	895a      	ldrh	r2, [r3, #10]
 801348a:	7dfb      	ldrb	r3, [r7, #23]
 801348c:	b29b      	uxth	r3, r3
 801348e:	429a      	cmp	r2, r3
 8013490:	d206      	bcs.n	80134a0 <tcp_enqueue_flags+0xa0>
 8013492:	4b4a      	ldr	r3, [pc, #296]	; (80135bc <tcp_enqueue_flags+0x1bc>)
 8013494:	f240 4239 	movw	r2, #1081	; 0x439
 8013498:	494c      	ldr	r1, [pc, #304]	; (80135cc <tcp_enqueue_flags+0x1cc>)
 801349a:	484a      	ldr	r0, [pc, #296]	; (80135c4 <tcp_enqueue_flags+0x1c4>)
 801349c:	f004 fe3e 	bl	801811c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80134a4:	78fa      	ldrb	r2, [r7, #3]
 80134a6:	7ffb      	ldrb	r3, [r7, #31]
 80134a8:	9300      	str	r3, [sp, #0]
 80134aa:	460b      	mov	r3, r1
 80134ac:	6939      	ldr	r1, [r7, #16]
 80134ae:	6878      	ldr	r0, [r7, #4]
 80134b0:	f7ff f918 	bl	80126e4 <tcp_create_segment>
 80134b4:	60f8      	str	r0, [r7, #12]
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d109      	bne.n	80134d0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	8b5b      	ldrh	r3, [r3, #26]
 80134c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134c4:	b29a      	uxth	r2, r3
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80134ca:	f04f 33ff 	mov.w	r3, #4294967295
 80134ce:	e070      	b.n	80135b2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	68db      	ldr	r3, [r3, #12]
 80134d4:	f003 0303 	and.w	r3, r3, #3
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d006      	beq.n	80134ea <tcp_enqueue_flags+0xea>
 80134dc:	4b37      	ldr	r3, [pc, #220]	; (80135bc <tcp_enqueue_flags+0x1bc>)
 80134de:	f240 4242 	movw	r2, #1090	; 0x442
 80134e2:	493b      	ldr	r1, [pc, #236]	; (80135d0 <tcp_enqueue_flags+0x1d0>)
 80134e4:	4837      	ldr	r0, [pc, #220]	; (80135c4 <tcp_enqueue_flags+0x1c4>)
 80134e6:	f004 fe19 	bl	801811c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	891b      	ldrh	r3, [r3, #8]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d006      	beq.n	8013500 <tcp_enqueue_flags+0x100>
 80134f2:	4b32      	ldr	r3, [pc, #200]	; (80135bc <tcp_enqueue_flags+0x1bc>)
 80134f4:	f240 4243 	movw	r2, #1091	; 0x443
 80134f8:	4936      	ldr	r1, [pc, #216]	; (80135d4 <tcp_enqueue_flags+0x1d4>)
 80134fa:	4832      	ldr	r0, [pc, #200]	; (80135c4 <tcp_enqueue_flags+0x1c4>)
 80134fc:	f004 fe0e 	bl	801811c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013504:	2b00      	cmp	r3, #0
 8013506:	d103      	bne.n	8013510 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	68fa      	ldr	r2, [r7, #12]
 801350c:	66da      	str	r2, [r3, #108]	; 0x6c
 801350e:	e00d      	b.n	801352c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013514:	61bb      	str	r3, [r7, #24]
 8013516:	e002      	b.n	801351e <tcp_enqueue_flags+0x11e>
 8013518:	69bb      	ldr	r3, [r7, #24]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	61bb      	str	r3, [r7, #24]
 801351e:	69bb      	ldr	r3, [r7, #24]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d1f8      	bne.n	8013518 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013526:	69bb      	ldr	r3, [r7, #24]
 8013528:	68fa      	ldr	r2, [r7, #12]
 801352a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	2200      	movs	r2, #0
 8013530:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013534:	78fb      	ldrb	r3, [r7, #3]
 8013536:	f003 0302 	and.w	r3, r3, #2
 801353a:	2b00      	cmp	r3, #0
 801353c:	d104      	bne.n	8013548 <tcp_enqueue_flags+0x148>
 801353e:	78fb      	ldrb	r3, [r7, #3]
 8013540:	f003 0301 	and.w	r3, r3, #1
 8013544:	2b00      	cmp	r3, #0
 8013546:	d004      	beq.n	8013552 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801354c:	1c5a      	adds	r2, r3, #1
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013552:	78fb      	ldrb	r3, [r7, #3]
 8013554:	f003 0301 	and.w	r3, r3, #1
 8013558:	2b00      	cmp	r3, #0
 801355a:	d006      	beq.n	801356a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	8b5b      	ldrh	r3, [r3, #26]
 8013560:	f043 0320 	orr.w	r3, r3, #32
 8013564:	b29a      	uxth	r2, r3
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	685b      	ldr	r3, [r3, #4]
 801356e:	4618      	mov	r0, r3
 8013570:	f7fa fde2 	bl	800e138 <pbuf_clen>
 8013574:	4603      	mov	r3, r0
 8013576:	461a      	mov	r2, r3
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801357e:	4413      	add	r3, r2
 8013580:	b29a      	uxth	r2, r3
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801358e:	2b00      	cmp	r3, #0
 8013590:	d00e      	beq.n	80135b0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013596:	2b00      	cmp	r3, #0
 8013598:	d10a      	bne.n	80135b0 <tcp_enqueue_flags+0x1b0>
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d106      	bne.n	80135b0 <tcp_enqueue_flags+0x1b0>
 80135a2:	4b06      	ldr	r3, [pc, #24]	; (80135bc <tcp_enqueue_flags+0x1bc>)
 80135a4:	f240 4265 	movw	r2, #1125	; 0x465
 80135a8:	490b      	ldr	r1, [pc, #44]	; (80135d8 <tcp_enqueue_flags+0x1d8>)
 80135aa:	4806      	ldr	r0, [pc, #24]	; (80135c4 <tcp_enqueue_flags+0x1c4>)
 80135ac:	f004 fdb6 	bl	801811c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80135b0:	2300      	movs	r3, #0
}
 80135b2:	4618      	mov	r0, r3
 80135b4:	3720      	adds	r7, #32
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}
 80135ba:	bf00      	nop
 80135bc:	0801a674 	.word	0x0801a674
 80135c0:	0801aa98 	.word	0x0801aa98
 80135c4:	0801a6c8 	.word	0x0801a6c8
 80135c8:	0801aaf0 	.word	0x0801aaf0
 80135cc:	0801ab10 	.word	0x0801ab10
 80135d0:	0801ab4c 	.word	0x0801ab4c
 80135d4:	0801ab64 	.word	0x0801ab64
 80135d8:	0801ab90 	.word	0x0801ab90

080135dc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80135dc:	b5b0      	push	{r4, r5, r7, lr}
 80135de:	b08a      	sub	sp, #40	; 0x28
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d106      	bne.n	80135f8 <tcp_output+0x1c>
 80135ea:	4b8a      	ldr	r3, [pc, #552]	; (8013814 <tcp_output+0x238>)
 80135ec:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80135f0:	4989      	ldr	r1, [pc, #548]	; (8013818 <tcp_output+0x23c>)
 80135f2:	488a      	ldr	r0, [pc, #552]	; (801381c <tcp_output+0x240>)
 80135f4:	f004 fd92 	bl	801811c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	7d1b      	ldrb	r3, [r3, #20]
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d106      	bne.n	801360e <tcp_output+0x32>
 8013600:	4b84      	ldr	r3, [pc, #528]	; (8013814 <tcp_output+0x238>)
 8013602:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013606:	4986      	ldr	r1, [pc, #536]	; (8013820 <tcp_output+0x244>)
 8013608:	4884      	ldr	r0, [pc, #528]	; (801381c <tcp_output+0x240>)
 801360a:	f004 fd87 	bl	801811c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801360e:	4b85      	ldr	r3, [pc, #532]	; (8013824 <tcp_output+0x248>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	687a      	ldr	r2, [r7, #4]
 8013614:	429a      	cmp	r2, r3
 8013616:	d101      	bne.n	801361c <tcp_output+0x40>
    return ERR_OK;
 8013618:	2300      	movs	r3, #0
 801361a:	e1ce      	b.n	80139ba <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013628:	4293      	cmp	r3, r2
 801362a:	bf28      	it	cs
 801362c:	4613      	movcs	r3, r2
 801362e:	b29b      	uxth	r3, r3
 8013630:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013636:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801363a:	2b00      	cmp	r3, #0
 801363c:	d10b      	bne.n	8013656 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	8b5b      	ldrh	r3, [r3, #26]
 8013642:	f003 0302 	and.w	r3, r3, #2
 8013646:	2b00      	cmp	r3, #0
 8013648:	f000 81aa 	beq.w	80139a0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f000 fdc9 	bl	80141e4 <tcp_send_empty_ack>
 8013652:	4603      	mov	r3, r0
 8013654:	e1b1      	b.n	80139ba <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013656:	6879      	ldr	r1, [r7, #4]
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	3304      	adds	r3, #4
 801365c:	461a      	mov	r2, r3
 801365e:	6878      	ldr	r0, [r7, #4]
 8013660:	f7ff f824 	bl	80126ac <tcp_route>
 8013664:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013666:	697b      	ldr	r3, [r7, #20]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d102      	bne.n	8013672 <tcp_output+0x96>
    return ERR_RTE;
 801366c:	f06f 0303 	mvn.w	r3, #3
 8013670:	e1a3      	b.n	80139ba <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d003      	beq.n	8013680 <tcp_output+0xa4>
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d111      	bne.n	80136a4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013680:	697b      	ldr	r3, [r7, #20]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d002      	beq.n	801368c <tcp_output+0xb0>
 8013686:	697b      	ldr	r3, [r7, #20]
 8013688:	3304      	adds	r3, #4
 801368a:	e000      	b.n	801368e <tcp_output+0xb2>
 801368c:	2300      	movs	r3, #0
 801368e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013690:	693b      	ldr	r3, [r7, #16]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d102      	bne.n	801369c <tcp_output+0xc0>
      return ERR_RTE;
 8013696:	f06f 0303 	mvn.w	r3, #3
 801369a:	e18e      	b.n	80139ba <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801369c:	693b      	ldr	r3, [r7, #16]
 801369e:	681a      	ldr	r2, [r3, #0]
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80136a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a6:	68db      	ldr	r3, [r3, #12]
 80136a8:	685b      	ldr	r3, [r3, #4]
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7f9 f974 	bl	800c998 <lwip_htonl>
 80136b0:	4602      	mov	r2, r0
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80136b6:	1ad3      	subs	r3, r2, r3
 80136b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136ba:	8912      	ldrh	r2, [r2, #8]
 80136bc:	4413      	add	r3, r2
 80136be:	69ba      	ldr	r2, [r7, #24]
 80136c0:	429a      	cmp	r2, r3
 80136c2:	d227      	bcs.n	8013714 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80136ca:	461a      	mov	r2, r3
 80136cc:	69bb      	ldr	r3, [r7, #24]
 80136ce:	4293      	cmp	r3, r2
 80136d0:	d114      	bne.n	80136fc <tcp_output+0x120>
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d110      	bne.n	80136fc <tcp_output+0x120>
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d10b      	bne.n	80136fc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	2200      	movs	r2, #0
 80136e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	2201      	movs	r2, #1
 80136f0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2200      	movs	r2, #0
 80136f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	8b5b      	ldrh	r3, [r3, #26]
 8013700:	f003 0302 	and.w	r3, r3, #2
 8013704:	2b00      	cmp	r3, #0
 8013706:	f000 814d 	beq.w	80139a4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801370a:	6878      	ldr	r0, [r7, #4]
 801370c:	f000 fd6a 	bl	80141e4 <tcp_send_empty_ack>
 8013710:	4603      	mov	r3, r0
 8013712:	e152      	b.n	80139ba <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	2200      	movs	r2, #0
 8013718:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013720:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013722:	6a3b      	ldr	r3, [r7, #32]
 8013724:	2b00      	cmp	r3, #0
 8013726:	f000 811c 	beq.w	8013962 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801372a:	e002      	b.n	8013732 <tcp_output+0x156>
 801372c:	6a3b      	ldr	r3, [r7, #32]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	623b      	str	r3, [r7, #32]
 8013732:	6a3b      	ldr	r3, [r7, #32]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d1f8      	bne.n	801372c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801373a:	e112      	b.n	8013962 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801373e:	68db      	ldr	r3, [r3, #12]
 8013740:	899b      	ldrh	r3, [r3, #12]
 8013742:	b29b      	uxth	r3, r3
 8013744:	4618      	mov	r0, r3
 8013746:	f7f9 f912 	bl	800c96e <lwip_htons>
 801374a:	4603      	mov	r3, r0
 801374c:	b2db      	uxtb	r3, r3
 801374e:	f003 0304 	and.w	r3, r3, #4
 8013752:	2b00      	cmp	r3, #0
 8013754:	d006      	beq.n	8013764 <tcp_output+0x188>
 8013756:	4b2f      	ldr	r3, [pc, #188]	; (8013814 <tcp_output+0x238>)
 8013758:	f240 5236 	movw	r2, #1334	; 0x536
 801375c:	4932      	ldr	r1, [pc, #200]	; (8013828 <tcp_output+0x24c>)
 801375e:	482f      	ldr	r0, [pc, #188]	; (801381c <tcp_output+0x240>)
 8013760:	f004 fcdc 	bl	801811c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013768:	2b00      	cmp	r3, #0
 801376a:	d01f      	beq.n	80137ac <tcp_output+0x1d0>
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	8b5b      	ldrh	r3, [r3, #26]
 8013770:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013774:	2b00      	cmp	r3, #0
 8013776:	d119      	bne.n	80137ac <tcp_output+0x1d0>
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801377c:	2b00      	cmp	r3, #0
 801377e:	d00b      	beq.n	8013798 <tcp_output+0x1bc>
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d110      	bne.n	80137ac <tcp_output+0x1d0>
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801378e:	891a      	ldrh	r2, [r3, #8]
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013794:	429a      	cmp	r2, r3
 8013796:	d209      	bcs.n	80137ac <tcp_output+0x1d0>
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d004      	beq.n	80137ac <tcp_output+0x1d0>
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137a8:	2b0f      	cmp	r3, #15
 80137aa:	d901      	bls.n	80137b0 <tcp_output+0x1d4>
 80137ac:	2301      	movs	r3, #1
 80137ae:	e000      	b.n	80137b2 <tcp_output+0x1d6>
 80137b0:	2300      	movs	r3, #0
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d106      	bne.n	80137c4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	8b5b      	ldrh	r3, [r3, #26]
 80137ba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80137be:	2b00      	cmp	r3, #0
 80137c0:	f000 80e4 	beq.w	801398c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	7d1b      	ldrb	r3, [r3, #20]
 80137c8:	2b02      	cmp	r3, #2
 80137ca:	d00d      	beq.n	80137e8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80137cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ce:	68db      	ldr	r3, [r3, #12]
 80137d0:	899b      	ldrh	r3, [r3, #12]
 80137d2:	b29c      	uxth	r4, r3
 80137d4:	2010      	movs	r0, #16
 80137d6:	f7f9 f8ca 	bl	800c96e <lwip_htons>
 80137da:	4603      	mov	r3, r0
 80137dc:	461a      	mov	r2, r3
 80137de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e0:	68db      	ldr	r3, [r3, #12]
 80137e2:	4322      	orrs	r2, r4
 80137e4:	b292      	uxth	r2, r2
 80137e6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80137e8:	697a      	ldr	r2, [r7, #20]
 80137ea:	6879      	ldr	r1, [r7, #4]
 80137ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137ee:	f000 f909 	bl	8013a04 <tcp_output_segment>
 80137f2:	4603      	mov	r3, r0
 80137f4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80137f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d016      	beq.n	801382c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	8b5b      	ldrh	r3, [r3, #26]
 8013802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013806:	b29a      	uxth	r2, r3
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	835a      	strh	r2, [r3, #26]
      return err;
 801380c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013810:	e0d3      	b.n	80139ba <tcp_output+0x3de>
 8013812:	bf00      	nop
 8013814:	0801a674 	.word	0x0801a674
 8013818:	0801abb8 	.word	0x0801abb8
 801381c:	0801a6c8 	.word	0x0801a6c8
 8013820:	0801abd0 	.word	0x0801abd0
 8013824:	2000818c 	.word	0x2000818c
 8013828:	0801abf8 	.word	0x0801abf8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382e:	681a      	ldr	r2, [r3, #0]
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	7d1b      	ldrb	r3, [r3, #20]
 8013838:	2b02      	cmp	r3, #2
 801383a:	d006      	beq.n	801384a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	8b5b      	ldrh	r3, [r3, #26]
 8013840:	f023 0303 	bic.w	r3, r3, #3
 8013844:	b29a      	uxth	r2, r3
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384c:	68db      	ldr	r3, [r3, #12]
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	4618      	mov	r0, r3
 8013852:	f7f9 f8a1 	bl	800c998 <lwip_htonl>
 8013856:	4604      	mov	r4, r0
 8013858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385a:	891b      	ldrh	r3, [r3, #8]
 801385c:	461d      	mov	r5, r3
 801385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013860:	68db      	ldr	r3, [r3, #12]
 8013862:	899b      	ldrh	r3, [r3, #12]
 8013864:	b29b      	uxth	r3, r3
 8013866:	4618      	mov	r0, r3
 8013868:	f7f9 f881 	bl	800c96e <lwip_htons>
 801386c:	4603      	mov	r3, r0
 801386e:	b2db      	uxtb	r3, r3
 8013870:	f003 0303 	and.w	r3, r3, #3
 8013874:	2b00      	cmp	r3, #0
 8013876:	d001      	beq.n	801387c <tcp_output+0x2a0>
 8013878:	2301      	movs	r3, #1
 801387a:	e000      	b.n	801387e <tcp_output+0x2a2>
 801387c:	2300      	movs	r3, #0
 801387e:	442b      	add	r3, r5
 8013880:	4423      	add	r3, r4
 8013882:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	1ad3      	subs	r3, r2, r3
 801388c:	2b00      	cmp	r3, #0
 801388e:	da02      	bge.n	8013896 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	68ba      	ldr	r2, [r7, #8]
 8013894:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013898:	891b      	ldrh	r3, [r3, #8]
 801389a:	461c      	mov	r4, r3
 801389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389e:	68db      	ldr	r3, [r3, #12]
 80138a0:	899b      	ldrh	r3, [r3, #12]
 80138a2:	b29b      	uxth	r3, r3
 80138a4:	4618      	mov	r0, r3
 80138a6:	f7f9 f862 	bl	800c96e <lwip_htons>
 80138aa:	4603      	mov	r3, r0
 80138ac:	b2db      	uxtb	r3, r3
 80138ae:	f003 0303 	and.w	r3, r3, #3
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d001      	beq.n	80138ba <tcp_output+0x2de>
 80138b6:	2301      	movs	r3, #1
 80138b8:	e000      	b.n	80138bc <tcp_output+0x2e0>
 80138ba:	2300      	movs	r3, #0
 80138bc:	4423      	add	r3, r4
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d049      	beq.n	8013956 <tcp_output+0x37a>
      seg->next = NULL;
 80138c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138c4:	2200      	movs	r2, #0
 80138c6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d105      	bne.n	80138dc <tcp_output+0x300>
        pcb->unacked = seg;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138d4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80138d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d8:	623b      	str	r3, [r7, #32]
 80138da:	e03f      	b.n	801395c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80138dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138de:	68db      	ldr	r3, [r3, #12]
 80138e0:	685b      	ldr	r3, [r3, #4]
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7f9 f858 	bl	800c998 <lwip_htonl>
 80138e8:	4604      	mov	r4, r0
 80138ea:	6a3b      	ldr	r3, [r7, #32]
 80138ec:	68db      	ldr	r3, [r3, #12]
 80138ee:	685b      	ldr	r3, [r3, #4]
 80138f0:	4618      	mov	r0, r3
 80138f2:	f7f9 f851 	bl	800c998 <lwip_htonl>
 80138f6:	4603      	mov	r3, r0
 80138f8:	1ae3      	subs	r3, r4, r3
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	da24      	bge.n	8013948 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	3370      	adds	r3, #112	; 0x70
 8013902:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013904:	e002      	b.n	801390c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013906:	69fb      	ldr	r3, [r7, #28]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d011      	beq.n	8013938 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013914:	69fb      	ldr	r3, [r7, #28]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	68db      	ldr	r3, [r3, #12]
 801391a:	685b      	ldr	r3, [r3, #4]
 801391c:	4618      	mov	r0, r3
 801391e:	f7f9 f83b 	bl	800c998 <lwip_htonl>
 8013922:	4604      	mov	r4, r0
 8013924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013926:	68db      	ldr	r3, [r3, #12]
 8013928:	685b      	ldr	r3, [r3, #4]
 801392a:	4618      	mov	r0, r3
 801392c:	f7f9 f834 	bl	800c998 <lwip_htonl>
 8013930:	4603      	mov	r3, r0
 8013932:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013934:	2b00      	cmp	r3, #0
 8013936:	dbe6      	blt.n	8013906 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013938:	69fb      	ldr	r3, [r7, #28]
 801393a:	681a      	ldr	r2, [r3, #0]
 801393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801393e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013940:	69fb      	ldr	r3, [r7, #28]
 8013942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013944:	601a      	str	r2, [r3, #0]
 8013946:	e009      	b.n	801395c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013948:	6a3b      	ldr	r3, [r7, #32]
 801394a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801394c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801394e:	6a3b      	ldr	r3, [r7, #32]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	623b      	str	r3, [r7, #32]
 8013954:	e002      	b.n	801395c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013956:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013958:	f7fb ff37 	bl	800f7ca <tcp_seg_free>
    }
    seg = pcb->unsent;
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013960:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013964:	2b00      	cmp	r3, #0
 8013966:	d012      	beq.n	801398e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801396a:	68db      	ldr	r3, [r3, #12]
 801396c:	685b      	ldr	r3, [r3, #4]
 801396e:	4618      	mov	r0, r3
 8013970:	f7f9 f812 	bl	800c998 <lwip_htonl>
 8013974:	4602      	mov	r2, r0
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801397a:	1ad3      	subs	r3, r2, r3
 801397c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801397e:	8912      	ldrh	r2, [r2, #8]
 8013980:	4413      	add	r3, r2
  while (seg != NULL &&
 8013982:	69ba      	ldr	r2, [r7, #24]
 8013984:	429a      	cmp	r2, r3
 8013986:	f4bf aed9 	bcs.w	801373c <tcp_output+0x160>
 801398a:	e000      	b.n	801398e <tcp_output+0x3b2>
      break;
 801398c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013992:	2b00      	cmp	r3, #0
 8013994:	d108      	bne.n	80139a8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	2200      	movs	r2, #0
 801399a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801399e:	e004      	b.n	80139aa <tcp_output+0x3ce>
    goto output_done;
 80139a0:	bf00      	nop
 80139a2:	e002      	b.n	80139aa <tcp_output+0x3ce>
    goto output_done;
 80139a4:	bf00      	nop
 80139a6:	e000      	b.n	80139aa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80139a8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	8b5b      	ldrh	r3, [r3, #26]
 80139ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80139b2:	b29a      	uxth	r2, r3
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80139b8:	2300      	movs	r3, #0
}
 80139ba:	4618      	mov	r0, r3
 80139bc:	3728      	adds	r7, #40	; 0x28
 80139be:	46bd      	mov	sp, r7
 80139c0:	bdb0      	pop	{r4, r5, r7, pc}
 80139c2:	bf00      	nop

080139c4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b082      	sub	sp, #8
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d106      	bne.n	80139e0 <tcp_output_segment_busy+0x1c>
 80139d2:	4b09      	ldr	r3, [pc, #36]	; (80139f8 <tcp_output_segment_busy+0x34>)
 80139d4:	f240 529a 	movw	r2, #1434	; 0x59a
 80139d8:	4908      	ldr	r1, [pc, #32]	; (80139fc <tcp_output_segment_busy+0x38>)
 80139da:	4809      	ldr	r0, [pc, #36]	; (8013a00 <tcp_output_segment_busy+0x3c>)
 80139dc:	f004 fb9e 	bl	801811c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	685b      	ldr	r3, [r3, #4]
 80139e4:	7b9b      	ldrb	r3, [r3, #14]
 80139e6:	2b01      	cmp	r3, #1
 80139e8:	d001      	beq.n	80139ee <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80139ea:	2301      	movs	r3, #1
 80139ec:	e000      	b.n	80139f0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80139ee:	2300      	movs	r3, #0
}
 80139f0:	4618      	mov	r0, r3
 80139f2:	3708      	adds	r7, #8
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}
 80139f8:	0801a674 	.word	0x0801a674
 80139fc:	0801ac10 	.word	0x0801ac10
 8013a00:	0801a6c8 	.word	0x0801a6c8

08013a04 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013a04:	b5b0      	push	{r4, r5, r7, lr}
 8013a06:	b08c      	sub	sp, #48	; 0x30
 8013a08:	af04      	add	r7, sp, #16
 8013a0a:	60f8      	str	r0, [r7, #12]
 8013a0c:	60b9      	str	r1, [r7, #8]
 8013a0e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d106      	bne.n	8013a24 <tcp_output_segment+0x20>
 8013a16:	4b64      	ldr	r3, [pc, #400]	; (8013ba8 <tcp_output_segment+0x1a4>)
 8013a18:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013a1c:	4963      	ldr	r1, [pc, #396]	; (8013bac <tcp_output_segment+0x1a8>)
 8013a1e:	4864      	ldr	r0, [pc, #400]	; (8013bb0 <tcp_output_segment+0x1ac>)
 8013a20:	f004 fb7c 	bl	801811c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013a24:	68bb      	ldr	r3, [r7, #8]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d106      	bne.n	8013a38 <tcp_output_segment+0x34>
 8013a2a:	4b5f      	ldr	r3, [pc, #380]	; (8013ba8 <tcp_output_segment+0x1a4>)
 8013a2c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013a30:	4960      	ldr	r1, [pc, #384]	; (8013bb4 <tcp_output_segment+0x1b0>)
 8013a32:	485f      	ldr	r0, [pc, #380]	; (8013bb0 <tcp_output_segment+0x1ac>)
 8013a34:	f004 fb72 	bl	801811c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d106      	bne.n	8013a4c <tcp_output_segment+0x48>
 8013a3e:	4b5a      	ldr	r3, [pc, #360]	; (8013ba8 <tcp_output_segment+0x1a4>)
 8013a40:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013a44:	495c      	ldr	r1, [pc, #368]	; (8013bb8 <tcp_output_segment+0x1b4>)
 8013a46:	485a      	ldr	r0, [pc, #360]	; (8013bb0 <tcp_output_segment+0x1ac>)
 8013a48:	f004 fb68 	bl	801811c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013a4c:	68f8      	ldr	r0, [r7, #12]
 8013a4e:	f7ff ffb9 	bl	80139c4 <tcp_output_segment_busy>
 8013a52:	4603      	mov	r3, r0
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d001      	beq.n	8013a5c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013a58:	2300      	movs	r3, #0
 8013a5a:	e0a1      	b.n	8013ba0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	68dc      	ldr	r4, [r3, #12]
 8013a64:	4610      	mov	r0, r2
 8013a66:	f7f8 ff97 	bl	800c998 <lwip_htonl>
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	68dc      	ldr	r4, [r3, #12]
 8013a76:	4610      	mov	r0, r2
 8013a78:	f7f8 ff79 	bl	800c96e <lwip_htons>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a84:	68ba      	ldr	r2, [r7, #8]
 8013a86:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013a88:	441a      	add	r2, r3
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	68db      	ldr	r3, [r3, #12]
 8013a92:	3314      	adds	r3, #20
 8013a94:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	7a9b      	ldrb	r3, [r3, #10]
 8013a9a:	f003 0301 	and.w	r3, r3, #1
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d015      	beq.n	8013ace <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	3304      	adds	r3, #4
 8013aa6:	461a      	mov	r2, r3
 8013aa8:	6879      	ldr	r1, [r7, #4]
 8013aaa:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8013aae:	f7fc fa33 	bl	800ff18 <tcp_eff_send_mss_netif>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013ab6:	8b7b      	ldrh	r3, [r7, #26]
 8013ab8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013abc:	4618      	mov	r0, r3
 8013abe:	f7f8 ff6b 	bl	800c998 <lwip_htonl>
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	69fb      	ldr	r3, [r7, #28]
 8013ac6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013ac8:	69fb      	ldr	r3, [r7, #28]
 8013aca:	3304      	adds	r3, #4
 8013acc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013ace:	68bb      	ldr	r3, [r7, #8]
 8013ad0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	da02      	bge.n	8013ade <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013ad8:	68bb      	ldr	r3, [r7, #8]
 8013ada:	2200      	movs	r2, #0
 8013adc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013ade:	68bb      	ldr	r3, [r7, #8]
 8013ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d10c      	bne.n	8013b00 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013ae6:	4b35      	ldr	r3, [pc, #212]	; (8013bbc <tcp_output_segment+0x1b8>)
 8013ae8:	681a      	ldr	r2, [r3, #0]
 8013aea:	68bb      	ldr	r3, [r7, #8]
 8013aec:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	68db      	ldr	r3, [r3, #12]
 8013af2:	685b      	ldr	r3, [r3, #4]
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7f8 ff4f 	bl	800c998 <lwip_htonl>
 8013afa:	4602      	mov	r2, r0
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	68da      	ldr	r2, [r3, #12]
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	685b      	ldr	r3, [r3, #4]
 8013b08:	685b      	ldr	r3, [r3, #4]
 8013b0a:	1ad3      	subs	r3, r2, r3
 8013b0c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	685b      	ldr	r3, [r3, #4]
 8013b12:	8959      	ldrh	r1, [r3, #10]
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	685b      	ldr	r3, [r3, #4]
 8013b18:	8b3a      	ldrh	r2, [r7, #24]
 8013b1a:	1a8a      	subs	r2, r1, r2
 8013b1c:	b292      	uxth	r2, r2
 8013b1e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	685b      	ldr	r3, [r3, #4]
 8013b24:	8919      	ldrh	r1, [r3, #8]
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	685b      	ldr	r3, [r3, #4]
 8013b2a:	8b3a      	ldrh	r2, [r7, #24]
 8013b2c:	1a8a      	subs	r2, r1, r2
 8013b2e:	b292      	uxth	r2, r2
 8013b30:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	685b      	ldr	r3, [r3, #4]
 8013b36:	68fa      	ldr	r2, [r7, #12]
 8013b38:	68d2      	ldr	r2, [r2, #12]
 8013b3a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	68db      	ldr	r3, [r3, #12]
 8013b40:	2200      	movs	r2, #0
 8013b42:	741a      	strb	r2, [r3, #16]
 8013b44:	2200      	movs	r2, #0
 8013b46:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	68da      	ldr	r2, [r3, #12]
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	7a9b      	ldrb	r3, [r3, #10]
 8013b50:	f003 0301 	and.w	r3, r3, #1
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d001      	beq.n	8013b5c <tcp_output_segment+0x158>
 8013b58:	2318      	movs	r3, #24
 8013b5a:	e000      	b.n	8013b5e <tcp_output_segment+0x15a>
 8013b5c:	2314      	movs	r3, #20
 8013b5e:	4413      	add	r3, r2
 8013b60:	69fa      	ldr	r2, [r7, #28]
 8013b62:	429a      	cmp	r2, r3
 8013b64:	d006      	beq.n	8013b74 <tcp_output_segment+0x170>
 8013b66:	4b10      	ldr	r3, [pc, #64]	; (8013ba8 <tcp_output_segment+0x1a4>)
 8013b68:	f240 621c 	movw	r2, #1564	; 0x61c
 8013b6c:	4914      	ldr	r1, [pc, #80]	; (8013bc0 <tcp_output_segment+0x1bc>)
 8013b6e:	4810      	ldr	r0, [pc, #64]	; (8013bb0 <tcp_output_segment+0x1ac>)
 8013b70:	f004 fad4 	bl	801811c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	6858      	ldr	r0, [r3, #4]
 8013b78:	68b9      	ldr	r1, [r7, #8]
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	1d1c      	adds	r4, r3, #4
 8013b7e:	68bb      	ldr	r3, [r7, #8]
 8013b80:	7add      	ldrb	r5, [r3, #11]
 8013b82:	68bb      	ldr	r3, [r7, #8]
 8013b84:	7a9b      	ldrb	r3, [r3, #10]
 8013b86:	687a      	ldr	r2, [r7, #4]
 8013b88:	9202      	str	r2, [sp, #8]
 8013b8a:	2206      	movs	r2, #6
 8013b8c:	9201      	str	r2, [sp, #4]
 8013b8e:	9300      	str	r3, [sp, #0]
 8013b90:	462b      	mov	r3, r5
 8013b92:	4622      	mov	r2, r4
 8013b94:	f002 fa32 	bl	8015ffc <ip4_output_if>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013b9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	3720      	adds	r7, #32
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8013ba8:	0801a674 	.word	0x0801a674
 8013bac:	0801ac38 	.word	0x0801ac38
 8013bb0:	0801a6c8 	.word	0x0801a6c8
 8013bb4:	0801ac58 	.word	0x0801ac58
 8013bb8:	0801ac78 	.word	0x0801ac78
 8013bbc:	20008140 	.word	0x20008140
 8013bc0:	0801ac9c 	.word	0x0801ac9c

08013bc4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013bc4:	b5b0      	push	{r4, r5, r7, lr}
 8013bc6:	b084      	sub	sp, #16
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d106      	bne.n	8013be0 <tcp_rexmit_rto_prepare+0x1c>
 8013bd2:	4b31      	ldr	r3, [pc, #196]	; (8013c98 <tcp_rexmit_rto_prepare+0xd4>)
 8013bd4:	f240 6263 	movw	r2, #1635	; 0x663
 8013bd8:	4930      	ldr	r1, [pc, #192]	; (8013c9c <tcp_rexmit_rto_prepare+0xd8>)
 8013bda:	4831      	ldr	r0, [pc, #196]	; (8013ca0 <tcp_rexmit_rto_prepare+0xdc>)
 8013bdc:	f004 fa9e 	bl	801811c <iprintf>

  if (pcb->unacked == NULL) {
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d102      	bne.n	8013bee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013be8:	f06f 0305 	mvn.w	r3, #5
 8013bec:	e050      	b.n	8013c90 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013bf2:	60fb      	str	r3, [r7, #12]
 8013bf4:	e00b      	b.n	8013c0e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013bf6:	68f8      	ldr	r0, [r7, #12]
 8013bf8:	f7ff fee4 	bl	80139c4 <tcp_output_segment_busy>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d002      	beq.n	8013c08 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013c02:	f06f 0305 	mvn.w	r3, #5
 8013c06:	e043      	b.n	8013c90 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	60fb      	str	r3, [r7, #12]
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d1ef      	bne.n	8013bf6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013c16:	68f8      	ldr	r0, [r7, #12]
 8013c18:	f7ff fed4 	bl	80139c4 <tcp_output_segment_busy>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d002      	beq.n	8013c28 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013c22:	f06f 0305 	mvn.w	r3, #5
 8013c26:	e033      	b.n	8013c90 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	8b5b      	ldrh	r3, [r3, #26]
 8013c42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013c46:	b29a      	uxth	r2, r3
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	68db      	ldr	r3, [r3, #12]
 8013c50:	685b      	ldr	r3, [r3, #4]
 8013c52:	4618      	mov	r0, r3
 8013c54:	f7f8 fea0 	bl	800c998 <lwip_htonl>
 8013c58:	4604      	mov	r4, r0
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	891b      	ldrh	r3, [r3, #8]
 8013c5e:	461d      	mov	r5, r3
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	68db      	ldr	r3, [r3, #12]
 8013c64:	899b      	ldrh	r3, [r3, #12]
 8013c66:	b29b      	uxth	r3, r3
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f7f8 fe80 	bl	800c96e <lwip_htons>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	b2db      	uxtb	r3, r3
 8013c72:	f003 0303 	and.w	r3, r3, #3
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d001      	beq.n	8013c7e <tcp_rexmit_rto_prepare+0xba>
 8013c7a:	2301      	movs	r3, #1
 8013c7c:	e000      	b.n	8013c80 <tcp_rexmit_rto_prepare+0xbc>
 8013c7e:	2300      	movs	r3, #0
 8013c80:	442b      	add	r3, r5
 8013c82:	18e2      	adds	r2, r4, r3
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013c8e:	2300      	movs	r3, #0
}
 8013c90:	4618      	mov	r0, r3
 8013c92:	3710      	adds	r7, #16
 8013c94:	46bd      	mov	sp, r7
 8013c96:	bdb0      	pop	{r4, r5, r7, pc}
 8013c98:	0801a674 	.word	0x0801a674
 8013c9c:	0801acb0 	.word	0x0801acb0
 8013ca0:	0801a6c8 	.word	0x0801a6c8

08013ca4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b082      	sub	sp, #8
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d106      	bne.n	8013cc0 <tcp_rexmit_rto_commit+0x1c>
 8013cb2:	4b0d      	ldr	r3, [pc, #52]	; (8013ce8 <tcp_rexmit_rto_commit+0x44>)
 8013cb4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013cb8:	490c      	ldr	r1, [pc, #48]	; (8013cec <tcp_rexmit_rto_commit+0x48>)
 8013cba:	480d      	ldr	r0, [pc, #52]	; (8013cf0 <tcp_rexmit_rto_commit+0x4c>)
 8013cbc:	f004 fa2e 	bl	801811c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013cc6:	2bff      	cmp	r3, #255	; 0xff
 8013cc8:	d007      	beq.n	8013cda <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013cd0:	3301      	adds	r3, #1
 8013cd2:	b2da      	uxtb	r2, r3
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013cda:	6878      	ldr	r0, [r7, #4]
 8013cdc:	f7ff fc7e 	bl	80135dc <tcp_output>
}
 8013ce0:	bf00      	nop
 8013ce2:	3708      	adds	r7, #8
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	0801a674 	.word	0x0801a674
 8013cec:	0801acd4 	.word	0x0801acd4
 8013cf0:	0801a6c8 	.word	0x0801a6c8

08013cf4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b082      	sub	sp, #8
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d106      	bne.n	8013d10 <tcp_rexmit_rto+0x1c>
 8013d02:	4b0a      	ldr	r3, [pc, #40]	; (8013d2c <tcp_rexmit_rto+0x38>)
 8013d04:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013d08:	4909      	ldr	r1, [pc, #36]	; (8013d30 <tcp_rexmit_rto+0x3c>)
 8013d0a:	480a      	ldr	r0, [pc, #40]	; (8013d34 <tcp_rexmit_rto+0x40>)
 8013d0c:	f004 fa06 	bl	801811c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013d10:	6878      	ldr	r0, [r7, #4]
 8013d12:	f7ff ff57 	bl	8013bc4 <tcp_rexmit_rto_prepare>
 8013d16:	4603      	mov	r3, r0
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d102      	bne.n	8013d22 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013d1c:	6878      	ldr	r0, [r7, #4]
 8013d1e:	f7ff ffc1 	bl	8013ca4 <tcp_rexmit_rto_commit>
  }
}
 8013d22:	bf00      	nop
 8013d24:	3708      	adds	r7, #8
 8013d26:	46bd      	mov	sp, r7
 8013d28:	bd80      	pop	{r7, pc}
 8013d2a:	bf00      	nop
 8013d2c:	0801a674 	.word	0x0801a674
 8013d30:	0801acf8 	.word	0x0801acf8
 8013d34:	0801a6c8 	.word	0x0801a6c8

08013d38 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013d38:	b590      	push	{r4, r7, lr}
 8013d3a:	b085      	sub	sp, #20
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d106      	bne.n	8013d54 <tcp_rexmit+0x1c>
 8013d46:	4b2f      	ldr	r3, [pc, #188]	; (8013e04 <tcp_rexmit+0xcc>)
 8013d48:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013d4c:	492e      	ldr	r1, [pc, #184]	; (8013e08 <tcp_rexmit+0xd0>)
 8013d4e:	482f      	ldr	r0, [pc, #188]	; (8013e0c <tcp_rexmit+0xd4>)
 8013d50:	f004 f9e4 	bl	801811c <iprintf>

  if (pcb->unacked == NULL) {
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d102      	bne.n	8013d62 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013d5c:	f06f 0305 	mvn.w	r3, #5
 8013d60:	e04c      	b.n	8013dfc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d66:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013d68:	68b8      	ldr	r0, [r7, #8]
 8013d6a:	f7ff fe2b 	bl	80139c4 <tcp_output_segment_busy>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d002      	beq.n	8013d7a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013d74:	f06f 0305 	mvn.w	r3, #5
 8013d78:	e040      	b.n	8013dfc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	681a      	ldr	r2, [r3, #0]
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	336c      	adds	r3, #108	; 0x6c
 8013d86:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013d88:	e002      	b.n	8013d90 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d011      	beq.n	8013dbc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	68db      	ldr	r3, [r3, #12]
 8013d9e:	685b      	ldr	r3, [r3, #4]
 8013da0:	4618      	mov	r0, r3
 8013da2:	f7f8 fdf9 	bl	800c998 <lwip_htonl>
 8013da6:	4604      	mov	r4, r0
 8013da8:	68bb      	ldr	r3, [r7, #8]
 8013daa:	68db      	ldr	r3, [r3, #12]
 8013dac:	685b      	ldr	r3, [r3, #4]
 8013dae:	4618      	mov	r0, r3
 8013db0:	f7f8 fdf2 	bl	800c998 <lwip_htonl>
 8013db4:	4603      	mov	r3, r0
 8013db6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	dbe6      	blt.n	8013d8a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	681a      	ldr	r2, [r3, #0]
 8013dc0:	68bb      	ldr	r3, [r7, #8]
 8013dc2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	68ba      	ldr	r2, [r7, #8]
 8013dc8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d103      	bne.n	8013dda <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013de0:	2bff      	cmp	r3, #255	; 0xff
 8013de2:	d007      	beq.n	8013df4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013dea:	3301      	adds	r3, #1
 8013dec:	b2da      	uxtb	r2, r3
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	2200      	movs	r2, #0
 8013df8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013dfa:	2300      	movs	r3, #0
}
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	3714      	adds	r7, #20
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd90      	pop	{r4, r7, pc}
 8013e04:	0801a674 	.word	0x0801a674
 8013e08:	0801ad14 	.word	0x0801ad14
 8013e0c:	0801a6c8 	.word	0x0801a6c8

08013e10 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b082      	sub	sp, #8
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d106      	bne.n	8013e2c <tcp_rexmit_fast+0x1c>
 8013e1e:	4b2a      	ldr	r3, [pc, #168]	; (8013ec8 <tcp_rexmit_fast+0xb8>)
 8013e20:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013e24:	4929      	ldr	r1, [pc, #164]	; (8013ecc <tcp_rexmit_fast+0xbc>)
 8013e26:	482a      	ldr	r0, [pc, #168]	; (8013ed0 <tcp_rexmit_fast+0xc0>)
 8013e28:	f004 f978 	bl	801811c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d044      	beq.n	8013ebe <tcp_rexmit_fast+0xae>
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	8b5b      	ldrh	r3, [r3, #26]
 8013e38:	f003 0304 	and.w	r3, r3, #4
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d13e      	bne.n	8013ebe <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013e40:	6878      	ldr	r0, [r7, #4]
 8013e42:	f7ff ff79 	bl	8013d38 <tcp_rexmit>
 8013e46:	4603      	mov	r3, r0
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d138      	bne.n	8013ebe <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013e58:	4293      	cmp	r3, r2
 8013e5a:	bf28      	it	cs
 8013e5c:	4613      	movcs	r3, r2
 8013e5e:	b29b      	uxth	r3, r3
 8013e60:	0fda      	lsrs	r2, r3, #31
 8013e62:	4413      	add	r3, r2
 8013e64:	105b      	asrs	r3, r3, #1
 8013e66:	b29a      	uxth	r2, r3
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013e74:	461a      	mov	r2, r3
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e7a:	005b      	lsls	r3, r3, #1
 8013e7c:	429a      	cmp	r2, r3
 8013e7e:	d206      	bcs.n	8013e8e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e84:	005b      	lsls	r3, r3, #1
 8013e86:	b29a      	uxth	r2, r3
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e98:	4619      	mov	r1, r3
 8013e9a:	0049      	lsls	r1, r1, #1
 8013e9c:	440b      	add	r3, r1
 8013e9e:	b29b      	uxth	r3, r3
 8013ea0:	4413      	add	r3, r2
 8013ea2:	b29a      	uxth	r2, r3
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	8b5b      	ldrh	r3, [r3, #26]
 8013eae:	f043 0304 	orr.w	r3, r3, #4
 8013eb2:	b29a      	uxth	r2, r3
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	2200      	movs	r2, #0
 8013ebc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013ebe:	bf00      	nop
 8013ec0:	3708      	adds	r7, #8
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	bd80      	pop	{r7, pc}
 8013ec6:	bf00      	nop
 8013ec8:	0801a674 	.word	0x0801a674
 8013ecc:	0801ad2c 	.word	0x0801ad2c
 8013ed0:	0801a6c8 	.word	0x0801a6c8

08013ed4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b086      	sub	sp, #24
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	60f8      	str	r0, [r7, #12]
 8013edc:	607b      	str	r3, [r7, #4]
 8013ede:	460b      	mov	r3, r1
 8013ee0:	817b      	strh	r3, [r7, #10]
 8013ee2:	4613      	mov	r3, r2
 8013ee4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013ee6:	897a      	ldrh	r2, [r7, #10]
 8013ee8:	893b      	ldrh	r3, [r7, #8]
 8013eea:	4413      	add	r3, r2
 8013eec:	b29b      	uxth	r3, r3
 8013eee:	3314      	adds	r3, #20
 8013ef0:	b29b      	uxth	r3, r3
 8013ef2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013ef6:	4619      	mov	r1, r3
 8013ef8:	2022      	movs	r0, #34	; 0x22
 8013efa:	f7f9 fdb1 	bl	800da60 <pbuf_alloc>
 8013efe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013f00:	697b      	ldr	r3, [r7, #20]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d04d      	beq.n	8013fa2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013f06:	897b      	ldrh	r3, [r7, #10]
 8013f08:	3313      	adds	r3, #19
 8013f0a:	697a      	ldr	r2, [r7, #20]
 8013f0c:	8952      	ldrh	r2, [r2, #10]
 8013f0e:	4293      	cmp	r3, r2
 8013f10:	db06      	blt.n	8013f20 <tcp_output_alloc_header_common+0x4c>
 8013f12:	4b26      	ldr	r3, [pc, #152]	; (8013fac <tcp_output_alloc_header_common+0xd8>)
 8013f14:	f240 7223 	movw	r2, #1827	; 0x723
 8013f18:	4925      	ldr	r1, [pc, #148]	; (8013fb0 <tcp_output_alloc_header_common+0xdc>)
 8013f1a:	4826      	ldr	r0, [pc, #152]	; (8013fb4 <tcp_output_alloc_header_common+0xe0>)
 8013f1c:	f004 f8fe 	bl	801811c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	685b      	ldr	r3, [r3, #4]
 8013f24:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013f26:	8c3b      	ldrh	r3, [r7, #32]
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7f8 fd20 	bl	800c96e <lwip_htons>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	461a      	mov	r2, r3
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013f36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f7f8 fd18 	bl	800c96e <lwip_htons>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	461a      	mov	r2, r3
 8013f42:	693b      	ldr	r3, [r7, #16]
 8013f44:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	687a      	ldr	r2, [r7, #4]
 8013f4a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013f4c:	68f8      	ldr	r0, [r7, #12]
 8013f4e:	f7f8 fd23 	bl	800c998 <lwip_htonl>
 8013f52:	4602      	mov	r2, r0
 8013f54:	693b      	ldr	r3, [r7, #16]
 8013f56:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013f58:	897b      	ldrh	r3, [r7, #10]
 8013f5a:	089b      	lsrs	r3, r3, #2
 8013f5c:	b29b      	uxth	r3, r3
 8013f5e:	3305      	adds	r3, #5
 8013f60:	b29b      	uxth	r3, r3
 8013f62:	031b      	lsls	r3, r3, #12
 8013f64:	b29a      	uxth	r2, r3
 8013f66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013f6a:	b29b      	uxth	r3, r3
 8013f6c:	4313      	orrs	r3, r2
 8013f6e:	b29b      	uxth	r3, r3
 8013f70:	4618      	mov	r0, r3
 8013f72:	f7f8 fcfc 	bl	800c96e <lwip_htons>
 8013f76:	4603      	mov	r3, r0
 8013f78:	461a      	mov	r2, r3
 8013f7a:	693b      	ldr	r3, [r7, #16]
 8013f7c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013f7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013f80:	4618      	mov	r0, r3
 8013f82:	f7f8 fcf4 	bl	800c96e <lwip_htons>
 8013f86:	4603      	mov	r3, r0
 8013f88:	461a      	mov	r2, r3
 8013f8a:	693b      	ldr	r3, [r7, #16]
 8013f8c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013f8e:	693b      	ldr	r3, [r7, #16]
 8013f90:	2200      	movs	r2, #0
 8013f92:	741a      	strb	r2, [r3, #16]
 8013f94:	2200      	movs	r2, #0
 8013f96:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013f98:	693b      	ldr	r3, [r7, #16]
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	749a      	strb	r2, [r3, #18]
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013fa2:	697b      	ldr	r3, [r7, #20]
}
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	3718      	adds	r7, #24
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	bd80      	pop	{r7, pc}
 8013fac:	0801a674 	.word	0x0801a674
 8013fb0:	0801ad4c 	.word	0x0801ad4c
 8013fb4:	0801a6c8 	.word	0x0801a6c8

08013fb8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013fb8:	b5b0      	push	{r4, r5, r7, lr}
 8013fba:	b08a      	sub	sp, #40	; 0x28
 8013fbc:	af04      	add	r7, sp, #16
 8013fbe:	60f8      	str	r0, [r7, #12]
 8013fc0:	607b      	str	r3, [r7, #4]
 8013fc2:	460b      	mov	r3, r1
 8013fc4:	817b      	strh	r3, [r7, #10]
 8013fc6:	4613      	mov	r3, r2
 8013fc8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d106      	bne.n	8013fde <tcp_output_alloc_header+0x26>
 8013fd0:	4b15      	ldr	r3, [pc, #84]	; (8014028 <tcp_output_alloc_header+0x70>)
 8013fd2:	f240 7242 	movw	r2, #1858	; 0x742
 8013fd6:	4915      	ldr	r1, [pc, #84]	; (801402c <tcp_output_alloc_header+0x74>)
 8013fd8:	4815      	ldr	r0, [pc, #84]	; (8014030 <tcp_output_alloc_header+0x78>)
 8013fda:	f004 f89f 	bl	801811c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	8adb      	ldrh	r3, [r3, #22]
 8013fe6:	68fa      	ldr	r2, [r7, #12]
 8013fe8:	8b12      	ldrh	r2, [r2, #24]
 8013fea:	68f9      	ldr	r1, [r7, #12]
 8013fec:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013fee:	893d      	ldrh	r5, [r7, #8]
 8013ff0:	897c      	ldrh	r4, [r7, #10]
 8013ff2:	9103      	str	r1, [sp, #12]
 8013ff4:	2110      	movs	r1, #16
 8013ff6:	9102      	str	r1, [sp, #8]
 8013ff8:	9201      	str	r2, [sp, #4]
 8013ffa:	9300      	str	r3, [sp, #0]
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	462a      	mov	r2, r5
 8014000:	4621      	mov	r1, r4
 8014002:	f7ff ff67 	bl	8013ed4 <tcp_output_alloc_header_common>
 8014006:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014008:	697b      	ldr	r3, [r7, #20]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d006      	beq.n	801401c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014012:	68fa      	ldr	r2, [r7, #12]
 8014014:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014016:	441a      	add	r2, r3
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801401c:	697b      	ldr	r3, [r7, #20]
}
 801401e:	4618      	mov	r0, r3
 8014020:	3718      	adds	r7, #24
 8014022:	46bd      	mov	sp, r7
 8014024:	bdb0      	pop	{r4, r5, r7, pc}
 8014026:	bf00      	nop
 8014028:	0801a674 	.word	0x0801a674
 801402c:	0801ad7c 	.word	0x0801ad7c
 8014030:	0801a6c8 	.word	0x0801a6c8

08014034 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b088      	sub	sp, #32
 8014038:	af00      	add	r7, sp, #0
 801403a:	60f8      	str	r0, [r7, #12]
 801403c:	60b9      	str	r1, [r7, #8]
 801403e:	4611      	mov	r1, r2
 8014040:	461a      	mov	r2, r3
 8014042:	460b      	mov	r3, r1
 8014044:	71fb      	strb	r3, [r7, #7]
 8014046:	4613      	mov	r3, r2
 8014048:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801404a:	2300      	movs	r3, #0
 801404c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d106      	bne.n	8014062 <tcp_output_fill_options+0x2e>
 8014054:	4b12      	ldr	r3, [pc, #72]	; (80140a0 <tcp_output_fill_options+0x6c>)
 8014056:	f240 7256 	movw	r2, #1878	; 0x756
 801405a:	4912      	ldr	r1, [pc, #72]	; (80140a4 <tcp_output_fill_options+0x70>)
 801405c:	4812      	ldr	r0, [pc, #72]	; (80140a8 <tcp_output_fill_options+0x74>)
 801405e:	f004 f85d 	bl	801811c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	685b      	ldr	r3, [r3, #4]
 8014066:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014068:	69bb      	ldr	r3, [r7, #24]
 801406a:	3314      	adds	r3, #20
 801406c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801406e:	8bfb      	ldrh	r3, [r7, #30]
 8014070:	009b      	lsls	r3, r3, #2
 8014072:	461a      	mov	r2, r3
 8014074:	79fb      	ldrb	r3, [r7, #7]
 8014076:	009b      	lsls	r3, r3, #2
 8014078:	f003 0304 	and.w	r3, r3, #4
 801407c:	4413      	add	r3, r2
 801407e:	3314      	adds	r3, #20
 8014080:	69ba      	ldr	r2, [r7, #24]
 8014082:	4413      	add	r3, r2
 8014084:	697a      	ldr	r2, [r7, #20]
 8014086:	429a      	cmp	r2, r3
 8014088:	d006      	beq.n	8014098 <tcp_output_fill_options+0x64>
 801408a:	4b05      	ldr	r3, [pc, #20]	; (80140a0 <tcp_output_fill_options+0x6c>)
 801408c:	f240 7275 	movw	r2, #1909	; 0x775
 8014090:	4906      	ldr	r1, [pc, #24]	; (80140ac <tcp_output_fill_options+0x78>)
 8014092:	4805      	ldr	r0, [pc, #20]	; (80140a8 <tcp_output_fill_options+0x74>)
 8014094:	f004 f842 	bl	801811c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014098:	bf00      	nop
 801409a:	3720      	adds	r7, #32
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}
 80140a0:	0801a674 	.word	0x0801a674
 80140a4:	0801ada4 	.word	0x0801ada4
 80140a8:	0801a6c8 	.word	0x0801a6c8
 80140ac:	0801ac9c 	.word	0x0801ac9c

080140b0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b08a      	sub	sp, #40	; 0x28
 80140b4:	af04      	add	r7, sp, #16
 80140b6:	60f8      	str	r0, [r7, #12]
 80140b8:	60b9      	str	r1, [r7, #8]
 80140ba:	607a      	str	r2, [r7, #4]
 80140bc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80140be:	68bb      	ldr	r3, [r7, #8]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d106      	bne.n	80140d2 <tcp_output_control_segment+0x22>
 80140c4:	4b1c      	ldr	r3, [pc, #112]	; (8014138 <tcp_output_control_segment+0x88>)
 80140c6:	f240 7287 	movw	r2, #1927	; 0x787
 80140ca:	491c      	ldr	r1, [pc, #112]	; (801413c <tcp_output_control_segment+0x8c>)
 80140cc:	481c      	ldr	r0, [pc, #112]	; (8014140 <tcp_output_control_segment+0x90>)
 80140ce:	f004 f825 	bl	801811c <iprintf>

  netif = tcp_route(pcb, src, dst);
 80140d2:	683a      	ldr	r2, [r7, #0]
 80140d4:	6879      	ldr	r1, [r7, #4]
 80140d6:	68f8      	ldr	r0, [r7, #12]
 80140d8:	f7fe fae8 	bl	80126ac <tcp_route>
 80140dc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80140de:	693b      	ldr	r3, [r7, #16]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d102      	bne.n	80140ea <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80140e4:	23fc      	movs	r3, #252	; 0xfc
 80140e6:	75fb      	strb	r3, [r7, #23]
 80140e8:	e01c      	b.n	8014124 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d006      	beq.n	80140fe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	7adb      	ldrb	r3, [r3, #11]
 80140f4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	7a9b      	ldrb	r3, [r3, #10]
 80140fa:	757b      	strb	r3, [r7, #21]
 80140fc:	e003      	b.n	8014106 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80140fe:	23ff      	movs	r3, #255	; 0xff
 8014100:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014102:	2300      	movs	r3, #0
 8014104:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014106:	7dba      	ldrb	r2, [r7, #22]
 8014108:	693b      	ldr	r3, [r7, #16]
 801410a:	9302      	str	r3, [sp, #8]
 801410c:	2306      	movs	r3, #6
 801410e:	9301      	str	r3, [sp, #4]
 8014110:	7d7b      	ldrb	r3, [r7, #21]
 8014112:	9300      	str	r3, [sp, #0]
 8014114:	4613      	mov	r3, r2
 8014116:	683a      	ldr	r2, [r7, #0]
 8014118:	6879      	ldr	r1, [r7, #4]
 801411a:	68b8      	ldr	r0, [r7, #8]
 801411c:	f001 ff6e 	bl	8015ffc <ip4_output_if>
 8014120:	4603      	mov	r3, r0
 8014122:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014124:	68b8      	ldr	r0, [r7, #8]
 8014126:	f7f9 ff7f 	bl	800e028 <pbuf_free>
  return err;
 801412a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801412e:	4618      	mov	r0, r3
 8014130:	3718      	adds	r7, #24
 8014132:	46bd      	mov	sp, r7
 8014134:	bd80      	pop	{r7, pc}
 8014136:	bf00      	nop
 8014138:	0801a674 	.word	0x0801a674
 801413c:	0801adcc 	.word	0x0801adcc
 8014140:	0801a6c8 	.word	0x0801a6c8

08014144 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014144:	b590      	push	{r4, r7, lr}
 8014146:	b08b      	sub	sp, #44	; 0x2c
 8014148:	af04      	add	r7, sp, #16
 801414a:	60f8      	str	r0, [r7, #12]
 801414c:	60b9      	str	r1, [r7, #8]
 801414e:	607a      	str	r2, [r7, #4]
 8014150:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d106      	bne.n	8014166 <tcp_rst+0x22>
 8014158:	4b1e      	ldr	r3, [pc, #120]	; (80141d4 <tcp_rst+0x90>)
 801415a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801415e:	491e      	ldr	r1, [pc, #120]	; (80141d8 <tcp_rst+0x94>)
 8014160:	481e      	ldr	r0, [pc, #120]	; (80141dc <tcp_rst+0x98>)
 8014162:	f003 ffdb 	bl	801811c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014168:	2b00      	cmp	r3, #0
 801416a:	d106      	bne.n	801417a <tcp_rst+0x36>
 801416c:	4b19      	ldr	r3, [pc, #100]	; (80141d4 <tcp_rst+0x90>)
 801416e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014172:	491b      	ldr	r1, [pc, #108]	; (80141e0 <tcp_rst+0x9c>)
 8014174:	4819      	ldr	r0, [pc, #100]	; (80141dc <tcp_rst+0x98>)
 8014176:	f003 ffd1 	bl	801811c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801417a:	2300      	movs	r3, #0
 801417c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801417e:	2308      	movs	r3, #8
 8014180:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014182:	7dfb      	ldrb	r3, [r7, #23]
 8014184:	b29c      	uxth	r4, r3
 8014186:	68b8      	ldr	r0, [r7, #8]
 8014188:	f7f8 fc06 	bl	800c998 <lwip_htonl>
 801418c:	4602      	mov	r2, r0
 801418e:	8abb      	ldrh	r3, [r7, #20]
 8014190:	9303      	str	r3, [sp, #12]
 8014192:	2314      	movs	r3, #20
 8014194:	9302      	str	r3, [sp, #8]
 8014196:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014198:	9301      	str	r3, [sp, #4]
 801419a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801419c:	9300      	str	r3, [sp, #0]
 801419e:	4613      	mov	r3, r2
 80141a0:	2200      	movs	r2, #0
 80141a2:	4621      	mov	r1, r4
 80141a4:	6878      	ldr	r0, [r7, #4]
 80141a6:	f7ff fe95 	bl	8013ed4 <tcp_output_alloc_header_common>
 80141aa:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80141ac:	693b      	ldr	r3, [r7, #16]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d00c      	beq.n	80141cc <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80141b2:	7dfb      	ldrb	r3, [r7, #23]
 80141b4:	2200      	movs	r2, #0
 80141b6:	6939      	ldr	r1, [r7, #16]
 80141b8:	68f8      	ldr	r0, [r7, #12]
 80141ba:	f7ff ff3b 	bl	8014034 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80141be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141c0:	683a      	ldr	r2, [r7, #0]
 80141c2:	6939      	ldr	r1, [r7, #16]
 80141c4:	68f8      	ldr	r0, [r7, #12]
 80141c6:	f7ff ff73 	bl	80140b0 <tcp_output_control_segment>
 80141ca:	e000      	b.n	80141ce <tcp_rst+0x8a>
    return;
 80141cc:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80141ce:	371c      	adds	r7, #28
 80141d0:	46bd      	mov	sp, r7
 80141d2:	bd90      	pop	{r4, r7, pc}
 80141d4:	0801a674 	.word	0x0801a674
 80141d8:	0801adf8 	.word	0x0801adf8
 80141dc:	0801a6c8 	.word	0x0801a6c8
 80141e0:	0801ae14 	.word	0x0801ae14

080141e4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80141e4:	b590      	push	{r4, r7, lr}
 80141e6:	b087      	sub	sp, #28
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80141ec:	2300      	movs	r3, #0
 80141ee:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80141f0:	2300      	movs	r3, #0
 80141f2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d106      	bne.n	8014208 <tcp_send_empty_ack+0x24>
 80141fa:	4b28      	ldr	r3, [pc, #160]	; (801429c <tcp_send_empty_ack+0xb8>)
 80141fc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014200:	4927      	ldr	r1, [pc, #156]	; (80142a0 <tcp_send_empty_ack+0xbc>)
 8014202:	4828      	ldr	r0, [pc, #160]	; (80142a4 <tcp_send_empty_ack+0xc0>)
 8014204:	f003 ff8a 	bl	801811c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014208:	7dfb      	ldrb	r3, [r7, #23]
 801420a:	009b      	lsls	r3, r3, #2
 801420c:	b2db      	uxtb	r3, r3
 801420e:	f003 0304 	and.w	r3, r3, #4
 8014212:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014214:	7d7b      	ldrb	r3, [r7, #21]
 8014216:	b29c      	uxth	r4, r3
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801421c:	4618      	mov	r0, r3
 801421e:	f7f8 fbbb 	bl	800c998 <lwip_htonl>
 8014222:	4603      	mov	r3, r0
 8014224:	2200      	movs	r2, #0
 8014226:	4621      	mov	r1, r4
 8014228:	6878      	ldr	r0, [r7, #4]
 801422a:	f7ff fec5 	bl	8013fb8 <tcp_output_alloc_header>
 801422e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014230:	693b      	ldr	r3, [r7, #16]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d109      	bne.n	801424a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	8b5b      	ldrh	r3, [r3, #26]
 801423a:	f043 0303 	orr.w	r3, r3, #3
 801423e:	b29a      	uxth	r2, r3
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014244:	f06f 0301 	mvn.w	r3, #1
 8014248:	e023      	b.n	8014292 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801424a:	7dbb      	ldrb	r3, [r7, #22]
 801424c:	7dfa      	ldrb	r2, [r7, #23]
 801424e:	6939      	ldr	r1, [r7, #16]
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f7ff feef 	bl	8014034 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014256:	687a      	ldr	r2, [r7, #4]
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	3304      	adds	r3, #4
 801425c:	6939      	ldr	r1, [r7, #16]
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f7ff ff26 	bl	80140b0 <tcp_output_control_segment>
 8014264:	4603      	mov	r3, r0
 8014266:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d007      	beq.n	8014280 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	8b5b      	ldrh	r3, [r3, #26]
 8014274:	f043 0303 	orr.w	r3, r3, #3
 8014278:	b29a      	uxth	r2, r3
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	835a      	strh	r2, [r3, #26]
 801427e:	e006      	b.n	801428e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	8b5b      	ldrh	r3, [r3, #26]
 8014284:	f023 0303 	bic.w	r3, r3, #3
 8014288:	b29a      	uxth	r2, r3
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801428e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014292:	4618      	mov	r0, r3
 8014294:	371c      	adds	r7, #28
 8014296:	46bd      	mov	sp, r7
 8014298:	bd90      	pop	{r4, r7, pc}
 801429a:	bf00      	nop
 801429c:	0801a674 	.word	0x0801a674
 80142a0:	0801ae30 	.word	0x0801ae30
 80142a4:	0801a6c8 	.word	0x0801a6c8

080142a8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80142a8:	b590      	push	{r4, r7, lr}
 80142aa:	b087      	sub	sp, #28
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80142b0:	2300      	movs	r3, #0
 80142b2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d106      	bne.n	80142c8 <tcp_keepalive+0x20>
 80142ba:	4b18      	ldr	r3, [pc, #96]	; (801431c <tcp_keepalive+0x74>)
 80142bc:	f640 0224 	movw	r2, #2084	; 0x824
 80142c0:	4917      	ldr	r1, [pc, #92]	; (8014320 <tcp_keepalive+0x78>)
 80142c2:	4818      	ldr	r0, [pc, #96]	; (8014324 <tcp_keepalive+0x7c>)
 80142c4:	f003 ff2a 	bl	801811c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80142c8:	7dfb      	ldrb	r3, [r7, #23]
 80142ca:	b29c      	uxth	r4, r3
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80142d0:	3b01      	subs	r3, #1
 80142d2:	4618      	mov	r0, r3
 80142d4:	f7f8 fb60 	bl	800c998 <lwip_htonl>
 80142d8:	4603      	mov	r3, r0
 80142da:	2200      	movs	r2, #0
 80142dc:	4621      	mov	r1, r4
 80142de:	6878      	ldr	r0, [r7, #4]
 80142e0:	f7ff fe6a 	bl	8013fb8 <tcp_output_alloc_header>
 80142e4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80142e6:	693b      	ldr	r3, [r7, #16]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d102      	bne.n	80142f2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80142ec:	f04f 33ff 	mov.w	r3, #4294967295
 80142f0:	e010      	b.n	8014314 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80142f2:	7dfb      	ldrb	r3, [r7, #23]
 80142f4:	2200      	movs	r2, #0
 80142f6:	6939      	ldr	r1, [r7, #16]
 80142f8:	6878      	ldr	r0, [r7, #4]
 80142fa:	f7ff fe9b 	bl	8014034 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80142fe:	687a      	ldr	r2, [r7, #4]
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	3304      	adds	r3, #4
 8014304:	6939      	ldr	r1, [r7, #16]
 8014306:	6878      	ldr	r0, [r7, #4]
 8014308:	f7ff fed2 	bl	80140b0 <tcp_output_control_segment>
 801430c:	4603      	mov	r3, r0
 801430e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014310:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014314:	4618      	mov	r0, r3
 8014316:	371c      	adds	r7, #28
 8014318:	46bd      	mov	sp, r7
 801431a:	bd90      	pop	{r4, r7, pc}
 801431c:	0801a674 	.word	0x0801a674
 8014320:	0801ae50 	.word	0x0801ae50
 8014324:	0801a6c8 	.word	0x0801a6c8

08014328 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014328:	b590      	push	{r4, r7, lr}
 801432a:	b08b      	sub	sp, #44	; 0x2c
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014330:	2300      	movs	r3, #0
 8014332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d106      	bne.n	801434a <tcp_zero_window_probe+0x22>
 801433c:	4b4c      	ldr	r3, [pc, #304]	; (8014470 <tcp_zero_window_probe+0x148>)
 801433e:	f640 024f 	movw	r2, #2127	; 0x84f
 8014342:	494c      	ldr	r1, [pc, #304]	; (8014474 <tcp_zero_window_probe+0x14c>)
 8014344:	484c      	ldr	r0, [pc, #304]	; (8014478 <tcp_zero_window_probe+0x150>)
 8014346:	f003 fee9 	bl	801811c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801434e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014350:	6a3b      	ldr	r3, [r7, #32]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d101      	bne.n	801435a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014356:	2300      	movs	r3, #0
 8014358:	e086      	b.n	8014468 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014360:	2bff      	cmp	r3, #255	; 0xff
 8014362:	d007      	beq.n	8014374 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801436a:	3301      	adds	r3, #1
 801436c:	b2da      	uxtb	r2, r3
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014374:	6a3b      	ldr	r3, [r7, #32]
 8014376:	68db      	ldr	r3, [r3, #12]
 8014378:	899b      	ldrh	r3, [r3, #12]
 801437a:	b29b      	uxth	r3, r3
 801437c:	4618      	mov	r0, r3
 801437e:	f7f8 faf6 	bl	800c96e <lwip_htons>
 8014382:	4603      	mov	r3, r0
 8014384:	b2db      	uxtb	r3, r3
 8014386:	f003 0301 	and.w	r3, r3, #1
 801438a:	2b00      	cmp	r3, #0
 801438c:	d005      	beq.n	801439a <tcp_zero_window_probe+0x72>
 801438e:	6a3b      	ldr	r3, [r7, #32]
 8014390:	891b      	ldrh	r3, [r3, #8]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d101      	bne.n	801439a <tcp_zero_window_probe+0x72>
 8014396:	2301      	movs	r3, #1
 8014398:	e000      	b.n	801439c <tcp_zero_window_probe+0x74>
 801439a:	2300      	movs	r3, #0
 801439c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801439e:	7ffb      	ldrb	r3, [r7, #31]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	bf0c      	ite	eq
 80143a4:	2301      	moveq	r3, #1
 80143a6:	2300      	movne	r3, #0
 80143a8:	b2db      	uxtb	r3, r3
 80143aa:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80143ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143b0:	b299      	uxth	r1, r3
 80143b2:	6a3b      	ldr	r3, [r7, #32]
 80143b4:	68db      	ldr	r3, [r3, #12]
 80143b6:	685b      	ldr	r3, [r3, #4]
 80143b8:	8bba      	ldrh	r2, [r7, #28]
 80143ba:	6878      	ldr	r0, [r7, #4]
 80143bc:	f7ff fdfc 	bl	8013fb8 <tcp_output_alloc_header>
 80143c0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80143c2:	69bb      	ldr	r3, [r7, #24]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d102      	bne.n	80143ce <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80143c8:	f04f 33ff 	mov.w	r3, #4294967295
 80143cc:	e04c      	b.n	8014468 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80143ce:	69bb      	ldr	r3, [r7, #24]
 80143d0:	685b      	ldr	r3, [r3, #4]
 80143d2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80143d4:	7ffb      	ldrb	r3, [r7, #31]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d011      	beq.n	80143fe <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80143da:	697b      	ldr	r3, [r7, #20]
 80143dc:	899b      	ldrh	r3, [r3, #12]
 80143de:	b29b      	uxth	r3, r3
 80143e0:	b21b      	sxth	r3, r3
 80143e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80143e6:	b21c      	sxth	r4, r3
 80143e8:	2011      	movs	r0, #17
 80143ea:	f7f8 fac0 	bl	800c96e <lwip_htons>
 80143ee:	4603      	mov	r3, r0
 80143f0:	b21b      	sxth	r3, r3
 80143f2:	4323      	orrs	r3, r4
 80143f4:	b21b      	sxth	r3, r3
 80143f6:	b29a      	uxth	r2, r3
 80143f8:	697b      	ldr	r3, [r7, #20]
 80143fa:	819a      	strh	r2, [r3, #12]
 80143fc:	e010      	b.n	8014420 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80143fe:	69bb      	ldr	r3, [r7, #24]
 8014400:	685b      	ldr	r3, [r3, #4]
 8014402:	3314      	adds	r3, #20
 8014404:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014406:	6a3b      	ldr	r3, [r7, #32]
 8014408:	6858      	ldr	r0, [r3, #4]
 801440a:	6a3b      	ldr	r3, [r7, #32]
 801440c:	685b      	ldr	r3, [r3, #4]
 801440e:	891a      	ldrh	r2, [r3, #8]
 8014410:	6a3b      	ldr	r3, [r7, #32]
 8014412:	891b      	ldrh	r3, [r3, #8]
 8014414:	1ad3      	subs	r3, r2, r3
 8014416:	b29b      	uxth	r3, r3
 8014418:	2201      	movs	r2, #1
 801441a:	6939      	ldr	r1, [r7, #16]
 801441c:	f7f9 ffee 	bl	800e3fc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014420:	6a3b      	ldr	r3, [r7, #32]
 8014422:	68db      	ldr	r3, [r3, #12]
 8014424:	685b      	ldr	r3, [r3, #4]
 8014426:	4618      	mov	r0, r3
 8014428:	f7f8 fab6 	bl	800c998 <lwip_htonl>
 801442c:	4603      	mov	r3, r0
 801442e:	3301      	adds	r3, #1
 8014430:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	1ad3      	subs	r3, r2, r3
 801443a:	2b00      	cmp	r3, #0
 801443c:	da02      	bge.n	8014444 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	68fa      	ldr	r2, [r7, #12]
 8014442:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014448:	2200      	movs	r2, #0
 801444a:	69b9      	ldr	r1, [r7, #24]
 801444c:	6878      	ldr	r0, [r7, #4]
 801444e:	f7ff fdf1 	bl	8014034 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014452:	687a      	ldr	r2, [r7, #4]
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	3304      	adds	r3, #4
 8014458:	69b9      	ldr	r1, [r7, #24]
 801445a:	6878      	ldr	r0, [r7, #4]
 801445c:	f7ff fe28 	bl	80140b0 <tcp_output_control_segment>
 8014460:	4603      	mov	r3, r0
 8014462:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014464:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014468:	4618      	mov	r0, r3
 801446a:	372c      	adds	r7, #44	; 0x2c
 801446c:	46bd      	mov	sp, r7
 801446e:	bd90      	pop	{r4, r7, pc}
 8014470:	0801a674 	.word	0x0801a674
 8014474:	0801ae6c 	.word	0x0801ae6c
 8014478:	0801a6c8 	.word	0x0801a6c8

0801447c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b082      	sub	sp, #8
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014484:	f7fa f8a8 	bl	800e5d8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014488:	4b0a      	ldr	r3, [pc, #40]	; (80144b4 <tcpip_tcp_timer+0x38>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d103      	bne.n	8014498 <tcpip_tcp_timer+0x1c>
 8014490:	4b09      	ldr	r3, [pc, #36]	; (80144b8 <tcpip_tcp_timer+0x3c>)
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d005      	beq.n	80144a4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014498:	2200      	movs	r2, #0
 801449a:	4908      	ldr	r1, [pc, #32]	; (80144bc <tcpip_tcp_timer+0x40>)
 801449c:	20fa      	movs	r0, #250	; 0xfa
 801449e:	f000 f8f3 	bl	8014688 <sys_timeout>
 80144a2:	e003      	b.n	80144ac <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80144a4:	4b06      	ldr	r3, [pc, #24]	; (80144c0 <tcpip_tcp_timer+0x44>)
 80144a6:	2200      	movs	r2, #0
 80144a8:	601a      	str	r2, [r3, #0]
  }
}
 80144aa:	bf00      	nop
 80144ac:	bf00      	nop
 80144ae:	3708      	adds	r7, #8
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}
 80144b4:	2000814c 	.word	0x2000814c
 80144b8:	20008150 	.word	0x20008150
 80144bc:	0801447d 	.word	0x0801447d
 80144c0:	20008198 	.word	0x20008198

080144c4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80144c8:	4b0a      	ldr	r3, [pc, #40]	; (80144f4 <tcp_timer_needed+0x30>)
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d10f      	bne.n	80144f0 <tcp_timer_needed+0x2c>
 80144d0:	4b09      	ldr	r3, [pc, #36]	; (80144f8 <tcp_timer_needed+0x34>)
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d103      	bne.n	80144e0 <tcp_timer_needed+0x1c>
 80144d8:	4b08      	ldr	r3, [pc, #32]	; (80144fc <tcp_timer_needed+0x38>)
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d007      	beq.n	80144f0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80144e0:	4b04      	ldr	r3, [pc, #16]	; (80144f4 <tcp_timer_needed+0x30>)
 80144e2:	2201      	movs	r2, #1
 80144e4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80144e6:	2200      	movs	r2, #0
 80144e8:	4905      	ldr	r1, [pc, #20]	; (8014500 <tcp_timer_needed+0x3c>)
 80144ea:	20fa      	movs	r0, #250	; 0xfa
 80144ec:	f000 f8cc 	bl	8014688 <sys_timeout>
  }
}
 80144f0:	bf00      	nop
 80144f2:	bd80      	pop	{r7, pc}
 80144f4:	20008198 	.word	0x20008198
 80144f8:	2000814c 	.word	0x2000814c
 80144fc:	20008150 	.word	0x20008150
 8014500:	0801447d 	.word	0x0801447d

08014504 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b086      	sub	sp, #24
 8014508:	af00      	add	r7, sp, #0
 801450a:	60f8      	str	r0, [r7, #12]
 801450c:	60b9      	str	r1, [r7, #8]
 801450e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014510:	2006      	movs	r0, #6
 8014512:	f7f8 fea3 	bl	800d25c <memp_malloc>
 8014516:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014518:	693b      	ldr	r3, [r7, #16]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d109      	bne.n	8014532 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d151      	bne.n	80145c8 <sys_timeout_abs+0xc4>
 8014524:	4b2a      	ldr	r3, [pc, #168]	; (80145d0 <sys_timeout_abs+0xcc>)
 8014526:	22be      	movs	r2, #190	; 0xbe
 8014528:	492a      	ldr	r1, [pc, #168]	; (80145d4 <sys_timeout_abs+0xd0>)
 801452a:	482b      	ldr	r0, [pc, #172]	; (80145d8 <sys_timeout_abs+0xd4>)
 801452c:	f003 fdf6 	bl	801811c <iprintf>
    return;
 8014530:	e04a      	b.n	80145c8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014532:	693b      	ldr	r3, [r7, #16]
 8014534:	2200      	movs	r2, #0
 8014536:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014538:	693b      	ldr	r3, [r7, #16]
 801453a:	68ba      	ldr	r2, [r7, #8]
 801453c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801453e:	693b      	ldr	r3, [r7, #16]
 8014540:	687a      	ldr	r2, [r7, #4]
 8014542:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014544:	693b      	ldr	r3, [r7, #16]
 8014546:	68fa      	ldr	r2, [r7, #12]
 8014548:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801454a:	4b24      	ldr	r3, [pc, #144]	; (80145dc <sys_timeout_abs+0xd8>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d103      	bne.n	801455a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014552:	4a22      	ldr	r2, [pc, #136]	; (80145dc <sys_timeout_abs+0xd8>)
 8014554:	693b      	ldr	r3, [r7, #16]
 8014556:	6013      	str	r3, [r2, #0]
    return;
 8014558:	e037      	b.n	80145ca <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801455a:	693b      	ldr	r3, [r7, #16]
 801455c:	685a      	ldr	r2, [r3, #4]
 801455e:	4b1f      	ldr	r3, [pc, #124]	; (80145dc <sys_timeout_abs+0xd8>)
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	685b      	ldr	r3, [r3, #4]
 8014564:	1ad3      	subs	r3, r2, r3
 8014566:	0fdb      	lsrs	r3, r3, #31
 8014568:	f003 0301 	and.w	r3, r3, #1
 801456c:	b2db      	uxtb	r3, r3
 801456e:	2b00      	cmp	r3, #0
 8014570:	d007      	beq.n	8014582 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014572:	4b1a      	ldr	r3, [pc, #104]	; (80145dc <sys_timeout_abs+0xd8>)
 8014574:	681a      	ldr	r2, [r3, #0]
 8014576:	693b      	ldr	r3, [r7, #16]
 8014578:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801457a:	4a18      	ldr	r2, [pc, #96]	; (80145dc <sys_timeout_abs+0xd8>)
 801457c:	693b      	ldr	r3, [r7, #16]
 801457e:	6013      	str	r3, [r2, #0]
 8014580:	e023      	b.n	80145ca <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014582:	4b16      	ldr	r3, [pc, #88]	; (80145dc <sys_timeout_abs+0xd8>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	617b      	str	r3, [r7, #20]
 8014588:	e01a      	b.n	80145c0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801458a:	697b      	ldr	r3, [r7, #20]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d00b      	beq.n	80145aa <sys_timeout_abs+0xa6>
 8014592:	693b      	ldr	r3, [r7, #16]
 8014594:	685a      	ldr	r2, [r3, #4]
 8014596:	697b      	ldr	r3, [r7, #20]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	685b      	ldr	r3, [r3, #4]
 801459c:	1ad3      	subs	r3, r2, r3
 801459e:	0fdb      	lsrs	r3, r3, #31
 80145a0:	f003 0301 	and.w	r3, r3, #1
 80145a4:	b2db      	uxtb	r3, r3
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d007      	beq.n	80145ba <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80145aa:	697b      	ldr	r3, [r7, #20]
 80145ac:	681a      	ldr	r2, [r3, #0]
 80145ae:	693b      	ldr	r3, [r7, #16]
 80145b0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80145b2:	697b      	ldr	r3, [r7, #20]
 80145b4:	693a      	ldr	r2, [r7, #16]
 80145b6:	601a      	str	r2, [r3, #0]
        break;
 80145b8:	e007      	b.n	80145ca <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	617b      	str	r3, [r7, #20]
 80145c0:	697b      	ldr	r3, [r7, #20]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d1e1      	bne.n	801458a <sys_timeout_abs+0x86>
 80145c6:	e000      	b.n	80145ca <sys_timeout_abs+0xc6>
    return;
 80145c8:	bf00      	nop
      }
    }
  }
}
 80145ca:	3718      	adds	r7, #24
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}
 80145d0:	0801ae90 	.word	0x0801ae90
 80145d4:	0801aec4 	.word	0x0801aec4
 80145d8:	0801af04 	.word	0x0801af04
 80145dc:	20008190 	.word	0x20008190

080145e0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b086      	sub	sp, #24
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80145ec:	697b      	ldr	r3, [r7, #20]
 80145ee:	685b      	ldr	r3, [r3, #4]
 80145f0:	4798      	blx	r3

  now = sys_now();
 80145f2:	f7f3 fffd 	bl	80085f0 <sys_now>
 80145f6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80145f8:	697b      	ldr	r3, [r7, #20]
 80145fa:	681a      	ldr	r2, [r3, #0]
 80145fc:	4b0f      	ldr	r3, [pc, #60]	; (801463c <lwip_cyclic_timer+0x5c>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	4413      	add	r3, r2
 8014602:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014604:	68fa      	ldr	r2, [r7, #12]
 8014606:	693b      	ldr	r3, [r7, #16]
 8014608:	1ad3      	subs	r3, r2, r3
 801460a:	0fdb      	lsrs	r3, r3, #31
 801460c:	f003 0301 	and.w	r3, r3, #1
 8014610:	b2db      	uxtb	r3, r3
 8014612:	2b00      	cmp	r3, #0
 8014614:	d009      	beq.n	801462a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014616:	697b      	ldr	r3, [r7, #20]
 8014618:	681a      	ldr	r2, [r3, #0]
 801461a:	693b      	ldr	r3, [r7, #16]
 801461c:	4413      	add	r3, r2
 801461e:	687a      	ldr	r2, [r7, #4]
 8014620:	4907      	ldr	r1, [pc, #28]	; (8014640 <lwip_cyclic_timer+0x60>)
 8014622:	4618      	mov	r0, r3
 8014624:	f7ff ff6e 	bl	8014504 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014628:	e004      	b.n	8014634 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801462a:	687a      	ldr	r2, [r7, #4]
 801462c:	4904      	ldr	r1, [pc, #16]	; (8014640 <lwip_cyclic_timer+0x60>)
 801462e:	68f8      	ldr	r0, [r7, #12]
 8014630:	f7ff ff68 	bl	8014504 <sys_timeout_abs>
}
 8014634:	bf00      	nop
 8014636:	3718      	adds	r7, #24
 8014638:	46bd      	mov	sp, r7
 801463a:	bd80      	pop	{r7, pc}
 801463c:	20008194 	.word	0x20008194
 8014640:	080145e1 	.word	0x080145e1

08014644 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014644:	b580      	push	{r7, lr}
 8014646:	b082      	sub	sp, #8
 8014648:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801464a:	2301      	movs	r3, #1
 801464c:	607b      	str	r3, [r7, #4]
 801464e:	e00e      	b.n	801466e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014650:	4a0b      	ldr	r2, [pc, #44]	; (8014680 <sys_timeouts_init+0x3c>)
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	00db      	lsls	r3, r3, #3
 801465c:	4a08      	ldr	r2, [pc, #32]	; (8014680 <sys_timeouts_init+0x3c>)
 801465e:	4413      	add	r3, r2
 8014660:	461a      	mov	r2, r3
 8014662:	4908      	ldr	r1, [pc, #32]	; (8014684 <sys_timeouts_init+0x40>)
 8014664:	f000 f810 	bl	8014688 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	3301      	adds	r3, #1
 801466c:	607b      	str	r3, [r7, #4]
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	2b02      	cmp	r3, #2
 8014672:	d9ed      	bls.n	8014650 <sys_timeouts_init+0xc>
  }
}
 8014674:	bf00      	nop
 8014676:	bf00      	nop
 8014678:	3708      	adds	r7, #8
 801467a:	46bd      	mov	sp, r7
 801467c:	bd80      	pop	{r7, pc}
 801467e:	bf00      	nop
 8014680:	0801bafc 	.word	0x0801bafc
 8014684:	080145e1 	.word	0x080145e1

08014688 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b086      	sub	sp, #24
 801468c:	af00      	add	r7, sp, #0
 801468e:	60f8      	str	r0, [r7, #12]
 8014690:	60b9      	str	r1, [r7, #8]
 8014692:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801469a:	d306      	bcc.n	80146aa <sys_timeout+0x22>
 801469c:	4b0a      	ldr	r3, [pc, #40]	; (80146c8 <sys_timeout+0x40>)
 801469e:	f240 1229 	movw	r2, #297	; 0x129
 80146a2:	490a      	ldr	r1, [pc, #40]	; (80146cc <sys_timeout+0x44>)
 80146a4:	480a      	ldr	r0, [pc, #40]	; (80146d0 <sys_timeout+0x48>)
 80146a6:	f003 fd39 	bl	801811c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80146aa:	f7f3 ffa1 	bl	80085f0 <sys_now>
 80146ae:	4602      	mov	r2, r0
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	4413      	add	r3, r2
 80146b4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80146b6:	687a      	ldr	r2, [r7, #4]
 80146b8:	68b9      	ldr	r1, [r7, #8]
 80146ba:	6978      	ldr	r0, [r7, #20]
 80146bc:	f7ff ff22 	bl	8014504 <sys_timeout_abs>
#endif
}
 80146c0:	bf00      	nop
 80146c2:	3718      	adds	r7, #24
 80146c4:	46bd      	mov	sp, r7
 80146c6:	bd80      	pop	{r7, pc}
 80146c8:	0801ae90 	.word	0x0801ae90
 80146cc:	0801af2c 	.word	0x0801af2c
 80146d0:	0801af04 	.word	0x0801af04

080146d4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b084      	sub	sp, #16
 80146d8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80146da:	f7f3 ff89 	bl	80085f0 <sys_now>
 80146de:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80146e0:	4b1a      	ldr	r3, [pc, #104]	; (801474c <sys_check_timeouts+0x78>)
 80146e2:	781b      	ldrb	r3, [r3, #0]
 80146e4:	b2db      	uxtb	r3, r3
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d001      	beq.n	80146ee <sys_check_timeouts+0x1a>
 80146ea:	f7f9 f963 	bl	800d9b4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80146ee:	4b18      	ldr	r3, [pc, #96]	; (8014750 <sys_check_timeouts+0x7c>)
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80146f4:	68bb      	ldr	r3, [r7, #8]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d022      	beq.n	8014740 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	685b      	ldr	r3, [r3, #4]
 80146fe:	68fa      	ldr	r2, [r7, #12]
 8014700:	1ad3      	subs	r3, r2, r3
 8014702:	0fdb      	lsrs	r3, r3, #31
 8014704:	f003 0301 	and.w	r3, r3, #1
 8014708:	b2db      	uxtb	r3, r3
 801470a:	2b00      	cmp	r3, #0
 801470c:	d11a      	bne.n	8014744 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801470e:	68bb      	ldr	r3, [r7, #8]
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	4a0f      	ldr	r2, [pc, #60]	; (8014750 <sys_check_timeouts+0x7c>)
 8014714:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014716:	68bb      	ldr	r3, [r7, #8]
 8014718:	689b      	ldr	r3, [r3, #8]
 801471a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801471c:	68bb      	ldr	r3, [r7, #8]
 801471e:	68db      	ldr	r3, [r3, #12]
 8014720:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014722:	68bb      	ldr	r3, [r7, #8]
 8014724:	685b      	ldr	r3, [r3, #4]
 8014726:	4a0b      	ldr	r2, [pc, #44]	; (8014754 <sys_check_timeouts+0x80>)
 8014728:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801472a:	68b9      	ldr	r1, [r7, #8]
 801472c:	2006      	movs	r0, #6
 801472e:	f7f8 fe05 	bl	800d33c <memp_free>
    if (handler != NULL) {
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d0d3      	beq.n	80146e0 <sys_check_timeouts+0xc>
      handler(arg);
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	6838      	ldr	r0, [r7, #0]
 801473c:	4798      	blx	r3
  do {
 801473e:	e7cf      	b.n	80146e0 <sys_check_timeouts+0xc>
      return;
 8014740:	bf00      	nop
 8014742:	e000      	b.n	8014746 <sys_check_timeouts+0x72>
      return;
 8014744:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014746:	3710      	adds	r7, #16
 8014748:	46bd      	mov	sp, r7
 801474a:	bd80      	pop	{r7, pc}
 801474c:	2000813d 	.word	0x2000813d
 8014750:	20008190 	.word	0x20008190
 8014754:	20008194 	.word	0x20008194

08014758 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014758:	b580      	push	{r7, lr}
 801475a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801475c:	f003 fb52 	bl	8017e04 <rand>
 8014760:	4603      	mov	r3, r0
 8014762:	b29b      	uxth	r3, r3
 8014764:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014768:	b29b      	uxth	r3, r3
 801476a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801476e:	b29a      	uxth	r2, r3
 8014770:	4b01      	ldr	r3, [pc, #4]	; (8014778 <udp_init+0x20>)
 8014772:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014774:	bf00      	nop
 8014776:	bd80      	pop	{r7, pc}
 8014778:	20000148 	.word	0x20000148

0801477c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b084      	sub	sp, #16
 8014780:	af00      	add	r7, sp, #0
 8014782:	60f8      	str	r0, [r7, #12]
 8014784:	60b9      	str	r1, [r7, #8]
 8014786:	4613      	mov	r3, r2
 8014788:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d105      	bne.n	801479c <udp_input_local_match+0x20>
 8014790:	4b27      	ldr	r3, [pc, #156]	; (8014830 <udp_input_local_match+0xb4>)
 8014792:	2287      	movs	r2, #135	; 0x87
 8014794:	4927      	ldr	r1, [pc, #156]	; (8014834 <udp_input_local_match+0xb8>)
 8014796:	4828      	ldr	r0, [pc, #160]	; (8014838 <udp_input_local_match+0xbc>)
 8014798:	f003 fcc0 	bl	801811c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801479c:	68bb      	ldr	r3, [r7, #8]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d105      	bne.n	80147ae <udp_input_local_match+0x32>
 80147a2:	4b23      	ldr	r3, [pc, #140]	; (8014830 <udp_input_local_match+0xb4>)
 80147a4:	2288      	movs	r2, #136	; 0x88
 80147a6:	4925      	ldr	r1, [pc, #148]	; (801483c <udp_input_local_match+0xc0>)
 80147a8:	4823      	ldr	r0, [pc, #140]	; (8014838 <udp_input_local_match+0xbc>)
 80147aa:	f003 fcb7 	bl	801811c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	7a1b      	ldrb	r3, [r3, #8]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d00b      	beq.n	80147ce <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	7a1a      	ldrb	r2, [r3, #8]
 80147ba:	4b21      	ldr	r3, [pc, #132]	; (8014840 <udp_input_local_match+0xc4>)
 80147bc:	685b      	ldr	r3, [r3, #4]
 80147be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80147c2:	3301      	adds	r3, #1
 80147c4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80147c6:	429a      	cmp	r2, r3
 80147c8:	d001      	beq.n	80147ce <udp_input_local_match+0x52>
    return 0;
 80147ca:	2300      	movs	r3, #0
 80147cc:	e02b      	b.n	8014826 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80147ce:	79fb      	ldrb	r3, [r7, #7]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d018      	beq.n	8014806 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d013      	beq.n	8014802 <udp_input_local_match+0x86>
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d00f      	beq.n	8014802 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80147e2:	4b17      	ldr	r3, [pc, #92]	; (8014840 <udp_input_local_match+0xc4>)
 80147e4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80147e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147ea:	d00a      	beq.n	8014802 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	681a      	ldr	r2, [r3, #0]
 80147f0:	4b13      	ldr	r3, [pc, #76]	; (8014840 <udp_input_local_match+0xc4>)
 80147f2:	695b      	ldr	r3, [r3, #20]
 80147f4:	405a      	eors	r2, r3
 80147f6:	68bb      	ldr	r3, [r7, #8]
 80147f8:	3308      	adds	r3, #8
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d110      	bne.n	8014824 <udp_input_local_match+0xa8>
          return 1;
 8014802:	2301      	movs	r3, #1
 8014804:	e00f      	b.n	8014826 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d009      	beq.n	8014820 <udp_input_local_match+0xa4>
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d005      	beq.n	8014820 <udp_input_local_match+0xa4>
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	681a      	ldr	r2, [r3, #0]
 8014818:	4b09      	ldr	r3, [pc, #36]	; (8014840 <udp_input_local_match+0xc4>)
 801481a:	695b      	ldr	r3, [r3, #20]
 801481c:	429a      	cmp	r2, r3
 801481e:	d101      	bne.n	8014824 <udp_input_local_match+0xa8>
        return 1;
 8014820:	2301      	movs	r3, #1
 8014822:	e000      	b.n	8014826 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014824:	2300      	movs	r3, #0
}
 8014826:	4618      	mov	r0, r3
 8014828:	3710      	adds	r7, #16
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}
 801482e:	bf00      	nop
 8014830:	0801af78 	.word	0x0801af78
 8014834:	0801afa8 	.word	0x0801afa8
 8014838:	0801afcc 	.word	0x0801afcc
 801483c:	0801aff4 	.word	0x0801aff4
 8014840:	20005010 	.word	0x20005010

08014844 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014844:	b590      	push	{r4, r7, lr}
 8014846:	b08d      	sub	sp, #52	; 0x34
 8014848:	af02      	add	r7, sp, #8
 801484a:	6078      	str	r0, [r7, #4]
 801484c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801484e:	2300      	movs	r3, #0
 8014850:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d105      	bne.n	8014864 <udp_input+0x20>
 8014858:	4b7c      	ldr	r3, [pc, #496]	; (8014a4c <udp_input+0x208>)
 801485a:	22cf      	movs	r2, #207	; 0xcf
 801485c:	497c      	ldr	r1, [pc, #496]	; (8014a50 <udp_input+0x20c>)
 801485e:	487d      	ldr	r0, [pc, #500]	; (8014a54 <udp_input+0x210>)
 8014860:	f003 fc5c 	bl	801811c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d105      	bne.n	8014876 <udp_input+0x32>
 801486a:	4b78      	ldr	r3, [pc, #480]	; (8014a4c <udp_input+0x208>)
 801486c:	22d0      	movs	r2, #208	; 0xd0
 801486e:	497a      	ldr	r1, [pc, #488]	; (8014a58 <udp_input+0x214>)
 8014870:	4878      	ldr	r0, [pc, #480]	; (8014a54 <udp_input+0x210>)
 8014872:	f003 fc53 	bl	801811c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	895b      	ldrh	r3, [r3, #10]
 801487a:	2b07      	cmp	r3, #7
 801487c:	d803      	bhi.n	8014886 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801487e:	6878      	ldr	r0, [r7, #4]
 8014880:	f7f9 fbd2 	bl	800e028 <pbuf_free>
    goto end;
 8014884:	e0de      	b.n	8014a44 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	685b      	ldr	r3, [r3, #4]
 801488a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801488c:	4b73      	ldr	r3, [pc, #460]	; (8014a5c <udp_input+0x218>)
 801488e:	695b      	ldr	r3, [r3, #20]
 8014890:	4a72      	ldr	r2, [pc, #456]	; (8014a5c <udp_input+0x218>)
 8014892:	6812      	ldr	r2, [r2, #0]
 8014894:	4611      	mov	r1, r2
 8014896:	4618      	mov	r0, r3
 8014898:	f001 fc88 	bl	80161ac <ip4_addr_isbroadcast_u32>
 801489c:	4603      	mov	r3, r0
 801489e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80148a0:	697b      	ldr	r3, [r7, #20]
 80148a2:	881b      	ldrh	r3, [r3, #0]
 80148a4:	b29b      	uxth	r3, r3
 80148a6:	4618      	mov	r0, r3
 80148a8:	f7f8 f861 	bl	800c96e <lwip_htons>
 80148ac:	4603      	mov	r3, r0
 80148ae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80148b0:	697b      	ldr	r3, [r7, #20]
 80148b2:	885b      	ldrh	r3, [r3, #2]
 80148b4:	b29b      	uxth	r3, r3
 80148b6:	4618      	mov	r0, r3
 80148b8:	f7f8 f859 	bl	800c96e <lwip_htons>
 80148bc:	4603      	mov	r3, r0
 80148be:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80148c0:	2300      	movs	r3, #0
 80148c2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80148c4:	2300      	movs	r3, #0
 80148c6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80148c8:	2300      	movs	r3, #0
 80148ca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80148cc:	4b64      	ldr	r3, [pc, #400]	; (8014a60 <udp_input+0x21c>)
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	627b      	str	r3, [r7, #36]	; 0x24
 80148d2:	e054      	b.n	801497e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80148d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d6:	8a5b      	ldrh	r3, [r3, #18]
 80148d8:	89fa      	ldrh	r2, [r7, #14]
 80148da:	429a      	cmp	r2, r3
 80148dc:	d14a      	bne.n	8014974 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80148de:	7cfb      	ldrb	r3, [r7, #19]
 80148e0:	461a      	mov	r2, r3
 80148e2:	6839      	ldr	r1, [r7, #0]
 80148e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148e6:	f7ff ff49 	bl	801477c <udp_input_local_match>
 80148ea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d041      	beq.n	8014974 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80148f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f2:	7c1b      	ldrb	r3, [r3, #16]
 80148f4:	f003 0304 	and.w	r3, r3, #4
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d11d      	bne.n	8014938 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80148fc:	69fb      	ldr	r3, [r7, #28]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d102      	bne.n	8014908 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014904:	61fb      	str	r3, [r7, #28]
 8014906:	e017      	b.n	8014938 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014908:	7cfb      	ldrb	r3, [r7, #19]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d014      	beq.n	8014938 <udp_input+0xf4>
 801490e:	4b53      	ldr	r3, [pc, #332]	; (8014a5c <udp_input+0x218>)
 8014910:	695b      	ldr	r3, [r3, #20]
 8014912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014916:	d10f      	bne.n	8014938 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014918:	69fb      	ldr	r3, [r7, #28]
 801491a:	681a      	ldr	r2, [r3, #0]
 801491c:	683b      	ldr	r3, [r7, #0]
 801491e:	3304      	adds	r3, #4
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	429a      	cmp	r2, r3
 8014924:	d008      	beq.n	8014938 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014928:	681a      	ldr	r2, [r3, #0]
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	3304      	adds	r3, #4
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	429a      	cmp	r2, r3
 8014932:	d101      	bne.n	8014938 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014936:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801493a:	8a9b      	ldrh	r3, [r3, #20]
 801493c:	8a3a      	ldrh	r2, [r7, #16]
 801493e:	429a      	cmp	r2, r3
 8014940:	d118      	bne.n	8014974 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014944:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014946:	2b00      	cmp	r3, #0
 8014948:	d005      	beq.n	8014956 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801494c:	685a      	ldr	r2, [r3, #4]
 801494e:	4b43      	ldr	r3, [pc, #268]	; (8014a5c <udp_input+0x218>)
 8014950:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014952:	429a      	cmp	r2, r3
 8014954:	d10e      	bne.n	8014974 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014956:	6a3b      	ldr	r3, [r7, #32]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d014      	beq.n	8014986 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801495e:	68da      	ldr	r2, [r3, #12]
 8014960:	6a3b      	ldr	r3, [r7, #32]
 8014962:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014964:	4b3e      	ldr	r3, [pc, #248]	; (8014a60 <udp_input+0x21c>)
 8014966:	681a      	ldr	r2, [r3, #0]
 8014968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801496a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801496c:	4a3c      	ldr	r2, [pc, #240]	; (8014a60 <udp_input+0x21c>)
 801496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014970:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014972:	e008      	b.n	8014986 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014976:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801497a:	68db      	ldr	r3, [r3, #12]
 801497c:	627b      	str	r3, [r7, #36]	; 0x24
 801497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014980:	2b00      	cmp	r3, #0
 8014982:	d1a7      	bne.n	80148d4 <udp_input+0x90>
 8014984:	e000      	b.n	8014988 <udp_input+0x144>
        break;
 8014986:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801498a:	2b00      	cmp	r3, #0
 801498c:	d101      	bne.n	8014992 <udp_input+0x14e>
    pcb = uncon_pcb;
 801498e:	69fb      	ldr	r3, [r7, #28]
 8014990:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014994:	2b00      	cmp	r3, #0
 8014996:	d002      	beq.n	801499e <udp_input+0x15a>
    for_us = 1;
 8014998:	2301      	movs	r3, #1
 801499a:	76fb      	strb	r3, [r7, #27]
 801499c:	e00a      	b.n	80149b4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801499e:	683b      	ldr	r3, [r7, #0]
 80149a0:	3304      	adds	r3, #4
 80149a2:	681a      	ldr	r2, [r3, #0]
 80149a4:	4b2d      	ldr	r3, [pc, #180]	; (8014a5c <udp_input+0x218>)
 80149a6:	695b      	ldr	r3, [r3, #20]
 80149a8:	429a      	cmp	r2, r3
 80149aa:	bf0c      	ite	eq
 80149ac:	2301      	moveq	r3, #1
 80149ae:	2300      	movne	r3, #0
 80149b0:	b2db      	uxtb	r3, r3
 80149b2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80149b4:	7efb      	ldrb	r3, [r7, #27]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d041      	beq.n	8014a3e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80149ba:	2108      	movs	r1, #8
 80149bc:	6878      	ldr	r0, [r7, #4]
 80149be:	f7f9 faad 	bl	800df1c <pbuf_remove_header>
 80149c2:	4603      	mov	r3, r0
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d00a      	beq.n	80149de <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80149c8:	4b20      	ldr	r3, [pc, #128]	; (8014a4c <udp_input+0x208>)
 80149ca:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80149ce:	4925      	ldr	r1, [pc, #148]	; (8014a64 <udp_input+0x220>)
 80149d0:	4820      	ldr	r0, [pc, #128]	; (8014a54 <udp_input+0x210>)
 80149d2:	f003 fba3 	bl	801811c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80149d6:	6878      	ldr	r0, [r7, #4]
 80149d8:	f7f9 fb26 	bl	800e028 <pbuf_free>
      goto end;
 80149dc:	e032      	b.n	8014a44 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80149de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d012      	beq.n	8014a0a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80149e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e6:	699b      	ldr	r3, [r3, #24]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d00a      	beq.n	8014a02 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80149ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ee:	699c      	ldr	r4, [r3, #24]
 80149f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f2:	69d8      	ldr	r0, [r3, #28]
 80149f4:	8a3b      	ldrh	r3, [r7, #16]
 80149f6:	9300      	str	r3, [sp, #0]
 80149f8:	4b1b      	ldr	r3, [pc, #108]	; (8014a68 <udp_input+0x224>)
 80149fa:	687a      	ldr	r2, [r7, #4]
 80149fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80149fe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014a00:	e021      	b.n	8014a46 <udp_input+0x202>
        pbuf_free(p);
 8014a02:	6878      	ldr	r0, [r7, #4]
 8014a04:	f7f9 fb10 	bl	800e028 <pbuf_free>
        goto end;
 8014a08:	e01c      	b.n	8014a44 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014a0a:	7cfb      	ldrb	r3, [r7, #19]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d112      	bne.n	8014a36 <udp_input+0x1f2>
 8014a10:	4b12      	ldr	r3, [pc, #72]	; (8014a5c <udp_input+0x218>)
 8014a12:	695b      	ldr	r3, [r3, #20]
 8014a14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014a18:	2be0      	cmp	r3, #224	; 0xe0
 8014a1a:	d00c      	beq.n	8014a36 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014a1c:	4b0f      	ldr	r3, [pc, #60]	; (8014a5c <udp_input+0x218>)
 8014a1e:	899b      	ldrh	r3, [r3, #12]
 8014a20:	3308      	adds	r3, #8
 8014a22:	b29b      	uxth	r3, r3
 8014a24:	b21b      	sxth	r3, r3
 8014a26:	4619      	mov	r1, r3
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f7f9 faea 	bl	800e002 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014a2e:	2103      	movs	r1, #3
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	f001 f89b 	bl	8015b6c <icmp_dest_unreach>
      pbuf_free(p);
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f7f9 faf6 	bl	800e028 <pbuf_free>
  return;
 8014a3c:	e003      	b.n	8014a46 <udp_input+0x202>
    pbuf_free(p);
 8014a3e:	6878      	ldr	r0, [r7, #4]
 8014a40:	f7f9 faf2 	bl	800e028 <pbuf_free>
  return;
 8014a44:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014a46:	372c      	adds	r7, #44	; 0x2c
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd90      	pop	{r4, r7, pc}
 8014a4c:	0801af78 	.word	0x0801af78
 8014a50:	0801b01c 	.word	0x0801b01c
 8014a54:	0801afcc 	.word	0x0801afcc
 8014a58:	0801b034 	.word	0x0801b034
 8014a5c:	20005010 	.word	0x20005010
 8014a60:	2000819c 	.word	0x2000819c
 8014a64:	0801b050 	.word	0x0801b050
 8014a68:	20005020 	.word	0x20005020

08014a6c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014a6c:	b480      	push	{r7}
 8014a6e:	b085      	sub	sp, #20
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
 8014a74:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d01e      	beq.n	8014aba <udp_netif_ip_addr_changed+0x4e>
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d01a      	beq.n	8014aba <udp_netif_ip_addr_changed+0x4e>
 8014a84:	683b      	ldr	r3, [r7, #0]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d017      	beq.n	8014aba <udp_netif_ip_addr_changed+0x4e>
 8014a8a:	683b      	ldr	r3, [r7, #0]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d013      	beq.n	8014aba <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014a92:	4b0d      	ldr	r3, [pc, #52]	; (8014ac8 <udp_netif_ip_addr_changed+0x5c>)
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	60fb      	str	r3, [r7, #12]
 8014a98:	e00c      	b.n	8014ab4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	681a      	ldr	r2, [r3, #0]
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	d103      	bne.n	8014aae <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014aa6:	683b      	ldr	r3, [r7, #0]
 8014aa8:	681a      	ldr	r2, [r3, #0]
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	68db      	ldr	r3, [r3, #12]
 8014ab2:	60fb      	str	r3, [r7, #12]
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d1ef      	bne.n	8014a9a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014aba:	bf00      	nop
 8014abc:	3714      	adds	r7, #20
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac4:	4770      	bx	lr
 8014ac6:	bf00      	nop
 8014ac8:	2000819c 	.word	0x2000819c

08014acc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b082      	sub	sp, #8
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014ad4:	4915      	ldr	r1, [pc, #84]	; (8014b2c <etharp_free_entry+0x60>)
 8014ad6:	687a      	ldr	r2, [r7, #4]
 8014ad8:	4613      	mov	r3, r2
 8014ada:	005b      	lsls	r3, r3, #1
 8014adc:	4413      	add	r3, r2
 8014ade:	00db      	lsls	r3, r3, #3
 8014ae0:	440b      	add	r3, r1
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d013      	beq.n	8014b10 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014ae8:	4910      	ldr	r1, [pc, #64]	; (8014b2c <etharp_free_entry+0x60>)
 8014aea:	687a      	ldr	r2, [r7, #4]
 8014aec:	4613      	mov	r3, r2
 8014aee:	005b      	lsls	r3, r3, #1
 8014af0:	4413      	add	r3, r2
 8014af2:	00db      	lsls	r3, r3, #3
 8014af4:	440b      	add	r3, r1
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	4618      	mov	r0, r3
 8014afa:	f7f9 fa95 	bl	800e028 <pbuf_free>
    arp_table[i].q = NULL;
 8014afe:	490b      	ldr	r1, [pc, #44]	; (8014b2c <etharp_free_entry+0x60>)
 8014b00:	687a      	ldr	r2, [r7, #4]
 8014b02:	4613      	mov	r3, r2
 8014b04:	005b      	lsls	r3, r3, #1
 8014b06:	4413      	add	r3, r2
 8014b08:	00db      	lsls	r3, r3, #3
 8014b0a:	440b      	add	r3, r1
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014b10:	4906      	ldr	r1, [pc, #24]	; (8014b2c <etharp_free_entry+0x60>)
 8014b12:	687a      	ldr	r2, [r7, #4]
 8014b14:	4613      	mov	r3, r2
 8014b16:	005b      	lsls	r3, r3, #1
 8014b18:	4413      	add	r3, r2
 8014b1a:	00db      	lsls	r3, r3, #3
 8014b1c:	440b      	add	r3, r1
 8014b1e:	3314      	adds	r3, #20
 8014b20:	2200      	movs	r2, #0
 8014b22:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014b24:	bf00      	nop
 8014b26:	3708      	adds	r7, #8
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}
 8014b2c:	200081a0 	.word	0x200081a0

08014b30 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b082      	sub	sp, #8
 8014b34:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b36:	2300      	movs	r3, #0
 8014b38:	607b      	str	r3, [r7, #4]
 8014b3a:	e096      	b.n	8014c6a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014b3c:	494f      	ldr	r1, [pc, #316]	; (8014c7c <etharp_tmr+0x14c>)
 8014b3e:	687a      	ldr	r2, [r7, #4]
 8014b40:	4613      	mov	r3, r2
 8014b42:	005b      	lsls	r3, r3, #1
 8014b44:	4413      	add	r3, r2
 8014b46:	00db      	lsls	r3, r3, #3
 8014b48:	440b      	add	r3, r1
 8014b4a:	3314      	adds	r3, #20
 8014b4c:	781b      	ldrb	r3, [r3, #0]
 8014b4e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014b50:	78fb      	ldrb	r3, [r7, #3]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	f000 8086 	beq.w	8014c64 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014b58:	4948      	ldr	r1, [pc, #288]	; (8014c7c <etharp_tmr+0x14c>)
 8014b5a:	687a      	ldr	r2, [r7, #4]
 8014b5c:	4613      	mov	r3, r2
 8014b5e:	005b      	lsls	r3, r3, #1
 8014b60:	4413      	add	r3, r2
 8014b62:	00db      	lsls	r3, r3, #3
 8014b64:	440b      	add	r3, r1
 8014b66:	3312      	adds	r3, #18
 8014b68:	881b      	ldrh	r3, [r3, #0]
 8014b6a:	3301      	adds	r3, #1
 8014b6c:	b298      	uxth	r0, r3
 8014b6e:	4943      	ldr	r1, [pc, #268]	; (8014c7c <etharp_tmr+0x14c>)
 8014b70:	687a      	ldr	r2, [r7, #4]
 8014b72:	4613      	mov	r3, r2
 8014b74:	005b      	lsls	r3, r3, #1
 8014b76:	4413      	add	r3, r2
 8014b78:	00db      	lsls	r3, r3, #3
 8014b7a:	440b      	add	r3, r1
 8014b7c:	3312      	adds	r3, #18
 8014b7e:	4602      	mov	r2, r0
 8014b80:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014b82:	493e      	ldr	r1, [pc, #248]	; (8014c7c <etharp_tmr+0x14c>)
 8014b84:	687a      	ldr	r2, [r7, #4]
 8014b86:	4613      	mov	r3, r2
 8014b88:	005b      	lsls	r3, r3, #1
 8014b8a:	4413      	add	r3, r2
 8014b8c:	00db      	lsls	r3, r3, #3
 8014b8e:	440b      	add	r3, r1
 8014b90:	3312      	adds	r3, #18
 8014b92:	881b      	ldrh	r3, [r3, #0]
 8014b94:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014b98:	d215      	bcs.n	8014bc6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014b9a:	4938      	ldr	r1, [pc, #224]	; (8014c7c <etharp_tmr+0x14c>)
 8014b9c:	687a      	ldr	r2, [r7, #4]
 8014b9e:	4613      	mov	r3, r2
 8014ba0:	005b      	lsls	r3, r3, #1
 8014ba2:	4413      	add	r3, r2
 8014ba4:	00db      	lsls	r3, r3, #3
 8014ba6:	440b      	add	r3, r1
 8014ba8:	3314      	adds	r3, #20
 8014baa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014bac:	2b01      	cmp	r3, #1
 8014bae:	d10e      	bne.n	8014bce <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014bb0:	4932      	ldr	r1, [pc, #200]	; (8014c7c <etharp_tmr+0x14c>)
 8014bb2:	687a      	ldr	r2, [r7, #4]
 8014bb4:	4613      	mov	r3, r2
 8014bb6:	005b      	lsls	r3, r3, #1
 8014bb8:	4413      	add	r3, r2
 8014bba:	00db      	lsls	r3, r3, #3
 8014bbc:	440b      	add	r3, r1
 8014bbe:	3312      	adds	r3, #18
 8014bc0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014bc2:	2b04      	cmp	r3, #4
 8014bc4:	d903      	bls.n	8014bce <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014bc6:	6878      	ldr	r0, [r7, #4]
 8014bc8:	f7ff ff80 	bl	8014acc <etharp_free_entry>
 8014bcc:	e04a      	b.n	8014c64 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014bce:	492b      	ldr	r1, [pc, #172]	; (8014c7c <etharp_tmr+0x14c>)
 8014bd0:	687a      	ldr	r2, [r7, #4]
 8014bd2:	4613      	mov	r3, r2
 8014bd4:	005b      	lsls	r3, r3, #1
 8014bd6:	4413      	add	r3, r2
 8014bd8:	00db      	lsls	r3, r3, #3
 8014bda:	440b      	add	r3, r1
 8014bdc:	3314      	adds	r3, #20
 8014bde:	781b      	ldrb	r3, [r3, #0]
 8014be0:	2b03      	cmp	r3, #3
 8014be2:	d10a      	bne.n	8014bfa <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014be4:	4925      	ldr	r1, [pc, #148]	; (8014c7c <etharp_tmr+0x14c>)
 8014be6:	687a      	ldr	r2, [r7, #4]
 8014be8:	4613      	mov	r3, r2
 8014bea:	005b      	lsls	r3, r3, #1
 8014bec:	4413      	add	r3, r2
 8014bee:	00db      	lsls	r3, r3, #3
 8014bf0:	440b      	add	r3, r1
 8014bf2:	3314      	adds	r3, #20
 8014bf4:	2204      	movs	r2, #4
 8014bf6:	701a      	strb	r2, [r3, #0]
 8014bf8:	e034      	b.n	8014c64 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014bfa:	4920      	ldr	r1, [pc, #128]	; (8014c7c <etharp_tmr+0x14c>)
 8014bfc:	687a      	ldr	r2, [r7, #4]
 8014bfe:	4613      	mov	r3, r2
 8014c00:	005b      	lsls	r3, r3, #1
 8014c02:	4413      	add	r3, r2
 8014c04:	00db      	lsls	r3, r3, #3
 8014c06:	440b      	add	r3, r1
 8014c08:	3314      	adds	r3, #20
 8014c0a:	781b      	ldrb	r3, [r3, #0]
 8014c0c:	2b04      	cmp	r3, #4
 8014c0e:	d10a      	bne.n	8014c26 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014c10:	491a      	ldr	r1, [pc, #104]	; (8014c7c <etharp_tmr+0x14c>)
 8014c12:	687a      	ldr	r2, [r7, #4]
 8014c14:	4613      	mov	r3, r2
 8014c16:	005b      	lsls	r3, r3, #1
 8014c18:	4413      	add	r3, r2
 8014c1a:	00db      	lsls	r3, r3, #3
 8014c1c:	440b      	add	r3, r1
 8014c1e:	3314      	adds	r3, #20
 8014c20:	2202      	movs	r2, #2
 8014c22:	701a      	strb	r2, [r3, #0]
 8014c24:	e01e      	b.n	8014c64 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014c26:	4915      	ldr	r1, [pc, #84]	; (8014c7c <etharp_tmr+0x14c>)
 8014c28:	687a      	ldr	r2, [r7, #4]
 8014c2a:	4613      	mov	r3, r2
 8014c2c:	005b      	lsls	r3, r3, #1
 8014c2e:	4413      	add	r3, r2
 8014c30:	00db      	lsls	r3, r3, #3
 8014c32:	440b      	add	r3, r1
 8014c34:	3314      	adds	r3, #20
 8014c36:	781b      	ldrb	r3, [r3, #0]
 8014c38:	2b01      	cmp	r3, #1
 8014c3a:	d113      	bne.n	8014c64 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014c3c:	490f      	ldr	r1, [pc, #60]	; (8014c7c <etharp_tmr+0x14c>)
 8014c3e:	687a      	ldr	r2, [r7, #4]
 8014c40:	4613      	mov	r3, r2
 8014c42:	005b      	lsls	r3, r3, #1
 8014c44:	4413      	add	r3, r2
 8014c46:	00db      	lsls	r3, r3, #3
 8014c48:	440b      	add	r3, r1
 8014c4a:	3308      	adds	r3, #8
 8014c4c:	6818      	ldr	r0, [r3, #0]
 8014c4e:	687a      	ldr	r2, [r7, #4]
 8014c50:	4613      	mov	r3, r2
 8014c52:	005b      	lsls	r3, r3, #1
 8014c54:	4413      	add	r3, r2
 8014c56:	00db      	lsls	r3, r3, #3
 8014c58:	4a08      	ldr	r2, [pc, #32]	; (8014c7c <etharp_tmr+0x14c>)
 8014c5a:	4413      	add	r3, r2
 8014c5c:	3304      	adds	r3, #4
 8014c5e:	4619      	mov	r1, r3
 8014c60:	f000 fe6e 	bl	8015940 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	3301      	adds	r3, #1
 8014c68:	607b      	str	r3, [r7, #4]
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	2b09      	cmp	r3, #9
 8014c6e:	f77f af65 	ble.w	8014b3c <etharp_tmr+0xc>
      }
    }
  }
}
 8014c72:	bf00      	nop
 8014c74:	bf00      	nop
 8014c76:	3708      	adds	r7, #8
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd80      	pop	{r7, pc}
 8014c7c:	200081a0 	.word	0x200081a0

08014c80 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b08a      	sub	sp, #40	; 0x28
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	60f8      	str	r0, [r7, #12]
 8014c88:	460b      	mov	r3, r1
 8014c8a:	607a      	str	r2, [r7, #4]
 8014c8c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014c8e:	230a      	movs	r3, #10
 8014c90:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014c92:	230a      	movs	r3, #10
 8014c94:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014c96:	230a      	movs	r3, #10
 8014c98:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014c9e:	230a      	movs	r3, #10
 8014ca0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	83bb      	strh	r3, [r7, #28]
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	837b      	strh	r3, [r7, #26]
 8014caa:	2300      	movs	r3, #0
 8014cac:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014cae:	2300      	movs	r3, #0
 8014cb0:	843b      	strh	r3, [r7, #32]
 8014cb2:	e0ae      	b.n	8014e12 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014cb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014cb8:	49a6      	ldr	r1, [pc, #664]	; (8014f54 <etharp_find_entry+0x2d4>)
 8014cba:	4613      	mov	r3, r2
 8014cbc:	005b      	lsls	r3, r3, #1
 8014cbe:	4413      	add	r3, r2
 8014cc0:	00db      	lsls	r3, r3, #3
 8014cc2:	440b      	add	r3, r1
 8014cc4:	3314      	adds	r3, #20
 8014cc6:	781b      	ldrb	r3, [r3, #0]
 8014cc8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014cca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014cce:	2b0a      	cmp	r3, #10
 8014cd0:	d105      	bne.n	8014cde <etharp_find_entry+0x5e>
 8014cd2:	7dfb      	ldrb	r3, [r7, #23]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d102      	bne.n	8014cde <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014cd8:	8c3b      	ldrh	r3, [r7, #32]
 8014cda:	847b      	strh	r3, [r7, #34]	; 0x22
 8014cdc:	e095      	b.n	8014e0a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014cde:	7dfb      	ldrb	r3, [r7, #23]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	f000 8092 	beq.w	8014e0a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014ce6:	7dfb      	ldrb	r3, [r7, #23]
 8014ce8:	2b01      	cmp	r3, #1
 8014cea:	d009      	beq.n	8014d00 <etharp_find_entry+0x80>
 8014cec:	7dfb      	ldrb	r3, [r7, #23]
 8014cee:	2b01      	cmp	r3, #1
 8014cf0:	d806      	bhi.n	8014d00 <etharp_find_entry+0x80>
 8014cf2:	4b99      	ldr	r3, [pc, #612]	; (8014f58 <etharp_find_entry+0x2d8>)
 8014cf4:	f240 1223 	movw	r2, #291	; 0x123
 8014cf8:	4998      	ldr	r1, [pc, #608]	; (8014f5c <etharp_find_entry+0x2dc>)
 8014cfa:	4899      	ldr	r0, [pc, #612]	; (8014f60 <etharp_find_entry+0x2e0>)
 8014cfc:	f003 fa0e 	bl	801811c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d020      	beq.n	8014d48 <etharp_find_entry+0xc8>
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	6819      	ldr	r1, [r3, #0]
 8014d0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d0e:	4891      	ldr	r0, [pc, #580]	; (8014f54 <etharp_find_entry+0x2d4>)
 8014d10:	4613      	mov	r3, r2
 8014d12:	005b      	lsls	r3, r3, #1
 8014d14:	4413      	add	r3, r2
 8014d16:	00db      	lsls	r3, r3, #3
 8014d18:	4403      	add	r3, r0
 8014d1a:	3304      	adds	r3, #4
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	4299      	cmp	r1, r3
 8014d20:	d112      	bne.n	8014d48 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d00c      	beq.n	8014d42 <etharp_find_entry+0xc2>
 8014d28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d2c:	4989      	ldr	r1, [pc, #548]	; (8014f54 <etharp_find_entry+0x2d4>)
 8014d2e:	4613      	mov	r3, r2
 8014d30:	005b      	lsls	r3, r3, #1
 8014d32:	4413      	add	r3, r2
 8014d34:	00db      	lsls	r3, r3, #3
 8014d36:	440b      	add	r3, r1
 8014d38:	3308      	adds	r3, #8
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	687a      	ldr	r2, [r7, #4]
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d102      	bne.n	8014d48 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014d42:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014d46:	e100      	b.n	8014f4a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014d48:	7dfb      	ldrb	r3, [r7, #23]
 8014d4a:	2b01      	cmp	r3, #1
 8014d4c:	d140      	bne.n	8014dd0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014d4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d52:	4980      	ldr	r1, [pc, #512]	; (8014f54 <etharp_find_entry+0x2d4>)
 8014d54:	4613      	mov	r3, r2
 8014d56:	005b      	lsls	r3, r3, #1
 8014d58:	4413      	add	r3, r2
 8014d5a:	00db      	lsls	r3, r3, #3
 8014d5c:	440b      	add	r3, r1
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d01a      	beq.n	8014d9a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014d64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d68:	497a      	ldr	r1, [pc, #488]	; (8014f54 <etharp_find_entry+0x2d4>)
 8014d6a:	4613      	mov	r3, r2
 8014d6c:	005b      	lsls	r3, r3, #1
 8014d6e:	4413      	add	r3, r2
 8014d70:	00db      	lsls	r3, r3, #3
 8014d72:	440b      	add	r3, r1
 8014d74:	3312      	adds	r3, #18
 8014d76:	881b      	ldrh	r3, [r3, #0]
 8014d78:	8bba      	ldrh	r2, [r7, #28]
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	d845      	bhi.n	8014e0a <etharp_find_entry+0x18a>
            old_queue = i;
 8014d7e:	8c3b      	ldrh	r3, [r7, #32]
 8014d80:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014d82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d86:	4973      	ldr	r1, [pc, #460]	; (8014f54 <etharp_find_entry+0x2d4>)
 8014d88:	4613      	mov	r3, r2
 8014d8a:	005b      	lsls	r3, r3, #1
 8014d8c:	4413      	add	r3, r2
 8014d8e:	00db      	lsls	r3, r3, #3
 8014d90:	440b      	add	r3, r1
 8014d92:	3312      	adds	r3, #18
 8014d94:	881b      	ldrh	r3, [r3, #0]
 8014d96:	83bb      	strh	r3, [r7, #28]
 8014d98:	e037      	b.n	8014e0a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014d9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d9e:	496d      	ldr	r1, [pc, #436]	; (8014f54 <etharp_find_entry+0x2d4>)
 8014da0:	4613      	mov	r3, r2
 8014da2:	005b      	lsls	r3, r3, #1
 8014da4:	4413      	add	r3, r2
 8014da6:	00db      	lsls	r3, r3, #3
 8014da8:	440b      	add	r3, r1
 8014daa:	3312      	adds	r3, #18
 8014dac:	881b      	ldrh	r3, [r3, #0]
 8014dae:	8b7a      	ldrh	r2, [r7, #26]
 8014db0:	429a      	cmp	r2, r3
 8014db2:	d82a      	bhi.n	8014e0a <etharp_find_entry+0x18a>
            old_pending = i;
 8014db4:	8c3b      	ldrh	r3, [r7, #32]
 8014db6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014db8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014dbc:	4965      	ldr	r1, [pc, #404]	; (8014f54 <etharp_find_entry+0x2d4>)
 8014dbe:	4613      	mov	r3, r2
 8014dc0:	005b      	lsls	r3, r3, #1
 8014dc2:	4413      	add	r3, r2
 8014dc4:	00db      	lsls	r3, r3, #3
 8014dc6:	440b      	add	r3, r1
 8014dc8:	3312      	adds	r3, #18
 8014dca:	881b      	ldrh	r3, [r3, #0]
 8014dcc:	837b      	strh	r3, [r7, #26]
 8014dce:	e01c      	b.n	8014e0a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014dd0:	7dfb      	ldrb	r3, [r7, #23]
 8014dd2:	2b01      	cmp	r3, #1
 8014dd4:	d919      	bls.n	8014e0a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014dd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014dda:	495e      	ldr	r1, [pc, #376]	; (8014f54 <etharp_find_entry+0x2d4>)
 8014ddc:	4613      	mov	r3, r2
 8014dde:	005b      	lsls	r3, r3, #1
 8014de0:	4413      	add	r3, r2
 8014de2:	00db      	lsls	r3, r3, #3
 8014de4:	440b      	add	r3, r1
 8014de6:	3312      	adds	r3, #18
 8014de8:	881b      	ldrh	r3, [r3, #0]
 8014dea:	8b3a      	ldrh	r2, [r7, #24]
 8014dec:	429a      	cmp	r2, r3
 8014dee:	d80c      	bhi.n	8014e0a <etharp_find_entry+0x18a>
            old_stable = i;
 8014df0:	8c3b      	ldrh	r3, [r7, #32]
 8014df2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014df4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014df8:	4956      	ldr	r1, [pc, #344]	; (8014f54 <etharp_find_entry+0x2d4>)
 8014dfa:	4613      	mov	r3, r2
 8014dfc:	005b      	lsls	r3, r3, #1
 8014dfe:	4413      	add	r3, r2
 8014e00:	00db      	lsls	r3, r3, #3
 8014e02:	440b      	add	r3, r1
 8014e04:	3312      	adds	r3, #18
 8014e06:	881b      	ldrh	r3, [r3, #0]
 8014e08:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014e0a:	8c3b      	ldrh	r3, [r7, #32]
 8014e0c:	3301      	adds	r3, #1
 8014e0e:	b29b      	uxth	r3, r3
 8014e10:	843b      	strh	r3, [r7, #32]
 8014e12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014e16:	2b09      	cmp	r3, #9
 8014e18:	f77f af4c 	ble.w	8014cb4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014e1c:	7afb      	ldrb	r3, [r7, #11]
 8014e1e:	f003 0302 	and.w	r3, r3, #2
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d108      	bne.n	8014e38 <etharp_find_entry+0x1b8>
 8014e26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014e2a:	2b0a      	cmp	r3, #10
 8014e2c:	d107      	bne.n	8014e3e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014e2e:	7afb      	ldrb	r3, [r7, #11]
 8014e30:	f003 0301 	and.w	r3, r3, #1
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d102      	bne.n	8014e3e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014e38:	f04f 33ff 	mov.w	r3, #4294967295
 8014e3c:	e085      	b.n	8014f4a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014e3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014e42:	2b09      	cmp	r3, #9
 8014e44:	dc02      	bgt.n	8014e4c <etharp_find_entry+0x1cc>
    i = empty;
 8014e46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e48:	843b      	strh	r3, [r7, #32]
 8014e4a:	e039      	b.n	8014ec0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014e4c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014e50:	2b09      	cmp	r3, #9
 8014e52:	dc14      	bgt.n	8014e7e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014e54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014e56:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014e58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e5c:	493d      	ldr	r1, [pc, #244]	; (8014f54 <etharp_find_entry+0x2d4>)
 8014e5e:	4613      	mov	r3, r2
 8014e60:	005b      	lsls	r3, r3, #1
 8014e62:	4413      	add	r3, r2
 8014e64:	00db      	lsls	r3, r3, #3
 8014e66:	440b      	add	r3, r1
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d018      	beq.n	8014ea0 <etharp_find_entry+0x220>
 8014e6e:	4b3a      	ldr	r3, [pc, #232]	; (8014f58 <etharp_find_entry+0x2d8>)
 8014e70:	f240 126d 	movw	r2, #365	; 0x16d
 8014e74:	493b      	ldr	r1, [pc, #236]	; (8014f64 <etharp_find_entry+0x2e4>)
 8014e76:	483a      	ldr	r0, [pc, #232]	; (8014f60 <etharp_find_entry+0x2e0>)
 8014e78:	f003 f950 	bl	801811c <iprintf>
 8014e7c:	e010      	b.n	8014ea0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014e7e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014e82:	2b09      	cmp	r3, #9
 8014e84:	dc02      	bgt.n	8014e8c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014e86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014e88:	843b      	strh	r3, [r7, #32]
 8014e8a:	e009      	b.n	8014ea0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014e8c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014e90:	2b09      	cmp	r3, #9
 8014e92:	dc02      	bgt.n	8014e9a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014e94:	8bfb      	ldrh	r3, [r7, #30]
 8014e96:	843b      	strh	r3, [r7, #32]
 8014e98:	e002      	b.n	8014ea0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8014e9e:	e054      	b.n	8014f4a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014ea0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014ea4:	2b09      	cmp	r3, #9
 8014ea6:	dd06      	ble.n	8014eb6 <etharp_find_entry+0x236>
 8014ea8:	4b2b      	ldr	r3, [pc, #172]	; (8014f58 <etharp_find_entry+0x2d8>)
 8014eaa:	f240 127f 	movw	r2, #383	; 0x17f
 8014eae:	492e      	ldr	r1, [pc, #184]	; (8014f68 <etharp_find_entry+0x2e8>)
 8014eb0:	482b      	ldr	r0, [pc, #172]	; (8014f60 <etharp_find_entry+0x2e0>)
 8014eb2:	f003 f933 	bl	801811c <iprintf>
    etharp_free_entry(i);
 8014eb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7ff fe06 	bl	8014acc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014ec0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014ec4:	2b09      	cmp	r3, #9
 8014ec6:	dd06      	ble.n	8014ed6 <etharp_find_entry+0x256>
 8014ec8:	4b23      	ldr	r3, [pc, #140]	; (8014f58 <etharp_find_entry+0x2d8>)
 8014eca:	f240 1283 	movw	r2, #387	; 0x183
 8014ece:	4926      	ldr	r1, [pc, #152]	; (8014f68 <etharp_find_entry+0x2e8>)
 8014ed0:	4823      	ldr	r0, [pc, #140]	; (8014f60 <etharp_find_entry+0x2e0>)
 8014ed2:	f003 f923 	bl	801811c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014ed6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014eda:	491e      	ldr	r1, [pc, #120]	; (8014f54 <etharp_find_entry+0x2d4>)
 8014edc:	4613      	mov	r3, r2
 8014ede:	005b      	lsls	r3, r3, #1
 8014ee0:	4413      	add	r3, r2
 8014ee2:	00db      	lsls	r3, r3, #3
 8014ee4:	440b      	add	r3, r1
 8014ee6:	3314      	adds	r3, #20
 8014ee8:	781b      	ldrb	r3, [r3, #0]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d006      	beq.n	8014efc <etharp_find_entry+0x27c>
 8014eee:	4b1a      	ldr	r3, [pc, #104]	; (8014f58 <etharp_find_entry+0x2d8>)
 8014ef0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014ef4:	491d      	ldr	r1, [pc, #116]	; (8014f6c <etharp_find_entry+0x2ec>)
 8014ef6:	481a      	ldr	r0, [pc, #104]	; (8014f60 <etharp_find_entry+0x2e0>)
 8014ef8:	f003 f910 	bl	801811c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d00b      	beq.n	8014f1a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014f02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	6819      	ldr	r1, [r3, #0]
 8014f0a:	4812      	ldr	r0, [pc, #72]	; (8014f54 <etharp_find_entry+0x2d4>)
 8014f0c:	4613      	mov	r3, r2
 8014f0e:	005b      	lsls	r3, r3, #1
 8014f10:	4413      	add	r3, r2
 8014f12:	00db      	lsls	r3, r3, #3
 8014f14:	4403      	add	r3, r0
 8014f16:	3304      	adds	r3, #4
 8014f18:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014f1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f1e:	490d      	ldr	r1, [pc, #52]	; (8014f54 <etharp_find_entry+0x2d4>)
 8014f20:	4613      	mov	r3, r2
 8014f22:	005b      	lsls	r3, r3, #1
 8014f24:	4413      	add	r3, r2
 8014f26:	00db      	lsls	r3, r3, #3
 8014f28:	440b      	add	r3, r1
 8014f2a:	3312      	adds	r3, #18
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014f30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f34:	4907      	ldr	r1, [pc, #28]	; (8014f54 <etharp_find_entry+0x2d4>)
 8014f36:	4613      	mov	r3, r2
 8014f38:	005b      	lsls	r3, r3, #1
 8014f3a:	4413      	add	r3, r2
 8014f3c:	00db      	lsls	r3, r3, #3
 8014f3e:	440b      	add	r3, r1
 8014f40:	3308      	adds	r3, #8
 8014f42:	687a      	ldr	r2, [r7, #4]
 8014f44:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014f46:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3728      	adds	r7, #40	; 0x28
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}
 8014f52:	bf00      	nop
 8014f54:	200081a0 	.word	0x200081a0
 8014f58:	0801b2dc 	.word	0x0801b2dc
 8014f5c:	0801b314 	.word	0x0801b314
 8014f60:	0801b354 	.word	0x0801b354
 8014f64:	0801b37c 	.word	0x0801b37c
 8014f68:	0801b394 	.word	0x0801b394
 8014f6c:	0801b3a8 	.word	0x0801b3a8

08014f70 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b088      	sub	sp, #32
 8014f74:	af02      	add	r7, sp, #8
 8014f76:	60f8      	str	r0, [r7, #12]
 8014f78:	60b9      	str	r1, [r7, #8]
 8014f7a:	607a      	str	r2, [r7, #4]
 8014f7c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014f84:	2b06      	cmp	r3, #6
 8014f86:	d006      	beq.n	8014f96 <etharp_update_arp_entry+0x26>
 8014f88:	4b48      	ldr	r3, [pc, #288]	; (80150ac <etharp_update_arp_entry+0x13c>)
 8014f8a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014f8e:	4948      	ldr	r1, [pc, #288]	; (80150b0 <etharp_update_arp_entry+0x140>)
 8014f90:	4848      	ldr	r0, [pc, #288]	; (80150b4 <etharp_update_arp_entry+0x144>)
 8014f92:	f003 f8c3 	bl	801811c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d012      	beq.n	8014fc2 <etharp_update_arp_entry+0x52>
 8014f9c:	68bb      	ldr	r3, [r7, #8]
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d00e      	beq.n	8014fc2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014fa4:	68bb      	ldr	r3, [r7, #8]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	68f9      	ldr	r1, [r7, #12]
 8014faa:	4618      	mov	r0, r3
 8014fac:	f001 f8fe 	bl	80161ac <ip4_addr_isbroadcast_u32>
 8014fb0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d105      	bne.n	8014fc2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014fb6:	68bb      	ldr	r3, [r7, #8]
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014fbe:	2be0      	cmp	r3, #224	; 0xe0
 8014fc0:	d102      	bne.n	8014fc8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014fc2:	f06f 030f 	mvn.w	r3, #15
 8014fc6:	e06c      	b.n	80150a2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014fc8:	78fb      	ldrb	r3, [r7, #3]
 8014fca:	68fa      	ldr	r2, [r7, #12]
 8014fcc:	4619      	mov	r1, r3
 8014fce:	68b8      	ldr	r0, [r7, #8]
 8014fd0:	f7ff fe56 	bl	8014c80 <etharp_find_entry>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014fd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	da02      	bge.n	8014fe6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014fe0:	8afb      	ldrh	r3, [r7, #22]
 8014fe2:	b25b      	sxtb	r3, r3
 8014fe4:	e05d      	b.n	80150a2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014fe6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014fea:	4933      	ldr	r1, [pc, #204]	; (80150b8 <etharp_update_arp_entry+0x148>)
 8014fec:	4613      	mov	r3, r2
 8014fee:	005b      	lsls	r3, r3, #1
 8014ff0:	4413      	add	r3, r2
 8014ff2:	00db      	lsls	r3, r3, #3
 8014ff4:	440b      	add	r3, r1
 8014ff6:	3314      	adds	r3, #20
 8014ff8:	2202      	movs	r2, #2
 8014ffa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014ffc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015000:	492d      	ldr	r1, [pc, #180]	; (80150b8 <etharp_update_arp_entry+0x148>)
 8015002:	4613      	mov	r3, r2
 8015004:	005b      	lsls	r3, r3, #1
 8015006:	4413      	add	r3, r2
 8015008:	00db      	lsls	r3, r3, #3
 801500a:	440b      	add	r3, r1
 801500c:	3308      	adds	r3, #8
 801500e:	68fa      	ldr	r2, [r7, #12]
 8015010:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015012:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015016:	4613      	mov	r3, r2
 8015018:	005b      	lsls	r3, r3, #1
 801501a:	4413      	add	r3, r2
 801501c:	00db      	lsls	r3, r3, #3
 801501e:	3308      	adds	r3, #8
 8015020:	4a25      	ldr	r2, [pc, #148]	; (80150b8 <etharp_update_arp_entry+0x148>)
 8015022:	4413      	add	r3, r2
 8015024:	3304      	adds	r3, #4
 8015026:	2206      	movs	r2, #6
 8015028:	6879      	ldr	r1, [r7, #4]
 801502a:	4618      	mov	r0, r3
 801502c:	f003 f969 	bl	8018302 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015030:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015034:	4920      	ldr	r1, [pc, #128]	; (80150b8 <etharp_update_arp_entry+0x148>)
 8015036:	4613      	mov	r3, r2
 8015038:	005b      	lsls	r3, r3, #1
 801503a:	4413      	add	r3, r2
 801503c:	00db      	lsls	r3, r3, #3
 801503e:	440b      	add	r3, r1
 8015040:	3312      	adds	r3, #18
 8015042:	2200      	movs	r2, #0
 8015044:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015046:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801504a:	491b      	ldr	r1, [pc, #108]	; (80150b8 <etharp_update_arp_entry+0x148>)
 801504c:	4613      	mov	r3, r2
 801504e:	005b      	lsls	r3, r3, #1
 8015050:	4413      	add	r3, r2
 8015052:	00db      	lsls	r3, r3, #3
 8015054:	440b      	add	r3, r1
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d021      	beq.n	80150a0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801505c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015060:	4915      	ldr	r1, [pc, #84]	; (80150b8 <etharp_update_arp_entry+0x148>)
 8015062:	4613      	mov	r3, r2
 8015064:	005b      	lsls	r3, r3, #1
 8015066:	4413      	add	r3, r2
 8015068:	00db      	lsls	r3, r3, #3
 801506a:	440b      	add	r3, r1
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015070:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015074:	4910      	ldr	r1, [pc, #64]	; (80150b8 <etharp_update_arp_entry+0x148>)
 8015076:	4613      	mov	r3, r2
 8015078:	005b      	lsls	r3, r3, #1
 801507a:	4413      	add	r3, r2
 801507c:	00db      	lsls	r3, r3, #3
 801507e:	440b      	add	r3, r1
 8015080:	2200      	movs	r2, #0
 8015082:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801508a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801508e:	9300      	str	r3, [sp, #0]
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	6939      	ldr	r1, [r7, #16]
 8015094:	68f8      	ldr	r0, [r7, #12]
 8015096:	f001 ff97 	bl	8016fc8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801509a:	6938      	ldr	r0, [r7, #16]
 801509c:	f7f8 ffc4 	bl	800e028 <pbuf_free>
  }
  return ERR_OK;
 80150a0:	2300      	movs	r3, #0
}
 80150a2:	4618      	mov	r0, r3
 80150a4:	3718      	adds	r7, #24
 80150a6:	46bd      	mov	sp, r7
 80150a8:	bd80      	pop	{r7, pc}
 80150aa:	bf00      	nop
 80150ac:	0801b2dc 	.word	0x0801b2dc
 80150b0:	0801b3d4 	.word	0x0801b3d4
 80150b4:	0801b354 	.word	0x0801b354
 80150b8:	200081a0 	.word	0x200081a0

080150bc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b084      	sub	sp, #16
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80150c4:	2300      	movs	r3, #0
 80150c6:	60fb      	str	r3, [r7, #12]
 80150c8:	e01e      	b.n	8015108 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80150ca:	4913      	ldr	r1, [pc, #76]	; (8015118 <etharp_cleanup_netif+0x5c>)
 80150cc:	68fa      	ldr	r2, [r7, #12]
 80150ce:	4613      	mov	r3, r2
 80150d0:	005b      	lsls	r3, r3, #1
 80150d2:	4413      	add	r3, r2
 80150d4:	00db      	lsls	r3, r3, #3
 80150d6:	440b      	add	r3, r1
 80150d8:	3314      	adds	r3, #20
 80150da:	781b      	ldrb	r3, [r3, #0]
 80150dc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80150de:	7afb      	ldrb	r3, [r7, #11]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d00e      	beq.n	8015102 <etharp_cleanup_netif+0x46>
 80150e4:	490c      	ldr	r1, [pc, #48]	; (8015118 <etharp_cleanup_netif+0x5c>)
 80150e6:	68fa      	ldr	r2, [r7, #12]
 80150e8:	4613      	mov	r3, r2
 80150ea:	005b      	lsls	r3, r3, #1
 80150ec:	4413      	add	r3, r2
 80150ee:	00db      	lsls	r3, r3, #3
 80150f0:	440b      	add	r3, r1
 80150f2:	3308      	adds	r3, #8
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	687a      	ldr	r2, [r7, #4]
 80150f8:	429a      	cmp	r2, r3
 80150fa:	d102      	bne.n	8015102 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80150fc:	68f8      	ldr	r0, [r7, #12]
 80150fe:	f7ff fce5 	bl	8014acc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	3301      	adds	r3, #1
 8015106:	60fb      	str	r3, [r7, #12]
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	2b09      	cmp	r3, #9
 801510c:	dddd      	ble.n	80150ca <etharp_cleanup_netif+0xe>
    }
  }
}
 801510e:	bf00      	nop
 8015110:	bf00      	nop
 8015112:	3710      	adds	r7, #16
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}
 8015118:	200081a0 	.word	0x200081a0

0801511c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801511c:	b5b0      	push	{r4, r5, r7, lr}
 801511e:	b08a      	sub	sp, #40	; 0x28
 8015120:	af04      	add	r7, sp, #16
 8015122:	6078      	str	r0, [r7, #4]
 8015124:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015126:	683b      	ldr	r3, [r7, #0]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d107      	bne.n	801513c <etharp_input+0x20>
 801512c:	4b3d      	ldr	r3, [pc, #244]	; (8015224 <etharp_input+0x108>)
 801512e:	f240 228a 	movw	r2, #650	; 0x28a
 8015132:	493d      	ldr	r1, [pc, #244]	; (8015228 <etharp_input+0x10c>)
 8015134:	483d      	ldr	r0, [pc, #244]	; (801522c <etharp_input+0x110>)
 8015136:	f002 fff1 	bl	801811c <iprintf>
 801513a:	e06f      	b.n	801521c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	685b      	ldr	r3, [r3, #4]
 8015140:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015142:	693b      	ldr	r3, [r7, #16]
 8015144:	881b      	ldrh	r3, [r3, #0]
 8015146:	b29b      	uxth	r3, r3
 8015148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801514c:	d10c      	bne.n	8015168 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801514e:	693b      	ldr	r3, [r7, #16]
 8015150:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015152:	2b06      	cmp	r3, #6
 8015154:	d108      	bne.n	8015168 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015156:	693b      	ldr	r3, [r7, #16]
 8015158:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801515a:	2b04      	cmp	r3, #4
 801515c:	d104      	bne.n	8015168 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801515e:	693b      	ldr	r3, [r7, #16]
 8015160:	885b      	ldrh	r3, [r3, #2]
 8015162:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015164:	2b08      	cmp	r3, #8
 8015166:	d003      	beq.n	8015170 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015168:	6878      	ldr	r0, [r7, #4]
 801516a:	f7f8 ff5d 	bl	800e028 <pbuf_free>
    return;
 801516e:	e055      	b.n	801521c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015170:	693b      	ldr	r3, [r7, #16]
 8015172:	330e      	adds	r3, #14
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015178:	693b      	ldr	r3, [r7, #16]
 801517a:	3318      	adds	r3, #24
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015180:	683b      	ldr	r3, [r7, #0]
 8015182:	3304      	adds	r3, #4
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d102      	bne.n	8015190 <etharp_input+0x74>
    for_us = 0;
 801518a:	2300      	movs	r3, #0
 801518c:	75fb      	strb	r3, [r7, #23]
 801518e:	e009      	b.n	80151a4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015190:	68ba      	ldr	r2, [r7, #8]
 8015192:	683b      	ldr	r3, [r7, #0]
 8015194:	3304      	adds	r3, #4
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	429a      	cmp	r2, r3
 801519a:	bf0c      	ite	eq
 801519c:	2301      	moveq	r3, #1
 801519e:	2300      	movne	r3, #0
 80151a0:	b2db      	uxtb	r3, r3
 80151a2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	f103 0208 	add.w	r2, r3, #8
 80151aa:	7dfb      	ldrb	r3, [r7, #23]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d001      	beq.n	80151b4 <etharp_input+0x98>
 80151b0:	2301      	movs	r3, #1
 80151b2:	e000      	b.n	80151b6 <etharp_input+0x9a>
 80151b4:	2302      	movs	r3, #2
 80151b6:	f107 010c 	add.w	r1, r7, #12
 80151ba:	6838      	ldr	r0, [r7, #0]
 80151bc:	f7ff fed8 	bl	8014f70 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80151c0:	693b      	ldr	r3, [r7, #16]
 80151c2:	88db      	ldrh	r3, [r3, #6]
 80151c4:	b29b      	uxth	r3, r3
 80151c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80151ca:	d003      	beq.n	80151d4 <etharp_input+0xb8>
 80151cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80151d0:	d01e      	beq.n	8015210 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80151d2:	e020      	b.n	8015216 <etharp_input+0xfa>
      if (for_us) {
 80151d4:	7dfb      	ldrb	r3, [r7, #23]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d01c      	beq.n	8015214 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80151da:	683b      	ldr	r3, [r7, #0]
 80151dc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80151e0:	693b      	ldr	r3, [r7, #16]
 80151e2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80151e6:	683b      	ldr	r3, [r7, #0]
 80151e8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80151ec:	683b      	ldr	r3, [r7, #0]
 80151ee:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80151f0:	693a      	ldr	r2, [r7, #16]
 80151f2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80151f4:	2102      	movs	r1, #2
 80151f6:	9103      	str	r1, [sp, #12]
 80151f8:	f107 010c 	add.w	r1, r7, #12
 80151fc:	9102      	str	r1, [sp, #8]
 80151fe:	9201      	str	r2, [sp, #4]
 8015200:	9300      	str	r3, [sp, #0]
 8015202:	462b      	mov	r3, r5
 8015204:	4622      	mov	r2, r4
 8015206:	4601      	mov	r1, r0
 8015208:	6838      	ldr	r0, [r7, #0]
 801520a:	f000 faeb 	bl	80157e4 <etharp_raw>
      break;
 801520e:	e001      	b.n	8015214 <etharp_input+0xf8>
      break;
 8015210:	bf00      	nop
 8015212:	e000      	b.n	8015216 <etharp_input+0xfa>
      break;
 8015214:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015216:	6878      	ldr	r0, [r7, #4]
 8015218:	f7f8 ff06 	bl	800e028 <pbuf_free>
}
 801521c:	3718      	adds	r7, #24
 801521e:	46bd      	mov	sp, r7
 8015220:	bdb0      	pop	{r4, r5, r7, pc}
 8015222:	bf00      	nop
 8015224:	0801b2dc 	.word	0x0801b2dc
 8015228:	0801b42c 	.word	0x0801b42c
 801522c:	0801b354 	.word	0x0801b354

08015230 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015230:	b580      	push	{r7, lr}
 8015232:	b086      	sub	sp, #24
 8015234:	af02      	add	r7, sp, #8
 8015236:	60f8      	str	r0, [r7, #12]
 8015238:	60b9      	str	r1, [r7, #8]
 801523a:	4613      	mov	r3, r2
 801523c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801523e:	79fa      	ldrb	r2, [r7, #7]
 8015240:	4944      	ldr	r1, [pc, #272]	; (8015354 <etharp_output_to_arp_index+0x124>)
 8015242:	4613      	mov	r3, r2
 8015244:	005b      	lsls	r3, r3, #1
 8015246:	4413      	add	r3, r2
 8015248:	00db      	lsls	r3, r3, #3
 801524a:	440b      	add	r3, r1
 801524c:	3314      	adds	r3, #20
 801524e:	781b      	ldrb	r3, [r3, #0]
 8015250:	2b01      	cmp	r3, #1
 8015252:	d806      	bhi.n	8015262 <etharp_output_to_arp_index+0x32>
 8015254:	4b40      	ldr	r3, [pc, #256]	; (8015358 <etharp_output_to_arp_index+0x128>)
 8015256:	f240 22ee 	movw	r2, #750	; 0x2ee
 801525a:	4940      	ldr	r1, [pc, #256]	; (801535c <etharp_output_to_arp_index+0x12c>)
 801525c:	4840      	ldr	r0, [pc, #256]	; (8015360 <etharp_output_to_arp_index+0x130>)
 801525e:	f002 ff5d 	bl	801811c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015262:	79fa      	ldrb	r2, [r7, #7]
 8015264:	493b      	ldr	r1, [pc, #236]	; (8015354 <etharp_output_to_arp_index+0x124>)
 8015266:	4613      	mov	r3, r2
 8015268:	005b      	lsls	r3, r3, #1
 801526a:	4413      	add	r3, r2
 801526c:	00db      	lsls	r3, r3, #3
 801526e:	440b      	add	r3, r1
 8015270:	3314      	adds	r3, #20
 8015272:	781b      	ldrb	r3, [r3, #0]
 8015274:	2b02      	cmp	r3, #2
 8015276:	d153      	bne.n	8015320 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015278:	79fa      	ldrb	r2, [r7, #7]
 801527a:	4936      	ldr	r1, [pc, #216]	; (8015354 <etharp_output_to_arp_index+0x124>)
 801527c:	4613      	mov	r3, r2
 801527e:	005b      	lsls	r3, r3, #1
 8015280:	4413      	add	r3, r2
 8015282:	00db      	lsls	r3, r3, #3
 8015284:	440b      	add	r3, r1
 8015286:	3312      	adds	r3, #18
 8015288:	881b      	ldrh	r3, [r3, #0]
 801528a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801528e:	d919      	bls.n	80152c4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015290:	79fa      	ldrb	r2, [r7, #7]
 8015292:	4613      	mov	r3, r2
 8015294:	005b      	lsls	r3, r3, #1
 8015296:	4413      	add	r3, r2
 8015298:	00db      	lsls	r3, r3, #3
 801529a:	4a2e      	ldr	r2, [pc, #184]	; (8015354 <etharp_output_to_arp_index+0x124>)
 801529c:	4413      	add	r3, r2
 801529e:	3304      	adds	r3, #4
 80152a0:	4619      	mov	r1, r3
 80152a2:	68f8      	ldr	r0, [r7, #12]
 80152a4:	f000 fb4c 	bl	8015940 <etharp_request>
 80152a8:	4603      	mov	r3, r0
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d138      	bne.n	8015320 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80152ae:	79fa      	ldrb	r2, [r7, #7]
 80152b0:	4928      	ldr	r1, [pc, #160]	; (8015354 <etharp_output_to_arp_index+0x124>)
 80152b2:	4613      	mov	r3, r2
 80152b4:	005b      	lsls	r3, r3, #1
 80152b6:	4413      	add	r3, r2
 80152b8:	00db      	lsls	r3, r3, #3
 80152ba:	440b      	add	r3, r1
 80152bc:	3314      	adds	r3, #20
 80152be:	2203      	movs	r2, #3
 80152c0:	701a      	strb	r2, [r3, #0]
 80152c2:	e02d      	b.n	8015320 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80152c4:	79fa      	ldrb	r2, [r7, #7]
 80152c6:	4923      	ldr	r1, [pc, #140]	; (8015354 <etharp_output_to_arp_index+0x124>)
 80152c8:	4613      	mov	r3, r2
 80152ca:	005b      	lsls	r3, r3, #1
 80152cc:	4413      	add	r3, r2
 80152ce:	00db      	lsls	r3, r3, #3
 80152d0:	440b      	add	r3, r1
 80152d2:	3312      	adds	r3, #18
 80152d4:	881b      	ldrh	r3, [r3, #0]
 80152d6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80152da:	d321      	bcc.n	8015320 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80152dc:	79fa      	ldrb	r2, [r7, #7]
 80152de:	4613      	mov	r3, r2
 80152e0:	005b      	lsls	r3, r3, #1
 80152e2:	4413      	add	r3, r2
 80152e4:	00db      	lsls	r3, r3, #3
 80152e6:	4a1b      	ldr	r2, [pc, #108]	; (8015354 <etharp_output_to_arp_index+0x124>)
 80152e8:	4413      	add	r3, r2
 80152ea:	1d19      	adds	r1, r3, #4
 80152ec:	79fa      	ldrb	r2, [r7, #7]
 80152ee:	4613      	mov	r3, r2
 80152f0:	005b      	lsls	r3, r3, #1
 80152f2:	4413      	add	r3, r2
 80152f4:	00db      	lsls	r3, r3, #3
 80152f6:	3308      	adds	r3, #8
 80152f8:	4a16      	ldr	r2, [pc, #88]	; (8015354 <etharp_output_to_arp_index+0x124>)
 80152fa:	4413      	add	r3, r2
 80152fc:	3304      	adds	r3, #4
 80152fe:	461a      	mov	r2, r3
 8015300:	68f8      	ldr	r0, [r7, #12]
 8015302:	f000 fafb 	bl	80158fc <etharp_request_dst>
 8015306:	4603      	mov	r3, r0
 8015308:	2b00      	cmp	r3, #0
 801530a:	d109      	bne.n	8015320 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801530c:	79fa      	ldrb	r2, [r7, #7]
 801530e:	4911      	ldr	r1, [pc, #68]	; (8015354 <etharp_output_to_arp_index+0x124>)
 8015310:	4613      	mov	r3, r2
 8015312:	005b      	lsls	r3, r3, #1
 8015314:	4413      	add	r3, r2
 8015316:	00db      	lsls	r3, r3, #3
 8015318:	440b      	add	r3, r1
 801531a:	3314      	adds	r3, #20
 801531c:	2203      	movs	r2, #3
 801531e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8015326:	79fa      	ldrb	r2, [r7, #7]
 8015328:	4613      	mov	r3, r2
 801532a:	005b      	lsls	r3, r3, #1
 801532c:	4413      	add	r3, r2
 801532e:	00db      	lsls	r3, r3, #3
 8015330:	3308      	adds	r3, #8
 8015332:	4a08      	ldr	r2, [pc, #32]	; (8015354 <etharp_output_to_arp_index+0x124>)
 8015334:	4413      	add	r3, r2
 8015336:	3304      	adds	r3, #4
 8015338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801533c:	9200      	str	r2, [sp, #0]
 801533e:	460a      	mov	r2, r1
 8015340:	68b9      	ldr	r1, [r7, #8]
 8015342:	68f8      	ldr	r0, [r7, #12]
 8015344:	f001 fe40 	bl	8016fc8 <ethernet_output>
 8015348:	4603      	mov	r3, r0
}
 801534a:	4618      	mov	r0, r3
 801534c:	3710      	adds	r7, #16
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}
 8015352:	bf00      	nop
 8015354:	200081a0 	.word	0x200081a0
 8015358:	0801b2dc 	.word	0x0801b2dc
 801535c:	0801b44c 	.word	0x0801b44c
 8015360:	0801b354 	.word	0x0801b354

08015364 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b08a      	sub	sp, #40	; 0x28
 8015368:	af02      	add	r7, sp, #8
 801536a:	60f8      	str	r0, [r7, #12]
 801536c:	60b9      	str	r1, [r7, #8]
 801536e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d106      	bne.n	8015388 <etharp_output+0x24>
 801537a:	4b73      	ldr	r3, [pc, #460]	; (8015548 <etharp_output+0x1e4>)
 801537c:	f240 321e 	movw	r2, #798	; 0x31e
 8015380:	4972      	ldr	r1, [pc, #456]	; (801554c <etharp_output+0x1e8>)
 8015382:	4873      	ldr	r0, [pc, #460]	; (8015550 <etharp_output+0x1ec>)
 8015384:	f002 feca 	bl	801811c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015388:	68bb      	ldr	r3, [r7, #8]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d106      	bne.n	801539c <etharp_output+0x38>
 801538e:	4b6e      	ldr	r3, [pc, #440]	; (8015548 <etharp_output+0x1e4>)
 8015390:	f240 321f 	movw	r2, #799	; 0x31f
 8015394:	496f      	ldr	r1, [pc, #444]	; (8015554 <etharp_output+0x1f0>)
 8015396:	486e      	ldr	r0, [pc, #440]	; (8015550 <etharp_output+0x1ec>)
 8015398:	f002 fec0 	bl	801811c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d106      	bne.n	80153b0 <etharp_output+0x4c>
 80153a2:	4b69      	ldr	r3, [pc, #420]	; (8015548 <etharp_output+0x1e4>)
 80153a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80153a8:	496b      	ldr	r1, [pc, #428]	; (8015558 <etharp_output+0x1f4>)
 80153aa:	4869      	ldr	r0, [pc, #420]	; (8015550 <etharp_output+0x1ec>)
 80153ac:	f002 feb6 	bl	801811c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	68f9      	ldr	r1, [r7, #12]
 80153b6:	4618      	mov	r0, r3
 80153b8:	f000 fef8 	bl	80161ac <ip4_addr_isbroadcast_u32>
 80153bc:	4603      	mov	r3, r0
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d002      	beq.n	80153c8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80153c2:	4b66      	ldr	r3, [pc, #408]	; (801555c <etharp_output+0x1f8>)
 80153c4:	61fb      	str	r3, [r7, #28]
 80153c6:	e0af      	b.n	8015528 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80153d0:	2be0      	cmp	r3, #224	; 0xe0
 80153d2:	d118      	bne.n	8015406 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80153d4:	2301      	movs	r3, #1
 80153d6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80153d8:	2300      	movs	r3, #0
 80153da:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80153dc:	235e      	movs	r3, #94	; 0x5e
 80153de:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	3301      	adds	r3, #1
 80153e4:	781b      	ldrb	r3, [r3, #0]
 80153e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80153ea:	b2db      	uxtb	r3, r3
 80153ec:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	3302      	adds	r3, #2
 80153f2:	781b      	ldrb	r3, [r3, #0]
 80153f4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	3303      	adds	r3, #3
 80153fa:	781b      	ldrb	r3, [r3, #0]
 80153fc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80153fe:	f107 0310 	add.w	r3, r7, #16
 8015402:	61fb      	str	r3, [r7, #28]
 8015404:	e090      	b.n	8015528 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	681a      	ldr	r2, [r3, #0]
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	3304      	adds	r3, #4
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	405a      	eors	r2, r3
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	3308      	adds	r3, #8
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	4013      	ands	r3, r2
 801541a:	2b00      	cmp	r3, #0
 801541c:	d012      	beq.n	8015444 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015424:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015428:	4293      	cmp	r3, r2
 801542a:	d00b      	beq.n	8015444 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	330c      	adds	r3, #12
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d003      	beq.n	801543e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	330c      	adds	r3, #12
 801543a:	61bb      	str	r3, [r7, #24]
 801543c:	e002      	b.n	8015444 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801543e:	f06f 0303 	mvn.w	r3, #3
 8015442:	e07d      	b.n	8015540 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015444:	4b46      	ldr	r3, [pc, #280]	; (8015560 <etharp_output+0x1fc>)
 8015446:	781b      	ldrb	r3, [r3, #0]
 8015448:	4619      	mov	r1, r3
 801544a:	4a46      	ldr	r2, [pc, #280]	; (8015564 <etharp_output+0x200>)
 801544c:	460b      	mov	r3, r1
 801544e:	005b      	lsls	r3, r3, #1
 8015450:	440b      	add	r3, r1
 8015452:	00db      	lsls	r3, r3, #3
 8015454:	4413      	add	r3, r2
 8015456:	3314      	adds	r3, #20
 8015458:	781b      	ldrb	r3, [r3, #0]
 801545a:	2b01      	cmp	r3, #1
 801545c:	d925      	bls.n	80154aa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801545e:	4b40      	ldr	r3, [pc, #256]	; (8015560 <etharp_output+0x1fc>)
 8015460:	781b      	ldrb	r3, [r3, #0]
 8015462:	4619      	mov	r1, r3
 8015464:	4a3f      	ldr	r2, [pc, #252]	; (8015564 <etharp_output+0x200>)
 8015466:	460b      	mov	r3, r1
 8015468:	005b      	lsls	r3, r3, #1
 801546a:	440b      	add	r3, r1
 801546c:	00db      	lsls	r3, r3, #3
 801546e:	4413      	add	r3, r2
 8015470:	3308      	adds	r3, #8
 8015472:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015474:	68fa      	ldr	r2, [r7, #12]
 8015476:	429a      	cmp	r2, r3
 8015478:	d117      	bne.n	80154aa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801547a:	69bb      	ldr	r3, [r7, #24]
 801547c:	681a      	ldr	r2, [r3, #0]
 801547e:	4b38      	ldr	r3, [pc, #224]	; (8015560 <etharp_output+0x1fc>)
 8015480:	781b      	ldrb	r3, [r3, #0]
 8015482:	4618      	mov	r0, r3
 8015484:	4937      	ldr	r1, [pc, #220]	; (8015564 <etharp_output+0x200>)
 8015486:	4603      	mov	r3, r0
 8015488:	005b      	lsls	r3, r3, #1
 801548a:	4403      	add	r3, r0
 801548c:	00db      	lsls	r3, r3, #3
 801548e:	440b      	add	r3, r1
 8015490:	3304      	adds	r3, #4
 8015492:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015494:	429a      	cmp	r2, r3
 8015496:	d108      	bne.n	80154aa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015498:	4b31      	ldr	r3, [pc, #196]	; (8015560 <etharp_output+0x1fc>)
 801549a:	781b      	ldrb	r3, [r3, #0]
 801549c:	461a      	mov	r2, r3
 801549e:	68b9      	ldr	r1, [r7, #8]
 80154a0:	68f8      	ldr	r0, [r7, #12]
 80154a2:	f7ff fec5 	bl	8015230 <etharp_output_to_arp_index>
 80154a6:	4603      	mov	r3, r0
 80154a8:	e04a      	b.n	8015540 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80154aa:	2300      	movs	r3, #0
 80154ac:	75fb      	strb	r3, [r7, #23]
 80154ae:	e031      	b.n	8015514 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80154b0:	7dfa      	ldrb	r2, [r7, #23]
 80154b2:	492c      	ldr	r1, [pc, #176]	; (8015564 <etharp_output+0x200>)
 80154b4:	4613      	mov	r3, r2
 80154b6:	005b      	lsls	r3, r3, #1
 80154b8:	4413      	add	r3, r2
 80154ba:	00db      	lsls	r3, r3, #3
 80154bc:	440b      	add	r3, r1
 80154be:	3314      	adds	r3, #20
 80154c0:	781b      	ldrb	r3, [r3, #0]
 80154c2:	2b01      	cmp	r3, #1
 80154c4:	d923      	bls.n	801550e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80154c6:	7dfa      	ldrb	r2, [r7, #23]
 80154c8:	4926      	ldr	r1, [pc, #152]	; (8015564 <etharp_output+0x200>)
 80154ca:	4613      	mov	r3, r2
 80154cc:	005b      	lsls	r3, r3, #1
 80154ce:	4413      	add	r3, r2
 80154d0:	00db      	lsls	r3, r3, #3
 80154d2:	440b      	add	r3, r1
 80154d4:	3308      	adds	r3, #8
 80154d6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80154d8:	68fa      	ldr	r2, [r7, #12]
 80154da:	429a      	cmp	r2, r3
 80154dc:	d117      	bne.n	801550e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80154de:	69bb      	ldr	r3, [r7, #24]
 80154e0:	6819      	ldr	r1, [r3, #0]
 80154e2:	7dfa      	ldrb	r2, [r7, #23]
 80154e4:	481f      	ldr	r0, [pc, #124]	; (8015564 <etharp_output+0x200>)
 80154e6:	4613      	mov	r3, r2
 80154e8:	005b      	lsls	r3, r3, #1
 80154ea:	4413      	add	r3, r2
 80154ec:	00db      	lsls	r3, r3, #3
 80154ee:	4403      	add	r3, r0
 80154f0:	3304      	adds	r3, #4
 80154f2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80154f4:	4299      	cmp	r1, r3
 80154f6:	d10a      	bne.n	801550e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80154f8:	4a19      	ldr	r2, [pc, #100]	; (8015560 <etharp_output+0x1fc>)
 80154fa:	7dfb      	ldrb	r3, [r7, #23]
 80154fc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80154fe:	7dfb      	ldrb	r3, [r7, #23]
 8015500:	461a      	mov	r2, r3
 8015502:	68b9      	ldr	r1, [r7, #8]
 8015504:	68f8      	ldr	r0, [r7, #12]
 8015506:	f7ff fe93 	bl	8015230 <etharp_output_to_arp_index>
 801550a:	4603      	mov	r3, r0
 801550c:	e018      	b.n	8015540 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801550e:	7dfb      	ldrb	r3, [r7, #23]
 8015510:	3301      	adds	r3, #1
 8015512:	75fb      	strb	r3, [r7, #23]
 8015514:	7dfb      	ldrb	r3, [r7, #23]
 8015516:	2b09      	cmp	r3, #9
 8015518:	d9ca      	bls.n	80154b0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801551a:	68ba      	ldr	r2, [r7, #8]
 801551c:	69b9      	ldr	r1, [r7, #24]
 801551e:	68f8      	ldr	r0, [r7, #12]
 8015520:	f000 f822 	bl	8015568 <etharp_query>
 8015524:	4603      	mov	r3, r0
 8015526:	e00b      	b.n	8015540 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801552e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015532:	9300      	str	r3, [sp, #0]
 8015534:	69fb      	ldr	r3, [r7, #28]
 8015536:	68b9      	ldr	r1, [r7, #8]
 8015538:	68f8      	ldr	r0, [r7, #12]
 801553a:	f001 fd45 	bl	8016fc8 <ethernet_output>
 801553e:	4603      	mov	r3, r0
}
 8015540:	4618      	mov	r0, r3
 8015542:	3720      	adds	r7, #32
 8015544:	46bd      	mov	sp, r7
 8015546:	bd80      	pop	{r7, pc}
 8015548:	0801b2dc 	.word	0x0801b2dc
 801554c:	0801b42c 	.word	0x0801b42c
 8015550:	0801b354 	.word	0x0801b354
 8015554:	0801b47c 	.word	0x0801b47c
 8015558:	0801b41c 	.word	0x0801b41c
 801555c:	0801bb18 	.word	0x0801bb18
 8015560:	20008290 	.word	0x20008290
 8015564:	200081a0 	.word	0x200081a0

08015568 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b08c      	sub	sp, #48	; 0x30
 801556c:	af02      	add	r7, sp, #8
 801556e:	60f8      	str	r0, [r7, #12]
 8015570:	60b9      	str	r1, [r7, #8]
 8015572:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	3326      	adds	r3, #38	; 0x26
 8015578:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801557a:	23ff      	movs	r3, #255	; 0xff
 801557c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015580:	2300      	movs	r3, #0
 8015582:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015584:	68bb      	ldr	r3, [r7, #8]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	68f9      	ldr	r1, [r7, #12]
 801558a:	4618      	mov	r0, r3
 801558c:	f000 fe0e 	bl	80161ac <ip4_addr_isbroadcast_u32>
 8015590:	4603      	mov	r3, r0
 8015592:	2b00      	cmp	r3, #0
 8015594:	d10c      	bne.n	80155b0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015596:	68bb      	ldr	r3, [r7, #8]
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801559e:	2be0      	cmp	r3, #224	; 0xe0
 80155a0:	d006      	beq.n	80155b0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80155a2:	68bb      	ldr	r3, [r7, #8]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d003      	beq.n	80155b0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80155a8:	68bb      	ldr	r3, [r7, #8]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d102      	bne.n	80155b6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80155b0:	f06f 030f 	mvn.w	r3, #15
 80155b4:	e101      	b.n	80157ba <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80155b6:	68fa      	ldr	r2, [r7, #12]
 80155b8:	2101      	movs	r1, #1
 80155ba:	68b8      	ldr	r0, [r7, #8]
 80155bc:	f7ff fb60 	bl	8014c80 <etharp_find_entry>
 80155c0:	4603      	mov	r3, r0
 80155c2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80155c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	da02      	bge.n	80155d2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80155cc:	8a7b      	ldrh	r3, [r7, #18]
 80155ce:	b25b      	sxtb	r3, r3
 80155d0:	e0f3      	b.n	80157ba <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80155d2:	8a7b      	ldrh	r3, [r7, #18]
 80155d4:	2b7e      	cmp	r3, #126	; 0x7e
 80155d6:	d906      	bls.n	80155e6 <etharp_query+0x7e>
 80155d8:	4b7a      	ldr	r3, [pc, #488]	; (80157c4 <etharp_query+0x25c>)
 80155da:	f240 32c1 	movw	r2, #961	; 0x3c1
 80155de:	497a      	ldr	r1, [pc, #488]	; (80157c8 <etharp_query+0x260>)
 80155e0:	487a      	ldr	r0, [pc, #488]	; (80157cc <etharp_query+0x264>)
 80155e2:	f002 fd9b 	bl	801811c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80155e6:	8a7b      	ldrh	r3, [r7, #18]
 80155e8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80155ea:	7c7a      	ldrb	r2, [r7, #17]
 80155ec:	4978      	ldr	r1, [pc, #480]	; (80157d0 <etharp_query+0x268>)
 80155ee:	4613      	mov	r3, r2
 80155f0:	005b      	lsls	r3, r3, #1
 80155f2:	4413      	add	r3, r2
 80155f4:	00db      	lsls	r3, r3, #3
 80155f6:	440b      	add	r3, r1
 80155f8:	3314      	adds	r3, #20
 80155fa:	781b      	ldrb	r3, [r3, #0]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d115      	bne.n	801562c <etharp_query+0xc4>
    is_new_entry = 1;
 8015600:	2301      	movs	r3, #1
 8015602:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015604:	7c7a      	ldrb	r2, [r7, #17]
 8015606:	4972      	ldr	r1, [pc, #456]	; (80157d0 <etharp_query+0x268>)
 8015608:	4613      	mov	r3, r2
 801560a:	005b      	lsls	r3, r3, #1
 801560c:	4413      	add	r3, r2
 801560e:	00db      	lsls	r3, r3, #3
 8015610:	440b      	add	r3, r1
 8015612:	3314      	adds	r3, #20
 8015614:	2201      	movs	r2, #1
 8015616:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015618:	7c7a      	ldrb	r2, [r7, #17]
 801561a:	496d      	ldr	r1, [pc, #436]	; (80157d0 <etharp_query+0x268>)
 801561c:	4613      	mov	r3, r2
 801561e:	005b      	lsls	r3, r3, #1
 8015620:	4413      	add	r3, r2
 8015622:	00db      	lsls	r3, r3, #3
 8015624:	440b      	add	r3, r1
 8015626:	3308      	adds	r3, #8
 8015628:	68fa      	ldr	r2, [r7, #12]
 801562a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801562c:	7c7a      	ldrb	r2, [r7, #17]
 801562e:	4968      	ldr	r1, [pc, #416]	; (80157d0 <etharp_query+0x268>)
 8015630:	4613      	mov	r3, r2
 8015632:	005b      	lsls	r3, r3, #1
 8015634:	4413      	add	r3, r2
 8015636:	00db      	lsls	r3, r3, #3
 8015638:	440b      	add	r3, r1
 801563a:	3314      	adds	r3, #20
 801563c:	781b      	ldrb	r3, [r3, #0]
 801563e:	2b01      	cmp	r3, #1
 8015640:	d011      	beq.n	8015666 <etharp_query+0xfe>
 8015642:	7c7a      	ldrb	r2, [r7, #17]
 8015644:	4962      	ldr	r1, [pc, #392]	; (80157d0 <etharp_query+0x268>)
 8015646:	4613      	mov	r3, r2
 8015648:	005b      	lsls	r3, r3, #1
 801564a:	4413      	add	r3, r2
 801564c:	00db      	lsls	r3, r3, #3
 801564e:	440b      	add	r3, r1
 8015650:	3314      	adds	r3, #20
 8015652:	781b      	ldrb	r3, [r3, #0]
 8015654:	2b01      	cmp	r3, #1
 8015656:	d806      	bhi.n	8015666 <etharp_query+0xfe>
 8015658:	4b5a      	ldr	r3, [pc, #360]	; (80157c4 <etharp_query+0x25c>)
 801565a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801565e:	495d      	ldr	r1, [pc, #372]	; (80157d4 <etharp_query+0x26c>)
 8015660:	485a      	ldr	r0, [pc, #360]	; (80157cc <etharp_query+0x264>)
 8015662:	f002 fd5b 	bl	801811c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015666:	6a3b      	ldr	r3, [r7, #32]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d102      	bne.n	8015672 <etharp_query+0x10a>
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d10c      	bne.n	801568c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015672:	68b9      	ldr	r1, [r7, #8]
 8015674:	68f8      	ldr	r0, [r7, #12]
 8015676:	f000 f963 	bl	8015940 <etharp_request>
 801567a:	4603      	mov	r3, r0
 801567c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d102      	bne.n	801568c <etharp_query+0x124>
      return result;
 8015686:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801568a:	e096      	b.n	80157ba <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d106      	bne.n	80156a0 <etharp_query+0x138>
 8015692:	4b4c      	ldr	r3, [pc, #304]	; (80157c4 <etharp_query+0x25c>)
 8015694:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015698:	494f      	ldr	r1, [pc, #316]	; (80157d8 <etharp_query+0x270>)
 801569a:	484c      	ldr	r0, [pc, #304]	; (80157cc <etharp_query+0x264>)
 801569c:	f002 fd3e 	bl	801811c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80156a0:	7c7a      	ldrb	r2, [r7, #17]
 80156a2:	494b      	ldr	r1, [pc, #300]	; (80157d0 <etharp_query+0x268>)
 80156a4:	4613      	mov	r3, r2
 80156a6:	005b      	lsls	r3, r3, #1
 80156a8:	4413      	add	r3, r2
 80156aa:	00db      	lsls	r3, r3, #3
 80156ac:	440b      	add	r3, r1
 80156ae:	3314      	adds	r3, #20
 80156b0:	781b      	ldrb	r3, [r3, #0]
 80156b2:	2b01      	cmp	r3, #1
 80156b4:	d917      	bls.n	80156e6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80156b6:	4a49      	ldr	r2, [pc, #292]	; (80157dc <etharp_query+0x274>)
 80156b8:	7c7b      	ldrb	r3, [r7, #17]
 80156ba:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80156bc:	7c7a      	ldrb	r2, [r7, #17]
 80156be:	4613      	mov	r3, r2
 80156c0:	005b      	lsls	r3, r3, #1
 80156c2:	4413      	add	r3, r2
 80156c4:	00db      	lsls	r3, r3, #3
 80156c6:	3308      	adds	r3, #8
 80156c8:	4a41      	ldr	r2, [pc, #260]	; (80157d0 <etharp_query+0x268>)
 80156ca:	4413      	add	r3, r2
 80156cc:	3304      	adds	r3, #4
 80156ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80156d2:	9200      	str	r2, [sp, #0]
 80156d4:	697a      	ldr	r2, [r7, #20]
 80156d6:	6879      	ldr	r1, [r7, #4]
 80156d8:	68f8      	ldr	r0, [r7, #12]
 80156da:	f001 fc75 	bl	8016fc8 <ethernet_output>
 80156de:	4603      	mov	r3, r0
 80156e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156e4:	e067      	b.n	80157b6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80156e6:	7c7a      	ldrb	r2, [r7, #17]
 80156e8:	4939      	ldr	r1, [pc, #228]	; (80157d0 <etharp_query+0x268>)
 80156ea:	4613      	mov	r3, r2
 80156ec:	005b      	lsls	r3, r3, #1
 80156ee:	4413      	add	r3, r2
 80156f0:	00db      	lsls	r3, r3, #3
 80156f2:	440b      	add	r3, r1
 80156f4:	3314      	adds	r3, #20
 80156f6:	781b      	ldrb	r3, [r3, #0]
 80156f8:	2b01      	cmp	r3, #1
 80156fa:	d15c      	bne.n	80157b6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80156fc:	2300      	movs	r3, #0
 80156fe:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015704:	e01c      	b.n	8015740 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015706:	69fb      	ldr	r3, [r7, #28]
 8015708:	895a      	ldrh	r2, [r3, #10]
 801570a:	69fb      	ldr	r3, [r7, #28]
 801570c:	891b      	ldrh	r3, [r3, #8]
 801570e:	429a      	cmp	r2, r3
 8015710:	d10a      	bne.n	8015728 <etharp_query+0x1c0>
 8015712:	69fb      	ldr	r3, [r7, #28]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d006      	beq.n	8015728 <etharp_query+0x1c0>
 801571a:	4b2a      	ldr	r3, [pc, #168]	; (80157c4 <etharp_query+0x25c>)
 801571c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015720:	492f      	ldr	r1, [pc, #188]	; (80157e0 <etharp_query+0x278>)
 8015722:	482a      	ldr	r0, [pc, #168]	; (80157cc <etharp_query+0x264>)
 8015724:	f002 fcfa 	bl	801811c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015728:	69fb      	ldr	r3, [r7, #28]
 801572a:	7b1b      	ldrb	r3, [r3, #12]
 801572c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015730:	2b00      	cmp	r3, #0
 8015732:	d002      	beq.n	801573a <etharp_query+0x1d2>
        copy_needed = 1;
 8015734:	2301      	movs	r3, #1
 8015736:	61bb      	str	r3, [r7, #24]
        break;
 8015738:	e005      	b.n	8015746 <etharp_query+0x1de>
      }
      p = p->next;
 801573a:	69fb      	ldr	r3, [r7, #28]
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015740:	69fb      	ldr	r3, [r7, #28]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d1df      	bne.n	8015706 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015746:	69bb      	ldr	r3, [r7, #24]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d007      	beq.n	801575c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801574c:	687a      	ldr	r2, [r7, #4]
 801574e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015752:	200e      	movs	r0, #14
 8015754:	f7f8 fec4 	bl	800e4e0 <pbuf_clone>
 8015758:	61f8      	str	r0, [r7, #28]
 801575a:	e004      	b.n	8015766 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015760:	69f8      	ldr	r0, [r7, #28]
 8015762:	f7f8 fd01 	bl	800e168 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015766:	69fb      	ldr	r3, [r7, #28]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d021      	beq.n	80157b0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801576c:	7c7a      	ldrb	r2, [r7, #17]
 801576e:	4918      	ldr	r1, [pc, #96]	; (80157d0 <etharp_query+0x268>)
 8015770:	4613      	mov	r3, r2
 8015772:	005b      	lsls	r3, r3, #1
 8015774:	4413      	add	r3, r2
 8015776:	00db      	lsls	r3, r3, #3
 8015778:	440b      	add	r3, r1
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d00a      	beq.n	8015796 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015780:	7c7a      	ldrb	r2, [r7, #17]
 8015782:	4913      	ldr	r1, [pc, #76]	; (80157d0 <etharp_query+0x268>)
 8015784:	4613      	mov	r3, r2
 8015786:	005b      	lsls	r3, r3, #1
 8015788:	4413      	add	r3, r2
 801578a:	00db      	lsls	r3, r3, #3
 801578c:	440b      	add	r3, r1
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	4618      	mov	r0, r3
 8015792:	f7f8 fc49 	bl	800e028 <pbuf_free>
      }
      arp_table[i].q = p;
 8015796:	7c7a      	ldrb	r2, [r7, #17]
 8015798:	490d      	ldr	r1, [pc, #52]	; (80157d0 <etharp_query+0x268>)
 801579a:	4613      	mov	r3, r2
 801579c:	005b      	lsls	r3, r3, #1
 801579e:	4413      	add	r3, r2
 80157a0:	00db      	lsls	r3, r3, #3
 80157a2:	440b      	add	r3, r1
 80157a4:	69fa      	ldr	r2, [r7, #28]
 80157a6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80157a8:	2300      	movs	r3, #0
 80157aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80157ae:	e002      	b.n	80157b6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80157b0:	23ff      	movs	r3, #255	; 0xff
 80157b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80157b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80157ba:	4618      	mov	r0, r3
 80157bc:	3728      	adds	r7, #40	; 0x28
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	0801b2dc 	.word	0x0801b2dc
 80157c8:	0801b488 	.word	0x0801b488
 80157cc:	0801b354 	.word	0x0801b354
 80157d0:	200081a0 	.word	0x200081a0
 80157d4:	0801b498 	.word	0x0801b498
 80157d8:	0801b47c 	.word	0x0801b47c
 80157dc:	20008290 	.word	0x20008290
 80157e0:	0801b4c0 	.word	0x0801b4c0

080157e4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b08a      	sub	sp, #40	; 0x28
 80157e8:	af02      	add	r7, sp, #8
 80157ea:	60f8      	str	r0, [r7, #12]
 80157ec:	60b9      	str	r1, [r7, #8]
 80157ee:	607a      	str	r2, [r7, #4]
 80157f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80157f2:	2300      	movs	r3, #0
 80157f4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d106      	bne.n	801580a <etharp_raw+0x26>
 80157fc:	4b3a      	ldr	r3, [pc, #232]	; (80158e8 <etharp_raw+0x104>)
 80157fe:	f240 4257 	movw	r2, #1111	; 0x457
 8015802:	493a      	ldr	r1, [pc, #232]	; (80158ec <etharp_raw+0x108>)
 8015804:	483a      	ldr	r0, [pc, #232]	; (80158f0 <etharp_raw+0x10c>)
 8015806:	f002 fc89 	bl	801811c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801580a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801580e:	211c      	movs	r1, #28
 8015810:	200e      	movs	r0, #14
 8015812:	f7f8 f925 	bl	800da60 <pbuf_alloc>
 8015816:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015818:	69bb      	ldr	r3, [r7, #24]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d102      	bne.n	8015824 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801581e:	f04f 33ff 	mov.w	r3, #4294967295
 8015822:	e05d      	b.n	80158e0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015824:	69bb      	ldr	r3, [r7, #24]
 8015826:	895b      	ldrh	r3, [r3, #10]
 8015828:	2b1b      	cmp	r3, #27
 801582a:	d806      	bhi.n	801583a <etharp_raw+0x56>
 801582c:	4b2e      	ldr	r3, [pc, #184]	; (80158e8 <etharp_raw+0x104>)
 801582e:	f240 4262 	movw	r2, #1122	; 0x462
 8015832:	4930      	ldr	r1, [pc, #192]	; (80158f4 <etharp_raw+0x110>)
 8015834:	482e      	ldr	r0, [pc, #184]	; (80158f0 <etharp_raw+0x10c>)
 8015836:	f002 fc71 	bl	801811c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801583a:	69bb      	ldr	r3, [r7, #24]
 801583c:	685b      	ldr	r3, [r3, #4]
 801583e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015840:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015842:	4618      	mov	r0, r3
 8015844:	f7f7 f893 	bl	800c96e <lwip_htons>
 8015848:	4603      	mov	r3, r0
 801584a:	461a      	mov	r2, r3
 801584c:	697b      	ldr	r3, [r7, #20]
 801584e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015856:	2b06      	cmp	r3, #6
 8015858:	d006      	beq.n	8015868 <etharp_raw+0x84>
 801585a:	4b23      	ldr	r3, [pc, #140]	; (80158e8 <etharp_raw+0x104>)
 801585c:	f240 4269 	movw	r2, #1129	; 0x469
 8015860:	4925      	ldr	r1, [pc, #148]	; (80158f8 <etharp_raw+0x114>)
 8015862:	4823      	ldr	r0, [pc, #140]	; (80158f0 <etharp_raw+0x10c>)
 8015864:	f002 fc5a 	bl	801811c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015868:	697b      	ldr	r3, [r7, #20]
 801586a:	3308      	adds	r3, #8
 801586c:	2206      	movs	r2, #6
 801586e:	6839      	ldr	r1, [r7, #0]
 8015870:	4618      	mov	r0, r3
 8015872:	f002 fd46 	bl	8018302 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015876:	697b      	ldr	r3, [r7, #20]
 8015878:	3312      	adds	r3, #18
 801587a:	2206      	movs	r2, #6
 801587c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801587e:	4618      	mov	r0, r3
 8015880:	f002 fd3f 	bl	8018302 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015884:	697b      	ldr	r3, [r7, #20]
 8015886:	330e      	adds	r3, #14
 8015888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801588a:	6812      	ldr	r2, [r2, #0]
 801588c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801588e:	697b      	ldr	r3, [r7, #20]
 8015890:	3318      	adds	r3, #24
 8015892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015894:	6812      	ldr	r2, [r2, #0]
 8015896:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015898:	697b      	ldr	r3, [r7, #20]
 801589a:	2200      	movs	r2, #0
 801589c:	701a      	strb	r2, [r3, #0]
 801589e:	2200      	movs	r2, #0
 80158a0:	f042 0201 	orr.w	r2, r2, #1
 80158a4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80158a6:	697b      	ldr	r3, [r7, #20]
 80158a8:	2200      	movs	r2, #0
 80158aa:	f042 0208 	orr.w	r2, r2, #8
 80158ae:	709a      	strb	r2, [r3, #2]
 80158b0:	2200      	movs	r2, #0
 80158b2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80158b4:	697b      	ldr	r3, [r7, #20]
 80158b6:	2206      	movs	r2, #6
 80158b8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80158ba:	697b      	ldr	r3, [r7, #20]
 80158bc:	2204      	movs	r2, #4
 80158be:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80158c0:	f640 0306 	movw	r3, #2054	; 0x806
 80158c4:	9300      	str	r3, [sp, #0]
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	68ba      	ldr	r2, [r7, #8]
 80158ca:	69b9      	ldr	r1, [r7, #24]
 80158cc:	68f8      	ldr	r0, [r7, #12]
 80158ce:	f001 fb7b 	bl	8016fc8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80158d2:	69b8      	ldr	r0, [r7, #24]
 80158d4:	f7f8 fba8 	bl	800e028 <pbuf_free>
  p = NULL;
 80158d8:	2300      	movs	r3, #0
 80158da:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80158dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	3720      	adds	r7, #32
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	0801b2dc 	.word	0x0801b2dc
 80158ec:	0801b42c 	.word	0x0801b42c
 80158f0:	0801b354 	.word	0x0801b354
 80158f4:	0801b4dc 	.word	0x0801b4dc
 80158f8:	0801b510 	.word	0x0801b510

080158fc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b088      	sub	sp, #32
 8015900:	af04      	add	r7, sp, #16
 8015902:	60f8      	str	r0, [r7, #12]
 8015904:	60b9      	str	r1, [r7, #8]
 8015906:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015918:	2201      	movs	r2, #1
 801591a:	9203      	str	r2, [sp, #12]
 801591c:	68ba      	ldr	r2, [r7, #8]
 801591e:	9202      	str	r2, [sp, #8]
 8015920:	4a06      	ldr	r2, [pc, #24]	; (801593c <etharp_request_dst+0x40>)
 8015922:	9201      	str	r2, [sp, #4]
 8015924:	9300      	str	r3, [sp, #0]
 8015926:	4603      	mov	r3, r0
 8015928:	687a      	ldr	r2, [r7, #4]
 801592a:	68f8      	ldr	r0, [r7, #12]
 801592c:	f7ff ff5a 	bl	80157e4 <etharp_raw>
 8015930:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015932:	4618      	mov	r0, r3
 8015934:	3710      	adds	r7, #16
 8015936:	46bd      	mov	sp, r7
 8015938:	bd80      	pop	{r7, pc}
 801593a:	bf00      	nop
 801593c:	0801bb20 	.word	0x0801bb20

08015940 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b082      	sub	sp, #8
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
 8015948:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801594a:	4a05      	ldr	r2, [pc, #20]	; (8015960 <etharp_request+0x20>)
 801594c:	6839      	ldr	r1, [r7, #0]
 801594e:	6878      	ldr	r0, [r7, #4]
 8015950:	f7ff ffd4 	bl	80158fc <etharp_request_dst>
 8015954:	4603      	mov	r3, r0
}
 8015956:	4618      	mov	r0, r3
 8015958:	3708      	adds	r7, #8
 801595a:	46bd      	mov	sp, r7
 801595c:	bd80      	pop	{r7, pc}
 801595e:	bf00      	nop
 8015960:	0801bb18 	.word	0x0801bb18

08015964 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b08e      	sub	sp, #56	; 0x38
 8015968:	af04      	add	r7, sp, #16
 801596a:	6078      	str	r0, [r7, #4]
 801596c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801596e:	4b79      	ldr	r3, [pc, #484]	; (8015b54 <icmp_input+0x1f0>)
 8015970:	689b      	ldr	r3, [r3, #8]
 8015972:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015976:	781b      	ldrb	r3, [r3, #0]
 8015978:	f003 030f 	and.w	r3, r3, #15
 801597c:	b2db      	uxtb	r3, r3
 801597e:	009b      	lsls	r3, r3, #2
 8015980:	b2db      	uxtb	r3, r3
 8015982:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015984:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015986:	2b13      	cmp	r3, #19
 8015988:	f240 80cd 	bls.w	8015b26 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	895b      	ldrh	r3, [r3, #10]
 8015990:	2b03      	cmp	r3, #3
 8015992:	f240 80ca 	bls.w	8015b2a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	685b      	ldr	r3, [r3, #4]
 801599a:	781b      	ldrb	r3, [r3, #0]
 801599c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80159a0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	f000 80b7 	beq.w	8015b18 <icmp_input+0x1b4>
 80159aa:	2b08      	cmp	r3, #8
 80159ac:	f040 80b7 	bne.w	8015b1e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80159b0:	4b69      	ldr	r3, [pc, #420]	; (8015b58 <icmp_input+0x1f4>)
 80159b2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80159b4:	4b67      	ldr	r3, [pc, #412]	; (8015b54 <icmp_input+0x1f0>)
 80159b6:	695b      	ldr	r3, [r3, #20]
 80159b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80159bc:	2be0      	cmp	r3, #224	; 0xe0
 80159be:	f000 80bb 	beq.w	8015b38 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80159c2:	4b64      	ldr	r3, [pc, #400]	; (8015b54 <icmp_input+0x1f0>)
 80159c4:	695b      	ldr	r3, [r3, #20]
 80159c6:	4a63      	ldr	r2, [pc, #396]	; (8015b54 <icmp_input+0x1f0>)
 80159c8:	6812      	ldr	r2, [r2, #0]
 80159ca:	4611      	mov	r1, r2
 80159cc:	4618      	mov	r0, r3
 80159ce:	f000 fbed 	bl	80161ac <ip4_addr_isbroadcast_u32>
 80159d2:	4603      	mov	r3, r0
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	f040 80b1 	bne.w	8015b3c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	891b      	ldrh	r3, [r3, #8]
 80159de:	2b07      	cmp	r3, #7
 80159e0:	f240 80a5 	bls.w	8015b2e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80159e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159e6:	330e      	adds	r3, #14
 80159e8:	4619      	mov	r1, r3
 80159ea:	6878      	ldr	r0, [r7, #4]
 80159ec:	f7f8 fa86 	bl	800defc <pbuf_add_header>
 80159f0:	4603      	mov	r3, r0
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d04b      	beq.n	8015a8e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	891a      	ldrh	r2, [r3, #8]
 80159fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159fc:	4413      	add	r3, r2
 80159fe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	891b      	ldrh	r3, [r3, #8]
 8015a04:	8b7a      	ldrh	r2, [r7, #26]
 8015a06:	429a      	cmp	r2, r3
 8015a08:	f0c0 809a 	bcc.w	8015b40 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015a0c:	8b7b      	ldrh	r3, [r7, #26]
 8015a0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015a12:	4619      	mov	r1, r3
 8015a14:	200e      	movs	r0, #14
 8015a16:	f7f8 f823 	bl	800da60 <pbuf_alloc>
 8015a1a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015a1c:	697b      	ldr	r3, [r7, #20]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	f000 8090 	beq.w	8015b44 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015a24:	697b      	ldr	r3, [r7, #20]
 8015a26:	895b      	ldrh	r3, [r3, #10]
 8015a28:	461a      	mov	r2, r3
 8015a2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a2c:	3308      	adds	r3, #8
 8015a2e:	429a      	cmp	r2, r3
 8015a30:	d203      	bcs.n	8015a3a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015a32:	6978      	ldr	r0, [r7, #20]
 8015a34:	f7f8 faf8 	bl	800e028 <pbuf_free>
          goto icmperr;
 8015a38:	e085      	b.n	8015b46 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015a3a:	697b      	ldr	r3, [r7, #20]
 8015a3c:	685b      	ldr	r3, [r3, #4]
 8015a3e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015a42:	4618      	mov	r0, r3
 8015a44:	f002 fc5d 	bl	8018302 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015a48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a4a:	4619      	mov	r1, r3
 8015a4c:	6978      	ldr	r0, [r7, #20]
 8015a4e:	f7f8 fa65 	bl	800df1c <pbuf_remove_header>
 8015a52:	4603      	mov	r3, r0
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d009      	beq.n	8015a6c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015a58:	4b40      	ldr	r3, [pc, #256]	; (8015b5c <icmp_input+0x1f8>)
 8015a5a:	22b6      	movs	r2, #182	; 0xb6
 8015a5c:	4940      	ldr	r1, [pc, #256]	; (8015b60 <icmp_input+0x1fc>)
 8015a5e:	4841      	ldr	r0, [pc, #260]	; (8015b64 <icmp_input+0x200>)
 8015a60:	f002 fb5c 	bl	801811c <iprintf>
          pbuf_free(r);
 8015a64:	6978      	ldr	r0, [r7, #20]
 8015a66:	f7f8 fadf 	bl	800e028 <pbuf_free>
          goto icmperr;
 8015a6a:	e06c      	b.n	8015b46 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015a6c:	6879      	ldr	r1, [r7, #4]
 8015a6e:	6978      	ldr	r0, [r7, #20]
 8015a70:	f7f8 fbf2 	bl	800e258 <pbuf_copy>
 8015a74:	4603      	mov	r3, r0
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d003      	beq.n	8015a82 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015a7a:	6978      	ldr	r0, [r7, #20]
 8015a7c:	f7f8 fad4 	bl	800e028 <pbuf_free>
          goto icmperr;
 8015a80:	e061      	b.n	8015b46 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015a82:	6878      	ldr	r0, [r7, #4]
 8015a84:	f7f8 fad0 	bl	800e028 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015a88:	697b      	ldr	r3, [r7, #20]
 8015a8a:	607b      	str	r3, [r7, #4]
 8015a8c:	e00f      	b.n	8015aae <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015a8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a90:	330e      	adds	r3, #14
 8015a92:	4619      	mov	r1, r3
 8015a94:	6878      	ldr	r0, [r7, #4]
 8015a96:	f7f8 fa41 	bl	800df1c <pbuf_remove_header>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d006      	beq.n	8015aae <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015aa0:	4b2e      	ldr	r3, [pc, #184]	; (8015b5c <icmp_input+0x1f8>)
 8015aa2:	22c7      	movs	r2, #199	; 0xc7
 8015aa4:	4930      	ldr	r1, [pc, #192]	; (8015b68 <icmp_input+0x204>)
 8015aa6:	482f      	ldr	r0, [pc, #188]	; (8015b64 <icmp_input+0x200>)
 8015aa8:	f002 fb38 	bl	801811c <iprintf>
          goto icmperr;
 8015aac:	e04b      	b.n	8015b46 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	685b      	ldr	r3, [r3, #4]
 8015ab2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015ab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015ab6:	4619      	mov	r1, r3
 8015ab8:	6878      	ldr	r0, [r7, #4]
 8015aba:	f7f8 fa1f 	bl	800defc <pbuf_add_header>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d12b      	bne.n	8015b1c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	685b      	ldr	r3, [r3, #4]
 8015ac8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015aca:	69fb      	ldr	r3, [r7, #28]
 8015acc:	681a      	ldr	r2, [r3, #0]
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015ad2:	4b20      	ldr	r3, [pc, #128]	; (8015b54 <icmp_input+0x1f0>)
 8015ad4:	691a      	ldr	r2, [r3, #16]
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015ada:	693b      	ldr	r3, [r7, #16]
 8015adc:	2200      	movs	r2, #0
 8015ade:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015ae0:	693b      	ldr	r3, [r7, #16]
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	709a      	strb	r2, [r3, #2]
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	22ff      	movs	r2, #255	; 0xff
 8015aee:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	2200      	movs	r2, #0
 8015af4:	729a      	strb	r2, [r3, #10]
 8015af6:	2200      	movs	r2, #0
 8015af8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015afa:	683b      	ldr	r3, [r7, #0]
 8015afc:	9302      	str	r3, [sp, #8]
 8015afe:	2301      	movs	r3, #1
 8015b00:	9301      	str	r3, [sp, #4]
 8015b02:	2300      	movs	r3, #0
 8015b04:	9300      	str	r3, [sp, #0]
 8015b06:	23ff      	movs	r3, #255	; 0xff
 8015b08:	2200      	movs	r2, #0
 8015b0a:	69f9      	ldr	r1, [r7, #28]
 8015b0c:	6878      	ldr	r0, [r7, #4]
 8015b0e:	f000 fa75 	bl	8015ffc <ip4_output_if>
 8015b12:	4603      	mov	r3, r0
 8015b14:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015b16:	e001      	b.n	8015b1c <icmp_input+0x1b8>
      break;
 8015b18:	bf00      	nop
 8015b1a:	e000      	b.n	8015b1e <icmp_input+0x1ba>
      break;
 8015b1c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015b1e:	6878      	ldr	r0, [r7, #4]
 8015b20:	f7f8 fa82 	bl	800e028 <pbuf_free>
  return;
 8015b24:	e013      	b.n	8015b4e <icmp_input+0x1ea>
    goto lenerr;
 8015b26:	bf00      	nop
 8015b28:	e002      	b.n	8015b30 <icmp_input+0x1cc>
    goto lenerr;
 8015b2a:	bf00      	nop
 8015b2c:	e000      	b.n	8015b30 <icmp_input+0x1cc>
        goto lenerr;
 8015b2e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015b30:	6878      	ldr	r0, [r7, #4]
 8015b32:	f7f8 fa79 	bl	800e028 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015b36:	e00a      	b.n	8015b4e <icmp_input+0x1ea>
        goto icmperr;
 8015b38:	bf00      	nop
 8015b3a:	e004      	b.n	8015b46 <icmp_input+0x1e2>
        goto icmperr;
 8015b3c:	bf00      	nop
 8015b3e:	e002      	b.n	8015b46 <icmp_input+0x1e2>
          goto icmperr;
 8015b40:	bf00      	nop
 8015b42:	e000      	b.n	8015b46 <icmp_input+0x1e2>
          goto icmperr;
 8015b44:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015b46:	6878      	ldr	r0, [r7, #4]
 8015b48:	f7f8 fa6e 	bl	800e028 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015b4c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015b4e:	3728      	adds	r7, #40	; 0x28
 8015b50:	46bd      	mov	sp, r7
 8015b52:	bd80      	pop	{r7, pc}
 8015b54:	20005010 	.word	0x20005010
 8015b58:	20005024 	.word	0x20005024
 8015b5c:	0801b554 	.word	0x0801b554
 8015b60:	0801b58c 	.word	0x0801b58c
 8015b64:	0801b5c4 	.word	0x0801b5c4
 8015b68:	0801b5ec 	.word	0x0801b5ec

08015b6c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b082      	sub	sp, #8
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
 8015b74:	460b      	mov	r3, r1
 8015b76:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015b78:	78fb      	ldrb	r3, [r7, #3]
 8015b7a:	461a      	mov	r2, r3
 8015b7c:	2103      	movs	r1, #3
 8015b7e:	6878      	ldr	r0, [r7, #4]
 8015b80:	f000 f814 	bl	8015bac <icmp_send_response>
}
 8015b84:	bf00      	nop
 8015b86:	3708      	adds	r7, #8
 8015b88:	46bd      	mov	sp, r7
 8015b8a:	bd80      	pop	{r7, pc}

08015b8c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b082      	sub	sp, #8
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	6078      	str	r0, [r7, #4]
 8015b94:	460b      	mov	r3, r1
 8015b96:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015b98:	78fb      	ldrb	r3, [r7, #3]
 8015b9a:	461a      	mov	r2, r3
 8015b9c:	210b      	movs	r1, #11
 8015b9e:	6878      	ldr	r0, [r7, #4]
 8015ba0:	f000 f804 	bl	8015bac <icmp_send_response>
}
 8015ba4:	bf00      	nop
 8015ba6:	3708      	adds	r7, #8
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}

08015bac <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b08c      	sub	sp, #48	; 0x30
 8015bb0:	af04      	add	r7, sp, #16
 8015bb2:	6078      	str	r0, [r7, #4]
 8015bb4:	460b      	mov	r3, r1
 8015bb6:	70fb      	strb	r3, [r7, #3]
 8015bb8:	4613      	mov	r3, r2
 8015bba:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015bbc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015bc0:	2124      	movs	r1, #36	; 0x24
 8015bc2:	2022      	movs	r0, #34	; 0x22
 8015bc4:	f7f7 ff4c 	bl	800da60 <pbuf_alloc>
 8015bc8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015bca:	69fb      	ldr	r3, [r7, #28]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d04c      	beq.n	8015c6a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015bd0:	69fb      	ldr	r3, [r7, #28]
 8015bd2:	895b      	ldrh	r3, [r3, #10]
 8015bd4:	2b23      	cmp	r3, #35	; 0x23
 8015bd6:	d806      	bhi.n	8015be6 <icmp_send_response+0x3a>
 8015bd8:	4b26      	ldr	r3, [pc, #152]	; (8015c74 <icmp_send_response+0xc8>)
 8015bda:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015bde:	4926      	ldr	r1, [pc, #152]	; (8015c78 <icmp_send_response+0xcc>)
 8015be0:	4826      	ldr	r0, [pc, #152]	; (8015c7c <icmp_send_response+0xd0>)
 8015be2:	f002 fa9b 	bl	801811c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	685b      	ldr	r3, [r3, #4]
 8015bea:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015bec:	69fb      	ldr	r3, [r7, #28]
 8015bee:	685b      	ldr	r3, [r3, #4]
 8015bf0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015bf2:	697b      	ldr	r3, [r7, #20]
 8015bf4:	78fa      	ldrb	r2, [r7, #3]
 8015bf6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015bf8:	697b      	ldr	r3, [r7, #20]
 8015bfa:	78ba      	ldrb	r2, [r7, #2]
 8015bfc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015bfe:	697b      	ldr	r3, [r7, #20]
 8015c00:	2200      	movs	r2, #0
 8015c02:	711a      	strb	r2, [r3, #4]
 8015c04:	2200      	movs	r2, #0
 8015c06:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	719a      	strb	r2, [r3, #6]
 8015c0e:	2200      	movs	r2, #0
 8015c10:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015c12:	69fb      	ldr	r3, [r7, #28]
 8015c14:	685b      	ldr	r3, [r3, #4]
 8015c16:	f103 0008 	add.w	r0, r3, #8
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	685b      	ldr	r3, [r3, #4]
 8015c1e:	221c      	movs	r2, #28
 8015c20:	4619      	mov	r1, r3
 8015c22:	f002 fb6e 	bl	8018302 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015c26:	69bb      	ldr	r3, [r7, #24]
 8015c28:	68db      	ldr	r3, [r3, #12]
 8015c2a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015c2c:	f107 030c 	add.w	r3, r7, #12
 8015c30:	4618      	mov	r0, r3
 8015c32:	f000 f825 	bl	8015c80 <ip4_route>
 8015c36:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015c38:	693b      	ldr	r3, [r7, #16]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d011      	beq.n	8015c62 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015c3e:	697b      	ldr	r3, [r7, #20]
 8015c40:	2200      	movs	r2, #0
 8015c42:	709a      	strb	r2, [r3, #2]
 8015c44:	2200      	movs	r2, #0
 8015c46:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015c48:	f107 020c 	add.w	r2, r7, #12
 8015c4c:	693b      	ldr	r3, [r7, #16]
 8015c4e:	9302      	str	r3, [sp, #8]
 8015c50:	2301      	movs	r3, #1
 8015c52:	9301      	str	r3, [sp, #4]
 8015c54:	2300      	movs	r3, #0
 8015c56:	9300      	str	r3, [sp, #0]
 8015c58:	23ff      	movs	r3, #255	; 0xff
 8015c5a:	2100      	movs	r1, #0
 8015c5c:	69f8      	ldr	r0, [r7, #28]
 8015c5e:	f000 f9cd 	bl	8015ffc <ip4_output_if>
  }
  pbuf_free(q);
 8015c62:	69f8      	ldr	r0, [r7, #28]
 8015c64:	f7f8 f9e0 	bl	800e028 <pbuf_free>
 8015c68:	e000      	b.n	8015c6c <icmp_send_response+0xc0>
    return;
 8015c6a:	bf00      	nop
}
 8015c6c:	3720      	adds	r7, #32
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	bd80      	pop	{r7, pc}
 8015c72:	bf00      	nop
 8015c74:	0801b554 	.word	0x0801b554
 8015c78:	0801b620 	.word	0x0801b620
 8015c7c:	0801b5c4 	.word	0x0801b5c4

08015c80 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015c80:	b480      	push	{r7}
 8015c82:	b085      	sub	sp, #20
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015c88:	4b33      	ldr	r3, [pc, #204]	; (8015d58 <ip4_route+0xd8>)
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	60fb      	str	r3, [r7, #12]
 8015c8e:	e036      	b.n	8015cfe <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c96:	f003 0301 	and.w	r3, r3, #1
 8015c9a:	b2db      	uxtb	r3, r3
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d02b      	beq.n	8015cf8 <ip4_route+0x78>
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ca6:	089b      	lsrs	r3, r3, #2
 8015ca8:	f003 0301 	and.w	r3, r3, #1
 8015cac:	b2db      	uxtb	r3, r3
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d022      	beq.n	8015cf8 <ip4_route+0x78>
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	3304      	adds	r3, #4
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d01d      	beq.n	8015cf8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	681a      	ldr	r2, [r3, #0]
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	3304      	adds	r3, #4
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	405a      	eors	r2, r3
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	3308      	adds	r3, #8
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	4013      	ands	r3, r2
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d101      	bne.n	8015cd8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	e038      	b.n	8015d4a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015cde:	f003 0302 	and.w	r3, r3, #2
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d108      	bne.n	8015cf8 <ip4_route+0x78>
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	681a      	ldr	r2, [r3, #0]
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	330c      	adds	r3, #12
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	429a      	cmp	r2, r3
 8015cf2:	d101      	bne.n	8015cf8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	e028      	b.n	8015d4a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	60fb      	str	r3, [r7, #12]
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d1c5      	bne.n	8015c90 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015d04:	4b15      	ldr	r3, [pc, #84]	; (8015d5c <ip4_route+0xdc>)
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d01a      	beq.n	8015d42 <ip4_route+0xc2>
 8015d0c:	4b13      	ldr	r3, [pc, #76]	; (8015d5c <ip4_route+0xdc>)
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015d14:	f003 0301 	and.w	r3, r3, #1
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d012      	beq.n	8015d42 <ip4_route+0xc2>
 8015d1c:	4b0f      	ldr	r3, [pc, #60]	; (8015d5c <ip4_route+0xdc>)
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015d24:	f003 0304 	and.w	r3, r3, #4
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d00a      	beq.n	8015d42 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015d2c:	4b0b      	ldr	r3, [pc, #44]	; (8015d5c <ip4_route+0xdc>)
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	3304      	adds	r3, #4
 8015d32:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d004      	beq.n	8015d42 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	b2db      	uxtb	r3, r3
 8015d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8015d40:	d101      	bne.n	8015d46 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015d42:	2300      	movs	r3, #0
 8015d44:	e001      	b.n	8015d4a <ip4_route+0xca>
  }

  return netif_default;
 8015d46:	4b05      	ldr	r3, [pc, #20]	; (8015d5c <ip4_route+0xdc>)
 8015d48:	681b      	ldr	r3, [r3, #0]
}
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	3714      	adds	r7, #20
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d54:	4770      	bx	lr
 8015d56:	bf00      	nop
 8015d58:	20008134 	.word	0x20008134
 8015d5c:	20008138 	.word	0x20008138

08015d60 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b082      	sub	sp, #8
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015d6e:	f003 0301 	and.w	r3, r3, #1
 8015d72:	b2db      	uxtb	r3, r3
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d016      	beq.n	8015da6 <ip4_input_accept+0x46>
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	3304      	adds	r3, #4
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d011      	beq.n	8015da6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015d82:	4b0b      	ldr	r3, [pc, #44]	; (8015db0 <ip4_input_accept+0x50>)
 8015d84:	695a      	ldr	r2, [r3, #20]
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	3304      	adds	r3, #4
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	429a      	cmp	r2, r3
 8015d8e:	d008      	beq.n	8015da2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015d90:	4b07      	ldr	r3, [pc, #28]	; (8015db0 <ip4_input_accept+0x50>)
 8015d92:	695b      	ldr	r3, [r3, #20]
 8015d94:	6879      	ldr	r1, [r7, #4]
 8015d96:	4618      	mov	r0, r3
 8015d98:	f000 fa08 	bl	80161ac <ip4_addr_isbroadcast_u32>
 8015d9c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d001      	beq.n	8015da6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015da2:	2301      	movs	r3, #1
 8015da4:	e000      	b.n	8015da8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015da6:	2300      	movs	r3, #0
}
 8015da8:	4618      	mov	r0, r3
 8015daa:	3708      	adds	r7, #8
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd80      	pop	{r7, pc}
 8015db0:	20005010 	.word	0x20005010

08015db4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b086      	sub	sp, #24
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
 8015dbc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	685b      	ldr	r3, [r3, #4]
 8015dc2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015dc4:	697b      	ldr	r3, [r7, #20]
 8015dc6:	781b      	ldrb	r3, [r3, #0]
 8015dc8:	091b      	lsrs	r3, r3, #4
 8015dca:	b2db      	uxtb	r3, r3
 8015dcc:	2b04      	cmp	r3, #4
 8015dce:	d004      	beq.n	8015dda <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015dd0:	6878      	ldr	r0, [r7, #4]
 8015dd2:	f7f8 f929 	bl	800e028 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	e107      	b.n	8015fea <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015dda:	697b      	ldr	r3, [r7, #20]
 8015ddc:	781b      	ldrb	r3, [r3, #0]
 8015dde:	f003 030f 	and.w	r3, r3, #15
 8015de2:	b2db      	uxtb	r3, r3
 8015de4:	009b      	lsls	r3, r3, #2
 8015de6:	b2db      	uxtb	r3, r3
 8015de8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015dea:	697b      	ldr	r3, [r7, #20]
 8015dec:	885b      	ldrh	r3, [r3, #2]
 8015dee:	b29b      	uxth	r3, r3
 8015df0:	4618      	mov	r0, r3
 8015df2:	f7f6 fdbc 	bl	800c96e <lwip_htons>
 8015df6:	4603      	mov	r3, r0
 8015df8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	891b      	ldrh	r3, [r3, #8]
 8015dfe:	89ba      	ldrh	r2, [r7, #12]
 8015e00:	429a      	cmp	r2, r3
 8015e02:	d204      	bcs.n	8015e0e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015e04:	89bb      	ldrh	r3, [r7, #12]
 8015e06:	4619      	mov	r1, r3
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	f7f7 ff87 	bl	800dd1c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	895b      	ldrh	r3, [r3, #10]
 8015e12:	89fa      	ldrh	r2, [r7, #14]
 8015e14:	429a      	cmp	r2, r3
 8015e16:	d807      	bhi.n	8015e28 <ip4_input+0x74>
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	891b      	ldrh	r3, [r3, #8]
 8015e1c:	89ba      	ldrh	r2, [r7, #12]
 8015e1e:	429a      	cmp	r2, r3
 8015e20:	d802      	bhi.n	8015e28 <ip4_input+0x74>
 8015e22:	89fb      	ldrh	r3, [r7, #14]
 8015e24:	2b13      	cmp	r3, #19
 8015e26:	d804      	bhi.n	8015e32 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015e28:	6878      	ldr	r0, [r7, #4]
 8015e2a:	f7f8 f8fd 	bl	800e028 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015e2e:	2300      	movs	r3, #0
 8015e30:	e0db      	b.n	8015fea <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015e32:	697b      	ldr	r3, [r7, #20]
 8015e34:	691b      	ldr	r3, [r3, #16]
 8015e36:	4a6f      	ldr	r2, [pc, #444]	; (8015ff4 <ip4_input+0x240>)
 8015e38:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015e3a:	697b      	ldr	r3, [r7, #20]
 8015e3c:	68db      	ldr	r3, [r3, #12]
 8015e3e:	4a6d      	ldr	r2, [pc, #436]	; (8015ff4 <ip4_input+0x240>)
 8015e40:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015e42:	4b6c      	ldr	r3, [pc, #432]	; (8015ff4 <ip4_input+0x240>)
 8015e44:	695b      	ldr	r3, [r3, #20]
 8015e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015e4a:	2be0      	cmp	r3, #224	; 0xe0
 8015e4c:	d112      	bne.n	8015e74 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015e4e:	683b      	ldr	r3, [r7, #0]
 8015e50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015e54:	f003 0301 	and.w	r3, r3, #1
 8015e58:	b2db      	uxtb	r3, r3
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d007      	beq.n	8015e6e <ip4_input+0xba>
 8015e5e:	683b      	ldr	r3, [r7, #0]
 8015e60:	3304      	adds	r3, #4
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d002      	beq.n	8015e6e <ip4_input+0xba>
      netif = inp;
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	613b      	str	r3, [r7, #16]
 8015e6c:	e02a      	b.n	8015ec4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	613b      	str	r3, [r7, #16]
 8015e72:	e027      	b.n	8015ec4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015e74:	6838      	ldr	r0, [r7, #0]
 8015e76:	f7ff ff73 	bl	8015d60 <ip4_input_accept>
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d002      	beq.n	8015e86 <ip4_input+0xd2>
      netif = inp;
 8015e80:	683b      	ldr	r3, [r7, #0]
 8015e82:	613b      	str	r3, [r7, #16]
 8015e84:	e01e      	b.n	8015ec4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015e86:	2300      	movs	r3, #0
 8015e88:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015e8a:	4b5a      	ldr	r3, [pc, #360]	; (8015ff4 <ip4_input+0x240>)
 8015e8c:	695b      	ldr	r3, [r3, #20]
 8015e8e:	b2db      	uxtb	r3, r3
 8015e90:	2b7f      	cmp	r3, #127	; 0x7f
 8015e92:	d017      	beq.n	8015ec4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015e94:	4b58      	ldr	r3, [pc, #352]	; (8015ff8 <ip4_input+0x244>)
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	613b      	str	r3, [r7, #16]
 8015e9a:	e00e      	b.n	8015eba <ip4_input+0x106>
          if (netif == inp) {
 8015e9c:	693a      	ldr	r2, [r7, #16]
 8015e9e:	683b      	ldr	r3, [r7, #0]
 8015ea0:	429a      	cmp	r2, r3
 8015ea2:	d006      	beq.n	8015eb2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015ea4:	6938      	ldr	r0, [r7, #16]
 8015ea6:	f7ff ff5b 	bl	8015d60 <ip4_input_accept>
 8015eaa:	4603      	mov	r3, r0
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d108      	bne.n	8015ec2 <ip4_input+0x10e>
 8015eb0:	e000      	b.n	8015eb4 <ip4_input+0x100>
            continue;
 8015eb2:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015eb4:	693b      	ldr	r3, [r7, #16]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	613b      	str	r3, [r7, #16]
 8015eba:	693b      	ldr	r3, [r7, #16]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d1ed      	bne.n	8015e9c <ip4_input+0xe8>
 8015ec0:	e000      	b.n	8015ec4 <ip4_input+0x110>
            break;
 8015ec2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015ec4:	4b4b      	ldr	r3, [pc, #300]	; (8015ff4 <ip4_input+0x240>)
 8015ec6:	691b      	ldr	r3, [r3, #16]
 8015ec8:	6839      	ldr	r1, [r7, #0]
 8015eca:	4618      	mov	r0, r3
 8015ecc:	f000 f96e 	bl	80161ac <ip4_addr_isbroadcast_u32>
 8015ed0:	4603      	mov	r3, r0
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d105      	bne.n	8015ee2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015ed6:	4b47      	ldr	r3, [pc, #284]	; (8015ff4 <ip4_input+0x240>)
 8015ed8:	691b      	ldr	r3, [r3, #16]
 8015eda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015ede:	2be0      	cmp	r3, #224	; 0xe0
 8015ee0:	d104      	bne.n	8015eec <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015ee2:	6878      	ldr	r0, [r7, #4]
 8015ee4:	f7f8 f8a0 	bl	800e028 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015ee8:	2300      	movs	r3, #0
 8015eea:	e07e      	b.n	8015fea <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015eec:	693b      	ldr	r3, [r7, #16]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d104      	bne.n	8015efc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015ef2:	6878      	ldr	r0, [r7, #4]
 8015ef4:	f7f8 f898 	bl	800e028 <pbuf_free>
    return ERR_OK;
 8015ef8:	2300      	movs	r3, #0
 8015efa:	e076      	b.n	8015fea <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015efc:	697b      	ldr	r3, [r7, #20]
 8015efe:	88db      	ldrh	r3, [r3, #6]
 8015f00:	b29b      	uxth	r3, r3
 8015f02:	461a      	mov	r2, r3
 8015f04:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015f08:	4013      	ands	r3, r2
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d00b      	beq.n	8015f26 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015f0e:	6878      	ldr	r0, [r7, #4]
 8015f10:	f000 fc92 	bl	8016838 <ip4_reass>
 8015f14:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d101      	bne.n	8015f20 <ip4_input+0x16c>
      return ERR_OK;
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	e064      	b.n	8015fea <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	685b      	ldr	r3, [r3, #4]
 8015f24:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015f26:	4a33      	ldr	r2, [pc, #204]	; (8015ff4 <ip4_input+0x240>)
 8015f28:	693b      	ldr	r3, [r7, #16]
 8015f2a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015f2c:	4a31      	ldr	r2, [pc, #196]	; (8015ff4 <ip4_input+0x240>)
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015f32:	4a30      	ldr	r2, [pc, #192]	; (8015ff4 <ip4_input+0x240>)
 8015f34:	697b      	ldr	r3, [r7, #20]
 8015f36:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015f38:	697b      	ldr	r3, [r7, #20]
 8015f3a:	781b      	ldrb	r3, [r3, #0]
 8015f3c:	f003 030f 	and.w	r3, r3, #15
 8015f40:	b2db      	uxtb	r3, r3
 8015f42:	009b      	lsls	r3, r3, #2
 8015f44:	b2db      	uxtb	r3, r3
 8015f46:	b29a      	uxth	r2, r3
 8015f48:	4b2a      	ldr	r3, [pc, #168]	; (8015ff4 <ip4_input+0x240>)
 8015f4a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015f4c:	89fb      	ldrh	r3, [r7, #14]
 8015f4e:	4619      	mov	r1, r3
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	f7f7 ffe3 	bl	800df1c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015f56:	697b      	ldr	r3, [r7, #20]
 8015f58:	7a5b      	ldrb	r3, [r3, #9]
 8015f5a:	2b11      	cmp	r3, #17
 8015f5c:	d006      	beq.n	8015f6c <ip4_input+0x1b8>
 8015f5e:	2b11      	cmp	r3, #17
 8015f60:	dc13      	bgt.n	8015f8a <ip4_input+0x1d6>
 8015f62:	2b01      	cmp	r3, #1
 8015f64:	d00c      	beq.n	8015f80 <ip4_input+0x1cc>
 8015f66:	2b06      	cmp	r3, #6
 8015f68:	d005      	beq.n	8015f76 <ip4_input+0x1c2>
 8015f6a:	e00e      	b.n	8015f8a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015f6c:	6839      	ldr	r1, [r7, #0]
 8015f6e:	6878      	ldr	r0, [r7, #4]
 8015f70:	f7fe fc68 	bl	8014844 <udp_input>
        break;
 8015f74:	e026      	b.n	8015fc4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015f76:	6839      	ldr	r1, [r7, #0]
 8015f78:	6878      	ldr	r0, [r7, #4]
 8015f7a:	f7fa f88b 	bl	8010094 <tcp_input>
        break;
 8015f7e:	e021      	b.n	8015fc4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015f80:	6839      	ldr	r1, [r7, #0]
 8015f82:	6878      	ldr	r0, [r7, #4]
 8015f84:	f7ff fcee 	bl	8015964 <icmp_input>
        break;
 8015f88:	e01c      	b.n	8015fc4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015f8a:	4b1a      	ldr	r3, [pc, #104]	; (8015ff4 <ip4_input+0x240>)
 8015f8c:	695b      	ldr	r3, [r3, #20]
 8015f8e:	6939      	ldr	r1, [r7, #16]
 8015f90:	4618      	mov	r0, r3
 8015f92:	f000 f90b 	bl	80161ac <ip4_addr_isbroadcast_u32>
 8015f96:	4603      	mov	r3, r0
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d10f      	bne.n	8015fbc <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015f9c:	4b15      	ldr	r3, [pc, #84]	; (8015ff4 <ip4_input+0x240>)
 8015f9e:	695b      	ldr	r3, [r3, #20]
 8015fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015fa4:	2be0      	cmp	r3, #224	; 0xe0
 8015fa6:	d009      	beq.n	8015fbc <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015fa8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015fac:	4619      	mov	r1, r3
 8015fae:	6878      	ldr	r0, [r7, #4]
 8015fb0:	f7f8 f827 	bl	800e002 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015fb4:	2102      	movs	r1, #2
 8015fb6:	6878      	ldr	r0, [r7, #4]
 8015fb8:	f7ff fdd8 	bl	8015b6c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	f7f8 f833 	bl	800e028 <pbuf_free>
        break;
 8015fc2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015fc4:	4b0b      	ldr	r3, [pc, #44]	; (8015ff4 <ip4_input+0x240>)
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015fca:	4b0a      	ldr	r3, [pc, #40]	; (8015ff4 <ip4_input+0x240>)
 8015fcc:	2200      	movs	r2, #0
 8015fce:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015fd0:	4b08      	ldr	r3, [pc, #32]	; (8015ff4 <ip4_input+0x240>)
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015fd6:	4b07      	ldr	r3, [pc, #28]	; (8015ff4 <ip4_input+0x240>)
 8015fd8:	2200      	movs	r2, #0
 8015fda:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015fdc:	4b05      	ldr	r3, [pc, #20]	; (8015ff4 <ip4_input+0x240>)
 8015fde:	2200      	movs	r2, #0
 8015fe0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015fe2:	4b04      	ldr	r3, [pc, #16]	; (8015ff4 <ip4_input+0x240>)
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015fe8:	2300      	movs	r3, #0
}
 8015fea:	4618      	mov	r0, r3
 8015fec:	3718      	adds	r7, #24
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	bd80      	pop	{r7, pc}
 8015ff2:	bf00      	nop
 8015ff4:	20005010 	.word	0x20005010
 8015ff8:	20008134 	.word	0x20008134

08015ffc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b08a      	sub	sp, #40	; 0x28
 8016000:	af04      	add	r7, sp, #16
 8016002:	60f8      	str	r0, [r7, #12]
 8016004:	60b9      	str	r1, [r7, #8]
 8016006:	607a      	str	r2, [r7, #4]
 8016008:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801600a:	68bb      	ldr	r3, [r7, #8]
 801600c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d009      	beq.n	8016028 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016014:	68bb      	ldr	r3, [r7, #8]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d003      	beq.n	8016022 <ip4_output_if+0x26>
 801601a:	68bb      	ldr	r3, [r7, #8]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d102      	bne.n	8016028 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016024:	3304      	adds	r3, #4
 8016026:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016028:	78fa      	ldrb	r2, [r7, #3]
 801602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801602c:	9302      	str	r3, [sp, #8]
 801602e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016032:	9301      	str	r3, [sp, #4]
 8016034:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016038:	9300      	str	r3, [sp, #0]
 801603a:	4613      	mov	r3, r2
 801603c:	687a      	ldr	r2, [r7, #4]
 801603e:	6979      	ldr	r1, [r7, #20]
 8016040:	68f8      	ldr	r0, [r7, #12]
 8016042:	f000 f805 	bl	8016050 <ip4_output_if_src>
 8016046:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016048:	4618      	mov	r0, r3
 801604a:	3718      	adds	r7, #24
 801604c:	46bd      	mov	sp, r7
 801604e:	bd80      	pop	{r7, pc}

08016050 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b088      	sub	sp, #32
 8016054:	af00      	add	r7, sp, #0
 8016056:	60f8      	str	r0, [r7, #12]
 8016058:	60b9      	str	r1, [r7, #8]
 801605a:	607a      	str	r2, [r7, #4]
 801605c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	7b9b      	ldrb	r3, [r3, #14]
 8016062:	2b01      	cmp	r3, #1
 8016064:	d006      	beq.n	8016074 <ip4_output_if_src+0x24>
 8016066:	4b4b      	ldr	r3, [pc, #300]	; (8016194 <ip4_output_if_src+0x144>)
 8016068:	f44f 7255 	mov.w	r2, #852	; 0x354
 801606c:	494a      	ldr	r1, [pc, #296]	; (8016198 <ip4_output_if_src+0x148>)
 801606e:	484b      	ldr	r0, [pc, #300]	; (801619c <ip4_output_if_src+0x14c>)
 8016070:	f002 f854 	bl	801811c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d060      	beq.n	801613c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801607a:	2314      	movs	r3, #20
 801607c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801607e:	2114      	movs	r1, #20
 8016080:	68f8      	ldr	r0, [r7, #12]
 8016082:	f7f7 ff3b 	bl	800defc <pbuf_add_header>
 8016086:	4603      	mov	r3, r0
 8016088:	2b00      	cmp	r3, #0
 801608a:	d002      	beq.n	8016092 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801608c:	f06f 0301 	mvn.w	r3, #1
 8016090:	e07c      	b.n	801618c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	685b      	ldr	r3, [r3, #4]
 8016096:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	895b      	ldrh	r3, [r3, #10]
 801609c:	2b13      	cmp	r3, #19
 801609e:	d806      	bhi.n	80160ae <ip4_output_if_src+0x5e>
 80160a0:	4b3c      	ldr	r3, [pc, #240]	; (8016194 <ip4_output_if_src+0x144>)
 80160a2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80160a6:	493e      	ldr	r1, [pc, #248]	; (80161a0 <ip4_output_if_src+0x150>)
 80160a8:	483c      	ldr	r0, [pc, #240]	; (801619c <ip4_output_if_src+0x14c>)
 80160aa:	f002 f837 	bl	801811c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80160ae:	69fb      	ldr	r3, [r7, #28]
 80160b0:	78fa      	ldrb	r2, [r7, #3]
 80160b2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80160b4:	69fb      	ldr	r3, [r7, #28]
 80160b6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80160ba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	681a      	ldr	r2, [r3, #0]
 80160c0:	69fb      	ldr	r3, [r7, #28]
 80160c2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80160c4:	8b7b      	ldrh	r3, [r7, #26]
 80160c6:	089b      	lsrs	r3, r3, #2
 80160c8:	b29b      	uxth	r3, r3
 80160ca:	b2db      	uxtb	r3, r3
 80160cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80160d0:	b2da      	uxtb	r2, r3
 80160d2:	69fb      	ldr	r3, [r7, #28]
 80160d4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80160d6:	69fb      	ldr	r3, [r7, #28]
 80160d8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80160dc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	891b      	ldrh	r3, [r3, #8]
 80160e2:	4618      	mov	r0, r3
 80160e4:	f7f6 fc43 	bl	800c96e <lwip_htons>
 80160e8:	4603      	mov	r3, r0
 80160ea:	461a      	mov	r2, r3
 80160ec:	69fb      	ldr	r3, [r7, #28]
 80160ee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80160f0:	69fb      	ldr	r3, [r7, #28]
 80160f2:	2200      	movs	r2, #0
 80160f4:	719a      	strb	r2, [r3, #6]
 80160f6:	2200      	movs	r2, #0
 80160f8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80160fa:	4b2a      	ldr	r3, [pc, #168]	; (80161a4 <ip4_output_if_src+0x154>)
 80160fc:	881b      	ldrh	r3, [r3, #0]
 80160fe:	4618      	mov	r0, r3
 8016100:	f7f6 fc35 	bl	800c96e <lwip_htons>
 8016104:	4603      	mov	r3, r0
 8016106:	461a      	mov	r2, r3
 8016108:	69fb      	ldr	r3, [r7, #28]
 801610a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801610c:	4b25      	ldr	r3, [pc, #148]	; (80161a4 <ip4_output_if_src+0x154>)
 801610e:	881b      	ldrh	r3, [r3, #0]
 8016110:	3301      	adds	r3, #1
 8016112:	b29a      	uxth	r2, r3
 8016114:	4b23      	ldr	r3, [pc, #140]	; (80161a4 <ip4_output_if_src+0x154>)
 8016116:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016118:	68bb      	ldr	r3, [r7, #8]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d104      	bne.n	8016128 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801611e:	4b22      	ldr	r3, [pc, #136]	; (80161a8 <ip4_output_if_src+0x158>)
 8016120:	681a      	ldr	r2, [r3, #0]
 8016122:	69fb      	ldr	r3, [r7, #28]
 8016124:	60da      	str	r2, [r3, #12]
 8016126:	e003      	b.n	8016130 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016128:	68bb      	ldr	r3, [r7, #8]
 801612a:	681a      	ldr	r2, [r3, #0]
 801612c:	69fb      	ldr	r3, [r7, #28]
 801612e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016130:	69fb      	ldr	r3, [r7, #28]
 8016132:	2200      	movs	r2, #0
 8016134:	729a      	strb	r2, [r3, #10]
 8016136:	2200      	movs	r2, #0
 8016138:	72da      	strb	r2, [r3, #11]
 801613a:	e00f      	b.n	801615c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	895b      	ldrh	r3, [r3, #10]
 8016140:	2b13      	cmp	r3, #19
 8016142:	d802      	bhi.n	801614a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016144:	f06f 0301 	mvn.w	r3, #1
 8016148:	e020      	b.n	801618c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	685b      	ldr	r3, [r3, #4]
 801614e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016150:	69fb      	ldr	r3, [r7, #28]
 8016152:	691b      	ldr	r3, [r3, #16]
 8016154:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016156:	f107 0314 	add.w	r3, r7, #20
 801615a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801615e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016160:	2b00      	cmp	r3, #0
 8016162:	d00c      	beq.n	801617e <ip4_output_if_src+0x12e>
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	891a      	ldrh	r2, [r3, #8]
 8016168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801616a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801616c:	429a      	cmp	r2, r3
 801616e:	d906      	bls.n	801617e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016170:	687a      	ldr	r2, [r7, #4]
 8016172:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016174:	68f8      	ldr	r0, [r7, #12]
 8016176:	f000 fd53 	bl	8016c20 <ip4_frag>
 801617a:	4603      	mov	r3, r0
 801617c:	e006      	b.n	801618c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016180:	695b      	ldr	r3, [r3, #20]
 8016182:	687a      	ldr	r2, [r7, #4]
 8016184:	68f9      	ldr	r1, [r7, #12]
 8016186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016188:	4798      	blx	r3
 801618a:	4603      	mov	r3, r0
}
 801618c:	4618      	mov	r0, r3
 801618e:	3720      	adds	r7, #32
 8016190:	46bd      	mov	sp, r7
 8016192:	bd80      	pop	{r7, pc}
 8016194:	0801b64c 	.word	0x0801b64c
 8016198:	0801b680 	.word	0x0801b680
 801619c:	0801b68c 	.word	0x0801b68c
 80161a0:	0801b6b4 	.word	0x0801b6b4
 80161a4:	20008292 	.word	0x20008292
 80161a8:	0801bb14 	.word	0x0801bb14

080161ac <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80161ac:	b480      	push	{r7}
 80161ae:	b085      	sub	sp, #20
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	6078      	str	r0, [r7, #4]
 80161b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161c0:	d002      	beq.n	80161c8 <ip4_addr_isbroadcast_u32+0x1c>
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d101      	bne.n	80161cc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80161c8:	2301      	movs	r3, #1
 80161ca:	e02a      	b.n	8016222 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80161cc:	683b      	ldr	r3, [r7, #0]
 80161ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80161d2:	f003 0302 	and.w	r3, r3, #2
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d101      	bne.n	80161de <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80161da:	2300      	movs	r3, #0
 80161dc:	e021      	b.n	8016222 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	3304      	adds	r3, #4
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	687a      	ldr	r2, [r7, #4]
 80161e6:	429a      	cmp	r2, r3
 80161e8:	d101      	bne.n	80161ee <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80161ea:	2300      	movs	r3, #0
 80161ec:	e019      	b.n	8016222 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80161ee:	68fa      	ldr	r2, [r7, #12]
 80161f0:	683b      	ldr	r3, [r7, #0]
 80161f2:	3304      	adds	r3, #4
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	405a      	eors	r2, r3
 80161f8:	683b      	ldr	r3, [r7, #0]
 80161fa:	3308      	adds	r3, #8
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	4013      	ands	r3, r2
 8016200:	2b00      	cmp	r3, #0
 8016202:	d10d      	bne.n	8016220 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016204:	683b      	ldr	r3, [r7, #0]
 8016206:	3308      	adds	r3, #8
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	43da      	mvns	r2, r3
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016210:	683b      	ldr	r3, [r7, #0]
 8016212:	3308      	adds	r3, #8
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016218:	429a      	cmp	r2, r3
 801621a:	d101      	bne.n	8016220 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801621c:	2301      	movs	r3, #1
 801621e:	e000      	b.n	8016222 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016220:	2300      	movs	r3, #0
  }
}
 8016222:	4618      	mov	r0, r3
 8016224:	3714      	adds	r7, #20
 8016226:	46bd      	mov	sp, r7
 8016228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801622c:	4770      	bx	lr
	...

08016230 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016230:	b580      	push	{r7, lr}
 8016232:	b084      	sub	sp, #16
 8016234:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016236:	2300      	movs	r3, #0
 8016238:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801623a:	4b12      	ldr	r3, [pc, #72]	; (8016284 <ip_reass_tmr+0x54>)
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016240:	e018      	b.n	8016274 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	7fdb      	ldrb	r3, [r3, #31]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d00b      	beq.n	8016262 <ip_reass_tmr+0x32>
      r->timer--;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	7fdb      	ldrb	r3, [r3, #31]
 801624e:	3b01      	subs	r3, #1
 8016250:	b2da      	uxtb	r2, r3
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	60fb      	str	r3, [r7, #12]
 8016260:	e008      	b.n	8016274 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801626c:	68b9      	ldr	r1, [r7, #8]
 801626e:	6878      	ldr	r0, [r7, #4]
 8016270:	f000 f80a 	bl	8016288 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d1e3      	bne.n	8016242 <ip_reass_tmr+0x12>
    }
  }
}
 801627a:	bf00      	nop
 801627c:	bf00      	nop
 801627e:	3710      	adds	r7, #16
 8016280:	46bd      	mov	sp, r7
 8016282:	bd80      	pop	{r7, pc}
 8016284:	20008294 	.word	0x20008294

08016288 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b088      	sub	sp, #32
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
 8016290:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016292:	2300      	movs	r3, #0
 8016294:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016296:	683a      	ldr	r2, [r7, #0]
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	429a      	cmp	r2, r3
 801629c:	d105      	bne.n	80162aa <ip_reass_free_complete_datagram+0x22>
 801629e:	4b45      	ldr	r3, [pc, #276]	; (80163b4 <ip_reass_free_complete_datagram+0x12c>)
 80162a0:	22ab      	movs	r2, #171	; 0xab
 80162a2:	4945      	ldr	r1, [pc, #276]	; (80163b8 <ip_reass_free_complete_datagram+0x130>)
 80162a4:	4845      	ldr	r0, [pc, #276]	; (80163bc <ip_reass_free_complete_datagram+0x134>)
 80162a6:	f001 ff39 	bl	801811c <iprintf>
  if (prev != NULL) {
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d00a      	beq.n	80162c6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80162b0:	683b      	ldr	r3, [r7, #0]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	687a      	ldr	r2, [r7, #4]
 80162b6:	429a      	cmp	r2, r3
 80162b8:	d005      	beq.n	80162c6 <ip_reass_free_complete_datagram+0x3e>
 80162ba:	4b3e      	ldr	r3, [pc, #248]	; (80163b4 <ip_reass_free_complete_datagram+0x12c>)
 80162bc:	22ad      	movs	r2, #173	; 0xad
 80162be:	4940      	ldr	r1, [pc, #256]	; (80163c0 <ip_reass_free_complete_datagram+0x138>)
 80162c0:	483e      	ldr	r0, [pc, #248]	; (80163bc <ip_reass_free_complete_datagram+0x134>)
 80162c2:	f001 ff2b 	bl	801811c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	685b      	ldr	r3, [r3, #4]
 80162ca:	685b      	ldr	r3, [r3, #4]
 80162cc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80162ce:	697b      	ldr	r3, [r7, #20]
 80162d0:	889b      	ldrh	r3, [r3, #4]
 80162d2:	b29b      	uxth	r3, r3
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d12a      	bne.n	801632e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	685b      	ldr	r3, [r3, #4]
 80162dc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80162de:	697b      	ldr	r3, [r7, #20]
 80162e0:	681a      	ldr	r2, [r3, #0]
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80162e6:	69bb      	ldr	r3, [r7, #24]
 80162e8:	6858      	ldr	r0, [r3, #4]
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	3308      	adds	r3, #8
 80162ee:	2214      	movs	r2, #20
 80162f0:	4619      	mov	r1, r3
 80162f2:	f002 f806 	bl	8018302 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80162f6:	2101      	movs	r1, #1
 80162f8:	69b8      	ldr	r0, [r7, #24]
 80162fa:	f7ff fc47 	bl	8015b8c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80162fe:	69b8      	ldr	r0, [r7, #24]
 8016300:	f7f7 ff1a 	bl	800e138 <pbuf_clen>
 8016304:	4603      	mov	r3, r0
 8016306:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016308:	8bfa      	ldrh	r2, [r7, #30]
 801630a:	8a7b      	ldrh	r3, [r7, #18]
 801630c:	4413      	add	r3, r2
 801630e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016312:	db05      	blt.n	8016320 <ip_reass_free_complete_datagram+0x98>
 8016314:	4b27      	ldr	r3, [pc, #156]	; (80163b4 <ip_reass_free_complete_datagram+0x12c>)
 8016316:	22bc      	movs	r2, #188	; 0xbc
 8016318:	492a      	ldr	r1, [pc, #168]	; (80163c4 <ip_reass_free_complete_datagram+0x13c>)
 801631a:	4828      	ldr	r0, [pc, #160]	; (80163bc <ip_reass_free_complete_datagram+0x134>)
 801631c:	f001 fefe 	bl	801811c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016320:	8bfa      	ldrh	r2, [r7, #30]
 8016322:	8a7b      	ldrh	r3, [r7, #18]
 8016324:	4413      	add	r3, r2
 8016326:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016328:	69b8      	ldr	r0, [r7, #24]
 801632a:	f7f7 fe7d 	bl	800e028 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	685b      	ldr	r3, [r3, #4]
 8016332:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016334:	e01f      	b.n	8016376 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016336:	69bb      	ldr	r3, [r7, #24]
 8016338:	685b      	ldr	r3, [r3, #4]
 801633a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801633c:	69bb      	ldr	r3, [r7, #24]
 801633e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016340:	697b      	ldr	r3, [r7, #20]
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016346:	68f8      	ldr	r0, [r7, #12]
 8016348:	f7f7 fef6 	bl	800e138 <pbuf_clen>
 801634c:	4603      	mov	r3, r0
 801634e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016350:	8bfa      	ldrh	r2, [r7, #30]
 8016352:	8a7b      	ldrh	r3, [r7, #18]
 8016354:	4413      	add	r3, r2
 8016356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801635a:	db05      	blt.n	8016368 <ip_reass_free_complete_datagram+0xe0>
 801635c:	4b15      	ldr	r3, [pc, #84]	; (80163b4 <ip_reass_free_complete_datagram+0x12c>)
 801635e:	22cc      	movs	r2, #204	; 0xcc
 8016360:	4918      	ldr	r1, [pc, #96]	; (80163c4 <ip_reass_free_complete_datagram+0x13c>)
 8016362:	4816      	ldr	r0, [pc, #88]	; (80163bc <ip_reass_free_complete_datagram+0x134>)
 8016364:	f001 feda 	bl	801811c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016368:	8bfa      	ldrh	r2, [r7, #30]
 801636a:	8a7b      	ldrh	r3, [r7, #18]
 801636c:	4413      	add	r3, r2
 801636e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016370:	68f8      	ldr	r0, [r7, #12]
 8016372:	f7f7 fe59 	bl	800e028 <pbuf_free>
  while (p != NULL) {
 8016376:	69bb      	ldr	r3, [r7, #24]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d1dc      	bne.n	8016336 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801637c:	6839      	ldr	r1, [r7, #0]
 801637e:	6878      	ldr	r0, [r7, #4]
 8016380:	f000 f8c2 	bl	8016508 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016384:	4b10      	ldr	r3, [pc, #64]	; (80163c8 <ip_reass_free_complete_datagram+0x140>)
 8016386:	881b      	ldrh	r3, [r3, #0]
 8016388:	8bfa      	ldrh	r2, [r7, #30]
 801638a:	429a      	cmp	r2, r3
 801638c:	d905      	bls.n	801639a <ip_reass_free_complete_datagram+0x112>
 801638e:	4b09      	ldr	r3, [pc, #36]	; (80163b4 <ip_reass_free_complete_datagram+0x12c>)
 8016390:	22d2      	movs	r2, #210	; 0xd2
 8016392:	490e      	ldr	r1, [pc, #56]	; (80163cc <ip_reass_free_complete_datagram+0x144>)
 8016394:	4809      	ldr	r0, [pc, #36]	; (80163bc <ip_reass_free_complete_datagram+0x134>)
 8016396:	f001 fec1 	bl	801811c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801639a:	4b0b      	ldr	r3, [pc, #44]	; (80163c8 <ip_reass_free_complete_datagram+0x140>)
 801639c:	881a      	ldrh	r2, [r3, #0]
 801639e:	8bfb      	ldrh	r3, [r7, #30]
 80163a0:	1ad3      	subs	r3, r2, r3
 80163a2:	b29a      	uxth	r2, r3
 80163a4:	4b08      	ldr	r3, [pc, #32]	; (80163c8 <ip_reass_free_complete_datagram+0x140>)
 80163a6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80163a8:	8bfb      	ldrh	r3, [r7, #30]
}
 80163aa:	4618      	mov	r0, r3
 80163ac:	3720      	adds	r7, #32
 80163ae:	46bd      	mov	sp, r7
 80163b0:	bd80      	pop	{r7, pc}
 80163b2:	bf00      	nop
 80163b4:	0801b6e4 	.word	0x0801b6e4
 80163b8:	0801b720 	.word	0x0801b720
 80163bc:	0801b72c 	.word	0x0801b72c
 80163c0:	0801b754 	.word	0x0801b754
 80163c4:	0801b768 	.word	0x0801b768
 80163c8:	20008298 	.word	0x20008298
 80163cc:	0801b788 	.word	0x0801b788

080163d0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b08a      	sub	sp, #40	; 0x28
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
 80163d8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80163da:	2300      	movs	r3, #0
 80163dc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80163de:	2300      	movs	r3, #0
 80163e0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80163e2:	2300      	movs	r3, #0
 80163e4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80163e6:	2300      	movs	r3, #0
 80163e8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80163ea:	2300      	movs	r3, #0
 80163ec:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80163ee:	4b28      	ldr	r3, [pc, #160]	; (8016490 <ip_reass_remove_oldest_datagram+0xc0>)
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80163f4:	e030      	b.n	8016458 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80163f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163f8:	695a      	ldr	r2, [r3, #20]
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	68db      	ldr	r3, [r3, #12]
 80163fe:	429a      	cmp	r2, r3
 8016400:	d10c      	bne.n	801641c <ip_reass_remove_oldest_datagram+0x4c>
 8016402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016404:	699a      	ldr	r2, [r3, #24]
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	691b      	ldr	r3, [r3, #16]
 801640a:	429a      	cmp	r2, r3
 801640c:	d106      	bne.n	801641c <ip_reass_remove_oldest_datagram+0x4c>
 801640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016410:	899a      	ldrh	r2, [r3, #12]
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	889b      	ldrh	r3, [r3, #4]
 8016416:	b29b      	uxth	r3, r3
 8016418:	429a      	cmp	r2, r3
 801641a:	d014      	beq.n	8016446 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801641c:	693b      	ldr	r3, [r7, #16]
 801641e:	3301      	adds	r3, #1
 8016420:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016422:	6a3b      	ldr	r3, [r7, #32]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d104      	bne.n	8016432 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801642a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801642c:	69fb      	ldr	r3, [r7, #28]
 801642e:	61bb      	str	r3, [r7, #24]
 8016430:	e009      	b.n	8016446 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016434:	7fda      	ldrb	r2, [r3, #31]
 8016436:	6a3b      	ldr	r3, [r7, #32]
 8016438:	7fdb      	ldrb	r3, [r3, #31]
 801643a:	429a      	cmp	r2, r3
 801643c:	d803      	bhi.n	8016446 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016440:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016442:	69fb      	ldr	r3, [r7, #28]
 8016444:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d001      	beq.n	8016452 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016450:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801645a:	2b00      	cmp	r3, #0
 801645c:	d1cb      	bne.n	80163f6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801645e:	6a3b      	ldr	r3, [r7, #32]
 8016460:	2b00      	cmp	r3, #0
 8016462:	d008      	beq.n	8016476 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016464:	69b9      	ldr	r1, [r7, #24]
 8016466:	6a38      	ldr	r0, [r7, #32]
 8016468:	f7ff ff0e 	bl	8016288 <ip_reass_free_complete_datagram>
 801646c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801646e:	697a      	ldr	r2, [r7, #20]
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	4413      	add	r3, r2
 8016474:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016476:	697a      	ldr	r2, [r7, #20]
 8016478:	683b      	ldr	r3, [r7, #0]
 801647a:	429a      	cmp	r2, r3
 801647c:	da02      	bge.n	8016484 <ip_reass_remove_oldest_datagram+0xb4>
 801647e:	693b      	ldr	r3, [r7, #16]
 8016480:	2b01      	cmp	r3, #1
 8016482:	dcac      	bgt.n	80163de <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016484:	697b      	ldr	r3, [r7, #20]
}
 8016486:	4618      	mov	r0, r3
 8016488:	3728      	adds	r7, #40	; 0x28
 801648a:	46bd      	mov	sp, r7
 801648c:	bd80      	pop	{r7, pc}
 801648e:	bf00      	nop
 8016490:	20008294 	.word	0x20008294

08016494 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b084      	sub	sp, #16
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
 801649c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801649e:	2004      	movs	r0, #4
 80164a0:	f7f6 fedc 	bl	800d25c <memp_malloc>
 80164a4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d110      	bne.n	80164ce <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80164ac:	6839      	ldr	r1, [r7, #0]
 80164ae:	6878      	ldr	r0, [r7, #4]
 80164b0:	f7ff ff8e 	bl	80163d0 <ip_reass_remove_oldest_datagram>
 80164b4:	4602      	mov	r2, r0
 80164b6:	683b      	ldr	r3, [r7, #0]
 80164b8:	4293      	cmp	r3, r2
 80164ba:	dc03      	bgt.n	80164c4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80164bc:	2004      	movs	r0, #4
 80164be:	f7f6 fecd 	bl	800d25c <memp_malloc>
 80164c2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d101      	bne.n	80164ce <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80164ca:	2300      	movs	r3, #0
 80164cc:	e016      	b.n	80164fc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80164ce:	2220      	movs	r2, #32
 80164d0:	2100      	movs	r1, #0
 80164d2:	68f8      	ldr	r0, [r7, #12]
 80164d4:	f001 fe87 	bl	80181e6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	220f      	movs	r2, #15
 80164dc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80164de:	4b09      	ldr	r3, [pc, #36]	; (8016504 <ip_reass_enqueue_new_datagram+0x70>)
 80164e0:	681a      	ldr	r2, [r3, #0]
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80164e6:	4a07      	ldr	r2, [pc, #28]	; (8016504 <ip_reass_enqueue_new_datagram+0x70>)
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	3308      	adds	r3, #8
 80164f0:	2214      	movs	r2, #20
 80164f2:	6879      	ldr	r1, [r7, #4]
 80164f4:	4618      	mov	r0, r3
 80164f6:	f001 ff04 	bl	8018302 <memcpy>
  return ipr;
 80164fa:	68fb      	ldr	r3, [r7, #12]
}
 80164fc:	4618      	mov	r0, r3
 80164fe:	3710      	adds	r7, #16
 8016500:	46bd      	mov	sp, r7
 8016502:	bd80      	pop	{r7, pc}
 8016504:	20008294 	.word	0x20008294

08016508 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b082      	sub	sp, #8
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
 8016510:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016512:	4b10      	ldr	r3, [pc, #64]	; (8016554 <ip_reass_dequeue_datagram+0x4c>)
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	687a      	ldr	r2, [r7, #4]
 8016518:	429a      	cmp	r2, r3
 801651a:	d104      	bne.n	8016526 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	4a0c      	ldr	r2, [pc, #48]	; (8016554 <ip_reass_dequeue_datagram+0x4c>)
 8016522:	6013      	str	r3, [r2, #0]
 8016524:	e00d      	b.n	8016542 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016526:	683b      	ldr	r3, [r7, #0]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d106      	bne.n	801653a <ip_reass_dequeue_datagram+0x32>
 801652c:	4b0a      	ldr	r3, [pc, #40]	; (8016558 <ip_reass_dequeue_datagram+0x50>)
 801652e:	f240 1245 	movw	r2, #325	; 0x145
 8016532:	490a      	ldr	r1, [pc, #40]	; (801655c <ip_reass_dequeue_datagram+0x54>)
 8016534:	480a      	ldr	r0, [pc, #40]	; (8016560 <ip_reass_dequeue_datagram+0x58>)
 8016536:	f001 fdf1 	bl	801811c <iprintf>
    prev->next = ipr->next;
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	681a      	ldr	r2, [r3, #0]
 801653e:	683b      	ldr	r3, [r7, #0]
 8016540:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016542:	6879      	ldr	r1, [r7, #4]
 8016544:	2004      	movs	r0, #4
 8016546:	f7f6 fef9 	bl	800d33c <memp_free>
}
 801654a:	bf00      	nop
 801654c:	3708      	adds	r7, #8
 801654e:	46bd      	mov	sp, r7
 8016550:	bd80      	pop	{r7, pc}
 8016552:	bf00      	nop
 8016554:	20008294 	.word	0x20008294
 8016558:	0801b6e4 	.word	0x0801b6e4
 801655c:	0801b7ac 	.word	0x0801b7ac
 8016560:	0801b72c 	.word	0x0801b72c

08016564 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b08c      	sub	sp, #48	; 0x30
 8016568:	af00      	add	r7, sp, #0
 801656a:	60f8      	str	r0, [r7, #12]
 801656c:	60b9      	str	r1, [r7, #8]
 801656e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016570:	2300      	movs	r3, #0
 8016572:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016574:	2301      	movs	r3, #1
 8016576:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016578:	68bb      	ldr	r3, [r7, #8]
 801657a:	685b      	ldr	r3, [r3, #4]
 801657c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801657e:	69fb      	ldr	r3, [r7, #28]
 8016580:	885b      	ldrh	r3, [r3, #2]
 8016582:	b29b      	uxth	r3, r3
 8016584:	4618      	mov	r0, r3
 8016586:	f7f6 f9f2 	bl	800c96e <lwip_htons>
 801658a:	4603      	mov	r3, r0
 801658c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801658e:	69fb      	ldr	r3, [r7, #28]
 8016590:	781b      	ldrb	r3, [r3, #0]
 8016592:	f003 030f 	and.w	r3, r3, #15
 8016596:	b2db      	uxtb	r3, r3
 8016598:	009b      	lsls	r3, r3, #2
 801659a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801659c:	7e7b      	ldrb	r3, [r7, #25]
 801659e:	b29b      	uxth	r3, r3
 80165a0:	8b7a      	ldrh	r2, [r7, #26]
 80165a2:	429a      	cmp	r2, r3
 80165a4:	d202      	bcs.n	80165ac <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80165a6:	f04f 33ff 	mov.w	r3, #4294967295
 80165aa:	e135      	b.n	8016818 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80165ac:	7e7b      	ldrb	r3, [r7, #25]
 80165ae:	b29b      	uxth	r3, r3
 80165b0:	8b7a      	ldrh	r2, [r7, #26]
 80165b2:	1ad3      	subs	r3, r2, r3
 80165b4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80165b6:	69fb      	ldr	r3, [r7, #28]
 80165b8:	88db      	ldrh	r3, [r3, #6]
 80165ba:	b29b      	uxth	r3, r3
 80165bc:	4618      	mov	r0, r3
 80165be:	f7f6 f9d6 	bl	800c96e <lwip_htons>
 80165c2:	4603      	mov	r3, r0
 80165c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80165c8:	b29b      	uxth	r3, r3
 80165ca:	00db      	lsls	r3, r3, #3
 80165cc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80165ce:	68bb      	ldr	r3, [r7, #8]
 80165d0:	685b      	ldr	r3, [r3, #4]
 80165d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80165d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165d6:	2200      	movs	r2, #0
 80165d8:	701a      	strb	r2, [r3, #0]
 80165da:	2200      	movs	r2, #0
 80165dc:	705a      	strb	r2, [r3, #1]
 80165de:	2200      	movs	r2, #0
 80165e0:	709a      	strb	r2, [r3, #2]
 80165e2:	2200      	movs	r2, #0
 80165e4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80165e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165e8:	8afa      	ldrh	r2, [r7, #22]
 80165ea:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80165ec:	8afa      	ldrh	r2, [r7, #22]
 80165ee:	8b7b      	ldrh	r3, [r7, #26]
 80165f0:	4413      	add	r3, r2
 80165f2:	b29a      	uxth	r2, r3
 80165f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165f6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80165f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165fa:	88db      	ldrh	r3, [r3, #6]
 80165fc:	b29b      	uxth	r3, r3
 80165fe:	8afa      	ldrh	r2, [r7, #22]
 8016600:	429a      	cmp	r2, r3
 8016602:	d902      	bls.n	801660a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016604:	f04f 33ff 	mov.w	r3, #4294967295
 8016608:	e106      	b.n	8016818 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	685b      	ldr	r3, [r3, #4]
 801660e:	627b      	str	r3, [r7, #36]	; 0x24
 8016610:	e068      	b.n	80166e4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016614:	685b      	ldr	r3, [r3, #4]
 8016616:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801661a:	889b      	ldrh	r3, [r3, #4]
 801661c:	b29a      	uxth	r2, r3
 801661e:	693b      	ldr	r3, [r7, #16]
 8016620:	889b      	ldrh	r3, [r3, #4]
 8016622:	b29b      	uxth	r3, r3
 8016624:	429a      	cmp	r2, r3
 8016626:	d235      	bcs.n	8016694 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801662a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801662c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016630:	2b00      	cmp	r3, #0
 8016632:	d020      	beq.n	8016676 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016636:	889b      	ldrh	r3, [r3, #4]
 8016638:	b29a      	uxth	r2, r3
 801663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801663c:	88db      	ldrh	r3, [r3, #6]
 801663e:	b29b      	uxth	r3, r3
 8016640:	429a      	cmp	r2, r3
 8016642:	d307      	bcc.n	8016654 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016646:	88db      	ldrh	r3, [r3, #6]
 8016648:	b29a      	uxth	r2, r3
 801664a:	693b      	ldr	r3, [r7, #16]
 801664c:	889b      	ldrh	r3, [r3, #4]
 801664e:	b29b      	uxth	r3, r3
 8016650:	429a      	cmp	r2, r3
 8016652:	d902      	bls.n	801665a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016654:	f04f 33ff 	mov.w	r3, #4294967295
 8016658:	e0de      	b.n	8016818 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801665c:	68ba      	ldr	r2, [r7, #8]
 801665e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016662:	88db      	ldrh	r3, [r3, #6]
 8016664:	b29a      	uxth	r2, r3
 8016666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016668:	889b      	ldrh	r3, [r3, #4]
 801666a:	b29b      	uxth	r3, r3
 801666c:	429a      	cmp	r2, r3
 801666e:	d03d      	beq.n	80166ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016670:	2300      	movs	r3, #0
 8016672:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016674:	e03a      	b.n	80166ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016678:	88db      	ldrh	r3, [r3, #6]
 801667a:	b29a      	uxth	r2, r3
 801667c:	693b      	ldr	r3, [r7, #16]
 801667e:	889b      	ldrh	r3, [r3, #4]
 8016680:	b29b      	uxth	r3, r3
 8016682:	429a      	cmp	r2, r3
 8016684:	d902      	bls.n	801668c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016686:	f04f 33ff 	mov.w	r3, #4294967295
 801668a:	e0c5      	b.n	8016818 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	68ba      	ldr	r2, [r7, #8]
 8016690:	605a      	str	r2, [r3, #4]
      break;
 8016692:	e02b      	b.n	80166ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016696:	889b      	ldrh	r3, [r3, #4]
 8016698:	b29a      	uxth	r2, r3
 801669a:	693b      	ldr	r3, [r7, #16]
 801669c:	889b      	ldrh	r3, [r3, #4]
 801669e:	b29b      	uxth	r3, r3
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d102      	bne.n	80166aa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80166a4:	f04f 33ff 	mov.w	r3, #4294967295
 80166a8:	e0b6      	b.n	8016818 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80166aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166ac:	889b      	ldrh	r3, [r3, #4]
 80166ae:	b29a      	uxth	r2, r3
 80166b0:	693b      	ldr	r3, [r7, #16]
 80166b2:	88db      	ldrh	r3, [r3, #6]
 80166b4:	b29b      	uxth	r3, r3
 80166b6:	429a      	cmp	r2, r3
 80166b8:	d202      	bcs.n	80166c0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80166ba:	f04f 33ff 	mov.w	r3, #4294967295
 80166be:	e0ab      	b.n	8016818 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80166c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d009      	beq.n	80166da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80166c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166c8:	88db      	ldrh	r3, [r3, #6]
 80166ca:	b29a      	uxth	r2, r3
 80166cc:	693b      	ldr	r3, [r7, #16]
 80166ce:	889b      	ldrh	r3, [r3, #4]
 80166d0:	b29b      	uxth	r3, r3
 80166d2:	429a      	cmp	r2, r3
 80166d4:	d001      	beq.n	80166da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80166d6:	2300      	movs	r3, #0
 80166d8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80166da:	693b      	ldr	r3, [r7, #16]
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80166e0:	693b      	ldr	r3, [r7, #16]
 80166e2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80166e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d193      	bne.n	8016612 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80166ea:	e000      	b.n	80166ee <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80166ec:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80166ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d12d      	bne.n	8016750 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80166f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d01c      	beq.n	8016734 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80166fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166fc:	88db      	ldrh	r3, [r3, #6]
 80166fe:	b29a      	uxth	r2, r3
 8016700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016702:	889b      	ldrh	r3, [r3, #4]
 8016704:	b29b      	uxth	r3, r3
 8016706:	429a      	cmp	r2, r3
 8016708:	d906      	bls.n	8016718 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801670a:	4b45      	ldr	r3, [pc, #276]	; (8016820 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801670c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016710:	4944      	ldr	r1, [pc, #272]	; (8016824 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016712:	4845      	ldr	r0, [pc, #276]	; (8016828 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016714:	f001 fd02 	bl	801811c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801671a:	68ba      	ldr	r2, [r7, #8]
 801671c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016720:	88db      	ldrh	r3, [r3, #6]
 8016722:	b29a      	uxth	r2, r3
 8016724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016726:	889b      	ldrh	r3, [r3, #4]
 8016728:	b29b      	uxth	r3, r3
 801672a:	429a      	cmp	r2, r3
 801672c:	d010      	beq.n	8016750 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801672e:	2300      	movs	r3, #0
 8016730:	623b      	str	r3, [r7, #32]
 8016732:	e00d      	b.n	8016750 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	685b      	ldr	r3, [r3, #4]
 8016738:	2b00      	cmp	r3, #0
 801673a:	d006      	beq.n	801674a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801673c:	4b38      	ldr	r3, [pc, #224]	; (8016820 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801673e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016742:	493a      	ldr	r1, [pc, #232]	; (801682c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016744:	4838      	ldr	r0, [pc, #224]	; (8016828 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016746:	f001 fce9 	bl	801811c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	68ba      	ldr	r2, [r7, #8]
 801674e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d105      	bne.n	8016762 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	7f9b      	ldrb	r3, [r3, #30]
 801675a:	f003 0301 	and.w	r3, r3, #1
 801675e:	2b00      	cmp	r3, #0
 8016760:	d059      	beq.n	8016816 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016762:	6a3b      	ldr	r3, [r7, #32]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d04f      	beq.n	8016808 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	685b      	ldr	r3, [r3, #4]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d006      	beq.n	801677e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	685b      	ldr	r3, [r3, #4]
 8016774:	685b      	ldr	r3, [r3, #4]
 8016776:	889b      	ldrh	r3, [r3, #4]
 8016778:	b29b      	uxth	r3, r3
 801677a:	2b00      	cmp	r3, #0
 801677c:	d002      	beq.n	8016784 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801677e:	2300      	movs	r3, #0
 8016780:	623b      	str	r3, [r7, #32]
 8016782:	e041      	b.n	8016808 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016786:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801678e:	e012      	b.n	80167b6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016792:	685b      	ldr	r3, [r3, #4]
 8016794:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016798:	88db      	ldrh	r3, [r3, #6]
 801679a:	b29a      	uxth	r2, r3
 801679c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801679e:	889b      	ldrh	r3, [r3, #4]
 80167a0:	b29b      	uxth	r3, r3
 80167a2:	429a      	cmp	r2, r3
 80167a4:	d002      	beq.n	80167ac <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80167a6:	2300      	movs	r3, #0
 80167a8:	623b      	str	r3, [r7, #32]
            break;
 80167aa:	e007      	b.n	80167bc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80167ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167ae:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80167b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80167b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d1e9      	bne.n	8016790 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80167bc:	6a3b      	ldr	r3, [r7, #32]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d022      	beq.n	8016808 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	685b      	ldr	r3, [r3, #4]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d106      	bne.n	80167d8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80167ca:	4b15      	ldr	r3, [pc, #84]	; (8016820 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80167cc:	f240 12df 	movw	r2, #479	; 0x1df
 80167d0:	4917      	ldr	r1, [pc, #92]	; (8016830 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80167d2:	4815      	ldr	r0, [pc, #84]	; (8016828 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80167d4:	f001 fca2 	bl	801811c <iprintf>
          LWIP_ASSERT("sanity check",
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	685b      	ldr	r3, [r3, #4]
 80167dc:	685b      	ldr	r3, [r3, #4]
 80167de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80167e0:	429a      	cmp	r2, r3
 80167e2:	d106      	bne.n	80167f2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80167e4:	4b0e      	ldr	r3, [pc, #56]	; (8016820 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80167e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80167ea:	4911      	ldr	r1, [pc, #68]	; (8016830 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80167ec:	480e      	ldr	r0, [pc, #56]	; (8016828 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80167ee:	f001 fc95 	bl	801811c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80167f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d006      	beq.n	8016808 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80167fa:	4b09      	ldr	r3, [pc, #36]	; (8016820 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80167fc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016800:	490c      	ldr	r1, [pc, #48]	; (8016834 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016802:	4809      	ldr	r0, [pc, #36]	; (8016828 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016804:	f001 fc8a 	bl	801811c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016808:	6a3b      	ldr	r3, [r7, #32]
 801680a:	2b00      	cmp	r3, #0
 801680c:	bf14      	ite	ne
 801680e:	2301      	movne	r3, #1
 8016810:	2300      	moveq	r3, #0
 8016812:	b2db      	uxtb	r3, r3
 8016814:	e000      	b.n	8016818 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016816:	2300      	movs	r3, #0
}
 8016818:	4618      	mov	r0, r3
 801681a:	3730      	adds	r7, #48	; 0x30
 801681c:	46bd      	mov	sp, r7
 801681e:	bd80      	pop	{r7, pc}
 8016820:	0801b6e4 	.word	0x0801b6e4
 8016824:	0801b7c8 	.word	0x0801b7c8
 8016828:	0801b72c 	.word	0x0801b72c
 801682c:	0801b7e8 	.word	0x0801b7e8
 8016830:	0801b820 	.word	0x0801b820
 8016834:	0801b830 	.word	0x0801b830

08016838 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b08e      	sub	sp, #56	; 0x38
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	685b      	ldr	r3, [r3, #4]
 8016844:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016848:	781b      	ldrb	r3, [r3, #0]
 801684a:	f003 030f 	and.w	r3, r3, #15
 801684e:	b2db      	uxtb	r3, r3
 8016850:	009b      	lsls	r3, r3, #2
 8016852:	b2db      	uxtb	r3, r3
 8016854:	2b14      	cmp	r3, #20
 8016856:	f040 8171 	bne.w	8016b3c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801685c:	88db      	ldrh	r3, [r3, #6]
 801685e:	b29b      	uxth	r3, r3
 8016860:	4618      	mov	r0, r3
 8016862:	f7f6 f884 	bl	800c96e <lwip_htons>
 8016866:	4603      	mov	r3, r0
 8016868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801686c:	b29b      	uxth	r3, r3
 801686e:	00db      	lsls	r3, r3, #3
 8016870:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016874:	885b      	ldrh	r3, [r3, #2]
 8016876:	b29b      	uxth	r3, r3
 8016878:	4618      	mov	r0, r3
 801687a:	f7f6 f878 	bl	800c96e <lwip_htons>
 801687e:	4603      	mov	r3, r0
 8016880:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016884:	781b      	ldrb	r3, [r3, #0]
 8016886:	f003 030f 	and.w	r3, r3, #15
 801688a:	b2db      	uxtb	r3, r3
 801688c:	009b      	lsls	r3, r3, #2
 801688e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016892:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016896:	b29b      	uxth	r3, r3
 8016898:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801689a:	429a      	cmp	r2, r3
 801689c:	f0c0 8150 	bcc.w	8016b40 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80168a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80168a4:	b29b      	uxth	r3, r3
 80168a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80168a8:	1ad3      	subs	r3, r2, r3
 80168aa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80168ac:	6878      	ldr	r0, [r7, #4]
 80168ae:	f7f7 fc43 	bl	800e138 <pbuf_clen>
 80168b2:	4603      	mov	r3, r0
 80168b4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80168b6:	4b8c      	ldr	r3, [pc, #560]	; (8016ae8 <ip4_reass+0x2b0>)
 80168b8:	881b      	ldrh	r3, [r3, #0]
 80168ba:	461a      	mov	r2, r3
 80168bc:	8c3b      	ldrh	r3, [r7, #32]
 80168be:	4413      	add	r3, r2
 80168c0:	2b0a      	cmp	r3, #10
 80168c2:	dd10      	ble.n	80168e6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80168c4:	8c3b      	ldrh	r3, [r7, #32]
 80168c6:	4619      	mov	r1, r3
 80168c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80168ca:	f7ff fd81 	bl	80163d0 <ip_reass_remove_oldest_datagram>
 80168ce:	4603      	mov	r3, r0
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	f000 8137 	beq.w	8016b44 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80168d6:	4b84      	ldr	r3, [pc, #528]	; (8016ae8 <ip4_reass+0x2b0>)
 80168d8:	881b      	ldrh	r3, [r3, #0]
 80168da:	461a      	mov	r2, r3
 80168dc:	8c3b      	ldrh	r3, [r7, #32]
 80168de:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80168e0:	2b0a      	cmp	r3, #10
 80168e2:	f300 812f 	bgt.w	8016b44 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80168e6:	4b81      	ldr	r3, [pc, #516]	; (8016aec <ip4_reass+0x2b4>)
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	633b      	str	r3, [r7, #48]	; 0x30
 80168ec:	e015      	b.n	801691a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80168ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168f0:	695a      	ldr	r2, [r3, #20]
 80168f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168f4:	68db      	ldr	r3, [r3, #12]
 80168f6:	429a      	cmp	r2, r3
 80168f8:	d10c      	bne.n	8016914 <ip4_reass+0xdc>
 80168fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168fc:	699a      	ldr	r2, [r3, #24]
 80168fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016900:	691b      	ldr	r3, [r3, #16]
 8016902:	429a      	cmp	r2, r3
 8016904:	d106      	bne.n	8016914 <ip4_reass+0xdc>
 8016906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016908:	899a      	ldrh	r2, [r3, #12]
 801690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801690c:	889b      	ldrh	r3, [r3, #4]
 801690e:	b29b      	uxth	r3, r3
 8016910:	429a      	cmp	r2, r3
 8016912:	d006      	beq.n	8016922 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	633b      	str	r3, [r7, #48]	; 0x30
 801691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801691c:	2b00      	cmp	r3, #0
 801691e:	d1e6      	bne.n	80168ee <ip4_reass+0xb6>
 8016920:	e000      	b.n	8016924 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016922:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016926:	2b00      	cmp	r3, #0
 8016928:	d109      	bne.n	801693e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801692a:	8c3b      	ldrh	r3, [r7, #32]
 801692c:	4619      	mov	r1, r3
 801692e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016930:	f7ff fdb0 	bl	8016494 <ip_reass_enqueue_new_datagram>
 8016934:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016938:	2b00      	cmp	r3, #0
 801693a:	d11c      	bne.n	8016976 <ip4_reass+0x13e>
      goto nullreturn;
 801693c:	e105      	b.n	8016b4a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016940:	88db      	ldrh	r3, [r3, #6]
 8016942:	b29b      	uxth	r3, r3
 8016944:	4618      	mov	r0, r3
 8016946:	f7f6 f812 	bl	800c96e <lwip_htons>
 801694a:	4603      	mov	r3, r0
 801694c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016950:	2b00      	cmp	r3, #0
 8016952:	d110      	bne.n	8016976 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016956:	89db      	ldrh	r3, [r3, #14]
 8016958:	4618      	mov	r0, r3
 801695a:	f7f6 f808 	bl	800c96e <lwip_htons>
 801695e:	4603      	mov	r3, r0
 8016960:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016964:	2b00      	cmp	r3, #0
 8016966:	d006      	beq.n	8016976 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801696a:	3308      	adds	r3, #8
 801696c:	2214      	movs	r2, #20
 801696e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016970:	4618      	mov	r0, r3
 8016972:	f001 fcc6 	bl	8018302 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016978:	88db      	ldrh	r3, [r3, #6]
 801697a:	b29b      	uxth	r3, r3
 801697c:	f003 0320 	and.w	r3, r3, #32
 8016980:	2b00      	cmp	r3, #0
 8016982:	bf0c      	ite	eq
 8016984:	2301      	moveq	r3, #1
 8016986:	2300      	movne	r3, #0
 8016988:	b2db      	uxtb	r3, r3
 801698a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801698c:	69fb      	ldr	r3, [r7, #28]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d00e      	beq.n	80169b0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016992:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016996:	4413      	add	r3, r2
 8016998:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801699a:	8b7a      	ldrh	r2, [r7, #26]
 801699c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801699e:	429a      	cmp	r2, r3
 80169a0:	f0c0 80a0 	bcc.w	8016ae4 <ip4_reass+0x2ac>
 80169a4:	8b7b      	ldrh	r3, [r7, #26]
 80169a6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80169aa:	4293      	cmp	r3, r2
 80169ac:	f200 809a 	bhi.w	8016ae4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80169b0:	69fa      	ldr	r2, [r7, #28]
 80169b2:	6879      	ldr	r1, [r7, #4]
 80169b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80169b6:	f7ff fdd5 	bl	8016564 <ip_reass_chain_frag_into_datagram_and_validate>
 80169ba:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80169bc:	697b      	ldr	r3, [r7, #20]
 80169be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169c2:	f000 809b 	beq.w	8016afc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80169c6:	4b48      	ldr	r3, [pc, #288]	; (8016ae8 <ip4_reass+0x2b0>)
 80169c8:	881a      	ldrh	r2, [r3, #0]
 80169ca:	8c3b      	ldrh	r3, [r7, #32]
 80169cc:	4413      	add	r3, r2
 80169ce:	b29a      	uxth	r2, r3
 80169d0:	4b45      	ldr	r3, [pc, #276]	; (8016ae8 <ip4_reass+0x2b0>)
 80169d2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80169d4:	69fb      	ldr	r3, [r7, #28]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d00d      	beq.n	80169f6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80169da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80169dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169de:	4413      	add	r3, r2
 80169e0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80169e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169e4:	8a7a      	ldrh	r2, [r7, #18]
 80169e6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80169e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169ea:	7f9b      	ldrb	r3, [r3, #30]
 80169ec:	f043 0301 	orr.w	r3, r3, #1
 80169f0:	b2da      	uxtb	r2, r3
 80169f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169f4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80169f6:	697b      	ldr	r3, [r7, #20]
 80169f8:	2b01      	cmp	r3, #1
 80169fa:	d171      	bne.n	8016ae0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80169fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169fe:	8b9b      	ldrh	r3, [r3, #28]
 8016a00:	3314      	adds	r3, #20
 8016a02:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a06:	685b      	ldr	r3, [r3, #4]
 8016a08:	685b      	ldr	r3, [r3, #4]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a10:	685b      	ldr	r3, [r3, #4]
 8016a12:	685b      	ldr	r3, [r3, #4]
 8016a14:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a18:	3308      	adds	r3, #8
 8016a1a:	2214      	movs	r2, #20
 8016a1c:	4619      	mov	r1, r3
 8016a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a20:	f001 fc6f 	bl	8018302 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016a24:	8a3b      	ldrh	r3, [r7, #16]
 8016a26:	4618      	mov	r0, r3
 8016a28:	f7f5 ffa1 	bl	800c96e <lwip_htons>
 8016a2c:	4603      	mov	r3, r0
 8016a2e:	461a      	mov	r2, r3
 8016a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a32:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a36:	2200      	movs	r2, #0
 8016a38:	719a      	strb	r2, [r3, #6]
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a40:	2200      	movs	r2, #0
 8016a42:	729a      	strb	r2, [r3, #10]
 8016a44:	2200      	movs	r2, #0
 8016a46:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a4a:	685b      	ldr	r3, [r3, #4]
 8016a4c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016a4e:	e00d      	b.n	8016a6c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a52:	685b      	ldr	r3, [r3, #4]
 8016a54:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016a56:	2114      	movs	r1, #20
 8016a58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016a5a:	f7f7 fa5f 	bl	800df1c <pbuf_remove_header>
      pbuf_cat(p, r);
 8016a5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016a60:	6878      	ldr	r0, [r7, #4]
 8016a62:	f7f7 fba3 	bl	800e1ac <pbuf_cat>
      r = iprh->next_pbuf;
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d1ee      	bne.n	8016a50 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016a72:	4b1e      	ldr	r3, [pc, #120]	; (8016aec <ip4_reass+0x2b4>)
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a78:	429a      	cmp	r2, r3
 8016a7a:	d102      	bne.n	8016a82 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016a80:	e010      	b.n	8016aa4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016a82:	4b1a      	ldr	r3, [pc, #104]	; (8016aec <ip4_reass+0x2b4>)
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016a88:	e007      	b.n	8016a9a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a90:	429a      	cmp	r2, r3
 8016a92:	d006      	beq.n	8016aa2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d1f4      	bne.n	8016a8a <ip4_reass+0x252>
 8016aa0:	e000      	b.n	8016aa4 <ip4_reass+0x26c>
          break;
 8016aa2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016aa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016aa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016aa8:	f7ff fd2e 	bl	8016508 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016aac:	6878      	ldr	r0, [r7, #4]
 8016aae:	f7f7 fb43 	bl	800e138 <pbuf_clen>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016ab6:	4b0c      	ldr	r3, [pc, #48]	; (8016ae8 <ip4_reass+0x2b0>)
 8016ab8:	881b      	ldrh	r3, [r3, #0]
 8016aba:	8c3a      	ldrh	r2, [r7, #32]
 8016abc:	429a      	cmp	r2, r3
 8016abe:	d906      	bls.n	8016ace <ip4_reass+0x296>
 8016ac0:	4b0b      	ldr	r3, [pc, #44]	; (8016af0 <ip4_reass+0x2b8>)
 8016ac2:	f240 229b 	movw	r2, #667	; 0x29b
 8016ac6:	490b      	ldr	r1, [pc, #44]	; (8016af4 <ip4_reass+0x2bc>)
 8016ac8:	480b      	ldr	r0, [pc, #44]	; (8016af8 <ip4_reass+0x2c0>)
 8016aca:	f001 fb27 	bl	801811c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016ace:	4b06      	ldr	r3, [pc, #24]	; (8016ae8 <ip4_reass+0x2b0>)
 8016ad0:	881a      	ldrh	r2, [r3, #0]
 8016ad2:	8c3b      	ldrh	r3, [r7, #32]
 8016ad4:	1ad3      	subs	r3, r2, r3
 8016ad6:	b29a      	uxth	r2, r3
 8016ad8:	4b03      	ldr	r3, [pc, #12]	; (8016ae8 <ip4_reass+0x2b0>)
 8016ada:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	e038      	b.n	8016b52 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	e036      	b.n	8016b52 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016ae4:	bf00      	nop
 8016ae6:	e00a      	b.n	8016afe <ip4_reass+0x2c6>
 8016ae8:	20008298 	.word	0x20008298
 8016aec:	20008294 	.word	0x20008294
 8016af0:	0801b6e4 	.word	0x0801b6e4
 8016af4:	0801b854 	.word	0x0801b854
 8016af8:	0801b72c 	.word	0x0801b72c
    goto nullreturn_ipr;
 8016afc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d106      	bne.n	8016b12 <ip4_reass+0x2da>
 8016b04:	4b15      	ldr	r3, [pc, #84]	; (8016b5c <ip4_reass+0x324>)
 8016b06:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016b0a:	4915      	ldr	r1, [pc, #84]	; (8016b60 <ip4_reass+0x328>)
 8016b0c:	4815      	ldr	r0, [pc, #84]	; (8016b64 <ip4_reass+0x32c>)
 8016b0e:	f001 fb05 	bl	801811c <iprintf>
  if (ipr->p == NULL) {
 8016b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b14:	685b      	ldr	r3, [r3, #4]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d116      	bne.n	8016b48 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016b1a:	4b13      	ldr	r3, [pc, #76]	; (8016b68 <ip4_reass+0x330>)
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b20:	429a      	cmp	r2, r3
 8016b22:	d006      	beq.n	8016b32 <ip4_reass+0x2fa>
 8016b24:	4b0d      	ldr	r3, [pc, #52]	; (8016b5c <ip4_reass+0x324>)
 8016b26:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016b2a:	4910      	ldr	r1, [pc, #64]	; (8016b6c <ip4_reass+0x334>)
 8016b2c:	480d      	ldr	r0, [pc, #52]	; (8016b64 <ip4_reass+0x32c>)
 8016b2e:	f001 faf5 	bl	801811c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016b32:	2100      	movs	r1, #0
 8016b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b36:	f7ff fce7 	bl	8016508 <ip_reass_dequeue_datagram>
 8016b3a:	e006      	b.n	8016b4a <ip4_reass+0x312>
    goto nullreturn;
 8016b3c:	bf00      	nop
 8016b3e:	e004      	b.n	8016b4a <ip4_reass+0x312>
    goto nullreturn;
 8016b40:	bf00      	nop
 8016b42:	e002      	b.n	8016b4a <ip4_reass+0x312>
      goto nullreturn;
 8016b44:	bf00      	nop
 8016b46:	e000      	b.n	8016b4a <ip4_reass+0x312>
  }

nullreturn:
 8016b48:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016b4a:	6878      	ldr	r0, [r7, #4]
 8016b4c:	f7f7 fa6c 	bl	800e028 <pbuf_free>
  return NULL;
 8016b50:	2300      	movs	r3, #0
}
 8016b52:	4618      	mov	r0, r3
 8016b54:	3738      	adds	r7, #56	; 0x38
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bd80      	pop	{r7, pc}
 8016b5a:	bf00      	nop
 8016b5c:	0801b6e4 	.word	0x0801b6e4
 8016b60:	0801b870 	.word	0x0801b870
 8016b64:	0801b72c 	.word	0x0801b72c
 8016b68:	20008294 	.word	0x20008294
 8016b6c:	0801b87c 	.word	0x0801b87c

08016b70 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016b70:	b580      	push	{r7, lr}
 8016b72:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016b74:	2005      	movs	r0, #5
 8016b76:	f7f6 fb71 	bl	800d25c <memp_malloc>
 8016b7a:	4603      	mov	r3, r0
}
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	bd80      	pop	{r7, pc}

08016b80 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b082      	sub	sp, #8
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d106      	bne.n	8016b9c <ip_frag_free_pbuf_custom_ref+0x1c>
 8016b8e:	4b07      	ldr	r3, [pc, #28]	; (8016bac <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016b90:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016b94:	4906      	ldr	r1, [pc, #24]	; (8016bb0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016b96:	4807      	ldr	r0, [pc, #28]	; (8016bb4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016b98:	f001 fac0 	bl	801811c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016b9c:	6879      	ldr	r1, [r7, #4]
 8016b9e:	2005      	movs	r0, #5
 8016ba0:	f7f6 fbcc 	bl	800d33c <memp_free>
}
 8016ba4:	bf00      	nop
 8016ba6:	3708      	adds	r7, #8
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}
 8016bac:	0801b6e4 	.word	0x0801b6e4
 8016bb0:	0801b89c 	.word	0x0801b89c
 8016bb4:	0801b72c 	.word	0x0801b72c

08016bb8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b084      	sub	sp, #16
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d106      	bne.n	8016bd8 <ipfrag_free_pbuf_custom+0x20>
 8016bca:	4b11      	ldr	r3, [pc, #68]	; (8016c10 <ipfrag_free_pbuf_custom+0x58>)
 8016bcc:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016bd0:	4910      	ldr	r1, [pc, #64]	; (8016c14 <ipfrag_free_pbuf_custom+0x5c>)
 8016bd2:	4811      	ldr	r0, [pc, #68]	; (8016c18 <ipfrag_free_pbuf_custom+0x60>)
 8016bd4:	f001 faa2 	bl	801811c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016bd8:	68fa      	ldr	r2, [r7, #12]
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	429a      	cmp	r2, r3
 8016bde:	d006      	beq.n	8016bee <ipfrag_free_pbuf_custom+0x36>
 8016be0:	4b0b      	ldr	r3, [pc, #44]	; (8016c10 <ipfrag_free_pbuf_custom+0x58>)
 8016be2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016be6:	490d      	ldr	r1, [pc, #52]	; (8016c1c <ipfrag_free_pbuf_custom+0x64>)
 8016be8:	480b      	ldr	r0, [pc, #44]	; (8016c18 <ipfrag_free_pbuf_custom+0x60>)
 8016bea:	f001 fa97 	bl	801811c <iprintf>
  if (pcr->original != NULL) {
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	695b      	ldr	r3, [r3, #20]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d004      	beq.n	8016c00 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	695b      	ldr	r3, [r3, #20]
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f7f7 fa14 	bl	800e028 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016c00:	68f8      	ldr	r0, [r7, #12]
 8016c02:	f7ff ffbd 	bl	8016b80 <ip_frag_free_pbuf_custom_ref>
}
 8016c06:	bf00      	nop
 8016c08:	3710      	adds	r7, #16
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}
 8016c0e:	bf00      	nop
 8016c10:	0801b6e4 	.word	0x0801b6e4
 8016c14:	0801b8a8 	.word	0x0801b8a8
 8016c18:	0801b72c 	.word	0x0801b72c
 8016c1c:	0801b8b4 	.word	0x0801b8b4

08016c20 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b094      	sub	sp, #80	; 0x50
 8016c24:	af02      	add	r7, sp, #8
 8016c26:	60f8      	str	r0, [r7, #12]
 8016c28:	60b9      	str	r1, [r7, #8]
 8016c2a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016c32:	68bb      	ldr	r3, [r7, #8]
 8016c34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016c36:	3b14      	subs	r3, #20
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	da00      	bge.n	8016c3e <ip4_frag+0x1e>
 8016c3c:	3307      	adds	r3, #7
 8016c3e:	10db      	asrs	r3, r3, #3
 8016c40:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016c42:	2314      	movs	r3, #20
 8016c44:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	685b      	ldr	r3, [r3, #4]
 8016c4a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c4e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c52:	781b      	ldrb	r3, [r3, #0]
 8016c54:	f003 030f 	and.w	r3, r3, #15
 8016c58:	b2db      	uxtb	r3, r3
 8016c5a:	009b      	lsls	r3, r3, #2
 8016c5c:	b2db      	uxtb	r3, r3
 8016c5e:	2b14      	cmp	r3, #20
 8016c60:	d002      	beq.n	8016c68 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016c62:	f06f 0305 	mvn.w	r3, #5
 8016c66:	e110      	b.n	8016e8a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	895b      	ldrh	r3, [r3, #10]
 8016c6c:	2b13      	cmp	r3, #19
 8016c6e:	d809      	bhi.n	8016c84 <ip4_frag+0x64>
 8016c70:	4b88      	ldr	r3, [pc, #544]	; (8016e94 <ip4_frag+0x274>)
 8016c72:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016c76:	4988      	ldr	r1, [pc, #544]	; (8016e98 <ip4_frag+0x278>)
 8016c78:	4888      	ldr	r0, [pc, #544]	; (8016e9c <ip4_frag+0x27c>)
 8016c7a:	f001 fa4f 	bl	801811c <iprintf>
 8016c7e:	f06f 0305 	mvn.w	r3, #5
 8016c82:	e102      	b.n	8016e8a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c86:	88db      	ldrh	r3, [r3, #6]
 8016c88:	b29b      	uxth	r3, r3
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	f7f5 fe6f 	bl	800c96e <lwip_htons>
 8016c90:	4603      	mov	r3, r0
 8016c92:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016c94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016c96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016c9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016ca4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	891b      	ldrh	r3, [r3, #8]
 8016caa:	3b14      	subs	r3, #20
 8016cac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016cb0:	e0e1      	b.n	8016e76 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016cb2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016cb4:	00db      	lsls	r3, r3, #3
 8016cb6:	b29b      	uxth	r3, r3
 8016cb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016cbc:	4293      	cmp	r3, r2
 8016cbe:	bf28      	it	cs
 8016cc0:	4613      	movcs	r3, r2
 8016cc2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016cc4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016cc8:	2114      	movs	r1, #20
 8016cca:	200e      	movs	r0, #14
 8016ccc:	f7f6 fec8 	bl	800da60 <pbuf_alloc>
 8016cd0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	f000 80d5 	beq.w	8016e84 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cdc:	895b      	ldrh	r3, [r3, #10]
 8016cde:	2b13      	cmp	r3, #19
 8016ce0:	d806      	bhi.n	8016cf0 <ip4_frag+0xd0>
 8016ce2:	4b6c      	ldr	r3, [pc, #432]	; (8016e94 <ip4_frag+0x274>)
 8016ce4:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016ce8:	496d      	ldr	r1, [pc, #436]	; (8016ea0 <ip4_frag+0x280>)
 8016cea:	486c      	ldr	r0, [pc, #432]	; (8016e9c <ip4_frag+0x27c>)
 8016cec:	f001 fa16 	bl	801811c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf2:	685b      	ldr	r3, [r3, #4]
 8016cf4:	2214      	movs	r2, #20
 8016cf6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	f001 fb02 	bl	8018302 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d00:	685b      	ldr	r3, [r3, #4]
 8016d02:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016d04:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016d06:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016d0a:	e064      	b.n	8016dd6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	895a      	ldrh	r2, [r3, #10]
 8016d10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016d12:	1ad3      	subs	r3, r2, r3
 8016d14:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	895b      	ldrh	r3, [r3, #10]
 8016d1a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016d1c:	429a      	cmp	r2, r3
 8016d1e:	d906      	bls.n	8016d2e <ip4_frag+0x10e>
 8016d20:	4b5c      	ldr	r3, [pc, #368]	; (8016e94 <ip4_frag+0x274>)
 8016d22:	f240 322d 	movw	r2, #813	; 0x32d
 8016d26:	495f      	ldr	r1, [pc, #380]	; (8016ea4 <ip4_frag+0x284>)
 8016d28:	485c      	ldr	r0, [pc, #368]	; (8016e9c <ip4_frag+0x27c>)
 8016d2a:	f001 f9f7 	bl	801811c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016d2e:	8bfa      	ldrh	r2, [r7, #30]
 8016d30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016d34:	4293      	cmp	r3, r2
 8016d36:	bf28      	it	cs
 8016d38:	4613      	movcs	r3, r2
 8016d3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016d3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d105      	bne.n	8016d52 <ip4_frag+0x132>
        poff = 0;
 8016d46:	2300      	movs	r3, #0
 8016d48:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	60fb      	str	r3, [r7, #12]
        continue;
 8016d50:	e041      	b.n	8016dd6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016d52:	f7ff ff0d 	bl	8016b70 <ip_frag_alloc_pbuf_custom_ref>
 8016d56:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016d58:	69bb      	ldr	r3, [r7, #24]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d103      	bne.n	8016d66 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d60:	f7f7 f962 	bl	800e028 <pbuf_free>
        goto memerr;
 8016d64:	e08f      	b.n	8016e86 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016d66:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016d6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016d6e:	4413      	add	r3, r2
 8016d70:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016d74:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016d78:	9201      	str	r2, [sp, #4]
 8016d7a:	9300      	str	r3, [sp, #0]
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	2241      	movs	r2, #65	; 0x41
 8016d80:	2000      	movs	r0, #0
 8016d82:	f7f6 ff97 	bl	800dcb4 <pbuf_alloced_custom>
 8016d86:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016d88:	697b      	ldr	r3, [r7, #20]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d106      	bne.n	8016d9c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016d8e:	69b8      	ldr	r0, [r7, #24]
 8016d90:	f7ff fef6 	bl	8016b80 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016d94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d96:	f7f7 f947 	bl	800e028 <pbuf_free>
        goto memerr;
 8016d9a:	e074      	b.n	8016e86 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016d9c:	68f8      	ldr	r0, [r7, #12]
 8016d9e:	f7f7 f9e3 	bl	800e168 <pbuf_ref>
      pcr->original = p;
 8016da2:	69bb      	ldr	r3, [r7, #24]
 8016da4:	68fa      	ldr	r2, [r7, #12]
 8016da6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016da8:	69bb      	ldr	r3, [r7, #24]
 8016daa:	4a3f      	ldr	r2, [pc, #252]	; (8016ea8 <ip4_frag+0x288>)
 8016dac:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016dae:	6979      	ldr	r1, [r7, #20]
 8016db0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016db2:	f7f7 f9fb 	bl	800e1ac <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016db6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016dba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016dbe:	1ad3      	subs	r3, r2, r3
 8016dc0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016dc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d004      	beq.n	8016dd6 <ip4_frag+0x1b6>
        poff = 0;
 8016dcc:	2300      	movs	r3, #0
 8016dce:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016dd6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d196      	bne.n	8016d0c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016dde:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016de0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016de4:	4413      	add	r3, r2
 8016de6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016de8:	68bb      	ldr	r3, [r7, #8]
 8016dea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016dec:	f1a3 0213 	sub.w	r2, r3, #19
 8016df0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016df4:	429a      	cmp	r2, r3
 8016df6:	bfcc      	ite	gt
 8016df8:	2301      	movgt	r3, #1
 8016dfa:	2300      	movle	r3, #0
 8016dfc:	b2db      	uxtb	r3, r3
 8016dfe:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016e00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016e04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016e08:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016e0a:	6a3b      	ldr	r3, [r7, #32]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d002      	beq.n	8016e16 <ip4_frag+0x1f6>
 8016e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d003      	beq.n	8016e1e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016e16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016e18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016e1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016e1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016e20:	4618      	mov	r0, r3
 8016e22:	f7f5 fda4 	bl	800c96e <lwip_htons>
 8016e26:	4603      	mov	r3, r0
 8016e28:	461a      	mov	r2, r3
 8016e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e2c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016e2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016e30:	3314      	adds	r3, #20
 8016e32:	b29b      	uxth	r3, r3
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7f5 fd9a 	bl	800c96e <lwip_htons>
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	461a      	mov	r2, r3
 8016e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e40:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e44:	2200      	movs	r2, #0
 8016e46:	729a      	strb	r2, [r3, #10]
 8016e48:	2200      	movs	r2, #0
 8016e4a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016e4c:	68bb      	ldr	r3, [r7, #8]
 8016e4e:	695b      	ldr	r3, [r3, #20]
 8016e50:	687a      	ldr	r2, [r7, #4]
 8016e52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016e54:	68b8      	ldr	r0, [r7, #8]
 8016e56:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e5a:	f7f7 f8e5 	bl	800e028 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016e5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016e62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016e64:	1ad3      	subs	r3, r2, r3
 8016e66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016e6a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016e6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016e70:	4413      	add	r3, r2
 8016e72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016e76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	f47f af19 	bne.w	8016cb2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016e80:	2300      	movs	r3, #0
 8016e82:	e002      	b.n	8016e8a <ip4_frag+0x26a>
      goto memerr;
 8016e84:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016e86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	3748      	adds	r7, #72	; 0x48
 8016e8e:	46bd      	mov	sp, r7
 8016e90:	bd80      	pop	{r7, pc}
 8016e92:	bf00      	nop
 8016e94:	0801b6e4 	.word	0x0801b6e4
 8016e98:	0801b8c0 	.word	0x0801b8c0
 8016e9c:	0801b72c 	.word	0x0801b72c
 8016ea0:	0801b8dc 	.word	0x0801b8dc
 8016ea4:	0801b8fc 	.word	0x0801b8fc
 8016ea8:	08016bb9 	.word	0x08016bb9

08016eac <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b086      	sub	sp, #24
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
 8016eb4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016eb6:	230e      	movs	r3, #14
 8016eb8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	895b      	ldrh	r3, [r3, #10]
 8016ebe:	2b0e      	cmp	r3, #14
 8016ec0:	d96e      	bls.n	8016fa0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	7bdb      	ldrb	r3, [r3, #15]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d106      	bne.n	8016ed8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016eca:	683b      	ldr	r3, [r7, #0]
 8016ecc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016ed0:	3301      	adds	r3, #1
 8016ed2:	b2da      	uxtb	r2, r3
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	685b      	ldr	r3, [r3, #4]
 8016edc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016ede:	693b      	ldr	r3, [r7, #16]
 8016ee0:	7b1a      	ldrb	r2, [r3, #12]
 8016ee2:	7b5b      	ldrb	r3, [r3, #13]
 8016ee4:	021b      	lsls	r3, r3, #8
 8016ee6:	4313      	orrs	r3, r2
 8016ee8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016eea:	693b      	ldr	r3, [r7, #16]
 8016eec:	781b      	ldrb	r3, [r3, #0]
 8016eee:	f003 0301 	and.w	r3, r3, #1
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d023      	beq.n	8016f3e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016ef6:	693b      	ldr	r3, [r7, #16]
 8016ef8:	781b      	ldrb	r3, [r3, #0]
 8016efa:	2b01      	cmp	r3, #1
 8016efc:	d10f      	bne.n	8016f1e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016efe:	693b      	ldr	r3, [r7, #16]
 8016f00:	785b      	ldrb	r3, [r3, #1]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d11b      	bne.n	8016f3e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016f06:	693b      	ldr	r3, [r7, #16]
 8016f08:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016f0a:	2b5e      	cmp	r3, #94	; 0x5e
 8016f0c:	d117      	bne.n	8016f3e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	7b5b      	ldrb	r3, [r3, #13]
 8016f12:	f043 0310 	orr.w	r3, r3, #16
 8016f16:	b2da      	uxtb	r2, r3
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	735a      	strb	r2, [r3, #13]
 8016f1c:	e00f      	b.n	8016f3e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016f1e:	693b      	ldr	r3, [r7, #16]
 8016f20:	2206      	movs	r2, #6
 8016f22:	4928      	ldr	r1, [pc, #160]	; (8016fc4 <ethernet_input+0x118>)
 8016f24:	4618      	mov	r0, r3
 8016f26:	f001 f94e 	bl	80181c6 <memcmp>
 8016f2a:	4603      	mov	r3, r0
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d106      	bne.n	8016f3e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	7b5b      	ldrb	r3, [r3, #13]
 8016f34:	f043 0308 	orr.w	r3, r3, #8
 8016f38:	b2da      	uxtb	r2, r3
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016f3e:	89fb      	ldrh	r3, [r7, #14]
 8016f40:	2b08      	cmp	r3, #8
 8016f42:	d003      	beq.n	8016f4c <ethernet_input+0xa0>
 8016f44:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016f48:	d014      	beq.n	8016f74 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016f4a:	e032      	b.n	8016fb2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016f52:	f003 0308 	and.w	r3, r3, #8
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d024      	beq.n	8016fa4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016f5a:	8afb      	ldrh	r3, [r7, #22]
 8016f5c:	4619      	mov	r1, r3
 8016f5e:	6878      	ldr	r0, [r7, #4]
 8016f60:	f7f6 ffdc 	bl	800df1c <pbuf_remove_header>
 8016f64:	4603      	mov	r3, r0
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d11e      	bne.n	8016fa8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016f6a:	6839      	ldr	r1, [r7, #0]
 8016f6c:	6878      	ldr	r0, [r7, #4]
 8016f6e:	f7fe ff21 	bl	8015db4 <ip4_input>
      break;
 8016f72:	e013      	b.n	8016f9c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016f74:	683b      	ldr	r3, [r7, #0]
 8016f76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016f7a:	f003 0308 	and.w	r3, r3, #8
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d014      	beq.n	8016fac <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016f82:	8afb      	ldrh	r3, [r7, #22]
 8016f84:	4619      	mov	r1, r3
 8016f86:	6878      	ldr	r0, [r7, #4]
 8016f88:	f7f6 ffc8 	bl	800df1c <pbuf_remove_header>
 8016f8c:	4603      	mov	r3, r0
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d10e      	bne.n	8016fb0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016f92:	6839      	ldr	r1, [r7, #0]
 8016f94:	6878      	ldr	r0, [r7, #4]
 8016f96:	f7fe f8c1 	bl	801511c <etharp_input>
      break;
 8016f9a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	e00c      	b.n	8016fba <ethernet_input+0x10e>
    goto free_and_return;
 8016fa0:	bf00      	nop
 8016fa2:	e006      	b.n	8016fb2 <ethernet_input+0x106>
        goto free_and_return;
 8016fa4:	bf00      	nop
 8016fa6:	e004      	b.n	8016fb2 <ethernet_input+0x106>
        goto free_and_return;
 8016fa8:	bf00      	nop
 8016faa:	e002      	b.n	8016fb2 <ethernet_input+0x106>
        goto free_and_return;
 8016fac:	bf00      	nop
 8016fae:	e000      	b.n	8016fb2 <ethernet_input+0x106>
        goto free_and_return;
 8016fb0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016fb2:	6878      	ldr	r0, [r7, #4]
 8016fb4:	f7f7 f838 	bl	800e028 <pbuf_free>
  return ERR_OK;
 8016fb8:	2300      	movs	r3, #0
}
 8016fba:	4618      	mov	r0, r3
 8016fbc:	3718      	adds	r7, #24
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}
 8016fc2:	bf00      	nop
 8016fc4:	0801bb18 	.word	0x0801bb18

08016fc8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b086      	sub	sp, #24
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	60f8      	str	r0, [r7, #12]
 8016fd0:	60b9      	str	r1, [r7, #8]
 8016fd2:	607a      	str	r2, [r7, #4]
 8016fd4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016fd6:	8c3b      	ldrh	r3, [r7, #32]
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7f5 fcc8 	bl	800c96e <lwip_htons>
 8016fde:	4603      	mov	r3, r0
 8016fe0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016fe2:	210e      	movs	r1, #14
 8016fe4:	68b8      	ldr	r0, [r7, #8]
 8016fe6:	f7f6 ff89 	bl	800defc <pbuf_add_header>
 8016fea:	4603      	mov	r3, r0
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d125      	bne.n	801703c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016ff0:	68bb      	ldr	r3, [r7, #8]
 8016ff2:	685b      	ldr	r3, [r3, #4]
 8016ff4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016ff6:	693b      	ldr	r3, [r7, #16]
 8016ff8:	8afa      	ldrh	r2, [r7, #22]
 8016ffa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016ffc:	693b      	ldr	r3, [r7, #16]
 8016ffe:	2206      	movs	r2, #6
 8017000:	6839      	ldr	r1, [r7, #0]
 8017002:	4618      	mov	r0, r3
 8017004:	f001 f97d 	bl	8018302 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017008:	693b      	ldr	r3, [r7, #16]
 801700a:	3306      	adds	r3, #6
 801700c:	2206      	movs	r2, #6
 801700e:	6879      	ldr	r1, [r7, #4]
 8017010:	4618      	mov	r0, r3
 8017012:	f001 f976 	bl	8018302 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801701c:	2b06      	cmp	r3, #6
 801701e:	d006      	beq.n	801702e <ethernet_output+0x66>
 8017020:	4b0a      	ldr	r3, [pc, #40]	; (801704c <ethernet_output+0x84>)
 8017022:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017026:	490a      	ldr	r1, [pc, #40]	; (8017050 <ethernet_output+0x88>)
 8017028:	480a      	ldr	r0, [pc, #40]	; (8017054 <ethernet_output+0x8c>)
 801702a:	f001 f877 	bl	801811c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	699b      	ldr	r3, [r3, #24]
 8017032:	68b9      	ldr	r1, [r7, #8]
 8017034:	68f8      	ldr	r0, [r7, #12]
 8017036:	4798      	blx	r3
 8017038:	4603      	mov	r3, r0
 801703a:	e002      	b.n	8017042 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801703c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801703e:	f06f 0301 	mvn.w	r3, #1
}
 8017042:	4618      	mov	r0, r3
 8017044:	3718      	adds	r7, #24
 8017046:	46bd      	mov	sp, r7
 8017048:	bd80      	pop	{r7, pc}
 801704a:	bf00      	nop
 801704c:	0801b90c 	.word	0x0801b90c
 8017050:	0801b944 	.word	0x0801b944
 8017054:	0801b978 	.word	0x0801b978

08017058 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017058:	b580      	push	{r7, lr}
 801705a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801705c:	2201      	movs	r2, #1
 801705e:	4924      	ldr	r1, [pc, #144]	; (80170f0 <MX_USB_DEVICE_Init+0x98>)
 8017060:	4824      	ldr	r0, [pc, #144]	; (80170f4 <MX_USB_DEVICE_Init+0x9c>)
 8017062:	f7f4 f930 	bl	800b2c6 <USBD_Init>
 8017066:	4603      	mov	r3, r0
 8017068:	2b00      	cmp	r3, #0
 801706a:	d001      	beq.n	8017070 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801706c:	f7e9 fbd0 	bl	8000810 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_MSC) != USBD_OK)
 8017070:	4921      	ldr	r1, [pc, #132]	; (80170f8 <MX_USB_DEVICE_Init+0xa0>)
 8017072:	4820      	ldr	r0, [pc, #128]	; (80170f4 <MX_USB_DEVICE_Init+0x9c>)
 8017074:	f7f4 f957 	bl	800b326 <USBD_RegisterClass>
 8017078:	4603      	mov	r3, r0
 801707a:	2b00      	cmp	r3, #0
 801707c:	d001      	beq.n	8017082 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801707e:	f7e9 fbc7 	bl	8000810 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceHS, &USBD_Storage_Interface_fops_HS) != USBD_OK)
 8017082:	491e      	ldr	r1, [pc, #120]	; (80170fc <MX_USB_DEVICE_Init+0xa4>)
 8017084:	481b      	ldr	r0, [pc, #108]	; (80170f4 <MX_USB_DEVICE_Init+0x9c>)
 8017086:	f7f2 fbd3 	bl	8009830 <USBD_MSC_RegisterStorage>
 801708a:	4603      	mov	r3, r0
 801708c:	2b00      	cmp	r3, #0
 801708e:	d001      	beq.n	8017094 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017090:	f7e9 fbbe 	bl	8000810 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8017094:	4817      	ldr	r0, [pc, #92]	; (80170f4 <MX_USB_DEVICE_Init+0x9c>)
 8017096:	f7f4 f97c 	bl	800b392 <USBD_Start>
 801709a:	4603      	mov	r3, r0
 801709c:	2b00      	cmp	r3, #0
 801709e:	d001      	beq.n	80170a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80170a0:	f7e9 fbb6 	bl	8000810 <Error_Handler>
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80170a4:	2200      	movs	r2, #0
 80170a6:	4916      	ldr	r1, [pc, #88]	; (8017100 <MX_USB_DEVICE_Init+0xa8>)
 80170a8:	4816      	ldr	r0, [pc, #88]	; (8017104 <MX_USB_DEVICE_Init+0xac>)
 80170aa:	f7f4 f90c 	bl	800b2c6 <USBD_Init>
 80170ae:	4603      	mov	r3, r0
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d001      	beq.n	80170b8 <MX_USB_DEVICE_Init+0x60>
  {
    Error_Handler();
 80170b4:	f7e9 fbac 	bl	8000810 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80170b8:	4913      	ldr	r1, [pc, #76]	; (8017108 <MX_USB_DEVICE_Init+0xb0>)
 80170ba:	4812      	ldr	r0, [pc, #72]	; (8017104 <MX_USB_DEVICE_Init+0xac>)
 80170bc:	f7f4 f933 	bl	800b326 <USBD_RegisterClass>
 80170c0:	4603      	mov	r3, r0
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d001      	beq.n	80170ca <MX_USB_DEVICE_Init+0x72>
  {
    Error_Handler();
 80170c6:	f7e9 fba3 	bl	8000810 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80170ca:	4910      	ldr	r1, [pc, #64]	; (801710c <MX_USB_DEVICE_Init+0xb4>)
 80170cc:	480d      	ldr	r0, [pc, #52]	; (8017104 <MX_USB_DEVICE_Init+0xac>)
 80170ce:	f7f2 f887 	bl	80091e0 <USBD_CDC_RegisterInterface>
 80170d2:	4603      	mov	r3, r0
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d001      	beq.n	80170dc <MX_USB_DEVICE_Init+0x84>
  {
    Error_Handler();
 80170d8:	f7e9 fb9a 	bl	8000810 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80170dc:	4809      	ldr	r0, [pc, #36]	; (8017104 <MX_USB_DEVICE_Init+0xac>)
 80170de:	f7f4 f958 	bl	800b392 <USBD_Start>
 80170e2:	4603      	mov	r3, r0
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d001      	beq.n	80170ec <MX_USB_DEVICE_Init+0x94>
  {
    Error_Handler();
 80170e8:	f7e9 fb92 	bl	8000810 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80170ec:	bf00      	nop
 80170ee:	bd80      	pop	{r7, pc}
 80170f0:	20000190 	.word	0x20000190
 80170f4:	2000829c 	.word	0x2000829c
 80170f8:	200000c0 	.word	0x200000c0
 80170fc:	200001e0 	.word	0x200001e0
 8017100:	20000160 	.word	0x20000160
 8017104:	20008578 	.word	0x20008578
 8017108:	20000040 	.word	0x20000040
 801710c:	2000014c 	.word	0x2000014c

08017110 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017110:	b580      	push	{r7, lr}
 8017112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017114:	2200      	movs	r2, #0
 8017116:	4905      	ldr	r1, [pc, #20]	; (801712c <CDC_Init_FS+0x1c>)
 8017118:	4805      	ldr	r0, [pc, #20]	; (8017130 <CDC_Init_FS+0x20>)
 801711a:	f7f2 f87b 	bl	8009214 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801711e:	4905      	ldr	r1, [pc, #20]	; (8017134 <CDC_Init_FS+0x24>)
 8017120:	4803      	ldr	r0, [pc, #12]	; (8017130 <CDC_Init_FS+0x20>)
 8017122:	f7f2 f899 	bl	8009258 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017126:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017128:	4618      	mov	r0, r3
 801712a:	bd80      	pop	{r7, pc}
 801712c:	20009054 	.word	0x20009054
 8017130:	20008578 	.word	0x20008578
 8017134:	20008854 	.word	0x20008854

08017138 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017138:	b480      	push	{r7}
 801713a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801713c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801713e:	4618      	mov	r0, r3
 8017140:	46bd      	mov	sp, r7
 8017142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017146:	4770      	bx	lr

08017148 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017148:	b480      	push	{r7}
 801714a:	b083      	sub	sp, #12
 801714c:	af00      	add	r7, sp, #0
 801714e:	4603      	mov	r3, r0
 8017150:	6039      	str	r1, [r7, #0]
 8017152:	71fb      	strb	r3, [r7, #7]
 8017154:	4613      	mov	r3, r2
 8017156:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017158:	79fb      	ldrb	r3, [r7, #7]
 801715a:	2b23      	cmp	r3, #35	; 0x23
 801715c:	d84a      	bhi.n	80171f4 <CDC_Control_FS+0xac>
 801715e:	a201      	add	r2, pc, #4	; (adr r2, 8017164 <CDC_Control_FS+0x1c>)
 8017160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017164:	080171f5 	.word	0x080171f5
 8017168:	080171f5 	.word	0x080171f5
 801716c:	080171f5 	.word	0x080171f5
 8017170:	080171f5 	.word	0x080171f5
 8017174:	080171f5 	.word	0x080171f5
 8017178:	080171f5 	.word	0x080171f5
 801717c:	080171f5 	.word	0x080171f5
 8017180:	080171f5 	.word	0x080171f5
 8017184:	080171f5 	.word	0x080171f5
 8017188:	080171f5 	.word	0x080171f5
 801718c:	080171f5 	.word	0x080171f5
 8017190:	080171f5 	.word	0x080171f5
 8017194:	080171f5 	.word	0x080171f5
 8017198:	080171f5 	.word	0x080171f5
 801719c:	080171f5 	.word	0x080171f5
 80171a0:	080171f5 	.word	0x080171f5
 80171a4:	080171f5 	.word	0x080171f5
 80171a8:	080171f5 	.word	0x080171f5
 80171ac:	080171f5 	.word	0x080171f5
 80171b0:	080171f5 	.word	0x080171f5
 80171b4:	080171f5 	.word	0x080171f5
 80171b8:	080171f5 	.word	0x080171f5
 80171bc:	080171f5 	.word	0x080171f5
 80171c0:	080171f5 	.word	0x080171f5
 80171c4:	080171f5 	.word	0x080171f5
 80171c8:	080171f5 	.word	0x080171f5
 80171cc:	080171f5 	.word	0x080171f5
 80171d0:	080171f5 	.word	0x080171f5
 80171d4:	080171f5 	.word	0x080171f5
 80171d8:	080171f5 	.word	0x080171f5
 80171dc:	080171f5 	.word	0x080171f5
 80171e0:	080171f5 	.word	0x080171f5
 80171e4:	080171f5 	.word	0x080171f5
 80171e8:	080171f5 	.word	0x080171f5
 80171ec:	080171f5 	.word	0x080171f5
 80171f0:	080171f5 	.word	0x080171f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80171f4:	bf00      	nop
  }

  return (USBD_OK);
 80171f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80171f8:	4618      	mov	r0, r3
 80171fa:	370c      	adds	r7, #12
 80171fc:	46bd      	mov	sp, r7
 80171fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017202:	4770      	bx	lr

08017204 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017204:	b580      	push	{r7, lr}
 8017206:	b082      	sub	sp, #8
 8017208:	af00      	add	r7, sp, #0
 801720a:	6078      	str	r0, [r7, #4]
 801720c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801720e:	6879      	ldr	r1, [r7, #4]
 8017210:	4805      	ldr	r0, [pc, #20]	; (8017228 <CDC_Receive_FS+0x24>)
 8017212:	f7f2 f821 	bl	8009258 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017216:	4804      	ldr	r0, [pc, #16]	; (8017228 <CDC_Receive_FS+0x24>)
 8017218:	f7f2 f83c 	bl	8009294 <USBD_CDC_ReceivePacket>
  //memcpy(UserRxBufferFS, Buf, *Len);
#ifdef COM_PORT
  wr = 1;
  byteNum++;
#endif
  return (USBD_OK);
 801721c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801721e:	4618      	mov	r0, r3
 8017220:	3708      	adds	r7, #8
 8017222:	46bd      	mov	sp, r7
 8017224:	bd80      	pop	{r7, pc}
 8017226:	bf00      	nop
 8017228:	20008578 	.word	0x20008578

0801722c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801722c:	b480      	push	{r7}
 801722e:	b087      	sub	sp, #28
 8017230:	af00      	add	r7, sp, #0
 8017232:	60f8      	str	r0, [r7, #12]
 8017234:	60b9      	str	r1, [r7, #8]
 8017236:	4613      	mov	r3, r2
 8017238:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801723a:	2300      	movs	r3, #0
 801723c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801723e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017242:	4618      	mov	r0, r3
 8017244:	371c      	adds	r7, #28
 8017246:	46bd      	mov	sp, r7
 8017248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801724c:	4770      	bx	lr
	...

08017250 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017250:	b480      	push	{r7}
 8017252:	b083      	sub	sp, #12
 8017254:	af00      	add	r7, sp, #0
 8017256:	4603      	mov	r3, r0
 8017258:	6039      	str	r1, [r7, #0]
 801725a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801725c:	683b      	ldr	r3, [r7, #0]
 801725e:	2212      	movs	r2, #18
 8017260:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8017262:	4b03      	ldr	r3, [pc, #12]	; (8017270 <USBD_HS_DeviceDescriptor+0x20>)
}
 8017264:	4618      	mov	r0, r3
 8017266:	370c      	adds	r7, #12
 8017268:	46bd      	mov	sp, r7
 801726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801726e:	4770      	bx	lr
 8017270:	200001ac 	.word	0x200001ac

08017274 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017274:	b480      	push	{r7}
 8017276:	b083      	sub	sp, #12
 8017278:	af00      	add	r7, sp, #0
 801727a:	4603      	mov	r3, r0
 801727c:	6039      	str	r1, [r7, #0]
 801727e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017280:	683b      	ldr	r3, [r7, #0]
 8017282:	2204      	movs	r2, #4
 8017284:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017286:	4b03      	ldr	r3, [pc, #12]	; (8017294 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8017288:	4618      	mov	r0, r3
 801728a:	370c      	adds	r7, #12
 801728c:	46bd      	mov	sp, r7
 801728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017292:	4770      	bx	lr
 8017294:	200001c0 	.word	0x200001c0

08017298 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b082      	sub	sp, #8
 801729c:	af00      	add	r7, sp, #0
 801729e:	4603      	mov	r3, r0
 80172a0:	6039      	str	r1, [r7, #0]
 80172a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80172a4:	79fb      	ldrb	r3, [r7, #7]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d105      	bne.n	80172b6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80172aa:	683a      	ldr	r2, [r7, #0]
 80172ac:	4907      	ldr	r1, [pc, #28]	; (80172cc <USBD_HS_ProductStrDescriptor+0x34>)
 80172ae:	4808      	ldr	r0, [pc, #32]	; (80172d0 <USBD_HS_ProductStrDescriptor+0x38>)
 80172b0:	f7f5 fa22 	bl	800c6f8 <USBD_GetString>
 80172b4:	e004      	b.n	80172c0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80172b6:	683a      	ldr	r2, [r7, #0]
 80172b8:	4904      	ldr	r1, [pc, #16]	; (80172cc <USBD_HS_ProductStrDescriptor+0x34>)
 80172ba:	4805      	ldr	r0, [pc, #20]	; (80172d0 <USBD_HS_ProductStrDescriptor+0x38>)
 80172bc:	f7f5 fa1c 	bl	800c6f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80172c0:	4b02      	ldr	r3, [pc, #8]	; (80172cc <USBD_HS_ProductStrDescriptor+0x34>)
}
 80172c2:	4618      	mov	r0, r3
 80172c4:	3708      	adds	r7, #8
 80172c6:	46bd      	mov	sp, r7
 80172c8:	bd80      	pop	{r7, pc}
 80172ca:	bf00      	nop
 80172cc:	20009854 	.word	0x20009854
 80172d0:	0801b9a0 	.word	0x0801b9a0

080172d4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b082      	sub	sp, #8
 80172d8:	af00      	add	r7, sp, #0
 80172da:	4603      	mov	r3, r0
 80172dc:	6039      	str	r1, [r7, #0]
 80172de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80172e0:	683a      	ldr	r2, [r7, #0]
 80172e2:	4904      	ldr	r1, [pc, #16]	; (80172f4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80172e4:	4804      	ldr	r0, [pc, #16]	; (80172f8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80172e6:	f7f5 fa07 	bl	800c6f8 <USBD_GetString>
  return USBD_StrDesc;
 80172ea:	4b02      	ldr	r3, [pc, #8]	; (80172f4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80172ec:	4618      	mov	r0, r3
 80172ee:	3708      	adds	r7, #8
 80172f0:	46bd      	mov	sp, r7
 80172f2:	bd80      	pop	{r7, pc}
 80172f4:	20009854 	.word	0x20009854
 80172f8:	0801b9b4 	.word	0x0801b9b4

080172fc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b082      	sub	sp, #8
 8017300:	af00      	add	r7, sp, #0
 8017302:	4603      	mov	r3, r0
 8017304:	6039      	str	r1, [r7, #0]
 8017306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017308:	683b      	ldr	r3, [r7, #0]
 801730a:	221a      	movs	r2, #26
 801730c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801730e:	f000 f8e7 	bl	80174e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8017312:	4b02      	ldr	r3, [pc, #8]	; (801731c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8017314:	4618      	mov	r0, r3
 8017316:	3708      	adds	r7, #8
 8017318:	46bd      	mov	sp, r7
 801731a:	bd80      	pop	{r7, pc}
 801731c:	200001c4 	.word	0x200001c4

08017320 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017320:	b580      	push	{r7, lr}
 8017322:	b082      	sub	sp, #8
 8017324:	af00      	add	r7, sp, #0
 8017326:	4603      	mov	r3, r0
 8017328:	6039      	str	r1, [r7, #0]
 801732a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801732c:	79fb      	ldrb	r3, [r7, #7]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d105      	bne.n	801733e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8017332:	683a      	ldr	r2, [r7, #0]
 8017334:	4907      	ldr	r1, [pc, #28]	; (8017354 <USBD_HS_ConfigStrDescriptor+0x34>)
 8017336:	4808      	ldr	r0, [pc, #32]	; (8017358 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017338:	f7f5 f9de 	bl	800c6f8 <USBD_GetString>
 801733c:	e004      	b.n	8017348 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801733e:	683a      	ldr	r2, [r7, #0]
 8017340:	4904      	ldr	r1, [pc, #16]	; (8017354 <USBD_HS_ConfigStrDescriptor+0x34>)
 8017342:	4805      	ldr	r0, [pc, #20]	; (8017358 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017344:	f7f5 f9d8 	bl	800c6f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017348:	4b02      	ldr	r3, [pc, #8]	; (8017354 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801734a:	4618      	mov	r0, r3
 801734c:	3708      	adds	r7, #8
 801734e:	46bd      	mov	sp, r7
 8017350:	bd80      	pop	{r7, pc}
 8017352:	bf00      	nop
 8017354:	20009854 	.word	0x20009854
 8017358:	0801b9c8 	.word	0x0801b9c8

0801735c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b082      	sub	sp, #8
 8017360:	af00      	add	r7, sp, #0
 8017362:	4603      	mov	r3, r0
 8017364:	6039      	str	r1, [r7, #0]
 8017366:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017368:	79fb      	ldrb	r3, [r7, #7]
 801736a:	2b00      	cmp	r3, #0
 801736c:	d105      	bne.n	801737a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801736e:	683a      	ldr	r2, [r7, #0]
 8017370:	4907      	ldr	r1, [pc, #28]	; (8017390 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017372:	4808      	ldr	r0, [pc, #32]	; (8017394 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017374:	f7f5 f9c0 	bl	800c6f8 <USBD_GetString>
 8017378:	e004      	b.n	8017384 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801737a:	683a      	ldr	r2, [r7, #0]
 801737c:	4904      	ldr	r1, [pc, #16]	; (8017390 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801737e:	4805      	ldr	r0, [pc, #20]	; (8017394 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017380:	f7f5 f9ba 	bl	800c6f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017384:	4b02      	ldr	r3, [pc, #8]	; (8017390 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8017386:	4618      	mov	r0, r3
 8017388:	3708      	adds	r7, #8
 801738a:	46bd      	mov	sp, r7
 801738c:	bd80      	pop	{r7, pc}
 801738e:	bf00      	nop
 8017390:	20009854 	.word	0x20009854
 8017394:	0801b9d4 	.word	0x0801b9d4

08017398 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017398:	b480      	push	{r7}
 801739a:	b083      	sub	sp, #12
 801739c:	af00      	add	r7, sp, #0
 801739e:	4603      	mov	r3, r0
 80173a0:	6039      	str	r1, [r7, #0]
 80173a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80173a4:	683b      	ldr	r3, [r7, #0]
 80173a6:	2212      	movs	r2, #18
 80173a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80173aa:	4b03      	ldr	r3, [pc, #12]	; (80173b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80173ac:	4618      	mov	r0, r3
 80173ae:	370c      	adds	r7, #12
 80173b0:	46bd      	mov	sp, r7
 80173b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b6:	4770      	bx	lr
 80173b8:	2000017c 	.word	0x2000017c

080173bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173bc:	b480      	push	{r7}
 80173be:	b083      	sub	sp, #12
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	4603      	mov	r3, r0
 80173c4:	6039      	str	r1, [r7, #0]
 80173c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80173c8:	683b      	ldr	r3, [r7, #0]
 80173ca:	2204      	movs	r2, #4
 80173cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80173ce:	4b03      	ldr	r3, [pc, #12]	; (80173dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80173d0:	4618      	mov	r0, r3
 80173d2:	370c      	adds	r7, #12
 80173d4:	46bd      	mov	sp, r7
 80173d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173da:	4770      	bx	lr
 80173dc:	200001c0 	.word	0x200001c0

080173e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b082      	sub	sp, #8
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	4603      	mov	r3, r0
 80173e8:	6039      	str	r1, [r7, #0]
 80173ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80173ec:	79fb      	ldrb	r3, [r7, #7]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d105      	bne.n	80173fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80173f2:	683a      	ldr	r2, [r7, #0]
 80173f4:	4907      	ldr	r1, [pc, #28]	; (8017414 <USBD_FS_ProductStrDescriptor+0x34>)
 80173f6:	4808      	ldr	r0, [pc, #32]	; (8017418 <USBD_FS_ProductStrDescriptor+0x38>)
 80173f8:	f7f5 f97e 	bl	800c6f8 <USBD_GetString>
 80173fc:	e004      	b.n	8017408 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80173fe:	683a      	ldr	r2, [r7, #0]
 8017400:	4904      	ldr	r1, [pc, #16]	; (8017414 <USBD_FS_ProductStrDescriptor+0x34>)
 8017402:	4805      	ldr	r0, [pc, #20]	; (8017418 <USBD_FS_ProductStrDescriptor+0x38>)
 8017404:	f7f5 f978 	bl	800c6f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017408:	4b02      	ldr	r3, [pc, #8]	; (8017414 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801740a:	4618      	mov	r0, r3
 801740c:	3708      	adds	r7, #8
 801740e:	46bd      	mov	sp, r7
 8017410:	bd80      	pop	{r7, pc}
 8017412:	bf00      	nop
 8017414:	20009854 	.word	0x20009854
 8017418:	0801b9e4 	.word	0x0801b9e4

0801741c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801741c:	b580      	push	{r7, lr}
 801741e:	b082      	sub	sp, #8
 8017420:	af00      	add	r7, sp, #0
 8017422:	4603      	mov	r3, r0
 8017424:	6039      	str	r1, [r7, #0]
 8017426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017428:	683a      	ldr	r2, [r7, #0]
 801742a:	4904      	ldr	r1, [pc, #16]	; (801743c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801742c:	4804      	ldr	r0, [pc, #16]	; (8017440 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801742e:	f7f5 f963 	bl	800c6f8 <USBD_GetString>
  return USBD_StrDesc;
 8017432:	4b02      	ldr	r3, [pc, #8]	; (801743c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017434:	4618      	mov	r0, r3
 8017436:	3708      	adds	r7, #8
 8017438:	46bd      	mov	sp, r7
 801743a:	bd80      	pop	{r7, pc}
 801743c:	20009854 	.word	0x20009854
 8017440:	0801b9b4 	.word	0x0801b9b4

08017444 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b082      	sub	sp, #8
 8017448:	af00      	add	r7, sp, #0
 801744a:	4603      	mov	r3, r0
 801744c:	6039      	str	r1, [r7, #0]
 801744e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017450:	683b      	ldr	r3, [r7, #0]
 8017452:	221a      	movs	r2, #26
 8017454:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017456:	f000 f843 	bl	80174e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801745a:	4b02      	ldr	r3, [pc, #8]	; (8017464 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801745c:	4618      	mov	r0, r3
 801745e:	3708      	adds	r7, #8
 8017460:	46bd      	mov	sp, r7
 8017462:	bd80      	pop	{r7, pc}
 8017464:	200001c4 	.word	0x200001c4

08017468 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017468:	b580      	push	{r7, lr}
 801746a:	b082      	sub	sp, #8
 801746c:	af00      	add	r7, sp, #0
 801746e:	4603      	mov	r3, r0
 8017470:	6039      	str	r1, [r7, #0]
 8017472:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017474:	79fb      	ldrb	r3, [r7, #7]
 8017476:	2b00      	cmp	r3, #0
 8017478:	d105      	bne.n	8017486 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801747a:	683a      	ldr	r2, [r7, #0]
 801747c:	4907      	ldr	r1, [pc, #28]	; (801749c <USBD_FS_ConfigStrDescriptor+0x34>)
 801747e:	4808      	ldr	r0, [pc, #32]	; (80174a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017480:	f7f5 f93a 	bl	800c6f8 <USBD_GetString>
 8017484:	e004      	b.n	8017490 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017486:	683a      	ldr	r2, [r7, #0]
 8017488:	4904      	ldr	r1, [pc, #16]	; (801749c <USBD_FS_ConfigStrDescriptor+0x34>)
 801748a:	4805      	ldr	r0, [pc, #20]	; (80174a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801748c:	f7f5 f934 	bl	800c6f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017490:	4b02      	ldr	r3, [pc, #8]	; (801749c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017492:	4618      	mov	r0, r3
 8017494:	3708      	adds	r7, #8
 8017496:	46bd      	mov	sp, r7
 8017498:	bd80      	pop	{r7, pc}
 801749a:	bf00      	nop
 801749c:	20009854 	.word	0x20009854
 80174a0:	0801b9fc 	.word	0x0801b9fc

080174a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b082      	sub	sp, #8
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	4603      	mov	r3, r0
 80174ac:	6039      	str	r1, [r7, #0]
 80174ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80174b0:	79fb      	ldrb	r3, [r7, #7]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d105      	bne.n	80174c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80174b6:	683a      	ldr	r2, [r7, #0]
 80174b8:	4907      	ldr	r1, [pc, #28]	; (80174d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80174ba:	4808      	ldr	r0, [pc, #32]	; (80174dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80174bc:	f7f5 f91c 	bl	800c6f8 <USBD_GetString>
 80174c0:	e004      	b.n	80174cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80174c2:	683a      	ldr	r2, [r7, #0]
 80174c4:	4904      	ldr	r1, [pc, #16]	; (80174d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80174c6:	4805      	ldr	r0, [pc, #20]	; (80174dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80174c8:	f7f5 f916 	bl	800c6f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80174cc:	4b02      	ldr	r3, [pc, #8]	; (80174d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80174ce:	4618      	mov	r0, r3
 80174d0:	3708      	adds	r7, #8
 80174d2:	46bd      	mov	sp, r7
 80174d4:	bd80      	pop	{r7, pc}
 80174d6:	bf00      	nop
 80174d8:	20009854 	.word	0x20009854
 80174dc:	0801ba08 	.word	0x0801ba08

080174e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b084      	sub	sp, #16
 80174e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80174e6:	4b0f      	ldr	r3, [pc, #60]	; (8017524 <Get_SerialNum+0x44>)
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80174ec:	4b0e      	ldr	r3, [pc, #56]	; (8017528 <Get_SerialNum+0x48>)
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80174f2:	4b0e      	ldr	r3, [pc, #56]	; (801752c <Get_SerialNum+0x4c>)
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80174f8:	68fa      	ldr	r2, [r7, #12]
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	4413      	add	r3, r2
 80174fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d009      	beq.n	801751a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017506:	2208      	movs	r2, #8
 8017508:	4909      	ldr	r1, [pc, #36]	; (8017530 <Get_SerialNum+0x50>)
 801750a:	68f8      	ldr	r0, [r7, #12]
 801750c:	f000 f814 	bl	8017538 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017510:	2204      	movs	r2, #4
 8017512:	4908      	ldr	r1, [pc, #32]	; (8017534 <Get_SerialNum+0x54>)
 8017514:	68b8      	ldr	r0, [r7, #8]
 8017516:	f000 f80f 	bl	8017538 <IntToUnicode>
  }
}
 801751a:	bf00      	nop
 801751c:	3710      	adds	r7, #16
 801751e:	46bd      	mov	sp, r7
 8017520:	bd80      	pop	{r7, pc}
 8017522:	bf00      	nop
 8017524:	1fff7a10 	.word	0x1fff7a10
 8017528:	1fff7a14 	.word	0x1fff7a14
 801752c:	1fff7a18 	.word	0x1fff7a18
 8017530:	200001c6 	.word	0x200001c6
 8017534:	200001d6 	.word	0x200001d6

08017538 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017538:	b480      	push	{r7}
 801753a:	b087      	sub	sp, #28
 801753c:	af00      	add	r7, sp, #0
 801753e:	60f8      	str	r0, [r7, #12]
 8017540:	60b9      	str	r1, [r7, #8]
 8017542:	4613      	mov	r3, r2
 8017544:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017546:	2300      	movs	r3, #0
 8017548:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801754a:	2300      	movs	r3, #0
 801754c:	75fb      	strb	r3, [r7, #23]
 801754e:	e027      	b.n	80175a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	0f1b      	lsrs	r3, r3, #28
 8017554:	2b09      	cmp	r3, #9
 8017556:	d80b      	bhi.n	8017570 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	0f1b      	lsrs	r3, r3, #28
 801755c:	b2da      	uxtb	r2, r3
 801755e:	7dfb      	ldrb	r3, [r7, #23]
 8017560:	005b      	lsls	r3, r3, #1
 8017562:	4619      	mov	r1, r3
 8017564:	68bb      	ldr	r3, [r7, #8]
 8017566:	440b      	add	r3, r1
 8017568:	3230      	adds	r2, #48	; 0x30
 801756a:	b2d2      	uxtb	r2, r2
 801756c:	701a      	strb	r2, [r3, #0]
 801756e:	e00a      	b.n	8017586 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	0f1b      	lsrs	r3, r3, #28
 8017574:	b2da      	uxtb	r2, r3
 8017576:	7dfb      	ldrb	r3, [r7, #23]
 8017578:	005b      	lsls	r3, r3, #1
 801757a:	4619      	mov	r1, r3
 801757c:	68bb      	ldr	r3, [r7, #8]
 801757e:	440b      	add	r3, r1
 8017580:	3237      	adds	r2, #55	; 0x37
 8017582:	b2d2      	uxtb	r2, r2
 8017584:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	011b      	lsls	r3, r3, #4
 801758a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801758c:	7dfb      	ldrb	r3, [r7, #23]
 801758e:	005b      	lsls	r3, r3, #1
 8017590:	3301      	adds	r3, #1
 8017592:	68ba      	ldr	r2, [r7, #8]
 8017594:	4413      	add	r3, r2
 8017596:	2200      	movs	r2, #0
 8017598:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801759a:	7dfb      	ldrb	r3, [r7, #23]
 801759c:	3301      	adds	r3, #1
 801759e:	75fb      	strb	r3, [r7, #23]
 80175a0:	7dfa      	ldrb	r2, [r7, #23]
 80175a2:	79fb      	ldrb	r3, [r7, #7]
 80175a4:	429a      	cmp	r2, r3
 80175a6:	d3d3      	bcc.n	8017550 <IntToUnicode+0x18>
  }
}
 80175a8:	bf00      	nop
 80175aa:	bf00      	nop
 80175ac:	371c      	adds	r7, #28
 80175ae:	46bd      	mov	sp, r7
 80175b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b4:	4770      	bx	lr

080175b6 <STORAGE_Init_HS>:
  * @brief  Initializes the storage unit (medium).
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_HS(uint8_t lun)
{
 80175b6:	b480      	push	{r7}
 80175b8:	b083      	sub	sp, #12
 80175ba:	af00      	add	r7, sp, #0
 80175bc:	4603      	mov	r3, r0
 80175be:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 9 */
  UNUSED(lun);

  return (USBD_OK);
 80175c0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80175c2:	4618      	mov	r0, r3
 80175c4:	370c      	adds	r7, #12
 80175c6:	46bd      	mov	sp, r7
 80175c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175cc:	4770      	bx	lr

080175ce <STORAGE_GetCapacity_HS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_HS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80175ce:	b480      	push	{r7}
 80175d0:	b085      	sub	sp, #20
 80175d2:	af00      	add	r7, sp, #0
 80175d4:	4603      	mov	r3, r0
 80175d6:	60b9      	str	r1, [r7, #8]
 80175d8:	607a      	str	r2, [r7, #4]
 80175da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 10 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 80175dc:	68bb      	ldr	r3, [r7, #8]
 80175de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80175e2:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80175ea:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80175ec:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80175ee:	4618      	mov	r0, r3
 80175f0:	3714      	adds	r7, #20
 80175f2:	46bd      	mov	sp, r7
 80175f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f8:	4770      	bx	lr

080175fa <STORAGE_IsReady_HS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_HS(uint8_t lun)
{
 80175fa:	b480      	push	{r7}
 80175fc:	b083      	sub	sp, #12
 80175fe:	af00      	add	r7, sp, #0
 8017600:	4603      	mov	r3, r0
 8017602:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */
  UNUSED(lun);

  return (USBD_OK);
 8017604:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8017606:	4618      	mov	r0, r3
 8017608:	370c      	adds	r7, #12
 801760a:	46bd      	mov	sp, r7
 801760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017610:	4770      	bx	lr

08017612 <STORAGE_IsWriteProtected_HS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_HS(uint8_t lun)
{
 8017612:	b480      	push	{r7}
 8017614:	b083      	sub	sp, #12
 8017616:	af00      	add	r7, sp, #0
 8017618:	4603      	mov	r3, r0
 801761a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  return (USBD_OK);
 801761c:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 801761e:	4618      	mov	r0, r3
 8017620:	370c      	adds	r7, #12
 8017622:	46bd      	mov	sp, r7
 8017624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017628:	4770      	bx	lr

0801762a <STORAGE_Read_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801762a:	b480      	push	{r7}
 801762c:	b085      	sub	sp, #20
 801762e:	af00      	add	r7, sp, #0
 8017630:	60b9      	str	r1, [r7, #8]
 8017632:	607a      	str	r2, [r7, #4]
 8017634:	461a      	mov	r2, r3
 8017636:	4603      	mov	r3, r0
 8017638:	73fb      	strb	r3, [r7, #15]
 801763a:	4613      	mov	r3, r2
 801763c:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 801763e:	2300      	movs	r3, #0
  /* USER CODE END 13 */
}
 8017640:	4618      	mov	r0, r3
 8017642:	3714      	adds	r7, #20
 8017644:	46bd      	mov	sp, r7
 8017646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801764a:	4770      	bx	lr

0801764c <STORAGE_Write_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801764c:	b480      	push	{r7}
 801764e:	b085      	sub	sp, #20
 8017650:	af00      	add	r7, sp, #0
 8017652:	60b9      	str	r1, [r7, #8]
 8017654:	607a      	str	r2, [r7, #4]
 8017656:	461a      	mov	r2, r3
 8017658:	4603      	mov	r3, r0
 801765a:	73fb      	strb	r3, [r7, #15]
 801765c:	4613      	mov	r3, r2
 801765e:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 8017660:	2300      	movs	r3, #0
  /* USER CODE END 14 */
}
 8017662:	4618      	mov	r0, r3
 8017664:	3714      	adds	r7, #20
 8017666:	46bd      	mov	sp, r7
 8017668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801766c:	4770      	bx	lr

0801766e <STORAGE_GetMaxLun_HS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_HS(void)
{
 801766e:	b480      	push	{r7}
 8017670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (STORAGE_LUN_NBR - 1);
 8017672:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 8017674:	4618      	mov	r0, r3
 8017676:	46bd      	mov	sp, r7
 8017678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767c:	4770      	bx	lr
	...

08017680 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017680:	b580      	push	{r7, lr}
 8017682:	b08c      	sub	sp, #48	; 0x30
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017688:	f107 031c 	add.w	r3, r7, #28
 801768c:	2200      	movs	r2, #0
 801768e:	601a      	str	r2, [r3, #0]
 8017690:	605a      	str	r2, [r3, #4]
 8017692:	609a      	str	r2, [r3, #8]
 8017694:	60da      	str	r2, [r3, #12]
 8017696:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80176a0:	d13b      	bne.n	801771a <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80176a2:	2300      	movs	r3, #0
 80176a4:	61bb      	str	r3, [r7, #24]
 80176a6:	4b3c      	ldr	r3, [pc, #240]	; (8017798 <HAL_PCD_MspInit+0x118>)
 80176a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176aa:	4a3b      	ldr	r2, [pc, #236]	; (8017798 <HAL_PCD_MspInit+0x118>)
 80176ac:	f043 0301 	orr.w	r3, r3, #1
 80176b0:	6313      	str	r3, [r2, #48]	; 0x30
 80176b2:	4b39      	ldr	r3, [pc, #228]	; (8017798 <HAL_PCD_MspInit+0x118>)
 80176b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176b6:	f003 0301 	and.w	r3, r3, #1
 80176ba:	61bb      	str	r3, [r7, #24]
 80176bc:	69bb      	ldr	r3, [r7, #24]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80176be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80176c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80176c4:	2302      	movs	r3, #2
 80176c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176c8:	2300      	movs	r3, #0
 80176ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80176cc:	2303      	movs	r3, #3
 80176ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80176d0:	230a      	movs	r3, #10
 80176d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80176d4:	f107 031c 	add.w	r3, r7, #28
 80176d8:	4619      	mov	r1, r3
 80176da:	4830      	ldr	r0, [pc, #192]	; (801779c <HAL_PCD_MspInit+0x11c>)
 80176dc:	f7eb fe74 	bl	80033c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80176e0:	4b2d      	ldr	r3, [pc, #180]	; (8017798 <HAL_PCD_MspInit+0x118>)
 80176e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80176e4:	4a2c      	ldr	r2, [pc, #176]	; (8017798 <HAL_PCD_MspInit+0x118>)
 80176e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80176ea:	6353      	str	r3, [r2, #52]	; 0x34
 80176ec:	2300      	movs	r3, #0
 80176ee:	617b      	str	r3, [r7, #20]
 80176f0:	4b29      	ldr	r3, [pc, #164]	; (8017798 <HAL_PCD_MspInit+0x118>)
 80176f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80176f4:	4a28      	ldr	r2, [pc, #160]	; (8017798 <HAL_PCD_MspInit+0x118>)
 80176f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80176fa:	6453      	str	r3, [r2, #68]	; 0x44
 80176fc:	4b26      	ldr	r3, [pc, #152]	; (8017798 <HAL_PCD_MspInit+0x118>)
 80176fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017704:	617b      	str	r3, [r7, #20]
 8017706:	697b      	ldr	r3, [r7, #20]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017708:	2200      	movs	r2, #0
 801770a:	2100      	movs	r1, #0
 801770c:	2043      	movs	r0, #67	; 0x43
 801770e:	f7ea f920 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017712:	2043      	movs	r0, #67	; 0x43
 8017714:	f7ea f939 	bl	800198a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8017718:	e039      	b.n	801778e <HAL_PCD_MspInit+0x10e>
  else if(pcdHandle->Instance==USB_OTG_HS)
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	4a20      	ldr	r2, [pc, #128]	; (80177a0 <HAL_PCD_MspInit+0x120>)
 8017720:	4293      	cmp	r3, r2
 8017722:	d134      	bne.n	801778e <HAL_PCD_MspInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017724:	2300      	movs	r3, #0
 8017726:	613b      	str	r3, [r7, #16]
 8017728:	4b1b      	ldr	r3, [pc, #108]	; (8017798 <HAL_PCD_MspInit+0x118>)
 801772a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801772c:	4a1a      	ldr	r2, [pc, #104]	; (8017798 <HAL_PCD_MspInit+0x118>)
 801772e:	f043 0302 	orr.w	r3, r3, #2
 8017732:	6313      	str	r3, [r2, #48]	; 0x30
 8017734:	4b18      	ldr	r3, [pc, #96]	; (8017798 <HAL_PCD_MspInit+0x118>)
 8017736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017738:	f003 0302 	and.w	r3, r3, #2
 801773c:	613b      	str	r3, [r7, #16]
 801773e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8017740:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8017744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017746:	2302      	movs	r3, #2
 8017748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801774a:	2300      	movs	r3, #0
 801774c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801774e:	2303      	movs	r3, #3
 8017750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8017752:	230c      	movs	r3, #12
 8017754:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017756:	f107 031c 	add.w	r3, r7, #28
 801775a:	4619      	mov	r1, r3
 801775c:	4811      	ldr	r0, [pc, #68]	; (80177a4 <HAL_PCD_MspInit+0x124>)
 801775e:	f7eb fe33 	bl	80033c8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8017762:	2300      	movs	r3, #0
 8017764:	60fb      	str	r3, [r7, #12]
 8017766:	4b0c      	ldr	r3, [pc, #48]	; (8017798 <HAL_PCD_MspInit+0x118>)
 8017768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801776a:	4a0b      	ldr	r2, [pc, #44]	; (8017798 <HAL_PCD_MspInit+0x118>)
 801776c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017770:	6313      	str	r3, [r2, #48]	; 0x30
 8017772:	4b09      	ldr	r3, [pc, #36]	; (8017798 <HAL_PCD_MspInit+0x118>)
 8017774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017776:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801777a:	60fb      	str	r3, [r7, #12]
 801777c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801777e:	2200      	movs	r2, #0
 8017780:	2100      	movs	r1, #0
 8017782:	204d      	movs	r0, #77	; 0x4d
 8017784:	f7ea f8e5 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8017788:	204d      	movs	r0, #77	; 0x4d
 801778a:	f7ea f8fe 	bl	800198a <HAL_NVIC_EnableIRQ>
}
 801778e:	bf00      	nop
 8017790:	3730      	adds	r7, #48	; 0x30
 8017792:	46bd      	mov	sp, r7
 8017794:	bd80      	pop	{r7, pc}
 8017796:	bf00      	nop
 8017798:	40023800 	.word	0x40023800
 801779c:	40020000 	.word	0x40020000
 80177a0:	40040000 	.word	0x40040000
 80177a4:	40020400 	.word	0x40020400

080177a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80177a8:	b580      	push	{r7, lr}
 80177aa:	b082      	sub	sp, #8
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80177bc:	4619      	mov	r1, r3
 80177be:	4610      	mov	r0, r2
 80177c0:	f7f3 fe34 	bl	800b42c <USBD_LL_SetupStage>
}
 80177c4:	bf00      	nop
 80177c6:	3708      	adds	r7, #8
 80177c8:	46bd      	mov	sp, r7
 80177ca:	bd80      	pop	{r7, pc}

080177cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b082      	sub	sp, #8
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
 80177d4:	460b      	mov	r3, r1
 80177d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80177de:	78fa      	ldrb	r2, [r7, #3]
 80177e0:	6879      	ldr	r1, [r7, #4]
 80177e2:	4613      	mov	r3, r2
 80177e4:	00db      	lsls	r3, r3, #3
 80177e6:	4413      	add	r3, r2
 80177e8:	009b      	lsls	r3, r3, #2
 80177ea:	440b      	add	r3, r1
 80177ec:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80177f0:	681a      	ldr	r2, [r3, #0]
 80177f2:	78fb      	ldrb	r3, [r7, #3]
 80177f4:	4619      	mov	r1, r3
 80177f6:	f7f3 fe6e 	bl	800b4d6 <USBD_LL_DataOutStage>
}
 80177fa:	bf00      	nop
 80177fc:	3708      	adds	r7, #8
 80177fe:	46bd      	mov	sp, r7
 8017800:	bd80      	pop	{r7, pc}

08017802 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017802:	b580      	push	{r7, lr}
 8017804:	b082      	sub	sp, #8
 8017806:	af00      	add	r7, sp, #0
 8017808:	6078      	str	r0, [r7, #4]
 801780a:	460b      	mov	r3, r1
 801780c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8017814:	78fa      	ldrb	r2, [r7, #3]
 8017816:	6879      	ldr	r1, [r7, #4]
 8017818:	4613      	mov	r3, r2
 801781a:	00db      	lsls	r3, r3, #3
 801781c:	4413      	add	r3, r2
 801781e:	009b      	lsls	r3, r3, #2
 8017820:	440b      	add	r3, r1
 8017822:	3320      	adds	r3, #32
 8017824:	681a      	ldr	r2, [r3, #0]
 8017826:	78fb      	ldrb	r3, [r7, #3]
 8017828:	4619      	mov	r1, r3
 801782a:	f7f3 ff07 	bl	800b63c <USBD_LL_DataInStage>
}
 801782e:	bf00      	nop
 8017830:	3708      	adds	r7, #8
 8017832:	46bd      	mov	sp, r7
 8017834:	bd80      	pop	{r7, pc}

08017836 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017836:	b580      	push	{r7, lr}
 8017838:	b082      	sub	sp, #8
 801783a:	af00      	add	r7, sp, #0
 801783c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017844:	4618      	mov	r0, r3
 8017846:	f7f4 f841 	bl	800b8cc <USBD_LL_SOF>
}
 801784a:	bf00      	nop
 801784c:	3708      	adds	r7, #8
 801784e:	46bd      	mov	sp, r7
 8017850:	bd80      	pop	{r7, pc}

08017852 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017852:	b580      	push	{r7, lr}
 8017854:	b084      	sub	sp, #16
 8017856:	af00      	add	r7, sp, #0
 8017858:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801785a:	2301      	movs	r3, #1
 801785c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	79db      	ldrb	r3, [r3, #7]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d102      	bne.n	801786c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017866:	2300      	movs	r3, #0
 8017868:	73fb      	strb	r3, [r7, #15]
 801786a:	e008      	b.n	801787e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	79db      	ldrb	r3, [r3, #7]
 8017870:	2b02      	cmp	r3, #2
 8017872:	d102      	bne.n	801787a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017874:	2301      	movs	r3, #1
 8017876:	73fb      	strb	r3, [r7, #15]
 8017878:	e001      	b.n	801787e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801787a:	f7e8 ffc9 	bl	8000810 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017884:	7bfa      	ldrb	r2, [r7, #15]
 8017886:	4611      	mov	r1, r2
 8017888:	4618      	mov	r0, r3
 801788a:	f7f3 ffdb 	bl	800b844 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017894:	4618      	mov	r0, r3
 8017896:	f7f3 ff83 	bl	800b7a0 <USBD_LL_Reset>
}
 801789a:	bf00      	nop
 801789c:	3710      	adds	r7, #16
 801789e:	46bd      	mov	sp, r7
 80178a0:	bd80      	pop	{r7, pc}
	...

080178a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178a4:	b580      	push	{r7, lr}
 80178a6:	b082      	sub	sp, #8
 80178a8:	af00      	add	r7, sp, #0
 80178aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80178b2:	4618      	mov	r0, r3
 80178b4:	f7f3 ffd6 	bl	800b864 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	687a      	ldr	r2, [r7, #4]
 80178c4:	6812      	ldr	r2, [r2, #0]
 80178c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80178ca:	f043 0301 	orr.w	r3, r3, #1
 80178ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	7adb      	ldrb	r3, [r3, #11]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d005      	beq.n	80178e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80178d8:	4b04      	ldr	r3, [pc, #16]	; (80178ec <HAL_PCD_SuspendCallback+0x48>)
 80178da:	691b      	ldr	r3, [r3, #16]
 80178dc:	4a03      	ldr	r2, [pc, #12]	; (80178ec <HAL_PCD_SuspendCallback+0x48>)
 80178de:	f043 0306 	orr.w	r3, r3, #6
 80178e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80178e4:	bf00      	nop
 80178e6:	3708      	adds	r7, #8
 80178e8:	46bd      	mov	sp, r7
 80178ea:	bd80      	pop	{r7, pc}
 80178ec:	e000ed00 	.word	0xe000ed00

080178f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178f0:	b580      	push	{r7, lr}
 80178f2:	b082      	sub	sp, #8
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80178fe:	4618      	mov	r0, r3
 8017900:	f7f3 ffcc 	bl	800b89c <USBD_LL_Resume>
}
 8017904:	bf00      	nop
 8017906:	3708      	adds	r7, #8
 8017908:	46bd      	mov	sp, r7
 801790a:	bd80      	pop	{r7, pc}

0801790c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801790c:	b580      	push	{r7, lr}
 801790e:	b082      	sub	sp, #8
 8017910:	af00      	add	r7, sp, #0
 8017912:	6078      	str	r0, [r7, #4]
 8017914:	460b      	mov	r3, r1
 8017916:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801791e:	78fa      	ldrb	r2, [r7, #3]
 8017920:	4611      	mov	r1, r2
 8017922:	4618      	mov	r0, r3
 8017924:	f7f4 f824 	bl	800b970 <USBD_LL_IsoOUTIncomplete>
}
 8017928:	bf00      	nop
 801792a:	3708      	adds	r7, #8
 801792c:	46bd      	mov	sp, r7
 801792e:	bd80      	pop	{r7, pc}

08017930 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017930:	b580      	push	{r7, lr}
 8017932:	b082      	sub	sp, #8
 8017934:	af00      	add	r7, sp, #0
 8017936:	6078      	str	r0, [r7, #4]
 8017938:	460b      	mov	r3, r1
 801793a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017942:	78fa      	ldrb	r2, [r7, #3]
 8017944:	4611      	mov	r1, r2
 8017946:	4618      	mov	r0, r3
 8017948:	f7f3 ffe0 	bl	800b90c <USBD_LL_IsoINIncomplete>
}
 801794c:	bf00      	nop
 801794e:	3708      	adds	r7, #8
 8017950:	46bd      	mov	sp, r7
 8017952:	bd80      	pop	{r7, pc}

08017954 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017954:	b580      	push	{r7, lr}
 8017956:	b082      	sub	sp, #8
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8017962:	4618      	mov	r0, r3
 8017964:	f7f4 f836 	bl	800b9d4 <USBD_LL_DevConnected>
}
 8017968:	bf00      	nop
 801796a:	3708      	adds	r7, #8
 801796c:	46bd      	mov	sp, r7
 801796e:	bd80      	pop	{r7, pc}

08017970 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b082      	sub	sp, #8
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801797e:	4618      	mov	r0, r3
 8017980:	f7f4 f833 	bl	800b9ea <USBD_LL_DevDisconnected>
}
 8017984:	bf00      	nop
 8017986:	3708      	adds	r7, #8
 8017988:	46bd      	mov	sp, r7
 801798a:	bd80      	pop	{r7, pc}

0801798c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801798c:	b580      	push	{r7, lr}
 801798e:	b082      	sub	sp, #8
 8017990:	af00      	add	r7, sp, #0
 8017992:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	781b      	ldrb	r3, [r3, #0]
 8017998:	2b00      	cmp	r3, #0
 801799a:	d13c      	bne.n	8017a16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801799c:	4a43      	ldr	r2, [pc, #268]	; (8017aac <USBD_LL_Init+0x120>)
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	4a41      	ldr	r2, [pc, #260]	; (8017aac <USBD_LL_Init+0x120>)
 80179a8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80179ac:	4b3f      	ldr	r3, [pc, #252]	; (8017aac <USBD_LL_Init+0x120>)
 80179ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80179b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80179b4:	4b3d      	ldr	r3, [pc, #244]	; (8017aac <USBD_LL_Init+0x120>)
 80179b6:	2204      	movs	r2, #4
 80179b8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80179ba:	4b3c      	ldr	r3, [pc, #240]	; (8017aac <USBD_LL_Init+0x120>)
 80179bc:	2202      	movs	r2, #2
 80179be:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80179c0:	4b3a      	ldr	r3, [pc, #232]	; (8017aac <USBD_LL_Init+0x120>)
 80179c2:	2200      	movs	r2, #0
 80179c4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80179c6:	4b39      	ldr	r3, [pc, #228]	; (8017aac <USBD_LL_Init+0x120>)
 80179c8:	2202      	movs	r2, #2
 80179ca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80179cc:	4b37      	ldr	r3, [pc, #220]	; (8017aac <USBD_LL_Init+0x120>)
 80179ce:	2200      	movs	r2, #0
 80179d0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80179d2:	4b36      	ldr	r3, [pc, #216]	; (8017aac <USBD_LL_Init+0x120>)
 80179d4:	2200      	movs	r2, #0
 80179d6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80179d8:	4b34      	ldr	r3, [pc, #208]	; (8017aac <USBD_LL_Init+0x120>)
 80179da:	2200      	movs	r2, #0
 80179dc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80179de:	4b33      	ldr	r3, [pc, #204]	; (8017aac <USBD_LL_Init+0x120>)
 80179e0:	2200      	movs	r2, #0
 80179e2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80179e4:	4b31      	ldr	r3, [pc, #196]	; (8017aac <USBD_LL_Init+0x120>)
 80179e6:	2200      	movs	r2, #0
 80179e8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80179ea:	4830      	ldr	r0, [pc, #192]	; (8017aac <USBD_LL_Init+0x120>)
 80179ec:	f7eb fe88 	bl	8003700 <HAL_PCD_Init>
 80179f0:	4603      	mov	r3, r0
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d001      	beq.n	80179fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80179f6:	f7e8 ff0b 	bl	8000810 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80179fa:	2180      	movs	r1, #128	; 0x80
 80179fc:	482b      	ldr	r0, [pc, #172]	; (8017aac <USBD_LL_Init+0x120>)
 80179fe:	f7ed f8e0 	bl	8004bc2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017a02:	2240      	movs	r2, #64	; 0x40
 8017a04:	2100      	movs	r1, #0
 8017a06:	4829      	ldr	r0, [pc, #164]	; (8017aac <USBD_LL_Init+0x120>)
 8017a08:	f7ed f894 	bl	8004b34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017a0c:	2280      	movs	r2, #128	; 0x80
 8017a0e:	2101      	movs	r1, #1
 8017a10:	4826      	ldr	r0, [pc, #152]	; (8017aac <USBD_LL_Init+0x120>)
 8017a12:	f7ed f88f 	bl	8004b34 <HAL_PCDEx_SetTxFiFo>
  }
  if (pdev->id == DEVICE_HS) {
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	781b      	ldrb	r3, [r3, #0]
 8017a1a:	2b01      	cmp	r3, #1
 8017a1c:	d140      	bne.n	8017aa0 <USBD_LL_Init+0x114>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8017a1e:	4a24      	ldr	r2, [pc, #144]	; (8017ab0 <USBD_LL_Init+0x124>)
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	4a21      	ldr	r2, [pc, #132]	; (8017ab0 <USBD_LL_Init+0x124>)
 8017a2a:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8017a2e:	4b20      	ldr	r3, [pc, #128]	; (8017ab0 <USBD_LL_Init+0x124>)
 8017a30:	4a20      	ldr	r2, [pc, #128]	; (8017ab4 <USBD_LL_Init+0x128>)
 8017a32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8017a34:	4b1e      	ldr	r3, [pc, #120]	; (8017ab0 <USBD_LL_Init+0x124>)
 8017a36:	2206      	movs	r2, #6
 8017a38:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8017a3a:	4b1d      	ldr	r3, [pc, #116]	; (8017ab0 <USBD_LL_Init+0x124>)
 8017a3c:	2202      	movs	r2, #2
 8017a3e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8017a40:	4b1b      	ldr	r3, [pc, #108]	; (8017ab0 <USBD_LL_Init+0x124>)
 8017a42:	2200      	movs	r2, #0
 8017a44:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8017a46:	4b1a      	ldr	r3, [pc, #104]	; (8017ab0 <USBD_LL_Init+0x124>)
 8017a48:	2202      	movs	r2, #2
 8017a4a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8017a4c:	4b18      	ldr	r3, [pc, #96]	; (8017ab0 <USBD_LL_Init+0x124>)
 8017a4e:	2200      	movs	r2, #0
 8017a50:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8017a52:	4b17      	ldr	r3, [pc, #92]	; (8017ab0 <USBD_LL_Init+0x124>)
 8017a54:	2200      	movs	r2, #0
 8017a56:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8017a58:	4b15      	ldr	r3, [pc, #84]	; (8017ab0 <USBD_LL_Init+0x124>)
 8017a5a:	2200      	movs	r2, #0
 8017a5c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8017a5e:	4b14      	ldr	r3, [pc, #80]	; (8017ab0 <USBD_LL_Init+0x124>)
 8017a60:	2200      	movs	r2, #0
 8017a62:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8017a64:	4b12      	ldr	r3, [pc, #72]	; (8017ab0 <USBD_LL_Init+0x124>)
 8017a66:	2200      	movs	r2, #0
 8017a68:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8017a6a:	4b11      	ldr	r3, [pc, #68]	; (8017ab0 <USBD_LL_Init+0x124>)
 8017a6c:	2200      	movs	r2, #0
 8017a6e:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8017a70:	480f      	ldr	r0, [pc, #60]	; (8017ab0 <USBD_LL_Init+0x124>)
 8017a72:	f7eb fe45 	bl	8003700 <HAL_PCD_Init>
 8017a76:	4603      	mov	r3, r0
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d001      	beq.n	8017a80 <USBD_LL_Init+0xf4>
  {
    Error_Handler( );
 8017a7c:	f7e8 fec8 	bl	8000810 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8017a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017a84:	480a      	ldr	r0, [pc, #40]	; (8017ab0 <USBD_LL_Init+0x124>)
 8017a86:	f7ed f89c 	bl	8004bc2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8017a8a:	2280      	movs	r2, #128	; 0x80
 8017a8c:	2100      	movs	r1, #0
 8017a8e:	4808      	ldr	r0, [pc, #32]	; (8017ab0 <USBD_LL_Init+0x124>)
 8017a90:	f7ed f850 	bl	8004b34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8017a94:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8017a98:	2101      	movs	r1, #1
 8017a9a:	4805      	ldr	r0, [pc, #20]	; (8017ab0 <USBD_LL_Init+0x124>)
 8017a9c:	f7ed f84a 	bl	8004b34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8017aa0:	2300      	movs	r3, #0
}
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	3708      	adds	r7, #8
 8017aa6:	46bd      	mov	sp, r7
 8017aa8:	bd80      	pop	{r7, pc}
 8017aaa:	bf00      	nop
 8017aac:	20009a54 	.word	0x20009a54
 8017ab0:	20009f38 	.word	0x20009f38
 8017ab4:	40040000 	.word	0x40040000

08017ab8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b084      	sub	sp, #16
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f7eb ff25 	bl	800391e <HAL_PCD_Start>
 8017ad4:	4603      	mov	r3, r0
 8017ad6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ad8:	7bfb      	ldrb	r3, [r7, #15]
 8017ada:	4618      	mov	r0, r3
 8017adc:	f000 f962 	bl	8017da4 <USBD_Get_USB_Status>
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017ae4:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	3710      	adds	r7, #16
 8017aea:	46bd      	mov	sp, r7
 8017aec:	bd80      	pop	{r7, pc}

08017aee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017aee:	b580      	push	{r7, lr}
 8017af0:	b084      	sub	sp, #16
 8017af2:	af00      	add	r7, sp, #0
 8017af4:	6078      	str	r0, [r7, #4]
 8017af6:	4608      	mov	r0, r1
 8017af8:	4611      	mov	r1, r2
 8017afa:	461a      	mov	r2, r3
 8017afc:	4603      	mov	r3, r0
 8017afe:	70fb      	strb	r3, [r7, #3]
 8017b00:	460b      	mov	r3, r1
 8017b02:	70bb      	strb	r3, [r7, #2]
 8017b04:	4613      	mov	r3, r2
 8017b06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b08:	2300      	movs	r3, #0
 8017b0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017b16:	78bb      	ldrb	r3, [r7, #2]
 8017b18:	883a      	ldrh	r2, [r7, #0]
 8017b1a:	78f9      	ldrb	r1, [r7, #3]
 8017b1c:	f7ec fbf9 	bl	8004312 <HAL_PCD_EP_Open>
 8017b20:	4603      	mov	r3, r0
 8017b22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b24:	7bfb      	ldrb	r3, [r7, #15]
 8017b26:	4618      	mov	r0, r3
 8017b28:	f000 f93c 	bl	8017da4 <USBD_Get_USB_Status>
 8017b2c:	4603      	mov	r3, r0
 8017b2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017b30:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b32:	4618      	mov	r0, r3
 8017b34:	3710      	adds	r7, #16
 8017b36:	46bd      	mov	sp, r7
 8017b38:	bd80      	pop	{r7, pc}

08017b3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017b3a:	b580      	push	{r7, lr}
 8017b3c:	b084      	sub	sp, #16
 8017b3e:	af00      	add	r7, sp, #0
 8017b40:	6078      	str	r0, [r7, #4]
 8017b42:	460b      	mov	r3, r1
 8017b44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b46:	2300      	movs	r3, #0
 8017b48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017b54:	78fa      	ldrb	r2, [r7, #3]
 8017b56:	4611      	mov	r1, r2
 8017b58:	4618      	mov	r0, r3
 8017b5a:	f7ec fc42 	bl	80043e2 <HAL_PCD_EP_Close>
 8017b5e:	4603      	mov	r3, r0
 8017b60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b62:	7bfb      	ldrb	r3, [r7, #15]
 8017b64:	4618      	mov	r0, r3
 8017b66:	f000 f91d 	bl	8017da4 <USBD_Get_USB_Status>
 8017b6a:	4603      	mov	r3, r0
 8017b6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017b6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b70:	4618      	mov	r0, r3
 8017b72:	3710      	adds	r7, #16
 8017b74:	46bd      	mov	sp, r7
 8017b76:	bd80      	pop	{r7, pc}

08017b78 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b084      	sub	sp, #16
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	6078      	str	r0, [r7, #4]
 8017b80:	460b      	mov	r3, r1
 8017b82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b84:	2300      	movs	r3, #0
 8017b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b88:	2300      	movs	r3, #0
 8017b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017b92:	78fa      	ldrb	r2, [r7, #3]
 8017b94:	4611      	mov	r1, r2
 8017b96:	4618      	mov	r0, r3
 8017b98:	f7ec fde4 	bl	8004764 <HAL_PCD_EP_Flush>
 8017b9c:	4603      	mov	r3, r0
 8017b9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ba0:	7bfb      	ldrb	r3, [r7, #15]
 8017ba2:	4618      	mov	r0, r3
 8017ba4:	f000 f8fe 	bl	8017da4 <USBD_Get_USB_Status>
 8017ba8:	4603      	mov	r3, r0
 8017baa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017bac:	7bbb      	ldrb	r3, [r7, #14]
}
 8017bae:	4618      	mov	r0, r3
 8017bb0:	3710      	adds	r7, #16
 8017bb2:	46bd      	mov	sp, r7
 8017bb4:	bd80      	pop	{r7, pc}

08017bb6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017bb6:	b580      	push	{r7, lr}
 8017bb8:	b084      	sub	sp, #16
 8017bba:	af00      	add	r7, sp, #0
 8017bbc:	6078      	str	r0, [r7, #4]
 8017bbe:	460b      	mov	r3, r1
 8017bc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017bd0:	78fa      	ldrb	r2, [r7, #3]
 8017bd2:	4611      	mov	r1, r2
 8017bd4:	4618      	mov	r0, r3
 8017bd6:	f7ec fcdb 	bl	8004590 <HAL_PCD_EP_SetStall>
 8017bda:	4603      	mov	r3, r0
 8017bdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017bde:	7bfb      	ldrb	r3, [r7, #15]
 8017be0:	4618      	mov	r0, r3
 8017be2:	f000 f8df 	bl	8017da4 <USBD_Get_USB_Status>
 8017be6:	4603      	mov	r3, r0
 8017be8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017bea:	7bbb      	ldrb	r3, [r7, #14]
}
 8017bec:	4618      	mov	r0, r3
 8017bee:	3710      	adds	r7, #16
 8017bf0:	46bd      	mov	sp, r7
 8017bf2:	bd80      	pop	{r7, pc}

08017bf4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017bf4:	b580      	push	{r7, lr}
 8017bf6:	b084      	sub	sp, #16
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
 8017bfc:	460b      	mov	r3, r1
 8017bfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c00:	2300      	movs	r3, #0
 8017c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c04:	2300      	movs	r3, #0
 8017c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017c0e:	78fa      	ldrb	r2, [r7, #3]
 8017c10:	4611      	mov	r1, r2
 8017c12:	4618      	mov	r0, r3
 8017c14:	f7ec fd1f 	bl	8004656 <HAL_PCD_EP_ClrStall>
 8017c18:	4603      	mov	r3, r0
 8017c1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c1c:	7bfb      	ldrb	r3, [r7, #15]
 8017c1e:	4618      	mov	r0, r3
 8017c20:	f000 f8c0 	bl	8017da4 <USBD_Get_USB_Status>
 8017c24:	4603      	mov	r3, r0
 8017c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	3710      	adds	r7, #16
 8017c2e:	46bd      	mov	sp, r7
 8017c30:	bd80      	pop	{r7, pc}

08017c32 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c32:	b480      	push	{r7}
 8017c34:	b085      	sub	sp, #20
 8017c36:	af00      	add	r7, sp, #0
 8017c38:	6078      	str	r0, [r7, #4]
 8017c3a:	460b      	mov	r3, r1
 8017c3c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017c44:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	da0b      	bge.n	8017c66 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017c4e:	78fb      	ldrb	r3, [r7, #3]
 8017c50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017c54:	68f9      	ldr	r1, [r7, #12]
 8017c56:	4613      	mov	r3, r2
 8017c58:	00db      	lsls	r3, r3, #3
 8017c5a:	4413      	add	r3, r2
 8017c5c:	009b      	lsls	r3, r3, #2
 8017c5e:	440b      	add	r3, r1
 8017c60:	3316      	adds	r3, #22
 8017c62:	781b      	ldrb	r3, [r3, #0]
 8017c64:	e00b      	b.n	8017c7e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017c66:	78fb      	ldrb	r3, [r7, #3]
 8017c68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017c6c:	68f9      	ldr	r1, [r7, #12]
 8017c6e:	4613      	mov	r3, r2
 8017c70:	00db      	lsls	r3, r3, #3
 8017c72:	4413      	add	r3, r2
 8017c74:	009b      	lsls	r3, r3, #2
 8017c76:	440b      	add	r3, r1
 8017c78:	f203 2356 	addw	r3, r3, #598	; 0x256
 8017c7c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017c7e:	4618      	mov	r0, r3
 8017c80:	3714      	adds	r7, #20
 8017c82:	46bd      	mov	sp, r7
 8017c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c88:	4770      	bx	lr

08017c8a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017c8a:	b580      	push	{r7, lr}
 8017c8c:	b084      	sub	sp, #16
 8017c8e:	af00      	add	r7, sp, #0
 8017c90:	6078      	str	r0, [r7, #4]
 8017c92:	460b      	mov	r3, r1
 8017c94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c96:	2300      	movs	r3, #0
 8017c98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017ca4:	78fa      	ldrb	r2, [r7, #3]
 8017ca6:	4611      	mov	r1, r2
 8017ca8:	4618      	mov	r0, r3
 8017caa:	f7ec fb0e 	bl	80042ca <HAL_PCD_SetAddress>
 8017cae:	4603      	mov	r3, r0
 8017cb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017cb2:	7bfb      	ldrb	r3, [r7, #15]
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	f000 f875 	bl	8017da4 <USBD_Get_USB_Status>
 8017cba:	4603      	mov	r3, r0
 8017cbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017cbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	3710      	adds	r7, #16
 8017cc4:	46bd      	mov	sp, r7
 8017cc6:	bd80      	pop	{r7, pc}

08017cc8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017cc8:	b580      	push	{r7, lr}
 8017cca:	b086      	sub	sp, #24
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	60f8      	str	r0, [r7, #12]
 8017cd0:	607a      	str	r2, [r7, #4]
 8017cd2:	603b      	str	r3, [r7, #0]
 8017cd4:	460b      	mov	r3, r1
 8017cd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017cd8:	2300      	movs	r3, #0
 8017cda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017cdc:	2300      	movs	r3, #0
 8017cde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017ce6:	7af9      	ldrb	r1, [r7, #11]
 8017ce8:	683b      	ldr	r3, [r7, #0]
 8017cea:	687a      	ldr	r2, [r7, #4]
 8017cec:	f7ec fc16 	bl	800451c <HAL_PCD_EP_Transmit>
 8017cf0:	4603      	mov	r3, r0
 8017cf2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017cf4:	7dfb      	ldrb	r3, [r7, #23]
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	f000 f854 	bl	8017da4 <USBD_Get_USB_Status>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017d00:	7dbb      	ldrb	r3, [r7, #22]
}
 8017d02:	4618      	mov	r0, r3
 8017d04:	3718      	adds	r7, #24
 8017d06:	46bd      	mov	sp, r7
 8017d08:	bd80      	pop	{r7, pc}

08017d0a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017d0a:	b580      	push	{r7, lr}
 8017d0c:	b086      	sub	sp, #24
 8017d0e:	af00      	add	r7, sp, #0
 8017d10:	60f8      	str	r0, [r7, #12]
 8017d12:	607a      	str	r2, [r7, #4]
 8017d14:	603b      	str	r3, [r7, #0]
 8017d16:	460b      	mov	r3, r1
 8017d18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d1e:	2300      	movs	r3, #0
 8017d20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017d28:	7af9      	ldrb	r1, [r7, #11]
 8017d2a:	683b      	ldr	r3, [r7, #0]
 8017d2c:	687a      	ldr	r2, [r7, #4]
 8017d2e:	f7ec fba2 	bl	8004476 <HAL_PCD_EP_Receive>
 8017d32:	4603      	mov	r3, r0
 8017d34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d36:	7dfb      	ldrb	r3, [r7, #23]
 8017d38:	4618      	mov	r0, r3
 8017d3a:	f000 f833 	bl	8017da4 <USBD_Get_USB_Status>
 8017d3e:	4603      	mov	r3, r0
 8017d40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017d42:	7dbb      	ldrb	r3, [r7, #22]
}
 8017d44:	4618      	mov	r0, r3
 8017d46:	3718      	adds	r7, #24
 8017d48:	46bd      	mov	sp, r7
 8017d4a:	bd80      	pop	{r7, pc}

08017d4c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	b082      	sub	sp, #8
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	6078      	str	r0, [r7, #4]
 8017d54:	460b      	mov	r3, r1
 8017d56:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017d5e:	78fa      	ldrb	r2, [r7, #3]
 8017d60:	4611      	mov	r1, r2
 8017d62:	4618      	mov	r0, r3
 8017d64:	f7ec fbc2 	bl	80044ec <HAL_PCD_EP_GetRxCount>
 8017d68:	4603      	mov	r3, r0
}
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	3708      	adds	r7, #8
 8017d6e:	46bd      	mov	sp, r7
 8017d70:	bd80      	pop	{r7, pc}
	...

08017d74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017d74:	b480      	push	{r7}
 8017d76:	b083      	sub	sp, #12
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017d7c:	4b03      	ldr	r3, [pc, #12]	; (8017d8c <USBD_static_malloc+0x18>)
}
 8017d7e:	4618      	mov	r0, r3
 8017d80:	370c      	adds	r7, #12
 8017d82:	46bd      	mov	sp, r7
 8017d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d88:	4770      	bx	lr
 8017d8a:	bf00      	nop
 8017d8c:	2000a41c 	.word	0x2000a41c

08017d90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017d90:	b480      	push	{r7}
 8017d92:	b083      	sub	sp, #12
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]

}
 8017d98:	bf00      	nop
 8017d9a:	370c      	adds	r7, #12
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da2:	4770      	bx	lr

08017da4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017da4:	b480      	push	{r7}
 8017da6:	b085      	sub	sp, #20
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	4603      	mov	r3, r0
 8017dac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017dae:	2300      	movs	r3, #0
 8017db0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017db2:	79fb      	ldrb	r3, [r7, #7]
 8017db4:	2b03      	cmp	r3, #3
 8017db6:	d817      	bhi.n	8017de8 <USBD_Get_USB_Status+0x44>
 8017db8:	a201      	add	r2, pc, #4	; (adr r2, 8017dc0 <USBD_Get_USB_Status+0x1c>)
 8017dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017dbe:	bf00      	nop
 8017dc0:	08017dd1 	.word	0x08017dd1
 8017dc4:	08017dd7 	.word	0x08017dd7
 8017dc8:	08017ddd 	.word	0x08017ddd
 8017dcc:	08017de3 	.word	0x08017de3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8017dd4:	e00b      	b.n	8017dee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017dd6:	2303      	movs	r3, #3
 8017dd8:	73fb      	strb	r3, [r7, #15]
    break;
 8017dda:	e008      	b.n	8017dee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017ddc:	2301      	movs	r3, #1
 8017dde:	73fb      	strb	r3, [r7, #15]
    break;
 8017de0:	e005      	b.n	8017dee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017de2:	2303      	movs	r3, #3
 8017de4:	73fb      	strb	r3, [r7, #15]
    break;
 8017de6:	e002      	b.n	8017dee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017de8:	2303      	movs	r3, #3
 8017dea:	73fb      	strb	r3, [r7, #15]
    break;
 8017dec:	bf00      	nop
  }
  return usb_status;
 8017dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8017df0:	4618      	mov	r0, r3
 8017df2:	3714      	adds	r7, #20
 8017df4:	46bd      	mov	sp, r7
 8017df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfa:	4770      	bx	lr

08017dfc <atoi>:
 8017dfc:	220a      	movs	r2, #10
 8017dfe:	2100      	movs	r1, #0
 8017e00:	f000 b8c0 	b.w	8017f84 <strtol>

08017e04 <rand>:
 8017e04:	4b16      	ldr	r3, [pc, #88]	; (8017e60 <rand+0x5c>)
 8017e06:	b510      	push	{r4, lr}
 8017e08:	681c      	ldr	r4, [r3, #0]
 8017e0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017e0c:	b9b3      	cbnz	r3, 8017e3c <rand+0x38>
 8017e0e:	2018      	movs	r0, #24
 8017e10:	f000 faf0 	bl	80183f4 <malloc>
 8017e14:	4602      	mov	r2, r0
 8017e16:	6320      	str	r0, [r4, #48]	; 0x30
 8017e18:	b920      	cbnz	r0, 8017e24 <rand+0x20>
 8017e1a:	4b12      	ldr	r3, [pc, #72]	; (8017e64 <rand+0x60>)
 8017e1c:	4812      	ldr	r0, [pc, #72]	; (8017e68 <rand+0x64>)
 8017e1e:	2152      	movs	r1, #82	; 0x52
 8017e20:	f000 fa7e 	bl	8018320 <__assert_func>
 8017e24:	4911      	ldr	r1, [pc, #68]	; (8017e6c <rand+0x68>)
 8017e26:	4b12      	ldr	r3, [pc, #72]	; (8017e70 <rand+0x6c>)
 8017e28:	e9c0 1300 	strd	r1, r3, [r0]
 8017e2c:	4b11      	ldr	r3, [pc, #68]	; (8017e74 <rand+0x70>)
 8017e2e:	6083      	str	r3, [r0, #8]
 8017e30:	230b      	movs	r3, #11
 8017e32:	8183      	strh	r3, [r0, #12]
 8017e34:	2100      	movs	r1, #0
 8017e36:	2001      	movs	r0, #1
 8017e38:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017e3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017e3e:	480e      	ldr	r0, [pc, #56]	; (8017e78 <rand+0x74>)
 8017e40:	690b      	ldr	r3, [r1, #16]
 8017e42:	694c      	ldr	r4, [r1, #20]
 8017e44:	4a0d      	ldr	r2, [pc, #52]	; (8017e7c <rand+0x78>)
 8017e46:	4358      	muls	r0, r3
 8017e48:	fb02 0004 	mla	r0, r2, r4, r0
 8017e4c:	fba3 3202 	umull	r3, r2, r3, r2
 8017e50:	3301      	adds	r3, #1
 8017e52:	eb40 0002 	adc.w	r0, r0, r2
 8017e56:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017e5a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017e5e:	bd10      	pop	{r4, pc}
 8017e60:	20000258 	.word	0x20000258
 8017e64:	0801bb4c 	.word	0x0801bb4c
 8017e68:	0801bb63 	.word	0x0801bb63
 8017e6c:	abcd330e 	.word	0xabcd330e
 8017e70:	e66d1234 	.word	0xe66d1234
 8017e74:	0005deec 	.word	0x0005deec
 8017e78:	5851f42d 	.word	0x5851f42d
 8017e7c:	4c957f2d 	.word	0x4c957f2d

08017e80 <_strtol_l.constprop.0>:
 8017e80:	2b01      	cmp	r3, #1
 8017e82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e86:	d001      	beq.n	8017e8c <_strtol_l.constprop.0+0xc>
 8017e88:	2b24      	cmp	r3, #36	; 0x24
 8017e8a:	d906      	bls.n	8017e9a <_strtol_l.constprop.0+0x1a>
 8017e8c:	f000 fa0c 	bl	80182a8 <__errno>
 8017e90:	2316      	movs	r3, #22
 8017e92:	6003      	str	r3, [r0, #0]
 8017e94:	2000      	movs	r0, #0
 8017e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e9a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017f80 <_strtol_l.constprop.0+0x100>
 8017e9e:	460d      	mov	r5, r1
 8017ea0:	462e      	mov	r6, r5
 8017ea2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017ea6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8017eaa:	f017 0708 	ands.w	r7, r7, #8
 8017eae:	d1f7      	bne.n	8017ea0 <_strtol_l.constprop.0+0x20>
 8017eb0:	2c2d      	cmp	r4, #45	; 0x2d
 8017eb2:	d132      	bne.n	8017f1a <_strtol_l.constprop.0+0x9a>
 8017eb4:	782c      	ldrb	r4, [r5, #0]
 8017eb6:	2701      	movs	r7, #1
 8017eb8:	1cb5      	adds	r5, r6, #2
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d05b      	beq.n	8017f76 <_strtol_l.constprop.0+0xf6>
 8017ebe:	2b10      	cmp	r3, #16
 8017ec0:	d109      	bne.n	8017ed6 <_strtol_l.constprop.0+0x56>
 8017ec2:	2c30      	cmp	r4, #48	; 0x30
 8017ec4:	d107      	bne.n	8017ed6 <_strtol_l.constprop.0+0x56>
 8017ec6:	782c      	ldrb	r4, [r5, #0]
 8017ec8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017ecc:	2c58      	cmp	r4, #88	; 0x58
 8017ece:	d14d      	bne.n	8017f6c <_strtol_l.constprop.0+0xec>
 8017ed0:	786c      	ldrb	r4, [r5, #1]
 8017ed2:	2310      	movs	r3, #16
 8017ed4:	3502      	adds	r5, #2
 8017ed6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017eda:	f108 38ff 	add.w	r8, r8, #4294967295
 8017ede:	f04f 0e00 	mov.w	lr, #0
 8017ee2:	fbb8 f9f3 	udiv	r9, r8, r3
 8017ee6:	4676      	mov	r6, lr
 8017ee8:	fb03 8a19 	mls	sl, r3, r9, r8
 8017eec:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017ef0:	f1bc 0f09 	cmp.w	ip, #9
 8017ef4:	d816      	bhi.n	8017f24 <_strtol_l.constprop.0+0xa4>
 8017ef6:	4664      	mov	r4, ip
 8017ef8:	42a3      	cmp	r3, r4
 8017efa:	dd24      	ble.n	8017f46 <_strtol_l.constprop.0+0xc6>
 8017efc:	f1be 3fff 	cmp.w	lr, #4294967295
 8017f00:	d008      	beq.n	8017f14 <_strtol_l.constprop.0+0x94>
 8017f02:	45b1      	cmp	r9, r6
 8017f04:	d31c      	bcc.n	8017f40 <_strtol_l.constprop.0+0xc0>
 8017f06:	d101      	bne.n	8017f0c <_strtol_l.constprop.0+0x8c>
 8017f08:	45a2      	cmp	sl, r4
 8017f0a:	db19      	blt.n	8017f40 <_strtol_l.constprop.0+0xc0>
 8017f0c:	fb06 4603 	mla	r6, r6, r3, r4
 8017f10:	f04f 0e01 	mov.w	lr, #1
 8017f14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017f18:	e7e8      	b.n	8017eec <_strtol_l.constprop.0+0x6c>
 8017f1a:	2c2b      	cmp	r4, #43	; 0x2b
 8017f1c:	bf04      	itt	eq
 8017f1e:	782c      	ldrbeq	r4, [r5, #0]
 8017f20:	1cb5      	addeq	r5, r6, #2
 8017f22:	e7ca      	b.n	8017eba <_strtol_l.constprop.0+0x3a>
 8017f24:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017f28:	f1bc 0f19 	cmp.w	ip, #25
 8017f2c:	d801      	bhi.n	8017f32 <_strtol_l.constprop.0+0xb2>
 8017f2e:	3c37      	subs	r4, #55	; 0x37
 8017f30:	e7e2      	b.n	8017ef8 <_strtol_l.constprop.0+0x78>
 8017f32:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017f36:	f1bc 0f19 	cmp.w	ip, #25
 8017f3a:	d804      	bhi.n	8017f46 <_strtol_l.constprop.0+0xc6>
 8017f3c:	3c57      	subs	r4, #87	; 0x57
 8017f3e:	e7db      	b.n	8017ef8 <_strtol_l.constprop.0+0x78>
 8017f40:	f04f 3eff 	mov.w	lr, #4294967295
 8017f44:	e7e6      	b.n	8017f14 <_strtol_l.constprop.0+0x94>
 8017f46:	f1be 3fff 	cmp.w	lr, #4294967295
 8017f4a:	d105      	bne.n	8017f58 <_strtol_l.constprop.0+0xd8>
 8017f4c:	2322      	movs	r3, #34	; 0x22
 8017f4e:	6003      	str	r3, [r0, #0]
 8017f50:	4646      	mov	r6, r8
 8017f52:	b942      	cbnz	r2, 8017f66 <_strtol_l.constprop.0+0xe6>
 8017f54:	4630      	mov	r0, r6
 8017f56:	e79e      	b.n	8017e96 <_strtol_l.constprop.0+0x16>
 8017f58:	b107      	cbz	r7, 8017f5c <_strtol_l.constprop.0+0xdc>
 8017f5a:	4276      	negs	r6, r6
 8017f5c:	2a00      	cmp	r2, #0
 8017f5e:	d0f9      	beq.n	8017f54 <_strtol_l.constprop.0+0xd4>
 8017f60:	f1be 0f00 	cmp.w	lr, #0
 8017f64:	d000      	beq.n	8017f68 <_strtol_l.constprop.0+0xe8>
 8017f66:	1e69      	subs	r1, r5, #1
 8017f68:	6011      	str	r1, [r2, #0]
 8017f6a:	e7f3      	b.n	8017f54 <_strtol_l.constprop.0+0xd4>
 8017f6c:	2430      	movs	r4, #48	; 0x30
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d1b1      	bne.n	8017ed6 <_strtol_l.constprop.0+0x56>
 8017f72:	2308      	movs	r3, #8
 8017f74:	e7af      	b.n	8017ed6 <_strtol_l.constprop.0+0x56>
 8017f76:	2c30      	cmp	r4, #48	; 0x30
 8017f78:	d0a5      	beq.n	8017ec6 <_strtol_l.constprop.0+0x46>
 8017f7a:	230a      	movs	r3, #10
 8017f7c:	e7ab      	b.n	8017ed6 <_strtol_l.constprop.0+0x56>
 8017f7e:	bf00      	nop
 8017f80:	0801bbbc 	.word	0x0801bbbc

08017f84 <strtol>:
 8017f84:	4613      	mov	r3, r2
 8017f86:	460a      	mov	r2, r1
 8017f88:	4601      	mov	r1, r0
 8017f8a:	4802      	ldr	r0, [pc, #8]	; (8017f94 <strtol+0x10>)
 8017f8c:	6800      	ldr	r0, [r0, #0]
 8017f8e:	f7ff bf77 	b.w	8017e80 <_strtol_l.constprop.0>
 8017f92:	bf00      	nop
 8017f94:	20000258 	.word	0x20000258

08017f98 <std>:
 8017f98:	2300      	movs	r3, #0
 8017f9a:	b510      	push	{r4, lr}
 8017f9c:	4604      	mov	r4, r0
 8017f9e:	e9c0 3300 	strd	r3, r3, [r0]
 8017fa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017fa6:	6083      	str	r3, [r0, #8]
 8017fa8:	8181      	strh	r1, [r0, #12]
 8017faa:	6643      	str	r3, [r0, #100]	; 0x64
 8017fac:	81c2      	strh	r2, [r0, #14]
 8017fae:	6183      	str	r3, [r0, #24]
 8017fb0:	4619      	mov	r1, r3
 8017fb2:	2208      	movs	r2, #8
 8017fb4:	305c      	adds	r0, #92	; 0x5c
 8017fb6:	f000 f916 	bl	80181e6 <memset>
 8017fba:	4b0d      	ldr	r3, [pc, #52]	; (8017ff0 <std+0x58>)
 8017fbc:	6263      	str	r3, [r4, #36]	; 0x24
 8017fbe:	4b0d      	ldr	r3, [pc, #52]	; (8017ff4 <std+0x5c>)
 8017fc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8017fc2:	4b0d      	ldr	r3, [pc, #52]	; (8017ff8 <std+0x60>)
 8017fc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017fc6:	4b0d      	ldr	r3, [pc, #52]	; (8017ffc <std+0x64>)
 8017fc8:	6323      	str	r3, [r4, #48]	; 0x30
 8017fca:	4b0d      	ldr	r3, [pc, #52]	; (8018000 <std+0x68>)
 8017fcc:	6224      	str	r4, [r4, #32]
 8017fce:	429c      	cmp	r4, r3
 8017fd0:	d006      	beq.n	8017fe0 <std+0x48>
 8017fd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017fd6:	4294      	cmp	r4, r2
 8017fd8:	d002      	beq.n	8017fe0 <std+0x48>
 8017fda:	33d0      	adds	r3, #208	; 0xd0
 8017fdc:	429c      	cmp	r4, r3
 8017fde:	d105      	bne.n	8017fec <std+0x54>
 8017fe0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fe8:	f000 b988 	b.w	80182fc <__retarget_lock_init_recursive>
 8017fec:	bd10      	pop	{r4, pc}
 8017fee:	bf00      	nop
 8017ff0:	08018141 	.word	0x08018141
 8017ff4:	08018163 	.word	0x08018163
 8017ff8:	0801819b 	.word	0x0801819b
 8017ffc:	080181bf 	.word	0x080181bf
 8018000:	2000a63c 	.word	0x2000a63c

08018004 <stdio_exit_handler>:
 8018004:	4a02      	ldr	r2, [pc, #8]	; (8018010 <stdio_exit_handler+0xc>)
 8018006:	4903      	ldr	r1, [pc, #12]	; (8018014 <stdio_exit_handler+0x10>)
 8018008:	4803      	ldr	r0, [pc, #12]	; (8018018 <stdio_exit_handler+0x14>)
 801800a:	f000 b869 	b.w	80180e0 <_fwalk_sglue>
 801800e:	bf00      	nop
 8018010:	20000200 	.word	0x20000200
 8018014:	08018c11 	.word	0x08018c11
 8018018:	2000020c 	.word	0x2000020c

0801801c <cleanup_stdio>:
 801801c:	6841      	ldr	r1, [r0, #4]
 801801e:	4b0c      	ldr	r3, [pc, #48]	; (8018050 <cleanup_stdio+0x34>)
 8018020:	4299      	cmp	r1, r3
 8018022:	b510      	push	{r4, lr}
 8018024:	4604      	mov	r4, r0
 8018026:	d001      	beq.n	801802c <cleanup_stdio+0x10>
 8018028:	f000 fdf2 	bl	8018c10 <_fflush_r>
 801802c:	68a1      	ldr	r1, [r4, #8]
 801802e:	4b09      	ldr	r3, [pc, #36]	; (8018054 <cleanup_stdio+0x38>)
 8018030:	4299      	cmp	r1, r3
 8018032:	d002      	beq.n	801803a <cleanup_stdio+0x1e>
 8018034:	4620      	mov	r0, r4
 8018036:	f000 fdeb 	bl	8018c10 <_fflush_r>
 801803a:	68e1      	ldr	r1, [r4, #12]
 801803c:	4b06      	ldr	r3, [pc, #24]	; (8018058 <cleanup_stdio+0x3c>)
 801803e:	4299      	cmp	r1, r3
 8018040:	d004      	beq.n	801804c <cleanup_stdio+0x30>
 8018042:	4620      	mov	r0, r4
 8018044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018048:	f000 bde2 	b.w	8018c10 <_fflush_r>
 801804c:	bd10      	pop	{r4, pc}
 801804e:	bf00      	nop
 8018050:	2000a63c 	.word	0x2000a63c
 8018054:	2000a6a4 	.word	0x2000a6a4
 8018058:	2000a70c 	.word	0x2000a70c

0801805c <global_stdio_init.part.0>:
 801805c:	b510      	push	{r4, lr}
 801805e:	4b0b      	ldr	r3, [pc, #44]	; (801808c <global_stdio_init.part.0+0x30>)
 8018060:	4c0b      	ldr	r4, [pc, #44]	; (8018090 <global_stdio_init.part.0+0x34>)
 8018062:	4a0c      	ldr	r2, [pc, #48]	; (8018094 <global_stdio_init.part.0+0x38>)
 8018064:	601a      	str	r2, [r3, #0]
 8018066:	4620      	mov	r0, r4
 8018068:	2200      	movs	r2, #0
 801806a:	2104      	movs	r1, #4
 801806c:	f7ff ff94 	bl	8017f98 <std>
 8018070:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018074:	2201      	movs	r2, #1
 8018076:	2109      	movs	r1, #9
 8018078:	f7ff ff8e 	bl	8017f98 <std>
 801807c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018080:	2202      	movs	r2, #2
 8018082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018086:	2112      	movs	r1, #18
 8018088:	f7ff bf86 	b.w	8017f98 <std>
 801808c:	2000a774 	.word	0x2000a774
 8018090:	2000a63c 	.word	0x2000a63c
 8018094:	08018005 	.word	0x08018005

08018098 <__sfp_lock_acquire>:
 8018098:	4801      	ldr	r0, [pc, #4]	; (80180a0 <__sfp_lock_acquire+0x8>)
 801809a:	f000 b930 	b.w	80182fe <__retarget_lock_acquire_recursive>
 801809e:	bf00      	nop
 80180a0:	2000a77d 	.word	0x2000a77d

080180a4 <__sfp_lock_release>:
 80180a4:	4801      	ldr	r0, [pc, #4]	; (80180ac <__sfp_lock_release+0x8>)
 80180a6:	f000 b92b 	b.w	8018300 <__retarget_lock_release_recursive>
 80180aa:	bf00      	nop
 80180ac:	2000a77d 	.word	0x2000a77d

080180b0 <__sinit>:
 80180b0:	b510      	push	{r4, lr}
 80180b2:	4604      	mov	r4, r0
 80180b4:	f7ff fff0 	bl	8018098 <__sfp_lock_acquire>
 80180b8:	6a23      	ldr	r3, [r4, #32]
 80180ba:	b11b      	cbz	r3, 80180c4 <__sinit+0x14>
 80180bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180c0:	f7ff bff0 	b.w	80180a4 <__sfp_lock_release>
 80180c4:	4b04      	ldr	r3, [pc, #16]	; (80180d8 <__sinit+0x28>)
 80180c6:	6223      	str	r3, [r4, #32]
 80180c8:	4b04      	ldr	r3, [pc, #16]	; (80180dc <__sinit+0x2c>)
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d1f5      	bne.n	80180bc <__sinit+0xc>
 80180d0:	f7ff ffc4 	bl	801805c <global_stdio_init.part.0>
 80180d4:	e7f2      	b.n	80180bc <__sinit+0xc>
 80180d6:	bf00      	nop
 80180d8:	0801801d 	.word	0x0801801d
 80180dc:	2000a774 	.word	0x2000a774

080180e0 <_fwalk_sglue>:
 80180e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80180e4:	4607      	mov	r7, r0
 80180e6:	4688      	mov	r8, r1
 80180e8:	4614      	mov	r4, r2
 80180ea:	2600      	movs	r6, #0
 80180ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80180f0:	f1b9 0901 	subs.w	r9, r9, #1
 80180f4:	d505      	bpl.n	8018102 <_fwalk_sglue+0x22>
 80180f6:	6824      	ldr	r4, [r4, #0]
 80180f8:	2c00      	cmp	r4, #0
 80180fa:	d1f7      	bne.n	80180ec <_fwalk_sglue+0xc>
 80180fc:	4630      	mov	r0, r6
 80180fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018102:	89ab      	ldrh	r3, [r5, #12]
 8018104:	2b01      	cmp	r3, #1
 8018106:	d907      	bls.n	8018118 <_fwalk_sglue+0x38>
 8018108:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801810c:	3301      	adds	r3, #1
 801810e:	d003      	beq.n	8018118 <_fwalk_sglue+0x38>
 8018110:	4629      	mov	r1, r5
 8018112:	4638      	mov	r0, r7
 8018114:	47c0      	blx	r8
 8018116:	4306      	orrs	r6, r0
 8018118:	3568      	adds	r5, #104	; 0x68
 801811a:	e7e9      	b.n	80180f0 <_fwalk_sglue+0x10>

0801811c <iprintf>:
 801811c:	b40f      	push	{r0, r1, r2, r3}
 801811e:	b507      	push	{r0, r1, r2, lr}
 8018120:	4906      	ldr	r1, [pc, #24]	; (801813c <iprintf+0x20>)
 8018122:	ab04      	add	r3, sp, #16
 8018124:	6808      	ldr	r0, [r1, #0]
 8018126:	f853 2b04 	ldr.w	r2, [r3], #4
 801812a:	6881      	ldr	r1, [r0, #8]
 801812c:	9301      	str	r3, [sp, #4]
 801812e:	f000 fa3f 	bl	80185b0 <_vfiprintf_r>
 8018132:	b003      	add	sp, #12
 8018134:	f85d eb04 	ldr.w	lr, [sp], #4
 8018138:	b004      	add	sp, #16
 801813a:	4770      	bx	lr
 801813c:	20000258 	.word	0x20000258

08018140 <__sread>:
 8018140:	b510      	push	{r4, lr}
 8018142:	460c      	mov	r4, r1
 8018144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018148:	f000 f88a 	bl	8018260 <_read_r>
 801814c:	2800      	cmp	r0, #0
 801814e:	bfab      	itete	ge
 8018150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018152:	89a3      	ldrhlt	r3, [r4, #12]
 8018154:	181b      	addge	r3, r3, r0
 8018156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801815a:	bfac      	ite	ge
 801815c:	6563      	strge	r3, [r4, #84]	; 0x54
 801815e:	81a3      	strhlt	r3, [r4, #12]
 8018160:	bd10      	pop	{r4, pc}

08018162 <__swrite>:
 8018162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018166:	461f      	mov	r7, r3
 8018168:	898b      	ldrh	r3, [r1, #12]
 801816a:	05db      	lsls	r3, r3, #23
 801816c:	4605      	mov	r5, r0
 801816e:	460c      	mov	r4, r1
 8018170:	4616      	mov	r6, r2
 8018172:	d505      	bpl.n	8018180 <__swrite+0x1e>
 8018174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018178:	2302      	movs	r3, #2
 801817a:	2200      	movs	r2, #0
 801817c:	f000 f85e 	bl	801823c <_lseek_r>
 8018180:	89a3      	ldrh	r3, [r4, #12]
 8018182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801818a:	81a3      	strh	r3, [r4, #12]
 801818c:	4632      	mov	r2, r6
 801818e:	463b      	mov	r3, r7
 8018190:	4628      	mov	r0, r5
 8018192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018196:	f000 b875 	b.w	8018284 <_write_r>

0801819a <__sseek>:
 801819a:	b510      	push	{r4, lr}
 801819c:	460c      	mov	r4, r1
 801819e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181a2:	f000 f84b 	bl	801823c <_lseek_r>
 80181a6:	1c43      	adds	r3, r0, #1
 80181a8:	89a3      	ldrh	r3, [r4, #12]
 80181aa:	bf15      	itete	ne
 80181ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80181ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80181b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80181b6:	81a3      	strheq	r3, [r4, #12]
 80181b8:	bf18      	it	ne
 80181ba:	81a3      	strhne	r3, [r4, #12]
 80181bc:	bd10      	pop	{r4, pc}

080181be <__sclose>:
 80181be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181c2:	f000 b82b 	b.w	801821c <_close_r>

080181c6 <memcmp>:
 80181c6:	b510      	push	{r4, lr}
 80181c8:	3901      	subs	r1, #1
 80181ca:	4402      	add	r2, r0
 80181cc:	4290      	cmp	r0, r2
 80181ce:	d101      	bne.n	80181d4 <memcmp+0xe>
 80181d0:	2000      	movs	r0, #0
 80181d2:	e005      	b.n	80181e0 <memcmp+0x1a>
 80181d4:	7803      	ldrb	r3, [r0, #0]
 80181d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80181da:	42a3      	cmp	r3, r4
 80181dc:	d001      	beq.n	80181e2 <memcmp+0x1c>
 80181de:	1b18      	subs	r0, r3, r4
 80181e0:	bd10      	pop	{r4, pc}
 80181e2:	3001      	adds	r0, #1
 80181e4:	e7f2      	b.n	80181cc <memcmp+0x6>

080181e6 <memset>:
 80181e6:	4402      	add	r2, r0
 80181e8:	4603      	mov	r3, r0
 80181ea:	4293      	cmp	r3, r2
 80181ec:	d100      	bne.n	80181f0 <memset+0xa>
 80181ee:	4770      	bx	lr
 80181f0:	f803 1b01 	strb.w	r1, [r3], #1
 80181f4:	e7f9      	b.n	80181ea <memset+0x4>

080181f6 <strncpy>:
 80181f6:	b510      	push	{r4, lr}
 80181f8:	3901      	subs	r1, #1
 80181fa:	4603      	mov	r3, r0
 80181fc:	b132      	cbz	r2, 801820c <strncpy+0x16>
 80181fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018202:	f803 4b01 	strb.w	r4, [r3], #1
 8018206:	3a01      	subs	r2, #1
 8018208:	2c00      	cmp	r4, #0
 801820a:	d1f7      	bne.n	80181fc <strncpy+0x6>
 801820c:	441a      	add	r2, r3
 801820e:	2100      	movs	r1, #0
 8018210:	4293      	cmp	r3, r2
 8018212:	d100      	bne.n	8018216 <strncpy+0x20>
 8018214:	bd10      	pop	{r4, pc}
 8018216:	f803 1b01 	strb.w	r1, [r3], #1
 801821a:	e7f9      	b.n	8018210 <strncpy+0x1a>

0801821c <_close_r>:
 801821c:	b538      	push	{r3, r4, r5, lr}
 801821e:	4d06      	ldr	r5, [pc, #24]	; (8018238 <_close_r+0x1c>)
 8018220:	2300      	movs	r3, #0
 8018222:	4604      	mov	r4, r0
 8018224:	4608      	mov	r0, r1
 8018226:	602b      	str	r3, [r5, #0]
 8018228:	f7e8 fc99 	bl	8000b5e <_close>
 801822c:	1c43      	adds	r3, r0, #1
 801822e:	d102      	bne.n	8018236 <_close_r+0x1a>
 8018230:	682b      	ldr	r3, [r5, #0]
 8018232:	b103      	cbz	r3, 8018236 <_close_r+0x1a>
 8018234:	6023      	str	r3, [r4, #0]
 8018236:	bd38      	pop	{r3, r4, r5, pc}
 8018238:	2000a778 	.word	0x2000a778

0801823c <_lseek_r>:
 801823c:	b538      	push	{r3, r4, r5, lr}
 801823e:	4d07      	ldr	r5, [pc, #28]	; (801825c <_lseek_r+0x20>)
 8018240:	4604      	mov	r4, r0
 8018242:	4608      	mov	r0, r1
 8018244:	4611      	mov	r1, r2
 8018246:	2200      	movs	r2, #0
 8018248:	602a      	str	r2, [r5, #0]
 801824a:	461a      	mov	r2, r3
 801824c:	f7e8 fcae 	bl	8000bac <_lseek>
 8018250:	1c43      	adds	r3, r0, #1
 8018252:	d102      	bne.n	801825a <_lseek_r+0x1e>
 8018254:	682b      	ldr	r3, [r5, #0]
 8018256:	b103      	cbz	r3, 801825a <_lseek_r+0x1e>
 8018258:	6023      	str	r3, [r4, #0]
 801825a:	bd38      	pop	{r3, r4, r5, pc}
 801825c:	2000a778 	.word	0x2000a778

08018260 <_read_r>:
 8018260:	b538      	push	{r3, r4, r5, lr}
 8018262:	4d07      	ldr	r5, [pc, #28]	; (8018280 <_read_r+0x20>)
 8018264:	4604      	mov	r4, r0
 8018266:	4608      	mov	r0, r1
 8018268:	4611      	mov	r1, r2
 801826a:	2200      	movs	r2, #0
 801826c:	602a      	str	r2, [r5, #0]
 801826e:	461a      	mov	r2, r3
 8018270:	f7e8 fc3c 	bl	8000aec <_read>
 8018274:	1c43      	adds	r3, r0, #1
 8018276:	d102      	bne.n	801827e <_read_r+0x1e>
 8018278:	682b      	ldr	r3, [r5, #0]
 801827a:	b103      	cbz	r3, 801827e <_read_r+0x1e>
 801827c:	6023      	str	r3, [r4, #0]
 801827e:	bd38      	pop	{r3, r4, r5, pc}
 8018280:	2000a778 	.word	0x2000a778

08018284 <_write_r>:
 8018284:	b538      	push	{r3, r4, r5, lr}
 8018286:	4d07      	ldr	r5, [pc, #28]	; (80182a4 <_write_r+0x20>)
 8018288:	4604      	mov	r4, r0
 801828a:	4608      	mov	r0, r1
 801828c:	4611      	mov	r1, r2
 801828e:	2200      	movs	r2, #0
 8018290:	602a      	str	r2, [r5, #0]
 8018292:	461a      	mov	r2, r3
 8018294:	f7e8 fc47 	bl	8000b26 <_write>
 8018298:	1c43      	adds	r3, r0, #1
 801829a:	d102      	bne.n	80182a2 <_write_r+0x1e>
 801829c:	682b      	ldr	r3, [r5, #0]
 801829e:	b103      	cbz	r3, 80182a2 <_write_r+0x1e>
 80182a0:	6023      	str	r3, [r4, #0]
 80182a2:	bd38      	pop	{r3, r4, r5, pc}
 80182a4:	2000a778 	.word	0x2000a778

080182a8 <__errno>:
 80182a8:	4b01      	ldr	r3, [pc, #4]	; (80182b0 <__errno+0x8>)
 80182aa:	6818      	ldr	r0, [r3, #0]
 80182ac:	4770      	bx	lr
 80182ae:	bf00      	nop
 80182b0:	20000258 	.word	0x20000258

080182b4 <__libc_init_array>:
 80182b4:	b570      	push	{r4, r5, r6, lr}
 80182b6:	4d0d      	ldr	r5, [pc, #52]	; (80182ec <__libc_init_array+0x38>)
 80182b8:	4c0d      	ldr	r4, [pc, #52]	; (80182f0 <__libc_init_array+0x3c>)
 80182ba:	1b64      	subs	r4, r4, r5
 80182bc:	10a4      	asrs	r4, r4, #2
 80182be:	2600      	movs	r6, #0
 80182c0:	42a6      	cmp	r6, r4
 80182c2:	d109      	bne.n	80182d8 <__libc_init_array+0x24>
 80182c4:	4d0b      	ldr	r5, [pc, #44]	; (80182f4 <__libc_init_array+0x40>)
 80182c6:	4c0c      	ldr	r4, [pc, #48]	; (80182f8 <__libc_init_array+0x44>)
 80182c8:	f000 fe52 	bl	8018f70 <_init>
 80182cc:	1b64      	subs	r4, r4, r5
 80182ce:	10a4      	asrs	r4, r4, #2
 80182d0:	2600      	movs	r6, #0
 80182d2:	42a6      	cmp	r6, r4
 80182d4:	d105      	bne.n	80182e2 <__libc_init_array+0x2e>
 80182d6:	bd70      	pop	{r4, r5, r6, pc}
 80182d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80182dc:	4798      	blx	r3
 80182de:	3601      	adds	r6, #1
 80182e0:	e7ee      	b.n	80182c0 <__libc_init_array+0xc>
 80182e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80182e6:	4798      	blx	r3
 80182e8:	3601      	adds	r6, #1
 80182ea:	e7f2      	b.n	80182d2 <__libc_init_array+0x1e>
 80182ec:	0801bd34 	.word	0x0801bd34
 80182f0:	0801bd34 	.word	0x0801bd34
 80182f4:	0801bd34 	.word	0x0801bd34
 80182f8:	0801bd38 	.word	0x0801bd38

080182fc <__retarget_lock_init_recursive>:
 80182fc:	4770      	bx	lr

080182fe <__retarget_lock_acquire_recursive>:
 80182fe:	4770      	bx	lr

08018300 <__retarget_lock_release_recursive>:
 8018300:	4770      	bx	lr

08018302 <memcpy>:
 8018302:	440a      	add	r2, r1
 8018304:	4291      	cmp	r1, r2
 8018306:	f100 33ff 	add.w	r3, r0, #4294967295
 801830a:	d100      	bne.n	801830e <memcpy+0xc>
 801830c:	4770      	bx	lr
 801830e:	b510      	push	{r4, lr}
 8018310:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018314:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018318:	4291      	cmp	r1, r2
 801831a:	d1f9      	bne.n	8018310 <memcpy+0xe>
 801831c:	bd10      	pop	{r4, pc}
	...

08018320 <__assert_func>:
 8018320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018322:	4614      	mov	r4, r2
 8018324:	461a      	mov	r2, r3
 8018326:	4b09      	ldr	r3, [pc, #36]	; (801834c <__assert_func+0x2c>)
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	4605      	mov	r5, r0
 801832c:	68d8      	ldr	r0, [r3, #12]
 801832e:	b14c      	cbz	r4, 8018344 <__assert_func+0x24>
 8018330:	4b07      	ldr	r3, [pc, #28]	; (8018350 <__assert_func+0x30>)
 8018332:	9100      	str	r1, [sp, #0]
 8018334:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018338:	4906      	ldr	r1, [pc, #24]	; (8018354 <__assert_func+0x34>)
 801833a:	462b      	mov	r3, r5
 801833c:	f000 fc90 	bl	8018c60 <fiprintf>
 8018340:	f000 fd46 	bl	8018dd0 <abort>
 8018344:	4b04      	ldr	r3, [pc, #16]	; (8018358 <__assert_func+0x38>)
 8018346:	461c      	mov	r4, r3
 8018348:	e7f3      	b.n	8018332 <__assert_func+0x12>
 801834a:	bf00      	nop
 801834c:	20000258 	.word	0x20000258
 8018350:	0801bcbc 	.word	0x0801bcbc
 8018354:	0801bcc9 	.word	0x0801bcc9
 8018358:	0801bcf7 	.word	0x0801bcf7

0801835c <_free_r>:
 801835c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801835e:	2900      	cmp	r1, #0
 8018360:	d044      	beq.n	80183ec <_free_r+0x90>
 8018362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018366:	9001      	str	r0, [sp, #4]
 8018368:	2b00      	cmp	r3, #0
 801836a:	f1a1 0404 	sub.w	r4, r1, #4
 801836e:	bfb8      	it	lt
 8018370:	18e4      	addlt	r4, r4, r3
 8018372:	f000 f8e7 	bl	8018544 <__malloc_lock>
 8018376:	4a1e      	ldr	r2, [pc, #120]	; (80183f0 <_free_r+0x94>)
 8018378:	9801      	ldr	r0, [sp, #4]
 801837a:	6813      	ldr	r3, [r2, #0]
 801837c:	b933      	cbnz	r3, 801838c <_free_r+0x30>
 801837e:	6063      	str	r3, [r4, #4]
 8018380:	6014      	str	r4, [r2, #0]
 8018382:	b003      	add	sp, #12
 8018384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018388:	f000 b8e2 	b.w	8018550 <__malloc_unlock>
 801838c:	42a3      	cmp	r3, r4
 801838e:	d908      	bls.n	80183a2 <_free_r+0x46>
 8018390:	6825      	ldr	r5, [r4, #0]
 8018392:	1961      	adds	r1, r4, r5
 8018394:	428b      	cmp	r3, r1
 8018396:	bf01      	itttt	eq
 8018398:	6819      	ldreq	r1, [r3, #0]
 801839a:	685b      	ldreq	r3, [r3, #4]
 801839c:	1949      	addeq	r1, r1, r5
 801839e:	6021      	streq	r1, [r4, #0]
 80183a0:	e7ed      	b.n	801837e <_free_r+0x22>
 80183a2:	461a      	mov	r2, r3
 80183a4:	685b      	ldr	r3, [r3, #4]
 80183a6:	b10b      	cbz	r3, 80183ac <_free_r+0x50>
 80183a8:	42a3      	cmp	r3, r4
 80183aa:	d9fa      	bls.n	80183a2 <_free_r+0x46>
 80183ac:	6811      	ldr	r1, [r2, #0]
 80183ae:	1855      	adds	r5, r2, r1
 80183b0:	42a5      	cmp	r5, r4
 80183b2:	d10b      	bne.n	80183cc <_free_r+0x70>
 80183b4:	6824      	ldr	r4, [r4, #0]
 80183b6:	4421      	add	r1, r4
 80183b8:	1854      	adds	r4, r2, r1
 80183ba:	42a3      	cmp	r3, r4
 80183bc:	6011      	str	r1, [r2, #0]
 80183be:	d1e0      	bne.n	8018382 <_free_r+0x26>
 80183c0:	681c      	ldr	r4, [r3, #0]
 80183c2:	685b      	ldr	r3, [r3, #4]
 80183c4:	6053      	str	r3, [r2, #4]
 80183c6:	440c      	add	r4, r1
 80183c8:	6014      	str	r4, [r2, #0]
 80183ca:	e7da      	b.n	8018382 <_free_r+0x26>
 80183cc:	d902      	bls.n	80183d4 <_free_r+0x78>
 80183ce:	230c      	movs	r3, #12
 80183d0:	6003      	str	r3, [r0, #0]
 80183d2:	e7d6      	b.n	8018382 <_free_r+0x26>
 80183d4:	6825      	ldr	r5, [r4, #0]
 80183d6:	1961      	adds	r1, r4, r5
 80183d8:	428b      	cmp	r3, r1
 80183da:	bf04      	itt	eq
 80183dc:	6819      	ldreq	r1, [r3, #0]
 80183de:	685b      	ldreq	r3, [r3, #4]
 80183e0:	6063      	str	r3, [r4, #4]
 80183e2:	bf04      	itt	eq
 80183e4:	1949      	addeq	r1, r1, r5
 80183e6:	6021      	streq	r1, [r4, #0]
 80183e8:	6054      	str	r4, [r2, #4]
 80183ea:	e7ca      	b.n	8018382 <_free_r+0x26>
 80183ec:	b003      	add	sp, #12
 80183ee:	bd30      	pop	{r4, r5, pc}
 80183f0:	2000a780 	.word	0x2000a780

080183f4 <malloc>:
 80183f4:	4b02      	ldr	r3, [pc, #8]	; (8018400 <malloc+0xc>)
 80183f6:	4601      	mov	r1, r0
 80183f8:	6818      	ldr	r0, [r3, #0]
 80183fa:	f000 b823 	b.w	8018444 <_malloc_r>
 80183fe:	bf00      	nop
 8018400:	20000258 	.word	0x20000258

08018404 <sbrk_aligned>:
 8018404:	b570      	push	{r4, r5, r6, lr}
 8018406:	4e0e      	ldr	r6, [pc, #56]	; (8018440 <sbrk_aligned+0x3c>)
 8018408:	460c      	mov	r4, r1
 801840a:	6831      	ldr	r1, [r6, #0]
 801840c:	4605      	mov	r5, r0
 801840e:	b911      	cbnz	r1, 8018416 <sbrk_aligned+0x12>
 8018410:	f000 fcce 	bl	8018db0 <_sbrk_r>
 8018414:	6030      	str	r0, [r6, #0]
 8018416:	4621      	mov	r1, r4
 8018418:	4628      	mov	r0, r5
 801841a:	f000 fcc9 	bl	8018db0 <_sbrk_r>
 801841e:	1c43      	adds	r3, r0, #1
 8018420:	d00a      	beq.n	8018438 <sbrk_aligned+0x34>
 8018422:	1cc4      	adds	r4, r0, #3
 8018424:	f024 0403 	bic.w	r4, r4, #3
 8018428:	42a0      	cmp	r0, r4
 801842a:	d007      	beq.n	801843c <sbrk_aligned+0x38>
 801842c:	1a21      	subs	r1, r4, r0
 801842e:	4628      	mov	r0, r5
 8018430:	f000 fcbe 	bl	8018db0 <_sbrk_r>
 8018434:	3001      	adds	r0, #1
 8018436:	d101      	bne.n	801843c <sbrk_aligned+0x38>
 8018438:	f04f 34ff 	mov.w	r4, #4294967295
 801843c:	4620      	mov	r0, r4
 801843e:	bd70      	pop	{r4, r5, r6, pc}
 8018440:	2000a784 	.word	0x2000a784

08018444 <_malloc_r>:
 8018444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018448:	1ccd      	adds	r5, r1, #3
 801844a:	f025 0503 	bic.w	r5, r5, #3
 801844e:	3508      	adds	r5, #8
 8018450:	2d0c      	cmp	r5, #12
 8018452:	bf38      	it	cc
 8018454:	250c      	movcc	r5, #12
 8018456:	2d00      	cmp	r5, #0
 8018458:	4607      	mov	r7, r0
 801845a:	db01      	blt.n	8018460 <_malloc_r+0x1c>
 801845c:	42a9      	cmp	r1, r5
 801845e:	d905      	bls.n	801846c <_malloc_r+0x28>
 8018460:	230c      	movs	r3, #12
 8018462:	603b      	str	r3, [r7, #0]
 8018464:	2600      	movs	r6, #0
 8018466:	4630      	mov	r0, r6
 8018468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801846c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018540 <_malloc_r+0xfc>
 8018470:	f000 f868 	bl	8018544 <__malloc_lock>
 8018474:	f8d8 3000 	ldr.w	r3, [r8]
 8018478:	461c      	mov	r4, r3
 801847a:	bb5c      	cbnz	r4, 80184d4 <_malloc_r+0x90>
 801847c:	4629      	mov	r1, r5
 801847e:	4638      	mov	r0, r7
 8018480:	f7ff ffc0 	bl	8018404 <sbrk_aligned>
 8018484:	1c43      	adds	r3, r0, #1
 8018486:	4604      	mov	r4, r0
 8018488:	d155      	bne.n	8018536 <_malloc_r+0xf2>
 801848a:	f8d8 4000 	ldr.w	r4, [r8]
 801848e:	4626      	mov	r6, r4
 8018490:	2e00      	cmp	r6, #0
 8018492:	d145      	bne.n	8018520 <_malloc_r+0xdc>
 8018494:	2c00      	cmp	r4, #0
 8018496:	d048      	beq.n	801852a <_malloc_r+0xe6>
 8018498:	6823      	ldr	r3, [r4, #0]
 801849a:	4631      	mov	r1, r6
 801849c:	4638      	mov	r0, r7
 801849e:	eb04 0903 	add.w	r9, r4, r3
 80184a2:	f000 fc85 	bl	8018db0 <_sbrk_r>
 80184a6:	4581      	cmp	r9, r0
 80184a8:	d13f      	bne.n	801852a <_malloc_r+0xe6>
 80184aa:	6821      	ldr	r1, [r4, #0]
 80184ac:	1a6d      	subs	r5, r5, r1
 80184ae:	4629      	mov	r1, r5
 80184b0:	4638      	mov	r0, r7
 80184b2:	f7ff ffa7 	bl	8018404 <sbrk_aligned>
 80184b6:	3001      	adds	r0, #1
 80184b8:	d037      	beq.n	801852a <_malloc_r+0xe6>
 80184ba:	6823      	ldr	r3, [r4, #0]
 80184bc:	442b      	add	r3, r5
 80184be:	6023      	str	r3, [r4, #0]
 80184c0:	f8d8 3000 	ldr.w	r3, [r8]
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d038      	beq.n	801853a <_malloc_r+0xf6>
 80184c8:	685a      	ldr	r2, [r3, #4]
 80184ca:	42a2      	cmp	r2, r4
 80184cc:	d12b      	bne.n	8018526 <_malloc_r+0xe2>
 80184ce:	2200      	movs	r2, #0
 80184d0:	605a      	str	r2, [r3, #4]
 80184d2:	e00f      	b.n	80184f4 <_malloc_r+0xb0>
 80184d4:	6822      	ldr	r2, [r4, #0]
 80184d6:	1b52      	subs	r2, r2, r5
 80184d8:	d41f      	bmi.n	801851a <_malloc_r+0xd6>
 80184da:	2a0b      	cmp	r2, #11
 80184dc:	d917      	bls.n	801850e <_malloc_r+0xca>
 80184de:	1961      	adds	r1, r4, r5
 80184e0:	42a3      	cmp	r3, r4
 80184e2:	6025      	str	r5, [r4, #0]
 80184e4:	bf18      	it	ne
 80184e6:	6059      	strne	r1, [r3, #4]
 80184e8:	6863      	ldr	r3, [r4, #4]
 80184ea:	bf08      	it	eq
 80184ec:	f8c8 1000 	streq.w	r1, [r8]
 80184f0:	5162      	str	r2, [r4, r5]
 80184f2:	604b      	str	r3, [r1, #4]
 80184f4:	4638      	mov	r0, r7
 80184f6:	f104 060b 	add.w	r6, r4, #11
 80184fa:	f000 f829 	bl	8018550 <__malloc_unlock>
 80184fe:	f026 0607 	bic.w	r6, r6, #7
 8018502:	1d23      	adds	r3, r4, #4
 8018504:	1af2      	subs	r2, r6, r3
 8018506:	d0ae      	beq.n	8018466 <_malloc_r+0x22>
 8018508:	1b9b      	subs	r3, r3, r6
 801850a:	50a3      	str	r3, [r4, r2]
 801850c:	e7ab      	b.n	8018466 <_malloc_r+0x22>
 801850e:	42a3      	cmp	r3, r4
 8018510:	6862      	ldr	r2, [r4, #4]
 8018512:	d1dd      	bne.n	80184d0 <_malloc_r+0x8c>
 8018514:	f8c8 2000 	str.w	r2, [r8]
 8018518:	e7ec      	b.n	80184f4 <_malloc_r+0xb0>
 801851a:	4623      	mov	r3, r4
 801851c:	6864      	ldr	r4, [r4, #4]
 801851e:	e7ac      	b.n	801847a <_malloc_r+0x36>
 8018520:	4634      	mov	r4, r6
 8018522:	6876      	ldr	r6, [r6, #4]
 8018524:	e7b4      	b.n	8018490 <_malloc_r+0x4c>
 8018526:	4613      	mov	r3, r2
 8018528:	e7cc      	b.n	80184c4 <_malloc_r+0x80>
 801852a:	230c      	movs	r3, #12
 801852c:	603b      	str	r3, [r7, #0]
 801852e:	4638      	mov	r0, r7
 8018530:	f000 f80e 	bl	8018550 <__malloc_unlock>
 8018534:	e797      	b.n	8018466 <_malloc_r+0x22>
 8018536:	6025      	str	r5, [r4, #0]
 8018538:	e7dc      	b.n	80184f4 <_malloc_r+0xb0>
 801853a:	605b      	str	r3, [r3, #4]
 801853c:	deff      	udf	#255	; 0xff
 801853e:	bf00      	nop
 8018540:	2000a780 	.word	0x2000a780

08018544 <__malloc_lock>:
 8018544:	4801      	ldr	r0, [pc, #4]	; (801854c <__malloc_lock+0x8>)
 8018546:	f7ff beda 	b.w	80182fe <__retarget_lock_acquire_recursive>
 801854a:	bf00      	nop
 801854c:	2000a77c 	.word	0x2000a77c

08018550 <__malloc_unlock>:
 8018550:	4801      	ldr	r0, [pc, #4]	; (8018558 <__malloc_unlock+0x8>)
 8018552:	f7ff bed5 	b.w	8018300 <__retarget_lock_release_recursive>
 8018556:	bf00      	nop
 8018558:	2000a77c 	.word	0x2000a77c

0801855c <__sfputc_r>:
 801855c:	6893      	ldr	r3, [r2, #8]
 801855e:	3b01      	subs	r3, #1
 8018560:	2b00      	cmp	r3, #0
 8018562:	b410      	push	{r4}
 8018564:	6093      	str	r3, [r2, #8]
 8018566:	da08      	bge.n	801857a <__sfputc_r+0x1e>
 8018568:	6994      	ldr	r4, [r2, #24]
 801856a:	42a3      	cmp	r3, r4
 801856c:	db01      	blt.n	8018572 <__sfputc_r+0x16>
 801856e:	290a      	cmp	r1, #10
 8018570:	d103      	bne.n	801857a <__sfputc_r+0x1e>
 8018572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018576:	f000 bb85 	b.w	8018c84 <__swbuf_r>
 801857a:	6813      	ldr	r3, [r2, #0]
 801857c:	1c58      	adds	r0, r3, #1
 801857e:	6010      	str	r0, [r2, #0]
 8018580:	7019      	strb	r1, [r3, #0]
 8018582:	4608      	mov	r0, r1
 8018584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018588:	4770      	bx	lr

0801858a <__sfputs_r>:
 801858a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801858c:	4606      	mov	r6, r0
 801858e:	460f      	mov	r7, r1
 8018590:	4614      	mov	r4, r2
 8018592:	18d5      	adds	r5, r2, r3
 8018594:	42ac      	cmp	r4, r5
 8018596:	d101      	bne.n	801859c <__sfputs_r+0x12>
 8018598:	2000      	movs	r0, #0
 801859a:	e007      	b.n	80185ac <__sfputs_r+0x22>
 801859c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185a0:	463a      	mov	r2, r7
 80185a2:	4630      	mov	r0, r6
 80185a4:	f7ff ffda 	bl	801855c <__sfputc_r>
 80185a8:	1c43      	adds	r3, r0, #1
 80185aa:	d1f3      	bne.n	8018594 <__sfputs_r+0xa>
 80185ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080185b0 <_vfiprintf_r>:
 80185b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185b4:	460d      	mov	r5, r1
 80185b6:	b09d      	sub	sp, #116	; 0x74
 80185b8:	4614      	mov	r4, r2
 80185ba:	4698      	mov	r8, r3
 80185bc:	4606      	mov	r6, r0
 80185be:	b118      	cbz	r0, 80185c8 <_vfiprintf_r+0x18>
 80185c0:	6a03      	ldr	r3, [r0, #32]
 80185c2:	b90b      	cbnz	r3, 80185c8 <_vfiprintf_r+0x18>
 80185c4:	f7ff fd74 	bl	80180b0 <__sinit>
 80185c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80185ca:	07d9      	lsls	r1, r3, #31
 80185cc:	d405      	bmi.n	80185da <_vfiprintf_r+0x2a>
 80185ce:	89ab      	ldrh	r3, [r5, #12]
 80185d0:	059a      	lsls	r2, r3, #22
 80185d2:	d402      	bmi.n	80185da <_vfiprintf_r+0x2a>
 80185d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80185d6:	f7ff fe92 	bl	80182fe <__retarget_lock_acquire_recursive>
 80185da:	89ab      	ldrh	r3, [r5, #12]
 80185dc:	071b      	lsls	r3, r3, #28
 80185de:	d501      	bpl.n	80185e4 <_vfiprintf_r+0x34>
 80185e0:	692b      	ldr	r3, [r5, #16]
 80185e2:	b99b      	cbnz	r3, 801860c <_vfiprintf_r+0x5c>
 80185e4:	4629      	mov	r1, r5
 80185e6:	4630      	mov	r0, r6
 80185e8:	f000 fb8a 	bl	8018d00 <__swsetup_r>
 80185ec:	b170      	cbz	r0, 801860c <_vfiprintf_r+0x5c>
 80185ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80185f0:	07dc      	lsls	r4, r3, #31
 80185f2:	d504      	bpl.n	80185fe <_vfiprintf_r+0x4e>
 80185f4:	f04f 30ff 	mov.w	r0, #4294967295
 80185f8:	b01d      	add	sp, #116	; 0x74
 80185fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185fe:	89ab      	ldrh	r3, [r5, #12]
 8018600:	0598      	lsls	r0, r3, #22
 8018602:	d4f7      	bmi.n	80185f4 <_vfiprintf_r+0x44>
 8018604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018606:	f7ff fe7b 	bl	8018300 <__retarget_lock_release_recursive>
 801860a:	e7f3      	b.n	80185f4 <_vfiprintf_r+0x44>
 801860c:	2300      	movs	r3, #0
 801860e:	9309      	str	r3, [sp, #36]	; 0x24
 8018610:	2320      	movs	r3, #32
 8018612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018616:	f8cd 800c 	str.w	r8, [sp, #12]
 801861a:	2330      	movs	r3, #48	; 0x30
 801861c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80187d0 <_vfiprintf_r+0x220>
 8018620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018624:	f04f 0901 	mov.w	r9, #1
 8018628:	4623      	mov	r3, r4
 801862a:	469a      	mov	sl, r3
 801862c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018630:	b10a      	cbz	r2, 8018636 <_vfiprintf_r+0x86>
 8018632:	2a25      	cmp	r2, #37	; 0x25
 8018634:	d1f9      	bne.n	801862a <_vfiprintf_r+0x7a>
 8018636:	ebba 0b04 	subs.w	fp, sl, r4
 801863a:	d00b      	beq.n	8018654 <_vfiprintf_r+0xa4>
 801863c:	465b      	mov	r3, fp
 801863e:	4622      	mov	r2, r4
 8018640:	4629      	mov	r1, r5
 8018642:	4630      	mov	r0, r6
 8018644:	f7ff ffa1 	bl	801858a <__sfputs_r>
 8018648:	3001      	adds	r0, #1
 801864a:	f000 80a9 	beq.w	80187a0 <_vfiprintf_r+0x1f0>
 801864e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018650:	445a      	add	r2, fp
 8018652:	9209      	str	r2, [sp, #36]	; 0x24
 8018654:	f89a 3000 	ldrb.w	r3, [sl]
 8018658:	2b00      	cmp	r3, #0
 801865a:	f000 80a1 	beq.w	80187a0 <_vfiprintf_r+0x1f0>
 801865e:	2300      	movs	r3, #0
 8018660:	f04f 32ff 	mov.w	r2, #4294967295
 8018664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018668:	f10a 0a01 	add.w	sl, sl, #1
 801866c:	9304      	str	r3, [sp, #16]
 801866e:	9307      	str	r3, [sp, #28]
 8018670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018674:	931a      	str	r3, [sp, #104]	; 0x68
 8018676:	4654      	mov	r4, sl
 8018678:	2205      	movs	r2, #5
 801867a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801867e:	4854      	ldr	r0, [pc, #336]	; (80187d0 <_vfiprintf_r+0x220>)
 8018680:	f7e7 fda6 	bl	80001d0 <memchr>
 8018684:	9a04      	ldr	r2, [sp, #16]
 8018686:	b9d8      	cbnz	r0, 80186c0 <_vfiprintf_r+0x110>
 8018688:	06d1      	lsls	r1, r2, #27
 801868a:	bf44      	itt	mi
 801868c:	2320      	movmi	r3, #32
 801868e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018692:	0713      	lsls	r3, r2, #28
 8018694:	bf44      	itt	mi
 8018696:	232b      	movmi	r3, #43	; 0x2b
 8018698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801869c:	f89a 3000 	ldrb.w	r3, [sl]
 80186a0:	2b2a      	cmp	r3, #42	; 0x2a
 80186a2:	d015      	beq.n	80186d0 <_vfiprintf_r+0x120>
 80186a4:	9a07      	ldr	r2, [sp, #28]
 80186a6:	4654      	mov	r4, sl
 80186a8:	2000      	movs	r0, #0
 80186aa:	f04f 0c0a 	mov.w	ip, #10
 80186ae:	4621      	mov	r1, r4
 80186b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80186b4:	3b30      	subs	r3, #48	; 0x30
 80186b6:	2b09      	cmp	r3, #9
 80186b8:	d94d      	bls.n	8018756 <_vfiprintf_r+0x1a6>
 80186ba:	b1b0      	cbz	r0, 80186ea <_vfiprintf_r+0x13a>
 80186bc:	9207      	str	r2, [sp, #28]
 80186be:	e014      	b.n	80186ea <_vfiprintf_r+0x13a>
 80186c0:	eba0 0308 	sub.w	r3, r0, r8
 80186c4:	fa09 f303 	lsl.w	r3, r9, r3
 80186c8:	4313      	orrs	r3, r2
 80186ca:	9304      	str	r3, [sp, #16]
 80186cc:	46a2      	mov	sl, r4
 80186ce:	e7d2      	b.n	8018676 <_vfiprintf_r+0xc6>
 80186d0:	9b03      	ldr	r3, [sp, #12]
 80186d2:	1d19      	adds	r1, r3, #4
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	9103      	str	r1, [sp, #12]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	bfbb      	ittet	lt
 80186dc:	425b      	neglt	r3, r3
 80186de:	f042 0202 	orrlt.w	r2, r2, #2
 80186e2:	9307      	strge	r3, [sp, #28]
 80186e4:	9307      	strlt	r3, [sp, #28]
 80186e6:	bfb8      	it	lt
 80186e8:	9204      	strlt	r2, [sp, #16]
 80186ea:	7823      	ldrb	r3, [r4, #0]
 80186ec:	2b2e      	cmp	r3, #46	; 0x2e
 80186ee:	d10c      	bne.n	801870a <_vfiprintf_r+0x15a>
 80186f0:	7863      	ldrb	r3, [r4, #1]
 80186f2:	2b2a      	cmp	r3, #42	; 0x2a
 80186f4:	d134      	bne.n	8018760 <_vfiprintf_r+0x1b0>
 80186f6:	9b03      	ldr	r3, [sp, #12]
 80186f8:	1d1a      	adds	r2, r3, #4
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	9203      	str	r2, [sp, #12]
 80186fe:	2b00      	cmp	r3, #0
 8018700:	bfb8      	it	lt
 8018702:	f04f 33ff 	movlt.w	r3, #4294967295
 8018706:	3402      	adds	r4, #2
 8018708:	9305      	str	r3, [sp, #20]
 801870a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80187e0 <_vfiprintf_r+0x230>
 801870e:	7821      	ldrb	r1, [r4, #0]
 8018710:	2203      	movs	r2, #3
 8018712:	4650      	mov	r0, sl
 8018714:	f7e7 fd5c 	bl	80001d0 <memchr>
 8018718:	b138      	cbz	r0, 801872a <_vfiprintf_r+0x17a>
 801871a:	9b04      	ldr	r3, [sp, #16]
 801871c:	eba0 000a 	sub.w	r0, r0, sl
 8018720:	2240      	movs	r2, #64	; 0x40
 8018722:	4082      	lsls	r2, r0
 8018724:	4313      	orrs	r3, r2
 8018726:	3401      	adds	r4, #1
 8018728:	9304      	str	r3, [sp, #16]
 801872a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801872e:	4829      	ldr	r0, [pc, #164]	; (80187d4 <_vfiprintf_r+0x224>)
 8018730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018734:	2206      	movs	r2, #6
 8018736:	f7e7 fd4b 	bl	80001d0 <memchr>
 801873a:	2800      	cmp	r0, #0
 801873c:	d03f      	beq.n	80187be <_vfiprintf_r+0x20e>
 801873e:	4b26      	ldr	r3, [pc, #152]	; (80187d8 <_vfiprintf_r+0x228>)
 8018740:	bb1b      	cbnz	r3, 801878a <_vfiprintf_r+0x1da>
 8018742:	9b03      	ldr	r3, [sp, #12]
 8018744:	3307      	adds	r3, #7
 8018746:	f023 0307 	bic.w	r3, r3, #7
 801874a:	3308      	adds	r3, #8
 801874c:	9303      	str	r3, [sp, #12]
 801874e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018750:	443b      	add	r3, r7
 8018752:	9309      	str	r3, [sp, #36]	; 0x24
 8018754:	e768      	b.n	8018628 <_vfiprintf_r+0x78>
 8018756:	fb0c 3202 	mla	r2, ip, r2, r3
 801875a:	460c      	mov	r4, r1
 801875c:	2001      	movs	r0, #1
 801875e:	e7a6      	b.n	80186ae <_vfiprintf_r+0xfe>
 8018760:	2300      	movs	r3, #0
 8018762:	3401      	adds	r4, #1
 8018764:	9305      	str	r3, [sp, #20]
 8018766:	4619      	mov	r1, r3
 8018768:	f04f 0c0a 	mov.w	ip, #10
 801876c:	4620      	mov	r0, r4
 801876e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018772:	3a30      	subs	r2, #48	; 0x30
 8018774:	2a09      	cmp	r2, #9
 8018776:	d903      	bls.n	8018780 <_vfiprintf_r+0x1d0>
 8018778:	2b00      	cmp	r3, #0
 801877a:	d0c6      	beq.n	801870a <_vfiprintf_r+0x15a>
 801877c:	9105      	str	r1, [sp, #20]
 801877e:	e7c4      	b.n	801870a <_vfiprintf_r+0x15a>
 8018780:	fb0c 2101 	mla	r1, ip, r1, r2
 8018784:	4604      	mov	r4, r0
 8018786:	2301      	movs	r3, #1
 8018788:	e7f0      	b.n	801876c <_vfiprintf_r+0x1bc>
 801878a:	ab03      	add	r3, sp, #12
 801878c:	9300      	str	r3, [sp, #0]
 801878e:	462a      	mov	r2, r5
 8018790:	4b12      	ldr	r3, [pc, #72]	; (80187dc <_vfiprintf_r+0x22c>)
 8018792:	a904      	add	r1, sp, #16
 8018794:	4630      	mov	r0, r6
 8018796:	f3af 8000 	nop.w
 801879a:	4607      	mov	r7, r0
 801879c:	1c78      	adds	r0, r7, #1
 801879e:	d1d6      	bne.n	801874e <_vfiprintf_r+0x19e>
 80187a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80187a2:	07d9      	lsls	r1, r3, #31
 80187a4:	d405      	bmi.n	80187b2 <_vfiprintf_r+0x202>
 80187a6:	89ab      	ldrh	r3, [r5, #12]
 80187a8:	059a      	lsls	r2, r3, #22
 80187aa:	d402      	bmi.n	80187b2 <_vfiprintf_r+0x202>
 80187ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80187ae:	f7ff fda7 	bl	8018300 <__retarget_lock_release_recursive>
 80187b2:	89ab      	ldrh	r3, [r5, #12]
 80187b4:	065b      	lsls	r3, r3, #25
 80187b6:	f53f af1d 	bmi.w	80185f4 <_vfiprintf_r+0x44>
 80187ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80187bc:	e71c      	b.n	80185f8 <_vfiprintf_r+0x48>
 80187be:	ab03      	add	r3, sp, #12
 80187c0:	9300      	str	r3, [sp, #0]
 80187c2:	462a      	mov	r2, r5
 80187c4:	4b05      	ldr	r3, [pc, #20]	; (80187dc <_vfiprintf_r+0x22c>)
 80187c6:	a904      	add	r1, sp, #16
 80187c8:	4630      	mov	r0, r6
 80187ca:	f000 f879 	bl	80188c0 <_printf_i>
 80187ce:	e7e4      	b.n	801879a <_vfiprintf_r+0x1ea>
 80187d0:	0801bcf8 	.word	0x0801bcf8
 80187d4:	0801bd02 	.word	0x0801bd02
 80187d8:	00000000 	.word	0x00000000
 80187dc:	0801858b 	.word	0x0801858b
 80187e0:	0801bcfe 	.word	0x0801bcfe

080187e4 <_printf_common>:
 80187e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187e8:	4616      	mov	r6, r2
 80187ea:	4699      	mov	r9, r3
 80187ec:	688a      	ldr	r2, [r1, #8]
 80187ee:	690b      	ldr	r3, [r1, #16]
 80187f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80187f4:	4293      	cmp	r3, r2
 80187f6:	bfb8      	it	lt
 80187f8:	4613      	movlt	r3, r2
 80187fa:	6033      	str	r3, [r6, #0]
 80187fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018800:	4607      	mov	r7, r0
 8018802:	460c      	mov	r4, r1
 8018804:	b10a      	cbz	r2, 801880a <_printf_common+0x26>
 8018806:	3301      	adds	r3, #1
 8018808:	6033      	str	r3, [r6, #0]
 801880a:	6823      	ldr	r3, [r4, #0]
 801880c:	0699      	lsls	r1, r3, #26
 801880e:	bf42      	ittt	mi
 8018810:	6833      	ldrmi	r3, [r6, #0]
 8018812:	3302      	addmi	r3, #2
 8018814:	6033      	strmi	r3, [r6, #0]
 8018816:	6825      	ldr	r5, [r4, #0]
 8018818:	f015 0506 	ands.w	r5, r5, #6
 801881c:	d106      	bne.n	801882c <_printf_common+0x48>
 801881e:	f104 0a19 	add.w	sl, r4, #25
 8018822:	68e3      	ldr	r3, [r4, #12]
 8018824:	6832      	ldr	r2, [r6, #0]
 8018826:	1a9b      	subs	r3, r3, r2
 8018828:	42ab      	cmp	r3, r5
 801882a:	dc26      	bgt.n	801887a <_printf_common+0x96>
 801882c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018830:	1e13      	subs	r3, r2, #0
 8018832:	6822      	ldr	r2, [r4, #0]
 8018834:	bf18      	it	ne
 8018836:	2301      	movne	r3, #1
 8018838:	0692      	lsls	r2, r2, #26
 801883a:	d42b      	bmi.n	8018894 <_printf_common+0xb0>
 801883c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018840:	4649      	mov	r1, r9
 8018842:	4638      	mov	r0, r7
 8018844:	47c0      	blx	r8
 8018846:	3001      	adds	r0, #1
 8018848:	d01e      	beq.n	8018888 <_printf_common+0xa4>
 801884a:	6823      	ldr	r3, [r4, #0]
 801884c:	6922      	ldr	r2, [r4, #16]
 801884e:	f003 0306 	and.w	r3, r3, #6
 8018852:	2b04      	cmp	r3, #4
 8018854:	bf02      	ittt	eq
 8018856:	68e5      	ldreq	r5, [r4, #12]
 8018858:	6833      	ldreq	r3, [r6, #0]
 801885a:	1aed      	subeq	r5, r5, r3
 801885c:	68a3      	ldr	r3, [r4, #8]
 801885e:	bf0c      	ite	eq
 8018860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018864:	2500      	movne	r5, #0
 8018866:	4293      	cmp	r3, r2
 8018868:	bfc4      	itt	gt
 801886a:	1a9b      	subgt	r3, r3, r2
 801886c:	18ed      	addgt	r5, r5, r3
 801886e:	2600      	movs	r6, #0
 8018870:	341a      	adds	r4, #26
 8018872:	42b5      	cmp	r5, r6
 8018874:	d11a      	bne.n	80188ac <_printf_common+0xc8>
 8018876:	2000      	movs	r0, #0
 8018878:	e008      	b.n	801888c <_printf_common+0xa8>
 801887a:	2301      	movs	r3, #1
 801887c:	4652      	mov	r2, sl
 801887e:	4649      	mov	r1, r9
 8018880:	4638      	mov	r0, r7
 8018882:	47c0      	blx	r8
 8018884:	3001      	adds	r0, #1
 8018886:	d103      	bne.n	8018890 <_printf_common+0xac>
 8018888:	f04f 30ff 	mov.w	r0, #4294967295
 801888c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018890:	3501      	adds	r5, #1
 8018892:	e7c6      	b.n	8018822 <_printf_common+0x3e>
 8018894:	18e1      	adds	r1, r4, r3
 8018896:	1c5a      	adds	r2, r3, #1
 8018898:	2030      	movs	r0, #48	; 0x30
 801889a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801889e:	4422      	add	r2, r4
 80188a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80188a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80188a8:	3302      	adds	r3, #2
 80188aa:	e7c7      	b.n	801883c <_printf_common+0x58>
 80188ac:	2301      	movs	r3, #1
 80188ae:	4622      	mov	r2, r4
 80188b0:	4649      	mov	r1, r9
 80188b2:	4638      	mov	r0, r7
 80188b4:	47c0      	blx	r8
 80188b6:	3001      	adds	r0, #1
 80188b8:	d0e6      	beq.n	8018888 <_printf_common+0xa4>
 80188ba:	3601      	adds	r6, #1
 80188bc:	e7d9      	b.n	8018872 <_printf_common+0x8e>
	...

080188c0 <_printf_i>:
 80188c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80188c4:	7e0f      	ldrb	r7, [r1, #24]
 80188c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80188c8:	2f78      	cmp	r7, #120	; 0x78
 80188ca:	4691      	mov	r9, r2
 80188cc:	4680      	mov	r8, r0
 80188ce:	460c      	mov	r4, r1
 80188d0:	469a      	mov	sl, r3
 80188d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80188d6:	d807      	bhi.n	80188e8 <_printf_i+0x28>
 80188d8:	2f62      	cmp	r7, #98	; 0x62
 80188da:	d80a      	bhi.n	80188f2 <_printf_i+0x32>
 80188dc:	2f00      	cmp	r7, #0
 80188de:	f000 80d4 	beq.w	8018a8a <_printf_i+0x1ca>
 80188e2:	2f58      	cmp	r7, #88	; 0x58
 80188e4:	f000 80c0 	beq.w	8018a68 <_printf_i+0x1a8>
 80188e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80188ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80188f0:	e03a      	b.n	8018968 <_printf_i+0xa8>
 80188f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80188f6:	2b15      	cmp	r3, #21
 80188f8:	d8f6      	bhi.n	80188e8 <_printf_i+0x28>
 80188fa:	a101      	add	r1, pc, #4	; (adr r1, 8018900 <_printf_i+0x40>)
 80188fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018900:	08018959 	.word	0x08018959
 8018904:	0801896d 	.word	0x0801896d
 8018908:	080188e9 	.word	0x080188e9
 801890c:	080188e9 	.word	0x080188e9
 8018910:	080188e9 	.word	0x080188e9
 8018914:	080188e9 	.word	0x080188e9
 8018918:	0801896d 	.word	0x0801896d
 801891c:	080188e9 	.word	0x080188e9
 8018920:	080188e9 	.word	0x080188e9
 8018924:	080188e9 	.word	0x080188e9
 8018928:	080188e9 	.word	0x080188e9
 801892c:	08018a71 	.word	0x08018a71
 8018930:	08018999 	.word	0x08018999
 8018934:	08018a2b 	.word	0x08018a2b
 8018938:	080188e9 	.word	0x080188e9
 801893c:	080188e9 	.word	0x080188e9
 8018940:	08018a93 	.word	0x08018a93
 8018944:	080188e9 	.word	0x080188e9
 8018948:	08018999 	.word	0x08018999
 801894c:	080188e9 	.word	0x080188e9
 8018950:	080188e9 	.word	0x080188e9
 8018954:	08018a33 	.word	0x08018a33
 8018958:	682b      	ldr	r3, [r5, #0]
 801895a:	1d1a      	adds	r2, r3, #4
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	602a      	str	r2, [r5, #0]
 8018960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018968:	2301      	movs	r3, #1
 801896a:	e09f      	b.n	8018aac <_printf_i+0x1ec>
 801896c:	6820      	ldr	r0, [r4, #0]
 801896e:	682b      	ldr	r3, [r5, #0]
 8018970:	0607      	lsls	r7, r0, #24
 8018972:	f103 0104 	add.w	r1, r3, #4
 8018976:	6029      	str	r1, [r5, #0]
 8018978:	d501      	bpl.n	801897e <_printf_i+0xbe>
 801897a:	681e      	ldr	r6, [r3, #0]
 801897c:	e003      	b.n	8018986 <_printf_i+0xc6>
 801897e:	0646      	lsls	r6, r0, #25
 8018980:	d5fb      	bpl.n	801897a <_printf_i+0xba>
 8018982:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018986:	2e00      	cmp	r6, #0
 8018988:	da03      	bge.n	8018992 <_printf_i+0xd2>
 801898a:	232d      	movs	r3, #45	; 0x2d
 801898c:	4276      	negs	r6, r6
 801898e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018992:	485a      	ldr	r0, [pc, #360]	; (8018afc <_printf_i+0x23c>)
 8018994:	230a      	movs	r3, #10
 8018996:	e012      	b.n	80189be <_printf_i+0xfe>
 8018998:	682b      	ldr	r3, [r5, #0]
 801899a:	6820      	ldr	r0, [r4, #0]
 801899c:	1d19      	adds	r1, r3, #4
 801899e:	6029      	str	r1, [r5, #0]
 80189a0:	0605      	lsls	r5, r0, #24
 80189a2:	d501      	bpl.n	80189a8 <_printf_i+0xe8>
 80189a4:	681e      	ldr	r6, [r3, #0]
 80189a6:	e002      	b.n	80189ae <_printf_i+0xee>
 80189a8:	0641      	lsls	r1, r0, #25
 80189aa:	d5fb      	bpl.n	80189a4 <_printf_i+0xe4>
 80189ac:	881e      	ldrh	r6, [r3, #0]
 80189ae:	4853      	ldr	r0, [pc, #332]	; (8018afc <_printf_i+0x23c>)
 80189b0:	2f6f      	cmp	r7, #111	; 0x6f
 80189b2:	bf0c      	ite	eq
 80189b4:	2308      	moveq	r3, #8
 80189b6:	230a      	movne	r3, #10
 80189b8:	2100      	movs	r1, #0
 80189ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80189be:	6865      	ldr	r5, [r4, #4]
 80189c0:	60a5      	str	r5, [r4, #8]
 80189c2:	2d00      	cmp	r5, #0
 80189c4:	bfa2      	ittt	ge
 80189c6:	6821      	ldrge	r1, [r4, #0]
 80189c8:	f021 0104 	bicge.w	r1, r1, #4
 80189cc:	6021      	strge	r1, [r4, #0]
 80189ce:	b90e      	cbnz	r6, 80189d4 <_printf_i+0x114>
 80189d0:	2d00      	cmp	r5, #0
 80189d2:	d04b      	beq.n	8018a6c <_printf_i+0x1ac>
 80189d4:	4615      	mov	r5, r2
 80189d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80189da:	fb03 6711 	mls	r7, r3, r1, r6
 80189de:	5dc7      	ldrb	r7, [r0, r7]
 80189e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80189e4:	4637      	mov	r7, r6
 80189e6:	42bb      	cmp	r3, r7
 80189e8:	460e      	mov	r6, r1
 80189ea:	d9f4      	bls.n	80189d6 <_printf_i+0x116>
 80189ec:	2b08      	cmp	r3, #8
 80189ee:	d10b      	bne.n	8018a08 <_printf_i+0x148>
 80189f0:	6823      	ldr	r3, [r4, #0]
 80189f2:	07de      	lsls	r6, r3, #31
 80189f4:	d508      	bpl.n	8018a08 <_printf_i+0x148>
 80189f6:	6923      	ldr	r3, [r4, #16]
 80189f8:	6861      	ldr	r1, [r4, #4]
 80189fa:	4299      	cmp	r1, r3
 80189fc:	bfde      	ittt	le
 80189fe:	2330      	movle	r3, #48	; 0x30
 8018a00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018a04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018a08:	1b52      	subs	r2, r2, r5
 8018a0a:	6122      	str	r2, [r4, #16]
 8018a0c:	f8cd a000 	str.w	sl, [sp]
 8018a10:	464b      	mov	r3, r9
 8018a12:	aa03      	add	r2, sp, #12
 8018a14:	4621      	mov	r1, r4
 8018a16:	4640      	mov	r0, r8
 8018a18:	f7ff fee4 	bl	80187e4 <_printf_common>
 8018a1c:	3001      	adds	r0, #1
 8018a1e:	d14a      	bne.n	8018ab6 <_printf_i+0x1f6>
 8018a20:	f04f 30ff 	mov.w	r0, #4294967295
 8018a24:	b004      	add	sp, #16
 8018a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a2a:	6823      	ldr	r3, [r4, #0]
 8018a2c:	f043 0320 	orr.w	r3, r3, #32
 8018a30:	6023      	str	r3, [r4, #0]
 8018a32:	4833      	ldr	r0, [pc, #204]	; (8018b00 <_printf_i+0x240>)
 8018a34:	2778      	movs	r7, #120	; 0x78
 8018a36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018a3a:	6823      	ldr	r3, [r4, #0]
 8018a3c:	6829      	ldr	r1, [r5, #0]
 8018a3e:	061f      	lsls	r7, r3, #24
 8018a40:	f851 6b04 	ldr.w	r6, [r1], #4
 8018a44:	d402      	bmi.n	8018a4c <_printf_i+0x18c>
 8018a46:	065f      	lsls	r7, r3, #25
 8018a48:	bf48      	it	mi
 8018a4a:	b2b6      	uxthmi	r6, r6
 8018a4c:	07df      	lsls	r7, r3, #31
 8018a4e:	bf48      	it	mi
 8018a50:	f043 0320 	orrmi.w	r3, r3, #32
 8018a54:	6029      	str	r1, [r5, #0]
 8018a56:	bf48      	it	mi
 8018a58:	6023      	strmi	r3, [r4, #0]
 8018a5a:	b91e      	cbnz	r6, 8018a64 <_printf_i+0x1a4>
 8018a5c:	6823      	ldr	r3, [r4, #0]
 8018a5e:	f023 0320 	bic.w	r3, r3, #32
 8018a62:	6023      	str	r3, [r4, #0]
 8018a64:	2310      	movs	r3, #16
 8018a66:	e7a7      	b.n	80189b8 <_printf_i+0xf8>
 8018a68:	4824      	ldr	r0, [pc, #144]	; (8018afc <_printf_i+0x23c>)
 8018a6a:	e7e4      	b.n	8018a36 <_printf_i+0x176>
 8018a6c:	4615      	mov	r5, r2
 8018a6e:	e7bd      	b.n	80189ec <_printf_i+0x12c>
 8018a70:	682b      	ldr	r3, [r5, #0]
 8018a72:	6826      	ldr	r6, [r4, #0]
 8018a74:	6961      	ldr	r1, [r4, #20]
 8018a76:	1d18      	adds	r0, r3, #4
 8018a78:	6028      	str	r0, [r5, #0]
 8018a7a:	0635      	lsls	r5, r6, #24
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	d501      	bpl.n	8018a84 <_printf_i+0x1c4>
 8018a80:	6019      	str	r1, [r3, #0]
 8018a82:	e002      	b.n	8018a8a <_printf_i+0x1ca>
 8018a84:	0670      	lsls	r0, r6, #25
 8018a86:	d5fb      	bpl.n	8018a80 <_printf_i+0x1c0>
 8018a88:	8019      	strh	r1, [r3, #0]
 8018a8a:	2300      	movs	r3, #0
 8018a8c:	6123      	str	r3, [r4, #16]
 8018a8e:	4615      	mov	r5, r2
 8018a90:	e7bc      	b.n	8018a0c <_printf_i+0x14c>
 8018a92:	682b      	ldr	r3, [r5, #0]
 8018a94:	1d1a      	adds	r2, r3, #4
 8018a96:	602a      	str	r2, [r5, #0]
 8018a98:	681d      	ldr	r5, [r3, #0]
 8018a9a:	6862      	ldr	r2, [r4, #4]
 8018a9c:	2100      	movs	r1, #0
 8018a9e:	4628      	mov	r0, r5
 8018aa0:	f7e7 fb96 	bl	80001d0 <memchr>
 8018aa4:	b108      	cbz	r0, 8018aaa <_printf_i+0x1ea>
 8018aa6:	1b40      	subs	r0, r0, r5
 8018aa8:	6060      	str	r0, [r4, #4]
 8018aaa:	6863      	ldr	r3, [r4, #4]
 8018aac:	6123      	str	r3, [r4, #16]
 8018aae:	2300      	movs	r3, #0
 8018ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018ab4:	e7aa      	b.n	8018a0c <_printf_i+0x14c>
 8018ab6:	6923      	ldr	r3, [r4, #16]
 8018ab8:	462a      	mov	r2, r5
 8018aba:	4649      	mov	r1, r9
 8018abc:	4640      	mov	r0, r8
 8018abe:	47d0      	blx	sl
 8018ac0:	3001      	adds	r0, #1
 8018ac2:	d0ad      	beq.n	8018a20 <_printf_i+0x160>
 8018ac4:	6823      	ldr	r3, [r4, #0]
 8018ac6:	079b      	lsls	r3, r3, #30
 8018ac8:	d413      	bmi.n	8018af2 <_printf_i+0x232>
 8018aca:	68e0      	ldr	r0, [r4, #12]
 8018acc:	9b03      	ldr	r3, [sp, #12]
 8018ace:	4298      	cmp	r0, r3
 8018ad0:	bfb8      	it	lt
 8018ad2:	4618      	movlt	r0, r3
 8018ad4:	e7a6      	b.n	8018a24 <_printf_i+0x164>
 8018ad6:	2301      	movs	r3, #1
 8018ad8:	4632      	mov	r2, r6
 8018ada:	4649      	mov	r1, r9
 8018adc:	4640      	mov	r0, r8
 8018ade:	47d0      	blx	sl
 8018ae0:	3001      	adds	r0, #1
 8018ae2:	d09d      	beq.n	8018a20 <_printf_i+0x160>
 8018ae4:	3501      	adds	r5, #1
 8018ae6:	68e3      	ldr	r3, [r4, #12]
 8018ae8:	9903      	ldr	r1, [sp, #12]
 8018aea:	1a5b      	subs	r3, r3, r1
 8018aec:	42ab      	cmp	r3, r5
 8018aee:	dcf2      	bgt.n	8018ad6 <_printf_i+0x216>
 8018af0:	e7eb      	b.n	8018aca <_printf_i+0x20a>
 8018af2:	2500      	movs	r5, #0
 8018af4:	f104 0619 	add.w	r6, r4, #25
 8018af8:	e7f5      	b.n	8018ae6 <_printf_i+0x226>
 8018afa:	bf00      	nop
 8018afc:	0801bd09 	.word	0x0801bd09
 8018b00:	0801bd1a 	.word	0x0801bd1a

08018b04 <__sflush_r>:
 8018b04:	898a      	ldrh	r2, [r1, #12]
 8018b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b0a:	4605      	mov	r5, r0
 8018b0c:	0710      	lsls	r0, r2, #28
 8018b0e:	460c      	mov	r4, r1
 8018b10:	d458      	bmi.n	8018bc4 <__sflush_r+0xc0>
 8018b12:	684b      	ldr	r3, [r1, #4]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	dc05      	bgt.n	8018b24 <__sflush_r+0x20>
 8018b18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	dc02      	bgt.n	8018b24 <__sflush_r+0x20>
 8018b1e:	2000      	movs	r0, #0
 8018b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b26:	2e00      	cmp	r6, #0
 8018b28:	d0f9      	beq.n	8018b1e <__sflush_r+0x1a>
 8018b2a:	2300      	movs	r3, #0
 8018b2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018b30:	682f      	ldr	r7, [r5, #0]
 8018b32:	6a21      	ldr	r1, [r4, #32]
 8018b34:	602b      	str	r3, [r5, #0]
 8018b36:	d032      	beq.n	8018b9e <__sflush_r+0x9a>
 8018b38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018b3a:	89a3      	ldrh	r3, [r4, #12]
 8018b3c:	075a      	lsls	r2, r3, #29
 8018b3e:	d505      	bpl.n	8018b4c <__sflush_r+0x48>
 8018b40:	6863      	ldr	r3, [r4, #4]
 8018b42:	1ac0      	subs	r0, r0, r3
 8018b44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018b46:	b10b      	cbz	r3, 8018b4c <__sflush_r+0x48>
 8018b48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018b4a:	1ac0      	subs	r0, r0, r3
 8018b4c:	2300      	movs	r3, #0
 8018b4e:	4602      	mov	r2, r0
 8018b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b52:	6a21      	ldr	r1, [r4, #32]
 8018b54:	4628      	mov	r0, r5
 8018b56:	47b0      	blx	r6
 8018b58:	1c43      	adds	r3, r0, #1
 8018b5a:	89a3      	ldrh	r3, [r4, #12]
 8018b5c:	d106      	bne.n	8018b6c <__sflush_r+0x68>
 8018b5e:	6829      	ldr	r1, [r5, #0]
 8018b60:	291d      	cmp	r1, #29
 8018b62:	d82b      	bhi.n	8018bbc <__sflush_r+0xb8>
 8018b64:	4a29      	ldr	r2, [pc, #164]	; (8018c0c <__sflush_r+0x108>)
 8018b66:	410a      	asrs	r2, r1
 8018b68:	07d6      	lsls	r6, r2, #31
 8018b6a:	d427      	bmi.n	8018bbc <__sflush_r+0xb8>
 8018b6c:	2200      	movs	r2, #0
 8018b6e:	6062      	str	r2, [r4, #4]
 8018b70:	04d9      	lsls	r1, r3, #19
 8018b72:	6922      	ldr	r2, [r4, #16]
 8018b74:	6022      	str	r2, [r4, #0]
 8018b76:	d504      	bpl.n	8018b82 <__sflush_r+0x7e>
 8018b78:	1c42      	adds	r2, r0, #1
 8018b7a:	d101      	bne.n	8018b80 <__sflush_r+0x7c>
 8018b7c:	682b      	ldr	r3, [r5, #0]
 8018b7e:	b903      	cbnz	r3, 8018b82 <__sflush_r+0x7e>
 8018b80:	6560      	str	r0, [r4, #84]	; 0x54
 8018b82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018b84:	602f      	str	r7, [r5, #0]
 8018b86:	2900      	cmp	r1, #0
 8018b88:	d0c9      	beq.n	8018b1e <__sflush_r+0x1a>
 8018b8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b8e:	4299      	cmp	r1, r3
 8018b90:	d002      	beq.n	8018b98 <__sflush_r+0x94>
 8018b92:	4628      	mov	r0, r5
 8018b94:	f7ff fbe2 	bl	801835c <_free_r>
 8018b98:	2000      	movs	r0, #0
 8018b9a:	6360      	str	r0, [r4, #52]	; 0x34
 8018b9c:	e7c0      	b.n	8018b20 <__sflush_r+0x1c>
 8018b9e:	2301      	movs	r3, #1
 8018ba0:	4628      	mov	r0, r5
 8018ba2:	47b0      	blx	r6
 8018ba4:	1c41      	adds	r1, r0, #1
 8018ba6:	d1c8      	bne.n	8018b3a <__sflush_r+0x36>
 8018ba8:	682b      	ldr	r3, [r5, #0]
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d0c5      	beq.n	8018b3a <__sflush_r+0x36>
 8018bae:	2b1d      	cmp	r3, #29
 8018bb0:	d001      	beq.n	8018bb6 <__sflush_r+0xb2>
 8018bb2:	2b16      	cmp	r3, #22
 8018bb4:	d101      	bne.n	8018bba <__sflush_r+0xb6>
 8018bb6:	602f      	str	r7, [r5, #0]
 8018bb8:	e7b1      	b.n	8018b1e <__sflush_r+0x1a>
 8018bba:	89a3      	ldrh	r3, [r4, #12]
 8018bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018bc0:	81a3      	strh	r3, [r4, #12]
 8018bc2:	e7ad      	b.n	8018b20 <__sflush_r+0x1c>
 8018bc4:	690f      	ldr	r7, [r1, #16]
 8018bc6:	2f00      	cmp	r7, #0
 8018bc8:	d0a9      	beq.n	8018b1e <__sflush_r+0x1a>
 8018bca:	0793      	lsls	r3, r2, #30
 8018bcc:	680e      	ldr	r6, [r1, #0]
 8018bce:	bf08      	it	eq
 8018bd0:	694b      	ldreq	r3, [r1, #20]
 8018bd2:	600f      	str	r7, [r1, #0]
 8018bd4:	bf18      	it	ne
 8018bd6:	2300      	movne	r3, #0
 8018bd8:	eba6 0807 	sub.w	r8, r6, r7
 8018bdc:	608b      	str	r3, [r1, #8]
 8018bde:	f1b8 0f00 	cmp.w	r8, #0
 8018be2:	dd9c      	ble.n	8018b1e <__sflush_r+0x1a>
 8018be4:	6a21      	ldr	r1, [r4, #32]
 8018be6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018be8:	4643      	mov	r3, r8
 8018bea:	463a      	mov	r2, r7
 8018bec:	4628      	mov	r0, r5
 8018bee:	47b0      	blx	r6
 8018bf0:	2800      	cmp	r0, #0
 8018bf2:	dc06      	bgt.n	8018c02 <__sflush_r+0xfe>
 8018bf4:	89a3      	ldrh	r3, [r4, #12]
 8018bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018bfa:	81a3      	strh	r3, [r4, #12]
 8018bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8018c00:	e78e      	b.n	8018b20 <__sflush_r+0x1c>
 8018c02:	4407      	add	r7, r0
 8018c04:	eba8 0800 	sub.w	r8, r8, r0
 8018c08:	e7e9      	b.n	8018bde <__sflush_r+0xda>
 8018c0a:	bf00      	nop
 8018c0c:	dfbffffe 	.word	0xdfbffffe

08018c10 <_fflush_r>:
 8018c10:	b538      	push	{r3, r4, r5, lr}
 8018c12:	690b      	ldr	r3, [r1, #16]
 8018c14:	4605      	mov	r5, r0
 8018c16:	460c      	mov	r4, r1
 8018c18:	b913      	cbnz	r3, 8018c20 <_fflush_r+0x10>
 8018c1a:	2500      	movs	r5, #0
 8018c1c:	4628      	mov	r0, r5
 8018c1e:	bd38      	pop	{r3, r4, r5, pc}
 8018c20:	b118      	cbz	r0, 8018c2a <_fflush_r+0x1a>
 8018c22:	6a03      	ldr	r3, [r0, #32]
 8018c24:	b90b      	cbnz	r3, 8018c2a <_fflush_r+0x1a>
 8018c26:	f7ff fa43 	bl	80180b0 <__sinit>
 8018c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d0f3      	beq.n	8018c1a <_fflush_r+0xa>
 8018c32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018c34:	07d0      	lsls	r0, r2, #31
 8018c36:	d404      	bmi.n	8018c42 <_fflush_r+0x32>
 8018c38:	0599      	lsls	r1, r3, #22
 8018c3a:	d402      	bmi.n	8018c42 <_fflush_r+0x32>
 8018c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c3e:	f7ff fb5e 	bl	80182fe <__retarget_lock_acquire_recursive>
 8018c42:	4628      	mov	r0, r5
 8018c44:	4621      	mov	r1, r4
 8018c46:	f7ff ff5d 	bl	8018b04 <__sflush_r>
 8018c4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c4c:	07da      	lsls	r2, r3, #31
 8018c4e:	4605      	mov	r5, r0
 8018c50:	d4e4      	bmi.n	8018c1c <_fflush_r+0xc>
 8018c52:	89a3      	ldrh	r3, [r4, #12]
 8018c54:	059b      	lsls	r3, r3, #22
 8018c56:	d4e1      	bmi.n	8018c1c <_fflush_r+0xc>
 8018c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c5a:	f7ff fb51 	bl	8018300 <__retarget_lock_release_recursive>
 8018c5e:	e7dd      	b.n	8018c1c <_fflush_r+0xc>

08018c60 <fiprintf>:
 8018c60:	b40e      	push	{r1, r2, r3}
 8018c62:	b503      	push	{r0, r1, lr}
 8018c64:	4601      	mov	r1, r0
 8018c66:	ab03      	add	r3, sp, #12
 8018c68:	4805      	ldr	r0, [pc, #20]	; (8018c80 <fiprintf+0x20>)
 8018c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c6e:	6800      	ldr	r0, [r0, #0]
 8018c70:	9301      	str	r3, [sp, #4]
 8018c72:	f7ff fc9d 	bl	80185b0 <_vfiprintf_r>
 8018c76:	b002      	add	sp, #8
 8018c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8018c7c:	b003      	add	sp, #12
 8018c7e:	4770      	bx	lr
 8018c80:	20000258 	.word	0x20000258

08018c84 <__swbuf_r>:
 8018c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c86:	460e      	mov	r6, r1
 8018c88:	4614      	mov	r4, r2
 8018c8a:	4605      	mov	r5, r0
 8018c8c:	b118      	cbz	r0, 8018c96 <__swbuf_r+0x12>
 8018c8e:	6a03      	ldr	r3, [r0, #32]
 8018c90:	b90b      	cbnz	r3, 8018c96 <__swbuf_r+0x12>
 8018c92:	f7ff fa0d 	bl	80180b0 <__sinit>
 8018c96:	69a3      	ldr	r3, [r4, #24]
 8018c98:	60a3      	str	r3, [r4, #8]
 8018c9a:	89a3      	ldrh	r3, [r4, #12]
 8018c9c:	071a      	lsls	r2, r3, #28
 8018c9e:	d525      	bpl.n	8018cec <__swbuf_r+0x68>
 8018ca0:	6923      	ldr	r3, [r4, #16]
 8018ca2:	b31b      	cbz	r3, 8018cec <__swbuf_r+0x68>
 8018ca4:	6823      	ldr	r3, [r4, #0]
 8018ca6:	6922      	ldr	r2, [r4, #16]
 8018ca8:	1a98      	subs	r0, r3, r2
 8018caa:	6963      	ldr	r3, [r4, #20]
 8018cac:	b2f6      	uxtb	r6, r6
 8018cae:	4283      	cmp	r3, r0
 8018cb0:	4637      	mov	r7, r6
 8018cb2:	dc04      	bgt.n	8018cbe <__swbuf_r+0x3a>
 8018cb4:	4621      	mov	r1, r4
 8018cb6:	4628      	mov	r0, r5
 8018cb8:	f7ff ffaa 	bl	8018c10 <_fflush_r>
 8018cbc:	b9e0      	cbnz	r0, 8018cf8 <__swbuf_r+0x74>
 8018cbe:	68a3      	ldr	r3, [r4, #8]
 8018cc0:	3b01      	subs	r3, #1
 8018cc2:	60a3      	str	r3, [r4, #8]
 8018cc4:	6823      	ldr	r3, [r4, #0]
 8018cc6:	1c5a      	adds	r2, r3, #1
 8018cc8:	6022      	str	r2, [r4, #0]
 8018cca:	701e      	strb	r6, [r3, #0]
 8018ccc:	6962      	ldr	r2, [r4, #20]
 8018cce:	1c43      	adds	r3, r0, #1
 8018cd0:	429a      	cmp	r2, r3
 8018cd2:	d004      	beq.n	8018cde <__swbuf_r+0x5a>
 8018cd4:	89a3      	ldrh	r3, [r4, #12]
 8018cd6:	07db      	lsls	r3, r3, #31
 8018cd8:	d506      	bpl.n	8018ce8 <__swbuf_r+0x64>
 8018cda:	2e0a      	cmp	r6, #10
 8018cdc:	d104      	bne.n	8018ce8 <__swbuf_r+0x64>
 8018cde:	4621      	mov	r1, r4
 8018ce0:	4628      	mov	r0, r5
 8018ce2:	f7ff ff95 	bl	8018c10 <_fflush_r>
 8018ce6:	b938      	cbnz	r0, 8018cf8 <__swbuf_r+0x74>
 8018ce8:	4638      	mov	r0, r7
 8018cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cec:	4621      	mov	r1, r4
 8018cee:	4628      	mov	r0, r5
 8018cf0:	f000 f806 	bl	8018d00 <__swsetup_r>
 8018cf4:	2800      	cmp	r0, #0
 8018cf6:	d0d5      	beq.n	8018ca4 <__swbuf_r+0x20>
 8018cf8:	f04f 37ff 	mov.w	r7, #4294967295
 8018cfc:	e7f4      	b.n	8018ce8 <__swbuf_r+0x64>
	...

08018d00 <__swsetup_r>:
 8018d00:	b538      	push	{r3, r4, r5, lr}
 8018d02:	4b2a      	ldr	r3, [pc, #168]	; (8018dac <__swsetup_r+0xac>)
 8018d04:	4605      	mov	r5, r0
 8018d06:	6818      	ldr	r0, [r3, #0]
 8018d08:	460c      	mov	r4, r1
 8018d0a:	b118      	cbz	r0, 8018d14 <__swsetup_r+0x14>
 8018d0c:	6a03      	ldr	r3, [r0, #32]
 8018d0e:	b90b      	cbnz	r3, 8018d14 <__swsetup_r+0x14>
 8018d10:	f7ff f9ce 	bl	80180b0 <__sinit>
 8018d14:	89a3      	ldrh	r3, [r4, #12]
 8018d16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018d1a:	0718      	lsls	r0, r3, #28
 8018d1c:	d422      	bmi.n	8018d64 <__swsetup_r+0x64>
 8018d1e:	06d9      	lsls	r1, r3, #27
 8018d20:	d407      	bmi.n	8018d32 <__swsetup_r+0x32>
 8018d22:	2309      	movs	r3, #9
 8018d24:	602b      	str	r3, [r5, #0]
 8018d26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018d2a:	81a3      	strh	r3, [r4, #12]
 8018d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8018d30:	e034      	b.n	8018d9c <__swsetup_r+0x9c>
 8018d32:	0758      	lsls	r0, r3, #29
 8018d34:	d512      	bpl.n	8018d5c <__swsetup_r+0x5c>
 8018d36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018d38:	b141      	cbz	r1, 8018d4c <__swsetup_r+0x4c>
 8018d3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d3e:	4299      	cmp	r1, r3
 8018d40:	d002      	beq.n	8018d48 <__swsetup_r+0x48>
 8018d42:	4628      	mov	r0, r5
 8018d44:	f7ff fb0a 	bl	801835c <_free_r>
 8018d48:	2300      	movs	r3, #0
 8018d4a:	6363      	str	r3, [r4, #52]	; 0x34
 8018d4c:	89a3      	ldrh	r3, [r4, #12]
 8018d4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018d52:	81a3      	strh	r3, [r4, #12]
 8018d54:	2300      	movs	r3, #0
 8018d56:	6063      	str	r3, [r4, #4]
 8018d58:	6923      	ldr	r3, [r4, #16]
 8018d5a:	6023      	str	r3, [r4, #0]
 8018d5c:	89a3      	ldrh	r3, [r4, #12]
 8018d5e:	f043 0308 	orr.w	r3, r3, #8
 8018d62:	81a3      	strh	r3, [r4, #12]
 8018d64:	6923      	ldr	r3, [r4, #16]
 8018d66:	b94b      	cbnz	r3, 8018d7c <__swsetup_r+0x7c>
 8018d68:	89a3      	ldrh	r3, [r4, #12]
 8018d6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018d72:	d003      	beq.n	8018d7c <__swsetup_r+0x7c>
 8018d74:	4621      	mov	r1, r4
 8018d76:	4628      	mov	r0, r5
 8018d78:	f000 f857 	bl	8018e2a <__smakebuf_r>
 8018d7c:	89a0      	ldrh	r0, [r4, #12]
 8018d7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018d82:	f010 0301 	ands.w	r3, r0, #1
 8018d86:	d00a      	beq.n	8018d9e <__swsetup_r+0x9e>
 8018d88:	2300      	movs	r3, #0
 8018d8a:	60a3      	str	r3, [r4, #8]
 8018d8c:	6963      	ldr	r3, [r4, #20]
 8018d8e:	425b      	negs	r3, r3
 8018d90:	61a3      	str	r3, [r4, #24]
 8018d92:	6923      	ldr	r3, [r4, #16]
 8018d94:	b943      	cbnz	r3, 8018da8 <__swsetup_r+0xa8>
 8018d96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018d9a:	d1c4      	bne.n	8018d26 <__swsetup_r+0x26>
 8018d9c:	bd38      	pop	{r3, r4, r5, pc}
 8018d9e:	0781      	lsls	r1, r0, #30
 8018da0:	bf58      	it	pl
 8018da2:	6963      	ldrpl	r3, [r4, #20]
 8018da4:	60a3      	str	r3, [r4, #8]
 8018da6:	e7f4      	b.n	8018d92 <__swsetup_r+0x92>
 8018da8:	2000      	movs	r0, #0
 8018daa:	e7f7      	b.n	8018d9c <__swsetup_r+0x9c>
 8018dac:	20000258 	.word	0x20000258

08018db0 <_sbrk_r>:
 8018db0:	b538      	push	{r3, r4, r5, lr}
 8018db2:	4d06      	ldr	r5, [pc, #24]	; (8018dcc <_sbrk_r+0x1c>)
 8018db4:	2300      	movs	r3, #0
 8018db6:	4604      	mov	r4, r0
 8018db8:	4608      	mov	r0, r1
 8018dba:	602b      	str	r3, [r5, #0]
 8018dbc:	f7e7 ff04 	bl	8000bc8 <_sbrk>
 8018dc0:	1c43      	adds	r3, r0, #1
 8018dc2:	d102      	bne.n	8018dca <_sbrk_r+0x1a>
 8018dc4:	682b      	ldr	r3, [r5, #0]
 8018dc6:	b103      	cbz	r3, 8018dca <_sbrk_r+0x1a>
 8018dc8:	6023      	str	r3, [r4, #0]
 8018dca:	bd38      	pop	{r3, r4, r5, pc}
 8018dcc:	2000a778 	.word	0x2000a778

08018dd0 <abort>:
 8018dd0:	b508      	push	{r3, lr}
 8018dd2:	2006      	movs	r0, #6
 8018dd4:	f000 f88e 	bl	8018ef4 <raise>
 8018dd8:	2001      	movs	r0, #1
 8018dda:	f7e7 fe7d 	bl	8000ad8 <_exit>

08018dde <__swhatbuf_r>:
 8018dde:	b570      	push	{r4, r5, r6, lr}
 8018de0:	460c      	mov	r4, r1
 8018de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018de6:	2900      	cmp	r1, #0
 8018de8:	b096      	sub	sp, #88	; 0x58
 8018dea:	4615      	mov	r5, r2
 8018dec:	461e      	mov	r6, r3
 8018dee:	da0d      	bge.n	8018e0c <__swhatbuf_r+0x2e>
 8018df0:	89a3      	ldrh	r3, [r4, #12]
 8018df2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018df6:	f04f 0100 	mov.w	r1, #0
 8018dfa:	bf0c      	ite	eq
 8018dfc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018e00:	2340      	movne	r3, #64	; 0x40
 8018e02:	2000      	movs	r0, #0
 8018e04:	6031      	str	r1, [r6, #0]
 8018e06:	602b      	str	r3, [r5, #0]
 8018e08:	b016      	add	sp, #88	; 0x58
 8018e0a:	bd70      	pop	{r4, r5, r6, pc}
 8018e0c:	466a      	mov	r2, sp
 8018e0e:	f000 f879 	bl	8018f04 <_fstat_r>
 8018e12:	2800      	cmp	r0, #0
 8018e14:	dbec      	blt.n	8018df0 <__swhatbuf_r+0x12>
 8018e16:	9901      	ldr	r1, [sp, #4]
 8018e18:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018e1c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018e20:	4259      	negs	r1, r3
 8018e22:	4159      	adcs	r1, r3
 8018e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018e28:	e7eb      	b.n	8018e02 <__swhatbuf_r+0x24>

08018e2a <__smakebuf_r>:
 8018e2a:	898b      	ldrh	r3, [r1, #12]
 8018e2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018e2e:	079d      	lsls	r5, r3, #30
 8018e30:	4606      	mov	r6, r0
 8018e32:	460c      	mov	r4, r1
 8018e34:	d507      	bpl.n	8018e46 <__smakebuf_r+0x1c>
 8018e36:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018e3a:	6023      	str	r3, [r4, #0]
 8018e3c:	6123      	str	r3, [r4, #16]
 8018e3e:	2301      	movs	r3, #1
 8018e40:	6163      	str	r3, [r4, #20]
 8018e42:	b002      	add	sp, #8
 8018e44:	bd70      	pop	{r4, r5, r6, pc}
 8018e46:	ab01      	add	r3, sp, #4
 8018e48:	466a      	mov	r2, sp
 8018e4a:	f7ff ffc8 	bl	8018dde <__swhatbuf_r>
 8018e4e:	9900      	ldr	r1, [sp, #0]
 8018e50:	4605      	mov	r5, r0
 8018e52:	4630      	mov	r0, r6
 8018e54:	f7ff faf6 	bl	8018444 <_malloc_r>
 8018e58:	b948      	cbnz	r0, 8018e6e <__smakebuf_r+0x44>
 8018e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e5e:	059a      	lsls	r2, r3, #22
 8018e60:	d4ef      	bmi.n	8018e42 <__smakebuf_r+0x18>
 8018e62:	f023 0303 	bic.w	r3, r3, #3
 8018e66:	f043 0302 	orr.w	r3, r3, #2
 8018e6a:	81a3      	strh	r3, [r4, #12]
 8018e6c:	e7e3      	b.n	8018e36 <__smakebuf_r+0xc>
 8018e6e:	89a3      	ldrh	r3, [r4, #12]
 8018e70:	6020      	str	r0, [r4, #0]
 8018e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018e76:	81a3      	strh	r3, [r4, #12]
 8018e78:	9b00      	ldr	r3, [sp, #0]
 8018e7a:	6163      	str	r3, [r4, #20]
 8018e7c:	9b01      	ldr	r3, [sp, #4]
 8018e7e:	6120      	str	r0, [r4, #16]
 8018e80:	b15b      	cbz	r3, 8018e9a <__smakebuf_r+0x70>
 8018e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018e86:	4630      	mov	r0, r6
 8018e88:	f000 f84e 	bl	8018f28 <_isatty_r>
 8018e8c:	b128      	cbz	r0, 8018e9a <__smakebuf_r+0x70>
 8018e8e:	89a3      	ldrh	r3, [r4, #12]
 8018e90:	f023 0303 	bic.w	r3, r3, #3
 8018e94:	f043 0301 	orr.w	r3, r3, #1
 8018e98:	81a3      	strh	r3, [r4, #12]
 8018e9a:	89a3      	ldrh	r3, [r4, #12]
 8018e9c:	431d      	orrs	r5, r3
 8018e9e:	81a5      	strh	r5, [r4, #12]
 8018ea0:	e7cf      	b.n	8018e42 <__smakebuf_r+0x18>

08018ea2 <_raise_r>:
 8018ea2:	291f      	cmp	r1, #31
 8018ea4:	b538      	push	{r3, r4, r5, lr}
 8018ea6:	4604      	mov	r4, r0
 8018ea8:	460d      	mov	r5, r1
 8018eaa:	d904      	bls.n	8018eb6 <_raise_r+0x14>
 8018eac:	2316      	movs	r3, #22
 8018eae:	6003      	str	r3, [r0, #0]
 8018eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8018eb4:	bd38      	pop	{r3, r4, r5, pc}
 8018eb6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018eb8:	b112      	cbz	r2, 8018ec0 <_raise_r+0x1e>
 8018eba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018ebe:	b94b      	cbnz	r3, 8018ed4 <_raise_r+0x32>
 8018ec0:	4620      	mov	r0, r4
 8018ec2:	f000 f853 	bl	8018f6c <_getpid_r>
 8018ec6:	462a      	mov	r2, r5
 8018ec8:	4601      	mov	r1, r0
 8018eca:	4620      	mov	r0, r4
 8018ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018ed0:	f000 b83a 	b.w	8018f48 <_kill_r>
 8018ed4:	2b01      	cmp	r3, #1
 8018ed6:	d00a      	beq.n	8018eee <_raise_r+0x4c>
 8018ed8:	1c59      	adds	r1, r3, #1
 8018eda:	d103      	bne.n	8018ee4 <_raise_r+0x42>
 8018edc:	2316      	movs	r3, #22
 8018ede:	6003      	str	r3, [r0, #0]
 8018ee0:	2001      	movs	r0, #1
 8018ee2:	e7e7      	b.n	8018eb4 <_raise_r+0x12>
 8018ee4:	2400      	movs	r4, #0
 8018ee6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018eea:	4628      	mov	r0, r5
 8018eec:	4798      	blx	r3
 8018eee:	2000      	movs	r0, #0
 8018ef0:	e7e0      	b.n	8018eb4 <_raise_r+0x12>
	...

08018ef4 <raise>:
 8018ef4:	4b02      	ldr	r3, [pc, #8]	; (8018f00 <raise+0xc>)
 8018ef6:	4601      	mov	r1, r0
 8018ef8:	6818      	ldr	r0, [r3, #0]
 8018efa:	f7ff bfd2 	b.w	8018ea2 <_raise_r>
 8018efe:	bf00      	nop
 8018f00:	20000258 	.word	0x20000258

08018f04 <_fstat_r>:
 8018f04:	b538      	push	{r3, r4, r5, lr}
 8018f06:	4d07      	ldr	r5, [pc, #28]	; (8018f24 <_fstat_r+0x20>)
 8018f08:	2300      	movs	r3, #0
 8018f0a:	4604      	mov	r4, r0
 8018f0c:	4608      	mov	r0, r1
 8018f0e:	4611      	mov	r1, r2
 8018f10:	602b      	str	r3, [r5, #0]
 8018f12:	f7e7 fe30 	bl	8000b76 <_fstat>
 8018f16:	1c43      	adds	r3, r0, #1
 8018f18:	d102      	bne.n	8018f20 <_fstat_r+0x1c>
 8018f1a:	682b      	ldr	r3, [r5, #0]
 8018f1c:	b103      	cbz	r3, 8018f20 <_fstat_r+0x1c>
 8018f1e:	6023      	str	r3, [r4, #0]
 8018f20:	bd38      	pop	{r3, r4, r5, pc}
 8018f22:	bf00      	nop
 8018f24:	2000a778 	.word	0x2000a778

08018f28 <_isatty_r>:
 8018f28:	b538      	push	{r3, r4, r5, lr}
 8018f2a:	4d06      	ldr	r5, [pc, #24]	; (8018f44 <_isatty_r+0x1c>)
 8018f2c:	2300      	movs	r3, #0
 8018f2e:	4604      	mov	r4, r0
 8018f30:	4608      	mov	r0, r1
 8018f32:	602b      	str	r3, [r5, #0]
 8018f34:	f7e7 fe2f 	bl	8000b96 <_isatty>
 8018f38:	1c43      	adds	r3, r0, #1
 8018f3a:	d102      	bne.n	8018f42 <_isatty_r+0x1a>
 8018f3c:	682b      	ldr	r3, [r5, #0]
 8018f3e:	b103      	cbz	r3, 8018f42 <_isatty_r+0x1a>
 8018f40:	6023      	str	r3, [r4, #0]
 8018f42:	bd38      	pop	{r3, r4, r5, pc}
 8018f44:	2000a778 	.word	0x2000a778

08018f48 <_kill_r>:
 8018f48:	b538      	push	{r3, r4, r5, lr}
 8018f4a:	4d07      	ldr	r5, [pc, #28]	; (8018f68 <_kill_r+0x20>)
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	4604      	mov	r4, r0
 8018f50:	4608      	mov	r0, r1
 8018f52:	4611      	mov	r1, r2
 8018f54:	602b      	str	r3, [r5, #0]
 8018f56:	f7e7 fdad 	bl	8000ab4 <_kill>
 8018f5a:	1c43      	adds	r3, r0, #1
 8018f5c:	d102      	bne.n	8018f64 <_kill_r+0x1c>
 8018f5e:	682b      	ldr	r3, [r5, #0]
 8018f60:	b103      	cbz	r3, 8018f64 <_kill_r+0x1c>
 8018f62:	6023      	str	r3, [r4, #0]
 8018f64:	bd38      	pop	{r3, r4, r5, pc}
 8018f66:	bf00      	nop
 8018f68:	2000a778 	.word	0x2000a778

08018f6c <_getpid_r>:
 8018f6c:	f7e7 bd9a 	b.w	8000aa4 <_getpid>

08018f70 <_init>:
 8018f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f72:	bf00      	nop
 8018f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018f76:	bc08      	pop	{r3}
 8018f78:	469e      	mov	lr, r3
 8018f7a:	4770      	bx	lr

08018f7c <_fini>:
 8018f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f7e:	bf00      	nop
 8018f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018f82:	bc08      	pop	{r3}
 8018f84:	469e      	mov	lr, r3
 8018f86:	4770      	bx	lr
