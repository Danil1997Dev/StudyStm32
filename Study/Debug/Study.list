
Study.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bd10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d64  0801bea0  0801bea0  0002bea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ec04  0801ec04  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  0801ec04  0801ec04  0002ec04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ec0c  0801ec0c  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ec0c  0801ec0c  0002ec0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ec10  0801ec10  0002ec10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0801ec14  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030248  2**0
                  CONTENTS
 10 .bss          0000aa18  20000248  20000248  00030248  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000ac60  2000ac60  00030248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 14 .debug_info   000315f0  00000000  00000000  000302bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008994  00000000  00000000  000618ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000024b8  00000000  00000000  0006a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001c95  00000000  00000000  0006c6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034802  00000000  00000000  0006e38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003dc4e  00000000  00000000  000a2b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e89b0  00000000  00000000  000e07dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009e2c  00000000  00000000  001c9190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  001d2fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801be88 	.word	0x0801be88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	0801be88 	.word	0x0801be88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fdd9 	bl	8001128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f85b 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f937 	bl	80007ec <MX_GPIO_Init>
  MX_DMA_Init();
 800057e:	f000 f90d 	bl	800079c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000582:	f000 f8e1 	bl	8000748 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000586:	f019 fd9b 	bl	801a0c0 <MX_USB_DEVICE_Init>
  MX_LWIP_Init();
 800058a:	f009 fa77 	bl	8009a7c <MX_LWIP_Init>
  MX_FATFS_Init();
 800058e:	f009 f8c5 	bl	800971c <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 8000592:	f000 f8b9 	bl	8000708 <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */
  //__HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
  //__HAL_UART_ENABLE_IT(&huart3,UART_IT_TC);
  HAL_UART_Receive_DMA(&huart3, RX_buff, 15);
 8000596:	220f      	movs	r2, #15
 8000598:	491c      	ldr	r1, [pc, #112]	; (800060c <main+0xa0>)
 800059a:	481d      	ldr	r0, [pc, #116]	; (8000610 <main+0xa4>)
 800059c:	f005 ff96 	bl	80064cc <HAL_UART_Receive_DMA>
  //tcp_server_init();
  //tcp_client_init();
//  MX_LWIP_Process();
  if (FATFS_LinkDriver(&SD_Driver, "") == FR_OK)
 80005a0:	491c      	ldr	r1, [pc, #112]	; (8000614 <main+0xa8>)
 80005a2:	481d      	ldr	r0, [pc, #116]	; (8000618 <main+0xac>)
 80005a4:	f010 f86e 	bl	8010684 <FATFS_LinkDriver>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d12a      	bne.n	8000604 <main+0x98>
  {
	  res_fs = f_mount(&fs, (const TCHAR*)"", 1);
 80005ae:	2201      	movs	r2, #1
 80005b0:	4918      	ldr	r1, [pc, #96]	; (8000614 <main+0xa8>)
 80005b2:	481a      	ldr	r0, [pc, #104]	; (800061c <main+0xb0>)
 80005b4:	f00f fbf8 	bl	800fda8 <f_mount>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <main+0xb4>)
 80005be:	701a      	strb	r2, [r3, #0]
	  if (res_fs == FR_OK)
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <main+0xb4>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d11d      	bne.n	8000604 <main+0x98>
	  {
		  res_fs = f_open(&file, "FIRST.txt", FA_CREATE_ALWAYS | FA_WRITE | FA_OPEN_ALWAYS | FA_READ);
 80005c8:	221b      	movs	r2, #27
 80005ca:	4916      	ldr	r1, [pc, #88]	; (8000624 <main+0xb8>)
 80005cc:	4816      	ldr	r0, [pc, #88]	; (8000628 <main+0xbc>)
 80005ce:	f00f fc31 	bl	800fe34 <f_open>
 80005d2:	4603      	mov	r3, r0
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <main+0xb4>)
 80005d8:	701a      	strb	r2, [r3, #0]
		  if (res_fs == FR_OK)
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <main+0xb4>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d110      	bne.n	8000604 <main+0x98>
		  {
			  UINT cw;
			  res_fs = f_write(&file, "Hello on SD!!!", sizeof("Hello on SD!!!"), (void *)&cw);
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	220f      	movs	r2, #15
 80005e6:	4911      	ldr	r1, [pc, #68]	; (800062c <main+0xc0>)
 80005e8:	480f      	ldr	r0, [pc, #60]	; (8000628 <main+0xbc>)
 80005ea:	f00f fde1 	bl	80101b0 <f_write>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <main+0xb4>)
 80005f4:	701a      	strb	r2, [r3, #0]
			  if (res_fs == FR_OK)
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <main+0xb4>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d102      	bne.n	8000604 <main+0x98>
			  {
				  f_close(&file);
 80005fe:	480a      	ldr	r0, [pc, #40]	; (8000628 <main+0xbc>)
 8000600:	f00f ffc9 	bl	8010596 <f_close>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_UART_Transmit(&huart3, TX_buff, sizeof(TX_buff),0xFFFF);
	  //HAL_Delay(5000);
	  MX_LWIP_Process();
 8000604:	f009 fb7a 	bl	8009cfc <MX_LWIP_Process>
 8000608:	e7fc      	b.n	8000604 <main+0x98>
 800060a:	bf00      	nop
 800060c:	200003f0 	.word	0x200003f0
 8000610:	200002e8 	.word	0x200002e8
 8000614:	0801bea0 	.word	0x0801bea0
 8000618:	0801e97c 	.word	0x0801e97c
 800061c:	20000418 	.word	0x20000418
 8000620:	20000414 	.word	0x20000414
 8000624:	0801bea4 	.word	0x0801bea4
 8000628:	20000648 	.word	0x20000648
 800062c:	0801beb0 	.word	0x0801beb0

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f01a fd75 	bl	801b12e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <SystemClock_Config+0xd0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a28      	ldr	r2, [pc, #160]	; (8000700 <SystemClock_Config+0xd0>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b26      	ldr	r3, [pc, #152]	; (8000700 <SystemClock_Config+0xd0>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <SystemClock_Config+0xd4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a22      	ldr	r2, [pc, #136]	; (8000704 <SystemClock_Config+0xd4>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b20      	ldr	r3, [pc, #128]	; (8000704 <SystemClock_Config+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006a0:	2319      	movs	r3, #25
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006a4:	2390      	movs	r3, #144	; 0x90
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006ac:	2303      	movs	r3, #3
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f003 fffd 	bl	80046b4 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c0:	f000 f908 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2102      	movs	r1, #2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f004 fa5e 	bl	8004ba4 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ee:	f000 f8f1 	bl	80008d4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80006f2:	f004 fb3d 	bl	8004d70 <HAL_RCC_EnableCSS>
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	; 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_SDIO_SD_Init+0x38>)
 800070e:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <MX_SDIO_SD_Init+0x3c>)
 8000710:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_SDIO_SD_Init+0x38>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_SDIO_SD_Init+0x38>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_SDIO_SD_Init+0x38>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_SDIO_SD_Init+0x38>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <MX_SDIO_SD_Init+0x38>)
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 36;
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <MX_SDIO_SD_Init+0x38>)
 8000732:	2224      	movs	r2, #36	; 0x24
 8000734:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	20000264 	.word	0x20000264
 8000744:	40012c00 	.word	0x40012c00

08000748 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_USART3_UART_Init+0x4c>)
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <MX_USART3_UART_Init+0x50>)
 8000750:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_USART3_UART_Init+0x4c>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_USART3_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_USART3_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_USART3_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_USART3_UART_Init+0x4c>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_USART3_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_USART3_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_USART3_UART_Init+0x4c>)
 8000780:	f005 fe54 	bl	800642c <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800078a:	f000 f8a3 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200002e8 	.word	0x200002e8
 8000798:	40004800 	.word	0x40004800

0800079c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_DMA_Init+0x4c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <MX_DMA_Init+0x4c>)
 80007ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <MX_DMA_Init+0x4c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	200c      	movs	r0, #12
 80007c4:	f000 fe21 	bl	800140a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007c8:	200c      	movs	r0, #12
 80007ca:	f000 fe3a 	bl	8001442 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	200e      	movs	r0, #14
 80007d4:	f000 fe19 	bl	800140a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80007d8:	200e      	movs	r0, #14
 80007da:	f000 fe32 	bl	8001442 <HAL_NVIC_EnableIRQ>

}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b087      	sub	sp, #28
 80007f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <MX_GPIO_Init+0xa0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a24      	ldr	r2, [pc, #144]	; (800088c <MX_GPIO_Init+0xa0>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_GPIO_Init+0xa0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_GPIO_Init+0xa0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a1d      	ldr	r2, [pc, #116]	; (800088c <MX_GPIO_Init+0xa0>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_GPIO_Init+0xa0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_GPIO_Init+0xa0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a16      	ldr	r2, [pc, #88]	; (800088c <MX_GPIO_Init+0xa0>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_GPIO_Init+0xa0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_GPIO_Init+0xa0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <MX_GPIO_Init+0xa0>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <MX_GPIO_Init+0xa0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_GPIO_Init+0xa0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <MX_GPIO_Init+0xa0>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_GPIO_Init+0xa0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	bf00      	nop
 8000880:	371c      	adds	r7, #28
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

	if (huart == &huart3)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <HAL_UART_RxCpltCallback+0x34>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d10c      	bne.n	80008ba <HAL_UART_RxCpltCallback+0x2a>
	{
		HAL_UART_Receive_DMA(&huart3, RX_buff, 2);
 80008a0:	2202      	movs	r2, #2
 80008a2:	4909      	ldr	r1, [pc, #36]	; (80008c8 <HAL_UART_RxCpltCallback+0x38>)
 80008a4:	4807      	ldr	r0, [pc, #28]	; (80008c4 <HAL_UART_RxCpltCallback+0x34>)
 80008a6:	f005 fe11 	bl	80064cc <HAL_UART_Receive_DMA>
#ifndef COM_PORT
		byteNum++;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_UART_RxCpltCallback+0x3c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	3301      	adds	r3, #1
 80008b0:	4a06      	ldr	r2, [pc, #24]	; (80008cc <HAL_UART_RxCpltCallback+0x3c>)
 80008b2:	6013      	str	r3, [r2, #0]
		wr = 1;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_UART_RxCpltCallback+0x40>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
#endif
	}
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200002e8 	.word	0x200002e8
 80008c8:	200003f0 	.word	0x200003f0
 80008cc:	20000410 	.word	0x20000410
 80008d0:	2000087c 	.word	0x2000087c

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <HAL_MspInit+0x4c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	4a0f      	ldr	r2, [pc, #60]	; (800092c <HAL_MspInit+0x4c>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f4:	6453      	str	r3, [r2, #68]	; 0x44
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_MspInit+0x4c>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a2c      	ldr	r2, [pc, #176]	; (8000a00 <HAL_SD_MspInit+0xd0>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d152      	bne.n	80009f8 <HAL_SD_MspInit+0xc8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <HAL_SD_MspInit+0xd4>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a2a      	ldr	r2, [pc, #168]	; (8000a04 <HAL_SD_MspInit+0xd4>)
 800095c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <HAL_SD_MspInit+0xd4>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <HAL_SD_MspInit+0xd4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a23      	ldr	r2, [pc, #140]	; (8000a04 <HAL_SD_MspInit+0xd4>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <HAL_SD_MspInit+0xd4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <HAL_SD_MspInit+0xd4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <HAL_SD_MspInit+0xd4>)
 8000994:	f043 0308 	orr.w	r3, r3, #8
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <HAL_SD_MspInit+0xd4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80009a6:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80009aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009b8:	230c      	movs	r3, #12
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4811      	ldr	r0, [pc, #68]	; (8000a08 <HAL_SD_MspInit+0xd8>)
 80009c4:	f002 fa5c 	bl	8002e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009c8:	2304      	movs	r3, #4
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009d8:	230c      	movs	r3, #12
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	480a      	ldr	r0, [pc, #40]	; (8000a0c <HAL_SD_MspInit+0xdc>)
 80009e4:	f002 fa4c 	bl	8002e80 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2031      	movs	r0, #49	; 0x31
 80009ee:	f000 fd0c 	bl	800140a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80009f2:	2031      	movs	r0, #49	; 0x31
 80009f4:	f000 fd25 	bl	8001442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40012c00 	.word	0x40012c00
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020c00 	.word	0x40020c00

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a50      	ldr	r2, [pc, #320]	; (8000b70 <HAL_UART_MspInit+0x160>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	f040 809a 	bne.w	8000b68 <HAL_UART_MspInit+0x158>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	4b4e      	ldr	r3, [pc, #312]	; (8000b74 <HAL_UART_MspInit+0x164>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a4d      	ldr	r2, [pc, #308]	; (8000b74 <HAL_UART_MspInit+0x164>)
 8000a3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b4b      	ldr	r3, [pc, #300]	; (8000b74 <HAL_UART_MspInit+0x164>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	4b47      	ldr	r3, [pc, #284]	; (8000b74 <HAL_UART_MspInit+0x164>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	4a46      	ldr	r2, [pc, #280]	; (8000b74 <HAL_UART_MspInit+0x164>)
 8000a5a:	f043 0308 	orr.w	r3, r3, #8
 8000a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a60:	4b44      	ldr	r3, [pc, #272]	; (8000b74 <HAL_UART_MspInit+0x164>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	f003 0308 	and.w	r3, r3, #8
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	483b      	ldr	r0, [pc, #236]	; (8000b78 <HAL_UART_MspInit+0x168>)
 8000a8a:	f002 f9f9 	bl	8002e80 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000a8e:	4b3b      	ldr	r3, [pc, #236]	; (8000b7c <HAL_UART_MspInit+0x16c>)
 8000a90:	4a3b      	ldr	r2, [pc, #236]	; (8000b80 <HAL_UART_MspInit+0x170>)
 8000a92:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000a94:	4b39      	ldr	r3, [pc, #228]	; (8000b7c <HAL_UART_MspInit+0x16c>)
 8000a96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <HAL_UART_MspInit+0x16c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa2:	4b36      	ldr	r3, [pc, #216]	; (8000b7c <HAL_UART_MspInit+0x16c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <HAL_UART_MspInit+0x16c>)
 8000aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aae:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ab0:	4b32      	ldr	r3, [pc, #200]	; (8000b7c <HAL_UART_MspInit+0x16c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ab6:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <HAL_UART_MspInit+0x16c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000abc:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <HAL_UART_MspInit+0x16c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ac2:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <HAL_UART_MspInit+0x16c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <HAL_UART_MspInit+0x16c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000ace:	482b      	ldr	r0, [pc, #172]	; (8000b7c <HAL_UART_MspInit+0x16c>)
 8000ad0:	f000 fcd2 	bl	8001478 <HAL_DMA_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000ada:	f7ff fefb 	bl	80008d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a26      	ldr	r2, [pc, #152]	; (8000b7c <HAL_UART_MspInit+0x16c>)
 8000ae2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ae4:	4a25      	ldr	r2, [pc, #148]	; (8000b7c <HAL_UART_MspInit+0x16c>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000aea:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <HAL_UART_MspInit+0x174>)
 8000aec:	4a26      	ldr	r2, [pc, #152]	; (8000b88 <HAL_UART_MspInit+0x178>)
 8000aee:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <HAL_UART_MspInit+0x174>)
 8000af2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000af6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <HAL_UART_MspInit+0x174>)
 8000afa:	2240      	movs	r2, #64	; 0x40
 8000afc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <HAL_UART_MspInit+0x174>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <HAL_UART_MspInit+0x174>)
 8000b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <HAL_UART_MspInit+0x174>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_UART_MspInit+0x174>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <HAL_UART_MspInit+0x174>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_UART_MspInit+0x174>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_UART_MspInit+0x174>)
 8000b26:	2204      	movs	r2, #4
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <HAL_UART_MspInit+0x174>)
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_UART_MspInit+0x174>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <HAL_UART_MspInit+0x174>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000b3c:	4811      	ldr	r0, [pc, #68]	; (8000b84 <HAL_UART_MspInit+0x174>)
 8000b3e:	f000 fc9b 	bl	8001478 <HAL_DMA_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8000b48:	f7ff fec4 	bl	80008d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <HAL_UART_MspInit+0x174>)
 8000b50:	639a      	str	r2, [r3, #56]	; 0x38
 8000b52:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <HAL_UART_MspInit+0x174>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2027      	movs	r0, #39	; 0x27
 8000b5e:	f000 fc54 	bl	800140a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b62:	2027      	movs	r0, #39	; 0x27
 8000b64:	f000 fc6d 	bl	8001442 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40004800 	.word	0x40004800
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020c00 	.word	0x40020c00
 8000b7c:	20000330 	.word	0x20000330
 8000b80:	40026028 	.word	0x40026028
 8000b84:	20000390 	.word	0x20000390
 8000b88:	40026058 	.word	0x40026058

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000b90:	f004 f9f4 	bl	8004f7c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x8>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 faf6 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <DMA1_Stream1_IRQHandler+0x10>)
 8000bea:	f000 fddd 	bl	80017a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000330 	.word	0x20000330

08000bf8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <DMA1_Stream3_IRQHandler+0x10>)
 8000bfe:	f000 fdd3 	bl	80017a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000390 	.word	0x20000390

08000c0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <USART3_IRQHandler+0x10>)
 8000c12:	f005 fc81 	bl	8006518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  //HAL_UART_Receive_IT(&huart3, RX_buff, sizeof(RX_buff));
  //HAL_UART_Transmit_IT(&huart3, TX_buff_it, sizeof(TX_buff_it));

  /* USER CODE END USART3_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200002e8 	.word	0x200002e8

08000c20 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <SDIO_IRQHandler+0x10>)
 8000c26:	f004 fde9 	bl	80057fc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000264 	.word	0x20000264

08000c34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <OTG_FS_IRQHandler+0x10>)
 8000c3a:	f002 fc01 	bl	8003440 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20009f2c 	.word	0x20009f2c

08000c48 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <OTG_HS_IRQHandler+0x10>)
 8000c4e:	f002 fbf7 	bl	8003440 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000a410 	.word	0x2000a410

08000c5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return 1;
 8000c60:	2301      	movs	r3, #1
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <_kill>:

int _kill(int pid, int sig)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <_kill+0x20>)
 8000c78:	2216      	movs	r2, #22
 8000c7a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	2000ac50 	.word	0x2000ac50

08000c90 <_exit>:

void _exit (int status)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ffe5 	bl	8000c6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ca2:	e7fe      	b.n	8000ca2 <_exit+0x12>

08000ca4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e00a      	b.n	8000ccc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cb6:	f3af 8000 	nop.w
 8000cba:	4601      	mov	r1, r0
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60ba      	str	r2, [r7, #8]
 8000cc2:	b2ca      	uxtb	r2, r1
 8000cc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf0      	blt.n	8000cb6 <_read+0x12>
  }

  return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	e009      	b.n	8000d04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	60ba      	str	r2, [r7, #8]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dbf1      	blt.n	8000cf0 <_write+0x12>
  }
  return len;
 8000d0c:	687b      	ldr	r3, [r7, #4]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_close>:

int _close(int file)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_isatty>:

int _isatty(int file)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d88:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <_sbrk+0x5c>)
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <_sbrk+0x60>)
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <_sbrk+0x64>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <_sbrk+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d205      	bcs.n	8000dbc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <_sbrk+0x6c>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	371c      	adds	r7, #28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	20020000 	.word	0x20020000
 8000de0:	00000400 	.word	0x00000400
 8000de4:	20000878 	.word	0x20000878
 8000de8:	2000ac60 	.word	0x2000ac60
 8000dec:	2000ac50 	.word	0x2000ac50

08000df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <SystemInit+0x20>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <SystemInit+0x20>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e18:	f7ff ffea 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e1e:	490d      	ldr	r1, [pc, #52]	; (8000e54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e34:	4c0a      	ldr	r4, [pc, #40]	; (8000e60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e42:	f01a f9c3 	bl	801b1cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e46:	f7ff fb91 	bl	800056c <main>
  bx  lr    
 8000e4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e54:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8000e58:	0801ec14 	.word	0x0801ec14
  ldr r2, =_sbss
 8000e5c:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8000e60:	2000ac60 	.word	0x2000ac60

08000e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC_IRQHandler>

08000e66 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00b      	beq.n	8000e8e <DP83848_RegisterBusIO+0x28>
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d007      	beq.n	8000e8e <DP83848_RegisterBusIO+0x28>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <DP83848_RegisterBusIO+0x28>
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d102      	bne.n	8000e94 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	e014      	b.n	8000ebe <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	691a      	ldr	r2, [r3, #16]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d17c      	bne.n	8000fe4 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d002      	beq.n	8000ef8 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2220      	movs	r2, #32
 8000efc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	e01c      	b.n	8000f3e <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	f107 0208 	add.w	r2, r7, #8
 8000f0c:	2119      	movs	r1, #25
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	4798      	blx	r3
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	da03      	bge.n	8000f20 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8000f18:	f06f 0304 	mvn.w	r3, #4
 8000f1c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000f1e:	e00b      	b.n	8000f38 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	f003 031f 	and.w	r3, r3, #31
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d105      	bne.n	8000f38 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
         break;
 8000f36:	e005      	b.n	8000f44 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	2b1f      	cmp	r3, #31
 8000f42:	d9df      	bls.n	8000f04 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b1f      	cmp	r3, #31
 8000f4a:	d902      	bls.n	8000f52 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8000f4c:	f06f 0302 	mvn.w	r3, #2
 8000f50:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d145      	bne.n	8000fe4 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	6810      	ldr	r0, [r2, #0]
 8000f60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f64:	2100      	movs	r1, #0
 8000f66:	4798      	blx	r3
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db37      	blt.n	8000fde <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	6810      	ldr	r0, [r2, #0]
 8000f76:	f107 0208 	add.w	r2, r7, #8
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4798      	blx	r3
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db28      	blt.n	8000fd6 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4798      	blx	r3
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000f8e:	e01c      	b.n	8000fca <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4798      	blx	r3
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fa2:	d80e      	bhi.n	8000fc2 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	6810      	ldr	r0, [r2, #0]
 8000fac:	f107 0208 	add.w	r2, r7, #8
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4798      	blx	r3
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	da07      	bge.n	8000fca <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8000fba:	f06f 0304 	mvn.w	r3, #4
 8000fbe:	613b      	str	r3, [r7, #16]
                 break;
 8000fc0:	e010      	b.n	8000fe4 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8000fc2:	f06f 0301 	mvn.w	r3, #1
 8000fc6:	613b      	str	r3, [r7, #16]
               break;
 8000fc8:	e00c      	b.n	8000fe4 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1dd      	bne.n	8000f90 <DP83848_Init+0xc6>
 8000fd4:	e006      	b.n	8000fe4 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8000fd6:	f06f 0304 	mvn.w	r3, #4
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	e002      	b.n	8000fe4 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8000fde:	f06f 0303 	mvn.w	r3, #3
 8000fe2:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d112      	bne.n	8001010 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	4798      	blx	r3
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8000ff4:	bf00      	nop
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	4798      	blx	r3
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001008:	d9f5      	bls.n	8000ff6 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001010:	693b      	ldr	r3, [r7, #16]
 }
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b084      	sub	sp, #16
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	6810      	ldr	r0, [r2, #0]
 800102e:	f107 020c 	add.w	r2, r7, #12
 8001032:	2101      	movs	r1, #1
 8001034:	4798      	blx	r3
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	da02      	bge.n	8001042 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 800103c:	f06f 0304 	mvn.w	r3, #4
 8001040:	e06e      	b.n	8001120 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	6810      	ldr	r0, [r2, #0]
 800104a:	f107 020c 	add.w	r2, r7, #12
 800104e:	2101      	movs	r1, #1
 8001050:	4798      	blx	r3
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	da02      	bge.n	800105e <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8001058:	f06f 0304 	mvn.w	r3, #4
 800105c:	e060      	b.n	8001120 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8001068:	2301      	movs	r3, #1
 800106a:	e059      	b.n	8001120 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6810      	ldr	r0, [r2, #0]
 8001074:	f107 020c 	add.w	r2, r7, #12
 8001078:	2100      	movs	r1, #0
 800107a:	4798      	blx	r3
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	da02      	bge.n	8001088 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8001082:	f06f 0304 	mvn.w	r3, #4
 8001086:	e04b      	b.n	8001120 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d11b      	bne.n	80010ca <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <DP83848_GetLinkState+0x90>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80010a6:	2302      	movs	r3, #2
 80010a8:	e03a      	b.n	8001120 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e033      	b.n	8001120 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80010c2:	2304      	movs	r3, #4
 80010c4:	e02c      	b.n	8001120 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80010c6:	2305      	movs	r3, #5
 80010c8:	e02a      	b.n	8001120 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	6810      	ldr	r0, [r2, #0]
 80010d2:	f107 020c 	add.w	r2, r7, #12
 80010d6:	2110      	movs	r1, #16
 80010d8:	4798      	blx	r3
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	da02      	bge.n	80010e6 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 80010e0:	f06f 0304 	mvn.w	r3, #4
 80010e4:	e01c      	b.n	8001120 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 80010f0:	2306      	movs	r3, #6
 80010f2:	e015      	b.n	8001120 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0306 	and.w	r3, r3, #6
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d101      	bne.n	8001102 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80010fe:	2302      	movs	r3, #2
 8001100:	e00e      	b.n	8001120 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f003 0306 	and.w	r3, r3, #6
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800110c:	2303      	movs	r3, #3
 800110e:	e007      	b.n	8001120 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0306 	and.w	r3, r3, #6
 8001116:	2b06      	cmp	r3, #6
 8001118:	d101      	bne.n	800111e <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800111a:	2304      	movs	r3, #4
 800111c:	e000      	b.n	8001120 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 800111e:	2305      	movs	r3, #5
    }
  }
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_Init+0x40>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <HAL_Init+0x40>)
 8001132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001136:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_Init+0x40>)
 800113e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001142:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a07      	ldr	r2, [pc, #28]	; (8001168 <HAL_Init+0x40>)
 800114a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 f94f 	bl	80013f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001156:	200f      	movs	r0, #15
 8001158:	f000 f808 	bl	800116c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800115c:	f7ff fbc0 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023c00 	.word	0x40023c00

0800116c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x54>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x58>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	fbb3 f3f1 	udiv	r3, r3, r1
 8001186:	fbb2 f3f3 	udiv	r3, r2, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f967 	bl	800145e <HAL_SYSTICK_Config>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00e      	b.n	80011b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d80a      	bhi.n	80011b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f000 f92f 	bl	800140a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ac:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <HAL_InitTick+0x5c>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e000      	b.n	80011b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000000 	.word	0x20000000
 80011c4:	20000008 	.word	0x20000008
 80011c8:	20000004 	.word	0x20000004

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000880 	.word	0x20000880

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000880 	.word	0x20000880

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff ffee 	bl	80011f4 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_Delay+0x44>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001232:	bf00      	nop
 8001234:	f7ff ffde 	bl	80011f4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008

08001254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001270:	4013      	ands	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800127c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001286:	4a04      	ldr	r2, [pc, #16]	; (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	60d3      	str	r3, [r2, #12]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <__NVIC_GetPriorityGrouping+0x18>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	f003 0307 	and.w	r3, r3, #7
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	db0b      	blt.n	80012e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	f003 021f 	and.w	r2, r3, #31
 80012d0:	4907      	ldr	r1, [pc, #28]	; (80012f0 <__NVIC_EnableIRQ+0x38>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	2001      	movs	r0, #1
 80012da:	fa00 f202 	lsl.w	r2, r0, r2
 80012de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000e100 	.word	0xe000e100

080012f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	db0a      	blt.n	800131e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	490c      	ldr	r1, [pc, #48]	; (8001340 <__NVIC_SetPriority+0x4c>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	0112      	lsls	r2, r2, #4
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	440b      	add	r3, r1
 8001318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800131c:	e00a      	b.n	8001334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4908      	ldr	r1, [pc, #32]	; (8001344 <__NVIC_SetPriority+0x50>)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	3b04      	subs	r3, #4
 800132c:	0112      	lsls	r2, r2, #4
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	440b      	add	r3, r1
 8001332:	761a      	strb	r2, [r3, #24]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000e100 	.word	0xe000e100
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001348:	b480      	push	{r7}
 800134a:	b089      	sub	sp, #36	; 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f1c3 0307 	rsb	r3, r3, #7
 8001362:	2b04      	cmp	r3, #4
 8001364:	bf28      	it	cs
 8001366:	2304      	movcs	r3, #4
 8001368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3304      	adds	r3, #4
 800136e:	2b06      	cmp	r3, #6
 8001370:	d902      	bls.n	8001378 <NVIC_EncodePriority+0x30>
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3b03      	subs	r3, #3
 8001376:	e000      	b.n	800137a <NVIC_EncodePriority+0x32>
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	f04f 32ff 	mov.w	r2, #4294967295
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43da      	mvns	r2, r3
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	401a      	ands	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001390:	f04f 31ff 	mov.w	r1, #4294967295
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	fa01 f303 	lsl.w	r3, r1, r3
 800139a:	43d9      	mvns	r1, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	4313      	orrs	r3, r2
         );
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3724      	adds	r7, #36	; 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c0:	d301      	bcc.n	80013c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00f      	b.n	80013e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <SysTick_Config+0x40>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ce:	210f      	movs	r1, #15
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
 80013d4:	f7ff ff8e 	bl	80012f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <SysTick_Config+0x40>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <SysTick_Config+0x40>)
 80013e0:	2207      	movs	r2, #7
 80013e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	e000e010 	.word	0xe000e010

080013f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff29 	bl	8001254 <__NVIC_SetPriorityGrouping>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140a:	b580      	push	{r7, lr}
 800140c:	b086      	sub	sp, #24
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800141c:	f7ff ff3e 	bl	800129c <__NVIC_GetPriorityGrouping>
 8001420:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	68b9      	ldr	r1, [r7, #8]
 8001426:	6978      	ldr	r0, [r7, #20]
 8001428:	f7ff ff8e 	bl	8001348 <NVIC_EncodePriority>
 800142c:	4602      	mov	r2, r0
 800142e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001432:	4611      	mov	r1, r2
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff5d 	bl	80012f4 <__NVIC_SetPriority>
}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff31 	bl	80012b8 <__NVIC_EnableIRQ>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ffa2 	bl	80013b0 <SysTick_Config>
 800146c:	4603      	mov	r3, r0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001484:	f7ff feb6 	bl	80011f4 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e099      	b.n	80015c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2202      	movs	r2, #2
 8001498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0201 	bic.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014b4:	e00f      	b.n	80014d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014b6:	f7ff fe9d 	bl	80011f4 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b05      	cmp	r3, #5
 80014c2:	d908      	bls.n	80014d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2220      	movs	r2, #32
 80014c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e078      	b.n	80015c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1e8      	bne.n	80014b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <HAL_DMA_Init+0x158>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001502:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800150e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800151a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4313      	orrs	r3, r2
 8001526:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	2b04      	cmp	r3, #4
 800152e:	d107      	bne.n	8001540 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	4313      	orrs	r3, r2
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4313      	orrs	r3, r2
 800153e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f023 0307 	bic.w	r3, r3, #7
 8001556:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	4313      	orrs	r3, r2
 8001560:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	2b04      	cmp	r3, #4
 8001568:	d117      	bne.n	800159a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4313      	orrs	r3, r2
 8001572:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00e      	beq.n	800159a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 fb01 	bl	8001b84 <DMA_CheckFifoParam>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d008      	beq.n	800159a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2240      	movs	r2, #64	; 0x40
 800158c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001596:	2301      	movs	r3, #1
 8001598:	e016      	b.n	80015c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 fab8 	bl	8001b18 <DMA_CalcBaseAndBitshift>
 80015a8:	4603      	mov	r3, r0
 80015aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b0:	223f      	movs	r2, #63	; 0x3f
 80015b2:	409a      	lsls	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	f010803f 	.word	0xf010803f

080015d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_DMA_Start_IT+0x26>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e040      	b.n	800167c <HAL_DMA_Start_IT+0xa8>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b01      	cmp	r3, #1
 800160c:	d12f      	bne.n	800166e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2202      	movs	r2, #2
 8001612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 fa4a 	bl	8001abc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162c:	223f      	movs	r2, #63	; 0x3f
 800162e:	409a      	lsls	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0216 	orr.w	r2, r2, #22
 8001642:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	2b00      	cmp	r3, #0
 800164a:	d007      	beq.n	800165c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0208 	orr.w	r2, r2, #8
 800165a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0201 	orr.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e005      	b.n	800167a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001676:	2302      	movs	r3, #2
 8001678:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800167a:	7dfb      	ldrb	r3, [r7, #23]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001692:	f7ff fdaf 	bl	80011f4 <HAL_GetTick>
 8001696:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d008      	beq.n	80016b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e052      	b.n	800175c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0216 	bic.w	r2, r2, #22
 80016c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695a      	ldr	r2, [r3, #20]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d103      	bne.n	80016e6 <HAL_DMA_Abort+0x62>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d007      	beq.n	80016f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0208 	bic.w	r2, r2, #8
 80016f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0201 	bic.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001706:	e013      	b.n	8001730 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001708:	f7ff fd74 	bl	80011f4 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b05      	cmp	r3, #5
 8001714:	d90c      	bls.n	8001730 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2220      	movs	r2, #32
 800171a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2203      	movs	r2, #3
 8001720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e015      	b.n	800175c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1e4      	bne.n	8001708 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001742:	223f      	movs	r2, #63	; 0x3f
 8001744:	409a      	lsls	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d004      	beq.n	8001782 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e00c      	b.n	800179c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2205      	movs	r2, #5
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0201 	bic.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017b4:	4b8e      	ldr	r3, [pc, #568]	; (80019f0 <HAL_DMA_IRQHandler+0x248>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a8e      	ldr	r2, [pc, #568]	; (80019f4 <HAL_DMA_IRQHandler+0x24c>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	0a9b      	lsrs	r3, r3, #10
 80017c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	2208      	movs	r2, #8
 80017d4:	409a      	lsls	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4013      	ands	r3, r2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01a      	beq.n	8001814 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d013      	beq.n	8001814 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001800:	2208      	movs	r2, #8
 8001802:	409a      	lsls	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180c:	f043 0201 	orr.w	r2, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001818:	2201      	movs	r2, #1
 800181a:	409a      	lsls	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d012      	beq.n	800184a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	2201      	movs	r2, #1
 8001838:	409a      	lsls	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001842:	f043 0202 	orr.w	r2, r3, #2
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184e:	2204      	movs	r2, #4
 8001850:	409a      	lsls	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4013      	ands	r3, r2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d012      	beq.n	8001880 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00b      	beq.n	8001880 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186c:	2204      	movs	r2, #4
 800186e:	409a      	lsls	r2, r3
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001878:	f043 0204 	orr.w	r2, r3, #4
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001884:	2210      	movs	r2, #16
 8001886:	409a      	lsls	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d043      	beq.n	8001918 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d03c      	beq.n	8001918 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a2:	2210      	movs	r2, #16
 80018a4:	409a      	lsls	r2, r3
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d018      	beq.n	80018ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d108      	bne.n	80018d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d024      	beq.n	8001918 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	4798      	blx	r3
 80018d6:	e01f      	b.n	8001918 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d01b      	beq.n	8001918 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	4798      	blx	r3
 80018e8:	e016      	b.n	8001918 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d107      	bne.n	8001908 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0208 	bic.w	r2, r2, #8
 8001906:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191c:	2220      	movs	r2, #32
 800191e:	409a      	lsls	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 808f 	beq.w	8001a48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0310 	and.w	r3, r3, #16
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 8087 	beq.w	8001a48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193e:	2220      	movs	r2, #32
 8001940:	409a      	lsls	r2, r3
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b05      	cmp	r3, #5
 8001950:	d136      	bne.n	80019c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0216 	bic.w	r2, r2, #22
 8001960:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695a      	ldr	r2, [r3, #20]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001970:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	2b00      	cmp	r3, #0
 8001978:	d103      	bne.n	8001982 <HAL_DMA_IRQHandler+0x1da>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800197e:	2b00      	cmp	r3, #0
 8001980:	d007      	beq.n	8001992 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0208 	bic.w	r2, r2, #8
 8001990:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001996:	223f      	movs	r2, #63	; 0x3f
 8001998:	409a      	lsls	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d07e      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4798      	blx	r3
        }
        return;
 80019be:	e079      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d01d      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10d      	bne.n	80019f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d031      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	4798      	blx	r3
 80019ec:	e02c      	b.n	8001a48 <HAL_DMA_IRQHandler+0x2a0>
 80019ee:	bf00      	nop
 80019f0:	20000000 	.word	0x20000000
 80019f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d023      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	4798      	blx	r3
 8001a08:	e01e      	b.n	8001a48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10f      	bne.n	8001a38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0210 	bic.w	r2, r2, #16
 8001a26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d032      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d022      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2205      	movs	r2, #5
 8001a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	3301      	adds	r3, #1
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d307      	bcc.n	8001a90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f2      	bne.n	8001a74 <HAL_DMA_IRQHandler+0x2cc>
 8001a8e:	e000      	b.n	8001a92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	4798      	blx	r3
 8001ab2:	e000      	b.n	8001ab6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ab4:	bf00      	nop
    }
  }
}
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ad8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b40      	cmp	r3, #64	; 0x40
 8001ae8:	d108      	bne.n	8001afc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001afa:	e007      	b.n	8001b0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	60da      	str	r2, [r3, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	3b10      	subs	r3, #16
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <DMA_CalcBaseAndBitshift+0x64>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	091b      	lsrs	r3, r3, #4
 8001b30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b32:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <DMA_CalcBaseAndBitshift+0x68>)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d909      	bls.n	8001b5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b4e:	f023 0303 	bic.w	r3, r3, #3
 8001b52:	1d1a      	adds	r2, r3, #4
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	659a      	str	r2, [r3, #88]	; 0x58
 8001b58:	e007      	b.n	8001b6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b62:	f023 0303 	bic.w	r3, r3, #3
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	aaaaaaab 	.word	0xaaaaaaab
 8001b80:	0801e974 	.word	0x0801e974

08001b84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d11f      	bne.n	8001bde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d856      	bhi.n	8001c52 <DMA_CheckFifoParam+0xce>
 8001ba4:	a201      	add	r2, pc, #4	; (adr r2, 8001bac <DMA_CheckFifoParam+0x28>)
 8001ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001baa:	bf00      	nop
 8001bac:	08001bbd 	.word	0x08001bbd
 8001bb0:	08001bcf 	.word	0x08001bcf
 8001bb4:	08001bbd 	.word	0x08001bbd
 8001bb8:	08001c53 	.word	0x08001c53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d046      	beq.n	8001c56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bcc:	e043      	b.n	8001c56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bd6:	d140      	bne.n	8001c5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bdc:	e03d      	b.n	8001c5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001be6:	d121      	bne.n	8001c2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d837      	bhi.n	8001c5e <DMA_CheckFifoParam+0xda>
 8001bee:	a201      	add	r2, pc, #4	; (adr r2, 8001bf4 <DMA_CheckFifoParam+0x70>)
 8001bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf4:	08001c05 	.word	0x08001c05
 8001bf8:	08001c0b 	.word	0x08001c0b
 8001bfc:	08001c05 	.word	0x08001c05
 8001c00:	08001c1d 	.word	0x08001c1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
      break;
 8001c08:	e030      	b.n	8001c6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d025      	beq.n	8001c62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c1a:	e022      	b.n	8001c62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c24:	d11f      	bne.n	8001c66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c2a:	e01c      	b.n	8001c66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d903      	bls.n	8001c3a <DMA_CheckFifoParam+0xb6>
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d003      	beq.n	8001c40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c38:	e018      	b.n	8001c6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c3e:	e015      	b.n	8001c6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00e      	beq.n	8001c6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c50:	e00b      	b.n	8001c6a <DMA_CheckFifoParam+0xe6>
      break;
 8001c52:	bf00      	nop
 8001c54:	e00a      	b.n	8001c6c <DMA_CheckFifoParam+0xe8>
      break;
 8001c56:	bf00      	nop
 8001c58:	e008      	b.n	8001c6c <DMA_CheckFifoParam+0xe8>
      break;
 8001c5a:	bf00      	nop
 8001c5c:	e006      	b.n	8001c6c <DMA_CheckFifoParam+0xe8>
      break;
 8001c5e:	bf00      	nop
 8001c60:	e004      	b.n	8001c6c <DMA_CheckFifoParam+0xe8>
      break;
 8001c62:	bf00      	nop
 8001c64:	e002      	b.n	8001c6c <DMA_CheckFifoParam+0xe8>
      break;   
 8001c66:	bf00      	nop
 8001c68:	e000      	b.n	8001c6c <DMA_CheckFifoParam+0xe8>
      break;
 8001c6a:	bf00      	nop
    }
  } 
  
  return status; 
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop

08001c7c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e06c      	b.n	8001d68 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d106      	bne.n	8001ca6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2223      	movs	r2, #35	; 0x23
 8001c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f008 f9e7 	bl	800a074 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	4b31      	ldr	r3, [pc, #196]	; (8001d70 <HAL_ETH_Init+0xf4>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	4a30      	ldr	r2, [pc, #192]	; (8001d70 <HAL_ETH_Init+0xf4>)
 8001cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <HAL_ETH_Init+0xf4>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <HAL_ETH_Init+0xf8>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4a2b      	ldr	r2, [pc, #172]	; (8001d74 <HAL_ETH_Init+0xf8>)
 8001cc8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ccc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001cce:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <HAL_ETH_Init+0xf8>)
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	4927      	ldr	r1, [pc, #156]	; (8001d74 <HAL_ETH_Init+0xf8>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <HAL_ETH_Init+0xf8>)
 8001cde:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cf6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cf8:	f7ff fa7c 	bl	80011f4 <HAL_GetTick>
 8001cfc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001cfe:	e011      	b.n	8001d24 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001d00:	f7ff fa78 	bl	80011f4 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d0e:	d909      	bls.n	8001d24 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2204      	movs	r2, #4
 8001d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	22e0      	movs	r2, #224	; 0xe0
 8001d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e021      	b.n	8001d68 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1e4      	bne.n	8001d00 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fdfc 	bl	8002934 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fea3 	bl	8002a88 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 fef9 	bl	8002b3a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	2100      	movs	r1, #0
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 fe61 	bl	8002a18 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2210      	movs	r2, #16
 8001d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40013800 	.word	0x40013800

08001d78 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d86:	2b10      	cmp	r3, #16
 8001d88:	d150      	bne.n	8001e2c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2223      	movs	r2, #35	; 0x23
 8001d8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2204      	movs	r2, #4
 8001d96:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f9fd 	bl	8002198 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0208 	orr.w	r2, r2, #8
 8001dac:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001db6:	2001      	movs	r0, #1
 8001db8:	f7ff fa28 	bl	800120c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0204 	orr.w	r2, r2, #4
 8001dd2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f7ff fa15 	bl	800120c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fc42 	bl	8002674 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e06:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	f043 0302 	orr.w	r3, r3, #2
 8001e1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e1e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2223      	movs	r2, #35	; 0x23
 8001e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e000      	b.n	8001e2e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
  }
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e44:	2b23      	cmp	r3, #35	; 0x23
 8001e46:	d14a      	bne.n	8001ede <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2223      	movs	r2, #35	; 0x23
 8001e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e66:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	f023 0302 	bic.w	r3, r3, #2
 8001e7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e7e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0204 	bic.w	r2, r2, #4
 8001e8e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e98:	2001      	movs	r0, #1
 8001e9a:	f7ff f9b7 	bl	800120c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fbe4 	bl	8002674 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0208 	bic.w	r2, r2, #8
 8001eba:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7ff f9a1 	bl	800120c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2210      	movs	r2, #16
 8001ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e000      	b.n	8001ee0 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
  }
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d109      	bne.n	8001f0e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f00:	f043 0201 	orr.w	r2, r3, #1
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e07c      	b.n	8002008 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f14:	2b23      	cmp	r3, #35	; 0x23
 8001f16:	d176      	bne.n	8002006 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	68b9      	ldr	r1, [r7, #8]
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 fe79 	bl	8002c14 <ETH_Prepare_Tx_Descriptors>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d009      	beq.n	8001f3c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2e:	f043 0202 	orr.w	r2, r3, #2
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e065      	b.n	8002008 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f3c:	f3bf 8f4f 	dsb	sy
}
 8001f40:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3206      	adds	r2, #6
 8001f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d904      	bls.n	8001f6c <HAL_ETH_Transmit+0x84>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	1f1a      	subs	r2, r3, #4
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3106      	adds	r1, #6
 8001f78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f80:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001f82:	f7ff f937 	bl	80011f4 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001f88:	e037      	b.n	8001ffa <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d011      	beq.n	8001fc0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa2:	f043 0208 	orr.w	r2, r3, #8
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e023      	b.n	8002008 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc6:	d018      	beq.n	8001ffa <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fc8:	f7ff f914 	bl	80011f4 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d302      	bcc.n	8001fde <HAL_ETH_Transmit+0xf6>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10d      	bne.n	8001ffa <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe4:	f043 0204 	orr.w	r2, r3, #4
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001ff4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e006      	b.n	8002008 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	dbc3      	blt.n	8001f8a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
  }
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d109      	bne.n	800203c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0a8      	b.n	800218e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002042:	2b23      	cmp	r3, #35	; 0x23
 8002044:	d001      	beq.n	800204a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0a1      	b.n	800218e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	3212      	adds	r2, #18
 8002056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800205a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002060:	f1c3 0304 	rsb	r3, r3, #4
 8002064:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002066:	e06a      	b.n	800213e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	69da      	ldr	r2, [r3, #28]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208c:	2b00      	cmp	r3, #0
 800208e:	d103      	bne.n	8002098 <HAL_ETH_ReadData+0x88>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d040      	beq.n	800211a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00c      	beq.n	80020dc <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	0c1b      	lsrs	r3, r3, #16
 80020c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80020cc:	3b04      	subs	r3, #4
 80020ce:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80020f4:	461a      	mov	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	f008 f96b 	bl	800a3d4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	441a      	add	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2200      	movs	r2, #0
 8002118:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3301      	adds	r3, #1
 800211e:	61fb      	str	r3, [r7, #28]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d902      	bls.n	800212c <HAL_ETH_ReadData+0x11c>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b04      	subs	r3, #4
 800212a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69fa      	ldr	r2, [r7, #28]
 8002130:	3212      	adds	r2, #18
 8002132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002136:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3301      	adds	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002142:	2b00      	cmp	r3, #0
 8002144:	db06      	blt.n	8002154 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	429a      	cmp	r2, r3
 800214c:	d202      	bcs.n	8002154 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d089      	beq.n	8002068 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	441a      	add	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f815 	bl	8002198 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d108      	bne.n	800218c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
}
 800218e:	4618      	mov	r0, r3
 8002190:	3720      	adds	r7, #32
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80021a4:	2301      	movs	r3, #1
 80021a6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021ac:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69fa      	ldr	r2, [r7, #28]
 80021b2:	3212      	adds	r2, #18
 80021b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021be:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80021c0:	e03d      	b.n	800223e <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d112      	bne.n	80021f0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	4618      	mov	r0, r3
 80021d0:	f008 f8d0 	bl	800a374 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d102      	bne.n	80021e0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	74fb      	strb	r3, [r7, #19]
 80021de:	e007      	b.n	80021f0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	461a      	mov	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	461a      	mov	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80021f0:	7cfb      	ldrb	r3, [r7, #19]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d023      	beq.n	800223e <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d103      	bne.n	8002206 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	4a24      	ldr	r2, [pc, #144]	; (8002294 <ETH_UpdateDescriptor+0xfc>)
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	e003      	b.n	800220e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800220c:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3301      	adds	r3, #1
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	2b03      	cmp	r3, #3
 8002224:	d902      	bls.n	800222c <ETH_UpdateDescriptor+0x94>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b04      	subs	r3, #4
 800222a:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	3212      	adds	r2, #18
 8002232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002236:	617b      	str	r3, [r7, #20]
      desccount--;
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	3b01      	subs	r3, #1
 800223c:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <ETH_UpdateDescriptor+0xb2>
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1bb      	bne.n	80021c2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	429a      	cmp	r2, r3
 8002252:	d01a      	beq.n	800228a <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	3301      	adds	r3, #1
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800225e:	f3bf 8f5f 	dmb	sy
}
 8002262:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6919      	ldr	r1, [r3, #16]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	18ca      	adds	r2, r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800227c:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69fa      	ldr	r2, [r7, #28]
 8002282:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800228a:	bf00      	nop
 800228c:	3720      	adds	r7, #32
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	80004600 	.word	0x80004600

08002298 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f003 031c 	and.w	r3, r3, #28
 80022b4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	02db      	lsls	r3, r3, #11
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	019b      	lsls	r3, r3, #6
 80022c6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f023 0302 	bic.w	r3, r3, #2
 80022d6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80022e8:	f7fe ff84 	bl	80011f4 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022ee:	e00d      	b.n	800230c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80022f0:	f7fe ff80 	bl	80011f4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fe:	d301      	bcc.n	8002304 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e010      	b.n	8002326 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ec      	bne.n	80022f0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	b29b      	uxth	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 031c 	and.w	r3, r3, #28
 800234a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	02db      	lsls	r3, r3, #11
 8002350:	b29b      	uxth	r3, r3
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	019b      	lsls	r3, r3, #6
 800235c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	4313      	orrs	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002388:	f7fe ff34 	bl	80011f4 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800238e:	e00d      	b.n	80023ac <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002390:	f7fe ff30 	bl	80011f4 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239e:	d301      	bcc.n	80023a4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e009      	b.n	80023b8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1ec      	bne.n	8002390 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0d9      	b.n	8002588 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf14      	ite	ne
 8002428:	2301      	movne	r3, #1
 800242a:	2300      	moveq	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800243e:	2b00      	cmp	r3, #0
 8002440:	bf0c      	ite	eq
 8002442:	2301      	moveq	r3, #1
 8002444:	2300      	movne	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf14      	ite	ne
 800245c:	2301      	movne	r3, #1
 800245e:	2300      	moveq	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf0c      	ite	eq
 8002492:	2301      	moveq	r3, #1
 8002494:	2300      	movne	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	bf0c      	ite	eq
 80024ac:	2301      	moveq	r3, #1
 80024ae:	2300      	movne	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	bf14      	ite	ne
 80024c6:	2301      	movne	r3, #1
 80024c8:	2300      	moveq	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	bf14      	ite	ne
 80024ee:	2301      	movne	r3, #1
 80024f0:	2300      	moveq	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	bf14      	ite	ne
 8002508:	2301      	movne	r3, #1
 800250a:	2300      	moveq	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf0c      	ite	eq
 8002524:	2301      	moveq	r3, #1
 8002526:	2300      	movne	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	0c1b      	lsrs	r3, r3, #16
 8002548:	b29a      	uxth	r2, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf14      	ite	ne
 8002578:	2301      	movne	r3, #1
 800257a:	2300      	moveq	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e00b      	b.n	80025c0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ae:	2b10      	cmp	r3, #16
 80025b0:	d105      	bne.n	80025be <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80025b2:	6839      	ldr	r1, [r7, #0]
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f883 	bl	80026c0 <ETH_SetMACConfig>

    return HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e000      	b.n	80025c0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
  }
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 031c 	bic.w	r3, r3, #28
 80025de:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80025e0:	f002 fc98 	bl	8004f14 <HAL_RCC_GetHCLKFreq>
 80025e4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	4a1d      	ldr	r2, [pc, #116]	; (8002660 <HAL_ETH_SetMDIOClockRange+0x98>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d908      	bls.n	8002600 <HAL_ETH_SetMDIOClockRange+0x38>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	4a1c      	ldr	r2, [pc, #112]	; (8002664 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d804      	bhi.n	8002600 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f043 0308 	orr.w	r3, r3, #8
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	e027      	b.n	8002650 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4a18      	ldr	r2, [pc, #96]	; (8002664 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d908      	bls.n	800261a <HAL_ETH_SetMDIOClockRange+0x52>
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	4a17      	ldr	r2, [pc, #92]	; (8002668 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d204      	bcs.n	800261a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f043 030c 	orr.w	r3, r3, #12
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	e01a      	b.n	8002650 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	4a12      	ldr	r2, [pc, #72]	; (8002668 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d303      	bcc.n	800262a <HAL_ETH_SetMDIOClockRange+0x62>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4a11      	ldr	r2, [pc, #68]	; (800266c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d911      	bls.n	800264e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	4a0f      	ldr	r2, [pc, #60]	; (800266c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d908      	bls.n	8002644 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4a0e      	ldr	r2, [pc, #56]	; (8002670 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d804      	bhi.n	8002644 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f043 0304 	orr.w	r3, r3, #4
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	e005      	b.n	8002650 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f043 0310 	orr.w	r3, r3, #16
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	e000      	b.n	8002650 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800264e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	611a      	str	r2, [r3, #16]
}
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	01312cff 	.word	0x01312cff
 8002664:	02160ebf 	.word	0x02160ebf
 8002668:	03938700 	.word	0x03938700
 800266c:	05f5e0ff 	.word	0x05f5e0ff
 8002670:	08f0d17f 	.word	0x08f0d17f

08002674 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002692:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002696:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026a4:	2001      	movs	r0, #1
 80026a6:	f7fe fdb1 	bl	800120c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026b4:	6193      	str	r3, [r2, #24]
}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4b51      	ldr	r3, [pc, #324]	; (800281c <ETH_SetMACConfig+0x15c>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	7c1b      	ldrb	r3, [r3, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d102      	bne.n	80026e8 <ETH_SetMACConfig+0x28>
 80026e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80026e6:	e000      	b.n	80026ea <ETH_SetMACConfig+0x2a>
 80026e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	7c5b      	ldrb	r3, [r3, #17]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d102      	bne.n	80026f8 <ETH_SetMACConfig+0x38>
 80026f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026f6:	e000      	b.n	80026fa <ETH_SetMACConfig+0x3a>
 80026f8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026fa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002700:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	7fdb      	ldrb	r3, [r3, #31]
 8002706:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002708:	431a      	orrs	r2, r3
                        macconf->Speed |
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800270e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	7f92      	ldrb	r2, [r2, #30]
 8002714:	2a00      	cmp	r2, #0
 8002716:	d102      	bne.n	800271e <ETH_SetMACConfig+0x5e>
 8002718:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800271c:	e000      	b.n	8002720 <ETH_SetMACConfig+0x60>
 800271e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002720:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	7f1b      	ldrb	r3, [r3, #28]
 8002726:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002728:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800272e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	791b      	ldrb	r3, [r3, #4]
 8002734:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002736:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800273e:	2a00      	cmp	r2, #0
 8002740:	d102      	bne.n	8002748 <ETH_SetMACConfig+0x88>
 8002742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002746:	e000      	b.n	800274a <ETH_SetMACConfig+0x8a>
 8002748:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800274a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	7bdb      	ldrb	r3, [r3, #15]
 8002750:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002752:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002758:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002760:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002762:	4313      	orrs	r3, r2
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800277a:	2001      	movs	r0, #1
 800277c:	f7fe fd46 	bl	800120c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002796:	4013      	ands	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80027a6:	2a00      	cmp	r2, #0
 80027a8:	d101      	bne.n	80027ae <ETH_SetMACConfig+0xee>
 80027aa:	2280      	movs	r2, #128	; 0x80
 80027ac:	e000      	b.n	80027b0 <ETH_SetMACConfig+0xf0>
 80027ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027b0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80027be:	2a01      	cmp	r2, #1
 80027c0:	d101      	bne.n	80027c6 <ETH_SetMACConfig+0x106>
 80027c2:	2208      	movs	r2, #8
 80027c4:	e000      	b.n	80027c8 <ETH_SetMACConfig+0x108>
 80027c6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80027c8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80027d0:	2a01      	cmp	r2, #1
 80027d2:	d101      	bne.n	80027d8 <ETH_SetMACConfig+0x118>
 80027d4:	2204      	movs	r2, #4
 80027d6:	e000      	b.n	80027da <ETH_SetMACConfig+0x11a>
 80027d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80027e2:	2a01      	cmp	r2, #1
 80027e4:	d101      	bne.n	80027ea <ETH_SetMACConfig+0x12a>
 80027e6:	2202      	movs	r2, #2
 80027e8:	e000      	b.n	80027ec <ETH_SetMACConfig+0x12c>
 80027ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027ec:	4313      	orrs	r3, r2
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002804:	2001      	movs	r0, #1
 8002806:	f7fe fd01 	bl	800120c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	619a      	str	r2, [r3, #24]
}
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	ff20810f 	.word	0xff20810f

08002820 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4b3d      	ldr	r3, [pc, #244]	; (8002930 <ETH_SetDMAConfig+0x110>)
 800283a:	4013      	ands	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	7b1b      	ldrb	r3, [r3, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <ETH_SetDMAConfig+0x2c>
 8002846:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800284a:	e000      	b.n	800284e <ETH_SetDMAConfig+0x2e>
 800284c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	7b5b      	ldrb	r3, [r3, #13]
 8002852:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002854:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	7f52      	ldrb	r2, [r2, #29]
 800285a:	2a00      	cmp	r2, #0
 800285c:	d102      	bne.n	8002864 <ETH_SetDMAConfig+0x44>
 800285e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002862:	e000      	b.n	8002866 <ETH_SetDMAConfig+0x46>
 8002864:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002866:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	7b9b      	ldrb	r3, [r3, #14]
 800286c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800286e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002874:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	7f1b      	ldrb	r3, [r3, #28]
 800287a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800287c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	7f9b      	ldrb	r3, [r3, #30]
 8002882:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002884:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800288a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002892:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002894:	4313      	orrs	r3, r2
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028a4:	461a      	mov	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028b6:	2001      	movs	r0, #1
 80028b8:	f7fe fca8 	bl	800120c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028c4:	461a      	mov	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	791b      	ldrb	r3, [r3, #4]
 80028ce:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028d4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80028da:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80028e0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028e8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80028ea:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80028f2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80028f8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002902:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002906:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002914:	2001      	movs	r0, #1
 8002916:	f7fe fc79 	bl	800120c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002922:	461a      	mov	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6013      	str	r3, [r2, #0]
}
 8002928:	bf00      	nop
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	f8de3f23 	.word	0xf8de3f23

08002934 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b0a6      	sub	sp, #152	; 0x98
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002942:	2301      	movs	r3, #1
 8002944:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002948:	2300      	movs	r3, #0
 800294a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002952:	2301      	movs	r3, #1
 8002954:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800295e:	2301      	movs	r3, #1
 8002960:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800296a:	2300      	movs	r3, #0
 800296c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002970:	2300      	movs	r3, #0
 8002972:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002974:	2300      	movs	r3, #0
 8002976:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800297a:	2300      	movs	r3, #0
 800297c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800297e:	2300      	movs	r3, #0
 8002980:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002984:	2300      	movs	r3, #0
 8002986:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002990:	2300      	movs	r3, #0
 8002992:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002996:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800299a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800299c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029ac:	4619      	mov	r1, r3
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff fe86 	bl	80026c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80029b4:	2301      	movs	r3, #1
 80029b6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80029b8:	2301      	movs	r3, #1
 80029ba:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80029bc:	2301      	movs	r3, #1
 80029be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80029c2:	2301      	movs	r3, #1
 80029c4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80029da:	2301      	movs	r3, #1
 80029dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80029e0:	2301      	movs	r3, #1
 80029e2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80029e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029e8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029ee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029f4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80029f6:	2301      	movs	r3, #1
 80029f8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a04:	f107 0308 	add.w	r3, r7, #8
 8002a08:	4619      	mov	r1, r3
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ff08 	bl	8002820 <ETH_SetDMAConfig>
}
 8002a10:	bf00      	nop
 8002a12:	3798      	adds	r7, #152	; 0x98
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3305      	adds	r3, #5
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	3204      	adds	r2, #4
 8002a30:	7812      	ldrb	r2, [r2, #0]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <ETH_MACAddressConfig+0x68>)
 8002a3a:	4413      	add	r3, r2
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3303      	adds	r3, #3
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	061a      	lsls	r2, r3, #24
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	041b      	lsls	r3, r3, #16
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3301      	adds	r3, #1
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	7812      	ldrb	r2, [r2, #0]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <ETH_MACAddressConfig+0x6c>)
 8002a6a:	4413      	add	r3, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	6013      	str	r3, [r2, #0]
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40028040 	.word	0x40028040
 8002a84:	40028044 	.word	0x40028044

08002a88 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	e03e      	b.n	8002b14 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68d9      	ldr	r1, [r3, #12]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2200      	movs	r2, #0
 8002abe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	3206      	adds	r2, #6
 8002ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d80c      	bhi.n	8002af8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68d9      	ldr	r1, [r3, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	440b      	add	r3, r1
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	e004      	b.n	8002b02 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	461a      	mov	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3301      	adds	r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d9bd      	bls.n	8002a96 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b2c:	611a      	str	r2, [r3, #16]
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	e046      	b.n	8002bd6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6919      	ldr	r1, [r3, #16]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	440b      	add	r3, r1
 8002b58:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2200      	movs	r2, #0
 8002b64:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2200      	movs	r2, #0
 8002b76:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b84:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002b8c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	3212      	adds	r2, #18
 8002ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d80c      	bhi.n	8002bc6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6919      	ldr	r1, [r3, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	60da      	str	r2, [r3, #12]
 8002bc4:	e004      	b.n	8002bd0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d9b5      	bls.n	8002b48 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c06:	60da      	str	r2, [r3, #12]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b08d      	sub	sp, #52	; 0x34
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	3318      	adds	r3, #24
 8002c24:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c56:	d007      	beq.n	8002c68 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e103      	b.n	8002e74 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	3301      	adds	r3, #1
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002c84:	f023 031f 	bic.w	r3, r3, #31
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	6852      	ldr	r2, [r2, #4]
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002cf2:	f3bf 8f5f 	dmb	sy
}
 8002cf6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002d04:	e084      	b.n	8002e10 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d006      	beq.n	8002d26 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	e005      	b.n	8002d32 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	3301      	adds	r3, #1
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d902      	bls.n	8002d44 <ETH_Prepare_Tx_Descriptors+0x130>
 8002d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d40:	3b04      	subs	r3, #4
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d66:	d007      	beq.n	8002d78 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d029      	beq.n	8002dcc <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d84:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d8a:	e019      	b.n	8002dc0 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002d8c:	f3bf 8f5f 	dmb	sy
}
 8002d90:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da0:	3301      	adds	r3, #1
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d902      	bls.n	8002db0 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	3b04      	subs	r3, #4
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d3e1      	bcc.n	8002d8c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e053      	b.n	8002e74 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	3301      	adds	r3, #1
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002dea:	f023 031f 	bic.w	r3, r3, #31
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	6852      	ldr	r2, [r2, #4]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002dfe:	f3bf 8f5f 	dmb	sy
}
 8002e02:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f47f af76 	bne.w	8002d06 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d006      	beq.n	8002e2e <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e005      	b.n	8002e3a <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e4a:	6979      	ldr	r1, [r7, #20]
 8002e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4e:	3304      	adds	r3, #4
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e5a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e5c:	b672      	cpsid	i
}
 8002e5e:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	4413      	add	r3, r2
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002e6e:	b662      	cpsie	i
}
 8002e70:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3734      	adds	r7, #52	; 0x34
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	; 0x24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	e16b      	b.n	8003174 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	f040 815a 	bne.w	800316e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d005      	beq.n	8002ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d130      	bne.n	8002f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	2203      	movs	r2, #3
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f08:	2201      	movs	r2, #1
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 0201 	and.w	r2, r3, #1
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d017      	beq.n	8002f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d123      	bne.n	8002fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	08da      	lsrs	r2, r3, #3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3208      	adds	r2, #8
 8002f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	220f      	movs	r2, #15
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	08da      	lsrs	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3208      	adds	r2, #8
 8002fbe:	69b9      	ldr	r1, [r7, #24]
 8002fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0203 	and.w	r2, r3, #3
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80b4 	beq.w	800316e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	4b60      	ldr	r3, [pc, #384]	; (800318c <HAL_GPIO_Init+0x30c>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	4a5f      	ldr	r2, [pc, #380]	; (800318c <HAL_GPIO_Init+0x30c>)
 8003010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003014:	6453      	str	r3, [r2, #68]	; 0x44
 8003016:	4b5d      	ldr	r3, [pc, #372]	; (800318c <HAL_GPIO_Init+0x30c>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003022:	4a5b      	ldr	r2, [pc, #364]	; (8003190 <HAL_GPIO_Init+0x310>)
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	089b      	lsrs	r3, r3, #2
 8003028:	3302      	adds	r3, #2
 800302a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	220f      	movs	r2, #15
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a52      	ldr	r2, [pc, #328]	; (8003194 <HAL_GPIO_Init+0x314>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d02b      	beq.n	80030a6 <HAL_GPIO_Init+0x226>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a51      	ldr	r2, [pc, #324]	; (8003198 <HAL_GPIO_Init+0x318>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d025      	beq.n	80030a2 <HAL_GPIO_Init+0x222>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a50      	ldr	r2, [pc, #320]	; (800319c <HAL_GPIO_Init+0x31c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d01f      	beq.n	800309e <HAL_GPIO_Init+0x21e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a4f      	ldr	r2, [pc, #316]	; (80031a0 <HAL_GPIO_Init+0x320>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d019      	beq.n	800309a <HAL_GPIO_Init+0x21a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a4e      	ldr	r2, [pc, #312]	; (80031a4 <HAL_GPIO_Init+0x324>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_GPIO_Init+0x216>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a4d      	ldr	r2, [pc, #308]	; (80031a8 <HAL_GPIO_Init+0x328>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00d      	beq.n	8003092 <HAL_GPIO_Init+0x212>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a4c      	ldr	r2, [pc, #304]	; (80031ac <HAL_GPIO_Init+0x32c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d007      	beq.n	800308e <HAL_GPIO_Init+0x20e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a4b      	ldr	r2, [pc, #300]	; (80031b0 <HAL_GPIO_Init+0x330>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d101      	bne.n	800308a <HAL_GPIO_Init+0x20a>
 8003086:	2307      	movs	r3, #7
 8003088:	e00e      	b.n	80030a8 <HAL_GPIO_Init+0x228>
 800308a:	2308      	movs	r3, #8
 800308c:	e00c      	b.n	80030a8 <HAL_GPIO_Init+0x228>
 800308e:	2306      	movs	r3, #6
 8003090:	e00a      	b.n	80030a8 <HAL_GPIO_Init+0x228>
 8003092:	2305      	movs	r3, #5
 8003094:	e008      	b.n	80030a8 <HAL_GPIO_Init+0x228>
 8003096:	2304      	movs	r3, #4
 8003098:	e006      	b.n	80030a8 <HAL_GPIO_Init+0x228>
 800309a:	2303      	movs	r3, #3
 800309c:	e004      	b.n	80030a8 <HAL_GPIO_Init+0x228>
 800309e:	2302      	movs	r3, #2
 80030a0:	e002      	b.n	80030a8 <HAL_GPIO_Init+0x228>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_GPIO_Init+0x228>
 80030a6:	2300      	movs	r3, #0
 80030a8:	69fa      	ldr	r2, [r7, #28]
 80030aa:	f002 0203 	and.w	r2, r2, #3
 80030ae:	0092      	lsls	r2, r2, #2
 80030b0:	4093      	lsls	r3, r2
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030b8:	4935      	ldr	r1, [pc, #212]	; (8003190 <HAL_GPIO_Init+0x310>)
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	3302      	adds	r3, #2
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030c6:	4b3b      	ldr	r3, [pc, #236]	; (80031b4 <HAL_GPIO_Init+0x334>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ea:	4a32      	ldr	r2, [pc, #200]	; (80031b4 <HAL_GPIO_Init+0x334>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030f0:	4b30      	ldr	r3, [pc, #192]	; (80031b4 <HAL_GPIO_Init+0x334>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003114:	4a27      	ldr	r2, [pc, #156]	; (80031b4 <HAL_GPIO_Init+0x334>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800311a:	4b26      	ldr	r3, [pc, #152]	; (80031b4 <HAL_GPIO_Init+0x334>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800313e:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <HAL_GPIO_Init+0x334>)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003144:	4b1b      	ldr	r3, [pc, #108]	; (80031b4 <HAL_GPIO_Init+0x334>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003168:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <HAL_GPIO_Init+0x334>)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3301      	adds	r3, #1
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	2b0f      	cmp	r3, #15
 8003178:	f67f ae90 	bls.w	8002e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	3724      	adds	r7, #36	; 0x24
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	40013800 	.word	0x40013800
 8003194:	40020000 	.word	0x40020000
 8003198:	40020400 	.word	0x40020400
 800319c:	40020800 	.word	0x40020800
 80031a0:	40020c00 	.word	0x40020c00
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40021400 	.word	0x40021400
 80031ac:	40021800 	.word	0x40021800
 80031b0:	40021c00 	.word	0x40021c00
 80031b4:	40013c00 	.word	0x40013c00

080031b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af02      	add	r7, sp, #8
 80031be:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e101      	b.n	80033ce <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f017 fa7f 	bl	801a6e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2203      	movs	r2, #3
 80031ee:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031f8:	d102      	bne.n	8003200 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f005 f85e 	bl	80082c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	7c1a      	ldrb	r2, [r3, #16]
 8003212:	f88d 2000 	strb.w	r2, [sp]
 8003216:	3304      	adds	r3, #4
 8003218:	cb0e      	ldmia	r3, {r1, r2, r3}
 800321a:	f004 ff3d 	bl	8008098 <USB_CoreInit>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0ce      	b.n	80033ce <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2100      	movs	r1, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f005 f856 	bl	80082e8 <USB_SetCurrentMode>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e0bf      	b.n	80033ce <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800324e:	2300      	movs	r3, #0
 8003250:	73fb      	strb	r3, [r7, #15]
 8003252:	e04a      	b.n	80032ea <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003254:	7bfa      	ldrb	r2, [r7, #15]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	3315      	adds	r3, #21
 8003264:	2201      	movs	r2, #1
 8003266:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	3314      	adds	r3, #20
 8003278:	7bfa      	ldrb	r2, [r7, #15]
 800327a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	b298      	uxth	r0, r3
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	332e      	adds	r3, #46	; 0x2e
 8003290:	4602      	mov	r2, r0
 8003292:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	3318      	adds	r3, #24
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032a8:	7bfa      	ldrb	r2, [r7, #15]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	331c      	adds	r3, #28
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	3320      	adds	r3, #32
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	3324      	adds	r3, #36	; 0x24
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	3301      	adds	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	791b      	ldrb	r3, [r3, #4]
 80032ee:	7bfa      	ldrb	r2, [r7, #15]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d3af      	bcc.n	8003254 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f4:	2300      	movs	r3, #0
 80032f6:	73fb      	strb	r3, [r7, #15]
 80032f8:	e044      	b.n	8003384 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	f203 2355 	addw	r3, r3, #597	; 0x255
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003322:	7bfa      	ldrb	r2, [r7, #15]
 8003324:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003326:	7bfa      	ldrb	r2, [r7, #15]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800333c:	7bfa      	ldrb	r2, [r7, #15]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	3301      	adds	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	791b      	ldrb	r3, [r3, #4]
 8003388:	7bfa      	ldrb	r2, [r7, #15]
 800338a:	429a      	cmp	r2, r3
 800338c:	d3b5      	bcc.n	80032fa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	7c1a      	ldrb	r2, [r3, #16]
 8003396:	f88d 2000 	strb.w	r2, [sp]
 800339a:	3304      	adds	r3, #4
 800339c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800339e:	f004 ffef 	bl	8008380 <USB_DevInit>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e00c      	b.n	80033ce <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f006 f833 	bl	8009432 <USB_DevDisconnect>

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_PCD_Start+0x1c>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e022      	b.n	8003438 <HAL_PCD_Start+0x62>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800340a:	2b01      	cmp	r3, #1
 800340c:	d105      	bne.n	800341a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f004 ff40 	bl	80082a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f005 ffe1 	bl	80093f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b08d      	sub	sp, #52	; 0x34
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f006 f89f 	bl	800959a <USB_GetMode>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	f040 848c 	bne.w	8003d7c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f006 f803 	bl	8009474 <USB_ReadInterrupts>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8482 	beq.w	8003d7a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	0a1b      	lsrs	r3, r3, #8
 8003480:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f005 fff0 	bl	8009474 <USB_ReadInterrupts>
 8003494:	4603      	mov	r3, r0
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b02      	cmp	r3, #2
 800349c:	d107      	bne.n	80034ae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f002 0202 	and.w	r2, r2, #2
 80034ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f005 ffde 	bl	8009474 <USB_ReadInterrupts>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	2b10      	cmp	r3, #16
 80034c0:	d161      	bne.n	8003586 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699a      	ldr	r2, [r3, #24]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0210 	bic.w	r2, r2, #16
 80034d0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f003 020f 	and.w	r2, r3, #15
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	3304      	adds	r3, #4
 80034f0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	0c5b      	lsrs	r3, r3, #17
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d124      	bne.n	8003548 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d035      	beq.n	8003576 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003514:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003518:	b29b      	uxth	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	6a38      	ldr	r0, [r7, #32]
 800351e:	f005 fe15 	bl	800914c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800352e:	441a      	add	r2, r3
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	091b      	lsrs	r3, r3, #4
 800353c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003540:	441a      	add	r2, r3
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	615a      	str	r2, [r3, #20]
 8003546:	e016      	b.n	8003576 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	0c5b      	lsrs	r3, r3, #17
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	2b06      	cmp	r3, #6
 8003552:	d110      	bne.n	8003576 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800355a:	2208      	movs	r2, #8
 800355c:	4619      	mov	r1, r3
 800355e:	6a38      	ldr	r0, [r7, #32]
 8003560:	f005 fdf4 	bl	800914c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003570:	441a      	add	r2, r3
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699a      	ldr	r2, [r3, #24]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0210 	orr.w	r2, r2, #16
 8003584:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f005 ff72 	bl	8009474 <USB_ReadInterrupts>
 8003590:	4603      	mov	r3, r0
 8003592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003596:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800359a:	f040 80a7 	bne.w	80036ec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f005 ff77 	bl	800949a <USB_ReadDevAllOutEpInterrupt>
 80035ac:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80035ae:	e099      	b.n	80036e4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 808e 	beq.w	80036d8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f005 ff9b 	bl	8009502 <USB_ReadDevOutEPInterrupt>
 80035cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00c      	beq.n	80035f2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e4:	461a      	mov	r2, r3
 80035e6:	2301      	movs	r3, #1
 80035e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80035ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fecf 	bl	8004390 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00c      	beq.n	8003616 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003608:	461a      	mov	r2, r3
 800360a:	2308      	movs	r3, #8
 800360c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800360e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 ffa5 	bl	8004560 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362c:	461a      	mov	r2, r3
 800362e:	2310      	movs	r3, #16
 8003630:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d030      	beq.n	800369e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003644:	2b80      	cmp	r3, #128	; 0x80
 8003646:	d109      	bne.n	800365c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800365a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800365c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	3304      	adds	r3, #4
 8003670:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	78db      	ldrb	r3, [r3, #3]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d108      	bne.n	800368c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2200      	movs	r2, #0
 800367e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	b2db      	uxtb	r3, r3
 8003684:	4619      	mov	r1, r3
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f017 f974 	bl	801a974 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003698:	461a      	mov	r2, r3
 800369a:	2302      	movs	r3, #2
 800369c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b4:	461a      	mov	r2, r3
 80036b6:	2320      	movs	r3, #32
 80036b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d009      	beq.n	80036d8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d0:	461a      	mov	r2, r3
 80036d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	3301      	adds	r3, #1
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	085b      	lsrs	r3, r3, #1
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f47f af62 	bne.w	80035b0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f005 febf 	bl	8009474 <USB_ReadInterrupts>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003700:	f040 80db 	bne.w	80038ba <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f005 fee0 	bl	80094ce <USB_ReadDevAllInEpInterrupt>
 800370e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003714:	e0cd      	b.n	80038b2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80c2 	beq.w	80038a6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f005 ff06 	bl	800953e <USB_ReadDevInEPInterrupt>
 8003732:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d057      	beq.n	80037ee <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	2201      	movs	r2, #1
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	43db      	mvns	r3, r3
 8003758:	69f9      	ldr	r1, [r7, #28]
 800375a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800375e:	4013      	ands	r3, r2
 8003760:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376e:	461a      	mov	r2, r3
 8003770:	2301      	movs	r3, #1
 8003772:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	799b      	ldrb	r3, [r3, #6]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d132      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	3320      	adds	r3, #32
 800378c:	6819      	ldr	r1, [r3, #0]
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4403      	add	r3, r0
 800379c:	331c      	adds	r3, #28
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4419      	add	r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a6:	4613      	mov	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4403      	add	r3, r0
 80037b0:	3320      	adds	r3, #32
 80037b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d113      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x3a2>
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	3324      	adds	r3, #36	; 0x24
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d108      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80037da:	461a      	mov	r2, r3
 80037dc:	2101      	movs	r1, #1
 80037de:	f005 ff0d 	bl	80095fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	4619      	mov	r1, r3
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f017 f83e 	bl	801a86a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003804:	461a      	mov	r2, r3
 8003806:	2308      	movs	r3, #8
 8003808:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003820:	461a      	mov	r2, r3
 8003822:	2310      	movs	r3, #16
 8003824:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383c:	461a      	mov	r2, r3
 800383e:	2340      	movs	r3, #64	; 0x40
 8003840:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d023      	beq.n	8003894 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800384c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800384e:	6a38      	ldr	r0, [r7, #32]
 8003850:	f004 fefa 	bl	8008648 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003856:	4613      	mov	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	3310      	adds	r3, #16
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4413      	add	r3, r2
 8003864:	3304      	adds	r3, #4
 8003866:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	78db      	ldrb	r3, [r3, #3]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d108      	bne.n	8003882 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2200      	movs	r2, #0
 8003874:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	b2db      	uxtb	r3, r3
 800387a:	4619      	mov	r1, r3
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f017 f88b 	bl	801a998 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388e:	461a      	mov	r2, r3
 8003890:	2302      	movs	r3, #2
 8003892:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800389e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fce8 	bl	8004276 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	3301      	adds	r3, #1
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80038ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ae:	085b      	lsrs	r3, r3, #1
 80038b0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f47f af2e 	bne.w	8003716 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f005 fdd8 	bl	8009474 <USB_ReadInterrupts>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038ce:	d122      	bne.n	8003916 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d108      	bne.n	8003900 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038f6:	2100      	movs	r1, #0
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fecf 	bl	800469c <HAL_PCDEx_LPM_Callback>
 80038fe:	e002      	b.n	8003906 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f017 f829 	bl	801a958 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003914:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f005 fdaa 	bl	8009474 <USB_ReadInterrupts>
 8003920:	4603      	mov	r3, r0
 8003922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800392a:	d112      	bne.n	8003952 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d102      	bne.n	8003942 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f016 ffe5 	bl	801a90c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003950:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f005 fd8c 	bl	8009474 <USB_ReadInterrupts>
 800395c:	4603      	mov	r3, r0
 800395e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003966:	f040 80b7 	bne.w	8003ad8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2110      	movs	r1, #16
 8003984:	4618      	mov	r0, r3
 8003986:	f004 fe5f 	bl	8008648 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800398a:	2300      	movs	r3, #0
 800398c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800398e:	e046      	b.n	8003a1e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399c:	461a      	mov	r2, r3
 800399e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b4:	0151      	lsls	r1, r2, #5
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	440a      	add	r2, r1
 80039ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d0:	461a      	mov	r2, r3
 80039d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039e8:	0151      	lsls	r1, r2, #5
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	440a      	add	r2, r1
 80039ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a08:	0151      	lsls	r1, r2, #5
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	440a      	add	r2, r1
 8003a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a16:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	791b      	ldrb	r3, [r3, #4]
 8003a22:	461a      	mov	r2, r3
 8003a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d3b2      	bcc.n	8003990 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a38:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a3c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	7bdb      	ldrb	r3, [r3, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d016      	beq.n	8003a74 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a50:	69fa      	ldr	r2, [r7, #28]
 8003a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a56:	f043 030b 	orr.w	r3, r3, #11
 8003a5a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a6c:	f043 030b 	orr.w	r3, r3, #11
 8003a70:	6453      	str	r3, [r2, #68]	; 0x44
 8003a72:	e015      	b.n	8003aa0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a86:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a8a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a9a:	f043 030b 	orr.w	r3, r3, #11
 8003a9e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ab2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f005 fd9a 	bl	80095fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f005 fcc9 	bl	8009474 <USB_ReadInterrupts>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aec:	d123      	bne.n	8003b36 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f005 fd5f 	bl	80095b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f004 fe1c 	bl	800873a <USB_GetDevSpeed>
 8003b02:	4603      	mov	r3, r0
 8003b04:	461a      	mov	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681c      	ldr	r4, [r3, #0]
 8003b0e:	f001 fa01 	bl	8004f14 <HAL_RCC_GetHCLKFreq>
 8003b12:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f004 fb20 	bl	8008160 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f016 feca 	bl	801a8ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f005 fc9a 	bl	8009474 <USB_ReadInterrupts>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d10a      	bne.n	8003b60 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f016 fea7 	bl	801a89e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f002 0208 	and.w	r2, r2, #8
 8003b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f005 fc85 	bl	8009474 <USB_ReadInterrupts>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b70:	2b80      	cmp	r3, #128	; 0x80
 8003b72:	d123      	bne.n	8003bbc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b80:	2301      	movs	r3, #1
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
 8003b84:	e014      	b.n	8003bb0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d105      	bne.n	8003baa <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fb08 	bl	80041ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	3301      	adds	r3, #1
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	791b      	ldrb	r3, [r3, #4]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d3e4      	bcc.n	8003b86 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f005 fc57 	bl	8009474 <USB_ReadInterrupts>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bd0:	d13c      	bne.n	8003c4c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd6:	e02b      	b.n	8003c30 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3318      	adds	r3, #24
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d115      	bne.n	8003c2a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003bfe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	da12      	bge.n	8003c2a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	3317      	adds	r3, #23
 8003c14:	2201      	movs	r2, #1
 8003c16:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	4619      	mov	r1, r3
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fac8 	bl	80041ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	791b      	ldrb	r3, [r3, #4]
 8003c34:	461a      	mov	r2, r3
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d3cd      	bcc.n	8003bd8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f005 fc0f 	bl	8009474 <USB_ReadInterrupts>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c60:	d156      	bne.n	8003d10 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c62:	2301      	movs	r3, #1
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
 8003c66:	e045      	b.n	8003cf4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d12e      	bne.n	8003cee <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	da2b      	bge.n	8003cee <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003ca2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d121      	bne.n	8003cee <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cae:	4613      	mov	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10a      	bne.n	8003cee <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cea:	6053      	str	r3, [r2, #4]
            break;
 8003cec:	e008      	b.n	8003d00 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	791b      	ldrb	r3, [r3, #4]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d3b3      	bcc.n	8003c68 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f005 fbad 	bl	8009474 <USB_ReadInterrupts>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d24:	d10a      	bne.n	8003d3c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f016 fe48 	bl	801a9bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695a      	ldr	r2, [r3, #20]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f005 fb97 	bl	8009474 <USB_ReadInterrupts>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d115      	bne.n	8003d7c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f016 fe38 	bl	801a9d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6859      	ldr	r1, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	605a      	str	r2, [r3, #4]
 8003d78:	e000      	b.n	8003d7c <HAL_PCD_IRQHandler+0x93c>
      return;
 8003d7a:	bf00      	nop
    }
  }
}
 8003d7c:	3734      	adds	r7, #52	; 0x34
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd90      	pop	{r4, r7, pc}

08003d82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_PCD_SetAddress+0x1a>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e012      	b.n	8003dc2 <HAL_PCD_SetAddress+0x40>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f005 faf6 	bl	80093a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	4608      	mov	r0, r1
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4603      	mov	r3, r0
 8003dda:	70fb      	strb	r3, [r7, #3]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	803b      	strh	r3, [r7, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	da0f      	bge.n	8003e10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	f003 020f 	and.w	r2, r3, #15
 8003df6:	4613      	mov	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	3310      	adds	r3, #16
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	4413      	add	r3, r2
 8003e04:	3304      	adds	r3, #4
 8003e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	705a      	strb	r2, [r3, #1]
 8003e0e:	e00f      	b.n	8003e30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	f003 020f 	and.w	r2, r3, #15
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	4413      	add	r3, r2
 8003e26:	3304      	adds	r3, #4
 8003e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e3c:	883a      	ldrh	r2, [r7, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	78ba      	ldrb	r2, [r7, #2]
 8003e46:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	785b      	ldrb	r3, [r3, #1]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d004      	beq.n	8003e5a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e5a:	78bb      	ldrb	r3, [r7, #2]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d102      	bne.n	8003e66 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_PCD_EP_Open+0xaa>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e00e      	b.n	8003e92 <HAL_PCD_EP_Open+0xc8>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68f9      	ldr	r1, [r7, #12]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f004 fc7e 	bl	8008784 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003e90:	7afb      	ldrb	r3, [r7, #11]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	da0f      	bge.n	8003ece <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	f003 020f 	and.w	r2, r3, #15
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	3310      	adds	r3, #16
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	705a      	strb	r2, [r3, #1]
 8003ecc:	e00f      	b.n	8003eee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ece:	78fb      	ldrb	r3, [r7, #3]
 8003ed0:	f003 020f 	and.w	r2, r3, #15
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_PCD_EP_Close+0x6e>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e00e      	b.n	8003f26 <HAL_PCD_EP_Close+0x8c>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68f9      	ldr	r1, [r7, #12]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f004 fcbc 	bl	8008894 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b086      	sub	sp, #24
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f3e:	7afb      	ldrb	r3, [r7, #11]
 8003f40:	f003 020f 	and.w	r2, r3, #15
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	3304      	adds	r3, #4
 8003f56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2200      	movs	r2, #0
 8003f68:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f70:	7afb      	ldrb	r3, [r7, #11]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	799b      	ldrb	r3, [r3, #6]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d102      	bne.n	8003f8a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6818      	ldr	r0, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	799b      	ldrb	r3, [r3, #6]
 8003f92:	461a      	mov	r2, r3
 8003f94:	6979      	ldr	r1, [r7, #20]
 8003f96:	f004 fd59 	bl	8008a4c <USB_EPStartXfer>

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	f003 020f 	and.w	r2, r3, #15
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003fc6:	681b      	ldr	r3, [r3, #0]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	607a      	str	r2, [r7, #4]
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fe4:	7afb      	ldrb	r3, [r7, #11]
 8003fe6:	f003 020f 	and.w	r2, r3, #15
 8003fea:	4613      	mov	r3, r2
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	3310      	adds	r3, #16
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2200      	movs	r2, #0
 800400c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2201      	movs	r2, #1
 8004012:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004014:	7afb      	ldrb	r3, [r7, #11]
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	b2da      	uxtb	r2, r3
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	799b      	ldrb	r3, [r3, #6]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d102      	bne.n	800402e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	799b      	ldrb	r3, [r3, #6]
 8004036:	461a      	mov	r2, r3
 8004038:	6979      	ldr	r1, [r7, #20]
 800403a:	f004 fd07 	bl	8008a4c <USB_EPStartXfer>

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	7912      	ldrb	r2, [r2, #4]
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e04f      	b.n	8004106 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800406a:	2b00      	cmp	r3, #0
 800406c:	da0f      	bge.n	800408e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	f003 020f 	and.w	r2, r3, #15
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	3310      	adds	r3, #16
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	4413      	add	r3, r2
 8004082:	3304      	adds	r3, #4
 8004084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	705a      	strb	r2, [r3, #1]
 800408c:	e00d      	b.n	80040aa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800408e:	78fa      	ldrb	r2, [r7, #3]
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	4413      	add	r3, r2
 80040a0:	3304      	adds	r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_PCD_EP_SetStall+0x82>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e01d      	b.n	8004106 <HAL_PCD_EP_SetStall+0xbe>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68f9      	ldr	r1, [r7, #12]
 80040d8:	4618      	mov	r0, r3
 80040da:	f005 f88f 	bl	80091fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040de:	78fb      	ldrb	r3, [r7, #3]
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7999      	ldrb	r1, [r3, #6]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80040f6:	461a      	mov	r2, r3
 80040f8:	f005 fa80 	bl	80095fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	7912      	ldrb	r2, [r2, #4]
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e042      	b.n	80041b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800412c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004130:	2b00      	cmp	r3, #0
 8004132:	da0f      	bge.n	8004154 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	f003 020f 	and.w	r2, r3, #15
 800413a:	4613      	mov	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	3310      	adds	r3, #16
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4413      	add	r3, r2
 8004148:	3304      	adds	r3, #4
 800414a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	705a      	strb	r2, [r3, #1]
 8004152:	e00f      	b.n	8004174 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	f003 020f 	and.w	r2, r3, #15
 800415a:	4613      	mov	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	4413      	add	r3, r2
 800416a:	3304      	adds	r3, #4
 800416c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	b2da      	uxtb	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_PCD_EP_ClrStall+0x86>
 8004190:	2302      	movs	r3, #2
 8004192:	e00e      	b.n	80041b2 <HAL_PCD_EP_ClrStall+0xa4>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68f9      	ldr	r1, [r7, #12]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f005 f898 	bl	80092d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80041c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	da0c      	bge.n	80041e8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041ce:	78fb      	ldrb	r3, [r7, #3]
 80041d0:	f003 020f 	and.w	r2, r3, #15
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	3310      	adds	r3, #16
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	3304      	adds	r3, #4
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	e00c      	b.n	8004202 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	f003 020f 	and.w	r2, r3, #15
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	3304      	adds	r3, #4
 8004200:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68f9      	ldr	r1, [r7, #12]
 8004208:	4618      	mov	r0, r3
 800420a:	f004 feb7 	bl	8008f7c <USB_EPStopXfer>
 800420e:	4603      	mov	r3, r0
 8004210:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004212:	7afb      	ldrb	r3, [r7, #11]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_PCD_EP_Flush+0x1a>
 8004232:	2302      	movs	r3, #2
 8004234:	e01b      	b.n	800426e <HAL_PCD_EP_Flush+0x52>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 800423e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004242:	2b00      	cmp	r3, #0
 8004244:	da09      	bge.n	800425a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	4619      	mov	r1, r3
 8004252:	4610      	mov	r0, r2
 8004254:	f004 f9f8 	bl	8008648 <USB_FlushTxFifo>
 8004258:	e004      	b.n	8004264 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f004 fa24 	bl	80086ac <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b08a      	sub	sp, #40	; 0x28
 800427a:	af02      	add	r7, sp, #8
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	3310      	adds	r3, #16
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	4413      	add	r3, r2
 800429a:	3304      	adds	r3, #4
 800429c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d901      	bls.n	80042ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e06b      	b.n	8004386 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	691a      	ldr	r2, [r3, #16]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d902      	bls.n	80042ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	3303      	adds	r3, #3
 80042ce:	089b      	lsrs	r3, r3, #2
 80042d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042d2:	e02a      	b.n	800432a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	69fa      	ldr	r2, [r7, #28]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d902      	bls.n	80042f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	3303      	adds	r3, #3
 80042f4:	089b      	lsrs	r3, r3, #2
 80042f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	68d9      	ldr	r1, [r3, #12]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	4603      	mov	r3, r0
 800430c:	6978      	ldr	r0, [r7, #20]
 800430e:	f004 fedf 	bl	80090d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	441a      	add	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	441a      	add	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	429a      	cmp	r2, r3
 800433e:	d809      	bhi.n	8004354 <PCD_WriteEmptyTxFifo+0xde>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004348:	429a      	cmp	r2, r3
 800434a:	d203      	bcs.n	8004354 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1bf      	bne.n	80042d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	429a      	cmp	r2, r3
 800435e:	d811      	bhi.n	8004384 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	2201      	movs	r2, #1
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	43db      	mvns	r3, r3
 800437a:	6939      	ldr	r1, [r7, #16]
 800437c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004380:	4013      	ands	r3, r2
 8004382:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3720      	adds	r7, #32
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	333c      	adds	r3, #60	; 0x3c
 80043a8:	3304      	adds	r3, #4
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	799b      	ldrb	r3, [r3, #6]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d17b      	bne.n	80044be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d015      	beq.n	80043fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	4a61      	ldr	r2, [pc, #388]	; (8004558 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	f240 80b9 	bls.w	800454c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 80b3 	beq.w	800454c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f2:	461a      	mov	r2, r3
 80043f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043f8:	6093      	str	r3, [r2, #8]
 80043fa:	e0a7      	b.n	800454c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f003 0320 	and.w	r3, r3, #32
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004412:	461a      	mov	r2, r3
 8004414:	2320      	movs	r3, #32
 8004416:	6093      	str	r3, [r2, #8]
 8004418:	e098      	b.n	800454c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 8093 	bne.w	800454c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	4a4b      	ldr	r2, [pc, #300]	; (8004558 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d90f      	bls.n	800444e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004444:	461a      	mov	r2, r3
 8004446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800444a:	6093      	str	r3, [r2, #8]
 800444c:	e07e      	b.n	800454c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	4413      	add	r3, r2
 8004460:	3304      	adds	r3, #4
 8004462:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1a      	ldr	r2, [r3, #32]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	0159      	lsls	r1, r3, #5
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	440b      	add	r3, r1
 8004470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800447a:	1ad2      	subs	r2, r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d114      	bne.n	80044b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004498:	461a      	mov	r2, r3
 800449a:	2101      	movs	r1, #1
 800449c:	f005 f8ae 	bl	80095fc <USB_EP0_OutStart>
 80044a0:	e006      	b.n	80044b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	441a      	add	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	4619      	mov	r1, r3
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f016 f9bc 	bl	801a834 <HAL_PCD_DataOutStageCallback>
 80044bc:	e046      	b.n	800454c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	4a26      	ldr	r2, [pc, #152]	; (800455c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d124      	bne.n	8004510 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044dc:	461a      	mov	r2, r3
 80044de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e2:	6093      	str	r3, [r2, #8]
 80044e4:	e032      	b.n	800454c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f003 0320 	and.w	r3, r3, #32
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fc:	461a      	mov	r2, r3
 80044fe:	2320      	movs	r3, #32
 8004500:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	4619      	mov	r1, r3
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f016 f993 	bl	801a834 <HAL_PCD_DataOutStageCallback>
 800450e:	e01d      	b.n	800454c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d114      	bne.n	8004540 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	4613      	mov	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d108      	bne.n	8004540 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004538:	461a      	mov	r2, r3
 800453a:	2100      	movs	r1, #0
 800453c:	f005 f85e 	bl	80095fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	4619      	mov	r1, r3
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f016 f974 	bl	801a834 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3720      	adds	r7, #32
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	4f54300a 	.word	0x4f54300a
 800455c:	4f54310a 	.word	0x4f54310a

08004560 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	333c      	adds	r3, #60	; 0x3c
 8004578:	3304      	adds	r3, #4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d90e      	bls.n	80045b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800459c:	2b00      	cmp	r3, #0
 800459e:	d009      	beq.n	80045b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ac:	461a      	mov	r2, r3
 80045ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f016 f92b 	bl	801a810 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d90c      	bls.n	80045dc <PCD_EP_OutSetupPacket_int+0x7c>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	799b      	ldrb	r3, [r3, #6]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d108      	bne.n	80045dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80045d4:	461a      	mov	r2, r3
 80045d6:	2101      	movs	r1, #1
 80045d8:	f005 f810 	bl	80095fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	4f54300a 	.word	0x4f54300a

080045ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	70fb      	strb	r3, [r7, #3]
 80045f8:	4613      	mov	r3, r2
 80045fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d107      	bne.n	800461a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800460a:	883b      	ldrh	r3, [r7, #0]
 800460c:	0419      	lsls	r1, r3, #16
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	430a      	orrs	r2, r1
 8004616:	629a      	str	r2, [r3, #40]	; 0x28
 8004618:	e028      	b.n	800466c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	0c1b      	lsrs	r3, r3, #16
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	4413      	add	r3, r2
 8004626:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004628:	2300      	movs	r3, #0
 800462a:	73fb      	strb	r3, [r7, #15]
 800462c:	e00d      	b.n	800464a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	3340      	adds	r3, #64	; 0x40
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	0c1b      	lsrs	r3, r3, #16
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4413      	add	r3, r2
 8004642:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	3301      	adds	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
 800464a:	7bfa      	ldrb	r2, [r7, #15]
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	3b01      	subs	r3, #1
 8004650:	429a      	cmp	r2, r3
 8004652:	d3ec      	bcc.n	800462e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004654:	883b      	ldrh	r3, [r7, #0]
 8004656:	0418      	lsls	r0, r3, #16
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6819      	ldr	r1, [r3, #0]
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	3b01      	subs	r3, #1
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	4302      	orrs	r2, r0
 8004664:	3340      	adds	r3, #64	; 0x40
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	460b      	mov	r3, r1
 8004684:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	887a      	ldrh	r2, [r7, #2]
 800468c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e267      	b.n	8004b96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d075      	beq.n	80047be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046d2:	4b88      	ldr	r3, [pc, #544]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d00c      	beq.n	80046f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046de:	4b85      	ldr	r3, [pc, #532]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d112      	bne.n	8004710 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ea:	4b82      	ldr	r3, [pc, #520]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f6:	d10b      	bne.n	8004710 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f8:	4b7e      	ldr	r3, [pc, #504]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d05b      	beq.n	80047bc <HAL_RCC_OscConfig+0x108>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d157      	bne.n	80047bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e242      	b.n	8004b96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004718:	d106      	bne.n	8004728 <HAL_RCC_OscConfig+0x74>
 800471a:	4b76      	ldr	r3, [pc, #472]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a75      	ldr	r2, [pc, #468]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 8004720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	e01d      	b.n	8004764 <HAL_RCC_OscConfig+0xb0>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004730:	d10c      	bne.n	800474c <HAL_RCC_OscConfig+0x98>
 8004732:	4b70      	ldr	r3, [pc, #448]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a6f      	ldr	r2, [pc, #444]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 8004738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	4b6d      	ldr	r3, [pc, #436]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a6c      	ldr	r2, [pc, #432]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 8004744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e00b      	b.n	8004764 <HAL_RCC_OscConfig+0xb0>
 800474c:	4b69      	ldr	r3, [pc, #420]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a68      	ldr	r2, [pc, #416]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 8004752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	4b66      	ldr	r3, [pc, #408]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a65      	ldr	r2, [pc, #404]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 800475e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d013      	beq.n	8004794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476c:	f7fc fd42 	bl	80011f4 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004774:	f7fc fd3e 	bl	80011f4 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	; 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e207      	b.n	8004b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004786:	4b5b      	ldr	r3, [pc, #364]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0xc0>
 8004792:	e014      	b.n	80047be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fc fd2e 	bl	80011f4 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800479c:	f7fc fd2a 	bl	80011f4 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	; 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e1f3      	b.n	8004b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ae:	4b51      	ldr	r3, [pc, #324]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0xe8>
 80047ba:	e000      	b.n	80047be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d063      	beq.n	8004892 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ca:	4b4a      	ldr	r3, [pc, #296]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00b      	beq.n	80047ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047d6:	4b47      	ldr	r3, [pc, #284]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047de:	2b08      	cmp	r3, #8
 80047e0:	d11c      	bne.n	800481c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047e2:	4b44      	ldr	r3, [pc, #272]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d116      	bne.n	800481c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ee:	4b41      	ldr	r3, [pc, #260]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d005      	beq.n	8004806 <HAL_RCC_OscConfig+0x152>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d001      	beq.n	8004806 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e1c7      	b.n	8004b96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004806:	4b3b      	ldr	r3, [pc, #236]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4937      	ldr	r1, [pc, #220]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800481a:	e03a      	b.n	8004892 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d020      	beq.n	8004866 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004824:	4b34      	ldr	r3, [pc, #208]	; (80048f8 <HAL_RCC_OscConfig+0x244>)
 8004826:	2201      	movs	r2, #1
 8004828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482a:	f7fc fce3 	bl	80011f4 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004832:	f7fc fcdf 	bl	80011f4 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e1a8      	b.n	8004b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004844:	4b2b      	ldr	r3, [pc, #172]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0f0      	beq.n	8004832 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004850:	4b28      	ldr	r3, [pc, #160]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4925      	ldr	r1, [pc, #148]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 8004860:	4313      	orrs	r3, r2
 8004862:	600b      	str	r3, [r1, #0]
 8004864:	e015      	b.n	8004892 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004866:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <HAL_RCC_OscConfig+0x244>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fc fcc2 	bl	80011f4 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004874:	f7fc fcbe 	bl	80011f4 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e187      	b.n	8004b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004886:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d036      	beq.n	800490c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d016      	beq.n	80048d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048a6:	4b15      	ldr	r3, [pc, #84]	; (80048fc <HAL_RCC_OscConfig+0x248>)
 80048a8:	2201      	movs	r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ac:	f7fc fca2 	bl	80011f4 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048b4:	f7fc fc9e 	bl	80011f4 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e167      	b.n	8004b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <HAL_RCC_OscConfig+0x240>)
 80048c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0f0      	beq.n	80048b4 <HAL_RCC_OscConfig+0x200>
 80048d2:	e01b      	b.n	800490c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048d4:	4b09      	ldr	r3, [pc, #36]	; (80048fc <HAL_RCC_OscConfig+0x248>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048da:	f7fc fc8b 	bl	80011f4 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e0:	e00e      	b.n	8004900 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048e2:	f7fc fc87 	bl	80011f4 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d907      	bls.n	8004900 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e150      	b.n	8004b96 <HAL_RCC_OscConfig+0x4e2>
 80048f4:	40023800 	.word	0x40023800
 80048f8:	42470000 	.word	0x42470000
 80048fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004900:	4b88      	ldr	r3, [pc, #544]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 8004902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1ea      	bne.n	80048e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 8097 	beq.w	8004a48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491a:	2300      	movs	r3, #0
 800491c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800491e:	4b81      	ldr	r3, [pc, #516]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10f      	bne.n	800494a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492a:	2300      	movs	r3, #0
 800492c:	60bb      	str	r3, [r7, #8]
 800492e:	4b7d      	ldr	r3, [pc, #500]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	4a7c      	ldr	r2, [pc, #496]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 8004934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004938:	6413      	str	r3, [r2, #64]	; 0x40
 800493a:	4b7a      	ldr	r3, [pc, #488]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004942:	60bb      	str	r3, [r7, #8]
 8004944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004946:	2301      	movs	r3, #1
 8004948:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494a:	4b77      	ldr	r3, [pc, #476]	; (8004b28 <HAL_RCC_OscConfig+0x474>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004952:	2b00      	cmp	r3, #0
 8004954:	d118      	bne.n	8004988 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004956:	4b74      	ldr	r3, [pc, #464]	; (8004b28 <HAL_RCC_OscConfig+0x474>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a73      	ldr	r2, [pc, #460]	; (8004b28 <HAL_RCC_OscConfig+0x474>)
 800495c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004962:	f7fc fc47 	bl	80011f4 <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004968:	e008      	b.n	800497c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496a:	f7fc fc43 	bl	80011f4 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e10c      	b.n	8004b96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800497c:	4b6a      	ldr	r3, [pc, #424]	; (8004b28 <HAL_RCC_OscConfig+0x474>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0f0      	beq.n	800496a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d106      	bne.n	800499e <HAL_RCC_OscConfig+0x2ea>
 8004990:	4b64      	ldr	r3, [pc, #400]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 8004992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004994:	4a63      	ldr	r2, [pc, #396]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 8004996:	f043 0301 	orr.w	r3, r3, #1
 800499a:	6713      	str	r3, [r2, #112]	; 0x70
 800499c:	e01c      	b.n	80049d8 <HAL_RCC_OscConfig+0x324>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b05      	cmp	r3, #5
 80049a4:	d10c      	bne.n	80049c0 <HAL_RCC_OscConfig+0x30c>
 80049a6:	4b5f      	ldr	r3, [pc, #380]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	4a5e      	ldr	r2, [pc, #376]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 80049ac:	f043 0304 	orr.w	r3, r3, #4
 80049b0:	6713      	str	r3, [r2, #112]	; 0x70
 80049b2:	4b5c      	ldr	r3, [pc, #368]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	4a5b      	ldr	r2, [pc, #364]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	6713      	str	r3, [r2, #112]	; 0x70
 80049be:	e00b      	b.n	80049d8 <HAL_RCC_OscConfig+0x324>
 80049c0:	4b58      	ldr	r3, [pc, #352]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 80049c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c4:	4a57      	ldr	r2, [pc, #348]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 80049c6:	f023 0301 	bic.w	r3, r3, #1
 80049ca:	6713      	str	r3, [r2, #112]	; 0x70
 80049cc:	4b55      	ldr	r3, [pc, #340]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	4a54      	ldr	r2, [pc, #336]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 80049d2:	f023 0304 	bic.w	r3, r3, #4
 80049d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d015      	beq.n	8004a0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e0:	f7fc fc08 	bl	80011f4 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e6:	e00a      	b.n	80049fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049e8:	f7fc fc04 	bl	80011f4 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e0cb      	b.n	8004b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049fe:	4b49      	ldr	r3, [pc, #292]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0ee      	beq.n	80049e8 <HAL_RCC_OscConfig+0x334>
 8004a0a:	e014      	b.n	8004a36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a0c:	f7fc fbf2 	bl	80011f4 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a12:	e00a      	b.n	8004a2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a14:	f7fc fbee 	bl	80011f4 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e0b5      	b.n	8004b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a2a:	4b3e      	ldr	r3, [pc, #248]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1ee      	bne.n	8004a14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d105      	bne.n	8004a48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a3c:	4b39      	ldr	r3, [pc, #228]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	4a38      	ldr	r2, [pc, #224]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 8004a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80a1 	beq.w	8004b94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a52:	4b34      	ldr	r3, [pc, #208]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d05c      	beq.n	8004b18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d141      	bne.n	8004aea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a66:	4b31      	ldr	r3, [pc, #196]	; (8004b2c <HAL_RCC_OscConfig+0x478>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6c:	f7fc fbc2 	bl	80011f4 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a74:	f7fc fbbe 	bl	80011f4 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e087      	b.n	8004b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a86:	4b27      	ldr	r3, [pc, #156]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69da      	ldr	r2, [r3, #28]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	019b      	lsls	r3, r3, #6
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa8:	085b      	lsrs	r3, r3, #1
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	041b      	lsls	r3, r3, #16
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	061b      	lsls	r3, r3, #24
 8004ab6:	491b      	ldr	r1, [pc, #108]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004abc:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <HAL_RCC_OscConfig+0x478>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac2:	f7fc fb97 	bl	80011f4 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aca:	f7fc fb93 	bl	80011f4 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e05c      	b.n	8004b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004adc:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f0      	beq.n	8004aca <HAL_RCC_OscConfig+0x416>
 8004ae8:	e054      	b.n	8004b94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aea:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <HAL_RCC_OscConfig+0x478>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af0:	f7fc fb80 	bl	80011f4 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af8:	f7fc fb7c 	bl	80011f4 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e045      	b.n	8004b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0a:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <HAL_RCC_OscConfig+0x470>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f0      	bne.n	8004af8 <HAL_RCC_OscConfig+0x444>
 8004b16:	e03d      	b.n	8004b94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d107      	bne.n	8004b30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e038      	b.n	8004b96 <HAL_RCC_OscConfig+0x4e2>
 8004b24:	40023800 	.word	0x40023800
 8004b28:	40007000 	.word	0x40007000
 8004b2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b30:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <HAL_RCC_OscConfig+0x4ec>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d028      	beq.n	8004b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d121      	bne.n	8004b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d11a      	bne.n	8004b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b60:	4013      	ands	r3, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d111      	bne.n	8004b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	085b      	lsrs	r3, r3, #1
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d107      	bne.n	8004b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d001      	beq.n	8004b94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e000      	b.n	8004b96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40023800 	.word	0x40023800

08004ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0cc      	b.n	8004d52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb8:	4b68      	ldr	r3, [pc, #416]	; (8004d5c <HAL_RCC_ClockConfig+0x1b8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d90c      	bls.n	8004be0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc6:	4b65      	ldr	r3, [pc, #404]	; (8004d5c <HAL_RCC_ClockConfig+0x1b8>)
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bce:	4b63      	ldr	r3, [pc, #396]	; (8004d5c <HAL_RCC_ClockConfig+0x1b8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d001      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0b8      	b.n	8004d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d020      	beq.n	8004c2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bf8:	4b59      	ldr	r3, [pc, #356]	; (8004d60 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	4a58      	ldr	r2, [pc, #352]	; (8004d60 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c10:	4b53      	ldr	r3, [pc, #332]	; (8004d60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	4a52      	ldr	r2, [pc, #328]	; (8004d60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c1c:	4b50      	ldr	r3, [pc, #320]	; (8004d60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	494d      	ldr	r1, [pc, #308]	; (8004d60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d044      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d107      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c42:	4b47      	ldr	r3, [pc, #284]	; (8004d60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d119      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e07f      	b.n	8004d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d003      	beq.n	8004c62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d107      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c62:	4b3f      	ldr	r3, [pc, #252]	; (8004d60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e06f      	b.n	8004d52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c72:	4b3b      	ldr	r3, [pc, #236]	; (8004d60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e067      	b.n	8004d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c82:	4b37      	ldr	r3, [pc, #220]	; (8004d60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f023 0203 	bic.w	r2, r3, #3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	4934      	ldr	r1, [pc, #208]	; (8004d60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c94:	f7fc faae 	bl	80011f4 <HAL_GetTick>
 8004c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9a:	e00a      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c9c:	f7fc faaa 	bl	80011f4 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e04f      	b.n	8004d52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb2:	4b2b      	ldr	r3, [pc, #172]	; (8004d60 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 020c 	and.w	r2, r3, #12
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d1eb      	bne.n	8004c9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc4:	4b25      	ldr	r3, [pc, #148]	; (8004d5c <HAL_RCC_ClockConfig+0x1b8>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d20c      	bcs.n	8004cec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd2:	4b22      	ldr	r3, [pc, #136]	; (8004d5c <HAL_RCC_ClockConfig+0x1b8>)
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cda:	4b20      	ldr	r3, [pc, #128]	; (8004d5c <HAL_RCC_ClockConfig+0x1b8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e032      	b.n	8004d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d008      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cf8:	4b19      	ldr	r3, [pc, #100]	; (8004d60 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	4916      	ldr	r1, [pc, #88]	; (8004d60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d009      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d16:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	490e      	ldr	r1, [pc, #56]	; (8004d60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d2a:	f000 f82d 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	091b      	lsrs	r3, r3, #4
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	490a      	ldr	r1, [pc, #40]	; (8004d64 <HAL_RCC_ClockConfig+0x1c0>)
 8004d3c:	5ccb      	ldrb	r3, [r1, r3]
 8004d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d42:	4a09      	ldr	r2, [pc, #36]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d46:	4b09      	ldr	r3, [pc, #36]	; (8004d6c <HAL_RCC_ClockConfig+0x1c8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fc fa0e 	bl	800116c <HAL_InitTick>

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40023c00 	.word	0x40023c00
 8004d60:	40023800 	.word	0x40023800
 8004d64:	0801e95c 	.word	0x0801e95c
 8004d68:	20000000 	.word	0x20000000
 8004d6c:	20000004 	.word	0x20000004

08004d70 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004d74:	4b03      	ldr	r3, [pc, #12]	; (8004d84 <HAL_RCC_EnableCSS+0x14>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]
}
 8004d7a:	bf00      	nop
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	4247004c 	.word	0x4247004c

08004d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d8c:	b090      	sub	sp, #64	; 0x40
 8004d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	637b      	str	r3, [r7, #52]	; 0x34
 8004d94:	2300      	movs	r3, #0
 8004d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d98:	2300      	movs	r3, #0
 8004d9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004da0:	4b59      	ldr	r3, [pc, #356]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 030c 	and.w	r3, r3, #12
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d00d      	beq.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	f200 80a1 	bhi.w	8004ef4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x34>
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d003      	beq.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dba:	e09b      	b.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dbc:	4b53      	ldr	r3, [pc, #332]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x184>)
 8004dbe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004dc0:	e09b      	b.n	8004efa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dc2:	4b53      	ldr	r3, [pc, #332]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x188>)
 8004dc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004dc6:	e098      	b.n	8004efa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dc8:	4b4f      	ldr	r3, [pc, #316]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dd0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dd2:	4b4d      	ldr	r3, [pc, #308]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d028      	beq.n	8004e30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dde:	4b4a      	ldr	r3, [pc, #296]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	099b      	lsrs	r3, r3, #6
 8004de4:	2200      	movs	r2, #0
 8004de6:	623b      	str	r3, [r7, #32]
 8004de8:	627a      	str	r2, [r7, #36]	; 0x24
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004df0:	2100      	movs	r1, #0
 8004df2:	4b47      	ldr	r3, [pc, #284]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x188>)
 8004df4:	fb03 f201 	mul.w	r2, r3, r1
 8004df8:	2300      	movs	r3, #0
 8004dfa:	fb00 f303 	mul.w	r3, r0, r3
 8004dfe:	4413      	add	r3, r2
 8004e00:	4a43      	ldr	r2, [pc, #268]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e02:	fba0 1202 	umull	r1, r2, r0, r2
 8004e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e08:	460a      	mov	r2, r1
 8004e0a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e0e:	4413      	add	r3, r2
 8004e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e14:	2200      	movs	r2, #0
 8004e16:	61bb      	str	r3, [r7, #24]
 8004e18:	61fa      	str	r2, [r7, #28]
 8004e1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004e22:	f7fb fa25 	bl	8000270 <__aeabi_uldivmod>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e2e:	e053      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e30:	4b35      	ldr	r3, [pc, #212]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	099b      	lsrs	r3, r3, #6
 8004e36:	2200      	movs	r2, #0
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	617a      	str	r2, [r7, #20]
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e42:	f04f 0b00 	mov.w	fp, #0
 8004e46:	4652      	mov	r2, sl
 8004e48:	465b      	mov	r3, fp
 8004e4a:	f04f 0000 	mov.w	r0, #0
 8004e4e:	f04f 0100 	mov.w	r1, #0
 8004e52:	0159      	lsls	r1, r3, #5
 8004e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e58:	0150      	lsls	r0, r2, #5
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	ebb2 080a 	subs.w	r8, r2, sl
 8004e62:	eb63 090b 	sbc.w	r9, r3, fp
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e7a:	ebb2 0408 	subs.w	r4, r2, r8
 8004e7e:	eb63 0509 	sbc.w	r5, r3, r9
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	00eb      	lsls	r3, r5, #3
 8004e8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e90:	00e2      	lsls	r2, r4, #3
 8004e92:	4614      	mov	r4, r2
 8004e94:	461d      	mov	r5, r3
 8004e96:	eb14 030a 	adds.w	r3, r4, sl
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	eb45 030b 	adc.w	r3, r5, fp
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eae:	4629      	mov	r1, r5
 8004eb0:	028b      	lsls	r3, r1, #10
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004eb8:	4621      	mov	r1, r4
 8004eba:	028a      	lsls	r2, r1, #10
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	60bb      	str	r3, [r7, #8]
 8004ec6:	60fa      	str	r2, [r7, #12]
 8004ec8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ecc:	f7fb f9d0 	bl	8000270 <__aeabi_uldivmod>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ed8:	4b0b      	ldr	r3, [pc, #44]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	0c1b      	lsrs	r3, r3, #16
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004ee8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ef2:	e002      	b.n	8004efa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ef4:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x184>)
 8004ef6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3740      	adds	r7, #64	; 0x40
 8004f00:	46bd      	mov	sp, r7
 8004f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f06:	bf00      	nop
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	00f42400 	.word	0x00f42400
 8004f10:	017d7840 	.word	0x017d7840

08004f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f18:	4b03      	ldr	r3, [pc, #12]	; (8004f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	20000000 	.word	0x20000000

08004f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f30:	f7ff fff0 	bl	8004f14 <HAL_RCC_GetHCLKFreq>
 8004f34:	4602      	mov	r2, r0
 8004f36:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	0a9b      	lsrs	r3, r3, #10
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	4903      	ldr	r1, [pc, #12]	; (8004f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f42:	5ccb      	ldrb	r3, [r1, r3]
 8004f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	0801e96c 	.word	0x0801e96c

08004f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f58:	f7ff ffdc 	bl	8004f14 <HAL_RCC_GetHCLKFreq>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	0b5b      	lsrs	r3, r3, #13
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	4903      	ldr	r1, [pc, #12]	; (8004f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f6a:	5ccb      	ldrb	r3, [r1, r3]
 8004f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40023800 	.word	0x40023800
 8004f78:	0801e96c 	.word	0x0801e96c

08004f7c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004f80:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <HAL_RCC_NMI_IRQHandler+0x20>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f88:	2b80      	cmp	r3, #128	; 0x80
 8004f8a:	d104      	bne.n	8004f96 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004f8c:	f000 f80a 	bl	8004fa4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004f90:	4b03      	ldr	r3, [pc, #12]	; (8004fa0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004f92:	2280      	movs	r2, #128	; 0x80
 8004f94:	701a      	strb	r2, [r3, #0]
  }
}
 8004f96:	bf00      	nop
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	4002380e 	.word	0x4002380e

08004fa4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e022      	b.n	800500a <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d105      	bne.n	8004fdc <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fb fcaa 	bl	8000930 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2203      	movs	r2, #3
 8004fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f815 	bl	8005014 <HAL_SD_InitCard>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e00a      	b.n	800500a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005014:	b5b0      	push	{r4, r5, r7, lr}
 8005016:	b08e      	sub	sp, #56	; 0x38
 8005018:	af04      	add	r7, sp, #16
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800501c:	2300      	movs	r3, #0
 800501e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005020:	2300      	movs	r3, #0
 8005022:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005024:	2300      	movs	r3, #0
 8005026:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005028:	2300      	movs	r3, #0
 800502a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800502c:	2300      	movs	r3, #0
 800502e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005030:	2376      	movs	r3, #118	; 0x76
 8005032:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681d      	ldr	r5, [r3, #0]
 8005038:	466c      	mov	r4, sp
 800503a:	f107 0314 	add.w	r3, r7, #20
 800503e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005042:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005046:	f107 0308 	add.w	r3, r7, #8
 800504a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800504c:	4628      	mov	r0, r5
 800504e:	f002 faf1 	bl	8007634 <SDIO_Init>
 8005052:	4603      	mov	r3, r0
 8005054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e04f      	b.n	8005104 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005064:	4b29      	ldr	r3, [pc, #164]	; (800510c <HAL_SD_InitCard+0xf8>)
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f002 fb29 	bl	80076c6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005074:	4b25      	ldr	r3, [pc, #148]	; (800510c <HAL_SD_InitCard+0xf8>)
 8005076:	2201      	movs	r2, #1
 8005078:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800507a:	2002      	movs	r0, #2
 800507c:	f7fc f8c6 	bl	800120c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f001 f877 	bl	8006174 <SD_PowerON>
 8005086:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00b      	beq.n	80050a6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e02e      	b.n	8005104 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 ff96 	bl	8005fd8 <SD_InitCard>
 80050ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00b      	beq.n	80050cc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e01b      	b.n	8005104 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050d4:	4618      	mov	r0, r3
 80050d6:	f002 fb88 	bl	80077ea <SDMMC_CmdBlockLength>
 80050da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00f      	beq.n	8005102 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a0a      	ldr	r2, [pc, #40]	; (8005110 <HAL_SD_InitCard+0xfc>)
 80050e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3728      	adds	r7, #40	; 0x28
 8005108:	46bd      	mov	sp, r7
 800510a:	bdb0      	pop	{r4, r5, r7, pc}
 800510c:	422580a0 	.word	0x422580a0
 8005110:	004005ff 	.word	0x004005ff

08005114 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b092      	sub	sp, #72	; 0x48
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005122:	f7fc f867 	bl	80011f4 <HAL_GetTick>
 8005126:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d107      	bne.n	8005146 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e1c5      	b.n	80054d2 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	f040 81b8 	bne.w	80054c4 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800515a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	441a      	add	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005164:	429a      	cmp	r2, r3
 8005166:	d907      	bls.n	8005178 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e1ac      	b.n	80054d2 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2203      	movs	r2, #3
 800517c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2200      	movs	r2, #0
 8005186:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518c:	2b01      	cmp	r3, #1
 800518e:	d002      	beq.n	8005196 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	025b      	lsls	r3, r3, #9
 8005194:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005196:	f04f 33ff 	mov.w	r3, #4294967295
 800519a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	025b      	lsls	r3, r3, #9
 80051a0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80051a2:	2390      	movs	r3, #144	; 0x90
 80051a4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80051a6:	2302      	movs	r3, #2
 80051a8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80051ae:	2301      	movs	r3, #1
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f107 0214 	add.w	r2, r7, #20
 80051ba:	4611      	mov	r1, r2
 80051bc:	4618      	mov	r0, r3
 80051be:	f002 fae8 	bl	8007792 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d90a      	bls.n	80051de <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2202      	movs	r2, #2
 80051cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051d4:	4618      	mov	r0, r3
 80051d6:	f002 fb4c 	bl	8007872 <SDMMC_CmdReadMultiBlock>
 80051da:	6478      	str	r0, [r7, #68]	; 0x44
 80051dc:	e009      	b.n	80051f2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2201      	movs	r2, #1
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051ea:	4618      	mov	r0, r3
 80051ec:	f002 fb1f 	bl	800782e <SDMMC_CmdReadSingleBlock>
 80051f0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80051f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d012      	beq.n	800521e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a7e      	ldr	r2, [pc, #504]	; (80053f8 <HAL_SD_ReadBlocks+0x2e4>)
 80051fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005206:	431a      	orrs	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e159      	b.n	80054d2 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005222:	e061      	b.n	80052e8 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d03c      	beq.n	80052ac <HAL_SD_ReadBlocks+0x198>
 8005232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d039      	beq.n	80052ac <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005238:	2300      	movs	r3, #0
 800523a:	643b      	str	r3, [r7, #64]	; 0x40
 800523c:	e033      	b.n	80052a6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f002 fa21 	bl	800768a <SDIO_ReadFIFO>
 8005248:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	b2da      	uxtb	r2, r3
 800524e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005250:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005254:	3301      	adds	r3, #1
 8005256:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525a:	3b01      	subs	r3, #1
 800525c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	0a1b      	lsrs	r3, r3, #8
 8005262:	b2da      	uxtb	r2, r3
 8005264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005266:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526a:	3301      	adds	r3, #1
 800526c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800526e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005270:	3b01      	subs	r3, #1
 8005272:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005276:	0c1b      	lsrs	r3, r3, #16
 8005278:	b2da      	uxtb	r2, r3
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800527e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005280:	3301      	adds	r3, #1
 8005282:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005286:	3b01      	subs	r3, #1
 8005288:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	0e1b      	lsrs	r3, r3, #24
 800528e:	b2da      	uxtb	r2, r3
 8005290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005292:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005296:	3301      	adds	r3, #1
 8005298:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800529a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800529c:	3b01      	subs	r3, #1
 800529e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80052a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a2:	3301      	adds	r3, #1
 80052a4:	643b      	str	r3, [r7, #64]	; 0x40
 80052a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a8:	2b07      	cmp	r3, #7
 80052aa:	d9c8      	bls.n	800523e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80052ac:	f7fb ffa2 	bl	80011f4 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d902      	bls.n	80052c2 <HAL_SD_ReadBlocks+0x1ae>
 80052bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d112      	bne.n	80052e8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a4c      	ldr	r2, [pc, #304]	; (80053f8 <HAL_SD_ReadBlocks+0x2e4>)
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e0f4      	b.n	80054d2 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ee:	f240 332a 	movw	r3, #810	; 0x32a
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d095      	beq.n	8005224 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005302:	2b00      	cmp	r3, #0
 8005304:	d022      	beq.n	800534c <HAL_SD_ReadBlocks+0x238>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d91f      	bls.n	800534c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005310:	2b03      	cmp	r3, #3
 8005312:	d01b      	beq.n	800534c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4618      	mov	r0, r3
 800531a:	f002 fb11 	bl	8007940 <SDMMC_CmdStopTransfer>
 800531e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005322:	2b00      	cmp	r3, #0
 8005324:	d012      	beq.n	800534c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a33      	ldr	r2, [pc, #204]	; (80053f8 <HAL_SD_ReadBlocks+0x2e4>)
 800532c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005334:	431a      	orrs	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0c2      	b.n	80054d2 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_SD_ReadBlocks+0x254>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005364:	2b00      	cmp	r3, #0
 8005366:	d012      	beq.n	800538e <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <HAL_SD_ReadBlocks+0x2e4>)
 800536e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	f043 0208 	orr.w	r2, r3, #8
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e0a1      	b.n	80054d2 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d012      	beq.n	80053c2 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a15      	ldr	r2, [pc, #84]	; (80053f8 <HAL_SD_ReadBlocks+0x2e4>)
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	f043 0202 	orr.w	r2, r3, #2
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e087      	b.n	80054d2 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d064      	beq.n	800549a <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a08      	ldr	r2, [pc, #32]	; (80053f8 <HAL_SD_ReadBlocks+0x2e4>)
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	f043 0220 	orr.w	r2, r3, #32
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e06d      	b.n	80054d2 <HAL_SD_ReadBlocks+0x3be>
 80053f6:	bf00      	nop
 80053f8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f002 f942 	bl	800768a <SDIO_ReadFIFO>
 8005406:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540a:	b2da      	uxtb	r2, r3
 800540c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005412:	3301      	adds	r3, #1
 8005414:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005418:	3b01      	subs	r3, #1
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800541c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541e:	0a1b      	lsrs	r3, r3, #8
 8005420:	b2da      	uxtb	r2, r3
 8005422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005424:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005428:	3301      	adds	r3, #1
 800542a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800542c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542e:	3b01      	subs	r3, #1
 8005430:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	0c1b      	lsrs	r3, r3, #16
 8005436:	b2da      	uxtb	r2, r3
 8005438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800543c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543e:	3301      	adds	r3, #1
 8005440:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005444:	3b01      	subs	r3, #1
 8005446:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544a:	0e1b      	lsrs	r3, r3, #24
 800544c:	b2da      	uxtb	r2, r3
 800544e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005450:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005454:	3301      	adds	r3, #1
 8005456:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545a:	3b01      	subs	r3, #1
 800545c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800545e:	f7fb fec9 	bl	80011f4 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800546a:	429a      	cmp	r2, r3
 800546c:	d902      	bls.n	8005474 <HAL_SD_ReadBlocks+0x360>
 800546e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005470:	2b00      	cmp	r3, #0
 8005472:	d112      	bne.n	800549a <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a18      	ldr	r2, [pc, #96]	; (80054dc <HAL_SD_ReadBlocks+0x3c8>)
 800547a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e01b      	b.n	80054d2 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <HAL_SD_ReadBlocks+0x39a>
 80054a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1a6      	bne.n	80053fc <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f240 523a 	movw	r2, #1338	; 0x53a
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	e006      	b.n	80054d2 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
  }
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3748      	adds	r7, #72	; 0x48
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	004005ff 	.word	0x004005ff

080054e0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b092      	sub	sp, #72	; 0x48
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80054ee:	f7fb fe81 	bl	80011f4 <HAL_GetTick>
 80054f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d107      	bne.n	8005512 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e16d      	b.n	80057ee <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b01      	cmp	r3, #1
 800551c:	f040 8160 	bne.w	80057e0 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	441a      	add	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005530:	429a      	cmp	r2, r3
 8005532:	d907      	bls.n	8005544 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e154      	b.n	80057ee <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2203      	movs	r2, #3
 8005548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2200      	movs	r2, #0
 8005552:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005558:	2b01      	cmp	r3, #1
 800555a:	d002      	beq.n	8005562 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	025b      	lsls	r3, r3, #9
 8005560:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005562:	f04f 33ff 	mov.w	r3, #4294967295
 8005566:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	025b      	lsls	r3, r3, #9
 800556c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800556e:	2390      	movs	r3, #144	; 0x90
 8005570:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005572:	2300      	movs	r3, #0
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005576:	2300      	movs	r3, #0
 8005578:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800557a:	2301      	movs	r3, #1
 800557c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f107 0218 	add.w	r2, r7, #24
 8005586:	4611      	mov	r1, r2
 8005588:	4618      	mov	r0, r3
 800558a:	f002 f902 	bl	8007792 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d90a      	bls.n	80055aa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2220      	movs	r2, #32
 8005598:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055a0:	4618      	mov	r0, r3
 80055a2:	f002 f9aa 	bl	80078fa <SDMMC_CmdWriteMultiBlock>
 80055a6:	6478      	str	r0, [r7, #68]	; 0x44
 80055a8:	e009      	b.n	80055be <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2210      	movs	r2, #16
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055b6:	4618      	mov	r0, r3
 80055b8:	f002 f97d 	bl	80078b6 <SDMMC_CmdWriteSingleBlock>
 80055bc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80055be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d012      	beq.n	80055ea <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a8b      	ldr	r2, [pc, #556]	; (80057f8 <HAL_SD_WriteBlocks+0x318>)
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055d2:	431a      	orrs	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e101      	b.n	80057ee <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80055ee:	e065      	b.n	80056bc <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d040      	beq.n	8005680 <HAL_SD_WriteBlocks+0x1a0>
 80055fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005600:	2b00      	cmp	r3, #0
 8005602:	d03d      	beq.n	8005680 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005604:	2300      	movs	r3, #0
 8005606:	643b      	str	r3, [r7, #64]	; 0x40
 8005608:	e037      	b.n	800567a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800560a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005612:	3301      	adds	r3, #1
 8005614:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005618:	3b01      	subs	r3, #1
 800561a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800561c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	021a      	lsls	r2, r3, #8
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562a:	3301      	adds	r3, #1
 800562c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800562e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005630:	3b01      	subs	r3, #1
 8005632:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	041a      	lsls	r2, r3, #16
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005642:	3301      	adds	r3, #1
 8005644:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005648:	3b01      	subs	r3, #1
 800564a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	061a      	lsls	r2, r3, #24
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565a:	3301      	adds	r3, #1
 800565c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800565e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005660:	3b01      	subs	r3, #1
 8005662:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f107 0214 	add.w	r2, r7, #20
 800566c:	4611      	mov	r1, r2
 800566e:	4618      	mov	r0, r3
 8005670:	f002 f818 	bl	80076a4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005676:	3301      	adds	r3, #1
 8005678:	643b      	str	r3, [r7, #64]	; 0x40
 800567a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567c:	2b07      	cmp	r3, #7
 800567e:	d9c4      	bls.n	800560a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005680:	f7fb fdb8 	bl	80011f4 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800568c:	429a      	cmp	r2, r3
 800568e:	d902      	bls.n	8005696 <HAL_SD_WriteBlocks+0x1b6>
 8005690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005692:	2b00      	cmp	r3, #0
 8005694:	d112      	bne.n	80056bc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a57      	ldr	r2, [pc, #348]	; (80057f8 <HAL_SD_WriteBlocks+0x318>)
 800569c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a4:	431a      	orrs	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e098      	b.n	80057ee <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056c2:	f240 331a 	movw	r3, #794	; 0x31a
 80056c6:	4013      	ands	r3, r2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d091      	beq.n	80055f0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d022      	beq.n	8005720 <HAL_SD_WriteBlocks+0x240>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d91f      	bls.n	8005720 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d01b      	beq.n	8005720 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f002 f927 	bl	8007940 <SDMMC_CmdStopTransfer>
 80056f2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80056f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d012      	beq.n	8005720 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a3e      	ldr	r2, [pc, #248]	; (80057f8 <HAL_SD_WriteBlocks+0x318>)
 8005700:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005708:	431a      	orrs	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e066      	b.n	80057ee <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d106      	bne.n	800573c <HAL_SD_WriteBlocks+0x25c>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005738:	2b00      	cmp	r3, #0
 800573a:	d012      	beq.n	8005762 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a2d      	ldr	r2, [pc, #180]	; (80057f8 <HAL_SD_WriteBlocks+0x318>)
 8005742:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	f043 0208 	orr.w	r2, r3, #8
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e045      	b.n	80057ee <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d012      	beq.n	8005796 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a20      	ldr	r2, [pc, #128]	; (80057f8 <HAL_SD_WriteBlocks+0x318>)
 8005776:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	f043 0202 	orr.w	r2, r3, #2
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e02b      	b.n	80057ee <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579c:	f003 0310 	and.w	r3, r3, #16
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d012      	beq.n	80057ca <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a13      	ldr	r2, [pc, #76]	; (80057f8 <HAL_SD_WriteBlocks+0x318>)
 80057aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	f043 0210 	orr.w	r2, r3, #16
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e011      	b.n	80057ee <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f240 523a 	movw	r2, #1338	; 0x53a
 80057d2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	e006      	b.n	80057ee <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
  }
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3748      	adds	r7, #72	; 0x48
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	004005ff 	.word	0x004005ff

080057fc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <HAL_SD_IRQHandler+0x2e>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fd5c 	bl	80062e0 <SD_Read_IT>
 8005828:	e165      	b.n	8005af6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 808f 	beq.w	8005958 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005842:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6812      	ldr	r2, [r2, #0]
 800584e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8005852:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005856:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0201 	bic.w	r2, r2, #1
 8005866:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d039      	beq.n	80058e6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d104      	bne.n	8005886 <HAL_SD_IRQHandler+0x8a>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	d011      	beq.n	80058aa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f002 f858 	bl	8007940 <SDMMC_CmdStopTransfer>
 8005890:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f92f 	bl	8005b08 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f240 523a 	movw	r2, #1338	; 0x53a
 80058b2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d104      	bne.n	80058d6 <HAL_SD_IRQHandler+0xda>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f003 ffc0 	bl	800985c <HAL_SD_RxCpltCallback>
 80058dc:	e10b      	b.n	8005af6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f003 ffb2 	bl	8009848 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80058e4:	e107      	b.n	8005af6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8102 	beq.w	8005af6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d011      	beq.n	8005920 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4618      	mov	r0, r3
 8005902:	f002 f81d 	bl	8007940 <SDMMC_CmdStopTransfer>
 8005906:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d008      	beq.n	8005920 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	431a      	orrs	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f8f4 	bl	8005b08 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	f040 80e5 	bne.w	8005af6 <HAL_SD_IRQHandler+0x2fa>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	f040 80df 	bne.w	8005af6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0208 	bic.w	r2, r2, #8
 8005946:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f003 ff79 	bl	8009848 <HAL_SD_TxCpltCallback>
}
 8005956:	e0ce      	b.n	8005af6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <HAL_SD_IRQHandler+0x17c>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fd06 	bl	8006382 <SD_Write_IT>
 8005976:	e0be      	b.n	8005af6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800597e:	f240 233a 	movw	r3, #570	; 0x23a
 8005982:	4013      	ands	r3, r2
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 80b6 	beq.w	8005af6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	f043 0202 	orr.w	r2, r3, #2
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	f043 0208 	orr.w	r2, r3, #8
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d0:	f043 0220 	orr.w	r2, r3, #32
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059de:	f003 0310 	and.w	r3, r3, #16
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d005      	beq.n	80059f2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	f043 0210 	orr.w	r2, r3, #16
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	f043 0208 	orr.w	r2, r3, #8
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f240 723a 	movw	r2, #1850	; 0x73a
 8005a14:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005a24:	f023 0302 	bic.w	r3, r3, #2
 8005a28:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 ff86 	bl	8007940 <SDMMC_CmdStopTransfer>
 8005a34:	4602      	mov	r2, r0
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f855 	bl	8005b08 <HAL_SD_ErrorCallback>
}
 8005a5e:	e04a      	b.n	8005af6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d045      	beq.n	8005af6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d104      	bne.n	8005a7e <HAL_SD_IRQHandler+0x282>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d011      	beq.n	8005aa2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a82:	4a1f      	ldr	r2, [pc, #124]	; (8005b00 <HAL_SD_IRQHandler+0x304>)
 8005a84:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fb fe6a 	bl	8001764 <HAL_DMA_Abort_IT>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d02f      	beq.n	8005af6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fa2e 	bl	8005efc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005aa0:	e029      	b.n	8005af6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d104      	bne.n	8005ab6 <HAL_SD_IRQHandler+0x2ba>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d011      	beq.n	8005ada <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	4a12      	ldr	r2, [pc, #72]	; (8005b04 <HAL_SD_IRQHandler+0x308>)
 8005abc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fb fe4e 	bl	8001764 <HAL_DMA_Abort_IT>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d013      	beq.n	8005af6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fa49 	bl	8005f6a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005ad8:	e00d      	b.n	8005af6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f003 fea0 	bl	8009834 <HAL_SD_AbortCallback>
}
 8005af4:	e7ff      	b.n	8005af6 <HAL_SD_IRQHandler+0x2fa>
 8005af6:	bf00      	nop
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	08005efd 	.word	0x08005efd
 8005b04:	08005f6b 	.word	0x08005f6b

08005b08 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b2a:	0f9b      	lsrs	r3, r3, #30
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b36:	0e9b      	lsrs	r3, r3, #26
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b48:	0e1b      	lsrs	r3, r3, #24
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b5a:	0c1b      	lsrs	r3, r3, #16
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b66:	0a1b      	lsrs	r3, r3, #8
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b7c:	0d1b      	lsrs	r3, r3, #20
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b88:	0c1b      	lsrs	r3, r3, #16
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b9a:	0bdb      	lsrs	r3, r3, #15
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bac:	0b9b      	lsrs	r3, r3, #14
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bbe:	0b5b      	lsrs	r3, r3, #13
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bd0:	0b1b      	lsrs	r3, r3, #12
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2200      	movs	r2, #0
 8005be2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d163      	bne.n	8005cb4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bf0:	009a      	lsls	r2, r3, #2
 8005bf2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005bfc:	0f92      	lsrs	r2, r2, #30
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c08:	0edb      	lsrs	r3, r3, #27
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c1a:	0e1b      	lsrs	r3, r3, #24
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c2c:	0d5b      	lsrs	r3, r3, #21
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c3e:	0c9b      	lsrs	r3, r3, #18
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c50:	0bdb      	lsrs	r3, r3, #15
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	7e1b      	ldrb	r3, [r3, #24]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	3302      	adds	r3, #2
 8005c74:	2201      	movs	r2, #1
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005c7e:	fb03 f202 	mul.w	r2, r3, r2
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	7a1b      	ldrb	r3, [r3, #8]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	2201      	movs	r2, #1
 8005c92:	409a      	lsls	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005ca0:	0a52      	lsrs	r2, r2, #9
 8005ca2:	fb03 f202 	mul.w	r2, r3, r2
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cb0:	661a      	str	r2, [r3, #96]	; 0x60
 8005cb2:	e031      	b.n	8005d18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d11d      	bne.n	8005cf8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cc0:	041b      	lsls	r3, r3, #16
 8005cc2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cca:	0c1b      	lsrs	r3, r3, #16
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	029a      	lsls	r2, r3, #10
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	661a      	str	r2, [r3, #96]	; 0x60
 8005cf6:	e00f      	b.n	8005d18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a58      	ldr	r2, [pc, #352]	; (8005e60 <HAL_SD_GetCardCSD+0x344>)
 8005cfe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e09d      	b.n	8005e54 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d1c:	0b9b      	lsrs	r3, r3, #14
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d2e:	09db      	lsrs	r3, r3, #7
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d50:	0fdb      	lsrs	r3, r3, #31
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5c:	0f5b      	lsrs	r3, r3, #29
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	f003 0303 	and.w	r3, r3, #3
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6e:	0e9b      	lsrs	r3, r3, #26
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d80:	0d9b      	lsrs	r3, r3, #22
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	f003 030f 	and.w	r3, r3, #15
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d92:	0d5b      	lsrs	r3, r3, #21
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dae:	0c1b      	lsrs	r3, r3, #16
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc2:	0bdb      	lsrs	r3, r3, #15
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd6:	0b9b      	lsrs	r3, r3, #14
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dea:	0b5b      	lsrs	r3, r3, #13
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfe:	0b1b      	lsrs	r3, r3, #12
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e12:	0a9b      	lsrs	r3, r3, #10
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e26:	0a1b      	lsrs	r3, r3, #8
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3a:	085b      	lsrs	r3, r3, #1
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	004005ff 	.word	0x004005ff

08005e64 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005ec8:	f107 030c 	add.w	r3, r7, #12
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f9de 	bl	8006290 <SD_SendStatus>
 8005ed4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	0a5b      	lsrs	r3, r3, #9
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005ef2:	693b      	ldr	r3, [r7, #16]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005f12:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f7ff ffd1 	bl	8005ebc <HAL_SD_GetCardState>
 8005f1a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2b06      	cmp	r3, #6
 8005f2e:	d002      	beq.n	8005f36 <SD_DMATxAbort+0x3a>
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b05      	cmp	r3, #5
 8005f34:	d10a      	bne.n	8005f4c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f001 fd00 	bl	8007940 <SDMMC_CmdStopTransfer>
 8005f40:	4602      	mov	r2, r0
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	431a      	orrs	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d103      	bne.n	8005f5c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f003 fc6d 	bl	8009834 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005f5a:	e002      	b.n	8005f62 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f7ff fdd3 	bl	8005b08 <HAL_SD_ErrorCallback>
}
 8005f62:	bf00      	nop
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7ff ff9a 	bl	8005ebc <HAL_SD_GetCardState>
 8005f88:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b06      	cmp	r3, #6
 8005f9c:	d002      	beq.n	8005fa4 <SD_DMARxAbort+0x3a>
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2b05      	cmp	r3, #5
 8005fa2:	d10a      	bne.n	8005fba <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f001 fcc9 	bl	8007940 <SDMMC_CmdStopTransfer>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d103      	bne.n	8005fca <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f003 fc36 	bl	8009834 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005fc8:	e002      	b.n	8005fd0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f7ff fd9c 	bl	8005b08 <HAL_SD_ErrorCallback>
}
 8005fd0:	bf00      	nop
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005fd8:	b5b0      	push	{r4, r5, r7, lr}
 8005fda:	b094      	sub	sp, #80	; 0x50
 8005fdc:	af04      	add	r7, sp, #16
 8005fde:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 fb7a 	bl	80076e2 <SDIO_GetPowerState>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d102      	bne.n	8005ffa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005ff4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005ff8:	e0b8      	b.n	800616c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d02f      	beq.n	8006062 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4618      	mov	r0, r3
 8006008:	f001 fd61 	bl	8007ace <SDMMC_CmdSendCID>
 800600c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800600e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <SD_InitCard+0x40>
    {
      return errorstate;
 8006014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006016:	e0a9      	b.n	800616c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2100      	movs	r1, #0
 800601e:	4618      	mov	r0, r3
 8006020:	f001 fba4 	bl	800776c <SDIO_GetResponse>
 8006024:	4602      	mov	r2, r0
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2104      	movs	r1, #4
 8006030:	4618      	mov	r0, r3
 8006032:	f001 fb9b 	bl	800776c <SDIO_GetResponse>
 8006036:	4602      	mov	r2, r0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2108      	movs	r1, #8
 8006042:	4618      	mov	r0, r3
 8006044:	f001 fb92 	bl	800776c <SDIO_GetResponse>
 8006048:	4602      	mov	r2, r0
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	210c      	movs	r1, #12
 8006054:	4618      	mov	r0, r3
 8006056:	f001 fb89 	bl	800776c <SDIO_GetResponse>
 800605a:	4602      	mov	r2, r0
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006066:	2b03      	cmp	r3, #3
 8006068:	d00d      	beq.n	8006086 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f107 020e 	add.w	r2, r7, #14
 8006072:	4611      	mov	r1, r2
 8006074:	4618      	mov	r0, r3
 8006076:	f001 fd67 	bl	8007b48 <SDMMC_CmdSetRelAdd>
 800607a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800607c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <SD_InitCard+0xae>
    {
      return errorstate;
 8006082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006084:	e072      	b.n	800616c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608a:	2b03      	cmp	r3, #3
 800608c:	d036      	beq.n	80060fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800608e:	89fb      	ldrh	r3, [r7, #14]
 8006090:	461a      	mov	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609e:	041b      	lsls	r3, r3, #16
 80060a0:	4619      	mov	r1, r3
 80060a2:	4610      	mov	r0, r2
 80060a4:	f001 fd31 	bl	8007b0a <SDMMC_CmdSendCSD>
 80060a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80060b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b2:	e05b      	b.n	800616c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f001 fb56 	bl	800776c <SDIO_GetResponse>
 80060c0:	4602      	mov	r2, r0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2104      	movs	r1, #4
 80060cc:	4618      	mov	r0, r3
 80060ce:	f001 fb4d 	bl	800776c <SDIO_GetResponse>
 80060d2:	4602      	mov	r2, r0
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2108      	movs	r1, #8
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 fb44 	bl	800776c <SDIO_GetResponse>
 80060e4:	4602      	mov	r2, r0
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	210c      	movs	r1, #12
 80060f0:	4618      	mov	r0, r3
 80060f2:	f001 fb3b 	bl	800776c <SDIO_GetResponse>
 80060f6:	4602      	mov	r2, r0
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2104      	movs	r1, #4
 8006102:	4618      	mov	r0, r3
 8006104:	f001 fb32 	bl	800776c <SDIO_GetResponse>
 8006108:	4603      	mov	r3, r0
 800610a:	0d1a      	lsrs	r2, r3, #20
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006110:	f107 0310 	add.w	r3, r7, #16
 8006114:	4619      	mov	r1, r3
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff fd00 	bl	8005b1c <HAL_SD_GetCardCSD>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006122:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006126:	e021      	b.n	800616c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6819      	ldr	r1, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006130:	041b      	lsls	r3, r3, #16
 8006132:	2200      	movs	r2, #0
 8006134:	461c      	mov	r4, r3
 8006136:	4615      	mov	r5, r2
 8006138:	4622      	mov	r2, r4
 800613a:	462b      	mov	r3, r5
 800613c:	4608      	mov	r0, r1
 800613e:	f001 fc21 	bl	8007984 <SDMMC_CmdSelDesel>
 8006142:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <SD_InitCard+0x176>
  {
    return errorstate;
 800614a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614c:	e00e      	b.n	800616c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681d      	ldr	r5, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	466c      	mov	r4, sp
 8006156:	f103 0210 	add.w	r2, r3, #16
 800615a:	ca07      	ldmia	r2, {r0, r1, r2}
 800615c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006160:	3304      	adds	r3, #4
 8006162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006164:	4628      	mov	r0, r5
 8006166:	f001 fa65 	bl	8007634 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3740      	adds	r7, #64	; 0x40
 8006170:	46bd      	mov	sp, r7
 8006172:	bdb0      	pop	{r4, r5, r7, pc}

08006174 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	2300      	movs	r3, #0
 8006186:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f001 fc1c 	bl	80079ca <SDMMC_CmdGoIdleState>
 8006192:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <SD_PowerON+0x2a>
  {
    return errorstate;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	e072      	b.n	8006284 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f001 fc2f 	bl	8007a06 <SDMMC_CmdOperCond>
 80061a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00d      	beq.n	80061cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f001 fc05 	bl	80079ca <SDMMC_CmdGoIdleState>
 80061c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d004      	beq.n	80061d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	e05b      	b.n	8006284 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d137      	bne.n	800624a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2100      	movs	r1, #0
 80061e0:	4618      	mov	r0, r3
 80061e2:	f001 fc2f 	bl	8007a44 <SDMMC_CmdAppCommand>
 80061e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d02d      	beq.n	800624a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80061f2:	e047      	b.n	8006284 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2100      	movs	r1, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f001 fc22 	bl	8007a44 <SDMMC_CmdAppCommand>
 8006200:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <SD_PowerON+0x98>
    {
      return errorstate;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	e03b      	b.n	8006284 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	491e      	ldr	r1, [pc, #120]	; (800628c <SD_PowerON+0x118>)
 8006212:	4618      	mov	r0, r3
 8006214:	f001 fc38 	bl	8007a88 <SDMMC_CmdAppOperCommand>
 8006218:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006220:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006224:	e02e      	b.n	8006284 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2100      	movs	r1, #0
 800622c:	4618      	mov	r0, r3
 800622e:	f001 fa9d 	bl	800776c <SDIO_GetResponse>
 8006232:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	0fdb      	lsrs	r3, r3, #31
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <SD_PowerON+0xcc>
 800623c:	2301      	movs	r3, #1
 800623e:	e000      	b.n	8006242 <SD_PowerON+0xce>
 8006240:	2300      	movs	r3, #0
 8006242:	613b      	str	r3, [r7, #16]

    count++;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	3301      	adds	r3, #1
 8006248:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006250:	4293      	cmp	r3, r2
 8006252:	d802      	bhi.n	800625a <SD_PowerON+0xe6>
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0cc      	beq.n	80061f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006260:	4293      	cmp	r3, r2
 8006262:	d902      	bls.n	800626a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006264:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006268:	e00c      	b.n	8006284 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	645a      	str	r2, [r3, #68]	; 0x44
 800627a:	e002      	b.n	8006282 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	c1100000 	.word	0xc1100000

08006290 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d102      	bne.n	80062a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80062a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062a4:	e018      	b.n	80062d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ae:	041b      	lsls	r3, r3, #16
 80062b0:	4619      	mov	r1, r3
 80062b2:	4610      	mov	r0, r2
 80062b4:	f001 fc69 	bl	8007b8a <SDMMC_CmdSendStatus>
 80062b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	e009      	b.n	80062d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2100      	movs	r1, #0
 80062ca:	4618      	mov	r0, r3
 80062cc:	f001 fa4e 	bl	800776c <SDIO_GetResponse>
 80062d0:	4602      	mov	r2, r0
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ec:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d03f      	beq.n	800637a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80062fa:	2300      	movs	r3, #0
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	e033      	b.n	8006368 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4618      	mov	r0, r3
 8006306:	f001 f9c0 	bl	800768a <SDIO_ReadFIFO>
 800630a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	b2da      	uxtb	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	3301      	adds	r3, #1
 8006318:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	3b01      	subs	r3, #1
 800631e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	0a1b      	lsrs	r3, r3, #8
 8006324:	b2da      	uxtb	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	701a      	strb	r2, [r3, #0]
      tmp++;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3301      	adds	r3, #1
 800632e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	3b01      	subs	r3, #1
 8006334:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	0c1b      	lsrs	r3, r3, #16
 800633a:	b2da      	uxtb	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3301      	adds	r3, #1
 8006344:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	3b01      	subs	r3, #1
 800634a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	0e1b      	lsrs	r3, r3, #24
 8006350:	b2da      	uxtb	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3301      	adds	r3, #1
 800635a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	3b01      	subs	r3, #1
 8006360:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	3301      	adds	r3, #1
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	2b07      	cmp	r3, #7
 800636c:	d9c8      	bls.n	8006300 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800637a:	bf00      	nop
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b086      	sub	sp, #24
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d043      	beq.n	8006424 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800639c:	2300      	movs	r3, #0
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	e037      	b.n	8006412 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3301      	adds	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	021a      	lsls	r2, r3, #8
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60bb      	str	r3, [r7, #8]
      tmp++;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	3301      	adds	r3, #1
 80063c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	041a      	lsls	r2, r3, #16
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3301      	adds	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	061a      	lsls	r2, r3, #24
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3301      	adds	r3, #1
 80063f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f107 0208 	add.w	r2, r7, #8
 8006404:	4611      	mov	r1, r2
 8006406:	4618      	mov	r0, r3
 8006408:	f001 f94c 	bl	80076a4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	3301      	adds	r3, #1
 8006410:	617b      	str	r3, [r7, #20]
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2b07      	cmp	r3, #7
 8006416:	d9c4      	bls.n	80063a2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006424:	bf00      	nop
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e042      	b.n	80064c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fa fadc 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2224      	movs	r2, #36	; 0x24
 800645c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800646e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fe6b 	bl	800714c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006484:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	695a      	ldr	r2, [r3, #20]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006494:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	4613      	mov	r3, r2
 80064d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d112      	bne.n	800650c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <HAL_UART_Receive_DMA+0x26>
 80064ec:	88fb      	ldrh	r3, [r7, #6]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e00b      	b.n	800650e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	461a      	mov	r2, r3
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 fbc2 	bl	8006c8c <UART_Start_Receive_DMA>
 8006508:	4603      	mov	r3, r0
 800650a:	e000      	b.n	800650e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800650c:	2302      	movs	r3, #2
  }
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b0ba      	sub	sp, #232	; 0xe8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800653e:	2300      	movs	r3, #0
 8006540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006544:	2300      	movs	r3, #0
 8006546:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800654a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654e:	f003 030f 	and.w	r3, r3, #15
 8006552:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10f      	bne.n	800657e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800655e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b00      	cmp	r3, #0
 8006568:	d009      	beq.n	800657e <HAL_UART_IRQHandler+0x66>
 800656a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fd29 	bl	8006fce <UART_Receive_IT>
      return;
 800657c:	e25b      	b.n	8006a36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800657e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 80de 	beq.w	8006744 <HAL_UART_IRQHandler+0x22c>
 8006588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b00      	cmp	r3, #0
 8006592:	d106      	bne.n	80065a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006598:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 80d1 	beq.w	8006744 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00b      	beq.n	80065c6 <HAL_UART_IRQHandler+0xae>
 80065ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d005      	beq.n	80065c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065be:	f043 0201 	orr.w	r2, r3, #1
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ca:	f003 0304 	and.w	r3, r3, #4
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <HAL_UART_IRQHandler+0xd2>
 80065d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e2:	f043 0202 	orr.w	r2, r3, #2
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00b      	beq.n	800660e <HAL_UART_IRQHandler+0xf6>
 80065f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d005      	beq.n	800660e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006606:	f043 0204 	orr.w	r2, r3, #4
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800660e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d011      	beq.n	800663e <HAL_UART_IRQHandler+0x126>
 800661a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b00      	cmp	r3, #0
 8006624:	d105      	bne.n	8006632 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d005      	beq.n	800663e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006636:	f043 0208 	orr.w	r2, r3, #8
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 81f2 	beq.w	8006a2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b00      	cmp	r3, #0
 8006652:	d008      	beq.n	8006666 <HAL_UART_IRQHandler+0x14e>
 8006654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fcb4 	bl	8006fce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006670:	2b40      	cmp	r3, #64	; 0x40
 8006672:	bf0c      	ite	eq
 8006674:	2301      	moveq	r3, #1
 8006676:	2300      	movne	r3, #0
 8006678:	b2db      	uxtb	r3, r3
 800667a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006682:	f003 0308 	and.w	r3, r3, #8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d103      	bne.n	8006692 <HAL_UART_IRQHandler+0x17a>
 800668a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800668e:	2b00      	cmp	r3, #0
 8006690:	d04f      	beq.n	8006732 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fbbc 	bl	8006e10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a2:	2b40      	cmp	r3, #64	; 0x40
 80066a4:	d141      	bne.n	800672a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3314      	adds	r3, #20
 80066ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3314      	adds	r3, #20
 80066ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1d9      	bne.n	80066a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d013      	beq.n	8006722 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fe:	4a7e      	ldr	r2, [pc, #504]	; (80068f8 <HAL_UART_IRQHandler+0x3e0>)
 8006700:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006706:	4618      	mov	r0, r3
 8006708:	f7fb f82c 	bl	8001764 <HAL_DMA_Abort_IT>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d016      	beq.n	8006740 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800671c:	4610      	mov	r0, r2
 800671e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006720:	e00e      	b.n	8006740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f99e 	bl	8006a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006728:	e00a      	b.n	8006740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f99a 	bl	8006a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006730:	e006      	b.n	8006740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f996 	bl	8006a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800673e:	e175      	b.n	8006a2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006740:	bf00      	nop
    return;
 8006742:	e173      	b.n	8006a2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006748:	2b01      	cmp	r3, #1
 800674a:	f040 814f 	bne.w	80069ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800674e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006752:	f003 0310 	and.w	r3, r3, #16
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 8148 	beq.w	80069ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800675c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006760:	f003 0310 	and.w	r3, r3, #16
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 8141 	beq.w	80069ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800676a:	2300      	movs	r3, #0
 800676c:	60bb      	str	r3, [r7, #8]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60bb      	str	r3, [r7, #8]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	60bb      	str	r3, [r7, #8]
 800677e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678a:	2b40      	cmp	r3, #64	; 0x40
 800678c:	f040 80b6 	bne.w	80068fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800679c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 8145 	beq.w	8006a30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067ae:	429a      	cmp	r2, r3
 80067b0:	f080 813e 	bcs.w	8006a30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c6:	f000 8088 	beq.w	80068da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	330c      	adds	r3, #12
 80067d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	330c      	adds	r3, #12
 80067f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80067f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006802:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800680e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1d9      	bne.n	80067ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3314      	adds	r3, #20
 800681c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006828:	f023 0301 	bic.w	r3, r3, #1
 800682c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3314      	adds	r3, #20
 8006836:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800683a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800683e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006840:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006842:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006846:	e841 2300 	strex	r3, r2, [r1]
 800684a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800684c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1e1      	bne.n	8006816 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3314      	adds	r3, #20
 8006858:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3314      	adds	r3, #20
 8006872:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006876:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006878:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800687c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e3      	bne.n	8006852 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2220      	movs	r2, #32
 800688e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	330c      	adds	r3, #12
 800689e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068aa:	f023 0310 	bic.w	r3, r3, #16
 80068ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	330c      	adds	r3, #12
 80068b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80068bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80068be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068c4:	e841 2300 	strex	r3, r2, [r1]
 80068c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1e3      	bne.n	8006898 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fa fed5 	bl	8001684 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2202      	movs	r2, #2
 80068de:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f8c1 	bl	8006a78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068f6:	e09b      	b.n	8006a30 <HAL_UART_IRQHandler+0x518>
 80068f8:	08006ed7 	.word	0x08006ed7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006904:	b29b      	uxth	r3, r3
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006910:	b29b      	uxth	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 808e 	beq.w	8006a34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006918:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8089 	beq.w	8006a34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	330c      	adds	r3, #12
 8006928:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006934:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006938:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	330c      	adds	r3, #12
 8006942:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006946:	647a      	str	r2, [r7, #68]	; 0x44
 8006948:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800694c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e3      	bne.n	8006922 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3314      	adds	r3, #20
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	623b      	str	r3, [r7, #32]
   return(result);
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	f023 0301 	bic.w	r3, r3, #1
 8006970:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3314      	adds	r3, #20
 800697a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800697e:	633a      	str	r2, [r7, #48]	; 0x30
 8006980:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e3      	bne.n	800695a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2220      	movs	r2, #32
 8006996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	330c      	adds	r3, #12
 80069a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	e853 3f00 	ldrex	r3, [r3]
 80069ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f023 0310 	bic.w	r3, r3, #16
 80069b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	330c      	adds	r3, #12
 80069c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80069c4:	61fa      	str	r2, [r7, #28]
 80069c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c8:	69b9      	ldr	r1, [r7, #24]
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	e841 2300 	strex	r3, r2, [r1]
 80069d0:	617b      	str	r3, [r7, #20]
   return(result);
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1e3      	bne.n	80069a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f847 	bl	8006a78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069ea:	e023      	b.n	8006a34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d009      	beq.n	8006a0c <HAL_UART_IRQHandler+0x4f4>
 80069f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d003      	beq.n	8006a0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fa7a 	bl	8006efe <UART_Transmit_IT>
    return;
 8006a0a:	e014      	b.n	8006a36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00e      	beq.n	8006a36 <HAL_UART_IRQHandler+0x51e>
 8006a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d008      	beq.n	8006a36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 faba 	bl	8006f9e <UART_EndTransmit_IT>
    return;
 8006a2a:	e004      	b.n	8006a36 <HAL_UART_IRQHandler+0x51e>
    return;
 8006a2c:	bf00      	nop
 8006a2e:	e002      	b.n	8006a36 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a30:	bf00      	nop
 8006a32:	e000      	b.n	8006a36 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a34:	bf00      	nop
  }
}
 8006a36:	37e8      	adds	r7, #232	; 0xe8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b09c      	sub	sp, #112	; 0x70
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d172      	bne.n	8006b92 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aae:	2200      	movs	r2, #0
 8006ab0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	330c      	adds	r3, #12
 8006ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ac8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	330c      	adds	r3, #12
 8006ad0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ad2:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ad4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ad8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e5      	bne.n	8006ab2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3314      	adds	r3, #20
 8006aec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af8:	f023 0301 	bic.w	r3, r3, #1
 8006afc:	667b      	str	r3, [r7, #100]	; 0x64
 8006afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3314      	adds	r3, #20
 8006b04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b06:	647a      	str	r2, [r7, #68]	; 0x44
 8006b08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e5      	bne.n	8006ae6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3314      	adds	r3, #20
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	623b      	str	r3, [r7, #32]
   return(result);
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b30:	663b      	str	r3, [r7, #96]	; 0x60
 8006b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3314      	adds	r3, #20
 8006b38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b3a:	633a      	str	r2, [r7, #48]	; 0x30
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e5      	bne.n	8006b1a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b50:	2220      	movs	r2, #32
 8006b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d119      	bne.n	8006b92 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	330c      	adds	r3, #12
 8006b64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f023 0310 	bic.w	r3, r3, #16
 8006b74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	330c      	adds	r3, #12
 8006b7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b7e:	61fa      	str	r2, [r7, #28]
 8006b80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	69b9      	ldr	r1, [r7, #24]
 8006b84:	69fa      	ldr	r2, [r7, #28]
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	617b      	str	r3, [r7, #20]
   return(result);
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e5      	bne.n	8006b5e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b94:	2200      	movs	r2, #0
 8006b96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d106      	bne.n	8006bae <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006ba8:	f7ff ff66 	bl	8006a78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bac:	e002      	b.n	8006bb4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006bae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006bb0:	f7f9 fe6e 	bl	8000890 <HAL_UART_RxCpltCallback>
}
 8006bb4:	bf00      	nop
 8006bb6:	3770      	adds	r7, #112	; 0x70
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d108      	bne.n	8006bea <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	4619      	mov	r1, r3
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f7ff ff48 	bl	8006a78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006be8:	e002      	b.n	8006bf0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f7ff ff30 	bl	8006a50 <HAL_UART_RxHalfCpltCallback>
}
 8006bf0:	bf00      	nop
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c14:	2b80      	cmp	r3, #128	; 0x80
 8006c16:	bf0c      	ite	eq
 8006c18:	2301      	moveq	r3, #1
 8006c1a:	2300      	movne	r3, #0
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b21      	cmp	r3, #33	; 0x21
 8006c2a:	d108      	bne.n	8006c3e <UART_DMAError+0x46>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d005      	beq.n	8006c3e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2200      	movs	r2, #0
 8006c36:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006c38:	68b8      	ldr	r0, [r7, #8]
 8006c3a:	f000 f8c1 	bl	8006dc0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c48:	2b40      	cmp	r3, #64	; 0x40
 8006c4a:	bf0c      	ite	eq
 8006c4c:	2301      	moveq	r3, #1
 8006c4e:	2300      	movne	r3, #0
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b22      	cmp	r3, #34	; 0x22
 8006c5e:	d108      	bne.n	8006c72 <UART_DMAError+0x7a>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d005      	beq.n	8006c72 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006c6c:	68b8      	ldr	r0, [r7, #8]
 8006c6e:	f000 f8cf 	bl	8006e10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c76:	f043 0210 	orr.w	r2, r3, #16
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c7e:	68b8      	ldr	r0, [r7, #8]
 8006c80:	f7ff fef0 	bl	8006a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c84:	bf00      	nop
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b098      	sub	sp, #96	; 0x60
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	4613      	mov	r3, r2
 8006c98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	88fa      	ldrh	r2, [r7, #6]
 8006ca4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2222      	movs	r2, #34	; 0x22
 8006cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb8:	4a3e      	ldr	r2, [pc, #248]	; (8006db4 <UART_Start_Receive_DMA+0x128>)
 8006cba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc0:	4a3d      	ldr	r2, [pc, #244]	; (8006db8 <UART_Start_Receive_DMA+0x12c>)
 8006cc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc8:	4a3c      	ldr	r2, [pc, #240]	; (8006dbc <UART_Start_Receive_DMA+0x130>)
 8006cca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006cd4:	f107 0308 	add.w	r3, r7, #8
 8006cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	88fb      	ldrh	r3, [r7, #6]
 8006cec:	f7fa fc72 	bl	80015d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	613b      	str	r3, [r7, #16]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d019      	beq.n	8006d42 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	330c      	adds	r3, #12
 8006d14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d18:	e853 3f00 	ldrex	r3, [r3]
 8006d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d24:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	330c      	adds	r3, #12
 8006d2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d2e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006d30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006d34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d36:	e841 2300 	strex	r3, r2, [r1]
 8006d3a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1e5      	bne.n	8006d0e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3314      	adds	r3, #20
 8006d48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	f043 0301 	orr.w	r3, r3, #1
 8006d58:	657b      	str	r3, [r7, #84]	; 0x54
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3314      	adds	r3, #20
 8006d60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d62:	63ba      	str	r2, [r7, #56]	; 0x38
 8006d64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e5      	bne.n	8006d42 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3314      	adds	r3, #20
 8006d7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	617b      	str	r3, [r7, #20]
   return(result);
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d8c:	653b      	str	r3, [r7, #80]	; 0x50
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3314      	adds	r3, #20
 8006d94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d96:	627a      	str	r2, [r7, #36]	; 0x24
 8006d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9a:	6a39      	ldr	r1, [r7, #32]
 8006d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e5      	bne.n	8006d76 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3760      	adds	r7, #96	; 0x60
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	08006a91 	.word	0x08006a91
 8006db8:	08006bbd 	.word	0x08006bbd
 8006dbc:	08006bf9 	.word	0x08006bf9

08006dc0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b089      	sub	sp, #36	; 0x24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	330c      	adds	r3, #12
 8006dce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	e853 3f00 	ldrex	r3, [r3]
 8006dd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006dde:	61fb      	str	r3, [r7, #28]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	330c      	adds	r3, #12
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	61ba      	str	r2, [r7, #24]
 8006dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	6979      	ldr	r1, [r7, #20]
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	e841 2300 	strex	r3, r2, [r1]
 8006df4:	613b      	str	r3, [r7, #16]
   return(result);
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1e5      	bne.n	8006dc8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006e04:	bf00      	nop
 8006e06:	3724      	adds	r7, #36	; 0x24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b095      	sub	sp, #84	; 0x54
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	330c      	adds	r3, #12
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	e853 3f00 	ldrex	r3, [r3]
 8006e26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	330c      	adds	r3, #12
 8006e36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e38:	643a      	str	r2, [r7, #64]	; 0x40
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e40:	e841 2300 	strex	r3, r2, [r1]
 8006e44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e5      	bne.n	8006e18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3314      	adds	r3, #20
 8006e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	f023 0301 	bic.w	r3, r3, #1
 8006e62:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3314      	adds	r3, #20
 8006e6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e5      	bne.n	8006e4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d119      	bne.n	8006ebc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	330c      	adds	r3, #12
 8006e8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f023 0310 	bic.w	r3, r3, #16
 8006e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	330c      	adds	r3, #12
 8006ea6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ea8:	61ba      	str	r2, [r7, #24]
 8006eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	6979      	ldr	r1, [r7, #20]
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e5      	bne.n	8006e88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006eca:	bf00      	nop
 8006ecc:	3754      	adds	r7, #84	; 0x54
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b084      	sub	sp, #16
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f7ff fdb7 	bl	8006a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ef6:	bf00      	nop
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b085      	sub	sp, #20
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b21      	cmp	r3, #33	; 0x21
 8006f10:	d13e      	bne.n	8006f90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1a:	d114      	bne.n	8006f46 <UART_Transmit_IT+0x48>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d110      	bne.n	8006f46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	1c9a      	adds	r2, r3, #2
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	621a      	str	r2, [r3, #32]
 8006f44:	e008      	b.n	8006f58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	1c59      	adds	r1, r3, #1
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	6211      	str	r1, [r2, #32]
 8006f50:	781a      	ldrb	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	4619      	mov	r1, r3
 8006f66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10f      	bne.n	8006f8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	e000      	b.n	8006f92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f90:	2302      	movs	r3, #2
  }
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff fd3c 	bl	8006a3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b08c      	sub	sp, #48	; 0x30
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b22      	cmp	r3, #34	; 0x22
 8006fe0:	f040 80ae 	bne.w	8007140 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fec:	d117      	bne.n	800701e <UART_Receive_IT+0x50>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d113      	bne.n	800701e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	b29b      	uxth	r3, r3
 8007008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700c:	b29a      	uxth	r2, r3
 800700e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007010:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007016:	1c9a      	adds	r2, r3, #2
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	629a      	str	r2, [r3, #40]	; 0x28
 800701c:	e026      	b.n	800706c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007022:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007024:	2300      	movs	r3, #0
 8007026:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007030:	d007      	beq.n	8007042 <UART_Receive_IT+0x74>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <UART_Receive_IT+0x82>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d106      	bne.n	8007050 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	b2da      	uxtb	r2, r3
 800704a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704c:	701a      	strb	r2, [r3, #0]
 800704e:	e008      	b.n	8007062 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800705c:	b2da      	uxtb	r2, r3
 800705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007060:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007066:	1c5a      	adds	r2, r3, #1
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007070:	b29b      	uxth	r3, r3
 8007072:	3b01      	subs	r3, #1
 8007074:	b29b      	uxth	r3, r3
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	4619      	mov	r1, r3
 800707a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800707c:	2b00      	cmp	r3, #0
 800707e:	d15d      	bne.n	800713c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0220 	bic.w	r2, r2, #32
 800708e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800709e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695a      	ldr	r2, [r3, #20]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0201 	bic.w	r2, r2, #1
 80070ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d135      	bne.n	8007132 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	330c      	adds	r3, #12
 80070d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	613b      	str	r3, [r7, #16]
   return(result);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f023 0310 	bic.w	r3, r3, #16
 80070e2:	627b      	str	r3, [r7, #36]	; 0x24
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	330c      	adds	r3, #12
 80070ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ec:	623a      	str	r2, [r7, #32]
 80070ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	69f9      	ldr	r1, [r7, #28]
 80070f2:	6a3a      	ldr	r2, [r7, #32]
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e5      	bne.n	80070cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0310 	and.w	r3, r3, #16
 800710a:	2b10      	cmp	r3, #16
 800710c:	d10a      	bne.n	8007124 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff fca4 	bl	8006a78 <HAL_UARTEx_RxEventCallback>
 8007130:	e002      	b.n	8007138 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7f9 fbac 	bl	8000890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	e002      	b.n	8007142 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	e000      	b.n	8007142 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007140:	2302      	movs	r3, #2
  }
}
 8007142:	4618      	mov	r0, r3
 8007144:	3730      	adds	r7, #48	; 0x30
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800714c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007150:	b0c0      	sub	sp, #256	; 0x100
 8007152:	af00      	add	r7, sp, #0
 8007154:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007168:	68d9      	ldr	r1, [r3, #12]
 800716a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	ea40 0301 	orr.w	r3, r0, r1
 8007174:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717a:	689a      	ldr	r2, [r3, #8]
 800717c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	431a      	orrs	r2, r3
 8007184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	431a      	orrs	r2, r3
 800718c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	4313      	orrs	r3, r2
 8007194:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071a4:	f021 010c 	bic.w	r1, r1, #12
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071b2:	430b      	orrs	r3, r1
 80071b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c6:	6999      	ldr	r1, [r3, #24]
 80071c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	ea40 0301 	orr.w	r3, r0, r1
 80071d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	4b8f      	ldr	r3, [pc, #572]	; (8007418 <UART_SetConfig+0x2cc>)
 80071dc:	429a      	cmp	r2, r3
 80071de:	d005      	beq.n	80071ec <UART_SetConfig+0xa0>
 80071e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	4b8d      	ldr	r3, [pc, #564]	; (800741c <UART_SetConfig+0x2d0>)
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d104      	bne.n	80071f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071ec:	f7fd feb2 	bl	8004f54 <HAL_RCC_GetPCLK2Freq>
 80071f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071f4:	e003      	b.n	80071fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071f6:	f7fd fe99 	bl	8004f2c <HAL_RCC_GetPCLK1Freq>
 80071fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007202:	69db      	ldr	r3, [r3, #28]
 8007204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007208:	f040 810c 	bne.w	8007424 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800720c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007210:	2200      	movs	r2, #0
 8007212:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007216:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800721a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800721e:	4622      	mov	r2, r4
 8007220:	462b      	mov	r3, r5
 8007222:	1891      	adds	r1, r2, r2
 8007224:	65b9      	str	r1, [r7, #88]	; 0x58
 8007226:	415b      	adcs	r3, r3
 8007228:	65fb      	str	r3, [r7, #92]	; 0x5c
 800722a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800722e:	4621      	mov	r1, r4
 8007230:	eb12 0801 	adds.w	r8, r2, r1
 8007234:	4629      	mov	r1, r5
 8007236:	eb43 0901 	adc.w	r9, r3, r1
 800723a:	f04f 0200 	mov.w	r2, #0
 800723e:	f04f 0300 	mov.w	r3, #0
 8007242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800724a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800724e:	4690      	mov	r8, r2
 8007250:	4699      	mov	r9, r3
 8007252:	4623      	mov	r3, r4
 8007254:	eb18 0303 	adds.w	r3, r8, r3
 8007258:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800725c:	462b      	mov	r3, r5
 800725e:	eb49 0303 	adc.w	r3, r9, r3
 8007262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007272:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007276:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800727a:	460b      	mov	r3, r1
 800727c:	18db      	adds	r3, r3, r3
 800727e:	653b      	str	r3, [r7, #80]	; 0x50
 8007280:	4613      	mov	r3, r2
 8007282:	eb42 0303 	adc.w	r3, r2, r3
 8007286:	657b      	str	r3, [r7, #84]	; 0x54
 8007288:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800728c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007290:	f7f8 ffee 	bl	8000270 <__aeabi_uldivmod>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	4b61      	ldr	r3, [pc, #388]	; (8007420 <UART_SetConfig+0x2d4>)
 800729a:	fba3 2302 	umull	r2, r3, r3, r2
 800729e:	095b      	lsrs	r3, r3, #5
 80072a0:	011c      	lsls	r4, r3, #4
 80072a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80072b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80072b4:	4642      	mov	r2, r8
 80072b6:	464b      	mov	r3, r9
 80072b8:	1891      	adds	r1, r2, r2
 80072ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80072bc:	415b      	adcs	r3, r3
 80072be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072c4:	4641      	mov	r1, r8
 80072c6:	eb12 0a01 	adds.w	sl, r2, r1
 80072ca:	4649      	mov	r1, r9
 80072cc:	eb43 0b01 	adc.w	fp, r3, r1
 80072d0:	f04f 0200 	mov.w	r2, #0
 80072d4:	f04f 0300 	mov.w	r3, #0
 80072d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072e4:	4692      	mov	sl, r2
 80072e6:	469b      	mov	fp, r3
 80072e8:	4643      	mov	r3, r8
 80072ea:	eb1a 0303 	adds.w	r3, sl, r3
 80072ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072f2:	464b      	mov	r3, r9
 80072f4:	eb4b 0303 	adc.w	r3, fp, r3
 80072f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007308:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800730c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007310:	460b      	mov	r3, r1
 8007312:	18db      	adds	r3, r3, r3
 8007314:	643b      	str	r3, [r7, #64]	; 0x40
 8007316:	4613      	mov	r3, r2
 8007318:	eb42 0303 	adc.w	r3, r2, r3
 800731c:	647b      	str	r3, [r7, #68]	; 0x44
 800731e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007322:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007326:	f7f8 ffa3 	bl	8000270 <__aeabi_uldivmod>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	4611      	mov	r1, r2
 8007330:	4b3b      	ldr	r3, [pc, #236]	; (8007420 <UART_SetConfig+0x2d4>)
 8007332:	fba3 2301 	umull	r2, r3, r3, r1
 8007336:	095b      	lsrs	r3, r3, #5
 8007338:	2264      	movs	r2, #100	; 0x64
 800733a:	fb02 f303 	mul.w	r3, r2, r3
 800733e:	1acb      	subs	r3, r1, r3
 8007340:	00db      	lsls	r3, r3, #3
 8007342:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007346:	4b36      	ldr	r3, [pc, #216]	; (8007420 <UART_SetConfig+0x2d4>)
 8007348:	fba3 2302 	umull	r2, r3, r3, r2
 800734c:	095b      	lsrs	r3, r3, #5
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007354:	441c      	add	r4, r3
 8007356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800735a:	2200      	movs	r2, #0
 800735c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007360:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007364:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007368:	4642      	mov	r2, r8
 800736a:	464b      	mov	r3, r9
 800736c:	1891      	adds	r1, r2, r2
 800736e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007370:	415b      	adcs	r3, r3
 8007372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007374:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007378:	4641      	mov	r1, r8
 800737a:	1851      	adds	r1, r2, r1
 800737c:	6339      	str	r1, [r7, #48]	; 0x30
 800737e:	4649      	mov	r1, r9
 8007380:	414b      	adcs	r3, r1
 8007382:	637b      	str	r3, [r7, #52]	; 0x34
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	f04f 0300 	mov.w	r3, #0
 800738c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007390:	4659      	mov	r1, fp
 8007392:	00cb      	lsls	r3, r1, #3
 8007394:	4651      	mov	r1, sl
 8007396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800739a:	4651      	mov	r1, sl
 800739c:	00ca      	lsls	r2, r1, #3
 800739e:	4610      	mov	r0, r2
 80073a0:	4619      	mov	r1, r3
 80073a2:	4603      	mov	r3, r0
 80073a4:	4642      	mov	r2, r8
 80073a6:	189b      	adds	r3, r3, r2
 80073a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073ac:	464b      	mov	r3, r9
 80073ae:	460a      	mov	r2, r1
 80073b0:	eb42 0303 	adc.w	r3, r2, r3
 80073b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073cc:	460b      	mov	r3, r1
 80073ce:	18db      	adds	r3, r3, r3
 80073d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80073d2:	4613      	mov	r3, r2
 80073d4:	eb42 0303 	adc.w	r3, r2, r3
 80073d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073e2:	f7f8 ff45 	bl	8000270 <__aeabi_uldivmod>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4b0d      	ldr	r3, [pc, #52]	; (8007420 <UART_SetConfig+0x2d4>)
 80073ec:	fba3 1302 	umull	r1, r3, r3, r2
 80073f0:	095b      	lsrs	r3, r3, #5
 80073f2:	2164      	movs	r1, #100	; 0x64
 80073f4:	fb01 f303 	mul.w	r3, r1, r3
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	00db      	lsls	r3, r3, #3
 80073fc:	3332      	adds	r3, #50	; 0x32
 80073fe:	4a08      	ldr	r2, [pc, #32]	; (8007420 <UART_SetConfig+0x2d4>)
 8007400:	fba2 2303 	umull	r2, r3, r2, r3
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	f003 0207 	and.w	r2, r3, #7
 800740a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4422      	add	r2, r4
 8007412:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007414:	e106      	b.n	8007624 <UART_SetConfig+0x4d8>
 8007416:	bf00      	nop
 8007418:	40011000 	.word	0x40011000
 800741c:	40011400 	.word	0x40011400
 8007420:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007428:	2200      	movs	r2, #0
 800742a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800742e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007432:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007436:	4642      	mov	r2, r8
 8007438:	464b      	mov	r3, r9
 800743a:	1891      	adds	r1, r2, r2
 800743c:	6239      	str	r1, [r7, #32]
 800743e:	415b      	adcs	r3, r3
 8007440:	627b      	str	r3, [r7, #36]	; 0x24
 8007442:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007446:	4641      	mov	r1, r8
 8007448:	1854      	adds	r4, r2, r1
 800744a:	4649      	mov	r1, r9
 800744c:	eb43 0501 	adc.w	r5, r3, r1
 8007450:	f04f 0200 	mov.w	r2, #0
 8007454:	f04f 0300 	mov.w	r3, #0
 8007458:	00eb      	lsls	r3, r5, #3
 800745a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800745e:	00e2      	lsls	r2, r4, #3
 8007460:	4614      	mov	r4, r2
 8007462:	461d      	mov	r5, r3
 8007464:	4643      	mov	r3, r8
 8007466:	18e3      	adds	r3, r4, r3
 8007468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800746c:	464b      	mov	r3, r9
 800746e:	eb45 0303 	adc.w	r3, r5, r3
 8007472:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007482:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007486:	f04f 0200 	mov.w	r2, #0
 800748a:	f04f 0300 	mov.w	r3, #0
 800748e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007492:	4629      	mov	r1, r5
 8007494:	008b      	lsls	r3, r1, #2
 8007496:	4621      	mov	r1, r4
 8007498:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800749c:	4621      	mov	r1, r4
 800749e:	008a      	lsls	r2, r1, #2
 80074a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80074a4:	f7f8 fee4 	bl	8000270 <__aeabi_uldivmod>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	4b60      	ldr	r3, [pc, #384]	; (8007630 <UART_SetConfig+0x4e4>)
 80074ae:	fba3 2302 	umull	r2, r3, r3, r2
 80074b2:	095b      	lsrs	r3, r3, #5
 80074b4:	011c      	lsls	r4, r3, #4
 80074b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074ba:	2200      	movs	r2, #0
 80074bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074c8:	4642      	mov	r2, r8
 80074ca:	464b      	mov	r3, r9
 80074cc:	1891      	adds	r1, r2, r2
 80074ce:	61b9      	str	r1, [r7, #24]
 80074d0:	415b      	adcs	r3, r3
 80074d2:	61fb      	str	r3, [r7, #28]
 80074d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074d8:	4641      	mov	r1, r8
 80074da:	1851      	adds	r1, r2, r1
 80074dc:	6139      	str	r1, [r7, #16]
 80074de:	4649      	mov	r1, r9
 80074e0:	414b      	adcs	r3, r1
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	f04f 0200 	mov.w	r2, #0
 80074e8:	f04f 0300 	mov.w	r3, #0
 80074ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074f0:	4659      	mov	r1, fp
 80074f2:	00cb      	lsls	r3, r1, #3
 80074f4:	4651      	mov	r1, sl
 80074f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074fa:	4651      	mov	r1, sl
 80074fc:	00ca      	lsls	r2, r1, #3
 80074fe:	4610      	mov	r0, r2
 8007500:	4619      	mov	r1, r3
 8007502:	4603      	mov	r3, r0
 8007504:	4642      	mov	r2, r8
 8007506:	189b      	adds	r3, r3, r2
 8007508:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800750c:	464b      	mov	r3, r9
 800750e:	460a      	mov	r2, r1
 8007510:	eb42 0303 	adc.w	r3, r2, r3
 8007514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	67bb      	str	r3, [r7, #120]	; 0x78
 8007522:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007524:	f04f 0200 	mov.w	r2, #0
 8007528:	f04f 0300 	mov.w	r3, #0
 800752c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007530:	4649      	mov	r1, r9
 8007532:	008b      	lsls	r3, r1, #2
 8007534:	4641      	mov	r1, r8
 8007536:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800753a:	4641      	mov	r1, r8
 800753c:	008a      	lsls	r2, r1, #2
 800753e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007542:	f7f8 fe95 	bl	8000270 <__aeabi_uldivmod>
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	4611      	mov	r1, r2
 800754c:	4b38      	ldr	r3, [pc, #224]	; (8007630 <UART_SetConfig+0x4e4>)
 800754e:	fba3 2301 	umull	r2, r3, r3, r1
 8007552:	095b      	lsrs	r3, r3, #5
 8007554:	2264      	movs	r2, #100	; 0x64
 8007556:	fb02 f303 	mul.w	r3, r2, r3
 800755a:	1acb      	subs	r3, r1, r3
 800755c:	011b      	lsls	r3, r3, #4
 800755e:	3332      	adds	r3, #50	; 0x32
 8007560:	4a33      	ldr	r2, [pc, #204]	; (8007630 <UART_SetConfig+0x4e4>)
 8007562:	fba2 2303 	umull	r2, r3, r2, r3
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800756c:	441c      	add	r4, r3
 800756e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007572:	2200      	movs	r2, #0
 8007574:	673b      	str	r3, [r7, #112]	; 0x70
 8007576:	677a      	str	r2, [r7, #116]	; 0x74
 8007578:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800757c:	4642      	mov	r2, r8
 800757e:	464b      	mov	r3, r9
 8007580:	1891      	adds	r1, r2, r2
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	415b      	adcs	r3, r3
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800758c:	4641      	mov	r1, r8
 800758e:	1851      	adds	r1, r2, r1
 8007590:	6039      	str	r1, [r7, #0]
 8007592:	4649      	mov	r1, r9
 8007594:	414b      	adcs	r3, r1
 8007596:	607b      	str	r3, [r7, #4]
 8007598:	f04f 0200 	mov.w	r2, #0
 800759c:	f04f 0300 	mov.w	r3, #0
 80075a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075a4:	4659      	mov	r1, fp
 80075a6:	00cb      	lsls	r3, r1, #3
 80075a8:	4651      	mov	r1, sl
 80075aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ae:	4651      	mov	r1, sl
 80075b0:	00ca      	lsls	r2, r1, #3
 80075b2:	4610      	mov	r0, r2
 80075b4:	4619      	mov	r1, r3
 80075b6:	4603      	mov	r3, r0
 80075b8:	4642      	mov	r2, r8
 80075ba:	189b      	adds	r3, r3, r2
 80075bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80075be:	464b      	mov	r3, r9
 80075c0:	460a      	mov	r2, r1
 80075c2:	eb42 0303 	adc.w	r3, r2, r3
 80075c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	663b      	str	r3, [r7, #96]	; 0x60
 80075d2:	667a      	str	r2, [r7, #100]	; 0x64
 80075d4:	f04f 0200 	mov.w	r2, #0
 80075d8:	f04f 0300 	mov.w	r3, #0
 80075dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80075e0:	4649      	mov	r1, r9
 80075e2:	008b      	lsls	r3, r1, #2
 80075e4:	4641      	mov	r1, r8
 80075e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075ea:	4641      	mov	r1, r8
 80075ec:	008a      	lsls	r2, r1, #2
 80075ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075f2:	f7f8 fe3d 	bl	8000270 <__aeabi_uldivmod>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	4b0d      	ldr	r3, [pc, #52]	; (8007630 <UART_SetConfig+0x4e4>)
 80075fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007600:	095b      	lsrs	r3, r3, #5
 8007602:	2164      	movs	r1, #100	; 0x64
 8007604:	fb01 f303 	mul.w	r3, r1, r3
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	011b      	lsls	r3, r3, #4
 800760c:	3332      	adds	r3, #50	; 0x32
 800760e:	4a08      	ldr	r2, [pc, #32]	; (8007630 <UART_SetConfig+0x4e4>)
 8007610:	fba2 2303 	umull	r2, r3, r2, r3
 8007614:	095b      	lsrs	r3, r3, #5
 8007616:	f003 020f 	and.w	r2, r3, #15
 800761a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4422      	add	r2, r4
 8007622:	609a      	str	r2, [r3, #8]
}
 8007624:	bf00      	nop
 8007626:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800762a:	46bd      	mov	sp, r7
 800762c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007630:	51eb851f 	.word	0x51eb851f

08007634 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007634:	b084      	sub	sp, #16
 8007636:	b480      	push	{r7}
 8007638:	b085      	sub	sp, #20
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	f107 001c 	add.w	r0, r7, #28
 8007642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800764a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800764c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800764e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007652:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007654:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007656:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800765a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800765e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800766e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	431a      	orrs	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	b004      	add	sp, #16
 8007688:	4770      	bx	lr

0800768a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2203      	movs	r2, #3
 80076d2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0303 	and.w	r3, r3, #3
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80076fe:	b480      	push	{r7}
 8007700:	b085      	sub	sp, #20
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800771c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007722:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007728:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4313      	orrs	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007738:	f023 030f 	bic.w	r3, r3, #15
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	431a      	orrs	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	b2db      	uxtb	r3, r3
}
 8007760:	4618      	mov	r0, r3
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3314      	adds	r3, #20
 800777a:	461a      	mov	r2, r3
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	4413      	add	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
}  
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007792:	b480      	push	{r7}
 8007794:	b085      	sub	sp, #20
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800779c:	2300      	movs	r3, #0
 800779e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80077b8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80077be:	431a      	orrs	r2, r3
                       Data->DPSM);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80077c4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	431a      	orrs	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0

}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b088      	sub	sp, #32
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80077f8:	2310      	movs	r3, #16
 80077fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077fc:	2340      	movs	r3, #64	; 0x40
 80077fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007800:	2300      	movs	r3, #0
 8007802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007808:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800780a:	f107 0308 	add.w	r3, r7, #8
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7ff ff74 	bl	80076fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007816:	f241 3288 	movw	r2, #5000	; 0x1388
 800781a:	2110      	movs	r1, #16
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f9d7 	bl	8007bd0 <SDMMC_GetCmdResp1>
 8007822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007824:	69fb      	ldr	r3, [r7, #28]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3720      	adds	r7, #32
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b088      	sub	sp, #32
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800783c:	2311      	movs	r3, #17
 800783e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007840:	2340      	movs	r3, #64	; 0x40
 8007842:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007844:	2300      	movs	r3, #0
 8007846:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800784c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800784e:	f107 0308 	add.w	r3, r7, #8
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7ff ff52 	bl	80076fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800785a:	f241 3288 	movw	r2, #5000	; 0x1388
 800785e:	2111      	movs	r1, #17
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f9b5 	bl	8007bd0 <SDMMC_GetCmdResp1>
 8007866:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007868:	69fb      	ldr	r3, [r7, #28]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3720      	adds	r7, #32
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b088      	sub	sp, #32
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007880:	2312      	movs	r3, #18
 8007882:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007884:	2340      	movs	r3, #64	; 0x40
 8007886:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007888:	2300      	movs	r3, #0
 800788a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800788c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007890:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007892:	f107 0308 	add.w	r3, r7, #8
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7ff ff30 	bl	80076fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800789e:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a2:	2112      	movs	r1, #18
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f993 	bl	8007bd0 <SDMMC_GetCmdResp1>
 80078aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078ac:	69fb      	ldr	r3, [r7, #28]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3720      	adds	r7, #32
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b088      	sub	sp, #32
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80078c4:	2318      	movs	r3, #24
 80078c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078c8:	2340      	movs	r3, #64	; 0x40
 80078ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078cc:	2300      	movs	r3, #0
 80078ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078d6:	f107 0308 	add.w	r3, r7, #8
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff ff0e 	bl	80076fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80078e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e6:	2118      	movs	r1, #24
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f971 	bl	8007bd0 <SDMMC_GetCmdResp1>
 80078ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078f0:	69fb      	ldr	r3, [r7, #28]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3720      	adds	r7, #32
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b088      	sub	sp, #32
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007908:	2319      	movs	r3, #25
 800790a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800790c:	2340      	movs	r3, #64	; 0x40
 800790e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007910:	2300      	movs	r3, #0
 8007912:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007918:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800791a:	f107 0308 	add.w	r3, r7, #8
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff feec 	bl	80076fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007926:	f241 3288 	movw	r2, #5000	; 0x1388
 800792a:	2119      	movs	r1, #25
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f94f 	bl	8007bd0 <SDMMC_GetCmdResp1>
 8007932:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007934:	69fb      	ldr	r3, [r7, #28]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3720      	adds	r7, #32
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800794c:	230c      	movs	r3, #12
 800794e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007950:	2340      	movs	r3, #64	; 0x40
 8007952:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007954:	2300      	movs	r3, #0
 8007956:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800795c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800795e:	f107 0308 	add.w	r3, r7, #8
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7ff feca 	bl	80076fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800796a:	4a05      	ldr	r2, [pc, #20]	; (8007980 <SDMMC_CmdStopTransfer+0x40>)
 800796c:	210c      	movs	r1, #12
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f92e 	bl	8007bd0 <SDMMC_GetCmdResp1>
 8007974:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007976:	69fb      	ldr	r3, [r7, #28]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3720      	adds	r7, #32
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	05f5e100 	.word	0x05f5e100

08007984 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b08a      	sub	sp, #40	; 0x28
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007994:	2307      	movs	r3, #7
 8007996:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007998:	2340      	movs	r3, #64	; 0x40
 800799a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800799c:	2300      	movs	r3, #0
 800799e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079a4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079a6:	f107 0310 	add.w	r3, r7, #16
 80079aa:	4619      	mov	r1, r3
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f7ff fea6 	bl	80076fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80079b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b6:	2107      	movs	r1, #7
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 f909 	bl	8007bd0 <SDMMC_GetCmdResp1>
 80079be:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3728      	adds	r7, #40	; 0x28
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b088      	sub	sp, #32
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80079d6:	2300      	movs	r3, #0
 80079d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80079da:	2300      	movs	r3, #0
 80079dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079de:	2300      	movs	r3, #0
 80079e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079e8:	f107 0308 	add.w	r3, r7, #8
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7ff fe85 	bl	80076fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fb23 	bl	8008040 <SDMMC_GetCmdError>
 80079fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079fc:	69fb      	ldr	r3, [r7, #28]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3720      	adds	r7, #32
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b088      	sub	sp, #32
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007a0e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007a12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007a14:	2308      	movs	r3, #8
 8007a16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a18:	2340      	movs	r3, #64	; 0x40
 8007a1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a26:	f107 0308 	add.w	r3, r7, #8
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff fe66 	bl	80076fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fab6 	bl	8007fa4 <SDMMC_GetCmdResp7>
 8007a38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a3a:	69fb      	ldr	r3, [r7, #28]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3720      	adds	r7, #32
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007a52:	2337      	movs	r3, #55	; 0x37
 8007a54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a56:	2340      	movs	r3, #64	; 0x40
 8007a58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a64:	f107 0308 	add.w	r3, r7, #8
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7ff fe47 	bl	80076fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a74:	2137      	movs	r1, #55	; 0x37
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f8aa 	bl	8007bd0 <SDMMC_GetCmdResp1>
 8007a7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a7e:	69fb      	ldr	r3, [r7, #28]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3720      	adds	r7, #32
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b088      	sub	sp, #32
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007a9e:	2329      	movs	r3, #41	; 0x29
 8007aa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007aa2:	2340      	movs	r3, #64	; 0x40
 8007aa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ab0:	f107 0308 	add.w	r3, r7, #8
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7ff fe21 	bl	80076fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f9bd 	bl	8007e3c <SDMMC_GetCmdResp3>
 8007ac2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ac4:	69fb      	ldr	r3, [r7, #28]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3720      	adds	r7, #32
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b088      	sub	sp, #32
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007ada:	2302      	movs	r3, #2
 8007adc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007ade:	23c0      	movs	r3, #192	; 0xc0
 8007ae0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007aec:	f107 0308 	add.w	r3, r7, #8
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7ff fe03 	bl	80076fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f957 	bl	8007dac <SDMMC_GetCmdResp2>
 8007afe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b00:	69fb      	ldr	r3, [r7, #28]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3720      	adds	r7, #32
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b088      	sub	sp, #32
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007b18:	2309      	movs	r3, #9
 8007b1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007b1c:	23c0      	movs	r3, #192	; 0xc0
 8007b1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b20:	2300      	movs	r3, #0
 8007b22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b2a:	f107 0308 	add.w	r3, r7, #8
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff fde4 	bl	80076fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f938 	bl	8007dac <SDMMC_GetCmdResp2>
 8007b3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b3e:	69fb      	ldr	r3, [r7, #28]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3720      	adds	r7, #32
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b088      	sub	sp, #32
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007b56:	2303      	movs	r3, #3
 8007b58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b5a:	2340      	movs	r3, #64	; 0x40
 8007b5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b68:	f107 0308 	add.w	r3, r7, #8
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7ff fdc5 	bl	80076fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	2103      	movs	r1, #3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f99d 	bl	8007eb8 <SDMMC_GetCmdResp6>
 8007b7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b80:	69fb      	ldr	r3, [r7, #28]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3720      	adds	r7, #32
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b088      	sub	sp, #32
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007b98:	230d      	movs	r3, #13
 8007b9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b9c:	2340      	movs	r3, #64	; 0x40
 8007b9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ba8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007baa:	f107 0308 	add.w	r3, r7, #8
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7ff fda4 	bl	80076fe <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bba:	210d      	movs	r1, #13
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f807 	bl	8007bd0 <SDMMC_GetCmdResp1>
 8007bc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3720      	adds	r7, #32
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b088      	sub	sp, #32
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007bde:	4b70      	ldr	r3, [pc, #448]	; (8007da0 <SDMMC_GetCmdResp1+0x1d0>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a70      	ldr	r2, [pc, #448]	; (8007da4 <SDMMC_GetCmdResp1+0x1d4>)
 8007be4:	fba2 2303 	umull	r2, r3, r2, r3
 8007be8:	0a5a      	lsrs	r2, r3, #9
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	fb02 f303 	mul.w	r3, r2, r3
 8007bf0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	1e5a      	subs	r2, r3, #1
 8007bf6:	61fa      	str	r2, [r7, #28]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d102      	bne.n	8007c02 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007bfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c00:	e0c9      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c06:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d0ef      	beq.n	8007bf2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1ea      	bne.n	8007bf2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d004      	beq.n	8007c32 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2204      	movs	r2, #4
 8007c2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c2e:	2304      	movs	r3, #4
 8007c30:	e0b1      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d004      	beq.n	8007c48 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2201      	movs	r2, #1
 8007c42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e0a6      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	22c5      	movs	r2, #197	; 0xc5
 8007c4c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f7ff fd7f 	bl	8007752 <SDIO_GetCommandResponse>
 8007c54:	4603      	mov	r3, r0
 8007c56:	461a      	mov	r2, r3
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d001      	beq.n	8007c62 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e099      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007c62:	2100      	movs	r1, #0
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f7ff fd81 	bl	800776c <SDIO_GetResponse>
 8007c6a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	4b4e      	ldr	r3, [pc, #312]	; (8007da8 <SDMMC_GetCmdResp1+0x1d8>)
 8007c70:	4013      	ands	r3, r2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007c76:	2300      	movs	r3, #0
 8007c78:	e08d      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	da02      	bge.n	8007c86 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007c80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c84:	e087      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007c90:	2340      	movs	r3, #64	; 0x40
 8007c92:	e080      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007c9e:	2380      	movs	r3, #128	; 0x80
 8007ca0:	e079      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cb0:	e071      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d002      	beq.n	8007cc2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cc0:	e069      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cd0:	e061      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d002      	beq.n	8007ce2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007cdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ce0:	e059      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cf0:	e051      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d00:	e049      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007d0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d10:	e041      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007d1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d20:	e039      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007d2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d30:	e031      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007d3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007d40:	e029      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007d4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d50:	e021      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007d5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007d60:	e019      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d002      	beq.n	8007d72 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007d6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d70:	e011      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d002      	beq.n	8007d82 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007d7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d80:	e009      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f003 0308 	and.w	r3, r3, #8
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007d8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007d90:	e001      	b.n	8007d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007d92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3720      	adds	r7, #32
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20000000 	.word	0x20000000
 8007da4:	10624dd3 	.word	0x10624dd3
 8007da8:	fdffe008 	.word	0xfdffe008

08007dac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007db4:	4b1f      	ldr	r3, [pc, #124]	; (8007e34 <SDMMC_GetCmdResp2+0x88>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a1f      	ldr	r2, [pc, #124]	; (8007e38 <SDMMC_GetCmdResp2+0x8c>)
 8007dba:	fba2 2303 	umull	r2, r3, r2, r3
 8007dbe:	0a5b      	lsrs	r3, r3, #9
 8007dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc4:	fb02 f303 	mul.w	r3, r2, r3
 8007dc8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	1e5a      	subs	r2, r3, #1
 8007dce:	60fa      	str	r2, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d102      	bne.n	8007dda <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007dd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007dd8:	e026      	b.n	8007e28 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dde:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0ef      	beq.n	8007dca <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1ea      	bne.n	8007dca <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df8:	f003 0304 	and.w	r3, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d004      	beq.n	8007e0a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2204      	movs	r2, #4
 8007e04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e06:	2304      	movs	r3, #4
 8007e08:	e00e      	b.n	8007e28 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d004      	beq.n	8007e20 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e003      	b.n	8007e28 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	22c5      	movs	r2, #197	; 0xc5
 8007e24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	20000000 	.word	0x20000000
 8007e38:	10624dd3 	.word	0x10624dd3

08007e3c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e44:	4b1a      	ldr	r3, [pc, #104]	; (8007eb0 <SDMMC_GetCmdResp3+0x74>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a1a      	ldr	r2, [pc, #104]	; (8007eb4 <SDMMC_GetCmdResp3+0x78>)
 8007e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4e:	0a5b      	lsrs	r3, r3, #9
 8007e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e54:	fb02 f303 	mul.w	r3, r2, r3
 8007e58:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	1e5a      	subs	r2, r3, #1
 8007e5e:	60fa      	str	r2, [r7, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d102      	bne.n	8007e6a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e68:	e01b      	b.n	8007ea2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0ef      	beq.n	8007e5a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1ea      	bne.n	8007e5a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2204      	movs	r2, #4
 8007e94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e96:	2304      	movs	r3, #4
 8007e98:	e003      	b.n	8007ea2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	22c5      	movs	r2, #197	; 0xc5
 8007e9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	20000000 	.word	0x20000000
 8007eb4:	10624dd3 	.word	0x10624dd3

08007eb8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b088      	sub	sp, #32
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	607a      	str	r2, [r7, #4]
 8007ec4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ec6:	4b35      	ldr	r3, [pc, #212]	; (8007f9c <SDMMC_GetCmdResp6+0xe4>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a35      	ldr	r2, [pc, #212]	; (8007fa0 <SDMMC_GetCmdResp6+0xe8>)
 8007ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed0:	0a5b      	lsrs	r3, r3, #9
 8007ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed6:	fb02 f303 	mul.w	r3, r2, r3
 8007eda:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	1e5a      	subs	r2, r3, #1
 8007ee0:	61fa      	str	r2, [r7, #28]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d102      	bne.n	8007eec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ee6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007eea:	e052      	b.n	8007f92 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0ef      	beq.n	8007edc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1ea      	bne.n	8007edc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0a:	f003 0304 	and.w	r3, r3, #4
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d004      	beq.n	8007f1c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2204      	movs	r2, #4
 8007f16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f18:	2304      	movs	r3, #4
 8007f1a:	e03a      	b.n	8007f92 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f20:	f003 0301 	and.w	r3, r3, #1
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d004      	beq.n	8007f32 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e02f      	b.n	8007f92 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f7ff fc0d 	bl	8007752 <SDIO_GetCommandResponse>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	7afb      	ldrb	r3, [r7, #11]
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d001      	beq.n	8007f46 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e025      	b.n	8007f92 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	22c5      	movs	r2, #197	; 0xc5
 8007f4a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f7ff fc0c 	bl	800776c <SDIO_GetResponse>
 8007f54:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d106      	bne.n	8007f6e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	0c1b      	lsrs	r3, r3, #16
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	e011      	b.n	8007f92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f7c:	e009      	b.n	8007f92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f8c:	e001      	b.n	8007f92 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007f8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3720      	adds	r7, #32
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20000000 	.word	0x20000000
 8007fa0:	10624dd3 	.word	0x10624dd3

08007fa4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fac:	4b22      	ldr	r3, [pc, #136]	; (8008038 <SDMMC_GetCmdResp7+0x94>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a22      	ldr	r2, [pc, #136]	; (800803c <SDMMC_GetCmdResp7+0x98>)
 8007fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb6:	0a5b      	lsrs	r3, r3, #9
 8007fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fbc:	fb02 f303 	mul.w	r3, r2, r3
 8007fc0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	1e5a      	subs	r2, r3, #1
 8007fc6:	60fa      	str	r2, [r7, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d102      	bne.n	8007fd2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007fcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fd0:	e02c      	b.n	800802c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0ef      	beq.n	8007fc2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1ea      	bne.n	8007fc2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d004      	beq.n	8008002 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2204      	movs	r2, #4
 8007ffc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ffe:	2304      	movs	r3, #4
 8008000:	e014      	b.n	800802c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b00      	cmp	r3, #0
 800800c:	d004      	beq.n	8008018 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008014:	2301      	movs	r3, #1
 8008016:	e009      	b.n	800802c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2240      	movs	r2, #64	; 0x40
 8008028:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800802a:	2300      	movs	r3, #0
  
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	20000000 	.word	0x20000000
 800803c:	10624dd3 	.word	0x10624dd3

08008040 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008048:	4b11      	ldr	r3, [pc, #68]	; (8008090 <SDMMC_GetCmdError+0x50>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a11      	ldr	r2, [pc, #68]	; (8008094 <SDMMC_GetCmdError+0x54>)
 800804e:	fba2 2303 	umull	r2, r3, r2, r3
 8008052:	0a5b      	lsrs	r3, r3, #9
 8008054:	f241 3288 	movw	r2, #5000	; 0x1388
 8008058:	fb02 f303 	mul.w	r3, r2, r3
 800805c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	1e5a      	subs	r2, r3, #1
 8008062:	60fa      	str	r2, [r7, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d102      	bne.n	800806e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008068:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800806c:	e009      	b.n	8008082 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008076:	2b00      	cmp	r3, #0
 8008078:	d0f1      	beq.n	800805e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	22c5      	movs	r2, #197	; 0xc5
 800807e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	20000000 	.word	0x20000000
 8008094:	10624dd3 	.word	0x10624dd3

08008098 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008098:	b084      	sub	sp, #16
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	f107 001c 	add.w	r0, r7, #28
 80080a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d123      	bne.n	80080fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80080c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d105      	bne.n	80080ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f001 fae2 	bl	80096b8 <USB_CoreReset>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]
 80080f8:	e01b      	b.n	8008132 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 fad6 	bl	80096b8 <USB_CoreReset>
 800810c:	4603      	mov	r3, r0
 800810e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008110:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008114:	2b00      	cmp	r3, #0
 8008116:	d106      	bne.n	8008126 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	639a      	str	r2, [r3, #56]	; 0x38
 8008124:	e005      	b.n	8008132 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008132:	7fbb      	ldrb	r3, [r7, #30]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d10b      	bne.n	8008150 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f043 0206 	orr.w	r2, r3, #6
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f043 0220 	orr.w	r2, r3, #32
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008150:	7bfb      	ldrb	r3, [r7, #15]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800815c:	b004      	add	sp, #16
 800815e:	4770      	bx	lr

08008160 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008160:	b480      	push	{r7}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	4613      	mov	r3, r2
 800816c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800816e:	79fb      	ldrb	r3, [r7, #7]
 8008170:	2b02      	cmp	r3, #2
 8008172:	d165      	bne.n	8008240 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	4a41      	ldr	r2, [pc, #260]	; (800827c <USB_SetTurnaroundTime+0x11c>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d906      	bls.n	800818a <USB_SetTurnaroundTime+0x2a>
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	4a40      	ldr	r2, [pc, #256]	; (8008280 <USB_SetTurnaroundTime+0x120>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d202      	bcs.n	800818a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008184:	230f      	movs	r3, #15
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	e062      	b.n	8008250 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	4a3c      	ldr	r2, [pc, #240]	; (8008280 <USB_SetTurnaroundTime+0x120>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d306      	bcc.n	80081a0 <USB_SetTurnaroundTime+0x40>
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	4a3b      	ldr	r2, [pc, #236]	; (8008284 <USB_SetTurnaroundTime+0x124>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d202      	bcs.n	80081a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800819a:	230e      	movs	r3, #14
 800819c:	617b      	str	r3, [r7, #20]
 800819e:	e057      	b.n	8008250 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	4a38      	ldr	r2, [pc, #224]	; (8008284 <USB_SetTurnaroundTime+0x124>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d306      	bcc.n	80081b6 <USB_SetTurnaroundTime+0x56>
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	4a37      	ldr	r2, [pc, #220]	; (8008288 <USB_SetTurnaroundTime+0x128>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d202      	bcs.n	80081b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80081b0:	230d      	movs	r3, #13
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	e04c      	b.n	8008250 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	4a33      	ldr	r2, [pc, #204]	; (8008288 <USB_SetTurnaroundTime+0x128>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d306      	bcc.n	80081cc <USB_SetTurnaroundTime+0x6c>
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	4a32      	ldr	r2, [pc, #200]	; (800828c <USB_SetTurnaroundTime+0x12c>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d802      	bhi.n	80081cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80081c6:	230c      	movs	r3, #12
 80081c8:	617b      	str	r3, [r7, #20]
 80081ca:	e041      	b.n	8008250 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	4a2f      	ldr	r2, [pc, #188]	; (800828c <USB_SetTurnaroundTime+0x12c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d906      	bls.n	80081e2 <USB_SetTurnaroundTime+0x82>
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	4a2e      	ldr	r2, [pc, #184]	; (8008290 <USB_SetTurnaroundTime+0x130>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d802      	bhi.n	80081e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80081dc:	230b      	movs	r3, #11
 80081de:	617b      	str	r3, [r7, #20]
 80081e0:	e036      	b.n	8008250 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	4a2a      	ldr	r2, [pc, #168]	; (8008290 <USB_SetTurnaroundTime+0x130>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d906      	bls.n	80081f8 <USB_SetTurnaroundTime+0x98>
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	4a29      	ldr	r2, [pc, #164]	; (8008294 <USB_SetTurnaroundTime+0x134>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d802      	bhi.n	80081f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80081f2:	230a      	movs	r3, #10
 80081f4:	617b      	str	r3, [r7, #20]
 80081f6:	e02b      	b.n	8008250 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	4a26      	ldr	r2, [pc, #152]	; (8008294 <USB_SetTurnaroundTime+0x134>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d906      	bls.n	800820e <USB_SetTurnaroundTime+0xae>
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	4a25      	ldr	r2, [pc, #148]	; (8008298 <USB_SetTurnaroundTime+0x138>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d202      	bcs.n	800820e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008208:	2309      	movs	r3, #9
 800820a:	617b      	str	r3, [r7, #20]
 800820c:	e020      	b.n	8008250 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	4a21      	ldr	r2, [pc, #132]	; (8008298 <USB_SetTurnaroundTime+0x138>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d306      	bcc.n	8008224 <USB_SetTurnaroundTime+0xc4>
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	4a20      	ldr	r2, [pc, #128]	; (800829c <USB_SetTurnaroundTime+0x13c>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d802      	bhi.n	8008224 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800821e:	2308      	movs	r3, #8
 8008220:	617b      	str	r3, [r7, #20]
 8008222:	e015      	b.n	8008250 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4a1d      	ldr	r2, [pc, #116]	; (800829c <USB_SetTurnaroundTime+0x13c>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d906      	bls.n	800823a <USB_SetTurnaroundTime+0xda>
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	4a1c      	ldr	r2, [pc, #112]	; (80082a0 <USB_SetTurnaroundTime+0x140>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d202      	bcs.n	800823a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008234:	2307      	movs	r3, #7
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	e00a      	b.n	8008250 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800823a:	2306      	movs	r3, #6
 800823c:	617b      	str	r3, [r7, #20]
 800823e:	e007      	b.n	8008250 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008240:	79fb      	ldrb	r3, [r7, #7]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d102      	bne.n	800824c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008246:	2309      	movs	r3, #9
 8008248:	617b      	str	r3, [r7, #20]
 800824a:	e001      	b.n	8008250 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800824c:	2309      	movs	r3, #9
 800824e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	029b      	lsls	r3, r3, #10
 8008264:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008268:	431a      	orrs	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	371c      	adds	r7, #28
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	00d8acbf 	.word	0x00d8acbf
 8008280:	00e4e1c0 	.word	0x00e4e1c0
 8008284:	00f42400 	.word	0x00f42400
 8008288:	01067380 	.word	0x01067380
 800828c:	011a499f 	.word	0x011a499f
 8008290:	01312cff 	.word	0x01312cff
 8008294:	014ca43f 	.word	0x014ca43f
 8008298:	016e3600 	.word	0x016e3600
 800829c:	01a6ab1f 	.word	0x01a6ab1f
 80082a0:	01e84800 	.word	0x01e84800

080082a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	f043 0201 	orr.w	r2, r3, #1
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082c6:	b480      	push	{r7}
 80082c8:	b083      	sub	sp, #12
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f023 0201 	bic.w	r2, r3, #1
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082f4:	2300      	movs	r3, #0
 80082f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d115      	bne.n	8008336 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008316:	200a      	movs	r0, #10
 8008318:	f7f8 ff78 	bl	800120c <HAL_Delay>
      ms += 10U;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	330a      	adds	r3, #10
 8008320:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f001 f939 	bl	800959a <USB_GetMode>
 8008328:	4603      	mov	r3, r0
 800832a:	2b01      	cmp	r3, #1
 800832c:	d01e      	beq.n	800836c <USB_SetCurrentMode+0x84>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2bc7      	cmp	r3, #199	; 0xc7
 8008332:	d9f0      	bls.n	8008316 <USB_SetCurrentMode+0x2e>
 8008334:	e01a      	b.n	800836c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d115      	bne.n	8008368 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008348:	200a      	movs	r0, #10
 800834a:	f7f8 ff5f 	bl	800120c <HAL_Delay>
      ms += 10U;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	330a      	adds	r3, #10
 8008352:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 f920 	bl	800959a <USB_GetMode>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d005      	beq.n	800836c <USB_SetCurrentMode+0x84>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2bc7      	cmp	r3, #199	; 0xc7
 8008364:	d9f0      	bls.n	8008348 <USB_SetCurrentMode+0x60>
 8008366:	e001      	b.n	800836c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e005      	b.n	8008378 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2bc8      	cmp	r3, #200	; 0xc8
 8008370:	d101      	bne.n	8008376 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e000      	b.n	8008378 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008380:	b084      	sub	sp, #16
 8008382:	b580      	push	{r7, lr}
 8008384:	b086      	sub	sp, #24
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800838e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800839a:	2300      	movs	r3, #0
 800839c:	613b      	str	r3, [r7, #16]
 800839e:	e009      	b.n	80083b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	3340      	adds	r3, #64	; 0x40
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	2200      	movs	r2, #0
 80083ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	3301      	adds	r3, #1
 80083b2:	613b      	str	r3, [r7, #16]
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	2b0e      	cmp	r3, #14
 80083b8:	d9f2      	bls.n	80083a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80083ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d11c      	bne.n	80083fc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083d0:	f043 0302 	orr.w	r3, r3, #2
 80083d4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	639a      	str	r2, [r3, #56]	; 0x38
 80083fa:	e00b      	b.n	8008414 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008400:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800841a:	461a      	mov	r2, r3
 800841c:	2300      	movs	r3, #0
 800841e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008420:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008424:	2b01      	cmp	r3, #1
 8008426:	d10d      	bne.n	8008444 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800842c:	2b00      	cmp	r3, #0
 800842e:	d104      	bne.n	800843a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008430:	2100      	movs	r1, #0
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f968 	bl	8008708 <USB_SetDevSpeed>
 8008438:	e008      	b.n	800844c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800843a:	2101      	movs	r1, #1
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f963 	bl	8008708 <USB_SetDevSpeed>
 8008442:	e003      	b.n	800844c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008444:	2103      	movs	r1, #3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f95e 	bl	8008708 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800844c:	2110      	movs	r1, #16
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f8fa 	bl	8008648 <USB_FlushTxFifo>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f924 	bl	80086ac <USB_FlushRxFifo>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008474:	461a      	mov	r2, r3
 8008476:	2300      	movs	r3, #0
 8008478:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008480:	461a      	mov	r2, r3
 8008482:	2300      	movs	r3, #0
 8008484:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800848c:	461a      	mov	r2, r3
 800848e:	2300      	movs	r3, #0
 8008490:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008492:	2300      	movs	r3, #0
 8008494:	613b      	str	r3, [r7, #16]
 8008496:	e043      	b.n	8008520 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084ae:	d118      	bne.n	80084e2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10a      	bne.n	80084cc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c2:	461a      	mov	r2, r3
 80084c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084c8:	6013      	str	r3, [r2, #0]
 80084ca:	e013      	b.n	80084f4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d8:	461a      	mov	r2, r3
 80084da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084de:	6013      	str	r3, [r2, #0]
 80084e0:	e008      	b.n	80084f4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	015a      	lsls	r2, r3, #5
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	4413      	add	r3, r2
 80084ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ee:	461a      	mov	r2, r3
 80084f0:	2300      	movs	r3, #0
 80084f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008500:	461a      	mov	r2, r3
 8008502:	2300      	movs	r3, #0
 8008504:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008512:	461a      	mov	r2, r3
 8008514:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008518:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	3301      	adds	r3, #1
 800851e:	613b      	str	r3, [r7, #16]
 8008520:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008524:	461a      	mov	r2, r3
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	4293      	cmp	r3, r2
 800852a:	d3b5      	bcc.n	8008498 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800852c:	2300      	movs	r3, #0
 800852e:	613b      	str	r3, [r7, #16]
 8008530:	e043      	b.n	80085ba <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4413      	add	r3, r2
 800853a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008544:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008548:	d118      	bne.n	800857c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10a      	bne.n	8008566 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855c:	461a      	mov	r2, r3
 800855e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	e013      	b.n	800858e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	4413      	add	r3, r2
 800856e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008572:	461a      	mov	r2, r3
 8008574:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008578:	6013      	str	r3, [r2, #0]
 800857a:	e008      	b.n	800858e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	4413      	add	r3, r2
 8008584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008588:	461a      	mov	r2, r3
 800858a:	2300      	movs	r3, #0
 800858c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	015a      	lsls	r2, r3, #5
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	4413      	add	r3, r2
 8008596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800859a:	461a      	mov	r2, r3
 800859c:	2300      	movs	r3, #0
 800859e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ac:	461a      	mov	r2, r3
 80085ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	3301      	adds	r3, #1
 80085b8:	613b      	str	r3, [r7, #16]
 80085ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80085be:	461a      	mov	r2, r3
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d3b5      	bcc.n	8008532 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80085e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d105      	bne.n	80085fc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	f043 0210 	orr.w	r2, r3, #16
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	699a      	ldr	r2, [r3, #24]
 8008600:	4b10      	ldr	r3, [pc, #64]	; (8008644 <USB_DevInit+0x2c4>)
 8008602:	4313      	orrs	r3, r2
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008608:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800860c:	2b00      	cmp	r3, #0
 800860e:	d005      	beq.n	800861c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	f043 0208 	orr.w	r2, r3, #8
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800861c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008620:	2b01      	cmp	r3, #1
 8008622:	d107      	bne.n	8008634 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800862c:	f043 0304 	orr.w	r3, r3, #4
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008634:	7dfb      	ldrb	r3, [r7, #23]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008640:	b004      	add	sp, #16
 8008642:	4770      	bx	lr
 8008644:	803c3800 	.word	0x803c3800

08008648 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008652:	2300      	movs	r3, #0
 8008654:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	3301      	adds	r3, #1
 800865a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008662:	d901      	bls.n	8008668 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e01b      	b.n	80086a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	daf2      	bge.n	8008656 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008670:	2300      	movs	r3, #0
 8008672:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	019b      	lsls	r3, r3, #6
 8008678:	f043 0220 	orr.w	r2, r3, #32
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3301      	adds	r3, #1
 8008684:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800868c:	d901      	bls.n	8008692 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e006      	b.n	80086a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	f003 0320 	and.w	r3, r3, #32
 800869a:	2b20      	cmp	r3, #32
 800869c:	d0f0      	beq.n	8008680 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086b4:	2300      	movs	r3, #0
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3301      	adds	r3, #1
 80086bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80086c4:	d901      	bls.n	80086ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e018      	b.n	80086fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	daf2      	bge.n	80086b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2210      	movs	r2, #16
 80086da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3301      	adds	r3, #1
 80086e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80086e8:	d901      	bls.n	80086ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e006      	b.n	80086fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	f003 0310 	and.w	r3, r3, #16
 80086f6:	2b10      	cmp	r3, #16
 80086f8:	d0f0      	beq.n	80086dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	68f9      	ldr	r1, [r7, #12]
 8008724:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008728:	4313      	orrs	r3, r2
 800872a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800873a:	b480      	push	{r7}
 800873c:	b087      	sub	sp, #28
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	f003 0306 	and.w	r3, r3, #6
 8008752:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d102      	bne.n	8008760 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800875a:	2300      	movs	r3, #0
 800875c:	75fb      	strb	r3, [r7, #23]
 800875e:	e00a      	b.n	8008776 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2b02      	cmp	r3, #2
 8008764:	d002      	beq.n	800876c <USB_GetDevSpeed+0x32>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2b06      	cmp	r3, #6
 800876a:	d102      	bne.n	8008772 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800876c:	2302      	movs	r3, #2
 800876e:	75fb      	strb	r3, [r7, #23]
 8008770:	e001      	b.n	8008776 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008772:	230f      	movs	r3, #15
 8008774:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008776:	7dfb      	ldrb	r3, [r7, #23]
}
 8008778:	4618      	mov	r0, r3
 800877a:	371c      	adds	r7, #28
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	785b      	ldrb	r3, [r3, #1]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d13a      	bne.n	8008816 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a6:	69da      	ldr	r2, [r3, #28]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	f003 030f 	and.w	r3, r3, #15
 80087b0:	2101      	movs	r1, #1
 80087b2:	fa01 f303 	lsl.w	r3, r1, r3
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	68f9      	ldr	r1, [r7, #12]
 80087ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087be:	4313      	orrs	r3, r2
 80087c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	015a      	lsls	r2, r3, #5
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d155      	bne.n	8008884 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	791b      	ldrb	r3, [r3, #4]
 80087f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	059b      	lsls	r3, r3, #22
 80087fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087fc:	4313      	orrs	r3, r2
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	0151      	lsls	r1, r2, #5
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	440a      	add	r2, r1
 8008806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800880a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800880e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	e036      	b.n	8008884 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800881c:	69da      	ldr	r2, [r3, #28]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	f003 030f 	and.w	r3, r3, #15
 8008826:	2101      	movs	r1, #1
 8008828:	fa01 f303 	lsl.w	r3, r1, r3
 800882c:	041b      	lsls	r3, r3, #16
 800882e:	68f9      	ldr	r1, [r7, #12]
 8008830:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008834:	4313      	orrs	r3, r2
 8008836:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4413      	add	r3, r2
 8008840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d11a      	bne.n	8008884 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	4413      	add	r3, r2
 8008856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	791b      	ldrb	r3, [r3, #4]
 8008868:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800886a:	430b      	orrs	r3, r1
 800886c:	4313      	orrs	r3, r2
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	0151      	lsls	r1, r2, #5
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	440a      	add	r2, r1
 8008876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800887a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800887e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008882:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
	...

08008894 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	785b      	ldrb	r3, [r3, #1]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d161      	bne.n	8008974 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088c6:	d11f      	bne.n	8008908 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	0151      	lsls	r1, r2, #5
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	440a      	add	r2, r1
 80088de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	0151      	lsls	r1, r2, #5
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	440a      	add	r2, r1
 80088fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008902:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008906:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800890e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	f003 030f 	and.w	r3, r3, #15
 8008918:	2101      	movs	r1, #1
 800891a:	fa01 f303 	lsl.w	r3, r1, r3
 800891e:	b29b      	uxth	r3, r3
 8008920:	43db      	mvns	r3, r3
 8008922:	68f9      	ldr	r1, [r7, #12]
 8008924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008928:	4013      	ands	r3, r2
 800892a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008932:	69da      	ldr	r2, [r3, #28]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	f003 030f 	and.w	r3, r3, #15
 800893c:	2101      	movs	r1, #1
 800893e:	fa01 f303 	lsl.w	r3, r1, r3
 8008942:	b29b      	uxth	r3, r3
 8008944:	43db      	mvns	r3, r3
 8008946:	68f9      	ldr	r1, [r7, #12]
 8008948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800894c:	4013      	ands	r3, r2
 800894e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	0159      	lsls	r1, r3, #5
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	440b      	add	r3, r1
 8008966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800896a:	4619      	mov	r1, r3
 800896c:	4b35      	ldr	r3, [pc, #212]	; (8008a44 <USB_DeactivateEndpoint+0x1b0>)
 800896e:	4013      	ands	r3, r2
 8008970:	600b      	str	r3, [r1, #0]
 8008972:	e060      	b.n	8008a36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	015a      	lsls	r2, r3, #5
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4413      	add	r3, r2
 800897c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800898a:	d11f      	bne.n	80089cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	0151      	lsls	r1, r2, #5
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	440a      	add	r2, r1
 80089a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	0151      	lsls	r1, r2, #5
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	440a      	add	r2, r1
 80089c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	f003 030f 	and.w	r3, r3, #15
 80089dc:	2101      	movs	r1, #1
 80089de:	fa01 f303 	lsl.w	r3, r1, r3
 80089e2:	041b      	lsls	r3, r3, #16
 80089e4:	43db      	mvns	r3, r3
 80089e6:	68f9      	ldr	r1, [r7, #12]
 80089e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089ec:	4013      	ands	r3, r2
 80089ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f6:	69da      	ldr	r2, [r3, #28]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	f003 030f 	and.w	r3, r3, #15
 8008a00:	2101      	movs	r1, #1
 8008a02:	fa01 f303 	lsl.w	r3, r1, r3
 8008a06:	041b      	lsls	r3, r3, #16
 8008a08:	43db      	mvns	r3, r3
 8008a0a:	68f9      	ldr	r1, [r7, #12]
 8008a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a10:	4013      	ands	r3, r2
 8008a12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	0159      	lsls	r1, r3, #5
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	440b      	add	r3, r1
 8008a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4b05      	ldr	r3, [pc, #20]	; (8008a48 <USB_DeactivateEndpoint+0x1b4>)
 8008a32:	4013      	ands	r3, r2
 8008a34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	ec337800 	.word	0xec337800
 8008a48:	eff37800 	.word	0xeff37800

08008a4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b08a      	sub	sp, #40	; 0x28
 8008a50:	af02      	add	r7, sp, #8
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	4613      	mov	r3, r2
 8008a58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	785b      	ldrb	r3, [r3, #1]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	f040 817a 	bne.w	8008d62 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d132      	bne.n	8008adc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	015a      	lsls	r2, r3, #5
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	69ba      	ldr	r2, [r7, #24]
 8008a86:	0151      	lsls	r1, r2, #5
 8008a88:	69fa      	ldr	r2, [r7, #28]
 8008a8a:	440a      	add	r2, r1
 8008a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	015a      	lsls	r2, r3, #5
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	0151      	lsls	r1, r2, #5
 8008aac:	69fa      	ldr	r2, [r7, #28]
 8008aae:	440a      	add	r2, r1
 8008ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ab8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	0151      	lsls	r1, r2, #5
 8008acc:	69fa      	ldr	r2, [r7, #28]
 8008ace:	440a      	add	r2, r1
 8008ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad4:	0cdb      	lsrs	r3, r3, #19
 8008ad6:	04db      	lsls	r3, r3, #19
 8008ad8:	6113      	str	r3, [r2, #16]
 8008ada:	e092      	b.n	8008c02 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	015a      	lsls	r2, r3, #5
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	0151      	lsls	r1, r2, #5
 8008aee:	69fa      	ldr	r2, [r7, #28]
 8008af0:	440a      	add	r2, r1
 8008af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af6:	0cdb      	lsrs	r3, r3, #19
 8008af8:	04db      	lsls	r3, r3, #19
 8008afa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	0151      	lsls	r1, r2, #5
 8008b0e:	69fa      	ldr	r2, [r7, #28]
 8008b10:	440a      	add	r2, r1
 8008b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b1e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d11a      	bne.n	8008b5c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	691a      	ldr	r2, [r3, #16]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d903      	bls.n	8008b3a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	689a      	ldr	r2, [r3, #8]
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	0151      	lsls	r1, r2, #5
 8008b4c:	69fa      	ldr	r2, [r7, #28]
 8008b4e:	440a      	add	r2, r1
 8008b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b58:	6113      	str	r3, [r2, #16]
 8008b5a:	e01b      	b.n	8008b94 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	015a      	lsls	r2, r3, #5
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	4413      	add	r3, r2
 8008b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b68:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	6919      	ldr	r1, [r3, #16]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	440b      	add	r3, r1
 8008b74:	1e59      	subs	r1, r3, #1
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b7e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008b80:	4ba2      	ldr	r3, [pc, #648]	; (8008e0c <USB_EPStartXfer+0x3c0>)
 8008b82:	400b      	ands	r3, r1
 8008b84:	69b9      	ldr	r1, [r7, #24]
 8008b86:	0148      	lsls	r0, r1, #5
 8008b88:	69f9      	ldr	r1, [r7, #28]
 8008b8a:	4401      	add	r1, r0
 8008b8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b90:	4313      	orrs	r3, r2
 8008b92:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba0:	691a      	ldr	r2, [r3, #16]
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008baa:	69b9      	ldr	r1, [r7, #24]
 8008bac:	0148      	lsls	r0, r1, #5
 8008bae:	69f9      	ldr	r1, [r7, #28]
 8008bb0:	4401      	add	r1, r0
 8008bb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	791b      	ldrb	r3, [r3, #4]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d11f      	bne.n	8008c02 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	015a      	lsls	r2, r3, #5
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	0151      	lsls	r1, r2, #5
 8008bd4:	69fa      	ldr	r2, [r7, #28]
 8008bd6:	440a      	add	r2, r1
 8008bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bdc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008be0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	015a      	lsls	r2, r3, #5
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	4413      	add	r3, r2
 8008bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	0151      	lsls	r1, r2, #5
 8008bf4:	69fa      	ldr	r2, [r7, #28]
 8008bf6:	440a      	add	r2, r1
 8008bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008c02:	79fb      	ldrb	r3, [r7, #7]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d14b      	bne.n	8008ca0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	69db      	ldr	r3, [r3, #28]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d009      	beq.n	8008c24 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	015a      	lsls	r2, r3, #5
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	4413      	add	r3, r2
 8008c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	791b      	ldrb	r3, [r3, #4]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d128      	bne.n	8008c7e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d110      	bne.n	8008c5e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	015a      	lsls	r2, r3, #5
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	4413      	add	r3, r2
 8008c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	0151      	lsls	r1, r2, #5
 8008c4e:	69fa      	ldr	r2, [r7, #28]
 8008c50:	440a      	add	r2, r1
 8008c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c5a:	6013      	str	r3, [r2, #0]
 8008c5c:	e00f      	b.n	8008c7e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	015a      	lsls	r2, r3, #5
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	0151      	lsls	r1, r2, #5
 8008c70:	69fa      	ldr	r2, [r7, #28]
 8008c72:	440a      	add	r2, r1
 8008c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	0151      	lsls	r1, r2, #5
 8008c90:	69fa      	ldr	r2, [r7, #28]
 8008c92:	440a      	add	r2, r1
 8008c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c9c:	6013      	str	r3, [r2, #0]
 8008c9e:	e165      	b.n	8008f6c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	0151      	lsls	r1, r2, #5
 8008cb2:	69fa      	ldr	r2, [r7, #28]
 8008cb4:	440a      	add	r2, r1
 8008cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008cbe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	791b      	ldrb	r3, [r3, #4]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d015      	beq.n	8008cf4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 814d 	beq.w	8008f6c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	f003 030f 	and.w	r3, r3, #15
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce8:	69f9      	ldr	r1, [r7, #28]
 8008cea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	634b      	str	r3, [r1, #52]	; 0x34
 8008cf2:	e13b      	b.n	8008f6c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d110      	bne.n	8008d26 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	0151      	lsls	r1, r2, #5
 8008d16:	69fa      	ldr	r2, [r7, #28]
 8008d18:	440a      	add	r2, r1
 8008d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d22:	6013      	str	r3, [r2, #0]
 8008d24:	e00f      	b.n	8008d46 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	015a      	lsls	r2, r3, #5
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	0151      	lsls	r1, r2, #5
 8008d38:	69fa      	ldr	r2, [r7, #28]
 8008d3a:	440a      	add	r2, r1
 8008d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	68d9      	ldr	r1, [r3, #12]
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	781a      	ldrb	r2, [r3, #0]
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	b298      	uxth	r0, r3
 8008d54:	79fb      	ldrb	r3, [r7, #7]
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	4603      	mov	r3, r0
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f000 f9b8 	bl	80090d0 <USB_WritePacket>
 8008d60:	e104      	b.n	8008f6c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	015a      	lsls	r2, r3, #5
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	4413      	add	r3, r2
 8008d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	0151      	lsls	r1, r2, #5
 8008d74:	69fa      	ldr	r2, [r7, #28]
 8008d76:	440a      	add	r2, r1
 8008d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d7c:	0cdb      	lsrs	r3, r3, #19
 8008d7e:	04db      	lsls	r3, r3, #19
 8008d80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	015a      	lsls	r2, r3, #5
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	4413      	add	r3, r2
 8008d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	0151      	lsls	r1, r2, #5
 8008d94:	69fa      	ldr	r2, [r7, #28]
 8008d96:	440a      	add	r2, r1
 8008d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008da0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008da4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d131      	bne.n	8008e10 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	689a      	ldr	r2, [r3, #8]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	689a      	ldr	r2, [r3, #8]
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd0:	691a      	ldr	r2, [r3, #16]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dda:	69b9      	ldr	r1, [r7, #24]
 8008ddc:	0148      	lsls	r0, r1, #5
 8008dde:	69f9      	ldr	r1, [r7, #28]
 8008de0:	4401      	add	r1, r0
 8008de2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008de6:	4313      	orrs	r3, r2
 8008de8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	015a      	lsls	r2, r3, #5
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	4413      	add	r3, r2
 8008df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	0151      	lsls	r1, r2, #5
 8008dfc:	69fa      	ldr	r2, [r7, #28]
 8008dfe:	440a      	add	r2, r1
 8008e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e08:	6113      	str	r3, [r2, #16]
 8008e0a:	e061      	b.n	8008ed0 <USB_EPStartXfer+0x484>
 8008e0c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d123      	bne.n	8008e60 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e24:	691a      	ldr	r2, [r3, #16]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e2e:	69b9      	ldr	r1, [r7, #24]
 8008e30:	0148      	lsls	r0, r1, #5
 8008e32:	69f9      	ldr	r1, [r7, #28]
 8008e34:	4401      	add	r1, r0
 8008e36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	015a      	lsls	r2, r3, #5
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	4413      	add	r3, r2
 8008e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	0151      	lsls	r1, r2, #5
 8008e50:	69fa      	ldr	r2, [r7, #28]
 8008e52:	440a      	add	r2, r1
 8008e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e5c:	6113      	str	r3, [r2, #16]
 8008e5e:	e037      	b.n	8008ed0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	691a      	ldr	r2, [r3, #16]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	4413      	add	r3, r2
 8008e6a:	1e5a      	subs	r2, r3, #1
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e74:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	8afa      	ldrh	r2, [r7, #22]
 8008e7c:	fb03 f202 	mul.w	r2, r3, r2
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	015a      	lsls	r2, r3, #5
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e90:	691a      	ldr	r2, [r3, #16]
 8008e92:	8afb      	ldrh	r3, [r7, #22]
 8008e94:	04d9      	lsls	r1, r3, #19
 8008e96:	4b38      	ldr	r3, [pc, #224]	; (8008f78 <USB_EPStartXfer+0x52c>)
 8008e98:	400b      	ands	r3, r1
 8008e9a:	69b9      	ldr	r1, [r7, #24]
 8008e9c:	0148      	lsls	r0, r1, #5
 8008e9e:	69f9      	ldr	r1, [r7, #28]
 8008ea0:	4401      	add	r1, r0
 8008ea2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb6:	691a      	ldr	r2, [r3, #16]
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	6a1b      	ldr	r3, [r3, #32]
 8008ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ec0:	69b9      	ldr	r1, [r7, #24]
 8008ec2:	0148      	lsls	r0, r1, #5
 8008ec4:	69f9      	ldr	r1, [r7, #28]
 8008ec6:	4401      	add	r1, r0
 8008ec8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d10d      	bne.n	8008ef2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d009      	beq.n	8008ef2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	68d9      	ldr	r1, [r3, #12]
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eee:	460a      	mov	r2, r1
 8008ef0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	791b      	ldrb	r3, [r3, #4]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d128      	bne.n	8008f4c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d110      	bne.n	8008f2c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	015a      	lsls	r2, r3, #5
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	4413      	add	r3, r2
 8008f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	69ba      	ldr	r2, [r7, #24]
 8008f1a:	0151      	lsls	r1, r2, #5
 8008f1c:	69fa      	ldr	r2, [r7, #28]
 8008f1e:	440a      	add	r2, r1
 8008f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	e00f      	b.n	8008f4c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	69ba      	ldr	r2, [r7, #24]
 8008f3c:	0151      	lsls	r1, r2, #5
 8008f3e:	69fa      	ldr	r2, [r7, #28]
 8008f40:	440a      	add	r2, r1
 8008f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	69ba      	ldr	r2, [r7, #24]
 8008f5c:	0151      	lsls	r1, r2, #5
 8008f5e:	69fa      	ldr	r2, [r7, #28]
 8008f60:	440a      	add	r2, r1
 8008f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3720      	adds	r7, #32
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	1ff80000 	.word	0x1ff80000

08008f7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f86:	2300      	movs	r3, #0
 8008f88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	785b      	ldrb	r3, [r3, #1]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d14a      	bne.n	8009030 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fb2:	f040 8086 	bne.w	80090c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	7812      	ldrb	r2, [r2, #0]
 8008fca:	0151      	lsls	r1, r2, #5
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	440a      	add	r2, r1
 8008fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fd8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	7812      	ldrb	r2, [r2, #0]
 8008fee:	0151      	lsls	r1, r2, #5
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	440a      	add	r2, r1
 8008ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ff8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ffc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3301      	adds	r3, #1
 8009002:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f242 7210 	movw	r2, #10000	; 0x2710
 800900a:	4293      	cmp	r3, r2
 800900c:	d902      	bls.n	8009014 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	75fb      	strb	r3, [r7, #23]
          break;
 8009012:	e056      	b.n	80090c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800902c:	d0e7      	beq.n	8008ffe <USB_EPStopXfer+0x82>
 800902e:	e048      	b.n	80090c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	015a      	lsls	r2, r3, #5
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	4413      	add	r3, r2
 800903a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009048:	d13b      	bne.n	80090c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	015a      	lsls	r2, r3, #5
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	4413      	add	r3, r2
 8009054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	7812      	ldrb	r2, [r2, #0]
 800905e:	0151      	lsls	r1, r2, #5
 8009060:	693a      	ldr	r2, [r7, #16]
 8009062:	440a      	add	r2, r1
 8009064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009068:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800906c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	015a      	lsls	r2, r3, #5
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	4413      	add	r3, r2
 8009078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	7812      	ldrb	r2, [r2, #0]
 8009082:	0151      	lsls	r1, r2, #5
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	440a      	add	r2, r1
 8009088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800908c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009090:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	3301      	adds	r3, #1
 8009096:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f242 7210 	movw	r2, #10000	; 0x2710
 800909e:	4293      	cmp	r3, r2
 80090a0:	d902      	bls.n	80090a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	75fb      	strb	r3, [r7, #23]
          break;
 80090a6:	e00c      	b.n	80090c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	015a      	lsls	r2, r3, #5
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	4413      	add	r3, r2
 80090b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090c0:	d0e7      	beq.n	8009092 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80090c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	371c      	adds	r7, #28
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b089      	sub	sp, #36	; 0x24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	4611      	mov	r1, r2
 80090dc:	461a      	mov	r2, r3
 80090de:	460b      	mov	r3, r1
 80090e0:	71fb      	strb	r3, [r7, #7]
 80090e2:	4613      	mov	r3, r2
 80090e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80090ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d123      	bne.n	800913e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80090f6:	88bb      	ldrh	r3, [r7, #4]
 80090f8:	3303      	adds	r3, #3
 80090fa:	089b      	lsrs	r3, r3, #2
 80090fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80090fe:	2300      	movs	r3, #0
 8009100:	61bb      	str	r3, [r7, #24]
 8009102:	e018      	b.n	8009136 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009104:	79fb      	ldrb	r3, [r7, #7]
 8009106:	031a      	lsls	r2, r3, #12
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	4413      	add	r3, r2
 800910c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009110:	461a      	mov	r2, r3
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	3301      	adds	r3, #1
 800911c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	3301      	adds	r3, #1
 8009122:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	3301      	adds	r3, #1
 8009128:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	3301      	adds	r3, #1
 800912e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	3301      	adds	r3, #1
 8009134:	61bb      	str	r3, [r7, #24]
 8009136:	69ba      	ldr	r2, [r7, #24]
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	429a      	cmp	r2, r3
 800913c:	d3e2      	bcc.n	8009104 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3724      	adds	r7, #36	; 0x24
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800914c:	b480      	push	{r7}
 800914e:	b08b      	sub	sp, #44	; 0x2c
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	4613      	mov	r3, r2
 8009158:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009162:	88fb      	ldrh	r3, [r7, #6]
 8009164:	089b      	lsrs	r3, r3, #2
 8009166:	b29b      	uxth	r3, r3
 8009168:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800916a:	88fb      	ldrh	r3, [r7, #6]
 800916c:	f003 0303 	and.w	r3, r3, #3
 8009170:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009172:	2300      	movs	r3, #0
 8009174:	623b      	str	r3, [r7, #32]
 8009176:	e014      	b.n	80091a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009182:	601a      	str	r2, [r3, #0]
    pDest++;
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	3301      	adds	r3, #1
 8009188:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800918a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918c:	3301      	adds	r3, #1
 800918e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	3301      	adds	r3, #1
 8009194:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009198:	3301      	adds	r3, #1
 800919a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	3301      	adds	r3, #1
 80091a0:	623b      	str	r3, [r7, #32]
 80091a2:	6a3a      	ldr	r2, [r7, #32]
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d3e6      	bcc.n	8009178 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80091aa:	8bfb      	ldrh	r3, [r7, #30]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d01e      	beq.n	80091ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ba:	461a      	mov	r2, r3
 80091bc:	f107 0310 	add.w	r3, r7, #16
 80091c0:	6812      	ldr	r2, [r2, #0]
 80091c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	6a3b      	ldr	r3, [r7, #32]
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	00db      	lsls	r3, r3, #3
 80091cc:	fa22 f303 	lsr.w	r3, r2, r3
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d4:	701a      	strb	r2, [r3, #0]
      i++;
 80091d6:	6a3b      	ldr	r3, [r7, #32]
 80091d8:	3301      	adds	r3, #1
 80091da:	623b      	str	r3, [r7, #32]
      pDest++;
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	3301      	adds	r3, #1
 80091e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80091e2:	8bfb      	ldrh	r3, [r7, #30]
 80091e4:	3b01      	subs	r3, #1
 80091e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80091e8:	8bfb      	ldrh	r3, [r7, #30]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1ea      	bne.n	80091c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80091ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	372c      	adds	r7, #44	; 0x2c
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	785b      	ldrb	r3, [r3, #1]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d12c      	bne.n	8009272 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	4413      	add	r3, r2
 8009220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	db12      	blt.n	8009250 <USB_EPSetStall+0x54>
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00f      	beq.n	8009250 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	015a      	lsls	r2, r3, #5
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4413      	add	r3, r2
 8009238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	0151      	lsls	r1, r2, #5
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	440a      	add	r2, r1
 8009246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800924a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800924e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	4413      	add	r3, r2
 8009258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	0151      	lsls	r1, r2, #5
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	440a      	add	r2, r1
 8009266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800926a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800926e:	6013      	str	r3, [r2, #0]
 8009270:	e02b      	b.n	80092ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	015a      	lsls	r2, r3, #5
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	4413      	add	r3, r2
 800927a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	db12      	blt.n	80092aa <USB_EPSetStall+0xae>
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00f      	beq.n	80092aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	015a      	lsls	r2, r3, #5
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	4413      	add	r3, r2
 8009292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	0151      	lsls	r1, r2, #5
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	440a      	add	r2, r1
 80092a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	015a      	lsls	r2, r3, #5
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4413      	add	r3, r2
 80092b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	0151      	lsls	r1, r2, #5
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	440a      	add	r2, r1
 80092c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	785b      	ldrb	r3, [r3, #1]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d128      	bne.n	8009346 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	015a      	lsls	r2, r3, #5
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	4413      	add	r3, r2
 80092fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	0151      	lsls	r1, r2, #5
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	440a      	add	r2, r1
 800930a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800930e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009312:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	791b      	ldrb	r3, [r3, #4]
 8009318:	2b03      	cmp	r3, #3
 800931a:	d003      	beq.n	8009324 <USB_EPClearStall+0x4c>
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	791b      	ldrb	r3, [r3, #4]
 8009320:	2b02      	cmp	r3, #2
 8009322:	d138      	bne.n	8009396 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	0151      	lsls	r1, r2, #5
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	440a      	add	r2, r1
 800933a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800933e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009342:	6013      	str	r3, [r2, #0]
 8009344:	e027      	b.n	8009396 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	015a      	lsls	r2, r3, #5
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	4413      	add	r3, r2
 800934e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68ba      	ldr	r2, [r7, #8]
 8009356:	0151      	lsls	r1, r2, #5
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	440a      	add	r2, r1
 800935c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009360:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009364:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	791b      	ldrb	r3, [r3, #4]
 800936a:	2b03      	cmp	r3, #3
 800936c:	d003      	beq.n	8009376 <USB_EPClearStall+0x9e>
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	791b      	ldrb	r3, [r3, #4]
 8009372:	2b02      	cmp	r3, #2
 8009374:	d10f      	bne.n	8009396 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	4413      	add	r3, r2
 800937e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	0151      	lsls	r1, r2, #5
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	440a      	add	r2, r1
 800938c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009394:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80093c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	011b      	lsls	r3, r3, #4
 80093d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80093d8:	68f9      	ldr	r1, [r7, #12]
 80093da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093de:	4313      	orrs	r3, r2
 80093e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800940a:	f023 0303 	bic.w	r3, r3, #3
 800940e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800941e:	f023 0302 	bic.w	r3, r3, #2
 8009422:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3714      	adds	r7, #20
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr

08009432 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009432:	b480      	push	{r7}
 8009434:	b085      	sub	sp, #20
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800944c:	f023 0303 	bic.w	r3, r3, #3
 8009450:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009460:	f043 0302 	orr.w	r3, r3, #2
 8009464:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3714      	adds	r7, #20
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	695b      	ldr	r3, [r3, #20]
 8009480:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	4013      	ands	r3, r2
 800948a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800948c:	68fb      	ldr	r3, [r7, #12]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800949a:	b480      	push	{r7}
 800949c:	b085      	sub	sp, #20
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b6:	69db      	ldr	r3, [r3, #28]
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	4013      	ands	r3, r2
 80094bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	0c1b      	lsrs	r3, r3, #16
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3714      	adds	r7, #20
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b085      	sub	sp, #20
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ea:	69db      	ldr	r3, [r3, #28]
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	4013      	ands	r3, r2
 80094f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	b29b      	uxth	r3, r3
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009502:	b480      	push	{r7}
 8009504:	b085      	sub	sp, #20
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	460b      	mov	r3, r1
 800950c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009512:	78fb      	ldrb	r3, [r7, #3]
 8009514:	015a      	lsls	r2, r3, #5
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	4413      	add	r3, r2
 800951a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	68ba      	ldr	r2, [r7, #8]
 800952c:	4013      	ands	r3, r2
 800952e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009530:	68bb      	ldr	r3, [r7, #8]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr

0800953e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800953e:	b480      	push	{r7}
 8009540:	b087      	sub	sp, #28
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	460b      	mov	r3, r1
 8009548:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800955e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009560:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009562:	78fb      	ldrb	r3, [r7, #3]
 8009564:	f003 030f 	and.w	r3, r3, #15
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	fa22 f303 	lsr.w	r3, r2, r3
 800956e:	01db      	lsls	r3, r3, #7
 8009570:	b2db      	uxtb	r3, r3
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	4313      	orrs	r3, r2
 8009576:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009578:	78fb      	ldrb	r3, [r7, #3]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	4413      	add	r3, r2
 8009580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	4013      	ands	r3, r2
 800958a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800958c:	68bb      	ldr	r3, [r7, #8]
}
 800958e:	4618      	mov	r0, r3
 8009590:	371c      	adds	r7, #28
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800959a:	b480      	push	{r7}
 800959c:	b083      	sub	sp, #12
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	f003 0301 	and.w	r3, r3, #1
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b085      	sub	sp, #20
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80095d4:	f023 0307 	bic.w	r3, r3, #7
 80095d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b087      	sub	sp, #28
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	460b      	mov	r3, r1
 8009606:	607a      	str	r2, [r7, #4]
 8009608:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	333c      	adds	r3, #60	; 0x3c
 8009612:	3304      	adds	r3, #4
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	4a26      	ldr	r2, [pc, #152]	; (80096b4 <USB_EP0_OutStart+0xb8>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d90a      	bls.n	8009636 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800962c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009630:	d101      	bne.n	8009636 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	e037      	b.n	80096a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800963c:	461a      	mov	r2, r3
 800963e:	2300      	movs	r3, #0
 8009640:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009654:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009664:	f043 0318 	orr.w	r3, r3, #24
 8009668:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009678:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800967c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800967e:	7afb      	ldrb	r3, [r7, #11]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d10f      	bne.n	80096a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800968a:	461a      	mov	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800969e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80096a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	371c      	adds	r7, #28
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	4f54300a 	.word	0x4f54300a

080096b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096c0:	2300      	movs	r3, #0
 80096c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	3301      	adds	r3, #1
 80096c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80096d0:	d901      	bls.n	80096d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80096d2:	2303      	movs	r3, #3
 80096d4:	e01b      	b.n	800970e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	daf2      	bge.n	80096c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80096de:	2300      	movs	r3, #0
 80096e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	f043 0201 	orr.w	r2, r3, #1
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	3301      	adds	r3, #1
 80096f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80096fa:	d901      	bls.n	8009700 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e006      	b.n	800970e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b01      	cmp	r3, #1
 800970a:	d0f0      	beq.n	80096ee <USB_CoreReset+0x36>

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3714      	adds	r7, #20
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
	...

0800971c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009720:	4904      	ldr	r1, [pc, #16]	; (8009734 <MX_FATFS_Init+0x18>)
 8009722:	4805      	ldr	r0, [pc, #20]	; (8009738 <MX_FATFS_Init+0x1c>)
 8009724:	f006 ffae 	bl	8010684 <FATFS_LinkDriver>
 8009728:	4603      	mov	r3, r0
 800972a:	461a      	mov	r2, r3
 800972c:	4b03      	ldr	r3, [pc, #12]	; (800973c <MX_FATFS_Init+0x20>)
 800972e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009730:	bf00      	nop
 8009732:	bd80      	pop	{r7, pc}
 8009734:	20000888 	.word	0x20000888
 8009738:	0801e97c 	.word	0x0801e97c
 800973c:	20000884 	.word	0x20000884

08009740 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009740:	b480      	push	{r7}
 8009742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009744:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009746:	4618      	mov	r0, r3
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800975a:	f000 f89e 	bl	800989a <BSP_SD_IsDetected>
 800975e:	4603      	mov	r3, r0
 8009760:	2b01      	cmp	r3, #1
 8009762:	d001      	beq.n	8009768 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e005      	b.n	8009774 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009768:	4804      	ldr	r0, [pc, #16]	; (800977c <BSP_SD_Init+0x2c>)
 800976a:	f7fb fc22 	bl	8004fb2 <HAL_SD_Init>
 800976e:	4603      	mov	r3, r0
 8009770:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009772:	79fb      	ldrb	r3, [r7, #7]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	20000264 	.word	0x20000264

08009780 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b088      	sub	sp, #32
 8009784:	af02      	add	r7, sp, #8
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
 800978c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	68f9      	ldr	r1, [r7, #12]
 800979c:	4806      	ldr	r0, [pc, #24]	; (80097b8 <BSP_SD_ReadBlocks+0x38>)
 800979e:	f7fb fcb9 	bl	8005114 <HAL_SD_ReadBlocks>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80097ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3718      	adds	r7, #24
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	20000264 	.word	0x20000264

080097bc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b088      	sub	sp, #32
 80097c0:	af02      	add	r7, sp, #8
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
 80097c8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	68f9      	ldr	r1, [r7, #12]
 80097d8:	4806      	ldr	r0, [pc, #24]	; (80097f4 <BSP_SD_WriteBlocks+0x38>)
 80097da:	f7fb fe81 	bl	80054e0 <HAL_SD_WriteBlocks>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80097e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3718      	adds	r7, #24
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	20000264 	.word	0x20000264

080097f8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80097fc:	4805      	ldr	r0, [pc, #20]	; (8009814 <BSP_SD_GetCardState+0x1c>)
 80097fe:	f7fc fb5d 	bl	8005ebc <HAL_SD_GetCardState>
 8009802:	4603      	mov	r3, r0
 8009804:	2b04      	cmp	r3, #4
 8009806:	bf14      	ite	ne
 8009808:	2301      	movne	r3, #1
 800980a:	2300      	moveq	r3, #0
 800980c:	b2db      	uxtb	r3, r3
}
 800980e:	4618      	mov	r0, r3
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	20000264 	.word	0x20000264

08009818 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009820:	6879      	ldr	r1, [r7, #4]
 8009822:	4803      	ldr	r0, [pc, #12]	; (8009830 <BSP_SD_GetCardInfo+0x18>)
 8009824:	f7fc fb1e 	bl	8005e64 <HAL_SD_GetCardInfo>
}
 8009828:	bf00      	nop
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	20000264 	.word	0x20000264

08009834 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800983c:	f000 f818 	bl	8009870 <BSP_SD_AbortCallback>
}
 8009840:	bf00      	nop
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009850:	f000 f815 	bl	800987e <BSP_SD_WriteCpltCallback>
}
 8009854:	bf00      	nop
 8009856:	3708      	adds	r7, #8
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009864:	f000 f812 	bl	800988c <BSP_SD_ReadCpltCallback>
}
 8009868:	bf00      	nop
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009870:	b480      	push	{r7}
 8009872:	af00      	add	r7, sp, #0

}
 8009874:	bf00      	nop
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr

0800987e <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800987e:	b480      	push	{r7}
 8009880:	af00      	add	r7, sp, #0

}
 8009882:	bf00      	nop
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800988c:	b480      	push	{r7}
 800988e:	af00      	add	r7, sp, #0

}
 8009890:	bf00      	nop
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800989a:	b480      	push	{r7}
 800989c:	b083      	sub	sp, #12
 800989e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80098a0:	2301      	movs	r3, #1
 80098a2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80098a4:	79fb      	ldrb	r3, [r7, #7]
 80098a6:	b2db      	uxtb	r3, r3
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	4603      	mov	r3, r0
 80098bc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80098be:	4b0b      	ldr	r3, [pc, #44]	; (80098ec <SD_CheckStatus+0x38>)
 80098c0:	2201      	movs	r2, #1
 80098c2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80098c4:	f7ff ff98 	bl	80097f8 <BSP_SD_GetCardState>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d107      	bne.n	80098de <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80098ce:	4b07      	ldr	r3, [pc, #28]	; (80098ec <SD_CheckStatus+0x38>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	f023 0301 	bic.w	r3, r3, #1
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	4b04      	ldr	r3, [pc, #16]	; (80098ec <SD_CheckStatus+0x38>)
 80098dc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80098de:	4b03      	ldr	r3, [pc, #12]	; (80098ec <SD_CheckStatus+0x38>)
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	b2db      	uxtb	r3, r3
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	20000009 	.word	0x20000009

080098f0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	4603      	mov	r3, r0
 80098f8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80098fa:	4b0b      	ldr	r3, [pc, #44]	; (8009928 <SD_initialize+0x38>)
 80098fc:	2201      	movs	r2, #1
 80098fe:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009900:	f7ff ff26 	bl	8009750 <BSP_SD_Init>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d107      	bne.n	800991a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800990a:	79fb      	ldrb	r3, [r7, #7]
 800990c:	4618      	mov	r0, r3
 800990e:	f7ff ffd1 	bl	80098b4 <SD_CheckStatus>
 8009912:	4603      	mov	r3, r0
 8009914:	461a      	mov	r2, r3
 8009916:	4b04      	ldr	r3, [pc, #16]	; (8009928 <SD_initialize+0x38>)
 8009918:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800991a:	4b03      	ldr	r3, [pc, #12]	; (8009928 <SD_initialize+0x38>)
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	b2db      	uxtb	r3, r3
}
 8009920:	4618      	mov	r0, r3
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	20000009 	.word	0x20000009

0800992c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	4603      	mov	r3, r0
 8009934:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009936:	79fb      	ldrb	r3, [r7, #7]
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff ffbb 	bl	80098b4 <SD_CheckStatus>
 800993e:	4603      	mov	r3, r0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	60b9      	str	r1, [r7, #8]
 8009950:	607a      	str	r2, [r7, #4]
 8009952:	603b      	str	r3, [r7, #0]
 8009954:	4603      	mov	r3, r0
 8009956:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800995c:	f04f 33ff 	mov.w	r3, #4294967295
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	6879      	ldr	r1, [r7, #4]
 8009964:	68b8      	ldr	r0, [r7, #8]
 8009966:	f7ff ff0b 	bl	8009780 <BSP_SD_ReadBlocks>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d107      	bne.n	8009980 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009970:	bf00      	nop
 8009972:	f7ff ff41 	bl	80097f8 <BSP_SD_GetCardState>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1fa      	bne.n	8009972 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009980:	7dfb      	ldrb	r3, [r7, #23]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3718      	adds	r7, #24
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b086      	sub	sp, #24
 800998e:	af00      	add	r7, sp, #0
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
 8009994:	603b      	str	r3, [r7, #0]
 8009996:	4603      	mov	r3, r0
 8009998:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800999e:	f04f 33ff 	mov.w	r3, #4294967295
 80099a2:	683a      	ldr	r2, [r7, #0]
 80099a4:	6879      	ldr	r1, [r7, #4]
 80099a6:	68b8      	ldr	r0, [r7, #8]
 80099a8:	f7ff ff08 	bl	80097bc <BSP_SD_WriteBlocks>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d107      	bne.n	80099c2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80099b2:	bf00      	nop
 80099b4:	f7ff ff20 	bl	80097f8 <BSP_SD_GetCardState>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1fa      	bne.n	80099b4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80099c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3718      	adds	r7, #24
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b08c      	sub	sp, #48	; 0x30
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	4603      	mov	r3, r0
 80099d4:	603a      	str	r2, [r7, #0]
 80099d6:	71fb      	strb	r3, [r7, #7]
 80099d8:	460b      	mov	r3, r1
 80099da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80099e2:	4b25      	ldr	r3, [pc, #148]	; (8009a78 <SD_ioctl+0xac>)
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <SD_ioctl+0x28>
 80099f0:	2303      	movs	r3, #3
 80099f2:	e03c      	b.n	8009a6e <SD_ioctl+0xa2>

  switch (cmd)
 80099f4:	79bb      	ldrb	r3, [r7, #6]
 80099f6:	2b03      	cmp	r3, #3
 80099f8:	d834      	bhi.n	8009a64 <SD_ioctl+0x98>
 80099fa:	a201      	add	r2, pc, #4	; (adr r2, 8009a00 <SD_ioctl+0x34>)
 80099fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a00:	08009a11 	.word	0x08009a11
 8009a04:	08009a19 	.word	0x08009a19
 8009a08:	08009a31 	.word	0x08009a31
 8009a0c:	08009a4b 	.word	0x08009a4b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009a16:	e028      	b.n	8009a6a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009a18:	f107 030c 	add.w	r3, r7, #12
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7ff fefb 	bl	8009818 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009a2e:	e01c      	b.n	8009a6a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009a30:	f107 030c 	add.w	r3, r7, #12
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7ff feef 	bl	8009818 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009a48:	e00f      	b.n	8009a6a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009a4a:	f107 030c 	add.w	r3, r7, #12
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7ff fee2 	bl	8009818 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a56:	0a5a      	lsrs	r2, r3, #9
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009a62:	e002      	b.n	8009a6a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009a64:	2304      	movs	r3, #4
 8009a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3730      	adds	r7, #48	; 0x30
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	20000009 	.word	0x20000009

08009a7c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009a82:	4b87      	ldr	r3, [pc, #540]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009a84:	22c0      	movs	r2, #192	; 0xc0
 8009a86:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009a88:	4b85      	ldr	r3, [pc, #532]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009a8a:	22a8      	movs	r2, #168	; 0xa8
 8009a8c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8009a8e:	4b84      	ldr	r3, [pc, #528]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009a90:	2200      	movs	r2, #0
 8009a92:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8009a94:	4b82      	ldr	r3, [pc, #520]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009a96:	226f      	movs	r2, #111	; 0x6f
 8009a98:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009a9a:	4b82      	ldr	r3, [pc, #520]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009a9c:	22ff      	movs	r2, #255	; 0xff
 8009a9e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009aa0:	4b80      	ldr	r3, [pc, #512]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009aa2:	22ff      	movs	r2, #255	; 0xff
 8009aa4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009aa6:	4b7f      	ldr	r3, [pc, #508]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009aa8:	22ff      	movs	r2, #255	; 0xff
 8009aaa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009aac:	4b7d      	ldr	r3, [pc, #500]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009aae:	2200      	movs	r2, #0
 8009ab0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009ab2:	4b7d      	ldr	r3, [pc, #500]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009ab4:	22c0      	movs	r2, #192	; 0xc0
 8009ab6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009ab8:	4b7b      	ldr	r3, [pc, #492]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009aba:	22a8      	movs	r2, #168	; 0xa8
 8009abc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8009abe:	4b7a      	ldr	r3, [pc, #488]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009ac4:	4b78      	ldr	r3, [pc, #480]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8009aca:	f006 fe18 	bl	80106fe <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009ace:	4b74      	ldr	r3, [pc, #464]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	061a      	lsls	r2, r3, #24
 8009ad4:	4b72      	ldr	r3, [pc, #456]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009ad6:	785b      	ldrb	r3, [r3, #1]
 8009ad8:	041b      	lsls	r3, r3, #16
 8009ada:	431a      	orrs	r2, r3
 8009adc:	4b70      	ldr	r3, [pc, #448]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009ade:	789b      	ldrb	r3, [r3, #2]
 8009ae0:	021b      	lsls	r3, r3, #8
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	4a6e      	ldr	r2, [pc, #440]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009ae6:	78d2      	ldrb	r2, [r2, #3]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	061a      	lsls	r2, r3, #24
 8009aec:	4b6c      	ldr	r3, [pc, #432]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	0619      	lsls	r1, r3, #24
 8009af2:	4b6b      	ldr	r3, [pc, #428]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009af4:	785b      	ldrb	r3, [r3, #1]
 8009af6:	041b      	lsls	r3, r3, #16
 8009af8:	4319      	orrs	r1, r3
 8009afa:	4b69      	ldr	r3, [pc, #420]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009afc:	789b      	ldrb	r3, [r3, #2]
 8009afe:	021b      	lsls	r3, r3, #8
 8009b00:	430b      	orrs	r3, r1
 8009b02:	4967      	ldr	r1, [pc, #412]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009b04:	78c9      	ldrb	r1, [r1, #3]
 8009b06:	430b      	orrs	r3, r1
 8009b08:	021b      	lsls	r3, r3, #8
 8009b0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b0e:	431a      	orrs	r2, r3
 8009b10:	4b63      	ldr	r3, [pc, #396]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	0619      	lsls	r1, r3, #24
 8009b16:	4b62      	ldr	r3, [pc, #392]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009b18:	785b      	ldrb	r3, [r3, #1]
 8009b1a:	041b      	lsls	r3, r3, #16
 8009b1c:	4319      	orrs	r1, r3
 8009b1e:	4b60      	ldr	r3, [pc, #384]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009b20:	789b      	ldrb	r3, [r3, #2]
 8009b22:	021b      	lsls	r3, r3, #8
 8009b24:	430b      	orrs	r3, r1
 8009b26:	495e      	ldr	r1, [pc, #376]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009b28:	78c9      	ldrb	r1, [r1, #3]
 8009b2a:	430b      	orrs	r3, r1
 8009b2c:	0a1b      	lsrs	r3, r3, #8
 8009b2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009b32:	431a      	orrs	r2, r3
 8009b34:	4b5a      	ldr	r3, [pc, #360]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	0619      	lsls	r1, r3, #24
 8009b3a:	4b59      	ldr	r3, [pc, #356]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009b3c:	785b      	ldrb	r3, [r3, #1]
 8009b3e:	041b      	lsls	r3, r3, #16
 8009b40:	4319      	orrs	r1, r3
 8009b42:	4b57      	ldr	r3, [pc, #348]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009b44:	789b      	ldrb	r3, [r3, #2]
 8009b46:	021b      	lsls	r3, r3, #8
 8009b48:	430b      	orrs	r3, r1
 8009b4a:	4955      	ldr	r1, [pc, #340]	; (8009ca0 <MX_LWIP_Init+0x224>)
 8009b4c:	78c9      	ldrb	r1, [r1, #3]
 8009b4e:	430b      	orrs	r3, r1
 8009b50:	0e1b      	lsrs	r3, r3, #24
 8009b52:	4313      	orrs	r3, r2
 8009b54:	4a55      	ldr	r2, [pc, #340]	; (8009cac <MX_LWIP_Init+0x230>)
 8009b56:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009b58:	4b52      	ldr	r3, [pc, #328]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	061a      	lsls	r2, r3, #24
 8009b5e:	4b51      	ldr	r3, [pc, #324]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009b60:	785b      	ldrb	r3, [r3, #1]
 8009b62:	041b      	lsls	r3, r3, #16
 8009b64:	431a      	orrs	r2, r3
 8009b66:	4b4f      	ldr	r3, [pc, #316]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009b68:	789b      	ldrb	r3, [r3, #2]
 8009b6a:	021b      	lsls	r3, r3, #8
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	4a4d      	ldr	r2, [pc, #308]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009b70:	78d2      	ldrb	r2, [r2, #3]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	061a      	lsls	r2, r3, #24
 8009b76:	4b4b      	ldr	r3, [pc, #300]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	0619      	lsls	r1, r3, #24
 8009b7c:	4b49      	ldr	r3, [pc, #292]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009b7e:	785b      	ldrb	r3, [r3, #1]
 8009b80:	041b      	lsls	r3, r3, #16
 8009b82:	4319      	orrs	r1, r3
 8009b84:	4b47      	ldr	r3, [pc, #284]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009b86:	789b      	ldrb	r3, [r3, #2]
 8009b88:	021b      	lsls	r3, r3, #8
 8009b8a:	430b      	orrs	r3, r1
 8009b8c:	4945      	ldr	r1, [pc, #276]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009b8e:	78c9      	ldrb	r1, [r1, #3]
 8009b90:	430b      	orrs	r3, r1
 8009b92:	021b      	lsls	r3, r3, #8
 8009b94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b98:	431a      	orrs	r2, r3
 8009b9a:	4b42      	ldr	r3, [pc, #264]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	0619      	lsls	r1, r3, #24
 8009ba0:	4b40      	ldr	r3, [pc, #256]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009ba2:	785b      	ldrb	r3, [r3, #1]
 8009ba4:	041b      	lsls	r3, r3, #16
 8009ba6:	4319      	orrs	r1, r3
 8009ba8:	4b3e      	ldr	r3, [pc, #248]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009baa:	789b      	ldrb	r3, [r3, #2]
 8009bac:	021b      	lsls	r3, r3, #8
 8009bae:	430b      	orrs	r3, r1
 8009bb0:	493c      	ldr	r1, [pc, #240]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009bb2:	78c9      	ldrb	r1, [r1, #3]
 8009bb4:	430b      	orrs	r3, r1
 8009bb6:	0a1b      	lsrs	r3, r3, #8
 8009bb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009bbc:	431a      	orrs	r2, r3
 8009bbe:	4b39      	ldr	r3, [pc, #228]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	0619      	lsls	r1, r3, #24
 8009bc4:	4b37      	ldr	r3, [pc, #220]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009bc6:	785b      	ldrb	r3, [r3, #1]
 8009bc8:	041b      	lsls	r3, r3, #16
 8009bca:	4319      	orrs	r1, r3
 8009bcc:	4b35      	ldr	r3, [pc, #212]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009bce:	789b      	ldrb	r3, [r3, #2]
 8009bd0:	021b      	lsls	r3, r3, #8
 8009bd2:	430b      	orrs	r3, r1
 8009bd4:	4933      	ldr	r1, [pc, #204]	; (8009ca4 <MX_LWIP_Init+0x228>)
 8009bd6:	78c9      	ldrb	r1, [r1, #3]
 8009bd8:	430b      	orrs	r3, r1
 8009bda:	0e1b      	lsrs	r3, r3, #24
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	4a34      	ldr	r2, [pc, #208]	; (8009cb0 <MX_LWIP_Init+0x234>)
 8009be0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009be2:	4b31      	ldr	r3, [pc, #196]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	061a      	lsls	r2, r3, #24
 8009be8:	4b2f      	ldr	r3, [pc, #188]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009bea:	785b      	ldrb	r3, [r3, #1]
 8009bec:	041b      	lsls	r3, r3, #16
 8009bee:	431a      	orrs	r2, r3
 8009bf0:	4b2d      	ldr	r3, [pc, #180]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009bf2:	789b      	ldrb	r3, [r3, #2]
 8009bf4:	021b      	lsls	r3, r3, #8
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	4a2b      	ldr	r2, [pc, #172]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009bfa:	78d2      	ldrb	r2, [r2, #3]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	061a      	lsls	r2, r3, #24
 8009c00:	4b29      	ldr	r3, [pc, #164]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	0619      	lsls	r1, r3, #24
 8009c06:	4b28      	ldr	r3, [pc, #160]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009c08:	785b      	ldrb	r3, [r3, #1]
 8009c0a:	041b      	lsls	r3, r3, #16
 8009c0c:	4319      	orrs	r1, r3
 8009c0e:	4b26      	ldr	r3, [pc, #152]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009c10:	789b      	ldrb	r3, [r3, #2]
 8009c12:	021b      	lsls	r3, r3, #8
 8009c14:	430b      	orrs	r3, r1
 8009c16:	4924      	ldr	r1, [pc, #144]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009c18:	78c9      	ldrb	r1, [r1, #3]
 8009c1a:	430b      	orrs	r3, r1
 8009c1c:	021b      	lsls	r3, r3, #8
 8009c1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009c22:	431a      	orrs	r2, r3
 8009c24:	4b20      	ldr	r3, [pc, #128]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	0619      	lsls	r1, r3, #24
 8009c2a:	4b1f      	ldr	r3, [pc, #124]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009c2c:	785b      	ldrb	r3, [r3, #1]
 8009c2e:	041b      	lsls	r3, r3, #16
 8009c30:	4319      	orrs	r1, r3
 8009c32:	4b1d      	ldr	r3, [pc, #116]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009c34:	789b      	ldrb	r3, [r3, #2]
 8009c36:	021b      	lsls	r3, r3, #8
 8009c38:	430b      	orrs	r3, r1
 8009c3a:	491b      	ldr	r1, [pc, #108]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009c3c:	78c9      	ldrb	r1, [r1, #3]
 8009c3e:	430b      	orrs	r3, r1
 8009c40:	0a1b      	lsrs	r3, r3, #8
 8009c42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009c46:	431a      	orrs	r2, r3
 8009c48:	4b17      	ldr	r3, [pc, #92]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	0619      	lsls	r1, r3, #24
 8009c4e:	4b16      	ldr	r3, [pc, #88]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009c50:	785b      	ldrb	r3, [r3, #1]
 8009c52:	041b      	lsls	r3, r3, #16
 8009c54:	4319      	orrs	r1, r3
 8009c56:	4b14      	ldr	r3, [pc, #80]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009c58:	789b      	ldrb	r3, [r3, #2]
 8009c5a:	021b      	lsls	r3, r3, #8
 8009c5c:	430b      	orrs	r3, r1
 8009c5e:	4912      	ldr	r1, [pc, #72]	; (8009ca8 <MX_LWIP_Init+0x22c>)
 8009c60:	78c9      	ldrb	r1, [r1, #3]
 8009c62:	430b      	orrs	r3, r1
 8009c64:	0e1b      	lsrs	r3, r3, #24
 8009c66:	4313      	orrs	r3, r2
 8009c68:	4a12      	ldr	r2, [pc, #72]	; (8009cb4 <MX_LWIP_Init+0x238>)
 8009c6a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8009c6c:	4b12      	ldr	r3, [pc, #72]	; (8009cb8 <MX_LWIP_Init+0x23c>)
 8009c6e:	9302      	str	r3, [sp, #8]
 8009c70:	4b12      	ldr	r3, [pc, #72]	; (8009cbc <MX_LWIP_Init+0x240>)
 8009c72:	9301      	str	r3, [sp, #4]
 8009c74:	2300      	movs	r3, #0
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	4b0e      	ldr	r3, [pc, #56]	; (8009cb4 <MX_LWIP_Init+0x238>)
 8009c7a:	4a0d      	ldr	r2, [pc, #52]	; (8009cb0 <MX_LWIP_Init+0x234>)
 8009c7c:	490b      	ldr	r1, [pc, #44]	; (8009cac <MX_LWIP_Init+0x230>)
 8009c7e:	4810      	ldr	r0, [pc, #64]	; (8009cc0 <MX_LWIP_Init+0x244>)
 8009c80:	f007 fa28 	bl	80110d4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009c84:	480e      	ldr	r0, [pc, #56]	; (8009cc0 <MX_LWIP_Init+0x244>)
 8009c86:	f007 fbd7 	bl	8011438 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8009c8a:	480d      	ldr	r0, [pc, #52]	; (8009cc0 <MX_LWIP_Init+0x244>)
 8009c8c:	f007 fbe4 	bl	8011458 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009c90:	490c      	ldr	r1, [pc, #48]	; (8009cc4 <MX_LWIP_Init+0x248>)
 8009c92:	480b      	ldr	r0, [pc, #44]	; (8009cc0 <MX_LWIP_Init+0x244>)
 8009c94:	f007 fce2 	bl	801165c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009c98:	bf00      	nop
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	200008d0 	.word	0x200008d0
 8009ca4:	200008d4 	.word	0x200008d4
 8009ca8:	200008d8 	.word	0x200008d8
 8009cac:	200008c4 	.word	0x200008c4
 8009cb0:	200008c8 	.word	0x200008c8
 8009cb4:	200008cc 	.word	0x200008cc
 8009cb8:	08019f15 	.word	0x08019f15
 8009cbc:	08009fd5 	.word	0x08009fd5
 8009cc0:	20000890 	.word	0x20000890
 8009cc4:	08009d19 	.word	0x08009d19

08009cc8 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8009cd0:	f7f7 fa90 	bl	80011f4 <HAL_GetTick>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	4b08      	ldr	r3, [pc, #32]	; (8009cf8 <Ethernet_Link_Periodic_Handle+0x30>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	2b63      	cmp	r3, #99	; 0x63
 8009cde:	d907      	bls.n	8009cf0 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8009ce0:	f7f7 fa88 	bl	80011f4 <HAL_GetTick>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	4a04      	ldr	r2, [pc, #16]	; (8009cf8 <Ethernet_Link_Periodic_Handle+0x30>)
 8009ce8:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fab6 	bl	800a25c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	2000088c 	.word	0x2000088c

08009cfc <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8009d00:	4804      	ldr	r0, [pc, #16]	; (8009d14 <MX_LWIP_Process+0x18>)
 8009d02:	f000 f947 	bl	8009f94 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8009d06:	f00d fd19 	bl	801773c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8009d0a:	4802      	ldr	r0, [pc, #8]	; (8009d14 <MX_LWIP_Process+0x18>)
 8009d0c:	f7ff ffdc 	bl	8009cc8 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8009d10:	bf00      	nop
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	20000890 	.word	0x20000890

08009d18 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009d38:	4b40      	ldr	r3, [pc, #256]	; (8009e3c <low_level_init+0x110>)
 8009d3a:	4a41      	ldr	r2, [pc, #260]	; (8009e40 <low_level_init+0x114>)
 8009d3c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8009d42:	2380      	movs	r3, #128	; 0x80
 8009d44:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8009d46:	23e1      	movs	r3, #225	; 0xe1
 8009d48:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8009d52:	2300      	movs	r3, #0
 8009d54:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009d56:	4a39      	ldr	r2, [pc, #228]	; (8009e3c <low_level_init+0x110>)
 8009d58:	f107 0308 	add.w	r3, r7, #8
 8009d5c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009d5e:	4b37      	ldr	r3, [pc, #220]	; (8009e3c <low_level_init+0x110>)
 8009d60:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009d64:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009d66:	4b35      	ldr	r3, [pc, #212]	; (8009e3c <low_level_init+0x110>)
 8009d68:	4a36      	ldr	r2, [pc, #216]	; (8009e44 <low_level_init+0x118>)
 8009d6a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009d6c:	4b33      	ldr	r3, [pc, #204]	; (8009e3c <low_level_init+0x110>)
 8009d6e:	4a36      	ldr	r2, [pc, #216]	; (8009e48 <low_level_init+0x11c>)
 8009d70:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009d72:	4b32      	ldr	r3, [pc, #200]	; (8009e3c <low_level_init+0x110>)
 8009d74:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009d78:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009d7a:	4830      	ldr	r0, [pc, #192]	; (8009e3c <low_level_init+0x110>)
 8009d7c:	f7f7 ff7e 	bl	8001c7c <HAL_ETH_Init>
 8009d80:	4603      	mov	r3, r0
 8009d82:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009d84:	2238      	movs	r2, #56	; 0x38
 8009d86:	2100      	movs	r1, #0
 8009d88:	4830      	ldr	r0, [pc, #192]	; (8009e4c <low_level_init+0x120>)
 8009d8a:	f011 f9d0 	bl	801b12e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009d8e:	4b2f      	ldr	r3, [pc, #188]	; (8009e4c <low_level_init+0x120>)
 8009d90:	2221      	movs	r2, #33	; 0x21
 8009d92:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009d94:	4b2d      	ldr	r3, [pc, #180]	; (8009e4c <low_level_init+0x120>)
 8009d96:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8009d9a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009d9c:	4b2b      	ldr	r3, [pc, #172]	; (8009e4c <low_level_init+0x120>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009da2:	482b      	ldr	r0, [pc, #172]	; (8009e50 <low_level_init+0x124>)
 8009da4:	f007 f85e 	bl	8010e64 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2206      	movs	r2, #6
 8009dac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009db0:	4b22      	ldr	r3, [pc, #136]	; (8009e3c <low_level_init+0x110>)
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	781a      	ldrb	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009dbc:	4b1f      	ldr	r3, [pc, #124]	; (8009e3c <low_level_init+0x110>)
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	785a      	ldrb	r2, [r3, #1]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009dc8:	4b1c      	ldr	r3, [pc, #112]	; (8009e3c <low_level_init+0x110>)
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	789a      	ldrb	r2, [r3, #2]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009dd4:	4b19      	ldr	r3, [pc, #100]	; (8009e3c <low_level_init+0x110>)
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	78da      	ldrb	r2, [r3, #3]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009de0:	4b16      	ldr	r3, [pc, #88]	; (8009e3c <low_level_init+0x110>)
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	791a      	ldrb	r2, [r3, #4]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009dec:	4b13      	ldr	r3, [pc, #76]	; (8009e3c <low_level_init+0x110>)
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	795a      	ldrb	r2, [r3, #5]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009dfe:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009e06:	f043 030a 	orr.w	r3, r3, #10
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8009e12:	4910      	ldr	r1, [pc, #64]	; (8009e54 <low_level_init+0x128>)
 8009e14:	4810      	ldr	r0, [pc, #64]	; (8009e58 <low_level_init+0x12c>)
 8009e16:	f7f7 f826 	bl	8000e66 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8009e1a:	480f      	ldr	r0, [pc, #60]	; (8009e58 <low_level_init+0x12c>)
 8009e1c:	f7f7 f855 	bl	8000eca <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d103      	bne.n	8009e2e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 fa18 	bl	800a25c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009e2c:	e001      	b.n	8009e32 <low_level_init+0x106>
    Error_Handler();
 8009e2e:	f7f6 fd51 	bl	80008d4 <Error_Handler>
}
 8009e32:	bf00      	nop
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	200053a8 	.word	0x200053a8
 8009e40:	40028000 	.word	0x40028000
 8009e44:	20005308 	.word	0x20005308
 8009e48:	20005268 	.word	0x20005268
 8009e4c:	20005458 	.word	0x20005458
 8009e50:	0801e990 	.word	0x0801e990
 8009e54:	2000000c 	.word	0x2000000c
 8009e58:	20005490 	.word	0x20005490

08009e5c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b092      	sub	sp, #72	; 0x48
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009e66:	2300      	movs	r3, #0
 8009e68:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009e74:	f107 030c 	add.w	r3, r7, #12
 8009e78:	2230      	movs	r2, #48	; 0x30
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f011 f956 	bl	801b12e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009e82:	f107 030c 	add.w	r3, r7, #12
 8009e86:	2230      	movs	r2, #48	; 0x30
 8009e88:	2100      	movs	r1, #0
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f011 f94f 	bl	801b12e <memset>

  for(q = p; q != NULL; q = q->next)
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	643b      	str	r3, [r7, #64]	; 0x40
 8009e94:	e045      	b.n	8009f22 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e98:	2b03      	cmp	r3, #3
 8009e9a:	d902      	bls.n	8009ea2 <low_level_output+0x46>
      return ERR_IF;
 8009e9c:	f06f 030b 	mvn.w	r3, #11
 8009ea0:	e055      	b.n	8009f4e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8009ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ea4:	6859      	ldr	r1, [r3, #4]
 8009ea6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	4413      	add	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	3348      	adds	r3, #72	; 0x48
 8009eb2:	443b      	add	r3, r7
 8009eb4:	3b3c      	subs	r3, #60	; 0x3c
 8009eb6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eba:	895b      	ldrh	r3, [r3, #10]
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	4413      	add	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	3348      	adds	r3, #72	; 0x48
 8009eca:	443b      	add	r3, r7
 8009ecc:	3b38      	subs	r3, #56	; 0x38
 8009ece:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d011      	beq.n	8009efa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ed8:	1e5a      	subs	r2, r3, #1
 8009eda:	f107 000c 	add.w	r0, r7, #12
 8009ede:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	005b      	lsls	r3, r3, #1
 8009ee4:	440b      	add	r3, r1
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	18c1      	adds	r1, r0, r3
 8009eea:	4613      	mov	r3, r2
 8009eec:	005b      	lsls	r3, r3, #1
 8009eee:	4413      	add	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	3348      	adds	r3, #72	; 0x48
 8009ef4:	443b      	add	r3, r7
 8009ef6:	3b34      	subs	r3, #52	; 0x34
 8009ef8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d109      	bne.n	8009f16 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8009f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f04:	4613      	mov	r3, r2
 8009f06:	005b      	lsls	r3, r3, #1
 8009f08:	4413      	add	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	3348      	adds	r3, #72	; 0x48
 8009f0e:	443b      	add	r3, r7
 8009f10:	3b34      	subs	r3, #52	; 0x34
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f18:	3301      	adds	r3, #1
 8009f1a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8009f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	643b      	str	r3, [r7, #64]	; 0x40
 8009f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1b6      	bne.n	8009e96 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	891b      	ldrh	r3, [r3, #8]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	4b0a      	ldr	r3, [pc, #40]	; (8009f58 <low_level_output+0xfc>)
 8009f30:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009f32:	4a09      	ldr	r2, [pc, #36]	; (8009f58 <low_level_output+0xfc>)
 8009f34:	f107 030c 	add.w	r3, r7, #12
 8009f38:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009f3a:	4a07      	ldr	r2, [pc, #28]	; (8009f58 <low_level_output+0xfc>)
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009f40:	2214      	movs	r2, #20
 8009f42:	4905      	ldr	r1, [pc, #20]	; (8009f58 <low_level_output+0xfc>)
 8009f44:	4805      	ldr	r0, [pc, #20]	; (8009f5c <low_level_output+0x100>)
 8009f46:	f7f7 ffcf 	bl	8001ee8 <HAL_ETH_Transmit>

  return errval;
 8009f4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3748      	adds	r7, #72	; 0x48
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	20005458 	.word	0x20005458
 8009f5c:	200053a8 	.word	0x200053a8

08009f60 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009f6c:	4b07      	ldr	r3, [pc, #28]	; (8009f8c <low_level_input+0x2c>)
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d105      	bne.n	8009f80 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009f74:	f107 030c 	add.w	r3, r7, #12
 8009f78:	4619      	mov	r1, r3
 8009f7a:	4805      	ldr	r0, [pc, #20]	; (8009f90 <low_level_input+0x30>)
 8009f7c:	f7f8 f848 	bl	8002010 <HAL_ETH_ReadData>
  }

  return p;
 8009f80:	68fb      	ldr	r3, [r7, #12]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	20005264 	.word	0x20005264
 8009f90:	200053a8 	.word	0x200053a8

08009f94 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7ff ffdd 	bl	8009f60 <low_level_input>
 8009fa6:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00a      	beq.n	8009fc4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	4798      	blx	r3
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d002      	beq.n	8009fc4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f007 fecc 	bl	8011d5c <pbuf_free>
      }
    }
  } while(p!=NULL);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1ea      	bne.n	8009fa0 <ethernetif_input+0xc>
}
 8009fca:	bf00      	nop
 8009fcc:	bf00      	nop
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d106      	bne.n	8009ff0 <ethernetif_init+0x1c>
 8009fe2:	4b0e      	ldr	r3, [pc, #56]	; (800a01c <ethernetif_init+0x48>)
 8009fe4:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8009fe8:	490d      	ldr	r1, [pc, #52]	; (800a020 <ethernetif_init+0x4c>)
 8009fea:	480e      	ldr	r0, [pc, #56]	; (800a024 <ethernetif_init+0x50>)
 8009fec:	f011 f83a 	bl	801b064 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2273      	movs	r2, #115	; 0x73
 8009ff4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2274      	movs	r2, #116	; 0x74
 8009ffc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a09      	ldr	r2, [pc, #36]	; (800a028 <ethernetif_init+0x54>)
 800a004:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4a08      	ldr	r2, [pc, #32]	; (800a02c <ethernetif_init+0x58>)
 800a00a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f7ff fe8d 	bl	8009d2c <low_level_init>

  return ERR_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3708      	adds	r7, #8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	0801bec0 	.word	0x0801bec0
 800a020:	0801bedc 	.word	0x0801bedc
 800a024:	0801beec 	.word	0x0801beec
 800a028:	080183cd 	.word	0x080183cd
 800a02c:	08009e5d 	.word	0x08009e5d

0800a030 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a03c:	68f9      	ldr	r1, [r7, #12]
 800a03e:	4807      	ldr	r0, [pc, #28]	; (800a05c <pbuf_free_custom+0x2c>)
 800a040:	f006 fff2 	bl	8011028 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a044:	4b06      	ldr	r3, [pc, #24]	; (800a060 <pbuf_free_custom+0x30>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d102      	bne.n	800a052 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a04c:	4b04      	ldr	r3, [pc, #16]	; (800a060 <pbuf_free_custom+0x30>)
 800a04e:	2200      	movs	r2, #0
 800a050:	701a      	strb	r2, [r3, #0]
  }
}
 800a052:	bf00      	nop
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	0801e990 	.word	0x0801e990
 800a060:	20005264 	.word	0x20005264

0800a064 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a068:	f7f7 f8c4 	bl	80011f4 <HAL_GetTick>
 800a06c:	4603      	mov	r3, r0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	bd80      	pop	{r7, pc}
	...

0800a074 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08e      	sub	sp, #56	; 0x38
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a07c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a080:	2200      	movs	r2, #0
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	605a      	str	r2, [r3, #4]
 800a086:	609a      	str	r2, [r3, #8]
 800a088:	60da      	str	r2, [r3, #12]
 800a08a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a46      	ldr	r2, [pc, #280]	; (800a1ac <HAL_ETH_MspInit+0x138>)
 800a092:	4293      	cmp	r3, r2
 800a094:	f040 8085 	bne.w	800a1a2 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a098:	2300      	movs	r3, #0
 800a09a:	623b      	str	r3, [r7, #32]
 800a09c:	4b44      	ldr	r3, [pc, #272]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a0:	4a43      	ldr	r2, [pc, #268]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a0a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a0a6:	6313      	str	r3, [r2, #48]	; 0x30
 800a0a8:	4b41      	ldr	r3, [pc, #260]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0b0:	623b      	str	r3, [r7, #32]
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	61fb      	str	r3, [r7, #28]
 800a0b8:	4b3d      	ldr	r3, [pc, #244]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0bc:	4a3c      	ldr	r2, [pc, #240]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a0be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a0c2:	6313      	str	r3, [r2, #48]	; 0x30
 800a0c4:	4b3a      	ldr	r3, [pc, #232]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a0cc:	61fb      	str	r3, [r7, #28]
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	61bb      	str	r3, [r7, #24]
 800a0d4:	4b36      	ldr	r3, [pc, #216]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d8:	4a35      	ldr	r2, [pc, #212]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a0da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0de:	6313      	str	r3, [r2, #48]	; 0x30
 800a0e0:	4b33      	ldr	r3, [pc, #204]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a0e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0e8:	61bb      	str	r3, [r7, #24]
 800a0ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	617b      	str	r3, [r7, #20]
 800a0f0:	4b2f      	ldr	r3, [pc, #188]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f4:	4a2e      	ldr	r2, [pc, #184]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a0f6:	f043 0304 	orr.w	r3, r3, #4
 800a0fa:	6313      	str	r3, [r2, #48]	; 0x30
 800a0fc:	4b2c      	ldr	r3, [pc, #176]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a100:	f003 0304 	and.w	r3, r3, #4
 800a104:	617b      	str	r3, [r7, #20]
 800a106:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a108:	2300      	movs	r3, #0
 800a10a:	613b      	str	r3, [r7, #16]
 800a10c:	4b28      	ldr	r3, [pc, #160]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a110:	4a27      	ldr	r2, [pc, #156]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a112:	f043 0301 	orr.w	r3, r3, #1
 800a116:	6313      	str	r3, [r2, #48]	; 0x30
 800a118:	4b25      	ldr	r3, [pc, #148]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a11c:	f003 0301 	and.w	r3, r3, #1
 800a120:	613b      	str	r3, [r7, #16]
 800a122:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a124:	2300      	movs	r3, #0
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	4b21      	ldr	r3, [pc, #132]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12c:	4a20      	ldr	r2, [pc, #128]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a12e:	f043 0302 	orr.w	r3, r3, #2
 800a132:	6313      	str	r3, [r2, #48]	; 0x30
 800a134:	4b1e      	ldr	r3, [pc, #120]	; (800a1b0 <HAL_ETH_MspInit+0x13c>)
 800a136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a138:	f003 0302 	and.w	r3, r3, #2
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a140:	2332      	movs	r3, #50	; 0x32
 800a142:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a144:	2302      	movs	r3, #2
 800a146:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a148:	2300      	movs	r3, #0
 800a14a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a14c:	2303      	movs	r3, #3
 800a14e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a150:	230b      	movs	r3, #11
 800a152:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a158:	4619      	mov	r1, r3
 800a15a:	4816      	ldr	r0, [pc, #88]	; (800a1b4 <HAL_ETH_MspInit+0x140>)
 800a15c:	f7f8 fe90 	bl	8002e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a160:	2386      	movs	r3, #134	; 0x86
 800a162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a164:	2302      	movs	r3, #2
 800a166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a168:	2300      	movs	r3, #0
 800a16a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a16c:	2303      	movs	r3, #3
 800a16e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a170:	230b      	movs	r3, #11
 800a172:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a178:	4619      	mov	r1, r3
 800a17a:	480f      	ldr	r0, [pc, #60]	; (800a1b8 <HAL_ETH_MspInit+0x144>)
 800a17c:	f7f8 fe80 	bl	8002e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800a180:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a186:	2302      	movs	r3, #2
 800a188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a18a:	2300      	movs	r3, #0
 800a18c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a18e:	2303      	movs	r3, #3
 800a190:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a192:	230b      	movs	r3, #11
 800a194:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a19a:	4619      	mov	r1, r3
 800a19c:	4807      	ldr	r0, [pc, #28]	; (800a1bc <HAL_ETH_MspInit+0x148>)
 800a19e:	f7f8 fe6f 	bl	8002e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a1a2:	bf00      	nop
 800a1a4:	3738      	adds	r7, #56	; 0x38
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	40028000 	.word	0x40028000
 800a1b0:	40023800 	.word	0x40023800
 800a1b4:	40020800 	.word	0x40020800
 800a1b8:	40020000 	.word	0x40020000
 800a1bc:	40020400 	.word	0x40020400

0800a1c0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a1c4:	4802      	ldr	r0, [pc, #8]	; (800a1d0 <ETH_PHY_IO_Init+0x10>)
 800a1c6:	f7f8 f9ff 	bl	80025c8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	200053a8 	.word	0x200053a8

0800a1d4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	af00      	add	r7, sp, #0
  return 0;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	68f9      	ldr	r1, [r7, #12]
 800a1f6:	4807      	ldr	r0, [pc, #28]	; (800a214 <ETH_PHY_IO_ReadReg+0x30>)
 800a1f8:	f7f8 f84e 	bl	8002298 <HAL_ETH_ReadPHYRegister>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d002      	beq.n	800a208 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a202:	f04f 33ff 	mov.w	r3, #4294967295
 800a206:	e000      	b.n	800a20a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	200053a8 	.word	0x200053a8

0800a218 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	68f9      	ldr	r1, [r7, #12]
 800a22a:	4807      	ldr	r0, [pc, #28]	; (800a248 <ETH_PHY_IO_WriteReg+0x30>)
 800a22c:	f7f8 f87f 	bl	800232e <HAL_ETH_WritePHYRegister>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d002      	beq.n	800a23c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a236:	f04f 33ff 	mov.w	r3, #4294967295
 800a23a:	e000      	b.n	800a23e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	200053a8 	.word	0x200053a8

0800a24c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a250:	f7f6 ffd0 	bl	80011f4 <HAL_GetTick>
 800a254:	4603      	mov	r3, r0
}
 800a256:	4618      	mov	r0, r3
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b0a0      	sub	sp, #128	; 0x80
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a264:	f107 030c 	add.w	r3, r7, #12
 800a268:	2264      	movs	r2, #100	; 0x64
 800a26a:	2100      	movs	r1, #0
 800a26c:	4618      	mov	r0, r3
 800a26e:	f010 ff5e 	bl	801b12e <memset>
  int32_t PHYLinkState = 0;
 800a272:	2300      	movs	r3, #0
 800a274:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a27a:	2300      	movs	r3, #0
 800a27c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a27e:	2300      	movs	r3, #0
 800a280:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 800a282:	483a      	ldr	r0, [pc, #232]	; (800a36c <ethernet_link_check_state+0x110>)
 800a284:	f7f6 fec9 	bl	800101a <DP83848_GetLinkState>
 800a288:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a290:	089b      	lsrs	r3, r3, #2
 800a292:	f003 0301 	and.w	r3, r3, #1
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00c      	beq.n	800a2b6 <ethernet_link_check_state+0x5a>
 800a29c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	dc09      	bgt.n	800a2b6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800a2a2:	4833      	ldr	r0, [pc, #204]	; (800a370 <ethernet_link_check_state+0x114>)
 800a2a4:	f7f7 fdc7 	bl	8001e36 <HAL_ETH_Stop>
    netif_set_down(netif);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f007 f941 	bl	8011530 <netif_set_down>
    netif_set_link_down(netif);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f007 f9a4 	bl	80115fc <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800a2b4:	e055      	b.n	800a362 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a2bc:	f003 0304 	and.w	r3, r3, #4
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d14e      	bne.n	800a362 <ethernet_link_check_state+0x106>
 800a2c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	dd4b      	ble.n	800a362 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800a2ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a2cc:	3b02      	subs	r3, #2
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	d82a      	bhi.n	800a328 <ethernet_link_check_state+0xcc>
 800a2d2:	a201      	add	r2, pc, #4	; (adr r2, 800a2d8 <ethernet_link_check_state+0x7c>)
 800a2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d8:	0800a2e9 	.word	0x0800a2e9
 800a2dc:	0800a2fb 	.word	0x0800a2fb
 800a2e0:	0800a30b 	.word	0x0800a30b
 800a2e4:	0800a31b 	.word	0x0800a31b
      duplex = ETH_FULLDUPLEX_MODE;
 800a2e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2ec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a2ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2f2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a2f8:	e017      	b.n	800a32a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a2fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a302:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a304:	2301      	movs	r3, #1
 800a306:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a308:	e00f      	b.n	800a32a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800a30a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a30e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a310:	2300      	movs	r3, #0
 800a312:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a314:	2301      	movs	r3, #1
 800a316:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a318:	e007      	b.n	800a32a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a31a:	2300      	movs	r3, #0
 800a31c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a31e:	2300      	movs	r3, #0
 800a320:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a322:	2301      	movs	r3, #1
 800a324:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a326:	e000      	b.n	800a32a <ethernet_link_check_state+0xce>
      break;
 800a328:	bf00      	nop
    if(linkchanged)
 800a32a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d018      	beq.n	800a362 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a330:	f107 030c 	add.w	r3, r7, #12
 800a334:	4619      	mov	r1, r3
 800a336:	480e      	ldr	r0, [pc, #56]	; (800a370 <ethernet_link_check_state+0x114>)
 800a338:	f7f8 f842 	bl	80023c0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a33c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a33e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800a340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a342:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a344:	f107 030c 	add.w	r3, r7, #12
 800a348:	4619      	mov	r1, r3
 800a34a:	4809      	ldr	r0, [pc, #36]	; (800a370 <ethernet_link_check_state+0x114>)
 800a34c:	f7f8 f922 	bl	8002594 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800a350:	4807      	ldr	r0, [pc, #28]	; (800a370 <ethernet_link_check_state+0x114>)
 800a352:	f7f7 fd11 	bl	8001d78 <HAL_ETH_Start>
      netif_set_up(netif);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f007 f87e 	bl	8011458 <netif_set_up>
      netif_set_link_up(netif);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f007 f919 	bl	8011594 <netif_set_link_up>
}
 800a362:	bf00      	nop
 800a364:	3780      	adds	r7, #128	; 0x80
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	20005490 	.word	0x20005490
 800a370:	200053a8 	.word	0x200053a8

0800a374 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af02      	add	r7, sp, #8
 800a37a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a37c:	4812      	ldr	r0, [pc, #72]	; (800a3c8 <HAL_ETH_RxAllocateCallback+0x54>)
 800a37e:	f006 fde5 	bl	8010f4c <memp_malloc_pool>
 800a382:	60f8      	str	r0, [r7, #12]
  if (p)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d014      	beq.n	800a3b4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f103 0220 	add.w	r2, r3, #32
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	4a0d      	ldr	r2, [pc, #52]	; (800a3cc <HAL_ETH_RxAllocateCallback+0x58>)
 800a398:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a3a2:	9201      	str	r2, [sp, #4]
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2241      	movs	r2, #65	; 0x41
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	f007 fb1b 	bl	80119e8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a3b2:	e005      	b.n	800a3c0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800a3b4:	4b06      	ldr	r3, [pc, #24]	; (800a3d0 <HAL_ETH_RxAllocateCallback+0x5c>)
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	601a      	str	r2, [r3, #0]
}
 800a3c0:	bf00      	nop
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	0801e990 	.word	0x0801e990
 800a3cc:	0800a031 	.word	0x0800a031
 800a3d0:	20005264 	.word	0x20005264

0800a3d4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b089      	sub	sp, #36	; 0x24
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
 800a3e0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	3b20      	subs	r3, #32
 800a3f2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	887a      	ldrh	r2, [r7, #2]
 800a404:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d103      	bne.n	800a416 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	69fa      	ldr	r2, [r7, #28]
 800a412:	601a      	str	r2, [r3, #0]
 800a414:	e003      	b.n	800a41e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	69fa      	ldr	r2, [r7, #28]
 800a41c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	69fa      	ldr	r2, [r7, #28]
 800a422:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	61fb      	str	r3, [r7, #28]
 800a42a:	e009      	b.n	800a440 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	891a      	ldrh	r2, [r3, #8]
 800a430:	887b      	ldrh	r3, [r7, #2]
 800a432:	4413      	add	r3, r2
 800a434:	b29a      	uxth	r2, r3
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	61fb      	str	r3, [r7, #28]
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1f2      	bne.n	800a42c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800a446:	bf00      	nop
 800a448:	bf00      	nop
 800a44a:	3724      	adds	r7, #36	; 0x24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	460b      	mov	r3, r1
 800a45e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a460:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a464:	f010 fcba 	bl	801addc <USBD_static_malloc>
 800a468:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d109      	bne.n	800a484 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	32b0      	adds	r2, #176	; 0xb0
 800a47a:	2100      	movs	r1, #0
 800a47c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a480:	2302      	movs	r3, #2
 800a482:	e0d4      	b.n	800a62e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a484:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a488:	2100      	movs	r1, #0
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f010 fe4f 	bl	801b12e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	32b0      	adds	r2, #176	; 0xb0
 800a49a:	68f9      	ldr	r1, [r7, #12]
 800a49c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	32b0      	adds	r2, #176	; 0xb0
 800a4aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	7c1b      	ldrb	r3, [r3, #16]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d138      	bne.n	800a52e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a4bc:	4b5e      	ldr	r3, [pc, #376]	; (800a638 <USBD_CDC_Init+0x1e4>)
 800a4be:	7819      	ldrb	r1, [r3, #0]
 800a4c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4c4:	2202      	movs	r2, #2
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f010 fb45 	bl	801ab56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a4cc:	4b5a      	ldr	r3, [pc, #360]	; (800a638 <USBD_CDC_Init+0x1e4>)
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	f003 020f 	and.w	r2, r3, #15
 800a4d4:	6879      	ldr	r1, [r7, #4]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	4413      	add	r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	440b      	add	r3, r1
 800a4e0:	3324      	adds	r3, #36	; 0x24
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a4e6:	4b55      	ldr	r3, [pc, #340]	; (800a63c <USBD_CDC_Init+0x1e8>)
 800a4e8:	7819      	ldrb	r1, [r3, #0]
 800a4ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4ee:	2202      	movs	r2, #2
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f010 fb30 	bl	801ab56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a4f6:	4b51      	ldr	r3, [pc, #324]	; (800a63c <USBD_CDC_Init+0x1e8>)
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	f003 020f 	and.w	r2, r3, #15
 800a4fe:	6879      	ldr	r1, [r7, #4]
 800a500:	4613      	mov	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	440b      	add	r3, r1
 800a50a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a50e:	2201      	movs	r2, #1
 800a510:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a512:	4b4b      	ldr	r3, [pc, #300]	; (800a640 <USBD_CDC_Init+0x1ec>)
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	f003 020f 	and.w	r2, r3, #15
 800a51a:	6879      	ldr	r1, [r7, #4]
 800a51c:	4613      	mov	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4413      	add	r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	440b      	add	r3, r1
 800a526:	3326      	adds	r3, #38	; 0x26
 800a528:	2210      	movs	r2, #16
 800a52a:	801a      	strh	r2, [r3, #0]
 800a52c:	e035      	b.n	800a59a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a52e:	4b42      	ldr	r3, [pc, #264]	; (800a638 <USBD_CDC_Init+0x1e4>)
 800a530:	7819      	ldrb	r1, [r3, #0]
 800a532:	2340      	movs	r3, #64	; 0x40
 800a534:	2202      	movs	r2, #2
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f010 fb0d 	bl	801ab56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a53c:	4b3e      	ldr	r3, [pc, #248]	; (800a638 <USBD_CDC_Init+0x1e4>)
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	f003 020f 	and.w	r2, r3, #15
 800a544:	6879      	ldr	r1, [r7, #4]
 800a546:	4613      	mov	r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	4413      	add	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	440b      	add	r3, r1
 800a550:	3324      	adds	r3, #36	; 0x24
 800a552:	2201      	movs	r2, #1
 800a554:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a556:	4b39      	ldr	r3, [pc, #228]	; (800a63c <USBD_CDC_Init+0x1e8>)
 800a558:	7819      	ldrb	r1, [r3, #0]
 800a55a:	2340      	movs	r3, #64	; 0x40
 800a55c:	2202      	movs	r2, #2
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f010 faf9 	bl	801ab56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a564:	4b35      	ldr	r3, [pc, #212]	; (800a63c <USBD_CDC_Init+0x1e8>)
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	f003 020f 	and.w	r2, r3, #15
 800a56c:	6879      	ldr	r1, [r7, #4]
 800a56e:	4613      	mov	r3, r2
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	4413      	add	r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	440b      	add	r3, r1
 800a578:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a57c:	2201      	movs	r2, #1
 800a57e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a580:	4b2f      	ldr	r3, [pc, #188]	; (800a640 <USBD_CDC_Init+0x1ec>)
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	f003 020f 	and.w	r2, r3, #15
 800a588:	6879      	ldr	r1, [r7, #4]
 800a58a:	4613      	mov	r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4413      	add	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	440b      	add	r3, r1
 800a594:	3326      	adds	r3, #38	; 0x26
 800a596:	2210      	movs	r2, #16
 800a598:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a59a:	4b29      	ldr	r3, [pc, #164]	; (800a640 <USBD_CDC_Init+0x1ec>)
 800a59c:	7819      	ldrb	r1, [r3, #0]
 800a59e:	2308      	movs	r3, #8
 800a5a0:	2203      	movs	r2, #3
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f010 fad7 	bl	801ab56 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a5a8:	4b25      	ldr	r3, [pc, #148]	; (800a640 <USBD_CDC_Init+0x1ec>)
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	f003 020f 	and.w	r2, r3, #15
 800a5b0:	6879      	ldr	r1, [r7, #4]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4413      	add	r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	440b      	add	r3, r1
 800a5bc:	3324      	adds	r3, #36	; 0x24
 800a5be:	2201      	movs	r2, #1
 800a5c0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	33b0      	adds	r3, #176	; 0xb0
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	4413      	add	r3, r2
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d101      	bne.n	800a5fc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	e018      	b.n	800a62e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	7c1b      	ldrb	r3, [r3, #16]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d10a      	bne.n	800a61a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a604:	4b0d      	ldr	r3, [pc, #52]	; (800a63c <USBD_CDC_Init+0x1e8>)
 800a606:	7819      	ldrb	r1, [r3, #0]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a60e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f010 fbad 	bl	801ad72 <USBD_LL_PrepareReceive>
 800a618:	e008      	b.n	800a62c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a61a:	4b08      	ldr	r3, [pc, #32]	; (800a63c <USBD_CDC_Init+0x1e8>)
 800a61c:	7819      	ldrb	r1, [r3, #0]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a624:	2340      	movs	r3, #64	; 0x40
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f010 fba3 	bl	801ad72 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	200000a7 	.word	0x200000a7
 800a63c:	200000a8 	.word	0x200000a8
 800a640:	200000a9 	.word	0x200000a9

0800a644 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	460b      	mov	r3, r1
 800a64e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a650:	4b3a      	ldr	r3, [pc, #232]	; (800a73c <USBD_CDC_DeInit+0xf8>)
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	4619      	mov	r1, r3
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f010 faa3 	bl	801aba2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a65c:	4b37      	ldr	r3, [pc, #220]	; (800a73c <USBD_CDC_DeInit+0xf8>)
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	f003 020f 	and.w	r2, r3, #15
 800a664:	6879      	ldr	r1, [r7, #4]
 800a666:	4613      	mov	r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	4413      	add	r3, r2
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	440b      	add	r3, r1
 800a670:	3324      	adds	r3, #36	; 0x24
 800a672:	2200      	movs	r2, #0
 800a674:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a676:	4b32      	ldr	r3, [pc, #200]	; (800a740 <USBD_CDC_DeInit+0xfc>)
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	4619      	mov	r1, r3
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f010 fa90 	bl	801aba2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a682:	4b2f      	ldr	r3, [pc, #188]	; (800a740 <USBD_CDC_DeInit+0xfc>)
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	f003 020f 	and.w	r2, r3, #15
 800a68a:	6879      	ldr	r1, [r7, #4]
 800a68c:	4613      	mov	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4413      	add	r3, r2
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	440b      	add	r3, r1
 800a696:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a69a:	2200      	movs	r2, #0
 800a69c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a69e:	4b29      	ldr	r3, [pc, #164]	; (800a744 <USBD_CDC_DeInit+0x100>)
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f010 fa7c 	bl	801aba2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a6aa:	4b26      	ldr	r3, [pc, #152]	; (800a744 <USBD_CDC_DeInit+0x100>)
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	f003 020f 	and.w	r2, r3, #15
 800a6b2:	6879      	ldr	r1, [r7, #4]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4413      	add	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	440b      	add	r3, r1
 800a6be:	3324      	adds	r3, #36	; 0x24
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a6c4:	4b1f      	ldr	r3, [pc, #124]	; (800a744 <USBD_CDC_DeInit+0x100>)
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	f003 020f 	and.w	r2, r3, #15
 800a6cc:	6879      	ldr	r1, [r7, #4]
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	4413      	add	r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	440b      	add	r3, r1
 800a6d8:	3326      	adds	r3, #38	; 0x26
 800a6da:	2200      	movs	r2, #0
 800a6dc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	32b0      	adds	r2, #176	; 0xb0
 800a6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d01f      	beq.n	800a730 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	33b0      	adds	r3, #176	; 0xb0
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	32b0      	adds	r2, #176	; 0xb0
 800a70e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a712:	4618      	mov	r0, r3
 800a714:	f010 fb70 	bl	801adf8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	32b0      	adds	r2, #176	; 0xb0
 800a722:	2100      	movs	r1, #0
 800a724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	200000a7 	.word	0x200000a7
 800a740:	200000a8 	.word	0x200000a8
 800a744:	200000a9 	.word	0x200000a9

0800a748 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	32b0      	adds	r2, #176	; 0xb0
 800a75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a760:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a762:	2300      	movs	r3, #0
 800a764:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a766:	2300      	movs	r3, #0
 800a768:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a76a:	2300      	movs	r3, #0
 800a76c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d101      	bne.n	800a778 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a774:	2303      	movs	r3, #3
 800a776:	e0bf      	b.n	800a8f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a780:	2b00      	cmp	r3, #0
 800a782:	d050      	beq.n	800a826 <USBD_CDC_Setup+0xde>
 800a784:	2b20      	cmp	r3, #32
 800a786:	f040 80af 	bne.w	800a8e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	88db      	ldrh	r3, [r3, #6]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d03a      	beq.n	800a808 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	b25b      	sxtb	r3, r3
 800a798:	2b00      	cmp	r3, #0
 800a79a:	da1b      	bge.n	800a7d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	33b0      	adds	r3, #176	; 0xb0
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4413      	add	r3, r2
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	683a      	ldr	r2, [r7, #0]
 800a7b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a7b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	88d2      	ldrh	r2, [r2, #6]
 800a7b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	88db      	ldrh	r3, [r3, #6]
 800a7be:	2b07      	cmp	r3, #7
 800a7c0:	bf28      	it	cs
 800a7c2:	2307      	movcs	r3, #7
 800a7c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	89fa      	ldrh	r2, [r7, #14]
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f003 fd2d 	bl	800e22c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a7d2:	e090      	b.n	800a8f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	785a      	ldrb	r2, [r3, #1]
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	88db      	ldrh	r3, [r3, #6]
 800a7e2:	2b3f      	cmp	r3, #63	; 0x3f
 800a7e4:	d803      	bhi.n	800a7ee <USBD_CDC_Setup+0xa6>
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	88db      	ldrh	r3, [r3, #6]
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	e000      	b.n	800a7f0 <USBD_CDC_Setup+0xa8>
 800a7ee:	2240      	movs	r2, #64	; 0x40
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a7f6:	6939      	ldr	r1, [r7, #16]
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a7fe:	461a      	mov	r2, r3
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f003 fd3f 	bl	800e284 <USBD_CtlPrepareRx>
      break;
 800a806:	e076      	b.n	800a8f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	33b0      	adds	r3, #176	; 0xb0
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4413      	add	r3, r2
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	683a      	ldr	r2, [r7, #0]
 800a81c:	7850      	ldrb	r0, [r2, #1]
 800a81e:	2200      	movs	r2, #0
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	4798      	blx	r3
      break;
 800a824:	e067      	b.n	800a8f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	785b      	ldrb	r3, [r3, #1]
 800a82a:	2b0b      	cmp	r3, #11
 800a82c:	d851      	bhi.n	800a8d2 <USBD_CDC_Setup+0x18a>
 800a82e:	a201      	add	r2, pc, #4	; (adr r2, 800a834 <USBD_CDC_Setup+0xec>)
 800a830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a834:	0800a865 	.word	0x0800a865
 800a838:	0800a8e1 	.word	0x0800a8e1
 800a83c:	0800a8d3 	.word	0x0800a8d3
 800a840:	0800a8d3 	.word	0x0800a8d3
 800a844:	0800a8d3 	.word	0x0800a8d3
 800a848:	0800a8d3 	.word	0x0800a8d3
 800a84c:	0800a8d3 	.word	0x0800a8d3
 800a850:	0800a8d3 	.word	0x0800a8d3
 800a854:	0800a8d3 	.word	0x0800a8d3
 800a858:	0800a8d3 	.word	0x0800a8d3
 800a85c:	0800a88f 	.word	0x0800a88f
 800a860:	0800a8b9 	.word	0x0800a8b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	2b03      	cmp	r3, #3
 800a86e:	d107      	bne.n	800a880 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a870:	f107 030a 	add.w	r3, r7, #10
 800a874:	2202      	movs	r2, #2
 800a876:	4619      	mov	r1, r3
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f003 fcd7 	bl	800e22c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a87e:	e032      	b.n	800a8e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a880:	6839      	ldr	r1, [r7, #0]
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f003 fc61 	bl	800e14a <USBD_CtlError>
            ret = USBD_FAIL;
 800a888:	2303      	movs	r3, #3
 800a88a:	75fb      	strb	r3, [r7, #23]
          break;
 800a88c:	e02b      	b.n	800a8e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2b03      	cmp	r3, #3
 800a898:	d107      	bne.n	800a8aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a89a:	f107 030d 	add.w	r3, r7, #13
 800a89e:	2201      	movs	r2, #1
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f003 fcc2 	bl	800e22c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a8a8:	e01d      	b.n	800a8e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a8aa:	6839      	ldr	r1, [r7, #0]
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f003 fc4c 	bl	800e14a <USBD_CtlError>
            ret = USBD_FAIL;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	75fb      	strb	r3, [r7, #23]
          break;
 800a8b6:	e016      	b.n	800a8e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b03      	cmp	r3, #3
 800a8c2:	d00f      	beq.n	800a8e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a8c4:	6839      	ldr	r1, [r7, #0]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f003 fc3f 	bl	800e14a <USBD_CtlError>
            ret = USBD_FAIL;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a8d0:	e008      	b.n	800a8e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f003 fc38 	bl	800e14a <USBD_CtlError>
          ret = USBD_FAIL;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	75fb      	strb	r3, [r7, #23]
          break;
 800a8de:	e002      	b.n	800a8e6 <USBD_CDC_Setup+0x19e>
          break;
 800a8e0:	bf00      	nop
 800a8e2:	e008      	b.n	800a8f6 <USBD_CDC_Setup+0x1ae>
          break;
 800a8e4:	bf00      	nop
      }
      break;
 800a8e6:	e006      	b.n	800a8f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a8e8:	6839      	ldr	r1, [r7, #0]
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f003 fc2d 	bl	800e14a <USBD_CtlError>
      ret = USBD_FAIL;
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a8f4:	bf00      	nop
  }

  return (uint8_t)ret;
 800a8f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3718      	adds	r7, #24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	460b      	mov	r3, r1
 800a90a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a912:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	32b0      	adds	r2, #176	; 0xb0
 800a91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a926:	2303      	movs	r3, #3
 800a928:	e065      	b.n	800a9f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	32b0      	adds	r2, #176	; 0xb0
 800a934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a938:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a93a:	78fb      	ldrb	r3, [r7, #3]
 800a93c:	f003 020f 	and.w	r2, r3, #15
 800a940:	6879      	ldr	r1, [r7, #4]
 800a942:	4613      	mov	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4413      	add	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	440b      	add	r3, r1
 800a94c:	3318      	adds	r3, #24
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d02f      	beq.n	800a9b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a954:	78fb      	ldrb	r3, [r7, #3]
 800a956:	f003 020f 	and.w	r2, r3, #15
 800a95a:	6879      	ldr	r1, [r7, #4]
 800a95c:	4613      	mov	r3, r2
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	4413      	add	r3, r2
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	440b      	add	r3, r1
 800a966:	3318      	adds	r3, #24
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	78fb      	ldrb	r3, [r7, #3]
 800a96c:	f003 010f 	and.w	r1, r3, #15
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	460b      	mov	r3, r1
 800a974:	00db      	lsls	r3, r3, #3
 800a976:	440b      	add	r3, r1
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	4403      	add	r3, r0
 800a97c:	331c      	adds	r3, #28
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	fbb2 f1f3 	udiv	r1, r2, r3
 800a984:	fb01 f303 	mul.w	r3, r1, r3
 800a988:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d112      	bne.n	800a9b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a98e:	78fb      	ldrb	r3, [r7, #3]
 800a990:	f003 020f 	and.w	r2, r3, #15
 800a994:	6879      	ldr	r1, [r7, #4]
 800a996:	4613      	mov	r3, r2
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4413      	add	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	440b      	add	r3, r1
 800a9a0:	3318      	adds	r3, #24
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a9a6:	78f9      	ldrb	r1, [r7, #3]
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f010 f9bf 	bl	801ad30 <USBD_LL_Transmit>
 800a9b2:	e01f      	b.n	800a9f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	33b0      	adds	r3, #176	; 0xb0
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	4413      	add	r3, r2
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d010      	beq.n	800a9f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	33b0      	adds	r3, #176	; 0xb0
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	4413      	add	r3, r2
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	68ba      	ldr	r2, [r7, #8]
 800a9e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a9f0:	78fa      	ldrb	r2, [r7, #3]
 800a9f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b084      	sub	sp, #16
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	460b      	mov	r3, r1
 800aa08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	32b0      	adds	r2, #176	; 0xb0
 800aa14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	32b0      	adds	r2, #176	; 0xb0
 800aa24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d101      	bne.n	800aa30 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	e01a      	b.n	800aa66 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aa30:	78fb      	ldrb	r3, [r7, #3]
 800aa32:	4619      	mov	r1, r3
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f010 f9bd 	bl	801adb4 <USBD_LL_GetRxDataSize>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	33b0      	adds	r3, #176	; 0xb0
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	4413      	add	r3, r2
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aa60:	4611      	mov	r1, r2
 800aa62:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b084      	sub	sp, #16
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	32b0      	adds	r2, #176	; 0xb0
 800aa80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d101      	bne.n	800aa90 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aa8c:	2303      	movs	r3, #3
 800aa8e:	e025      	b.n	800aadc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	33b0      	adds	r3, #176	; 0xb0
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4413      	add	r3, r2
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d01a      	beq.n	800aada <USBD_CDC_EP0_RxReady+0x6c>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aaaa:	2bff      	cmp	r3, #255	; 0xff
 800aaac:	d015      	beq.n	800aada <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	33b0      	adds	r3, #176	; 0xb0
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4413      	add	r3, r2
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800aac6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aace:	b292      	uxth	r2, r2
 800aad0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	22ff      	movs	r2, #255	; 0xff
 800aad6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aaec:	2182      	movs	r1, #130	; 0x82
 800aaee:	4818      	ldr	r0, [pc, #96]	; (800ab50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aaf0:	f002 fcf2 	bl	800d4d8 <USBD_GetEpDesc>
 800aaf4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	4815      	ldr	r0, [pc, #84]	; (800ab50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aafa:	f002 fced 	bl	800d4d8 <USBD_GetEpDesc>
 800aafe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ab00:	2181      	movs	r1, #129	; 0x81
 800ab02:	4813      	ldr	r0, [pc, #76]	; (800ab50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ab04:	f002 fce8 	bl	800d4d8 <USBD_GetEpDesc>
 800ab08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d002      	beq.n	800ab16 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	2210      	movs	r2, #16
 800ab14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d006      	beq.n	800ab2a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab24:	711a      	strb	r2, [r3, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d006      	beq.n	800ab3e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab38:	711a      	strb	r2, [r3, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2243      	movs	r2, #67	; 0x43
 800ab42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ab44:	4b02      	ldr	r3, [pc, #8]	; (800ab50 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3718      	adds	r7, #24
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	20000064 	.word	0x20000064

0800ab54 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b086      	sub	sp, #24
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ab5c:	2182      	movs	r1, #130	; 0x82
 800ab5e:	4818      	ldr	r0, [pc, #96]	; (800abc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab60:	f002 fcba 	bl	800d4d8 <USBD_GetEpDesc>
 800ab64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ab66:	2101      	movs	r1, #1
 800ab68:	4815      	ldr	r0, [pc, #84]	; (800abc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab6a:	f002 fcb5 	bl	800d4d8 <USBD_GetEpDesc>
 800ab6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ab70:	2181      	movs	r1, #129	; 0x81
 800ab72:	4813      	ldr	r0, [pc, #76]	; (800abc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab74:	f002 fcb0 	bl	800d4d8 <USBD_GetEpDesc>
 800ab78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	2210      	movs	r2, #16
 800ab84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d006      	beq.n	800ab9a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	711a      	strb	r2, [r3, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f042 0202 	orr.w	r2, r2, #2
 800ab98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d006      	beq.n	800abae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	711a      	strb	r2, [r3, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f042 0202 	orr.w	r2, r2, #2
 800abac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2243      	movs	r2, #67	; 0x43
 800abb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800abb4:	4b02      	ldr	r3, [pc, #8]	; (800abc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3718      	adds	r7, #24
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	20000064 	.word	0x20000064

0800abc4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b086      	sub	sp, #24
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800abcc:	2182      	movs	r1, #130	; 0x82
 800abce:	4818      	ldr	r0, [pc, #96]	; (800ac30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abd0:	f002 fc82 	bl	800d4d8 <USBD_GetEpDesc>
 800abd4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800abd6:	2101      	movs	r1, #1
 800abd8:	4815      	ldr	r0, [pc, #84]	; (800ac30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abda:	f002 fc7d 	bl	800d4d8 <USBD_GetEpDesc>
 800abde:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800abe0:	2181      	movs	r1, #129	; 0x81
 800abe2:	4813      	ldr	r0, [pc, #76]	; (800ac30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abe4:	f002 fc78 	bl	800d4d8 <USBD_GetEpDesc>
 800abe8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d002      	beq.n	800abf6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	2210      	movs	r2, #16
 800abf4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d006      	beq.n	800ac0a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac04:	711a      	strb	r2, [r3, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d006      	beq.n	800ac1e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac18:	711a      	strb	r2, [r3, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2243      	movs	r2, #67	; 0x43
 800ac22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac24:	4b02      	ldr	r3, [pc, #8]	; (800ac30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3718      	adds	r7, #24
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	20000064 	.word	0x20000064

0800ac34 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	220a      	movs	r2, #10
 800ac40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ac42:	4b03      	ldr	r3, [pc, #12]	; (800ac50 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr
 800ac50:	20000020 	.word	0x20000020

0800ac54 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d101      	bne.n	800ac68 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ac64:	2303      	movs	r3, #3
 800ac66:	e009      	b.n	800ac7c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	33b0      	adds	r3, #176	; 0xb0
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	683a      	ldr	r2, [r7, #0]
 800ac78:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b087      	sub	sp, #28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	32b0      	adds	r2, #176	; 0xb0
 800ac9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aca2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800acaa:	2303      	movs	r3, #3
 800acac:	e008      	b.n	800acc0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	371c      	adds	r7, #28
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	32b0      	adds	r2, #176	; 0xb0
 800ace0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d101      	bne.n	800acf0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800acec:	2303      	movs	r3, #3
 800acee:	e004      	b.n	800acfa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3714      	adds	r7, #20
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
	...

0800ad08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	32b0      	adds	r2, #176	; 0xb0
 800ad1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad1e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	32b0      	adds	r2, #176	; 0xb0
 800ad2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d101      	bne.n	800ad36 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ad32:	2303      	movs	r3, #3
 800ad34:	e018      	b.n	800ad68 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	7c1b      	ldrb	r3, [r3, #16]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad3e:	4b0c      	ldr	r3, [pc, #48]	; (800ad70 <USBD_CDC_ReceivePacket+0x68>)
 800ad40:	7819      	ldrb	r1, [r3, #0]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f010 f810 	bl	801ad72 <USBD_LL_PrepareReceive>
 800ad52:	e008      	b.n	800ad66 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad54:	4b06      	ldr	r3, [pc, #24]	; (800ad70 <USBD_CDC_ReceivePacket+0x68>)
 800ad56:	7819      	ldrb	r1, [r3, #0]
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad5e:	2340      	movs	r3, #64	; 0x40
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f010 f806 	bl	801ad72 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	200000a8 	.word	0x200000a8

0800ad74 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800ad80:	f44f 701d 	mov.w	r0, #628	; 0x274
 800ad84:	f010 f82a 	bl	801addc <USBD_static_malloc>
 800ad88:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d109      	bne.n	800ada4 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	32b0      	adds	r2, #176	; 0xb0
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ada0:	2302      	movs	r3, #2
 800ada2:	e06e      	b.n	800ae82 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	32b0      	adds	r2, #176	; 0xb0
 800adae:	68f9      	ldr	r1, [r7, #12]
 800adb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	32b0      	adds	r2, #176	; 0xb0
 800adbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	7c1b      	ldrb	r3, [r3, #16]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d12b      	bne.n	800ae28 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800add0:	4b2e      	ldr	r3, [pc, #184]	; (800ae8c <USBD_MSC_Init+0x118>)
 800add2:	7819      	ldrb	r1, [r3, #0]
 800add4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800add8:	2202      	movs	r2, #2
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f00f febb 	bl	801ab56 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800ade0:	4b2a      	ldr	r3, [pc, #168]	; (800ae8c <USBD_MSC_Init+0x118>)
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	f003 020f 	and.w	r2, r3, #15
 800ade8:	6879      	ldr	r1, [r7, #4]
 800adea:	4613      	mov	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4413      	add	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	440b      	add	r3, r1
 800adf4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800adf8:	2201      	movs	r2, #1
 800adfa:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800adfc:	4b24      	ldr	r3, [pc, #144]	; (800ae90 <USBD_MSC_Init+0x11c>)
 800adfe:	7819      	ldrb	r1, [r3, #0]
 800ae00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae04:	2202      	movs	r2, #2
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f00f fea5 	bl	801ab56 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800ae0c:	4b20      	ldr	r3, [pc, #128]	; (800ae90 <USBD_MSC_Init+0x11c>)
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	f003 020f 	and.w	r2, r3, #15
 800ae14:	6879      	ldr	r1, [r7, #4]
 800ae16:	4613      	mov	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4413      	add	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	440b      	add	r3, r1
 800ae20:	3324      	adds	r3, #36	; 0x24
 800ae22:	2201      	movs	r2, #1
 800ae24:	801a      	strh	r2, [r3, #0]
 800ae26:	e028      	b.n	800ae7a <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ae28:	4b18      	ldr	r3, [pc, #96]	; (800ae8c <USBD_MSC_Init+0x118>)
 800ae2a:	7819      	ldrb	r1, [r3, #0]
 800ae2c:	2340      	movs	r3, #64	; 0x40
 800ae2e:	2202      	movs	r2, #2
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f00f fe90 	bl	801ab56 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 800ae36:	4b15      	ldr	r3, [pc, #84]	; (800ae8c <USBD_MSC_Init+0x118>)
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	f003 020f 	and.w	r2, r3, #15
 800ae3e:	6879      	ldr	r1, [r7, #4]
 800ae40:	4613      	mov	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4413      	add	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	440b      	add	r3, r1
 800ae4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ae4e:	2201      	movs	r2, #1
 800ae50:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ae52:	4b0f      	ldr	r3, [pc, #60]	; (800ae90 <USBD_MSC_Init+0x11c>)
 800ae54:	7819      	ldrb	r1, [r3, #0]
 800ae56:	2340      	movs	r3, #64	; 0x40
 800ae58:	2202      	movs	r2, #2
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f00f fe7b 	bl	801ab56 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 800ae60:	4b0b      	ldr	r3, [pc, #44]	; (800ae90 <USBD_MSC_Init+0x11c>)
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	f003 020f 	and.w	r2, r3, #15
 800ae68:	6879      	ldr	r1, [r7, #4]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	440b      	add	r3, r1
 800ae74:	3324      	adds	r3, #36	; 0x24
 800ae76:	2201      	movs	r2, #1
 800ae78:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 fa2c 	bl	800b2d8 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	2000010f 	.word	0x2000010f
 800ae90:	2000010e 	.word	0x2000010e

0800ae94 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 800aea0:	4b26      	ldr	r3, [pc, #152]	; (800af3c <USBD_MSC_DeInit+0xa8>)
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	4619      	mov	r1, r3
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f00f fe7b 	bl	801aba2 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 800aeac:	4b23      	ldr	r3, [pc, #140]	; (800af3c <USBD_MSC_DeInit+0xa8>)
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	f003 020f 	and.w	r2, r3, #15
 800aeb4:	6879      	ldr	r1, [r7, #4]
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4413      	add	r3, r2
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	440b      	add	r3, r1
 800aec0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aec4:	2200      	movs	r2, #0
 800aec6:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800aec8:	4b1d      	ldr	r3, [pc, #116]	; (800af40 <USBD_MSC_DeInit+0xac>)
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	4619      	mov	r1, r3
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f00f fe67 	bl	801aba2 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 800aed4:	4b1a      	ldr	r3, [pc, #104]	; (800af40 <USBD_MSC_DeInit+0xac>)
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	f003 020f 	and.w	r2, r3, #15
 800aedc:	6879      	ldr	r1, [r7, #4]
 800aede:	4613      	mov	r3, r2
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	4413      	add	r3, r2
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	440b      	add	r3, r1
 800aee8:	3324      	adds	r3, #36	; 0x24
 800aeea:	2200      	movs	r2, #0
 800aeec:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	32b0      	adds	r2, #176	; 0xb0
 800aef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d018      	beq.n	800af32 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fa67 	bl	800b3d4 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	32b0      	adds	r2, #176	; 0xb0
 800af10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af14:	4618      	mov	r0, r3
 800af16:	f00f ff6f 	bl	801adf8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	32b0      	adds	r2, #176	; 0xb0
 800af24:	2100      	movs	r1, #0
 800af26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	2000010f 	.word	0x2000010f
 800af40:	2000010e 	.word	0x2000010e

0800af44 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b086      	sub	sp, #24
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	32b0      	adds	r2, #176	; 0xb0
 800af58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800af5e:	2300      	movs	r3, #0
 800af60:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800af62:	2300      	movs	r3, #0
 800af64:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d101      	bne.n	800af70 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800af6c:	2303      	movs	r3, #3
 800af6e:	e0e1      	b.n	800b134 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d053      	beq.n	800b024 <USBD_MSC_Setup+0xe0>
 800af7c:	2b20      	cmp	r3, #32
 800af7e:	f040 80d1 	bne.w	800b124 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	785b      	ldrb	r3, [r3, #1]
 800af86:	2bfe      	cmp	r3, #254	; 0xfe
 800af88:	d002      	beq.n	800af90 <USBD_MSC_Setup+0x4c>
 800af8a:	2bff      	cmp	r3, #255	; 0xff
 800af8c:	d02a      	beq.n	800afe4 <USBD_MSC_Setup+0xa0>
 800af8e:	e041      	b.n	800b014 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	885b      	ldrh	r3, [r3, #2]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d11e      	bne.n	800afd6 <USBD_MSC_Setup+0x92>
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	88db      	ldrh	r3, [r3, #6]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d11a      	bne.n	800afd6 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	da15      	bge.n	800afd6 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	33b0      	adds	r3, #176	; 0xb0
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	4413      	add	r3, r2
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	699b      	ldr	r3, [r3, #24]
 800afbc:	4798      	blx	r3
 800afbe:	4603      	mov	r3, r0
 800afc0:	461a      	mov	r2, r3
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	2201      	movs	r2, #1
 800afca:	4619      	mov	r1, r3
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f003 f92d 	bl	800e22c <USBD_CtlSendData>
 800afd2:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afd4:	e025      	b.n	800b022 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800afd6:	6839      	ldr	r1, [r7, #0]
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f003 f8b6 	bl	800e14a <USBD_CtlError>
            ret = USBD_FAIL;
 800afde:	2303      	movs	r3, #3
 800afe0:	75fb      	strb	r3, [r7, #23]
          break;
 800afe2:	e01e      	b.n	800b022 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	885b      	ldrh	r3, [r3, #2]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10c      	bne.n	800b006 <USBD_MSC_Setup+0xc2>
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	88db      	ldrh	r3, [r3, #6]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d108      	bne.n	800b006 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800affa:	2b00      	cmp	r3, #0
 800affc:	db03      	blt.n	800b006 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f9b4 	bl	800b36c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b004:	e00d      	b.n	800b022 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f003 f89e 	bl	800e14a <USBD_CtlError>
            ret = USBD_FAIL;
 800b00e:	2303      	movs	r3, #3
 800b010:	75fb      	strb	r3, [r7, #23]
          break;
 800b012:	e006      	b.n	800b022 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f003 f897 	bl	800e14a <USBD_CtlError>
          ret = USBD_FAIL;
 800b01c:	2303      	movs	r3, #3
 800b01e:	75fb      	strb	r3, [r7, #23]
          break;
 800b020:	bf00      	nop
      }
      break;
 800b022:	e086      	b.n	800b132 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	785b      	ldrb	r3, [r3, #1]
 800b028:	2b0b      	cmp	r3, #11
 800b02a:	d872      	bhi.n	800b112 <USBD_MSC_Setup+0x1ce>
 800b02c:	a201      	add	r2, pc, #4	; (adr r2, 800b034 <USBD_MSC_Setup+0xf0>)
 800b02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b032:	bf00      	nop
 800b034:	0800b065 	.word	0x0800b065
 800b038:	0800b0e1 	.word	0x0800b0e1
 800b03c:	0800b113 	.word	0x0800b113
 800b040:	0800b113 	.word	0x0800b113
 800b044:	0800b113 	.word	0x0800b113
 800b048:	0800b113 	.word	0x0800b113
 800b04c:	0800b113 	.word	0x0800b113
 800b050:	0800b113 	.word	0x0800b113
 800b054:	0800b113 	.word	0x0800b113
 800b058:	0800b113 	.word	0x0800b113
 800b05c:	0800b08f 	.word	0x0800b08f
 800b060:	0800b0b9 	.word	0x0800b0b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	2b03      	cmp	r3, #3
 800b06e:	d107      	bne.n	800b080 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b070:	f107 030e 	add.w	r3, r7, #14
 800b074:	2202      	movs	r2, #2
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f003 f8d7 	bl	800e22c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b07e:	e050      	b.n	800b122 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b080:	6839      	ldr	r1, [r7, #0]
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f003 f861 	bl	800e14a <USBD_CtlError>
            ret = USBD_FAIL;
 800b088:	2303      	movs	r3, #3
 800b08a:	75fb      	strb	r3, [r7, #23]
          break;
 800b08c:	e049      	b.n	800b122 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b094:	b2db      	uxtb	r3, r3
 800b096:	2b03      	cmp	r3, #3
 800b098:	d107      	bne.n	800b0aa <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	3304      	adds	r3, #4
 800b09e:	2201      	movs	r2, #1
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f003 f8c2 	bl	800e22c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0a8:	e03b      	b.n	800b122 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b0aa:	6839      	ldr	r1, [r7, #0]
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f003 f84c 	bl	800e14a <USBD_CtlError>
            ret = USBD_FAIL;
 800b0b2:	2303      	movs	r3, #3
 800b0b4:	75fb      	strb	r3, [r7, #23]
          break;
 800b0b6:	e034      	b.n	800b122 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	2b03      	cmp	r3, #3
 800b0c2:	d106      	bne.n	800b0d2 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	885b      	ldrh	r3, [r3, #2]
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0d0:	e027      	b.n	800b122 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f003 f838 	bl	800e14a <USBD_CtlError>
            ret = USBD_FAIL;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	75fb      	strb	r3, [r7, #23]
          break;
 800b0de:	e020      	b.n	800b122 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	2b03      	cmp	r3, #3
 800b0ea:	d119      	bne.n	800b120 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	885b      	ldrh	r3, [r3, #2]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d115      	bne.n	800b120 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	889b      	ldrh	r3, [r3, #4]
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f00f fd6f 	bl	801abe0 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	889b      	ldrh	r3, [r3, #4]
 800b106:	b2db      	uxtb	r3, r3
 800b108:	4619      	mov	r1, r3
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fb2e 	bl	800b76c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800b110:	e006      	b.n	800b120 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 800b112:	6839      	ldr	r1, [r7, #0]
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f003 f818 	bl	800e14a <USBD_CtlError>
          ret = USBD_FAIL;
 800b11a:	2303      	movs	r3, #3
 800b11c:	75fb      	strb	r3, [r7, #23]
          break;
 800b11e:	e000      	b.n	800b122 <USBD_MSC_Setup+0x1de>
          break;
 800b120:	bf00      	nop
      }
      break;
 800b122:	e006      	b.n	800b132 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 800b124:	6839      	ldr	r1, [r7, #0]
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f003 f80f 	bl	800e14a <USBD_CtlError>
      ret = USBD_FAIL;
 800b12c:	2303      	movs	r3, #3
 800b12e:	75fb      	strb	r3, [r7, #23]
      break;
 800b130:	bf00      	nop
  }

  return (uint8_t)ret;
 800b132:	7dfb      	ldrb	r3, [r7, #23]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3718      	adds	r7, #24
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	460b      	mov	r3, r1
 800b146:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800b148:	78fb      	ldrb	r3, [r7, #3]
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 f959 	bl	800b404 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3708      	adds	r7, #8
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	460b      	mov	r3, r1
 800b166:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800b168:	78fb      	ldrb	r3, [r7, #3]
 800b16a:	4619      	mov	r1, r3
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 f983 	bl	800b478 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800b184:	2181      	movs	r1, #129	; 0x81
 800b186:	4812      	ldr	r0, [pc, #72]	; (800b1d0 <USBD_MSC_GetHSCfgDesc+0x54>)
 800b188:	f002 f9a6 	bl	800d4d8 <USBD_GetEpDesc>
 800b18c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800b18e:	2101      	movs	r1, #1
 800b190:	480f      	ldr	r0, [pc, #60]	; (800b1d0 <USBD_MSC_GetHSCfgDesc+0x54>)
 800b192:	f002 f9a1 	bl	800d4d8 <USBD_GetEpDesc>
 800b196:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d006      	beq.n	800b1ac <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	711a      	strb	r2, [r3, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f042 0202 	orr.w	r2, r2, #2
 800b1aa:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d006      	beq.n	800b1c0 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	711a      	strb	r2, [r3, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f042 0202 	orr.w	r2, r2, #2
 800b1be:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2220      	movs	r2, #32
 800b1c4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800b1c6:	4b02      	ldr	r3, [pc, #8]	; (800b1d0 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	200000e4 	.word	0x200000e4

0800b1d4 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800b1dc:	2181      	movs	r1, #129	; 0x81
 800b1de:	4812      	ldr	r0, [pc, #72]	; (800b228 <USBD_MSC_GetFSCfgDesc+0x54>)
 800b1e0:	f002 f97a 	bl	800d4d8 <USBD_GetEpDesc>
 800b1e4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800b1e6:	2101      	movs	r1, #1
 800b1e8:	480f      	ldr	r0, [pc, #60]	; (800b228 <USBD_MSC_GetFSCfgDesc+0x54>)
 800b1ea:	f002 f975 	bl	800d4d8 <USBD_GetEpDesc>
 800b1ee:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d006      	beq.n	800b204 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1fe:	711a      	strb	r2, [r3, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d006      	beq.n	800b218 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b212:	711a      	strb	r2, [r3, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2220      	movs	r2, #32
 800b21c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800b21e:	4b02      	ldr	r3, [pc, #8]	; (800b228 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800b220:	4618      	mov	r0, r3
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	200000e4 	.word	0x200000e4

0800b22c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800b234:	2181      	movs	r1, #129	; 0x81
 800b236:	4812      	ldr	r0, [pc, #72]	; (800b280 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800b238:	f002 f94e 	bl	800d4d8 <USBD_GetEpDesc>
 800b23c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800b23e:	2101      	movs	r1, #1
 800b240:	480f      	ldr	r0, [pc, #60]	; (800b280 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800b242:	f002 f949 	bl	800d4d8 <USBD_GetEpDesc>
 800b246:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d006      	beq.n	800b25c <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b256:	711a      	strb	r2, [r3, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d006      	beq.n	800b270 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	2200      	movs	r2, #0
 800b266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b26a:	711a      	strb	r2, [r3, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2220      	movs	r2, #32
 800b274:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800b276:	4b02      	ldr	r3, [pc, #8]	; (800b280 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	200000e4 	.word	0x200000e4

0800b284 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	220a      	movs	r2, #10
 800b290:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800b292:	4b03      	ldr	r3, [pc, #12]	; (800b2a0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b294:	4618      	mov	r0, r3
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr
 800b2a0:	20000104 	.word	0x20000104

0800b2a4 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d101      	bne.n	800b2b8 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b2b4:	2303      	movs	r3, #3
 800b2b6:	e009      	b.n	800b2cc <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	33b0      	adds	r3, #176	; 0xb0
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	4413      	add	r3, r2
 800b2c6:	683a      	ldr	r2, [r7, #0]
 800b2c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	32b0      	adds	r2, #176	; 0xb0
 800b2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ee:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d032      	beq.n	800b35c <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	33b0      	adds	r3, #176	; 0xb0
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	4413      	add	r3, r2
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2000      	movs	r0, #0
 800b32e:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800b330:	4b0c      	ldr	r3, [pc, #48]	; (800b364 <MSC_BOT_Init+0x8c>)
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	4619      	mov	r1, r3
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f00f fc52 	bl	801abe0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800b33c:	4b0a      	ldr	r3, [pc, #40]	; (800b368 <MSC_BOT_Init+0x90>)
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	4619      	mov	r1, r3
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f00f fc4c 	bl	801abe0 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b348:	4b06      	ldr	r3, [pc, #24]	; (800b364 <MSC_BOT_Init+0x8c>)
 800b34a:	7819      	ldrb	r1, [r3, #0]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800b352:	231f      	movs	r3, #31
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f00f fd0c 	bl	801ad72 <USBD_LL_PrepareReceive>
 800b35a:	e000      	b.n	800b35e <MSC_BOT_Init+0x86>
    return;
 800b35c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	2000010f 	.word	0x2000010f
 800b368:	2000010e 	.word	0x2000010e

0800b36c <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	32b0      	adds	r2, #176	; 0xb0
 800b37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b382:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d01b      	beq.n	800b3c2 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2200      	movs	r2, #0
 800b38e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2201      	movs	r2, #1
 800b394:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800b396:	4b0d      	ldr	r3, [pc, #52]	; (800b3cc <MSC_BOT_Reset+0x60>)
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	4619      	mov	r1, r3
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f00f fc5d 	bl	801ac5c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800b3a2:	4b0b      	ldr	r3, [pc, #44]	; (800b3d0 <MSC_BOT_Reset+0x64>)
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f00f fc57 	bl	801ac5c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b3ae:	4b08      	ldr	r3, [pc, #32]	; (800b3d0 <MSC_BOT_Reset+0x64>)
 800b3b0:	7819      	ldrb	r1, [r3, #0]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800b3b8:	231f      	movs	r3, #31
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f00f fcd9 	bl	801ad72 <USBD_LL_PrepareReceive>
 800b3c0:	e000      	b.n	800b3c4 <MSC_BOT_Reset+0x58>
    return;
 800b3c2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	2000010e 	.word	0x2000010e
 800b3d0:	2000010f 	.word	0x2000010f

0800b3d4 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	32b0      	adds	r2, #176	; 0xb0
 800b3e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ea:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d002      	beq.n	800b3f8 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	721a      	strb	r2, [r3, #8]
  }
}
 800b3f8:	bf00      	nop
 800b3fa:	3714      	adds	r7, #20
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	32b0      	adds	r2, #176	; 0xb0
 800b41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b41e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d020      	beq.n	800b468 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	7a1b      	ldrb	r3, [r3, #8]
 800b42a:	2b02      	cmp	r3, #2
 800b42c:	d005      	beq.n	800b43a <MSC_BOT_DataIn+0x36>
 800b42e:	2b02      	cmp	r3, #2
 800b430:	db1c      	blt.n	800b46c <MSC_BOT_DataIn+0x68>
 800b432:	3b03      	subs	r3, #3
 800b434:	2b01      	cmp	r3, #1
 800b436:	d819      	bhi.n	800b46c <MSC_BOT_DataIn+0x68>
 800b438:	e011      	b.n	800b45e <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800b446:	461a      	mov	r2, r3
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 f9c9 	bl	800b7e0 <SCSI_ProcessCmd>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	da0d      	bge.n	800b470 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b454:	2101      	movs	r1, #1
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 f90c 	bl	800b674 <MSC_BOT_SendCSW>
      }
      break;
 800b45c:	e008      	b.n	800b470 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b45e:	2100      	movs	r1, #0
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 f907 	bl	800b674 <MSC_BOT_SendCSW>
      break;
 800b466:	e004      	b.n	800b472 <MSC_BOT_DataIn+0x6e>
    return;
 800b468:	bf00      	nop
 800b46a:	e002      	b.n	800b472 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800b46c:	bf00      	nop
 800b46e:	e000      	b.n	800b472 <MSC_BOT_DataIn+0x6e>
      break;
 800b470:	bf00      	nop
  }
}
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	460b      	mov	r3, r1
 800b482:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	32b0      	adds	r2, #176	; 0xb0
 800b48e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b492:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d01c      	beq.n	800b4d4 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	7a1b      	ldrb	r3, [r3, #8]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d002      	beq.n	800b4a8 <MSC_BOT_DataOut+0x30>
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d004      	beq.n	800b4b0 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800b4a6:	e018      	b.n	800b4da <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 f819 	bl	800b4e0 <MSC_BOT_CBW_Decode>
      break;
 800b4ae:	e014      	b.n	800b4da <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800b4bc:	461a      	mov	r2, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f98e 	bl	800b7e0 <SCSI_ProcessCmd>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	da06      	bge.n	800b4d8 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b4ca:	2101      	movs	r1, #1
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 f8d1 	bl	800b674 <MSC_BOT_SendCSW>
      break;
 800b4d2:	e001      	b.n	800b4d8 <MSC_BOT_DataOut+0x60>
    return;
 800b4d4:	bf00      	nop
 800b4d6:	e000      	b.n	800b4da <MSC_BOT_DataOut+0x62>
      break;
 800b4d8:	bf00      	nop
  }
}
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	32b0      	adds	r2, #176	; 0xb0
 800b4f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d079      	beq.n	800b5f2 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800b516:	4b3a      	ldr	r3, [pc, #232]	; (800b600 <MSC_BOT_CBW_Decode+0x120>)
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	4619      	mov	r1, r3
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f00f fc49 	bl	801adb4 <USBD_LL_GetRxDataSize>
 800b522:	4603      	mov	r3, r0
 800b524:	2b1f      	cmp	r3, #31
 800b526:	d114      	bne.n	800b552 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800b52e:	4a35      	ldr	r2, [pc, #212]	; (800b604 <MSC_BOT_CBW_Decode+0x124>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d10e      	bne.n	800b552 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d809      	bhi.n	800b552 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800b544:	2b00      	cmp	r3, #0
 800b546:	d004      	beq.n	800b552 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800b54e:	2b10      	cmp	r3, #16
 800b550:	d90e      	bls.n	800b570 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b558:	2320      	movs	r3, #32
 800b55a:	2205      	movs	r2, #5
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 fe56 	bl	800c20e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2202      	movs	r2, #2
 800b566:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 f8bd 	bl	800b6e8 <MSC_BOT_Abort>
 800b56e:	e043      	b.n	800b5f8 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800b57c:	461a      	mov	r2, r3
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f92e 	bl	800b7e0 <SCSI_ProcessCmd>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	da0c      	bge.n	800b5a4 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	7a1b      	ldrb	r3, [r3, #8]
 800b58e:	2b05      	cmp	r3, #5
 800b590:	d104      	bne.n	800b59c <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b592:	2101      	movs	r1, #1
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f86d 	bl	800b674 <MSC_BOT_SendCSW>
 800b59a:	e02d      	b.n	800b5f8 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 f8a3 	bl	800b6e8 <MSC_BOT_Abort>
 800b5a2:	e029      	b.n	800b5f8 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	7a1b      	ldrb	r3, [r3, #8]
 800b5a8:	2b02      	cmp	r3, #2
 800b5aa:	d024      	beq.n	800b5f6 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d020      	beq.n	800b5f6 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800b5b8:	2b03      	cmp	r3, #3
 800b5ba:	d01c      	beq.n	800b5f6 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d009      	beq.n	800b5d8 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f103 0110 	add.w	r1, r3, #16
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f819 	bl	800b608 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800b5d6:	e00f      	b.n	800b5f8 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d104      	bne.n	800b5ea <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 f846 	bl	800b674 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800b5e8:	e006      	b.n	800b5f8 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f87c 	bl	800b6e8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800b5f0:	e002      	b.n	800b5f8 <MSC_BOT_CBW_Decode+0x118>
    return;
 800b5f2:	bf00      	nop
 800b5f4:	e000      	b.n	800b5f8 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800b5f6:	bf00      	nop
    }
  }
}
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	2000010f 	.word	0x2000010f
 800b604:	43425355 	.word	0x43425355

0800b608 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b086      	sub	sp, #24
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	32b0      	adds	r2, #176	; 0xb0
 800b61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b622:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d01e      	beq.n	800b668 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	4293      	cmp	r3, r2
 800b634:	bf28      	it	cs
 800b636:	4613      	movcs	r3, r2
 800b638:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	1ad2      	subs	r2, r2, r3
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	2200      	movs	r2, #0
 800b64e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	2204      	movs	r2, #4
 800b656:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800b658:	4b05      	ldr	r3, [pc, #20]	; (800b670 <MSC_BOT_SendData+0x68>)
 800b65a:	7819      	ldrb	r1, [r3, #0]
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	68ba      	ldr	r2, [r7, #8]
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f00f fb65 	bl	801ad30 <USBD_LL_Transmit>
 800b666:	e000      	b.n	800b66a <MSC_BOT_SendData+0x62>
    return;
 800b668:	bf00      	nop
}
 800b66a:	3718      	adds	r7, #24
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	2000010e 	.word	0x2000010e

0800b674 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	460b      	mov	r3, r1
 800b67e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	32b0      	adds	r2, #176	; 0xb0
 800b68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b68e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d01d      	beq.n	800b6d2 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	4a10      	ldr	r2, [pc, #64]	; (800b6dc <MSC_BOT_SendCSW+0x68>)
 800b69a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	78fa      	ldrb	r2, [r7, #3]
 800b6a2:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800b6ac:	4b0c      	ldr	r3, [pc, #48]	; (800b6e0 <MSC_BOT_SendCSW+0x6c>)
 800b6ae:	7819      	ldrb	r1, [r3, #0]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800b6b6:	230d      	movs	r3, #13
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f00f fb39 	bl	801ad30 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800b6be:	4b09      	ldr	r3, [pc, #36]	; (800b6e4 <MSC_BOT_SendCSW+0x70>)
 800b6c0:	7819      	ldrb	r1, [r3, #0]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800b6c8:	231f      	movs	r3, #31
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f00f fb51 	bl	801ad72 <USBD_LL_PrepareReceive>
 800b6d0:	e000      	b.n	800b6d4 <MSC_BOT_SendCSW+0x60>
    return;
 800b6d2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	53425355 	.word	0x53425355
 800b6e0:	2000010e 	.word	0x2000010e
 800b6e4:	2000010f 	.word	0x2000010f

0800b6e8 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	32b0      	adds	r2, #176	; 0xb0
 800b6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6fe:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d02a      	beq.n	800b75c <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d10e      	bne.n	800b72e <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800b716:	2b00      	cmp	r3, #0
 800b718:	d009      	beq.n	800b72e <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d105      	bne.n	800b72e <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800b722:	4b10      	ldr	r3, [pc, #64]	; (800b764 <MSC_BOT_Abort+0x7c>)
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f00f fa78 	bl	801ac1e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800b72e:	4b0e      	ldr	r3, [pc, #56]	; (800b768 <MSC_BOT_Abort+0x80>)
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	4619      	mov	r1, r3
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f00f fa72 	bl	801ac1e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	7a5b      	ldrb	r3, [r3, #9]
 800b73e:	2b02      	cmp	r3, #2
 800b740:	d10d      	bne.n	800b75e <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800b742:	4b09      	ldr	r3, [pc, #36]	; (800b768 <MSC_BOT_Abort+0x80>)
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	4619      	mov	r1, r3
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f00f fa68 	bl	801ac1e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800b74e:	4b05      	ldr	r3, [pc, #20]	; (800b764 <MSC_BOT_Abort+0x7c>)
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	4619      	mov	r1, r3
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f00f fa62 	bl	801ac1e <USBD_LL_StallEP>
 800b75a:	e000      	b.n	800b75e <MSC_BOT_Abort+0x76>
    return;
 800b75c:	bf00      	nop
  }
}
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	2000010f 	.word	0x2000010f
 800b768:	2000010e 	.word	0x2000010e

0800b76c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	460b      	mov	r3, r1
 800b776:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	32b0      	adds	r2, #176	; 0xb0
 800b782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b786:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d01d      	beq.n	800b7ca <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	7a5b      	ldrb	r3, [r3, #9]
 800b792:	2b02      	cmp	r3, #2
 800b794:	d10c      	bne.n	800b7b0 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800b796:	4b10      	ldr	r3, [pc, #64]	; (800b7d8 <MSC_BOT_CplClrFeature+0x6c>)
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	4619      	mov	r1, r3
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f00f fa3e 	bl	801ac1e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800b7a2:	4b0e      	ldr	r3, [pc, #56]	; (800b7dc <MSC_BOT_CplClrFeature+0x70>)
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f00f fa38 	bl	801ac1e <USBD_LL_StallEP>
 800b7ae:	e00f      	b.n	800b7d0 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800b7b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	da0a      	bge.n	800b7ce <MSC_BOT_CplClrFeature+0x62>
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	7a5b      	ldrb	r3, [r3, #9]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d006      	beq.n	800b7ce <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800b7c0:	2101      	movs	r1, #1
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f7ff ff56 	bl	800b674 <MSC_BOT_SendCSW>
 800b7c8:	e002      	b.n	800b7d0 <MSC_BOT_CplClrFeature+0x64>
    return;
 800b7ca:	bf00      	nop
 800b7cc:	e000      	b.n	800b7d0 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800b7ce:	bf00      	nop
  }
}
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	2000010e 	.word	0x2000010e
 800b7dc:	2000010f 	.word	0x2000010f

0800b7e0 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b086      	sub	sp, #24
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	607a      	str	r2, [r7, #4]
 800b7ec:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	32b0      	adds	r2, #176	; 0xb0
 800b7f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7fc:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d102      	bne.n	800b80a <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800b804:	f04f 33ff 	mov.w	r3, #4294967295
 800b808:	e168      	b.n	800badc <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	2baa      	cmp	r3, #170	; 0xaa
 800b810:	f000 8144 	beq.w	800ba9c <SCSI_ProcessCmd+0x2bc>
 800b814:	2baa      	cmp	r3, #170	; 0xaa
 800b816:	f300 8153 	bgt.w	800bac0 <SCSI_ProcessCmd+0x2e0>
 800b81a:	2ba8      	cmp	r3, #168	; 0xa8
 800b81c:	f000 812c 	beq.w	800ba78 <SCSI_ProcessCmd+0x298>
 800b820:	2ba8      	cmp	r3, #168	; 0xa8
 800b822:	f300 814d 	bgt.w	800bac0 <SCSI_ProcessCmd+0x2e0>
 800b826:	2b5a      	cmp	r3, #90	; 0x5a
 800b828:	f300 80c0 	bgt.w	800b9ac <SCSI_ProcessCmd+0x1cc>
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f2c0 8147 	blt.w	800bac0 <SCSI_ProcessCmd+0x2e0>
 800b832:	2b5a      	cmp	r3, #90	; 0x5a
 800b834:	f200 8144 	bhi.w	800bac0 <SCSI_ProcessCmd+0x2e0>
 800b838:	a201      	add	r2, pc, #4	; (adr r2, 800b840 <SCSI_ProcessCmd+0x60>)
 800b83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b83e:	bf00      	nop
 800b840:	0800b9b3 	.word	0x0800b9b3
 800b844:	0800bac1 	.word	0x0800bac1
 800b848:	0800bac1 	.word	0x0800bac1
 800b84c:	0800b9c5 	.word	0x0800b9c5
 800b850:	0800bac1 	.word	0x0800bac1
 800b854:	0800bac1 	.word	0x0800bac1
 800b858:	0800bac1 	.word	0x0800bac1
 800b85c:	0800bac1 	.word	0x0800bac1
 800b860:	0800bac1 	.word	0x0800bac1
 800b864:	0800bac1 	.word	0x0800bac1
 800b868:	0800bac1 	.word	0x0800bac1
 800b86c:	0800bac1 	.word	0x0800bac1
 800b870:	0800bac1 	.word	0x0800bac1
 800b874:	0800bac1 	.word	0x0800bac1
 800b878:	0800bac1 	.word	0x0800bac1
 800b87c:	0800bac1 	.word	0x0800bac1
 800b880:	0800bac1 	.word	0x0800bac1
 800b884:	0800bac1 	.word	0x0800bac1
 800b888:	0800b9d7 	.word	0x0800b9d7
 800b88c:	0800bac1 	.word	0x0800bac1
 800b890:	0800bac1 	.word	0x0800bac1
 800b894:	0800bac1 	.word	0x0800bac1
 800b898:	0800bac1 	.word	0x0800bac1
 800b89c:	0800bac1 	.word	0x0800bac1
 800b8a0:	0800bac1 	.word	0x0800bac1
 800b8a4:	0800bac1 	.word	0x0800bac1
 800b8a8:	0800ba0d 	.word	0x0800ba0d
 800b8ac:	0800b9e9 	.word	0x0800b9e9
 800b8b0:	0800bac1 	.word	0x0800bac1
 800b8b4:	0800bac1 	.word	0x0800bac1
 800b8b8:	0800b9fb 	.word	0x0800b9fb
 800b8bc:	0800bac1 	.word	0x0800bac1
 800b8c0:	0800bac1 	.word	0x0800bac1
 800b8c4:	0800bac1 	.word	0x0800bac1
 800b8c8:	0800bac1 	.word	0x0800bac1
 800b8cc:	0800ba31 	.word	0x0800ba31
 800b8d0:	0800bac1 	.word	0x0800bac1
 800b8d4:	0800ba43 	.word	0x0800ba43
 800b8d8:	0800bac1 	.word	0x0800bac1
 800b8dc:	0800bac1 	.word	0x0800bac1
 800b8e0:	0800ba67 	.word	0x0800ba67
 800b8e4:	0800bac1 	.word	0x0800bac1
 800b8e8:	0800ba8b 	.word	0x0800ba8b
 800b8ec:	0800bac1 	.word	0x0800bac1
 800b8f0:	0800bac1 	.word	0x0800bac1
 800b8f4:	0800bac1 	.word	0x0800bac1
 800b8f8:	0800bac1 	.word	0x0800bac1
 800b8fc:	0800baaf 	.word	0x0800baaf
 800b900:	0800bac1 	.word	0x0800bac1
 800b904:	0800bac1 	.word	0x0800bac1
 800b908:	0800bac1 	.word	0x0800bac1
 800b90c:	0800bac1 	.word	0x0800bac1
 800b910:	0800bac1 	.word	0x0800bac1
 800b914:	0800bac1 	.word	0x0800bac1
 800b918:	0800bac1 	.word	0x0800bac1
 800b91c:	0800bac1 	.word	0x0800bac1
 800b920:	0800bac1 	.word	0x0800bac1
 800b924:	0800bac1 	.word	0x0800bac1
 800b928:	0800bac1 	.word	0x0800bac1
 800b92c:	0800bac1 	.word	0x0800bac1
 800b930:	0800bac1 	.word	0x0800bac1
 800b934:	0800bac1 	.word	0x0800bac1
 800b938:	0800bac1 	.word	0x0800bac1
 800b93c:	0800bac1 	.word	0x0800bac1
 800b940:	0800bac1 	.word	0x0800bac1
 800b944:	0800bac1 	.word	0x0800bac1
 800b948:	0800bac1 	.word	0x0800bac1
 800b94c:	0800bac1 	.word	0x0800bac1
 800b950:	0800bac1 	.word	0x0800bac1
 800b954:	0800bac1 	.word	0x0800bac1
 800b958:	0800bac1 	.word	0x0800bac1
 800b95c:	0800bac1 	.word	0x0800bac1
 800b960:	0800bac1 	.word	0x0800bac1
 800b964:	0800bac1 	.word	0x0800bac1
 800b968:	0800bac1 	.word	0x0800bac1
 800b96c:	0800bac1 	.word	0x0800bac1
 800b970:	0800bac1 	.word	0x0800bac1
 800b974:	0800bac1 	.word	0x0800bac1
 800b978:	0800bac1 	.word	0x0800bac1
 800b97c:	0800bac1 	.word	0x0800bac1
 800b980:	0800bac1 	.word	0x0800bac1
 800b984:	0800bac1 	.word	0x0800bac1
 800b988:	0800bac1 	.word	0x0800bac1
 800b98c:	0800bac1 	.word	0x0800bac1
 800b990:	0800bac1 	.word	0x0800bac1
 800b994:	0800bac1 	.word	0x0800bac1
 800b998:	0800bac1 	.word	0x0800bac1
 800b99c:	0800bac1 	.word	0x0800bac1
 800b9a0:	0800bac1 	.word	0x0800bac1
 800b9a4:	0800bac1 	.word	0x0800bac1
 800b9a8:	0800ba1f 	.word	0x0800ba1f
 800b9ac:	2b9e      	cmp	r3, #158	; 0x9e
 800b9ae:	d051      	beq.n	800ba54 <SCSI_ProcessCmd+0x274>
 800b9b0:	e086      	b.n	800bac0 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800b9b2:	7afb      	ldrb	r3, [r7, #11]
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f000 f893 	bl	800bae4 <SCSI_TestUnitReady>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b9c2:	e089      	b.n	800bad8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800b9c4:	7afb      	ldrb	r3, [r7, #11]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f000 fb9c 	bl	800c108 <SCSI_RequestSense>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	75fb      	strb	r3, [r7, #23]
      break;
 800b9d4:	e080      	b.n	800bad8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800b9d6:	7afb      	ldrb	r3, [r7, #11]
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	4619      	mov	r1, r3
 800b9dc:	68f8      	ldr	r0, [r7, #12]
 800b9de:	f000 f8db 	bl	800bb98 <SCSI_Inquiry>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	75fb      	strb	r3, [r7, #23]
      break;
 800b9e6:	e077      	b.n	800bad8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800b9e8:	7afb      	ldrb	r3, [r7, #11]
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f000 fc58 	bl	800c2a4 <SCSI_StartStopUnit>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	75fb      	strb	r3, [r7, #23]
      break;
 800b9f8:	e06e      	b.n	800bad8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800b9fa:	7afb      	ldrb	r3, [r7, #11]
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	4619      	mov	r1, r3
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f000 fca4 	bl	800c34e <SCSI_AllowPreventRemovable>
 800ba06:	4603      	mov	r3, r0
 800ba08:	75fb      	strb	r3, [r7, #23]
      break;
 800ba0a:	e065      	b.n	800bad8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800ba0c:	7afb      	ldrb	r3, [r7, #11]
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	4619      	mov	r1, r3
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f000 faec 	bl	800bff0 <SCSI_ModeSense6>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	75fb      	strb	r3, [r7, #23]
      break;
 800ba1c:	e05c      	b.n	800bad8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800ba1e:	7afb      	ldrb	r3, [r7, #11]
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	4619      	mov	r1, r3
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	f000 fb29 	bl	800c07c <SCSI_ModeSense10>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	75fb      	strb	r3, [r7, #23]
      break;
 800ba2e:	e053      	b.n	800bad8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800ba30:	7afb      	ldrb	r3, [r7, #11]
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	4619      	mov	r1, r3
 800ba36:	68f8      	ldr	r0, [r7, #12]
 800ba38:	f000 fa5e 	bl	800bef8 <SCSI_ReadFormatCapacity>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	75fb      	strb	r3, [r7, #23]
      break;
 800ba40:	e04a      	b.n	800bad8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800ba42:	7afb      	ldrb	r3, [r7, #11]
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	4619      	mov	r1, r3
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f000 f923 	bl	800bc94 <SCSI_ReadCapacity10>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	75fb      	strb	r3, [r7, #23]
      break;
 800ba52:	e041      	b.n	800bad8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800ba54:	7afb      	ldrb	r3, [r7, #11]
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	4619      	mov	r1, r3
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	f000 f998 	bl	800bd90 <SCSI_ReadCapacity16>
 800ba60:	4603      	mov	r3, r0
 800ba62:	75fb      	strb	r3, [r7, #23]
      break;
 800ba64:	e038      	b.n	800bad8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800ba66:	7afb      	ldrb	r3, [r7, #11]
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f000 fc9b 	bl	800c3a8 <SCSI_Read10>
 800ba72:	4603      	mov	r3, r0
 800ba74:	75fb      	strb	r3, [r7, #23]
      break;
 800ba76:	e02f      	b.n	800bad8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800ba78:	7afb      	ldrb	r3, [r7, #11]
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	68f8      	ldr	r0, [r7, #12]
 800ba80:	f000 fd3c 	bl	800c4fc <SCSI_Read12>
 800ba84:	4603      	mov	r3, r0
 800ba86:	75fb      	strb	r3, [r7, #23]
      break;
 800ba88:	e026      	b.n	800bad8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800ba8a:	7afb      	ldrb	r3, [r7, #11]
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	4619      	mov	r1, r3
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f000 fde7 	bl	800c664 <SCSI_Write10>
 800ba96:	4603      	mov	r3, r0
 800ba98:	75fb      	strb	r3, [r7, #23]
      break;
 800ba9a:	e01d      	b.n	800bad8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800ba9c:	7afb      	ldrb	r3, [r7, #11]
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	4619      	mov	r1, r3
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f000 feb4 	bl	800c810 <SCSI_Write12>
 800baa8:	4603      	mov	r3, r0
 800baaa:	75fb      	strb	r3, [r7, #23]
      break;
 800baac:	e014      	b.n	800bad8 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800baae:	7afb      	ldrb	r3, [r7, #11]
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	4619      	mov	r1, r3
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f000 ff91 	bl	800c9dc <SCSI_Verify10>
 800baba:	4603      	mov	r3, r0
 800babc:	75fb      	strb	r3, [r7, #23]
      break;
 800babe:	e00b      	b.n	800bad8 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800bac0:	7af9      	ldrb	r1, [r7, #11]
 800bac2:	2320      	movs	r3, #32
 800bac4:	2205      	movs	r2, #5
 800bac6:	68f8      	ldr	r0, [r7, #12]
 800bac8:	f000 fba1 	bl	800c20e <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	2202      	movs	r2, #2
 800bad0:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800bad2:	23ff      	movs	r3, #255	; 0xff
 800bad4:	75fb      	strb	r3, [r7, #23]
      break;
 800bad6:	bf00      	nop
  }

  return ret;
 800bad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3718      	adds	r7, #24
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	460b      	mov	r3, r1
 800baee:	607a      	str	r2, [r7, #4]
 800baf0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	32b0      	adds	r2, #176	; 0xb0
 800bafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb00:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d102      	bne.n	800bb0e <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800bb08:	f04f 33ff 	mov.w	r3, #4294967295
 800bb0c:	e03f      	b.n	800bb8e <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d00a      	beq.n	800bb2e <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bb1e:	2320      	movs	r3, #32
 800bb20:	2205      	movs	r2, #5
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f000 fb73 	bl	800c20e <SCSI_SenseCode>

    return -1;
 800bb28:	f04f 33ff 	mov.w	r3, #4294967295
 800bb2c:	e02f      	b.n	800bb8e <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d10b      	bne.n	800bb50 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bb38:	7af9      	ldrb	r1, [r7, #11]
 800bb3a:	233a      	movs	r3, #58	; 0x3a
 800bb3c:	2202      	movs	r2, #2
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f000 fb65 	bl	800c20e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	2205      	movs	r2, #5
 800bb48:	721a      	strb	r2, [r3, #8]
    return -1;
 800bb4a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb4e:	e01e      	b.n	800bb8e <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb56:	68fa      	ldr	r2, [r7, #12]
 800bb58:	33b0      	adds	r3, #176	; 0xb0
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	4413      	add	r3, r2
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	7afa      	ldrb	r2, [r7, #11]
 800bb64:	4610      	mov	r0, r2
 800bb66:	4798      	blx	r3
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00b      	beq.n	800bb86 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bb6e:	7af9      	ldrb	r1, [r7, #11]
 800bb70:	233a      	movs	r3, #58	; 0x3a
 800bb72:	2202      	movs	r2, #2
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f000 fb4a 	bl	800c20e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	2205      	movs	r2, #5
 800bb7e:	721a      	strb	r2, [r3, #8]

    return -1;
 800bb80:	f04f 33ff 	mov.w	r3, #4294967295
 800bb84:	e003      	b.n	800bb8e <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	60da      	str	r2, [r3, #12]

  return 0;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3718      	adds	r7, #24
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
	...

0800bb98 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b088      	sub	sp, #32
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	460b      	mov	r3, r1
 800bba2:	607a      	str	r2, [r7, #4]
 800bba4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	32b0      	adds	r2, #176	; 0xb0
 800bbb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbb4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d102      	bne.n	800bbc2 <SCSI_Inquiry+0x2a>
  {
    return -1;
 800bbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800bbc0:	e05f      	b.n	800bc82 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d10a      	bne.n	800bbe2 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bbd2:	2320      	movs	r3, #32
 800bbd4:	2205      	movs	r2, #5
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	f000 fb19 	bl	800c20e <SCSI_SenseCode>
    return -1;
 800bbdc:	f04f 33ff 	mov.w	r3, #4294967295
 800bbe0:	e04f      	b.n	800bc82 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	f003 0301 	and.w	r3, r3, #1
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d020      	beq.n	800bc32 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	3302      	adds	r3, #2
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d105      	bne.n	800bc06 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800bbfa:	2206      	movs	r2, #6
 800bbfc:	4923      	ldr	r1, [pc, #140]	; (800bc8c <SCSI_Inquiry+0xf4>)
 800bbfe:	69b8      	ldr	r0, [r7, #24]
 800bc00:	f001 f872 	bl	800cce8 <SCSI_UpdateBotData>
 800bc04:	e03c      	b.n	800bc80 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	3302      	adds	r3, #2
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	2b80      	cmp	r3, #128	; 0x80
 800bc0e:	d105      	bne.n	800bc1c <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800bc10:	2208      	movs	r2, #8
 800bc12:	491f      	ldr	r1, [pc, #124]	; (800bc90 <SCSI_Inquiry+0xf8>)
 800bc14:	69b8      	ldr	r0, [r7, #24]
 800bc16:	f001 f867 	bl	800cce8 <SCSI_UpdateBotData>
 800bc1a:	e031      	b.n	800bc80 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bc22:	2324      	movs	r3, #36	; 0x24
 800bc24:	2205      	movs	r2, #5
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f000 faf1 	bl	800c20e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800bc2c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc30:	e027      	b.n	800bc82 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	33b0      	adds	r3, #176	; 0xb0
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	4413      	add	r3, r2
 800bc40:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800bc42:	69d9      	ldr	r1, [r3, #28]
 800bc44:	7afa      	ldrb	r2, [r7, #11]
 800bc46:	4613      	mov	r3, r2
 800bc48:	00db      	lsls	r3, r3, #3
 800bc4a:	4413      	add	r3, r2
 800bc4c:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800bc4e:	440b      	add	r3, r1
 800bc50:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	3304      	adds	r3, #4
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	3305      	adds	r3, #5
 800bc5c:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	3304      	adds	r3, #4
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	8bfa      	ldrh	r2, [r7, #30]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d303      	bcc.n	800bc74 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	3304      	adds	r3, #4
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800bc74:	8bfb      	ldrh	r3, [r7, #30]
 800bc76:	461a      	mov	r2, r3
 800bc78:	6979      	ldr	r1, [r7, #20]
 800bc7a:	69b8      	ldr	r0, [r7, #24]
 800bc7c:	f001 f834 	bl	800cce8 <SCSI_UpdateBotData>
  }

  return 0;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3720      	adds	r7, #32
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	20000110 	.word	0x20000110
 800bc90:	20000118 	.word	0x20000118

0800bc94 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b086      	sub	sp, #24
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	607a      	str	r2, [r7, #4]
 800bca0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	32b0      	adds	r2, #176	; 0xb0
 800bcac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d102      	bne.n	800bcbe <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800bcb8:	f04f 33ff 	mov.w	r3, #4294967295
 800bcbc:	e064      	b.n	800bd88 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	33b0      	adds	r3, #176	; 0xb0
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	4413      	add	r3, r2
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	697a      	ldr	r2, [r7, #20]
 800bcd2:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800bcd6:	697a      	ldr	r2, [r7, #20]
 800bcd8:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800bcdc:	7af8      	ldrb	r0, [r7, #11]
 800bcde:	4798      	blx	r3
 800bce0:	4603      	mov	r3, r0
 800bce2:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800bce4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d104      	bne.n	800bcf6 <SCSI_ReadCapacity10+0x62>
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	d108      	bne.n	800bd08 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bcf6:	7af9      	ldrb	r1, [r7, #11]
 800bcf8:	233a      	movs	r3, #58	; 0x3a
 800bcfa:	2202      	movs	r2, #2
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	f000 fa86 	bl	800c20e <SCSI_SenseCode>
    return -1;
 800bd02:	f04f 33ff 	mov.w	r3, #4294967295
 800bd06:	e03f      	b.n	800bd88 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	0e1b      	lsrs	r3, r3, #24
 800bd12:	b2da      	uxtb	r2, r3
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	0c1b      	lsrs	r3, r3, #16
 800bd22:	b2da      	uxtb	r2, r3
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	0a1b      	lsrs	r3, r3, #8
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	3b01      	subs	r3, #1
 800bd42:	b2da      	uxtb	r2, r3
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bd4e:	161b      	asrs	r3, r3, #24
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bd5c:	141b      	asrs	r3, r3, #16
 800bd5e:	b2da      	uxtb	r2, r3
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bd6a:	0a1b      	lsrs	r3, r3, #8
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	b2da      	uxtb	r2, r3
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bd7a:	b2da      	uxtb	r2, r3
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	2208      	movs	r2, #8
 800bd84:	60da      	str	r2, [r3, #12]

  return 0;
 800bd86:	2300      	movs	r3, #0

}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3718      	adds	r7, #24
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b088      	sub	sp, #32
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	460b      	mov	r3, r1
 800bd9a:	607a      	str	r2, [r7, #4]
 800bd9c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	32b0      	adds	r2, #176	; 0xb0
 800bda8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdac:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800bdae:	69bb      	ldr	r3, [r7, #24]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d102      	bne.n	800bdba <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800bdb4:	f04f 33ff 	mov.w	r3, #4294967295
 800bdb8:	e09a      	b.n	800bef0 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	33b0      	adds	r3, #176	; 0xb0
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	4413      	add	r3, r2
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	69ba      	ldr	r2, [r7, #24]
 800bdce:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800bdd2:	69ba      	ldr	r2, [r7, #24]
 800bdd4:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800bdd8:	7af8      	ldrb	r0, [r7, #11]
 800bdda:	4798      	blx	r3
 800bddc:	4603      	mov	r3, r0
 800bdde:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800bde0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d104      	bne.n	800bdf2 <SCSI_ReadCapacity16+0x62>
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800bdee:	2b02      	cmp	r3, #2
 800bdf0:	d108      	bne.n	800be04 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bdf2:	7af9      	ldrb	r1, [r7, #11]
 800bdf4:	233a      	movs	r3, #58	; 0x3a
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f000 fa08 	bl	800c20e <SCSI_SenseCode>
    return -1;
 800bdfe:	f04f 33ff 	mov.w	r3, #4294967295
 800be02:	e075      	b.n	800bef0 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	330a      	adds	r3, #10
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	330b      	adds	r3, #11
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800be14:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	330c      	adds	r3, #12
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800be1e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	320d      	adds	r2, #13
 800be24:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800be26:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800be2c:	2300      	movs	r3, #0
 800be2e:	61fb      	str	r3, [r7, #28]
 800be30:	e008      	b.n	800be44 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 800be32:	69ba      	ldr	r2, [r7, #24]
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	4413      	add	r3, r2
 800be38:	3310      	adds	r3, #16
 800be3a:	2200      	movs	r2, #0
 800be3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	3301      	adds	r3, #1
 800be42:	61fb      	str	r3, [r7, #28]
 800be44:	69bb      	ldr	r3, [r7, #24]
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	69fa      	ldr	r2, [r7, #28]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d3f1      	bcc.n	800be32 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800be54:	3b01      	subs	r3, #1
 800be56:	0e1b      	lsrs	r3, r3, #24
 800be58:	b2da      	uxtb	r2, r3
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800be64:	3b01      	subs	r3, #1
 800be66:	0c1b      	lsrs	r3, r3, #16
 800be68:	b2da      	uxtb	r2, r3
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800be74:	3b01      	subs	r3, #1
 800be76:	0a1b      	lsrs	r3, r3, #8
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800be84:	b2db      	uxtb	r3, r3
 800be86:	3b01      	subs	r3, #1
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be94:	161b      	asrs	r3, r3, #24
 800be96:	b2da      	uxtb	r2, r3
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bea2:	141b      	asrs	r3, r3, #16
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800beb0:	0a1b      	lsrs	r3, r3, #8
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bec0:	b2da      	uxtb	r2, r3
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	330a      	adds	r3, #10
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	330b      	adds	r3, #11
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800bed6:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	330c      	adds	r3, #12
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800bee0:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	320d      	adds	r2, #13
 800bee6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800bee8:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	60da      	str	r2, [r3, #12]

  return 0;
 800beee:	2300      	movs	r3, #0
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3720      	adds	r7, #32
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b088      	sub	sp, #32
 800befc:	af00      	add	r7, sp, #0
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	460b      	mov	r3, r1
 800bf02:	607a      	str	r2, [r7, #4]
 800bf04:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	32b0      	adds	r2, #176	; 0xb0
 800bf10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf14:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d102      	bne.n	800bf22 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800bf1c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf20:	e061      	b.n	800bfe6 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf28:	68fa      	ldr	r2, [r7, #12]
 800bf2a:	33b0      	adds	r3, #176	; 0xb0
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	4413      	add	r3, r2
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	f107 0214 	add.w	r2, r7, #20
 800bf38:	f107 0110 	add.w	r1, r7, #16
 800bf3c:	7af8      	ldrb	r0, [r7, #11]
 800bf3e:	4798      	blx	r3
 800bf40:	4603      	mov	r3, r0
 800bf42:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800bf44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d104      	bne.n	800bf56 <SCSI_ReadFormatCapacity+0x5e>
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800bf52:	2b02      	cmp	r3, #2
 800bf54:	d108      	bne.n	800bf68 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bf56:	7af9      	ldrb	r1, [r7, #11]
 800bf58:	233a      	movs	r3, #58	; 0x3a
 800bf5a:	2202      	movs	r2, #2
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f000 f956 	bl	800c20e <SCSI_SenseCode>
    return -1;
 800bf62:	f04f 33ff 	mov.w	r3, #4294967295
 800bf66:	e03e      	b.n	800bfe6 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800bf68:	2300      	movs	r3, #0
 800bf6a:	83fb      	strh	r3, [r7, #30]
 800bf6c:	e007      	b.n	800bf7e <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800bf6e:	8bfb      	ldrh	r3, [r7, #30]
 800bf70:	69ba      	ldr	r2, [r7, #24]
 800bf72:	4413      	add	r3, r2
 800bf74:	2200      	movs	r2, #0
 800bf76:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800bf78:	8bfb      	ldrh	r3, [r7, #30]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	83fb      	strh	r3, [r7, #30]
 800bf7e:	8bfb      	ldrh	r3, [r7, #30]
 800bf80:	2b0b      	cmp	r3, #11
 800bf82:	d9f4      	bls.n	800bf6e <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	2208      	movs	r2, #8
 800bf88:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	0e1b      	lsrs	r3, r3, #24
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	3b01      	subs	r3, #1
 800bf9a:	0c1b      	lsrs	r3, r3, #16
 800bf9c:	b2da      	uxtb	r2, r3
 800bf9e:	69bb      	ldr	r3, [r7, #24]
 800bfa0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	3b01      	subs	r3, #1
 800bfa6:	0a1b      	lsrs	r3, r3, #8
 800bfa8:	b2da      	uxtb	r2, r3
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	3b01      	subs	r3, #1
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	2202      	movs	r2, #2
 800bfbe:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800bfc0:	8abb      	ldrh	r3, [r7, #20]
 800bfc2:	141b      	asrs	r3, r3, #16
 800bfc4:	b2da      	uxtb	r2, r3
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800bfca:	8abb      	ldrh	r3, [r7, #20]
 800bfcc:	0a1b      	lsrs	r3, r3, #8
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	b2da      	uxtb	r2, r3
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800bfd6:	8abb      	ldrh	r3, [r7, #20]
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	220c      	movs	r2, #12
 800bfe2:	60da      	str	r2, [r3, #12]

  return 0;
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3720      	adds	r7, #32
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
	...

0800bff0 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b086      	sub	sp, #24
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	460b      	mov	r3, r1
 800bffa:	607a      	str	r2, [r7, #4]
 800bffc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	32b0      	adds	r2, #176	; 0xb0
 800c008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800c00e:	2304      	movs	r3, #4
 800c010:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d102      	bne.n	800c01e <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800c018:	f04f 33ff 	mov.w	r3, #4294967295
 800c01c:	e027      	b.n	800c06e <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	33b0      	adds	r3, #176	; 0xb0
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	4413      	add	r3, r2
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	7afa      	ldrb	r2, [r7, #11]
 800c032:	4610      	mov	r0, r2
 800c034:	4798      	blx	r3
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d006      	beq.n	800c04a <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800c03c:	4b0e      	ldr	r3, [pc, #56]	; (800c078 <SCSI_ModeSense6+0x88>)
 800c03e:	789b      	ldrb	r3, [r3, #2]
 800c040:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c044:	b2da      	uxtb	r2, r3
 800c046:	4b0c      	ldr	r3, [pc, #48]	; (800c078 <SCSI_ModeSense6+0x88>)
 800c048:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	3304      	adds	r3, #4
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	b29b      	uxth	r3, r3
 800c052:	8afa      	ldrh	r2, [r7, #22]
 800c054:	429a      	cmp	r2, r3
 800c056:	d303      	bcc.n	800c060 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	3304      	adds	r3, #4
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800c060:	8afb      	ldrh	r3, [r7, #22]
 800c062:	461a      	mov	r2, r3
 800c064:	4904      	ldr	r1, [pc, #16]	; (800c078 <SCSI_ModeSense6+0x88>)
 800c066:	6938      	ldr	r0, [r7, #16]
 800c068:	f000 fe3e 	bl	800cce8 <SCSI_UpdateBotData>

  return 0;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3718      	adds	r7, #24
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	20000120 	.word	0x20000120

0800c07c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b086      	sub	sp, #24
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	460b      	mov	r3, r1
 800c086:	607a      	str	r2, [r7, #4]
 800c088:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	32b0      	adds	r2, #176	; 0xb0
 800c094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c098:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800c09a:	2308      	movs	r3, #8
 800c09c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d102      	bne.n	800c0aa <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800c0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a8:	e027      	b.n	800c0fa <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	33b0      	adds	r3, #176	; 0xb0
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4413      	add	r3, r2
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	7afa      	ldrb	r2, [r7, #11]
 800c0be:	4610      	mov	r0, r2
 800c0c0:	4798      	blx	r3
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d006      	beq.n	800c0d6 <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800c0c8:	4b0e      	ldr	r3, [pc, #56]	; (800c104 <SCSI_ModeSense10+0x88>)
 800c0ca:	78db      	ldrb	r3, [r3, #3]
 800c0cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c0d0:	b2da      	uxtb	r2, r3
 800c0d2:	4b0c      	ldr	r3, [pc, #48]	; (800c104 <SCSI_ModeSense10+0x88>)
 800c0d4:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	3308      	adds	r3, #8
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	8afa      	ldrh	r2, [r7, #22]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d303      	bcc.n	800c0ec <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	3308      	adds	r3, #8
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800c0ec:	8afb      	ldrh	r3, [r7, #22]
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	4904      	ldr	r1, [pc, #16]	; (800c104 <SCSI_ModeSense10+0x88>)
 800c0f2:	6938      	ldr	r0, [r7, #16]
 800c0f4:	f000 fdf8 	bl	800cce8 <SCSI_UpdateBotData>

  return 0;
 800c0f8:	2300      	movs	r3, #0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3718      	adds	r7, #24
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	20000124 	.word	0x20000124

0800c108 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b086      	sub	sp, #24
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	460b      	mov	r3, r1
 800c112:	607a      	str	r2, [r7, #4]
 800c114:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	32b0      	adds	r2, #176	; 0xb0
 800c120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c124:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d102      	bne.n	800c132 <SCSI_RequestSense+0x2a>
  {
    return -1;
 800c12c:	f04f 33ff 	mov.w	r3, #4294967295
 800c130:	e069      	b.n	800c206 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d10a      	bne.n	800c152 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c142:	2320      	movs	r3, #32
 800c144:	2205      	movs	r2, #5
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f000 f861 	bl	800c20e <SCSI_SenseCode>
    return -1;
 800c14c:	f04f 33ff 	mov.w	r3, #4294967295
 800c150:	e059      	b.n	800c206 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c152:	2300      	movs	r3, #0
 800c154:	75fb      	strb	r3, [r7, #23]
 800c156:	e007      	b.n	800c168 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800c158:	7dfb      	ldrb	r3, [r7, #23]
 800c15a:	693a      	ldr	r2, [r7, #16]
 800c15c:	4413      	add	r3, r2
 800c15e:	2200      	movs	r2, #0
 800c160:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800c162:	7dfb      	ldrb	r3, [r7, #23]
 800c164:	3301      	adds	r3, #1
 800c166:	75fb      	strb	r3, [r7, #23]
 800c168:	7dfb      	ldrb	r3, [r7, #23]
 800c16a:	2b11      	cmp	r3, #17
 800c16c:	d9f4      	bls.n	800c158 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	2270      	movs	r2, #112	; 0x70
 800c172:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	220c      	movs	r2, #12
 800c178:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c186:	429a      	cmp	r2, r3
 800c188:	d02e      	beq.n	800c1e8 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c190:	461a      	mov	r2, r3
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	3248      	adds	r2, #72	; 0x48
 800c196:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c1a4:	693a      	ldr	r2, [r7, #16]
 800c1a6:	3348      	adds	r3, #72	; 0x48
 800c1a8:	00db      	lsls	r3, r3, #3
 800c1aa:	4413      	add	r3, r2
 800c1ac:	791a      	ldrb	r2, [r3, #4]
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c1b8:	693a      	ldr	r2, [r7, #16]
 800c1ba:	3348      	adds	r3, #72	; 0x48
 800c1bc:	00db      	lsls	r3, r3, #3
 800c1be:	4413      	add	r3, r2
 800c1c0:	795a      	ldrb	r2, [r3, #5]
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	b2da      	uxtb	r2, r3
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800c1dc:	2b04      	cmp	r3, #4
 800c1de:	d103      	bne.n	800c1e8 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	2212      	movs	r2, #18
 800c1ec:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	2b12      	cmp	r3, #18
 800c1f6:	d805      	bhi.n	800c204 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	461a      	mov	r2, r3
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3718      	adds	r7, #24
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800c20e:	b480      	push	{r7}
 800c210:	b085      	sub	sp, #20
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
 800c216:	4608      	mov	r0, r1
 800c218:	4611      	mov	r1, r2
 800c21a:	461a      	mov	r2, r3
 800c21c:	4603      	mov	r3, r0
 800c21e:	70fb      	strb	r3, [r7, #3]
 800c220:	460b      	mov	r3, r1
 800c222:	70bb      	strb	r3, [r7, #2]
 800c224:	4613      	mov	r3, r2
 800c226:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	32b0      	adds	r2, #176	; 0xb0
 800c232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c236:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d02c      	beq.n	800c298 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c244:	461a      	mov	r2, r3
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	3248      	adds	r2, #72	; 0x48
 800c24a:	78b9      	ldrb	r1, [r7, #2]
 800c24c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	3348      	adds	r3, #72	; 0x48
 800c25a:	00db      	lsls	r3, r3, #3
 800c25c:	4413      	add	r3, r2
 800c25e:	787a      	ldrb	r2, [r7, #1]
 800c260:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	3348      	adds	r3, #72	; 0x48
 800c26c:	00db      	lsls	r3, r3, #3
 800c26e:	4413      	add	r3, r2
 800c270:	2200      	movs	r2, #0
 800c272:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c27a:	3301      	adds	r3, #1
 800c27c:	b2da      	uxtb	r2, r3
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800c28a:	2b04      	cmp	r3, #4
 800c28c:	d105      	bne.n	800c29a <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2200      	movs	r2, #0
 800c292:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800c296:	e000      	b.n	800c29a <SCSI_SenseCode+0x8c>
    return;
 800c298:	bf00      	nop
  }
}
 800c29a:	3714      	adds	r7, #20
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b086      	sub	sp, #24
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	607a      	str	r2, [r7, #4]
 800c2b0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	32b0      	adds	r2, #176	; 0xb0
 800c2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2c0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d102      	bne.n	800c2ce <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800c2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2cc:	e03b      	b.n	800c346 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d10f      	bne.n	800c2f8 <SCSI_StartStopUnit+0x54>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	3304      	adds	r3, #4
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	f003 0303 	and.w	r3, r3, #3
 800c2e2:	2b02      	cmp	r3, #2
 800c2e4:	d108      	bne.n	800c2f8 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800c2e6:	7af9      	ldrb	r1, [r7, #11]
 800c2e8:	2324      	movs	r3, #36	; 0x24
 800c2ea:	2205      	movs	r2, #5
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f7ff ff8e 	bl	800c20e <SCSI_SenseCode>

    return -1;
 800c2f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f6:	e026      	b.n	800c346 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	3304      	adds	r3, #4
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	f003 0303 	and.w	r3, r3, #3
 800c302:	2b01      	cmp	r3, #1
 800c304:	d104      	bne.n	800c310 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	2200      	movs	r2, #0
 800c30a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800c30e:	e016      	b.n	800c33e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	3304      	adds	r3, #4
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	f003 0303 	and.w	r3, r3, #3
 800c31a:	2b02      	cmp	r3, #2
 800c31c:	d104      	bne.n	800c328 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	2202      	movs	r2, #2
 800c322:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800c326:	e00a      	b.n	800c33e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	3304      	adds	r3, #4
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	f003 0303 	and.w	r3, r3, #3
 800c332:	2b03      	cmp	r3, #3
 800c334:	d103      	bne.n	800c33e <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	2200      	movs	r2, #0
 800c33a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	2200      	movs	r2, #0
 800c342:	60da      	str	r2, [r3, #12]

  return 0;
 800c344:	2300      	movs	r3, #0
}
 800c346:	4618      	mov	r0, r3
 800c348:	3718      	adds	r7, #24
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c34e:	b480      	push	{r7}
 800c350:	b087      	sub	sp, #28
 800c352:	af00      	add	r7, sp, #0
 800c354:	60f8      	str	r0, [r7, #12]
 800c356:	460b      	mov	r3, r1
 800c358:	607a      	str	r2, [r7, #4]
 800c35a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	32b0      	adds	r2, #176	; 0xb0
 800c366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c36a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d102      	bne.n	800c378 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800c372:	f04f 33ff 	mov.w	r3, #4294967295
 800c376:	e011      	b.n	800c39c <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	3304      	adds	r3, #4
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d104      	bne.n	800c38c <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	2200      	movs	r2, #0
 800c386:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800c38a:	e003      	b.n	800c394 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	2200      	movs	r2, #0
 800c398:	60da      	str	r2, [r3, #12]

  return 0;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	371c      	adds	r7, #28
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b086      	sub	sp, #24
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	607a      	str	r2, [r7, #4]
 800c3b4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	32b0      	adds	r2, #176	; 0xb0
 800c3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3c4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d102      	bne.n	800c3d2 <SCSI_Read10+0x2a>
  {
    return -1;
 800c3cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c3d0:	e090      	b.n	800c4f4 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	7a1b      	ldrb	r3, [r3, #8]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f040 8082 	bne.w	800c4e0 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800c3e2:	b25b      	sxtb	r3, r3
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	db0a      	blt.n	800c3fe <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c3ee:	2320      	movs	r3, #32
 800c3f0:	2205      	movs	r2, #5
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f7ff ff0b 	bl	800c20e <SCSI_SenseCode>
      return -1;
 800c3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3fc:	e07a      	b.n	800c4f4 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c404:	2b02      	cmp	r3, #2
 800c406:	d108      	bne.n	800c41a <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c408:	7af9      	ldrb	r1, [r7, #11]
 800c40a:	233a      	movs	r3, #58	; 0x3a
 800c40c:	2202      	movs	r2, #2
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	f7ff fefd 	bl	800c20e <SCSI_SenseCode>

      return -1;
 800c414:	f04f 33ff 	mov.w	r3, #4294967295
 800c418:	e06c      	b.n	800c4f4 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	33b0      	adds	r3, #176	; 0xb0
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	4413      	add	r3, r2
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	7afa      	ldrb	r2, [r7, #11]
 800c42e:	4610      	mov	r0, r2
 800c430:	4798      	blx	r3
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d008      	beq.n	800c44a <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c438:	7af9      	ldrb	r1, [r7, #11]
 800c43a:	233a      	movs	r3, #58	; 0x3a
 800c43c:	2202      	movs	r2, #2
 800c43e:	68f8      	ldr	r0, [r7, #12]
 800c440:	f7ff fee5 	bl	800c20e <SCSI_SenseCode>
      return -1;
 800c444:	f04f 33ff 	mov.w	r3, #4294967295
 800c448:	e054      	b.n	800c4f4 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	3302      	adds	r3, #2
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	3303      	adds	r3, #3
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c45a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	3304      	adds	r3, #4
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c464:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	3205      	adds	r2, #5
 800c46a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800c46c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	3307      	adds	r3, #7
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	021b      	lsls	r3, r3, #8
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	3208      	adds	r2, #8
 800c480:	7812      	ldrb	r2, [r2, #0]
 800c482:	431a      	orrs	r2, r3
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c496:	7af9      	ldrb	r1, [r7, #11]
 800c498:	68f8      	ldr	r0, [r7, #12]
 800c49a:	f000 fadc 	bl	800ca56 <SCSI_CheckAddressRange>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	da02      	bge.n	800c4aa <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4a8:	e024      	b.n	800c4f4 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c4b6:	6979      	ldr	r1, [r7, #20]
 800c4b8:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800c4bc:	fb01 f303 	mul.w	r3, r1, r3
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d00a      	beq.n	800c4da <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c4ca:	2320      	movs	r3, #32
 800c4cc:	2205      	movs	r2, #5
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f7ff fe9d 	bl	800c20e <SCSI_SenseCode>
      return -1;
 800c4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4d8:	e00c      	b.n	800c4f4 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	2202      	movs	r2, #2
 800c4de:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c4e6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800c4e8:	7afb      	ldrb	r3, [r7, #11]
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	f000 fadf 	bl	800cab0 <SCSI_ProcessRead>
 800c4f2:	4603      	mov	r3, r0
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3718      	adds	r7, #24
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b086      	sub	sp, #24
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	460b      	mov	r3, r1
 800c506:	607a      	str	r2, [r7, #4]
 800c508:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	32b0      	adds	r2, #176	; 0xb0
 800c514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c518:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d102      	bne.n	800c526 <SCSI_Read12+0x2a>
  {
    return -1;
 800c520:	f04f 33ff 	mov.w	r3, #4294967295
 800c524:	e09a      	b.n	800c65c <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	7a1b      	ldrb	r3, [r3, #8]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f040 808c 	bne.w	800c648 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800c536:	b25b      	sxtb	r3, r3
 800c538:	2b00      	cmp	r3, #0
 800c53a:	db0a      	blt.n	800c552 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c542:	2320      	movs	r3, #32
 800c544:	2205      	movs	r2, #5
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	f7ff fe61 	bl	800c20e <SCSI_SenseCode>
      return -1;
 800c54c:	f04f 33ff 	mov.w	r3, #4294967295
 800c550:	e084      	b.n	800c65c <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800c558:	2b02      	cmp	r3, #2
 800c55a:	d108      	bne.n	800c56e <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c55c:	7af9      	ldrb	r1, [r7, #11]
 800c55e:	233a      	movs	r3, #58	; 0x3a
 800c560:	2202      	movs	r2, #2
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f7ff fe53 	bl	800c20e <SCSI_SenseCode>
      return -1;
 800c568:	f04f 33ff 	mov.w	r3, #4294967295
 800c56c:	e076      	b.n	800c65c <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	33b0      	adds	r3, #176	; 0xb0
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	4413      	add	r3, r2
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	7afa      	ldrb	r2, [r7, #11]
 800c582:	4610      	mov	r0, r2
 800c584:	4798      	blx	r3
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d008      	beq.n	800c59e <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c58c:	7af9      	ldrb	r1, [r7, #11]
 800c58e:	233a      	movs	r3, #58	; 0x3a
 800c590:	2202      	movs	r2, #2
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f7ff fe3b 	bl	800c20e <SCSI_SenseCode>
      return -1;
 800c598:	f04f 33ff 	mov.w	r3, #4294967295
 800c59c:	e05e      	b.n	800c65c <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	3302      	adds	r3, #2
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	3303      	adds	r3, #3
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c5ae:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	3304      	adds	r3, #4
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c5b8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	3205      	adds	r2, #5
 800c5be:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800c5c0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	3306      	adds	r3, #6
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	3307      	adds	r3, #7
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c5d8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	3308      	adds	r3, #8
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800c5e2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	3209      	adds	r2, #9
 800c5e8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800c5ea:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c5fe:	7af9      	ldrb	r1, [r7, #11]
 800c600:	68f8      	ldr	r0, [r7, #12]
 800c602:	f000 fa28 	bl	800ca56 <SCSI_CheckAddressRange>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	da02      	bge.n	800c612 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c60c:	f04f 33ff 	mov.w	r3, #4294967295
 800c610:	e024      	b.n	800c65c <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c61e:	6979      	ldr	r1, [r7, #20]
 800c620:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800c624:	fb01 f303 	mul.w	r3, r1, r3
 800c628:	429a      	cmp	r2, r3
 800c62a:	d00a      	beq.n	800c642 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c632:	2320      	movs	r3, #32
 800c634:	2205      	movs	r2, #5
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	f7ff fde9 	bl	800c20e <SCSI_SenseCode>
      return -1;
 800c63c:	f04f 33ff 	mov.w	r3, #4294967295
 800c640:	e00c      	b.n	800c65c <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	2202      	movs	r2, #2
 800c646:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c64e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800c650:	7afb      	ldrb	r3, [r7, #11]
 800c652:	4619      	mov	r1, r3
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	f000 fa2b 	bl	800cab0 <SCSI_ProcessRead>
 800c65a:	4603      	mov	r3, r0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3718      	adds	r7, #24
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b086      	sub	sp, #24
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	460b      	mov	r3, r1
 800c66e:	607a      	str	r2, [r7, #4]
 800c670:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	32b0      	adds	r2, #176	; 0xb0
 800c67c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c680:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d102      	bne.n	800c68e <SCSI_Write10+0x2a>
  {
    return -1;
 800c688:	f04f 33ff 	mov.w	r3, #4294967295
 800c68c:	e0ba      	b.n	800c804 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	7a1b      	ldrb	r3, [r3, #8]
 800c692:	2b00      	cmp	r3, #0
 800c694:	f040 80b0 	bne.w	800c7f8 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d10a      	bne.n	800c6b8 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c6a8:	2320      	movs	r3, #32
 800c6aa:	2205      	movs	r2, #5
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	f7ff fdae 	bl	800c20e <SCSI_SenseCode>
      return -1;
 800c6b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b6:	e0a5      	b.n	800c804 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800c6be:	b25b      	sxtb	r3, r3
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	da0a      	bge.n	800c6da <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c6ca:	2320      	movs	r3, #32
 800c6cc:	2205      	movs	r2, #5
 800c6ce:	68f8      	ldr	r0, [r7, #12]
 800c6d0:	f7ff fd9d 	bl	800c20e <SCSI_SenseCode>
      return -1;
 800c6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6d8:	e094      	b.n	800c804 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	33b0      	adds	r3, #176	; 0xb0
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4413      	add	r3, r2
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	7afa      	ldrb	r2, [r7, #11]
 800c6ee:	4610      	mov	r0, r2
 800c6f0:	4798      	blx	r3
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d008      	beq.n	800c70a <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c6f8:	7af9      	ldrb	r1, [r7, #11]
 800c6fa:	233a      	movs	r3, #58	; 0x3a
 800c6fc:	2202      	movs	r2, #2
 800c6fe:	68f8      	ldr	r0, [r7, #12]
 800c700:	f7ff fd85 	bl	800c20e <SCSI_SenseCode>
      return -1;
 800c704:	f04f 33ff 	mov.w	r3, #4294967295
 800c708:	e07c      	b.n	800c804 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	33b0      	adds	r3, #176	; 0xb0
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	4413      	add	r3, r2
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	7afa      	ldrb	r2, [r7, #11]
 800c71e:	4610      	mov	r0, r2
 800c720:	4798      	blx	r3
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d008      	beq.n	800c73a <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800c728:	7af9      	ldrb	r1, [r7, #11]
 800c72a:	2327      	movs	r3, #39	; 0x27
 800c72c:	2202      	movs	r2, #2
 800c72e:	68f8      	ldr	r0, [r7, #12]
 800c730:	f7ff fd6d 	bl	800c20e <SCSI_SenseCode>
      return -1;
 800c734:	f04f 33ff 	mov.w	r3, #4294967295
 800c738:	e064      	b.n	800c804 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	3302      	adds	r3, #2
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	3303      	adds	r3, #3
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c74a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	3304      	adds	r3, #4
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c754:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	3205      	adds	r2, #5
 800c75a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800c75c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	3307      	adds	r3, #7
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	3208      	adds	r2, #8
 800c770:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800c772:	431a      	orrs	r2, r3
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c786:	7af9      	ldrb	r1, [r7, #11]
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f000 f964 	bl	800ca56 <SCSI_CheckAddressRange>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	da02      	bge.n	800c79a <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c794:	f04f 33ff 	mov.w	r3, #4294967295
 800c798:	e034      	b.n	800c804 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c7a0:	697a      	ldr	r2, [r7, #20]
 800c7a2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800c7a6:	fb02 f303 	mul.w	r3, r2, r3
 800c7aa:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c7b2:	693a      	ldr	r2, [r7, #16]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d00a      	beq.n	800c7ce <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c7be:	2320      	movs	r3, #32
 800c7c0:	2205      	movs	r2, #5
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f7ff fd23 	bl	800c20e <SCSI_SenseCode>
      return -1;
 800c7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c7cc:	e01a      	b.n	800c804 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7d4:	bf28      	it	cs
 800c7d6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800c7da:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800c7e2:	4b0a      	ldr	r3, [pc, #40]	; (800c80c <SCSI_Write10+0x1a8>)
 800c7e4:	7819      	ldrb	r1, [r3, #0]
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	f103 0210 	add.w	r2, r3, #16
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	f00e fabf 	bl	801ad72 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	e005      	b.n	800c804 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800c7f8:	7afb      	ldrb	r3, [r7, #11]
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f000 f9dd 	bl	800cbbc <SCSI_ProcessWrite>
 800c802:	4603      	mov	r3, r0
}
 800c804:	4618      	mov	r0, r3
 800c806:	3718      	adds	r7, #24
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	2000010f 	.word	0x2000010f

0800c810 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b086      	sub	sp, #24
 800c814:	af00      	add	r7, sp, #0
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	460b      	mov	r3, r1
 800c81a:	607a      	str	r2, [r7, #4]
 800c81c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	32b0      	adds	r2, #176	; 0xb0
 800c828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c82c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d102      	bne.n	800c83a <SCSI_Write12+0x2a>
  {
    return -1;
 800c834:	f04f 33ff 	mov.w	r3, #4294967295
 800c838:	e0ca      	b.n	800c9d0 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	7a1b      	ldrb	r3, [r3, #8]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	f040 80c0 	bne.w	800c9c4 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d10a      	bne.n	800c864 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c854:	2320      	movs	r3, #32
 800c856:	2205      	movs	r2, #5
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f7ff fcd8 	bl	800c20e <SCSI_SenseCode>
      return -1;
 800c85e:	f04f 33ff 	mov.w	r3, #4294967295
 800c862:	e0b5      	b.n	800c9d0 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800c86a:	b25b      	sxtb	r3, r3
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	da0a      	bge.n	800c886 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c876:	2320      	movs	r3, #32
 800c878:	2205      	movs	r2, #5
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	f7ff fcc7 	bl	800c20e <SCSI_SenseCode>
      return -1;
 800c880:	f04f 33ff 	mov.w	r3, #4294967295
 800c884:	e0a4      	b.n	800c9d0 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c88c:	68fa      	ldr	r2, [r7, #12]
 800c88e:	33b0      	adds	r3, #176	; 0xb0
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	4413      	add	r3, r2
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	7afa      	ldrb	r2, [r7, #11]
 800c89a:	4610      	mov	r0, r2
 800c89c:	4798      	blx	r3
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00b      	beq.n	800c8bc <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800c8a4:	7af9      	ldrb	r1, [r7, #11]
 800c8a6:	233a      	movs	r3, #58	; 0x3a
 800c8a8:	2202      	movs	r2, #2
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f7ff fcaf 	bl	800c20e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	2205      	movs	r2, #5
 800c8b4:	721a      	strb	r2, [r3, #8]
      return -1;
 800c8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ba:	e089      	b.n	800c9d0 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c8c2:	68fa      	ldr	r2, [r7, #12]
 800c8c4:	33b0      	adds	r3, #176	; 0xb0
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	4413      	add	r3, r2
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	7afa      	ldrb	r2, [r7, #11]
 800c8d0:	4610      	mov	r0, r2
 800c8d2:	4798      	blx	r3
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00b      	beq.n	800c8f2 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800c8da:	7af9      	ldrb	r1, [r7, #11]
 800c8dc:	2327      	movs	r3, #39	; 0x27
 800c8de:	2202      	movs	r2, #2
 800c8e0:	68f8      	ldr	r0, [r7, #12]
 800c8e2:	f7ff fc94 	bl	800c20e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	2205      	movs	r2, #5
 800c8ea:	721a      	strb	r2, [r3, #8]
      return -1;
 800c8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c8f0:	e06e      	b.n	800c9d0 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	3302      	adds	r3, #2
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	3303      	adds	r3, #3
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c902:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	3304      	adds	r3, #4
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800c90c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	3205      	adds	r2, #5
 800c912:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800c914:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	3306      	adds	r3, #6
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	3307      	adds	r3, #7
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c92c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	3308      	adds	r3, #8
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800c936:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	3209      	adds	r2, #9
 800c93c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800c93e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c952:	7af9      	ldrb	r1, [r7, #11]
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f000 f87e 	bl	800ca56 <SCSI_CheckAddressRange>
 800c95a:	4603      	mov	r3, r0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	da02      	bge.n	800c966 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800c960:	f04f 33ff 	mov.w	r3, #4294967295
 800c964:	e034      	b.n	800c9d0 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800c96c:	697a      	ldr	r2, [r7, #20]
 800c96e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800c972:	fb02 f303 	mul.w	r3, r2, r3
 800c976:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c97e:	693a      	ldr	r2, [r7, #16]
 800c980:	429a      	cmp	r2, r3
 800c982:	d00a      	beq.n	800c99a <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800c98a:	2320      	movs	r3, #32
 800c98c:	2205      	movs	r2, #5
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	f7ff fc3d 	bl	800c20e <SCSI_SenseCode>
      return -1;
 800c994:	f04f 33ff 	mov.w	r3, #4294967295
 800c998:	e01a      	b.n	800c9d0 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9a0:	bf28      	it	cs
 800c9a2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800c9a6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800c9ae:	4b0a      	ldr	r3, [pc, #40]	; (800c9d8 <SCSI_Write12+0x1c8>)
 800c9b0:	7819      	ldrb	r1, [r3, #0]
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	f103 0210 	add.w	r2, r3, #16
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	68f8      	ldr	r0, [r7, #12]
 800c9bc:	f00e f9d9 	bl	801ad72 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	e005      	b.n	800c9d0 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800c9c4:	7afb      	ldrb	r3, [r7, #11]
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	f000 f8f7 	bl	800cbbc <SCSI_ProcessWrite>
 800c9ce:	4603      	mov	r3, r0
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3718      	adds	r7, #24
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	2000010f 	.word	0x2000010f

0800c9dc <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b086      	sub	sp, #24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	607a      	str	r2, [r7, #4]
 800c9e8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	32b0      	adds	r2, #176	; 0xb0
 800c9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9f8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d102      	bne.n	800ca06 <SCSI_Verify10+0x2a>
  {
    return -1;
 800ca00:	f04f 33ff 	mov.w	r3, #4294967295
 800ca04:	e023      	b.n	800ca4e <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	f003 0302 	and.w	r3, r3, #2
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d008      	beq.n	800ca26 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ca14:	7af9      	ldrb	r1, [r7, #11]
 800ca16:	2324      	movs	r3, #36	; 0x24
 800ca18:	2205      	movs	r2, #5
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f7ff fbf7 	bl	800c20e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800ca20:	f04f 33ff 	mov.w	r3, #4294967295
 800ca24:	e013      	b.n	800ca4e <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ca32:	7af9      	ldrb	r1, [r7, #11]
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f000 f80e 	bl	800ca56 <SCSI_CheckAddressRange>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	da02      	bge.n	800ca46 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800ca40:	f04f 33ff 	mov.w	r3, #4294967295
 800ca44:	e003      	b.n	800ca4e <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	60da      	str	r2, [r3, #12]

  return 0;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3718      	adds	r7, #24
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b086      	sub	sp, #24
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	60f8      	str	r0, [r7, #12]
 800ca5e:	607a      	str	r2, [r7, #4]
 800ca60:	603b      	str	r3, [r7, #0]
 800ca62:	460b      	mov	r3, r1
 800ca64:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	32b0      	adds	r2, #176	; 0xb0
 800ca70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca74:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d102      	bne.n	800ca82 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800ca7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca80:	e011      	b.n	800caa6 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	441a      	add	r2, r3
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d908      	bls.n	800caa4 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800ca92:	7af9      	ldrb	r1, [r7, #11]
 800ca94:	2321      	movs	r3, #33	; 0x21
 800ca96:	2205      	movs	r2, #5
 800ca98:	68f8      	ldr	r0, [r7, #12]
 800ca9a:	f7ff fbb8 	bl	800c20e <SCSI_SenseCode>
    return -1;
 800ca9e:	f04f 33ff 	mov.w	r3, #4294967295
 800caa2:	e000      	b.n	800caa6 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3718      	adds	r7, #24
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
	...

0800cab0 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800cab0:	b590      	push	{r4, r7, lr}
 800cab2:	b085      	sub	sp, #20
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	460b      	mov	r3, r1
 800caba:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	32b0      	adds	r2, #176	; 0xb0
 800cac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caca:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d102      	bne.n	800cad8 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800cad2:	f04f 33ff 	mov.w	r3, #4294967295
 800cad6:	e06a      	b.n	800cbae <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cade:	68fa      	ldr	r2, [r7, #12]
 800cae0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800cae4:	fb02 f303 	mul.w	r3, r2, r3
 800cae8:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caf0:	bf28      	it	cs
 800caf2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800caf6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	33b0      	adds	r3, #176	; 0xb0
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	4413      	add	r3, r2
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	691c      	ldr	r4, [r3, #16]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f103 0110 	add.w	r1, r3, #16
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	78f8      	ldrb	r0, [r7, #3]
 800cb28:	47a0      	blx	r4
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	da08      	bge.n	800cb42 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800cb30:	78f9      	ldrb	r1, [r7, #3]
 800cb32:	2311      	movs	r3, #17
 800cb34:	2204      	movs	r2, #4
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7ff fb69 	bl	800c20e <SCSI_SenseCode>
    return -1;
 800cb3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb40:	e035      	b.n	800cbae <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800cb42:	4b1d      	ldr	r3, [pc, #116]	; (800cbb8 <SCSI_ProcessRead+0x108>)
 800cb44:	7819      	ldrb	r1, [r3, #0]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f103 0210 	add.w	r2, r3, #16
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f00e f8ee 	bl	801ad30 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cb60:	4619      	mov	r1, r3
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb68:	441a      	add	r2, r3
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb84:	1ad2      	subs	r2, r2, r3
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	1ad2      	subs	r2, r2, r3
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d102      	bne.n	800cbac <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2203      	movs	r2, #3
 800cbaa:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800cbac:	2300      	movs	r3, #0
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3714      	adds	r7, #20
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd90      	pop	{r4, r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	2000010e 	.word	0x2000010e

0800cbbc <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800cbbc:	b590      	push	{r4, r7, lr}
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	32b0      	adds	r2, #176	; 0xb0
 800cbd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbd6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d102      	bne.n	800cbe4 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800cbde:	f04f 33ff 	mov.w	r3, #4294967295
 800cbe2:	e07a      	b.n	800ccda <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800cbf0:	fb02 f303 	mul.w	r3, r2, r3
 800cbf4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbfc:	bf28      	it	cs
 800cbfe:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800cc02:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	33b0      	adds	r3, #176	; 0xb0
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	4413      	add	r3, r2
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	695c      	ldr	r4, [r3, #20]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f103 0110 	add.w	r1, r3, #16
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cc28:	4618      	mov	r0, r3
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	78f8      	ldrb	r0, [r7, #3]
 800cc34:	47a0      	blx	r4
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	da08      	bge.n	800cc4e <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800cc3c:	78f9      	ldrb	r1, [r7, #3]
 800cc3e:	2303      	movs	r3, #3
 800cc40:	2204      	movs	r2, #4
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7ff fae3 	bl	800c20e <SCSI_SenseCode>
    return -1;
 800cc48:	f04f 33ff 	mov.w	r3, #4294967295
 800cc4c:	e045      	b.n	800ccda <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc62:	441a      	add	r2, r3
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800cc76:	4619      	mov	r1, r3
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc7e:	1ad2      	subs	r2, r2, r3
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	1ad2      	subs	r2, r2, r3
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d104      	bne.n	800ccaa <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800cca0:	2100      	movs	r1, #0
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7fe fce6 	bl	800b674 <MSC_BOT_SendCSW>
 800cca8:	e016      	b.n	800ccd8 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800ccb6:	fb02 f303 	mul.w	r3, r2, r3
 800ccba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccbe:	bf28      	it	cs
 800ccc0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ccc4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800ccc6:	4b07      	ldr	r3, [pc, #28]	; (800cce4 <SCSI_ProcessWrite+0x128>)
 800ccc8:	7819      	ldrb	r1, [r3, #0]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f103 0210 	add.w	r2, r3, #16
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f00e f84d 	bl	801ad72 <USBD_LL_PrepareReceive>
  }

  return 0;
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3714      	adds	r7, #20
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd90      	pop	{r4, r7, pc}
 800cce2:	bf00      	nop
 800cce4:	2000010f 	.word	0x2000010f

0800cce8 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b087      	sub	sp, #28
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800ccf6:	88fb      	ldrh	r3, [r7, #6]
 800ccf8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d102      	bne.n	800cd06 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800cd00:	f04f 33ff 	mov.w	r3, #4294967295
 800cd04:	e013      	b.n	800cd2e <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800cd06:	8afa      	ldrh	r2, [r7, #22]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800cd0c:	e00b      	b.n	800cd26 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800cd0e:	8afb      	ldrh	r3, [r7, #22]
 800cd10:	3b01      	subs	r3, #1
 800cd12:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800cd14:	8afb      	ldrh	r3, [r7, #22]
 800cd16:	68ba      	ldr	r2, [r7, #8]
 800cd18:	441a      	add	r2, r3
 800cd1a:	8afb      	ldrh	r3, [r7, #22]
 800cd1c:	7811      	ldrb	r1, [r2, #0]
 800cd1e:	68fa      	ldr	r2, [r7, #12]
 800cd20:	4413      	add	r3, r2
 800cd22:	460a      	mov	r2, r1
 800cd24:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800cd26:	8afb      	ldrh	r3, [r7, #22]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1f0      	bne.n	800cd0e <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800cd2c:	2300      	movs	r3, #0
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	371c      	adds	r7, #28
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr

0800cd3a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b086      	sub	sp, #24
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	60f8      	str	r0, [r7, #12]
 800cd42:	60b9      	str	r1, [r7, #8]
 800cd44:	4613      	mov	r3, r2
 800cd46:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d101      	bne.n	800cd52 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cd4e:	2303      	movs	r3, #3
 800cd50:	e01f      	b.n	800cd92 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2200      	movs	r2, #0
 800cd56:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d003      	beq.n	800cd78 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	79fa      	ldrb	r2, [r7, #7]
 800cd84:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cd86:	68f8      	ldr	r0, [r7, #12]
 800cd88:	f00d fe34 	bl	801a9f4 <USBD_LL_Init>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cd90:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3718      	adds	r7, #24
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b084      	sub	sp, #16
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cda4:	2300      	movs	r3, #0
 800cda6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d101      	bne.n	800cdb2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cdae:	2303      	movs	r3, #3
 800cdb0:	e025      	b.n	800cdfe <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	683a      	ldr	r2, [r7, #0]
 800cdb6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	32ae      	adds	r2, #174	; 0xae
 800cdc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00f      	beq.n	800cdee <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	32ae      	adds	r2, #174	; 0xae
 800cdd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdde:	f107 020e 	add.w	r2, r7, #14
 800cde2:	4610      	mov	r0, r2
 800cde4:	4798      	blx	r3
 800cde6:	4602      	mov	r2, r0
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cdf4:	1c5a      	adds	r2, r3, #1
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800cdfc:	2300      	movs	r3, #0
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3710      	adds	r7, #16
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b082      	sub	sp, #8
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f00d fe86 	bl	801ab20 <USBD_LL_Start>
 800ce14:	4603      	mov	r3, r0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ce1e:	b480      	push	{r7}
 800ce20:	b083      	sub	sp, #12
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ce26:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce40:	2300      	movs	r3, #0
 800ce42:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d009      	beq.n	800ce62 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	78fa      	ldrb	r2, [r7, #3]
 800ce58:	4611      	mov	r1, r2
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	4798      	blx	r3
 800ce5e:	4603      	mov	r3, r0
 800ce60:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	460b      	mov	r3, r1
 800ce76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	78fa      	ldrb	r2, [r7, #3]
 800ce86:	4611      	mov	r1, r2
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	4798      	blx	r3
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d001      	beq.n	800ce96 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ce92:	2303      	movs	r3, #3
 800ce94:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3710      	adds	r7, #16
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ceb0:	6839      	ldr	r1, [r7, #0]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f001 f90f 	bl	800e0d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2201      	movs	r2, #1
 800cebc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cec6:	461a      	mov	r2, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ced4:	f003 031f 	and.w	r3, r3, #31
 800ced8:	2b02      	cmp	r3, #2
 800ceda:	d01a      	beq.n	800cf12 <USBD_LL_SetupStage+0x72>
 800cedc:	2b02      	cmp	r3, #2
 800cede:	d822      	bhi.n	800cf26 <USBD_LL_SetupStage+0x86>
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d002      	beq.n	800ceea <USBD_LL_SetupStage+0x4a>
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	d00a      	beq.n	800cefe <USBD_LL_SetupStage+0x5e>
 800cee8:	e01d      	b.n	800cf26 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cef0:	4619      	mov	r1, r3
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 fb66 	bl	800d5c4 <USBD_StdDevReq>
 800cef8:	4603      	mov	r3, r0
 800cefa:	73fb      	strb	r3, [r7, #15]
      break;
 800cefc:	e020      	b.n	800cf40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf04:	4619      	mov	r1, r3
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 fbce 	bl	800d6a8 <USBD_StdItfReq>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	73fb      	strb	r3, [r7, #15]
      break;
 800cf10:	e016      	b.n	800cf40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 fc30 	bl	800d780 <USBD_StdEPReq>
 800cf20:	4603      	mov	r3, r0
 800cf22:	73fb      	strb	r3, [r7, #15]
      break;
 800cf24:	e00c      	b.n	800cf40 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cf2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	4619      	mov	r1, r3
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f00d fe72 	bl	801ac1e <USBD_LL_StallEP>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	73fb      	strb	r3, [r7, #15]
      break;
 800cf3e:	bf00      	nop
  }

  return ret;
 800cf40:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b086      	sub	sp, #24
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	60f8      	str	r0, [r7, #12]
 800cf52:	460b      	mov	r3, r1
 800cf54:	607a      	str	r2, [r7, #4]
 800cf56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cf5c:	7afb      	ldrb	r3, [r7, #11]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d16e      	bne.n	800d040 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cf68:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cf70:	2b03      	cmp	r3, #3
 800cf72:	f040 8098 	bne.w	800d0a6 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	689a      	ldr	r2, [r3, #8]
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	68db      	ldr	r3, [r3, #12]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d913      	bls.n	800cfaa <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	689a      	ldr	r2, [r3, #8]
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	1ad2      	subs	r2, r2, r3
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	68da      	ldr	r2, [r3, #12]
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	bf28      	it	cs
 800cf9c:	4613      	movcs	r3, r2
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	6879      	ldr	r1, [r7, #4]
 800cfa2:	68f8      	ldr	r0, [r7, #12]
 800cfa4:	f001 f98b 	bl	800e2be <USBD_CtlContinueRx>
 800cfa8:	e07d      	b.n	800d0a6 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cfb0:	f003 031f 	and.w	r3, r3, #31
 800cfb4:	2b02      	cmp	r3, #2
 800cfb6:	d014      	beq.n	800cfe2 <USBD_LL_DataOutStage+0x98>
 800cfb8:	2b02      	cmp	r3, #2
 800cfba:	d81d      	bhi.n	800cff8 <USBD_LL_DataOutStage+0xae>
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d002      	beq.n	800cfc6 <USBD_LL_DataOutStage+0x7c>
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d003      	beq.n	800cfcc <USBD_LL_DataOutStage+0x82>
 800cfc4:	e018      	b.n	800cff8 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	75bb      	strb	r3, [r7, #22]
            break;
 800cfca:	e018      	b.n	800cffe <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	68f8      	ldr	r0, [r7, #12]
 800cfd8:	f000 fa64 	bl	800d4a4 <USBD_CoreFindIF>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	75bb      	strb	r3, [r7, #22]
            break;
 800cfe0:	e00d      	b.n	800cffe <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	4619      	mov	r1, r3
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f000 fa66 	bl	800d4be <USBD_CoreFindEP>
 800cff2:	4603      	mov	r3, r0
 800cff4:	75bb      	strb	r3, [r7, #22]
            break;
 800cff6:	e002      	b.n	800cffe <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cff8:	2300      	movs	r3, #0
 800cffa:	75bb      	strb	r3, [r7, #22]
            break;
 800cffc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cffe:	7dbb      	ldrb	r3, [r7, #22]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d119      	bne.n	800d038 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	2b03      	cmp	r3, #3
 800d00e:	d113      	bne.n	800d038 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d010:	7dba      	ldrb	r2, [r7, #22]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	32ae      	adds	r2, #174	; 0xae
 800d016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d01a:	691b      	ldr	r3, [r3, #16]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d00b      	beq.n	800d038 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d020:	7dba      	ldrb	r2, [r7, #22]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d028:	7dba      	ldrb	r2, [r7, #22]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	32ae      	adds	r2, #174	; 0xae
 800d02e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d032:	691b      	ldr	r3, [r3, #16]
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d038:	68f8      	ldr	r0, [r7, #12]
 800d03a:	f001 f951 	bl	800e2e0 <USBD_CtlSendStatus>
 800d03e:	e032      	b.n	800d0a6 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d040:	7afb      	ldrb	r3, [r7, #11]
 800d042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d046:	b2db      	uxtb	r3, r3
 800d048:	4619      	mov	r1, r3
 800d04a:	68f8      	ldr	r0, [r7, #12]
 800d04c:	f000 fa37 	bl	800d4be <USBD_CoreFindEP>
 800d050:	4603      	mov	r3, r0
 800d052:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d054:	7dbb      	ldrb	r3, [r7, #22]
 800d056:	2bff      	cmp	r3, #255	; 0xff
 800d058:	d025      	beq.n	800d0a6 <USBD_LL_DataOutStage+0x15c>
 800d05a:	7dbb      	ldrb	r3, [r7, #22]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d122      	bne.n	800d0a6 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d066:	b2db      	uxtb	r3, r3
 800d068:	2b03      	cmp	r3, #3
 800d06a:	d117      	bne.n	800d09c <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d06c:	7dba      	ldrb	r2, [r7, #22]
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	32ae      	adds	r2, #174	; 0xae
 800d072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d076:	699b      	ldr	r3, [r3, #24]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d00f      	beq.n	800d09c <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d07c:	7dba      	ldrb	r2, [r7, #22]
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d084:	7dba      	ldrb	r2, [r7, #22]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	32ae      	adds	r2, #174	; 0xae
 800d08a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d08e:	699b      	ldr	r3, [r3, #24]
 800d090:	7afa      	ldrb	r2, [r7, #11]
 800d092:	4611      	mov	r1, r2
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	4798      	blx	r3
 800d098:	4603      	mov	r3, r0
 800d09a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d09c:	7dfb      	ldrb	r3, [r7, #23]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d001      	beq.n	800d0a6 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d0a2:	7dfb      	ldrb	r3, [r7, #23]
 800d0a4:	e000      	b.n	800d0a8 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d0a6:	2300      	movs	r3, #0
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3718      	adds	r7, #24
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b086      	sub	sp, #24
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	607a      	str	r2, [r7, #4]
 800d0bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d0be:	7afb      	ldrb	r3, [r7, #11]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d16f      	bne.n	800d1a4 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	3314      	adds	r3, #20
 800d0c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d0d0:	2b02      	cmp	r3, #2
 800d0d2:	d15a      	bne.n	800d18a <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	689a      	ldr	r2, [r3, #8]
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d914      	bls.n	800d10a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	689a      	ldr	r2, [r3, #8]
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	1ad2      	subs	r2, r2, r3
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	689b      	ldr	r3, [r3, #8]
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	6879      	ldr	r1, [r7, #4]
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f001 f8b3 	bl	800e262 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	2200      	movs	r2, #0
 800d100:	2100      	movs	r1, #0
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f00d fe35 	bl	801ad72 <USBD_LL_PrepareReceive>
 800d108:	e03f      	b.n	800d18a <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	68da      	ldr	r2, [r3, #12]
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	429a      	cmp	r2, r3
 800d114:	d11c      	bne.n	800d150 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	685a      	ldr	r2, [r3, #4]
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d11e:	429a      	cmp	r2, r3
 800d120:	d316      	bcc.n	800d150 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	685a      	ldr	r2, [r3, #4]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d20f      	bcs.n	800d150 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d130:	2200      	movs	r2, #0
 800d132:	2100      	movs	r1, #0
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f001 f894 	bl	800e262 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2200      	movs	r2, #0
 800d13e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d142:	2300      	movs	r3, #0
 800d144:	2200      	movs	r2, #0
 800d146:	2100      	movs	r1, #0
 800d148:	68f8      	ldr	r0, [r7, #12]
 800d14a:	f00d fe12 	bl	801ad72 <USBD_LL_PrepareReceive>
 800d14e:	e01c      	b.n	800d18a <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d156:	b2db      	uxtb	r3, r3
 800d158:	2b03      	cmp	r3, #3
 800d15a:	d10f      	bne.n	800d17c <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d009      	beq.n	800d17c <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2200      	movs	r2, #0
 800d16c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d176:	68db      	ldr	r3, [r3, #12]
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d17c:	2180      	movs	r1, #128	; 0x80
 800d17e:	68f8      	ldr	r0, [r7, #12]
 800d180:	f00d fd4d 	bl	801ac1e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f001 f8be 	bl	800e306 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d190:	2b00      	cmp	r3, #0
 800d192:	d03a      	beq.n	800d20a <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d194:	68f8      	ldr	r0, [r7, #12]
 800d196:	f7ff fe42 	bl	800ce1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2200      	movs	r2, #0
 800d19e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d1a2:	e032      	b.n	800d20a <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d1a4:	7afb      	ldrb	r3, [r7, #11]
 800d1a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f000 f985 	bl	800d4be <USBD_CoreFindEP>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1b8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ba:	2bff      	cmp	r3, #255	; 0xff
 800d1bc:	d025      	beq.n	800d20a <USBD_LL_DataInStage+0x15a>
 800d1be:	7dfb      	ldrb	r3, [r7, #23]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d122      	bne.n	800d20a <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b03      	cmp	r3, #3
 800d1ce:	d11c      	bne.n	800d20a <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d1d0:	7dfa      	ldrb	r2, [r7, #23]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	32ae      	adds	r2, #174	; 0xae
 800d1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1da:	695b      	ldr	r3, [r3, #20]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d014      	beq.n	800d20a <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d1e0:	7dfa      	ldrb	r2, [r7, #23]
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d1e8:	7dfa      	ldrb	r2, [r7, #23]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	32ae      	adds	r2, #174	; 0xae
 800d1ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1f2:	695b      	ldr	r3, [r3, #20]
 800d1f4:	7afa      	ldrb	r2, [r7, #11]
 800d1f6:	4611      	mov	r1, r2
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	4798      	blx	r3
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d200:	7dbb      	ldrb	r3, [r7, #22]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d001      	beq.n	800d20a <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d206:	7dbb      	ldrb	r3, [r7, #22]
 800d208:	e000      	b.n	800d20c <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d20a:	2300      	movs	r3, #0
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3718      	adds	r7, #24
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d21c:	2300      	movs	r3, #0
 800d21e:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2201      	movs	r2, #1
 800d224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2200      	movs	r2, #0
 800d234:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2200      	movs	r2, #0
 800d23a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2200      	movs	r2, #0
 800d242:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d014      	beq.n	800d27a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d00e      	beq.n	800d27a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	6852      	ldr	r2, [r2, #4]
 800d268:	b2d2      	uxtb	r2, r2
 800d26a:	4611      	mov	r1, r2
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	4798      	blx	r3
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	d001      	beq.n	800d27a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d276:	2303      	movs	r3, #3
 800d278:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d27a:	2340      	movs	r3, #64	; 0x40
 800d27c:	2200      	movs	r2, #0
 800d27e:	2100      	movs	r1, #0
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f00d fc68 	bl	801ab56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2201      	movs	r2, #1
 800d28a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2240      	movs	r2, #64	; 0x40
 800d292:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d296:	2340      	movs	r3, #64	; 0x40
 800d298:	2200      	movs	r2, #0
 800d29a:	2180      	movs	r1, #128	; 0x80
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f00d fc5a 	bl	801ab56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2240      	movs	r2, #64	; 0x40
 800d2ac:	621a      	str	r2, [r3, #32]

  return ret;
 800d2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3710      	adds	r7, #16
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	78fa      	ldrb	r2, [r7, #3]
 800d2c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d2ca:	2300      	movs	r3, #0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2e6:	b2db      	uxtb	r3, r3
 800d2e8:	2b04      	cmp	r3, #4
 800d2ea:	d006      	beq.n	800d2fa <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2f2:	b2da      	uxtb	r2, r3
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2204      	movs	r2, #4
 800d2fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	370c      	adds	r7, #12
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr

0800d310 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d310:	b480      	push	{r7}
 800d312:	b083      	sub	sp, #12
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	2b04      	cmp	r3, #4
 800d322:	d106      	bne.n	800d332 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d32a:	b2da      	uxtb	r2, r3
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d332:	2300      	movs	r3, #0
}
 800d334:	4618      	mov	r0, r3
 800d336:	370c      	adds	r7, #12
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr

0800d340 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	2b03      	cmp	r3, #3
 800d352:	d110      	bne.n	800d376 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00b      	beq.n	800d376 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d364:	69db      	ldr	r3, [r3, #28]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d005      	beq.n	800d376 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d370:	69db      	ldr	r3, [r3, #28]
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d376:	2300      	movs	r3, #0
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3708      	adds	r7, #8
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	460b      	mov	r3, r1
 800d38a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	32ae      	adds	r2, #174	; 0xae
 800d396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d101      	bne.n	800d3a2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d39e:	2303      	movs	r3, #3
 800d3a0:	e01c      	b.n	800d3dc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	2b03      	cmp	r3, #3
 800d3ac:	d115      	bne.n	800d3da <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	32ae      	adds	r2, #174	; 0xae
 800d3b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3bc:	6a1b      	ldr	r3, [r3, #32]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d00b      	beq.n	800d3da <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	32ae      	adds	r2, #174	; 0xae
 800d3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3d0:	6a1b      	ldr	r3, [r3, #32]
 800d3d2:	78fa      	ldrb	r2, [r7, #3]
 800d3d4:	4611      	mov	r1, r2
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3708      	adds	r7, #8
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b082      	sub	sp, #8
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	32ae      	adds	r2, #174	; 0xae
 800d3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d101      	bne.n	800d406 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d402:	2303      	movs	r3, #3
 800d404:	e01c      	b.n	800d440 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	2b03      	cmp	r3, #3
 800d410:	d115      	bne.n	800d43e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	32ae      	adds	r2, #174	; 0xae
 800d41c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00b      	beq.n	800d43e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	32ae      	adds	r2, #174	; 0xae
 800d430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d436:	78fa      	ldrb	r2, [r7, #3]
 800d438:	4611      	mov	r1, r2
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d43e:	2300      	movs	r3, #0
}
 800d440:	4618      	mov	r0, r3
 800d442:	3708      	adds	r7, #8
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d450:	2300      	movs	r3, #0
}
 800d452:	4618      	mov	r0, r3
 800d454:	370c      	adds	r7, #12
 800d456:	46bd      	mov	sp, r7
 800d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45c:	4770      	bx	lr

0800d45e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d45e:	b580      	push	{r7, lr}
 800d460:	b084      	sub	sp, #16
 800d462:	af00      	add	r7, sp, #0
 800d464:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d466:	2300      	movs	r3, #0
 800d468:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2201      	movs	r2, #1
 800d46e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00e      	beq.n	800d49a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	6852      	ldr	r2, [r2, #4]
 800d488:	b2d2      	uxtb	r2, r2
 800d48a:	4611      	mov	r1, r2
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	4798      	blx	r3
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d001      	beq.n	800d49a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d496:	2303      	movs	r3, #3
 800d498:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d49a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3710      	adds	r7, #16
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d4b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	370c      	adds	r7, #12
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr

0800d4be <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d4be:	b480      	push	{r7}
 800d4c0:	b083      	sub	sp, #12
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d4ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	370c      	adds	r7, #12
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b086      	sub	sp, #24
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	460b      	mov	r3, r1
 800d4e2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	885b      	ldrh	r3, [r3, #2]
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	b29b      	uxth	r3, r3
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d920      	bls.n	800d542 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	b29b      	uxth	r3, r3
 800d506:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d508:	e013      	b.n	800d532 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d50a:	f107 030a 	add.w	r3, r7, #10
 800d50e:	4619      	mov	r1, r3
 800d510:	6978      	ldr	r0, [r7, #20]
 800d512:	f000 f81b 	bl	800d54c <USBD_GetNextDesc>
 800d516:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	785b      	ldrb	r3, [r3, #1]
 800d51c:	2b05      	cmp	r3, #5
 800d51e:	d108      	bne.n	800d532 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	789b      	ldrb	r3, [r3, #2]
 800d528:	78fa      	ldrb	r2, [r7, #3]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d008      	beq.n	800d540 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d52e:	2300      	movs	r3, #0
 800d530:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	885b      	ldrh	r3, [r3, #2]
 800d536:	b29a      	uxth	r2, r3
 800d538:	897b      	ldrh	r3, [r7, #10]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d8e5      	bhi.n	800d50a <USBD_GetEpDesc+0x32>
 800d53e:	e000      	b.n	800d542 <USBD_GetEpDesc+0x6a>
          break;
 800d540:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d542:	693b      	ldr	r3, [r7, #16]
}
 800d544:	4618      	mov	r0, r3
 800d546:	3718      	adds	r7, #24
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b085      	sub	sp, #20
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	881a      	ldrh	r2, [r3, #0]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	b29b      	uxth	r3, r3
 800d564:	4413      	add	r3, r2
 800d566:	b29a      	uxth	r2, r3
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	461a      	mov	r2, r3
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	4413      	add	r3, r2
 800d576:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d578:	68fb      	ldr	r3, [r7, #12]
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3714      	adds	r7, #20
 800d57e:	46bd      	mov	sp, r7
 800d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d584:	4770      	bx	lr

0800d586 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d586:	b480      	push	{r7}
 800d588:	b087      	sub	sp, #28
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	3301      	adds	r3, #1
 800d59c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d5a4:	8a3b      	ldrh	r3, [r7, #16]
 800d5a6:	021b      	lsls	r3, r3, #8
 800d5a8:	b21a      	sxth	r2, r3
 800d5aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d5ae:	4313      	orrs	r3, r2
 800d5b0:	b21b      	sxth	r3, r3
 800d5b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d5b4:	89fb      	ldrh	r3, [r7, #14]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	371c      	adds	r7, #28
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr
	...

0800d5c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d5da:	2b40      	cmp	r3, #64	; 0x40
 800d5dc:	d005      	beq.n	800d5ea <USBD_StdDevReq+0x26>
 800d5de:	2b40      	cmp	r3, #64	; 0x40
 800d5e0:	d857      	bhi.n	800d692 <USBD_StdDevReq+0xce>
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d00f      	beq.n	800d606 <USBD_StdDevReq+0x42>
 800d5e6:	2b20      	cmp	r3, #32
 800d5e8:	d153      	bne.n	800d692 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	32ae      	adds	r2, #174	; 0xae
 800d5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	6839      	ldr	r1, [r7, #0]
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	4798      	blx	r3
 800d600:	4603      	mov	r3, r0
 800d602:	73fb      	strb	r3, [r7, #15]
      break;
 800d604:	e04a      	b.n	800d69c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	785b      	ldrb	r3, [r3, #1]
 800d60a:	2b09      	cmp	r3, #9
 800d60c:	d83b      	bhi.n	800d686 <USBD_StdDevReq+0xc2>
 800d60e:	a201      	add	r2, pc, #4	; (adr r2, 800d614 <USBD_StdDevReq+0x50>)
 800d610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d614:	0800d669 	.word	0x0800d669
 800d618:	0800d67d 	.word	0x0800d67d
 800d61c:	0800d687 	.word	0x0800d687
 800d620:	0800d673 	.word	0x0800d673
 800d624:	0800d687 	.word	0x0800d687
 800d628:	0800d647 	.word	0x0800d647
 800d62c:	0800d63d 	.word	0x0800d63d
 800d630:	0800d687 	.word	0x0800d687
 800d634:	0800d65f 	.word	0x0800d65f
 800d638:	0800d651 	.word	0x0800d651
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d63c:	6839      	ldr	r1, [r7, #0]
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 fa3c 	bl	800dabc <USBD_GetDescriptor>
          break;
 800d644:	e024      	b.n	800d690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d646:	6839      	ldr	r1, [r7, #0]
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f000 fba1 	bl	800dd90 <USBD_SetAddress>
          break;
 800d64e:	e01f      	b.n	800d690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d650:	6839      	ldr	r1, [r7, #0]
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 fbe0 	bl	800de18 <USBD_SetConfig>
 800d658:	4603      	mov	r3, r0
 800d65a:	73fb      	strb	r3, [r7, #15]
          break;
 800d65c:	e018      	b.n	800d690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d65e:	6839      	ldr	r1, [r7, #0]
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 fc83 	bl	800df6c <USBD_GetConfig>
          break;
 800d666:	e013      	b.n	800d690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d668:	6839      	ldr	r1, [r7, #0]
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 fcb4 	bl	800dfd8 <USBD_GetStatus>
          break;
 800d670:	e00e      	b.n	800d690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d672:	6839      	ldr	r1, [r7, #0]
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 fce3 	bl	800e040 <USBD_SetFeature>
          break;
 800d67a:	e009      	b.n	800d690 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d67c:	6839      	ldr	r1, [r7, #0]
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 fd07 	bl	800e092 <USBD_ClrFeature>
          break;
 800d684:	e004      	b.n	800d690 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d686:	6839      	ldr	r1, [r7, #0]
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f000 fd5e 	bl	800e14a <USBD_CtlError>
          break;
 800d68e:	bf00      	nop
      }
      break;
 800d690:	e004      	b.n	800d69c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d692:	6839      	ldr	r1, [r7, #0]
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 fd58 	bl	800e14a <USBD_CtlError>
      break;
 800d69a:	bf00      	nop
  }

  return ret;
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop

0800d6a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d6be:	2b40      	cmp	r3, #64	; 0x40
 800d6c0:	d005      	beq.n	800d6ce <USBD_StdItfReq+0x26>
 800d6c2:	2b40      	cmp	r3, #64	; 0x40
 800d6c4:	d852      	bhi.n	800d76c <USBD_StdItfReq+0xc4>
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d001      	beq.n	800d6ce <USBD_StdItfReq+0x26>
 800d6ca:	2b20      	cmp	r3, #32
 800d6cc:	d14e      	bne.n	800d76c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6d4:	b2db      	uxtb	r3, r3
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	2b02      	cmp	r3, #2
 800d6da:	d840      	bhi.n	800d75e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	889b      	ldrh	r3, [r3, #4]
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d836      	bhi.n	800d754 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	889b      	ldrh	r3, [r3, #4]
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f7ff fed8 	bl	800d4a4 <USBD_CoreFindIF>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d6f8:	7bbb      	ldrb	r3, [r7, #14]
 800d6fa:	2bff      	cmp	r3, #255	; 0xff
 800d6fc:	d01d      	beq.n	800d73a <USBD_StdItfReq+0x92>
 800d6fe:	7bbb      	ldrb	r3, [r7, #14]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d11a      	bne.n	800d73a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d704:	7bba      	ldrb	r2, [r7, #14]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	32ae      	adds	r2, #174	; 0xae
 800d70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d70e:	689b      	ldr	r3, [r3, #8]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d00f      	beq.n	800d734 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d714:	7bba      	ldrb	r2, [r7, #14]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d71c:	7bba      	ldrb	r2, [r7, #14]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	32ae      	adds	r2, #174	; 0xae
 800d722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d726:	689b      	ldr	r3, [r3, #8]
 800d728:	6839      	ldr	r1, [r7, #0]
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	4798      	blx	r3
 800d72e:	4603      	mov	r3, r0
 800d730:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d732:	e004      	b.n	800d73e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d734:	2303      	movs	r3, #3
 800d736:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d738:	e001      	b.n	800d73e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d73a:	2303      	movs	r3, #3
 800d73c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	88db      	ldrh	r3, [r3, #6]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d110      	bne.n	800d768 <USBD_StdItfReq+0xc0>
 800d746:	7bfb      	ldrb	r3, [r7, #15]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10d      	bne.n	800d768 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 fdc7 	bl	800e2e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d752:	e009      	b.n	800d768 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d754:	6839      	ldr	r1, [r7, #0]
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 fcf7 	bl	800e14a <USBD_CtlError>
          break;
 800d75c:	e004      	b.n	800d768 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d75e:	6839      	ldr	r1, [r7, #0]
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 fcf2 	bl	800e14a <USBD_CtlError>
          break;
 800d766:	e000      	b.n	800d76a <USBD_StdItfReq+0xc2>
          break;
 800d768:	bf00      	nop
      }
      break;
 800d76a:	e004      	b.n	800d776 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d76c:	6839      	ldr	r1, [r7, #0]
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 fceb 	bl	800e14a <USBD_CtlError>
      break;
 800d774:	bf00      	nop
  }

  return ret;
 800d776:	7bfb      	ldrb	r3, [r7, #15]
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3710      	adds	r7, #16
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d78a:	2300      	movs	r3, #0
 800d78c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	889b      	ldrh	r3, [r3, #4]
 800d792:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d79c:	2b40      	cmp	r3, #64	; 0x40
 800d79e:	d007      	beq.n	800d7b0 <USBD_StdEPReq+0x30>
 800d7a0:	2b40      	cmp	r3, #64	; 0x40
 800d7a2:	f200 817f 	bhi.w	800daa4 <USBD_StdEPReq+0x324>
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d02a      	beq.n	800d800 <USBD_StdEPReq+0x80>
 800d7aa:	2b20      	cmp	r3, #32
 800d7ac:	f040 817a 	bne.w	800daa4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d7b0:	7bbb      	ldrb	r3, [r7, #14]
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7ff fe82 	bl	800d4be <USBD_CoreFindEP>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d7be:	7b7b      	ldrb	r3, [r7, #13]
 800d7c0:	2bff      	cmp	r3, #255	; 0xff
 800d7c2:	f000 8174 	beq.w	800daae <USBD_StdEPReq+0x32e>
 800d7c6:	7b7b      	ldrb	r3, [r7, #13]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f040 8170 	bne.w	800daae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d7ce:	7b7a      	ldrb	r2, [r7, #13]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d7d6:	7b7a      	ldrb	r2, [r7, #13]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	32ae      	adds	r2, #174	; 0xae
 800d7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7e0:	689b      	ldr	r3, [r3, #8]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	f000 8163 	beq.w	800daae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d7e8:	7b7a      	ldrb	r2, [r7, #13]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	32ae      	adds	r2, #174	; 0xae
 800d7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7f2:	689b      	ldr	r3, [r3, #8]
 800d7f4:	6839      	ldr	r1, [r7, #0]
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	4798      	blx	r3
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d7fe:	e156      	b.n	800daae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	785b      	ldrb	r3, [r3, #1]
 800d804:	2b03      	cmp	r3, #3
 800d806:	d008      	beq.n	800d81a <USBD_StdEPReq+0x9a>
 800d808:	2b03      	cmp	r3, #3
 800d80a:	f300 8145 	bgt.w	800da98 <USBD_StdEPReq+0x318>
 800d80e:	2b00      	cmp	r3, #0
 800d810:	f000 809b 	beq.w	800d94a <USBD_StdEPReq+0x1ca>
 800d814:	2b01      	cmp	r3, #1
 800d816:	d03c      	beq.n	800d892 <USBD_StdEPReq+0x112>
 800d818:	e13e      	b.n	800da98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d820:	b2db      	uxtb	r3, r3
 800d822:	2b02      	cmp	r3, #2
 800d824:	d002      	beq.n	800d82c <USBD_StdEPReq+0xac>
 800d826:	2b03      	cmp	r3, #3
 800d828:	d016      	beq.n	800d858 <USBD_StdEPReq+0xd8>
 800d82a:	e02c      	b.n	800d886 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d82c:	7bbb      	ldrb	r3, [r7, #14]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00d      	beq.n	800d84e <USBD_StdEPReq+0xce>
 800d832:	7bbb      	ldrb	r3, [r7, #14]
 800d834:	2b80      	cmp	r3, #128	; 0x80
 800d836:	d00a      	beq.n	800d84e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d838:	7bbb      	ldrb	r3, [r7, #14]
 800d83a:	4619      	mov	r1, r3
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f00d f9ee 	bl	801ac1e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d842:	2180      	movs	r1, #128	; 0x80
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f00d f9ea 	bl	801ac1e <USBD_LL_StallEP>
 800d84a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d84c:	e020      	b.n	800d890 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d84e:	6839      	ldr	r1, [r7, #0]
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f000 fc7a 	bl	800e14a <USBD_CtlError>
              break;
 800d856:	e01b      	b.n	800d890 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	885b      	ldrh	r3, [r3, #2]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d10e      	bne.n	800d87e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d860:	7bbb      	ldrb	r3, [r7, #14]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00b      	beq.n	800d87e <USBD_StdEPReq+0xfe>
 800d866:	7bbb      	ldrb	r3, [r7, #14]
 800d868:	2b80      	cmp	r3, #128	; 0x80
 800d86a:	d008      	beq.n	800d87e <USBD_StdEPReq+0xfe>
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	88db      	ldrh	r3, [r3, #6]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d104      	bne.n	800d87e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d874:	7bbb      	ldrb	r3, [r7, #14]
 800d876:	4619      	mov	r1, r3
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f00d f9d0 	bl	801ac1e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 fd2e 	bl	800e2e0 <USBD_CtlSendStatus>

              break;
 800d884:	e004      	b.n	800d890 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d886:	6839      	ldr	r1, [r7, #0]
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 fc5e 	bl	800e14a <USBD_CtlError>
              break;
 800d88e:	bf00      	nop
          }
          break;
 800d890:	e107      	b.n	800daa2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d898:	b2db      	uxtb	r3, r3
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	d002      	beq.n	800d8a4 <USBD_StdEPReq+0x124>
 800d89e:	2b03      	cmp	r3, #3
 800d8a0:	d016      	beq.n	800d8d0 <USBD_StdEPReq+0x150>
 800d8a2:	e04b      	b.n	800d93c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d8a4:	7bbb      	ldrb	r3, [r7, #14]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d00d      	beq.n	800d8c6 <USBD_StdEPReq+0x146>
 800d8aa:	7bbb      	ldrb	r3, [r7, #14]
 800d8ac:	2b80      	cmp	r3, #128	; 0x80
 800d8ae:	d00a      	beq.n	800d8c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d8b0:	7bbb      	ldrb	r3, [r7, #14]
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f00d f9b2 	bl	801ac1e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8ba:	2180      	movs	r1, #128	; 0x80
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f00d f9ae 	bl	801ac1e <USBD_LL_StallEP>
 800d8c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d8c4:	e040      	b.n	800d948 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d8c6:	6839      	ldr	r1, [r7, #0]
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f000 fc3e 	bl	800e14a <USBD_CtlError>
              break;
 800d8ce:	e03b      	b.n	800d948 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	885b      	ldrh	r3, [r3, #2]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d136      	bne.n	800d946 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d8d8:	7bbb      	ldrb	r3, [r7, #14]
 800d8da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d004      	beq.n	800d8ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d8e2:	7bbb      	ldrb	r3, [r7, #14]
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f00d f9b8 	bl	801ac5c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 fcf7 	bl	800e2e0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d8f2:	7bbb      	ldrb	r3, [r7, #14]
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f7ff fde1 	bl	800d4be <USBD_CoreFindEP>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d900:	7b7b      	ldrb	r3, [r7, #13]
 800d902:	2bff      	cmp	r3, #255	; 0xff
 800d904:	d01f      	beq.n	800d946 <USBD_StdEPReq+0x1c6>
 800d906:	7b7b      	ldrb	r3, [r7, #13]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d11c      	bne.n	800d946 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d90c:	7b7a      	ldrb	r2, [r7, #13]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d914:	7b7a      	ldrb	r2, [r7, #13]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	32ae      	adds	r2, #174	; 0xae
 800d91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d010      	beq.n	800d946 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d924:	7b7a      	ldrb	r2, [r7, #13]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	32ae      	adds	r2, #174	; 0xae
 800d92a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	6839      	ldr	r1, [r7, #0]
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	4798      	blx	r3
 800d936:	4603      	mov	r3, r0
 800d938:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d93a:	e004      	b.n	800d946 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d93c:	6839      	ldr	r1, [r7, #0]
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f000 fc03 	bl	800e14a <USBD_CtlError>
              break;
 800d944:	e000      	b.n	800d948 <USBD_StdEPReq+0x1c8>
              break;
 800d946:	bf00      	nop
          }
          break;
 800d948:	e0ab      	b.n	800daa2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d950:	b2db      	uxtb	r3, r3
 800d952:	2b02      	cmp	r3, #2
 800d954:	d002      	beq.n	800d95c <USBD_StdEPReq+0x1dc>
 800d956:	2b03      	cmp	r3, #3
 800d958:	d032      	beq.n	800d9c0 <USBD_StdEPReq+0x240>
 800d95a:	e097      	b.n	800da8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d95c:	7bbb      	ldrb	r3, [r7, #14]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d007      	beq.n	800d972 <USBD_StdEPReq+0x1f2>
 800d962:	7bbb      	ldrb	r3, [r7, #14]
 800d964:	2b80      	cmp	r3, #128	; 0x80
 800d966:	d004      	beq.n	800d972 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d968:	6839      	ldr	r1, [r7, #0]
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 fbed 	bl	800e14a <USBD_CtlError>
                break;
 800d970:	e091      	b.n	800da96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d976:	2b00      	cmp	r3, #0
 800d978:	da0b      	bge.n	800d992 <USBD_StdEPReq+0x212>
 800d97a:	7bbb      	ldrb	r3, [r7, #14]
 800d97c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d980:	4613      	mov	r3, r2
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	4413      	add	r3, r2
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	3310      	adds	r3, #16
 800d98a:	687a      	ldr	r2, [r7, #4]
 800d98c:	4413      	add	r3, r2
 800d98e:	3304      	adds	r3, #4
 800d990:	e00b      	b.n	800d9aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d992:	7bbb      	ldrb	r3, [r7, #14]
 800d994:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d998:	4613      	mov	r3, r2
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	4413      	add	r3, r2
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	3304      	adds	r3, #4
 800d9aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	2202      	movs	r2, #2
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f000 fc37 	bl	800e22c <USBD_CtlSendData>
              break;
 800d9be:	e06a      	b.n	800da96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d9c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	da11      	bge.n	800d9ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d9c8:	7bbb      	ldrb	r3, [r7, #14]
 800d9ca:	f003 020f 	and.w	r2, r3, #15
 800d9ce:	6879      	ldr	r1, [r7, #4]
 800d9d0:	4613      	mov	r3, r2
 800d9d2:	009b      	lsls	r3, r3, #2
 800d9d4:	4413      	add	r3, r2
 800d9d6:	009b      	lsls	r3, r3, #2
 800d9d8:	440b      	add	r3, r1
 800d9da:	3324      	adds	r3, #36	; 0x24
 800d9dc:	881b      	ldrh	r3, [r3, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d117      	bne.n	800da12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d9e2:	6839      	ldr	r1, [r7, #0]
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f000 fbb0 	bl	800e14a <USBD_CtlError>
                  break;
 800d9ea:	e054      	b.n	800da96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d9ec:	7bbb      	ldrb	r3, [r7, #14]
 800d9ee:	f003 020f 	and.w	r2, r3, #15
 800d9f2:	6879      	ldr	r1, [r7, #4]
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	4413      	add	r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	440b      	add	r3, r1
 800d9fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800da02:	881b      	ldrh	r3, [r3, #0]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d104      	bne.n	800da12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800da08:	6839      	ldr	r1, [r7, #0]
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 fb9d 	bl	800e14a <USBD_CtlError>
                  break;
 800da10:	e041      	b.n	800da96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da16:	2b00      	cmp	r3, #0
 800da18:	da0b      	bge.n	800da32 <USBD_StdEPReq+0x2b2>
 800da1a:	7bbb      	ldrb	r3, [r7, #14]
 800da1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da20:	4613      	mov	r3, r2
 800da22:	009b      	lsls	r3, r3, #2
 800da24:	4413      	add	r3, r2
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	3310      	adds	r3, #16
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	4413      	add	r3, r2
 800da2e:	3304      	adds	r3, #4
 800da30:	e00b      	b.n	800da4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800da32:	7bbb      	ldrb	r3, [r7, #14]
 800da34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da38:	4613      	mov	r3, r2
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	4413      	add	r3, r2
 800da3e:	009b      	lsls	r3, r3, #2
 800da40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800da44:	687a      	ldr	r2, [r7, #4]
 800da46:	4413      	add	r3, r2
 800da48:	3304      	adds	r3, #4
 800da4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800da4c:	7bbb      	ldrb	r3, [r7, #14]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d002      	beq.n	800da58 <USBD_StdEPReq+0x2d8>
 800da52:	7bbb      	ldrb	r3, [r7, #14]
 800da54:	2b80      	cmp	r3, #128	; 0x80
 800da56:	d103      	bne.n	800da60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	2200      	movs	r2, #0
 800da5c:	601a      	str	r2, [r3, #0]
 800da5e:	e00e      	b.n	800da7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800da60:	7bbb      	ldrb	r3, [r7, #14]
 800da62:	4619      	mov	r1, r3
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f00d f918 	bl	801ac9a <USBD_LL_IsStallEP>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d003      	beq.n	800da78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	2201      	movs	r2, #1
 800da74:	601a      	str	r2, [r3, #0]
 800da76:	e002      	b.n	800da7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	2200      	movs	r2, #0
 800da7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	2202      	movs	r2, #2
 800da82:	4619      	mov	r1, r3
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 fbd1 	bl	800e22c <USBD_CtlSendData>
              break;
 800da8a:	e004      	b.n	800da96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800da8c:	6839      	ldr	r1, [r7, #0]
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 fb5b 	bl	800e14a <USBD_CtlError>
              break;
 800da94:	bf00      	nop
          }
          break;
 800da96:	e004      	b.n	800daa2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800da98:	6839      	ldr	r1, [r7, #0]
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 fb55 	bl	800e14a <USBD_CtlError>
          break;
 800daa0:	bf00      	nop
      }
      break;
 800daa2:	e005      	b.n	800dab0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800daa4:	6839      	ldr	r1, [r7, #0]
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f000 fb4f 	bl	800e14a <USBD_CtlError>
      break;
 800daac:	e000      	b.n	800dab0 <USBD_StdEPReq+0x330>
      break;
 800daae:	bf00      	nop
  }

  return ret;
 800dab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3710      	adds	r7, #16
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
	...

0800dabc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dac6:	2300      	movs	r3, #0
 800dac8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800daca:	2300      	movs	r3, #0
 800dacc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dace:	2300      	movs	r3, #0
 800dad0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	885b      	ldrh	r3, [r3, #2]
 800dad6:	0a1b      	lsrs	r3, r3, #8
 800dad8:	b29b      	uxth	r3, r3
 800dada:	3b01      	subs	r3, #1
 800dadc:	2b06      	cmp	r3, #6
 800dade:	f200 8128 	bhi.w	800dd32 <USBD_GetDescriptor+0x276>
 800dae2:	a201      	add	r2, pc, #4	; (adr r2, 800dae8 <USBD_GetDescriptor+0x2c>)
 800dae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae8:	0800db05 	.word	0x0800db05
 800daec:	0800db1d 	.word	0x0800db1d
 800daf0:	0800db5d 	.word	0x0800db5d
 800daf4:	0800dd33 	.word	0x0800dd33
 800daf8:	0800dd33 	.word	0x0800dd33
 800dafc:	0800dcd3 	.word	0x0800dcd3
 800db00:	0800dcff 	.word	0x0800dcff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	7c12      	ldrb	r2, [r2, #16]
 800db10:	f107 0108 	add.w	r1, r7, #8
 800db14:	4610      	mov	r0, r2
 800db16:	4798      	blx	r3
 800db18:	60f8      	str	r0, [r7, #12]
      break;
 800db1a:	e112      	b.n	800dd42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	7c1b      	ldrb	r3, [r3, #16]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d10d      	bne.n	800db40 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db2c:	f107 0208 	add.w	r2, r7, #8
 800db30:	4610      	mov	r0, r2
 800db32:	4798      	blx	r3
 800db34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	3301      	adds	r3, #1
 800db3a:	2202      	movs	r2, #2
 800db3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800db3e:	e100      	b.n	800dd42 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db48:	f107 0208 	add.w	r2, r7, #8
 800db4c:	4610      	mov	r0, r2
 800db4e:	4798      	blx	r3
 800db50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	3301      	adds	r3, #1
 800db56:	2202      	movs	r2, #2
 800db58:	701a      	strb	r2, [r3, #0]
      break;
 800db5a:	e0f2      	b.n	800dd42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	885b      	ldrh	r3, [r3, #2]
 800db60:	b2db      	uxtb	r3, r3
 800db62:	2b05      	cmp	r3, #5
 800db64:	f200 80ac 	bhi.w	800dcc0 <USBD_GetDescriptor+0x204>
 800db68:	a201      	add	r2, pc, #4	; (adr r2, 800db70 <USBD_GetDescriptor+0xb4>)
 800db6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db6e:	bf00      	nop
 800db70:	0800db89 	.word	0x0800db89
 800db74:	0800dbbd 	.word	0x0800dbbd
 800db78:	0800dbf1 	.word	0x0800dbf1
 800db7c:	0800dc25 	.word	0x0800dc25
 800db80:	0800dc59 	.word	0x0800dc59
 800db84:	0800dc8d 	.word	0x0800dc8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d00b      	beq.n	800dbac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	7c12      	ldrb	r2, [r2, #16]
 800dba0:	f107 0108 	add.w	r1, r7, #8
 800dba4:	4610      	mov	r0, r2
 800dba6:	4798      	blx	r3
 800dba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbaa:	e091      	b.n	800dcd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dbac:	6839      	ldr	r1, [r7, #0]
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 facb 	bl	800e14a <USBD_CtlError>
            err++;
 800dbb4:	7afb      	ldrb	r3, [r7, #11]
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	72fb      	strb	r3, [r7, #11]
          break;
 800dbba:	e089      	b.n	800dcd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d00b      	beq.n	800dbe0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbce:	689b      	ldr	r3, [r3, #8]
 800dbd0:	687a      	ldr	r2, [r7, #4]
 800dbd2:	7c12      	ldrb	r2, [r2, #16]
 800dbd4:	f107 0108 	add.w	r1, r7, #8
 800dbd8:	4610      	mov	r0, r2
 800dbda:	4798      	blx	r3
 800dbdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbde:	e077      	b.n	800dcd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dbe0:	6839      	ldr	r1, [r7, #0]
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f000 fab1 	bl	800e14a <USBD_CtlError>
            err++;
 800dbe8:	7afb      	ldrb	r3, [r7, #11]
 800dbea:	3301      	adds	r3, #1
 800dbec:	72fb      	strb	r3, [r7, #11]
          break;
 800dbee:	e06f      	b.n	800dcd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00b      	beq.n	800dc14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc02:	68db      	ldr	r3, [r3, #12]
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	7c12      	ldrb	r2, [r2, #16]
 800dc08:	f107 0108 	add.w	r1, r7, #8
 800dc0c:	4610      	mov	r0, r2
 800dc0e:	4798      	blx	r3
 800dc10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc12:	e05d      	b.n	800dcd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dc14:	6839      	ldr	r1, [r7, #0]
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 fa97 	bl	800e14a <USBD_CtlError>
            err++;
 800dc1c:	7afb      	ldrb	r3, [r7, #11]
 800dc1e:	3301      	adds	r3, #1
 800dc20:	72fb      	strb	r3, [r7, #11]
          break;
 800dc22:	e055      	b.n	800dcd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc2a:	691b      	ldr	r3, [r3, #16]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d00b      	beq.n	800dc48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc36:	691b      	ldr	r3, [r3, #16]
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	7c12      	ldrb	r2, [r2, #16]
 800dc3c:	f107 0108 	add.w	r1, r7, #8
 800dc40:	4610      	mov	r0, r2
 800dc42:	4798      	blx	r3
 800dc44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc46:	e043      	b.n	800dcd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dc48:	6839      	ldr	r1, [r7, #0]
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 fa7d 	bl	800e14a <USBD_CtlError>
            err++;
 800dc50:	7afb      	ldrb	r3, [r7, #11]
 800dc52:	3301      	adds	r3, #1
 800dc54:	72fb      	strb	r3, [r7, #11]
          break;
 800dc56:	e03b      	b.n	800dcd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc5e:	695b      	ldr	r3, [r3, #20]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d00b      	beq.n	800dc7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc6a:	695b      	ldr	r3, [r3, #20]
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	7c12      	ldrb	r2, [r2, #16]
 800dc70:	f107 0108 	add.w	r1, r7, #8
 800dc74:	4610      	mov	r0, r2
 800dc76:	4798      	blx	r3
 800dc78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc7a:	e029      	b.n	800dcd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dc7c:	6839      	ldr	r1, [r7, #0]
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 fa63 	bl	800e14a <USBD_CtlError>
            err++;
 800dc84:	7afb      	ldrb	r3, [r7, #11]
 800dc86:	3301      	adds	r3, #1
 800dc88:	72fb      	strb	r3, [r7, #11]
          break;
 800dc8a:	e021      	b.n	800dcd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc92:	699b      	ldr	r3, [r3, #24]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d00b      	beq.n	800dcb0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc9e:	699b      	ldr	r3, [r3, #24]
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	7c12      	ldrb	r2, [r2, #16]
 800dca4:	f107 0108 	add.w	r1, r7, #8
 800dca8:	4610      	mov	r0, r2
 800dcaa:	4798      	blx	r3
 800dcac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcae:	e00f      	b.n	800dcd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dcb0:	6839      	ldr	r1, [r7, #0]
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f000 fa49 	bl	800e14a <USBD_CtlError>
            err++;
 800dcb8:	7afb      	ldrb	r3, [r7, #11]
 800dcba:	3301      	adds	r3, #1
 800dcbc:	72fb      	strb	r3, [r7, #11]
          break;
 800dcbe:	e007      	b.n	800dcd0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dcc0:	6839      	ldr	r1, [r7, #0]
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 fa41 	bl	800e14a <USBD_CtlError>
          err++;
 800dcc8:	7afb      	ldrb	r3, [r7, #11]
 800dcca:	3301      	adds	r3, #1
 800dccc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dcce:	bf00      	nop
      }
      break;
 800dcd0:	e037      	b.n	800dd42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	7c1b      	ldrb	r3, [r3, #16]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d109      	bne.n	800dcee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dce2:	f107 0208 	add.w	r2, r7, #8
 800dce6:	4610      	mov	r0, r2
 800dce8:	4798      	blx	r3
 800dcea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dcec:	e029      	b.n	800dd42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dcee:	6839      	ldr	r1, [r7, #0]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 fa2a 	bl	800e14a <USBD_CtlError>
        err++;
 800dcf6:	7afb      	ldrb	r3, [r7, #11]
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	72fb      	strb	r3, [r7, #11]
      break;
 800dcfc:	e021      	b.n	800dd42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	7c1b      	ldrb	r3, [r3, #16]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d10d      	bne.n	800dd22 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd0e:	f107 0208 	add.w	r2, r7, #8
 800dd12:	4610      	mov	r0, r2
 800dd14:	4798      	blx	r3
 800dd16:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	2207      	movs	r2, #7
 800dd1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd20:	e00f      	b.n	800dd42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dd22:	6839      	ldr	r1, [r7, #0]
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f000 fa10 	bl	800e14a <USBD_CtlError>
        err++;
 800dd2a:	7afb      	ldrb	r3, [r7, #11]
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	72fb      	strb	r3, [r7, #11]
      break;
 800dd30:	e007      	b.n	800dd42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800dd32:	6839      	ldr	r1, [r7, #0]
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 fa08 	bl	800e14a <USBD_CtlError>
      err++;
 800dd3a:	7afb      	ldrb	r3, [r7, #11]
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	72fb      	strb	r3, [r7, #11]
      break;
 800dd40:	bf00      	nop
  }

  if (err != 0U)
 800dd42:	7afb      	ldrb	r3, [r7, #11]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d11e      	bne.n	800dd86 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	88db      	ldrh	r3, [r3, #6]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d016      	beq.n	800dd7e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800dd50:	893b      	ldrh	r3, [r7, #8]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d00e      	beq.n	800dd74 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	88da      	ldrh	r2, [r3, #6]
 800dd5a:	893b      	ldrh	r3, [r7, #8]
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	bf28      	it	cs
 800dd60:	4613      	movcs	r3, r2
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dd66:	893b      	ldrh	r3, [r7, #8]
 800dd68:	461a      	mov	r2, r3
 800dd6a:	68f9      	ldr	r1, [r7, #12]
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 fa5d 	bl	800e22c <USBD_CtlSendData>
 800dd72:	e009      	b.n	800dd88 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dd74:	6839      	ldr	r1, [r7, #0]
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 f9e7 	bl	800e14a <USBD_CtlError>
 800dd7c:	e004      	b.n	800dd88 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f000 faae 	bl	800e2e0 <USBD_CtlSendStatus>
 800dd84:	e000      	b.n	800dd88 <USBD_GetDescriptor+0x2cc>
    return;
 800dd86:	bf00      	nop
  }
}
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop

0800dd90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	889b      	ldrh	r3, [r3, #4]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d131      	bne.n	800de06 <USBD_SetAddress+0x76>
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	88db      	ldrh	r3, [r3, #6]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d12d      	bne.n	800de06 <USBD_SetAddress+0x76>
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	885b      	ldrh	r3, [r3, #2]
 800ddae:	2b7f      	cmp	r3, #127	; 0x7f
 800ddb0:	d829      	bhi.n	800de06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	885b      	ldrh	r3, [r3, #2]
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	2b03      	cmp	r3, #3
 800ddc8:	d104      	bne.n	800ddd4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ddca:	6839      	ldr	r1, [r7, #0]
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 f9bc 	bl	800e14a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddd2:	e01d      	b.n	800de10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	7bfa      	ldrb	r2, [r7, #15]
 800ddd8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dddc:	7bfb      	ldrb	r3, [r7, #15]
 800ddde:	4619      	mov	r1, r3
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f00c ff86 	bl	801acf2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 fa7a 	bl	800e2e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ddec:	7bfb      	ldrb	r3, [r7, #15]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d004      	beq.n	800ddfc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2202      	movs	r2, #2
 800ddf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddfa:	e009      	b.n	800de10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2201      	movs	r2, #1
 800de00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de04:	e004      	b.n	800de10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800de06:	6839      	ldr	r1, [r7, #0]
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f000 f99e 	bl	800e14a <USBD_CtlError>
  }
}
 800de0e:	bf00      	nop
 800de10:	bf00      	nop
 800de12:	3710      	adds	r7, #16
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de22:	2300      	movs	r3, #0
 800de24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	885b      	ldrh	r3, [r3, #2]
 800de2a:	b2da      	uxtb	r2, r3
 800de2c:	4b4e      	ldr	r3, [pc, #312]	; (800df68 <USBD_SetConfig+0x150>)
 800de2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800de30:	4b4d      	ldr	r3, [pc, #308]	; (800df68 <USBD_SetConfig+0x150>)
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	2b01      	cmp	r3, #1
 800de36:	d905      	bls.n	800de44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800de38:	6839      	ldr	r1, [r7, #0]
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 f985 	bl	800e14a <USBD_CtlError>
    return USBD_FAIL;
 800de40:	2303      	movs	r3, #3
 800de42:	e08c      	b.n	800df5e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	2b02      	cmp	r3, #2
 800de4e:	d002      	beq.n	800de56 <USBD_SetConfig+0x3e>
 800de50:	2b03      	cmp	r3, #3
 800de52:	d029      	beq.n	800dea8 <USBD_SetConfig+0x90>
 800de54:	e075      	b.n	800df42 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800de56:	4b44      	ldr	r3, [pc, #272]	; (800df68 <USBD_SetConfig+0x150>)
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d020      	beq.n	800dea0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800de5e:	4b42      	ldr	r3, [pc, #264]	; (800df68 <USBD_SetConfig+0x150>)
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	461a      	mov	r2, r3
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800de68:	4b3f      	ldr	r3, [pc, #252]	; (800df68 <USBD_SetConfig+0x150>)
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	4619      	mov	r1, r3
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f7fe ffe0 	bl	800ce34 <USBD_SetClassConfig>
 800de74:	4603      	mov	r3, r0
 800de76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800de78:	7bfb      	ldrb	r3, [r7, #15]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d008      	beq.n	800de90 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800de7e:	6839      	ldr	r1, [r7, #0]
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 f962 	bl	800e14a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2202      	movs	r2, #2
 800de8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800de8e:	e065      	b.n	800df5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 fa25 	bl	800e2e0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2203      	movs	r2, #3
 800de9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800de9e:	e05d      	b.n	800df5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f000 fa1d 	bl	800e2e0 <USBD_CtlSendStatus>
      break;
 800dea6:	e059      	b.n	800df5c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dea8:	4b2f      	ldr	r3, [pc, #188]	; (800df68 <USBD_SetConfig+0x150>)
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d112      	bne.n	800ded6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2202      	movs	r2, #2
 800deb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800deb8:	4b2b      	ldr	r3, [pc, #172]	; (800df68 <USBD_SetConfig+0x150>)
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	461a      	mov	r2, r3
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dec2:	4b29      	ldr	r3, [pc, #164]	; (800df68 <USBD_SetConfig+0x150>)
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	4619      	mov	r1, r3
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f7fe ffcf 	bl	800ce6c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 fa06 	bl	800e2e0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ded4:	e042      	b.n	800df5c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ded6:	4b24      	ldr	r3, [pc, #144]	; (800df68 <USBD_SetConfig+0x150>)
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	461a      	mov	r2, r3
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d02a      	beq.n	800df3a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	4619      	mov	r1, r3
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7fe ffbd 	bl	800ce6c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800def2:	4b1d      	ldr	r3, [pc, #116]	; (800df68 <USBD_SetConfig+0x150>)
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	461a      	mov	r2, r3
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800defc:	4b1a      	ldr	r3, [pc, #104]	; (800df68 <USBD_SetConfig+0x150>)
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	4619      	mov	r1, r3
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f7fe ff96 	bl	800ce34 <USBD_SetClassConfig>
 800df08:	4603      	mov	r3, r0
 800df0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800df0c:	7bfb      	ldrb	r3, [r7, #15]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d00f      	beq.n	800df32 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800df12:	6839      	ldr	r1, [r7, #0]
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f000 f918 	bl	800e14a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	b2db      	uxtb	r3, r3
 800df20:	4619      	mov	r1, r3
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f7fe ffa2 	bl	800ce6c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2202      	movs	r2, #2
 800df2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800df30:	e014      	b.n	800df5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 f9d4 	bl	800e2e0 <USBD_CtlSendStatus>
      break;
 800df38:	e010      	b.n	800df5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 f9d0 	bl	800e2e0 <USBD_CtlSendStatus>
      break;
 800df40:	e00c      	b.n	800df5c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800df42:	6839      	ldr	r1, [r7, #0]
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f000 f900 	bl	800e14a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800df4a:	4b07      	ldr	r3, [pc, #28]	; (800df68 <USBD_SetConfig+0x150>)
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	4619      	mov	r1, r3
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f7fe ff8b 	bl	800ce6c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800df56:	2303      	movs	r3, #3
 800df58:	73fb      	strb	r3, [r7, #15]
      break;
 800df5a:	bf00      	nop
  }

  return ret;
 800df5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	200054b0 	.word	0x200054b0

0800df6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	88db      	ldrh	r3, [r3, #6]
 800df7a:	2b01      	cmp	r3, #1
 800df7c:	d004      	beq.n	800df88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800df7e:	6839      	ldr	r1, [r7, #0]
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f000 f8e2 	bl	800e14a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800df86:	e023      	b.n	800dfd0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	2b02      	cmp	r3, #2
 800df92:	dc02      	bgt.n	800df9a <USBD_GetConfig+0x2e>
 800df94:	2b00      	cmp	r3, #0
 800df96:	dc03      	bgt.n	800dfa0 <USBD_GetConfig+0x34>
 800df98:	e015      	b.n	800dfc6 <USBD_GetConfig+0x5a>
 800df9a:	2b03      	cmp	r3, #3
 800df9c:	d00b      	beq.n	800dfb6 <USBD_GetConfig+0x4a>
 800df9e:	e012      	b.n	800dfc6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	3308      	adds	r3, #8
 800dfaa:	2201      	movs	r2, #1
 800dfac:	4619      	mov	r1, r3
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 f93c 	bl	800e22c <USBD_CtlSendData>
        break;
 800dfb4:	e00c      	b.n	800dfd0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	3304      	adds	r3, #4
 800dfba:	2201      	movs	r2, #1
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f000 f934 	bl	800e22c <USBD_CtlSendData>
        break;
 800dfc4:	e004      	b.n	800dfd0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dfc6:	6839      	ldr	r1, [r7, #0]
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f000 f8be 	bl	800e14a <USBD_CtlError>
        break;
 800dfce:	bf00      	nop
}
 800dfd0:	bf00      	nop
 800dfd2:	3708      	adds	r7, #8
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfe8:	b2db      	uxtb	r3, r3
 800dfea:	3b01      	subs	r3, #1
 800dfec:	2b02      	cmp	r3, #2
 800dfee:	d81e      	bhi.n	800e02e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	88db      	ldrh	r3, [r3, #6]
 800dff4:	2b02      	cmp	r3, #2
 800dff6:	d004      	beq.n	800e002 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dff8:	6839      	ldr	r1, [r7, #0]
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f000 f8a5 	bl	800e14a <USBD_CtlError>
        break;
 800e000:	e01a      	b.n	800e038 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2201      	movs	r2, #1
 800e006:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d005      	beq.n	800e01e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	f043 0202 	orr.w	r2, r3, #2
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	330c      	adds	r3, #12
 800e022:	2202      	movs	r2, #2
 800e024:	4619      	mov	r1, r3
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 f900 	bl	800e22c <USBD_CtlSendData>
      break;
 800e02c:	e004      	b.n	800e038 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e02e:	6839      	ldr	r1, [r7, #0]
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f000 f88a 	bl	800e14a <USBD_CtlError>
      break;
 800e036:	bf00      	nop
  }
}
 800e038:	bf00      	nop
 800e03a:	3708      	adds	r7, #8
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	885b      	ldrh	r3, [r3, #2]
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d107      	bne.n	800e062 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2201      	movs	r2, #1
 800e056:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 f940 	bl	800e2e0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e060:	e013      	b.n	800e08a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	885b      	ldrh	r3, [r3, #2]
 800e066:	2b02      	cmp	r3, #2
 800e068:	d10b      	bne.n	800e082 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	889b      	ldrh	r3, [r3, #4]
 800e06e:	0a1b      	lsrs	r3, r3, #8
 800e070:	b29b      	uxth	r3, r3
 800e072:	b2da      	uxtb	r2, r3
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 f930 	bl	800e2e0 <USBD_CtlSendStatus>
}
 800e080:	e003      	b.n	800e08a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e082:	6839      	ldr	r1, [r7, #0]
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f000 f860 	bl	800e14a <USBD_CtlError>
}
 800e08a:	bf00      	nop
 800e08c:	3708      	adds	r7, #8
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}

0800e092 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e092:	b580      	push	{r7, lr}
 800e094:	b082      	sub	sp, #8
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
 800e09a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	3b01      	subs	r3, #1
 800e0a6:	2b02      	cmp	r3, #2
 800e0a8:	d80b      	bhi.n	800e0c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	885b      	ldrh	r3, [r3, #2]
 800e0ae:	2b01      	cmp	r3, #1
 800e0b0:	d10c      	bne.n	800e0cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 f910 	bl	800e2e0 <USBD_CtlSendStatus>
      }
      break;
 800e0c0:	e004      	b.n	800e0cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e0c2:	6839      	ldr	r1, [r7, #0]
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f000 f840 	bl	800e14a <USBD_CtlError>
      break;
 800e0ca:	e000      	b.n	800e0ce <USBD_ClrFeature+0x3c>
      break;
 800e0cc:	bf00      	nop
  }
}
 800e0ce:	bf00      	nop
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b084      	sub	sp, #16
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
 800e0de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	781a      	ldrb	r2, [r3, #0]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	781a      	ldrb	r2, [r3, #0]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e100:	68f8      	ldr	r0, [r7, #12]
 800e102:	f7ff fa40 	bl	800d586 <SWAPBYTE>
 800e106:	4603      	mov	r3, r0
 800e108:	461a      	mov	r2, r3
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	3301      	adds	r3, #1
 800e112:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	3301      	adds	r3, #1
 800e118:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e11a:	68f8      	ldr	r0, [r7, #12]
 800e11c:	f7ff fa33 	bl	800d586 <SWAPBYTE>
 800e120:	4603      	mov	r3, r0
 800e122:	461a      	mov	r2, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	3301      	adds	r3, #1
 800e12c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	3301      	adds	r3, #1
 800e132:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e134:	68f8      	ldr	r0, [r7, #12]
 800e136:	f7ff fa26 	bl	800d586 <SWAPBYTE>
 800e13a:	4603      	mov	r3, r0
 800e13c:	461a      	mov	r2, r3
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	80da      	strh	r2, [r3, #6]
}
 800e142:	bf00      	nop
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}

0800e14a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b082      	sub	sp, #8
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
 800e152:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e154:	2180      	movs	r1, #128	; 0x80
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f00c fd61 	bl	801ac1e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e15c:	2100      	movs	r1, #0
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f00c fd5d 	bl	801ac1e <USBD_LL_StallEP>
}
 800e164:	bf00      	nop
 800e166:	3708      	adds	r7, #8
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b086      	sub	sp, #24
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e178:	2300      	movs	r3, #0
 800e17a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d036      	beq.n	800e1f0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e186:	6938      	ldr	r0, [r7, #16]
 800e188:	f000 f836 	bl	800e1f8 <USBD_GetLen>
 800e18c:	4603      	mov	r3, r0
 800e18e:	3301      	adds	r3, #1
 800e190:	b29b      	uxth	r3, r3
 800e192:	005b      	lsls	r3, r3, #1
 800e194:	b29a      	uxth	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e19a:	7dfb      	ldrb	r3, [r7, #23]
 800e19c:	68ba      	ldr	r2, [r7, #8]
 800e19e:	4413      	add	r3, r2
 800e1a0:	687a      	ldr	r2, [r7, #4]
 800e1a2:	7812      	ldrb	r2, [r2, #0]
 800e1a4:	701a      	strb	r2, [r3, #0]
  idx++;
 800e1a6:	7dfb      	ldrb	r3, [r7, #23]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e1ac:	7dfb      	ldrb	r3, [r7, #23]
 800e1ae:	68ba      	ldr	r2, [r7, #8]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	2203      	movs	r2, #3
 800e1b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800e1b6:	7dfb      	ldrb	r3, [r7, #23]
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e1bc:	e013      	b.n	800e1e6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e1be:	7dfb      	ldrb	r3, [r7, #23]
 800e1c0:	68ba      	ldr	r2, [r7, #8]
 800e1c2:	4413      	add	r3, r2
 800e1c4:	693a      	ldr	r2, [r7, #16]
 800e1c6:	7812      	ldrb	r2, [r2, #0]
 800e1c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	613b      	str	r3, [r7, #16]
    idx++;
 800e1d0:	7dfb      	ldrb	r3, [r7, #23]
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e1d6:	7dfb      	ldrb	r3, [r7, #23]
 800e1d8:	68ba      	ldr	r2, [r7, #8]
 800e1da:	4413      	add	r3, r2
 800e1dc:	2200      	movs	r2, #0
 800e1de:	701a      	strb	r2, [r3, #0]
    idx++;
 800e1e0:	7dfb      	ldrb	r3, [r7, #23]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d1e7      	bne.n	800e1be <USBD_GetString+0x52>
 800e1ee:	e000      	b.n	800e1f2 <USBD_GetString+0x86>
    return;
 800e1f0:	bf00      	nop
  }
}
 800e1f2:	3718      	adds	r7, #24
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b085      	sub	sp, #20
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e200:	2300      	movs	r3, #0
 800e202:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e208:	e005      	b.n	800e216 <USBD_GetLen+0x1e>
  {
    len++;
 800e20a:	7bfb      	ldrb	r3, [r7, #15]
 800e20c:	3301      	adds	r3, #1
 800e20e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	3301      	adds	r3, #1
 800e214:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d1f5      	bne.n	800e20a <USBD_GetLen+0x12>
  }

  return len;
 800e21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e220:	4618      	mov	r0, r3
 800e222:	3714      	adds	r7, #20
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	60b9      	str	r1, [r7, #8]
 800e236:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2202      	movs	r2, #2
 800e23c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	687a      	ldr	r2, [r7, #4]
 800e244:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	68ba      	ldr	r2, [r7, #8]
 800e250:	2100      	movs	r1, #0
 800e252:	68f8      	ldr	r0, [r7, #12]
 800e254:	f00c fd6c 	bl	801ad30 <USBD_LL_Transmit>

  return USBD_OK;
 800e258:	2300      	movs	r3, #0
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3710      	adds	r7, #16
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e262:	b580      	push	{r7, lr}
 800e264:	b084      	sub	sp, #16
 800e266:	af00      	add	r7, sp, #0
 800e268:	60f8      	str	r0, [r7, #12]
 800e26a:	60b9      	str	r1, [r7, #8]
 800e26c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	68ba      	ldr	r2, [r7, #8]
 800e272:	2100      	movs	r1, #0
 800e274:	68f8      	ldr	r0, [r7, #12]
 800e276:	f00c fd5b 	bl	801ad30 <USBD_LL_Transmit>

  return USBD_OK;
 800e27a:	2300      	movs	r3, #0
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3710      	adds	r7, #16
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2203      	movs	r2, #3
 800e294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	687a      	ldr	r2, [r7, #4]
 800e29c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	68ba      	ldr	r2, [r7, #8]
 800e2ac:	2100      	movs	r1, #0
 800e2ae:	68f8      	ldr	r0, [r7, #12]
 800e2b0:	f00c fd5f 	bl	801ad72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2b4:	2300      	movs	r3, #0
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3710      	adds	r7, #16
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b084      	sub	sp, #16
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	60f8      	str	r0, [r7, #12]
 800e2c6:	60b9      	str	r1, [r7, #8]
 800e2c8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	68ba      	ldr	r2, [r7, #8]
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f00c fd4e 	bl	801ad72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2d6:	2300      	movs	r3, #0
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3710      	adds	r7, #16
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2204      	movs	r2, #4
 800e2ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	2100      	movs	r1, #0
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f00c fd1a 	bl	801ad30 <USBD_LL_Transmit>

  return USBD_OK;
 800e2fc:	2300      	movs	r3, #0
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3708      	adds	r7, #8
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}

0800e306 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e306:	b580      	push	{r7, lr}
 800e308:	b082      	sub	sp, #8
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2205      	movs	r2, #5
 800e312:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e316:	2300      	movs	r3, #0
 800e318:	2200      	movs	r2, #0
 800e31a:	2100      	movs	r1, #0
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f00c fd28 	bl	801ad72 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	3708      	adds	r7, #8
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b084      	sub	sp, #16
 800e330:	af00      	add	r7, sp, #0
 800e332:	4603      	mov	r3, r0
 800e334:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e336:	79fb      	ldrb	r3, [r7, #7]
 800e338:	4a08      	ldr	r2, [pc, #32]	; (800e35c <disk_status+0x30>)
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	4413      	add	r3, r2
 800e33e:	685b      	ldr	r3, [r3, #4]
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	79fa      	ldrb	r2, [r7, #7]
 800e344:	4905      	ldr	r1, [pc, #20]	; (800e35c <disk_status+0x30>)
 800e346:	440a      	add	r2, r1
 800e348:	7a12      	ldrb	r2, [r2, #8]
 800e34a:	4610      	mov	r0, r2
 800e34c:	4798      	blx	r3
 800e34e:	4603      	mov	r3, r0
 800e350:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e352:	7bfb      	ldrb	r3, [r7, #15]
}
 800e354:	4618      	mov	r0, r3
 800e356:	3710      	adds	r7, #16
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	200054dc 	.word	0x200054dc

0800e360 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	4603      	mov	r3, r0
 800e368:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e36a:	2300      	movs	r3, #0
 800e36c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e36e:	79fb      	ldrb	r3, [r7, #7]
 800e370:	4a0e      	ldr	r2, [pc, #56]	; (800e3ac <disk_initialize+0x4c>)
 800e372:	5cd3      	ldrb	r3, [r2, r3]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d114      	bne.n	800e3a2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e378:	79fb      	ldrb	r3, [r7, #7]
 800e37a:	4a0c      	ldr	r2, [pc, #48]	; (800e3ac <disk_initialize+0x4c>)
 800e37c:	009b      	lsls	r3, r3, #2
 800e37e:	4413      	add	r3, r2
 800e380:	685b      	ldr	r3, [r3, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	79fa      	ldrb	r2, [r7, #7]
 800e386:	4909      	ldr	r1, [pc, #36]	; (800e3ac <disk_initialize+0x4c>)
 800e388:	440a      	add	r2, r1
 800e38a:	7a12      	ldrb	r2, [r2, #8]
 800e38c:	4610      	mov	r0, r2
 800e38e:	4798      	blx	r3
 800e390:	4603      	mov	r3, r0
 800e392:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800e394:	7bfb      	ldrb	r3, [r7, #15]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d103      	bne.n	800e3a2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800e39a:	79fb      	ldrb	r3, [r7, #7]
 800e39c:	4a03      	ldr	r2, [pc, #12]	; (800e3ac <disk_initialize+0x4c>)
 800e39e:	2101      	movs	r1, #1
 800e3a0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800e3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3710      	adds	r7, #16
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	200054dc 	.word	0x200054dc

0800e3b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e3b0:	b590      	push	{r4, r7, lr}
 800e3b2:	b087      	sub	sp, #28
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60b9      	str	r1, [r7, #8]
 800e3b8:	607a      	str	r2, [r7, #4]
 800e3ba:	603b      	str	r3, [r7, #0]
 800e3bc:	4603      	mov	r3, r0
 800e3be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e3c0:	7bfb      	ldrb	r3, [r7, #15]
 800e3c2:	4a0a      	ldr	r2, [pc, #40]	; (800e3ec <disk_read+0x3c>)
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	4413      	add	r3, r2
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	689c      	ldr	r4, [r3, #8]
 800e3cc:	7bfb      	ldrb	r3, [r7, #15]
 800e3ce:	4a07      	ldr	r2, [pc, #28]	; (800e3ec <disk_read+0x3c>)
 800e3d0:	4413      	add	r3, r2
 800e3d2:	7a18      	ldrb	r0, [r3, #8]
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	68b9      	ldr	r1, [r7, #8]
 800e3da:	47a0      	blx	r4
 800e3dc:	4603      	mov	r3, r0
 800e3de:	75fb      	strb	r3, [r7, #23]
  return res;
 800e3e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	371c      	adds	r7, #28
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd90      	pop	{r4, r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	200054dc 	.word	0x200054dc

0800e3f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e3f0:	b590      	push	{r4, r7, lr}
 800e3f2:	b087      	sub	sp, #28
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	60b9      	str	r1, [r7, #8]
 800e3f8:	607a      	str	r2, [r7, #4]
 800e3fa:	603b      	str	r3, [r7, #0]
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e400:	7bfb      	ldrb	r3, [r7, #15]
 800e402:	4a0a      	ldr	r2, [pc, #40]	; (800e42c <disk_write+0x3c>)
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	4413      	add	r3, r2
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	68dc      	ldr	r4, [r3, #12]
 800e40c:	7bfb      	ldrb	r3, [r7, #15]
 800e40e:	4a07      	ldr	r2, [pc, #28]	; (800e42c <disk_write+0x3c>)
 800e410:	4413      	add	r3, r2
 800e412:	7a18      	ldrb	r0, [r3, #8]
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	68b9      	ldr	r1, [r7, #8]
 800e41a:	47a0      	blx	r4
 800e41c:	4603      	mov	r3, r0
 800e41e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e420:	7dfb      	ldrb	r3, [r7, #23]
}
 800e422:	4618      	mov	r0, r3
 800e424:	371c      	adds	r7, #28
 800e426:	46bd      	mov	sp, r7
 800e428:	bd90      	pop	{r4, r7, pc}
 800e42a:	bf00      	nop
 800e42c:	200054dc 	.word	0x200054dc

0800e430 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	4603      	mov	r3, r0
 800e438:	603a      	str	r2, [r7, #0]
 800e43a:	71fb      	strb	r3, [r7, #7]
 800e43c:	460b      	mov	r3, r1
 800e43e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e440:	79fb      	ldrb	r3, [r7, #7]
 800e442:	4a09      	ldr	r2, [pc, #36]	; (800e468 <disk_ioctl+0x38>)
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	4413      	add	r3, r2
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	691b      	ldr	r3, [r3, #16]
 800e44c:	79fa      	ldrb	r2, [r7, #7]
 800e44e:	4906      	ldr	r1, [pc, #24]	; (800e468 <disk_ioctl+0x38>)
 800e450:	440a      	add	r2, r1
 800e452:	7a10      	ldrb	r0, [r2, #8]
 800e454:	79b9      	ldrb	r1, [r7, #6]
 800e456:	683a      	ldr	r2, [r7, #0]
 800e458:	4798      	blx	r3
 800e45a:	4603      	mov	r3, r0
 800e45c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e460:	4618      	mov	r0, r3
 800e462:	3710      	adds	r7, #16
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	200054dc 	.word	0x200054dc

0800e46c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e46c:	b480      	push	{r7}
 800e46e:	b085      	sub	sp, #20
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	3301      	adds	r3, #1
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e47c:	89fb      	ldrh	r3, [r7, #14]
 800e47e:	021b      	lsls	r3, r3, #8
 800e480:	b21a      	sxth	r2, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	b21b      	sxth	r3, r3
 800e488:	4313      	orrs	r3, r2
 800e48a:	b21b      	sxth	r3, r3
 800e48c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e48e:	89fb      	ldrh	r3, [r7, #14]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3714      	adds	r7, #20
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr

0800e49c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e49c:	b480      	push	{r7}
 800e49e:	b085      	sub	sp, #20
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	3303      	adds	r3, #3
 800e4a8:	781b      	ldrb	r3, [r3, #0]
 800e4aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	021b      	lsls	r3, r3, #8
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	3202      	adds	r2, #2
 800e4b4:	7812      	ldrb	r2, [r2, #0]
 800e4b6:	4313      	orrs	r3, r2
 800e4b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	021b      	lsls	r3, r3, #8
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	3201      	adds	r2, #1
 800e4c2:	7812      	ldrb	r2, [r2, #0]
 800e4c4:	4313      	orrs	r3, r2
 800e4c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	021b      	lsls	r3, r3, #8
 800e4cc:	687a      	ldr	r2, [r7, #4]
 800e4ce:	7812      	ldrb	r2, [r2, #0]
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	60fb      	str	r3, [r7, #12]
	return rv;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3714      	adds	r7, #20
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr

0800e4e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e4e2:	b480      	push	{r7}
 800e4e4:	b083      	sub	sp, #12
 800e4e6:	af00      	add	r7, sp, #0
 800e4e8:	6078      	str	r0, [r7, #4]
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	1c5a      	adds	r2, r3, #1
 800e4f2:	607a      	str	r2, [r7, #4]
 800e4f4:	887a      	ldrh	r2, [r7, #2]
 800e4f6:	b2d2      	uxtb	r2, r2
 800e4f8:	701a      	strb	r2, [r3, #0]
 800e4fa:	887b      	ldrh	r3, [r7, #2]
 800e4fc:	0a1b      	lsrs	r3, r3, #8
 800e4fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	1c5a      	adds	r2, r3, #1
 800e504:	607a      	str	r2, [r7, #4]
 800e506:	887a      	ldrh	r2, [r7, #2]
 800e508:	b2d2      	uxtb	r2, r2
 800e50a:	701a      	strb	r2, [r3, #0]
}
 800e50c:	bf00      	nop
 800e50e:	370c      	adds	r7, #12
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr

0800e518 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e518:	b480      	push	{r7}
 800e51a:	b083      	sub	sp, #12
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	1c5a      	adds	r2, r3, #1
 800e526:	607a      	str	r2, [r7, #4]
 800e528:	683a      	ldr	r2, [r7, #0]
 800e52a:	b2d2      	uxtb	r2, r2
 800e52c:	701a      	strb	r2, [r3, #0]
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	0a1b      	lsrs	r3, r3, #8
 800e532:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	1c5a      	adds	r2, r3, #1
 800e538:	607a      	str	r2, [r7, #4]
 800e53a:	683a      	ldr	r2, [r7, #0]
 800e53c:	b2d2      	uxtb	r2, r2
 800e53e:	701a      	strb	r2, [r3, #0]
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	0a1b      	lsrs	r3, r3, #8
 800e544:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	1c5a      	adds	r2, r3, #1
 800e54a:	607a      	str	r2, [r7, #4]
 800e54c:	683a      	ldr	r2, [r7, #0]
 800e54e:	b2d2      	uxtb	r2, r2
 800e550:	701a      	strb	r2, [r3, #0]
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	0a1b      	lsrs	r3, r3, #8
 800e556:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	1c5a      	adds	r2, r3, #1
 800e55c:	607a      	str	r2, [r7, #4]
 800e55e:	683a      	ldr	r2, [r7, #0]
 800e560:	b2d2      	uxtb	r2, r2
 800e562:	701a      	strb	r2, [r3, #0]
}
 800e564:	bf00      	nop
 800e566:	370c      	adds	r7, #12
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr

0800e570 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e570:	b480      	push	{r7}
 800e572:	b087      	sub	sp, #28
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d00d      	beq.n	800e5a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e58a:	693a      	ldr	r2, [r7, #16]
 800e58c:	1c53      	adds	r3, r2, #1
 800e58e:	613b      	str	r3, [r7, #16]
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	1c59      	adds	r1, r3, #1
 800e594:	6179      	str	r1, [r7, #20]
 800e596:	7812      	ldrb	r2, [r2, #0]
 800e598:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	3b01      	subs	r3, #1
 800e59e:	607b      	str	r3, [r7, #4]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d1f1      	bne.n	800e58a <mem_cpy+0x1a>
	}
}
 800e5a6:	bf00      	nop
 800e5a8:	371c      	adds	r7, #28
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr

0800e5b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e5b2:	b480      	push	{r7}
 800e5b4:	b087      	sub	sp, #28
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	60f8      	str	r0, [r7, #12]
 800e5ba:	60b9      	str	r1, [r7, #8]
 800e5bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	1c5a      	adds	r2, r3, #1
 800e5c6:	617a      	str	r2, [r7, #20]
 800e5c8:	68ba      	ldr	r2, [r7, #8]
 800e5ca:	b2d2      	uxtb	r2, r2
 800e5cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	607b      	str	r3, [r7, #4]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d1f3      	bne.n	800e5c2 <mem_set+0x10>
}
 800e5da:	bf00      	nop
 800e5dc:	bf00      	nop
 800e5de:	371c      	adds	r7, #28
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e5e8:	b480      	push	{r7}
 800e5ea:	b089      	sub	sp, #36	; 0x24
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	60f8      	str	r0, [r7, #12]
 800e5f0:	60b9      	str	r1, [r7, #8]
 800e5f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	61fb      	str	r3, [r7, #28]
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e600:	69fb      	ldr	r3, [r7, #28]
 800e602:	1c5a      	adds	r2, r3, #1
 800e604:	61fa      	str	r2, [r7, #28]
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	4619      	mov	r1, r3
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	1c5a      	adds	r2, r3, #1
 800e60e:	61ba      	str	r2, [r7, #24]
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	1acb      	subs	r3, r1, r3
 800e614:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	3b01      	subs	r3, #1
 800e61a:	607b      	str	r3, [r7, #4]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d002      	beq.n	800e628 <mem_cmp+0x40>
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d0eb      	beq.n	800e600 <mem_cmp+0x18>

	return r;
 800e628:	697b      	ldr	r3, [r7, #20]
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3724      	adds	r7, #36	; 0x24
 800e62e:	46bd      	mov	sp, r7
 800e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e634:	4770      	bx	lr

0800e636 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e636:	b480      	push	{r7}
 800e638:	b083      	sub	sp, #12
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
 800e63e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e640:	e002      	b.n	800e648 <chk_chr+0x12>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	3301      	adds	r3, #1
 800e646:	607b      	str	r3, [r7, #4]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d005      	beq.n	800e65c <chk_chr+0x26>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	461a      	mov	r2, r3
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	4293      	cmp	r3, r2
 800e65a:	d1f2      	bne.n	800e642 <chk_chr+0xc>
	return *str;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	781b      	ldrb	r3, [r3, #0]
}
 800e660:	4618      	mov	r0, r3
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b085      	sub	sp, #20
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e676:	2300      	movs	r3, #0
 800e678:	60bb      	str	r3, [r7, #8]
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	60fb      	str	r3, [r7, #12]
 800e67e:	e029      	b.n	800e6d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e680:	4a27      	ldr	r2, [pc, #156]	; (800e720 <chk_lock+0xb4>)
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	011b      	lsls	r3, r3, #4
 800e686:	4413      	add	r3, r2
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d01d      	beq.n	800e6ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e68e:	4a24      	ldr	r2, [pc, #144]	; (800e720 <chk_lock+0xb4>)
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	011b      	lsls	r3, r3, #4
 800e694:	4413      	add	r3, r2
 800e696:	681a      	ldr	r2, [r3, #0]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d116      	bne.n	800e6ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e6a0:	4a1f      	ldr	r2, [pc, #124]	; (800e720 <chk_lock+0xb4>)
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	011b      	lsls	r3, r3, #4
 800e6a6:	4413      	add	r3, r2
 800e6a8:	3304      	adds	r3, #4
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d10c      	bne.n	800e6ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e6b4:	4a1a      	ldr	r2, [pc, #104]	; (800e720 <chk_lock+0xb4>)
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	011b      	lsls	r3, r3, #4
 800e6ba:	4413      	add	r3, r2
 800e6bc:	3308      	adds	r3, #8
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d102      	bne.n	800e6ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e6c8:	e007      	b.n	800e6da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	60fb      	str	r3, [r7, #12]
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2b01      	cmp	r3, #1
 800e6d8:	d9d2      	bls.n	800e680 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2b02      	cmp	r3, #2
 800e6de:	d109      	bne.n	800e6f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d102      	bne.n	800e6ec <chk_lock+0x80>
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	2b02      	cmp	r3, #2
 800e6ea:	d101      	bne.n	800e6f0 <chk_lock+0x84>
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	e010      	b.n	800e712 <chk_lock+0xa6>
 800e6f0:	2312      	movs	r3, #18
 800e6f2:	e00e      	b.n	800e712 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d108      	bne.n	800e70c <chk_lock+0xa0>
 800e6fa:	4a09      	ldr	r2, [pc, #36]	; (800e720 <chk_lock+0xb4>)
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	011b      	lsls	r3, r3, #4
 800e700:	4413      	add	r3, r2
 800e702:	330c      	adds	r3, #12
 800e704:	881b      	ldrh	r3, [r3, #0]
 800e706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e70a:	d101      	bne.n	800e710 <chk_lock+0xa4>
 800e70c:	2310      	movs	r3, #16
 800e70e:	e000      	b.n	800e712 <chk_lock+0xa6>
 800e710:	2300      	movs	r3, #0
}
 800e712:	4618      	mov	r0, r3
 800e714:	3714      	adds	r7, #20
 800e716:	46bd      	mov	sp, r7
 800e718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71c:	4770      	bx	lr
 800e71e:	bf00      	nop
 800e720:	200054bc 	.word	0x200054bc

0800e724 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e72a:	2300      	movs	r3, #0
 800e72c:	607b      	str	r3, [r7, #4]
 800e72e:	e002      	b.n	800e736 <enq_lock+0x12>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	3301      	adds	r3, #1
 800e734:	607b      	str	r3, [r7, #4]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d806      	bhi.n	800e74a <enq_lock+0x26>
 800e73c:	4a09      	ldr	r2, [pc, #36]	; (800e764 <enq_lock+0x40>)
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	011b      	lsls	r3, r3, #4
 800e742:	4413      	add	r3, r2
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d1f2      	bne.n	800e730 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2b02      	cmp	r3, #2
 800e74e:	bf14      	ite	ne
 800e750:	2301      	movne	r3, #1
 800e752:	2300      	moveq	r3, #0
 800e754:	b2db      	uxtb	r3, r3
}
 800e756:	4618      	mov	r0, r3
 800e758:	370c      	adds	r7, #12
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr
 800e762:	bf00      	nop
 800e764:	200054bc 	.word	0x200054bc

0800e768 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e768:	b480      	push	{r7}
 800e76a:	b085      	sub	sp, #20
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e772:	2300      	movs	r3, #0
 800e774:	60fb      	str	r3, [r7, #12]
 800e776:	e01f      	b.n	800e7b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e778:	4a41      	ldr	r2, [pc, #260]	; (800e880 <inc_lock+0x118>)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	011b      	lsls	r3, r3, #4
 800e77e:	4413      	add	r3, r2
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	429a      	cmp	r2, r3
 800e788:	d113      	bne.n	800e7b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e78a:	4a3d      	ldr	r2, [pc, #244]	; (800e880 <inc_lock+0x118>)
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	011b      	lsls	r3, r3, #4
 800e790:	4413      	add	r3, r2
 800e792:	3304      	adds	r3, #4
 800e794:	681a      	ldr	r2, [r3, #0]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d109      	bne.n	800e7b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e79e:	4a38      	ldr	r2, [pc, #224]	; (800e880 <inc_lock+0x118>)
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	011b      	lsls	r3, r3, #4
 800e7a4:	4413      	add	r3, r2
 800e7a6:	3308      	adds	r3, #8
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d006      	beq.n	800e7c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	60fb      	str	r3, [r7, #12]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2b01      	cmp	r3, #1
 800e7bc:	d9dc      	bls.n	800e778 <inc_lock+0x10>
 800e7be:	e000      	b.n	800e7c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e7c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2b02      	cmp	r3, #2
 800e7c6:	d132      	bne.n	800e82e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	60fb      	str	r3, [r7, #12]
 800e7cc:	e002      	b.n	800e7d4 <inc_lock+0x6c>
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	60fb      	str	r3, [r7, #12]
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2b01      	cmp	r3, #1
 800e7d8:	d806      	bhi.n	800e7e8 <inc_lock+0x80>
 800e7da:	4a29      	ldr	r2, [pc, #164]	; (800e880 <inc_lock+0x118>)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	011b      	lsls	r3, r3, #4
 800e7e0:	4413      	add	r3, r2
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d1f2      	bne.n	800e7ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2b02      	cmp	r3, #2
 800e7ec:	d101      	bne.n	800e7f2 <inc_lock+0x8a>
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	e040      	b.n	800e874 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681a      	ldr	r2, [r3, #0]
 800e7f6:	4922      	ldr	r1, [pc, #136]	; (800e880 <inc_lock+0x118>)
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	011b      	lsls	r3, r3, #4
 800e7fc:	440b      	add	r3, r1
 800e7fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	689a      	ldr	r2, [r3, #8]
 800e804:	491e      	ldr	r1, [pc, #120]	; (800e880 <inc_lock+0x118>)
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	011b      	lsls	r3, r3, #4
 800e80a:	440b      	add	r3, r1
 800e80c:	3304      	adds	r3, #4
 800e80e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	695a      	ldr	r2, [r3, #20]
 800e814:	491a      	ldr	r1, [pc, #104]	; (800e880 <inc_lock+0x118>)
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	011b      	lsls	r3, r3, #4
 800e81a:	440b      	add	r3, r1
 800e81c:	3308      	adds	r3, #8
 800e81e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e820:	4a17      	ldr	r2, [pc, #92]	; (800e880 <inc_lock+0x118>)
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	011b      	lsls	r3, r3, #4
 800e826:	4413      	add	r3, r2
 800e828:	330c      	adds	r3, #12
 800e82a:	2200      	movs	r2, #0
 800e82c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d009      	beq.n	800e848 <inc_lock+0xe0>
 800e834:	4a12      	ldr	r2, [pc, #72]	; (800e880 <inc_lock+0x118>)
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	011b      	lsls	r3, r3, #4
 800e83a:	4413      	add	r3, r2
 800e83c:	330c      	adds	r3, #12
 800e83e:	881b      	ldrh	r3, [r3, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d001      	beq.n	800e848 <inc_lock+0xe0>
 800e844:	2300      	movs	r3, #0
 800e846:	e015      	b.n	800e874 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d108      	bne.n	800e860 <inc_lock+0xf8>
 800e84e:	4a0c      	ldr	r2, [pc, #48]	; (800e880 <inc_lock+0x118>)
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	011b      	lsls	r3, r3, #4
 800e854:	4413      	add	r3, r2
 800e856:	330c      	adds	r3, #12
 800e858:	881b      	ldrh	r3, [r3, #0]
 800e85a:	3301      	adds	r3, #1
 800e85c:	b29a      	uxth	r2, r3
 800e85e:	e001      	b.n	800e864 <inc_lock+0xfc>
 800e860:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e864:	4906      	ldr	r1, [pc, #24]	; (800e880 <inc_lock+0x118>)
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	011b      	lsls	r3, r3, #4
 800e86a:	440b      	add	r3, r1
 800e86c:	330c      	adds	r3, #12
 800e86e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	3301      	adds	r3, #1
}
 800e874:	4618      	mov	r0, r3
 800e876:	3714      	adds	r7, #20
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr
 800e880:	200054bc 	.word	0x200054bc

0800e884 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e884:	b480      	push	{r7}
 800e886:	b085      	sub	sp, #20
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	3b01      	subs	r3, #1
 800e890:	607b      	str	r3, [r7, #4]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2b01      	cmp	r3, #1
 800e896:	d825      	bhi.n	800e8e4 <dec_lock+0x60>
		n = Files[i].ctr;
 800e898:	4a17      	ldr	r2, [pc, #92]	; (800e8f8 <dec_lock+0x74>)
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	011b      	lsls	r3, r3, #4
 800e89e:	4413      	add	r3, r2
 800e8a0:	330c      	adds	r3, #12
 800e8a2:	881b      	ldrh	r3, [r3, #0]
 800e8a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e8a6:	89fb      	ldrh	r3, [r7, #14]
 800e8a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8ac:	d101      	bne.n	800e8b2 <dec_lock+0x2e>
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e8b2:	89fb      	ldrh	r3, [r7, #14]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d002      	beq.n	800e8be <dec_lock+0x3a>
 800e8b8:	89fb      	ldrh	r3, [r7, #14]
 800e8ba:	3b01      	subs	r3, #1
 800e8bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e8be:	4a0e      	ldr	r2, [pc, #56]	; (800e8f8 <dec_lock+0x74>)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	011b      	lsls	r3, r3, #4
 800e8c4:	4413      	add	r3, r2
 800e8c6:	330c      	adds	r3, #12
 800e8c8:	89fa      	ldrh	r2, [r7, #14]
 800e8ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e8cc:	89fb      	ldrh	r3, [r7, #14]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d105      	bne.n	800e8de <dec_lock+0x5a>
 800e8d2:	4a09      	ldr	r2, [pc, #36]	; (800e8f8 <dec_lock+0x74>)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	011b      	lsls	r3, r3, #4
 800e8d8:	4413      	add	r3, r2
 800e8da:	2200      	movs	r2, #0
 800e8dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	737b      	strb	r3, [r7, #13]
 800e8e2:	e001      	b.n	800e8e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e8e4:	2302      	movs	r3, #2
 800e8e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e8e8:	7b7b      	ldrb	r3, [r7, #13]
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3714      	adds	r7, #20
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f4:	4770      	bx	lr
 800e8f6:	bf00      	nop
 800e8f8:	200054bc 	.word	0x200054bc

0800e8fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b085      	sub	sp, #20
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e904:	2300      	movs	r3, #0
 800e906:	60fb      	str	r3, [r7, #12]
 800e908:	e010      	b.n	800e92c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e90a:	4a0d      	ldr	r2, [pc, #52]	; (800e940 <clear_lock+0x44>)
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	011b      	lsls	r3, r3, #4
 800e910:	4413      	add	r3, r2
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	429a      	cmp	r2, r3
 800e918:	d105      	bne.n	800e926 <clear_lock+0x2a>
 800e91a:	4a09      	ldr	r2, [pc, #36]	; (800e940 <clear_lock+0x44>)
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	011b      	lsls	r3, r3, #4
 800e920:	4413      	add	r3, r2
 800e922:	2200      	movs	r2, #0
 800e924:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	3301      	adds	r3, #1
 800e92a:	60fb      	str	r3, [r7, #12]
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2b01      	cmp	r3, #1
 800e930:	d9eb      	bls.n	800e90a <clear_lock+0xe>
	}
}
 800e932:	bf00      	nop
 800e934:	bf00      	nop
 800e936:	3714      	adds	r7, #20
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr
 800e940:	200054bc 	.word	0x200054bc

0800e944 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b086      	sub	sp, #24
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e94c:	2300      	movs	r3, #0
 800e94e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	78db      	ldrb	r3, [r3, #3]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d034      	beq.n	800e9c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e95c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	7858      	ldrb	r0, [r3, #1]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e968:	2301      	movs	r3, #1
 800e96a:	697a      	ldr	r2, [r7, #20]
 800e96c:	f7ff fd40 	bl	800e3f0 <disk_write>
 800e970:	4603      	mov	r3, r0
 800e972:	2b00      	cmp	r3, #0
 800e974:	d002      	beq.n	800e97c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e976:	2301      	movs	r3, #1
 800e978:	73fb      	strb	r3, [r7, #15]
 800e97a:	e022      	b.n	800e9c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2200      	movs	r2, #0
 800e980:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6a1b      	ldr	r3, [r3, #32]
 800e986:	697a      	ldr	r2, [r7, #20]
 800e988:	1ad2      	subs	r2, r2, r3
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	699b      	ldr	r3, [r3, #24]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d217      	bcs.n	800e9c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	789b      	ldrb	r3, [r3, #2]
 800e996:	613b      	str	r3, [r7, #16]
 800e998:	e010      	b.n	800e9bc <sync_window+0x78>
					wsect += fs->fsize;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	699b      	ldr	r3, [r3, #24]
 800e99e:	697a      	ldr	r2, [r7, #20]
 800e9a0:	4413      	add	r3, r2
 800e9a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	7858      	ldrb	r0, [r3, #1]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	697a      	ldr	r2, [r7, #20]
 800e9b2:	f7ff fd1d 	bl	800e3f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	3b01      	subs	r3, #1
 800e9ba:	613b      	str	r3, [r7, #16]
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	2b01      	cmp	r3, #1
 800e9c0:	d8eb      	bhi.n	800e99a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3718      	adds	r7, #24
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9de:	683a      	ldr	r2, [r7, #0]
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	d01b      	beq.n	800ea1c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f7ff ffad 	bl	800e944 <sync_window>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e9ee:	7bfb      	ldrb	r3, [r7, #15]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d113      	bne.n	800ea1c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	7858      	ldrb	r0, [r3, #1]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e9fe:	2301      	movs	r3, #1
 800ea00:	683a      	ldr	r2, [r7, #0]
 800ea02:	f7ff fcd5 	bl	800e3b0 <disk_read>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d004      	beq.n	800ea16 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ea0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea10:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ea12:	2301      	movs	r3, #1
 800ea14:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	683a      	ldr	r2, [r7, #0]
 800ea1a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ea1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3710      	adds	r7, #16
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
	...

0800ea28 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b084      	sub	sp, #16
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f7ff ff87 	bl	800e944 <sync_window>
 800ea36:	4603      	mov	r3, r0
 800ea38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ea3a:	7bfb      	ldrb	r3, [r7, #15]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d158      	bne.n	800eaf2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	2b03      	cmp	r3, #3
 800ea46:	d148      	bne.n	800eada <sync_fs+0xb2>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	791b      	ldrb	r3, [r3, #4]
 800ea4c:	2b01      	cmp	r3, #1
 800ea4e:	d144      	bne.n	800eada <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	3330      	adds	r3, #48	; 0x30
 800ea54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea58:	2100      	movs	r1, #0
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7ff fda9 	bl	800e5b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	3330      	adds	r3, #48	; 0x30
 800ea64:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ea68:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f7ff fd38 	bl	800e4e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	3330      	adds	r3, #48	; 0x30
 800ea76:	4921      	ldr	r1, [pc, #132]	; (800eafc <sync_fs+0xd4>)
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7ff fd4d 	bl	800e518 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	3330      	adds	r3, #48	; 0x30
 800ea82:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ea86:	491e      	ldr	r1, [pc, #120]	; (800eb00 <sync_fs+0xd8>)
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7ff fd45 	bl	800e518 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	3330      	adds	r3, #48	; 0x30
 800ea92:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	691b      	ldr	r3, [r3, #16]
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	4610      	mov	r0, r2
 800ea9e:	f7ff fd3b 	bl	800e518 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	3330      	adds	r3, #48	; 0x30
 800eaa6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	68db      	ldr	r3, [r3, #12]
 800eaae:	4619      	mov	r1, r3
 800eab0:	4610      	mov	r0, r2
 800eab2:	f7ff fd31 	bl	800e518 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	69db      	ldr	r3, [r3, #28]
 800eaba:	1c5a      	adds	r2, r3, #1
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	7858      	ldrb	r0, [r3, #1]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eace:	2301      	movs	r3, #1
 800ead0:	f7ff fc8e 	bl	800e3f0 <disk_write>
			fs->fsi_flag = 0;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2200      	movs	r2, #0
 800ead8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	785b      	ldrb	r3, [r3, #1]
 800eade:	2200      	movs	r2, #0
 800eae0:	2100      	movs	r1, #0
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7ff fca4 	bl	800e430 <disk_ioctl>
 800eae8:	4603      	mov	r3, r0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d001      	beq.n	800eaf2 <sync_fs+0xca>
 800eaee:	2301      	movs	r3, #1
 800eaf0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800eaf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3710      	adds	r7, #16
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	41615252 	.word	0x41615252
 800eb00:	61417272 	.word	0x61417272

0800eb04 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	3b02      	subs	r3, #2
 800eb12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	695b      	ldr	r3, [r3, #20]
 800eb18:	3b02      	subs	r3, #2
 800eb1a:	683a      	ldr	r2, [r7, #0]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d301      	bcc.n	800eb24 <clust2sect+0x20>
 800eb20:	2300      	movs	r3, #0
 800eb22:	e008      	b.n	800eb36 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	895b      	ldrh	r3, [r3, #10]
 800eb28:	461a      	mov	r2, r3
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	fb03 f202 	mul.w	r2, r3, r2
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb34:	4413      	add	r3, r2
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	370c      	adds	r7, #12
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb40:	4770      	bx	lr

0800eb42 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800eb42:	b580      	push	{r7, lr}
 800eb44:	b086      	sub	sp, #24
 800eb46:	af00      	add	r7, sp, #0
 800eb48:	6078      	str	r0, [r7, #4]
 800eb4a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	d904      	bls.n	800eb62 <get_fat+0x20>
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	695b      	ldr	r3, [r3, #20]
 800eb5c:	683a      	ldr	r2, [r7, #0]
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d302      	bcc.n	800eb68 <get_fat+0x26>
		val = 1;	/* Internal error */
 800eb62:	2301      	movs	r3, #1
 800eb64:	617b      	str	r3, [r7, #20]
 800eb66:	e08f      	b.n	800ec88 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800eb68:	f04f 33ff 	mov.w	r3, #4294967295
 800eb6c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	2b03      	cmp	r3, #3
 800eb74:	d062      	beq.n	800ec3c <get_fat+0xfa>
 800eb76:	2b03      	cmp	r3, #3
 800eb78:	dc7c      	bgt.n	800ec74 <get_fat+0x132>
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d002      	beq.n	800eb84 <get_fat+0x42>
 800eb7e:	2b02      	cmp	r3, #2
 800eb80:	d042      	beq.n	800ec08 <get_fat+0xc6>
 800eb82:	e077      	b.n	800ec74 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	60fb      	str	r3, [r7, #12]
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	085b      	lsrs	r3, r3, #1
 800eb8c:	68fa      	ldr	r2, [r7, #12]
 800eb8e:	4413      	add	r3, r2
 800eb90:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	6a1a      	ldr	r2, [r3, #32]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	0a5b      	lsrs	r3, r3, #9
 800eb9a:	4413      	add	r3, r2
 800eb9c:	4619      	mov	r1, r3
 800eb9e:	6938      	ldr	r0, [r7, #16]
 800eba0:	f7ff ff14 	bl	800e9cc <move_window>
 800eba4:	4603      	mov	r3, r0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d167      	bne.n	800ec7a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	1c5a      	adds	r2, r3, #1
 800ebae:	60fa      	str	r2, [r7, #12]
 800ebb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebb4:	693a      	ldr	r2, [r7, #16]
 800ebb6:	4413      	add	r3, r2
 800ebb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ebbc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	6a1a      	ldr	r2, [r3, #32]
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	0a5b      	lsrs	r3, r3, #9
 800ebc6:	4413      	add	r3, r2
 800ebc8:	4619      	mov	r1, r3
 800ebca:	6938      	ldr	r0, [r7, #16]
 800ebcc:	f7ff fefe 	bl	800e9cc <move_window>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d153      	bne.n	800ec7e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebdc:	693a      	ldr	r2, [r7, #16]
 800ebde:	4413      	add	r3, r2
 800ebe0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ebe4:	021b      	lsls	r3, r3, #8
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	4313      	orrs	r3, r2
 800ebec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	f003 0301 	and.w	r3, r3, #1
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d002      	beq.n	800ebfe <get_fat+0xbc>
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	091b      	lsrs	r3, r3, #4
 800ebfc:	e002      	b.n	800ec04 <get_fat+0xc2>
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ec04:	617b      	str	r3, [r7, #20]
			break;
 800ec06:	e03f      	b.n	800ec88 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	6a1a      	ldr	r2, [r3, #32]
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	0a1b      	lsrs	r3, r3, #8
 800ec10:	4413      	add	r3, r2
 800ec12:	4619      	mov	r1, r3
 800ec14:	6938      	ldr	r0, [r7, #16]
 800ec16:	f7ff fed9 	bl	800e9cc <move_window>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d130      	bne.n	800ec82 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	005b      	lsls	r3, r3, #1
 800ec2a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ec2e:	4413      	add	r3, r2
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7ff fc1b 	bl	800e46c <ld_word>
 800ec36:	4603      	mov	r3, r0
 800ec38:	617b      	str	r3, [r7, #20]
			break;
 800ec3a:	e025      	b.n	800ec88 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	6a1a      	ldr	r2, [r3, #32]
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	09db      	lsrs	r3, r3, #7
 800ec44:	4413      	add	r3, r2
 800ec46:	4619      	mov	r1, r3
 800ec48:	6938      	ldr	r0, [r7, #16]
 800ec4a:	f7ff febf 	bl	800e9cc <move_window>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d118      	bne.n	800ec86 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ec62:	4413      	add	r3, r2
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7ff fc19 	bl	800e49c <ld_dword>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ec70:	617b      	str	r3, [r7, #20]
			break;
 800ec72:	e009      	b.n	800ec88 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ec74:	2301      	movs	r3, #1
 800ec76:	617b      	str	r3, [r7, #20]
 800ec78:	e006      	b.n	800ec88 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec7a:	bf00      	nop
 800ec7c:	e004      	b.n	800ec88 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec7e:	bf00      	nop
 800ec80:	e002      	b.n	800ec88 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ec82:	bf00      	nop
 800ec84:	e000      	b.n	800ec88 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ec86:	bf00      	nop
		}
	}

	return val;
 800ec88:	697b      	ldr	r3, [r7, #20]
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3718      	adds	r7, #24
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}

0800ec92 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ec92:	b590      	push	{r4, r7, lr}
 800ec94:	b089      	sub	sp, #36	; 0x24
 800ec96:	af00      	add	r7, sp, #0
 800ec98:	60f8      	str	r0, [r7, #12]
 800ec9a:	60b9      	str	r1, [r7, #8]
 800ec9c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ec9e:	2302      	movs	r3, #2
 800eca0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	f240 80d9 	bls.w	800ee5c <put_fat+0x1ca>
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	695b      	ldr	r3, [r3, #20]
 800ecae:	68ba      	ldr	r2, [r7, #8]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	f080 80d3 	bcs.w	800ee5c <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	2b03      	cmp	r3, #3
 800ecbc:	f000 8096 	beq.w	800edec <put_fat+0x15a>
 800ecc0:	2b03      	cmp	r3, #3
 800ecc2:	f300 80cb 	bgt.w	800ee5c <put_fat+0x1ca>
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d002      	beq.n	800ecd0 <put_fat+0x3e>
 800ecca:	2b02      	cmp	r3, #2
 800eccc:	d06e      	beq.n	800edac <put_fat+0x11a>
 800ecce:	e0c5      	b.n	800ee5c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	61bb      	str	r3, [r7, #24]
 800ecd4:	69bb      	ldr	r3, [r7, #24]
 800ecd6:	085b      	lsrs	r3, r3, #1
 800ecd8:	69ba      	ldr	r2, [r7, #24]
 800ecda:	4413      	add	r3, r2
 800ecdc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	6a1a      	ldr	r2, [r3, #32]
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	0a5b      	lsrs	r3, r3, #9
 800ece6:	4413      	add	r3, r2
 800ece8:	4619      	mov	r1, r3
 800ecea:	68f8      	ldr	r0, [r7, #12]
 800ecec:	f7ff fe6e 	bl	800e9cc <move_window>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ecf4:	7ffb      	ldrb	r3, [r7, #31]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	f040 80a9 	bne.w	800ee4e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ed02:	69bb      	ldr	r3, [r7, #24]
 800ed04:	1c59      	adds	r1, r3, #1
 800ed06:	61b9      	str	r1, [r7, #24]
 800ed08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed0c:	4413      	add	r3, r2
 800ed0e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	f003 0301 	and.w	r3, r3, #1
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d00d      	beq.n	800ed36 <put_fat+0xa4>
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	b25b      	sxtb	r3, r3
 800ed20:	f003 030f 	and.w	r3, r3, #15
 800ed24:	b25a      	sxtb	r2, r3
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	b2db      	uxtb	r3, r3
 800ed2a:	011b      	lsls	r3, r3, #4
 800ed2c:	b25b      	sxtb	r3, r3
 800ed2e:	4313      	orrs	r3, r2
 800ed30:	b25b      	sxtb	r3, r3
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	e001      	b.n	800ed3a <put_fat+0xa8>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	b2db      	uxtb	r3, r3
 800ed3a:	697a      	ldr	r2, [r7, #20]
 800ed3c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	2201      	movs	r2, #1
 800ed42:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	6a1a      	ldr	r2, [r3, #32]
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	0a5b      	lsrs	r3, r3, #9
 800ed4c:	4413      	add	r3, r2
 800ed4e:	4619      	mov	r1, r3
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f7ff fe3b 	bl	800e9cc <move_window>
 800ed56:	4603      	mov	r3, r0
 800ed58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ed5a:	7ffb      	ldrb	r3, [r7, #31]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d178      	bne.n	800ee52 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ed66:	69bb      	ldr	r3, [r7, #24]
 800ed68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed6c:	4413      	add	r3, r2
 800ed6e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	f003 0301 	and.w	r3, r3, #1
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d003      	beq.n	800ed82 <put_fat+0xf0>
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	091b      	lsrs	r3, r3, #4
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	e00e      	b.n	800eda0 <put_fat+0x10e>
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	b25b      	sxtb	r3, r3
 800ed88:	f023 030f 	bic.w	r3, r3, #15
 800ed8c:	b25a      	sxtb	r2, r3
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	0a1b      	lsrs	r3, r3, #8
 800ed92:	b25b      	sxtb	r3, r3
 800ed94:	f003 030f 	and.w	r3, r3, #15
 800ed98:	b25b      	sxtb	r3, r3
 800ed9a:	4313      	orrs	r3, r2
 800ed9c:	b25b      	sxtb	r3, r3
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	697a      	ldr	r2, [r7, #20]
 800eda2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2201      	movs	r2, #1
 800eda8:	70da      	strb	r2, [r3, #3]
			break;
 800edaa:	e057      	b.n	800ee5c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	6a1a      	ldr	r2, [r3, #32]
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	0a1b      	lsrs	r3, r3, #8
 800edb4:	4413      	add	r3, r2
 800edb6:	4619      	mov	r1, r3
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	f7ff fe07 	bl	800e9cc <move_window>
 800edbe:	4603      	mov	r3, r0
 800edc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800edc2:	7ffb      	ldrb	r3, [r7, #31]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d146      	bne.n	800ee56 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	005b      	lsls	r3, r3, #1
 800edd2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800edd6:	4413      	add	r3, r2
 800edd8:	687a      	ldr	r2, [r7, #4]
 800edda:	b292      	uxth	r2, r2
 800eddc:	4611      	mov	r1, r2
 800edde:	4618      	mov	r0, r3
 800ede0:	f7ff fb7f 	bl	800e4e2 <st_word>
			fs->wflag = 1;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	2201      	movs	r2, #1
 800ede8:	70da      	strb	r2, [r3, #3]
			break;
 800edea:	e037      	b.n	800ee5c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	6a1a      	ldr	r2, [r3, #32]
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	09db      	lsrs	r3, r3, #7
 800edf4:	4413      	add	r3, r2
 800edf6:	4619      	mov	r1, r3
 800edf8:	68f8      	ldr	r0, [r7, #12]
 800edfa:	f7ff fde7 	bl	800e9cc <move_window>
 800edfe:	4603      	mov	r3, r0
 800ee00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee02:	7ffb      	ldrb	r3, [r7, #31]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d128      	bne.n	800ee5a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	009b      	lsls	r3, r3, #2
 800ee18:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ee1c:	4413      	add	r3, r2
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7ff fb3c 	bl	800e49c <ld_dword>
 800ee24:	4603      	mov	r3, r0
 800ee26:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ee2a:	4323      	orrs	r3, r4
 800ee2c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ee3c:	4413      	add	r3, r2
 800ee3e:	6879      	ldr	r1, [r7, #4]
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7ff fb69 	bl	800e518 <st_dword>
			fs->wflag = 1;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2201      	movs	r2, #1
 800ee4a:	70da      	strb	r2, [r3, #3]
			break;
 800ee4c:	e006      	b.n	800ee5c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ee4e:	bf00      	nop
 800ee50:	e004      	b.n	800ee5c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ee52:	bf00      	nop
 800ee54:	e002      	b.n	800ee5c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ee56:	bf00      	nop
 800ee58:	e000      	b.n	800ee5c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ee5a:	bf00      	nop
		}
	}
	return res;
 800ee5c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3724      	adds	r7, #36	; 0x24
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd90      	pop	{r4, r7, pc}

0800ee66 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ee66:	b580      	push	{r7, lr}
 800ee68:	b088      	sub	sp, #32
 800ee6a:	af00      	add	r7, sp, #0
 800ee6c:	60f8      	str	r0, [r7, #12]
 800ee6e:	60b9      	str	r1, [r7, #8]
 800ee70:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ee72:	2300      	movs	r3, #0
 800ee74:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d904      	bls.n	800ee8c <remove_chain+0x26>
 800ee82:	69bb      	ldr	r3, [r7, #24]
 800ee84:	695b      	ldr	r3, [r3, #20]
 800ee86:	68ba      	ldr	r2, [r7, #8]
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d301      	bcc.n	800ee90 <remove_chain+0x2a>
 800ee8c:	2302      	movs	r3, #2
 800ee8e:	e04b      	b.n	800ef28 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d00c      	beq.n	800eeb0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ee96:	f04f 32ff 	mov.w	r2, #4294967295
 800ee9a:	6879      	ldr	r1, [r7, #4]
 800ee9c:	69b8      	ldr	r0, [r7, #24]
 800ee9e:	f7ff fef8 	bl	800ec92 <put_fat>
 800eea2:	4603      	mov	r3, r0
 800eea4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800eea6:	7ffb      	ldrb	r3, [r7, #31]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d001      	beq.n	800eeb0 <remove_chain+0x4a>
 800eeac:	7ffb      	ldrb	r3, [r7, #31]
 800eeae:	e03b      	b.n	800ef28 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800eeb0:	68b9      	ldr	r1, [r7, #8]
 800eeb2:	68f8      	ldr	r0, [r7, #12]
 800eeb4:	f7ff fe45 	bl	800eb42 <get_fat>
 800eeb8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d031      	beq.n	800ef24 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	d101      	bne.n	800eeca <remove_chain+0x64>
 800eec6:	2302      	movs	r3, #2
 800eec8:	e02e      	b.n	800ef28 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eed0:	d101      	bne.n	800eed6 <remove_chain+0x70>
 800eed2:	2301      	movs	r3, #1
 800eed4:	e028      	b.n	800ef28 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800eed6:	2200      	movs	r2, #0
 800eed8:	68b9      	ldr	r1, [r7, #8]
 800eeda:	69b8      	ldr	r0, [r7, #24]
 800eedc:	f7ff fed9 	bl	800ec92 <put_fat>
 800eee0:	4603      	mov	r3, r0
 800eee2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800eee4:	7ffb      	ldrb	r3, [r7, #31]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d001      	beq.n	800eeee <remove_chain+0x88>
 800eeea:	7ffb      	ldrb	r3, [r7, #31]
 800eeec:	e01c      	b.n	800ef28 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800eeee:	69bb      	ldr	r3, [r7, #24]
 800eef0:	691a      	ldr	r2, [r3, #16]
 800eef2:	69bb      	ldr	r3, [r7, #24]
 800eef4:	695b      	ldr	r3, [r3, #20]
 800eef6:	3b02      	subs	r3, #2
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d20b      	bcs.n	800ef14 <remove_chain+0xae>
			fs->free_clst++;
 800eefc:	69bb      	ldr	r3, [r7, #24]
 800eefe:	691b      	ldr	r3, [r3, #16]
 800ef00:	1c5a      	adds	r2, r3, #1
 800ef02:	69bb      	ldr	r3, [r7, #24]
 800ef04:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ef06:	69bb      	ldr	r3, [r7, #24]
 800ef08:	791b      	ldrb	r3, [r3, #4]
 800ef0a:	f043 0301 	orr.w	r3, r3, #1
 800ef0e:	b2da      	uxtb	r2, r3
 800ef10:	69bb      	ldr	r3, [r7, #24]
 800ef12:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ef18:	69bb      	ldr	r3, [r7, #24]
 800ef1a:	695b      	ldr	r3, [r3, #20]
 800ef1c:	68ba      	ldr	r2, [r7, #8]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d3c6      	bcc.n	800eeb0 <remove_chain+0x4a>
 800ef22:	e000      	b.n	800ef26 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ef24:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ef26:	2300      	movs	r3, #0
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3720      	adds	r7, #32
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b088      	sub	sp, #32
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d10d      	bne.n	800ef62 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	68db      	ldr	r3, [r3, #12]
 800ef4a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d004      	beq.n	800ef5c <create_chain+0x2c>
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	695b      	ldr	r3, [r3, #20]
 800ef56:	69ba      	ldr	r2, [r7, #24]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d31b      	bcc.n	800ef94 <create_chain+0x64>
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	61bb      	str	r3, [r7, #24]
 800ef60:	e018      	b.n	800ef94 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ef62:	6839      	ldr	r1, [r7, #0]
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f7ff fdec 	bl	800eb42 <get_fat>
 800ef6a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	2b01      	cmp	r3, #1
 800ef70:	d801      	bhi.n	800ef76 <create_chain+0x46>
 800ef72:	2301      	movs	r3, #1
 800ef74:	e070      	b.n	800f058 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef7c:	d101      	bne.n	800ef82 <create_chain+0x52>
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	e06a      	b.n	800f058 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	695b      	ldr	r3, [r3, #20]
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d201      	bcs.n	800ef90 <create_chain+0x60>
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	e063      	b.n	800f058 <create_chain+0x128>
		scl = clst;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ef94:	69bb      	ldr	r3, [r7, #24]
 800ef96:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	695b      	ldr	r3, [r3, #20]
 800efa2:	69fa      	ldr	r2, [r7, #28]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d307      	bcc.n	800efb8 <create_chain+0x88>
				ncl = 2;
 800efa8:	2302      	movs	r3, #2
 800efaa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800efac:	69fa      	ldr	r2, [r7, #28]
 800efae:	69bb      	ldr	r3, [r7, #24]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d901      	bls.n	800efb8 <create_chain+0x88>
 800efb4:	2300      	movs	r3, #0
 800efb6:	e04f      	b.n	800f058 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800efb8:	69f9      	ldr	r1, [r7, #28]
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f7ff fdc1 	bl	800eb42 <get_fat>
 800efc0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d00e      	beq.n	800efe6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d003      	beq.n	800efd6 <create_chain+0xa6>
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efd4:	d101      	bne.n	800efda <create_chain+0xaa>
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	e03e      	b.n	800f058 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800efda:	69fa      	ldr	r2, [r7, #28]
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d1da      	bne.n	800ef98 <create_chain+0x68>
 800efe2:	2300      	movs	r3, #0
 800efe4:	e038      	b.n	800f058 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800efe6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800efe8:	f04f 32ff 	mov.w	r2, #4294967295
 800efec:	69f9      	ldr	r1, [r7, #28]
 800efee:	6938      	ldr	r0, [r7, #16]
 800eff0:	f7ff fe4f 	bl	800ec92 <put_fat>
 800eff4:	4603      	mov	r3, r0
 800eff6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800eff8:	7dfb      	ldrb	r3, [r7, #23]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d109      	bne.n	800f012 <create_chain+0xe2>
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d006      	beq.n	800f012 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f004:	69fa      	ldr	r2, [r7, #28]
 800f006:	6839      	ldr	r1, [r7, #0]
 800f008:	6938      	ldr	r0, [r7, #16]
 800f00a:	f7ff fe42 	bl	800ec92 <put_fat>
 800f00e:	4603      	mov	r3, r0
 800f010:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f012:	7dfb      	ldrb	r3, [r7, #23]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d116      	bne.n	800f046 <create_chain+0x116>
		fs->last_clst = ncl;
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	69fa      	ldr	r2, [r7, #28]
 800f01c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	691a      	ldr	r2, [r3, #16]
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	695b      	ldr	r3, [r3, #20]
 800f026:	3b02      	subs	r3, #2
 800f028:	429a      	cmp	r2, r3
 800f02a:	d804      	bhi.n	800f036 <create_chain+0x106>
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	691b      	ldr	r3, [r3, #16]
 800f030:	1e5a      	subs	r2, r3, #1
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f036:	693b      	ldr	r3, [r7, #16]
 800f038:	791b      	ldrb	r3, [r3, #4]
 800f03a:	f043 0301 	orr.w	r3, r3, #1
 800f03e:	b2da      	uxtb	r2, r3
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	711a      	strb	r2, [r3, #4]
 800f044:	e007      	b.n	800f056 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f046:	7dfb      	ldrb	r3, [r7, #23]
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d102      	bne.n	800f052 <create_chain+0x122>
 800f04c:	f04f 33ff 	mov.w	r3, #4294967295
 800f050:	e000      	b.n	800f054 <create_chain+0x124>
 800f052:	2301      	movs	r3, #1
 800f054:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f056:	69fb      	ldr	r3, [r7, #28]
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3720      	adds	r7, #32
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f060:	b480      	push	{r7}
 800f062:	b087      	sub	sp, #28
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f074:	3304      	adds	r3, #4
 800f076:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	0a5b      	lsrs	r3, r3, #9
 800f07c:	68fa      	ldr	r2, [r7, #12]
 800f07e:	8952      	ldrh	r2, [r2, #10]
 800f080:	fbb3 f3f2 	udiv	r3, r3, r2
 800f084:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f086:	693b      	ldr	r3, [r7, #16]
 800f088:	1d1a      	adds	r2, r3, #4
 800f08a:	613a      	str	r2, [r7, #16]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d101      	bne.n	800f09a <clmt_clust+0x3a>
 800f096:	2300      	movs	r3, #0
 800f098:	e010      	b.n	800f0bc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f09a:	697a      	ldr	r2, [r7, #20]
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d307      	bcc.n	800f0b2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f0a2:	697a      	ldr	r2, [r7, #20]
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	1ad3      	subs	r3, r2, r3
 800f0a8:	617b      	str	r3, [r7, #20]
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	3304      	adds	r3, #4
 800f0ae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f0b0:	e7e9      	b.n	800f086 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f0b2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	681a      	ldr	r2, [r3, #0]
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	4413      	add	r3, r2
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	371c      	adds	r7, #28
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c6:	4770      	bx	lr

0800f0c8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b086      	sub	sp, #24
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f0de:	d204      	bcs.n	800f0ea <dir_sdi+0x22>
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	f003 031f 	and.w	r3, r3, #31
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d001      	beq.n	800f0ee <dir_sdi+0x26>
		return FR_INT_ERR;
 800f0ea:	2302      	movs	r3, #2
 800f0ec:	e063      	b.n	800f1b6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	683a      	ldr	r2, [r7, #0]
 800f0f2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	689b      	ldr	r3, [r3, #8]
 800f0f8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d106      	bne.n	800f10e <dir_sdi+0x46>
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	2b02      	cmp	r3, #2
 800f106:	d902      	bls.n	800f10e <dir_sdi+0x46>
		clst = fs->dirbase;
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f10c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d10c      	bne.n	800f12e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	095b      	lsrs	r3, r3, #5
 800f118:	693a      	ldr	r2, [r7, #16]
 800f11a:	8912      	ldrh	r2, [r2, #8]
 800f11c:	4293      	cmp	r3, r2
 800f11e:	d301      	bcc.n	800f124 <dir_sdi+0x5c>
 800f120:	2302      	movs	r3, #2
 800f122:	e048      	b.n	800f1b6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	61da      	str	r2, [r3, #28]
 800f12c:	e029      	b.n	800f182 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	895b      	ldrh	r3, [r3, #10]
 800f132:	025b      	lsls	r3, r3, #9
 800f134:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f136:	e019      	b.n	800f16c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6979      	ldr	r1, [r7, #20]
 800f13c:	4618      	mov	r0, r3
 800f13e:	f7ff fd00 	bl	800eb42 <get_fat>
 800f142:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f14a:	d101      	bne.n	800f150 <dir_sdi+0x88>
 800f14c:	2301      	movs	r3, #1
 800f14e:	e032      	b.n	800f1b6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	2b01      	cmp	r3, #1
 800f154:	d904      	bls.n	800f160 <dir_sdi+0x98>
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	695b      	ldr	r3, [r3, #20]
 800f15a:	697a      	ldr	r2, [r7, #20]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d301      	bcc.n	800f164 <dir_sdi+0x9c>
 800f160:	2302      	movs	r3, #2
 800f162:	e028      	b.n	800f1b6 <dir_sdi+0xee>
			ofs -= csz;
 800f164:	683a      	ldr	r2, [r7, #0]
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	1ad3      	subs	r3, r2, r3
 800f16a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f16c:	683a      	ldr	r2, [r7, #0]
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	429a      	cmp	r2, r3
 800f172:	d2e1      	bcs.n	800f138 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f174:	6979      	ldr	r1, [r7, #20]
 800f176:	6938      	ldr	r0, [r7, #16]
 800f178:	f7ff fcc4 	bl	800eb04 <clust2sect>
 800f17c:	4602      	mov	r2, r0
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	697a      	ldr	r2, [r7, #20]
 800f186:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	69db      	ldr	r3, [r3, #28]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d101      	bne.n	800f194 <dir_sdi+0xcc>
 800f190:	2302      	movs	r3, #2
 800f192:	e010      	b.n	800f1b6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	69da      	ldr	r2, [r3, #28]
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	0a5b      	lsrs	r3, r3, #9
 800f19c:	441a      	add	r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1ae:	441a      	add	r2, r3
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f1b4:	2300      	movs	r3, #0
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3718      	adds	r7, #24
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}

0800f1be <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f1be:	b580      	push	{r7, lr}
 800f1c0:	b086      	sub	sp, #24
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	6078      	str	r0, [r7, #4]
 800f1c6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	695b      	ldr	r3, [r3, #20]
 800f1d2:	3320      	adds	r3, #32
 800f1d4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	69db      	ldr	r3, [r3, #28]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d003      	beq.n	800f1e6 <dir_next+0x28>
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f1e4:	d301      	bcc.n	800f1ea <dir_next+0x2c>
 800f1e6:	2304      	movs	r3, #4
 800f1e8:	e0aa      	b.n	800f340 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	f040 8098 	bne.w	800f326 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	69db      	ldr	r3, [r3, #28]
 800f1fa:	1c5a      	adds	r2, r3, #1
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	699b      	ldr	r3, [r3, #24]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d10b      	bne.n	800f220 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	095b      	lsrs	r3, r3, #5
 800f20c:	68fa      	ldr	r2, [r7, #12]
 800f20e:	8912      	ldrh	r2, [r2, #8]
 800f210:	4293      	cmp	r3, r2
 800f212:	f0c0 8088 	bcc.w	800f326 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2200      	movs	r2, #0
 800f21a:	61da      	str	r2, [r3, #28]
 800f21c:	2304      	movs	r3, #4
 800f21e:	e08f      	b.n	800f340 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	0a5b      	lsrs	r3, r3, #9
 800f224:	68fa      	ldr	r2, [r7, #12]
 800f226:	8952      	ldrh	r2, [r2, #10]
 800f228:	3a01      	subs	r2, #1
 800f22a:	4013      	ands	r3, r2
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d17a      	bne.n	800f326 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f230:	687a      	ldr	r2, [r7, #4]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	699b      	ldr	r3, [r3, #24]
 800f236:	4619      	mov	r1, r3
 800f238:	4610      	mov	r0, r2
 800f23a:	f7ff fc82 	bl	800eb42 <get_fat>
 800f23e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	2b01      	cmp	r3, #1
 800f244:	d801      	bhi.n	800f24a <dir_next+0x8c>
 800f246:	2302      	movs	r3, #2
 800f248:	e07a      	b.n	800f340 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f250:	d101      	bne.n	800f256 <dir_next+0x98>
 800f252:	2301      	movs	r3, #1
 800f254:	e074      	b.n	800f340 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	695b      	ldr	r3, [r3, #20]
 800f25a:	697a      	ldr	r2, [r7, #20]
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d358      	bcc.n	800f312 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d104      	bne.n	800f270 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2200      	movs	r2, #0
 800f26a:	61da      	str	r2, [r3, #28]
 800f26c:	2304      	movs	r3, #4
 800f26e:	e067      	b.n	800f340 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f270:	687a      	ldr	r2, [r7, #4]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	699b      	ldr	r3, [r3, #24]
 800f276:	4619      	mov	r1, r3
 800f278:	4610      	mov	r0, r2
 800f27a:	f7ff fe59 	bl	800ef30 <create_chain>
 800f27e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d101      	bne.n	800f28a <dir_next+0xcc>
 800f286:	2307      	movs	r3, #7
 800f288:	e05a      	b.n	800f340 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	d101      	bne.n	800f294 <dir_next+0xd6>
 800f290:	2302      	movs	r3, #2
 800f292:	e055      	b.n	800f340 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f29a:	d101      	bne.n	800f2a0 <dir_next+0xe2>
 800f29c:	2301      	movs	r3, #1
 800f29e:	e04f      	b.n	800f340 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f2a0:	68f8      	ldr	r0, [r7, #12]
 800f2a2:	f7ff fb4f 	bl	800e944 <sync_window>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d001      	beq.n	800f2b0 <dir_next+0xf2>
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	e047      	b.n	800f340 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	3330      	adds	r3, #48	; 0x30
 800f2b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f2b8:	2100      	movs	r1, #0
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7ff f979 	bl	800e5b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	613b      	str	r3, [r7, #16]
 800f2c4:	6979      	ldr	r1, [r7, #20]
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	f7ff fc1c 	bl	800eb04 <clust2sect>
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	62da      	str	r2, [r3, #44]	; 0x2c
 800f2d2:	e012      	b.n	800f2fa <dir_next+0x13c>
						fs->wflag = 1;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f2da:	68f8      	ldr	r0, [r7, #12]
 800f2dc:	f7ff fb32 	bl	800e944 <sync_window>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d001      	beq.n	800f2ea <dir_next+0x12c>
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	e02a      	b.n	800f340 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	613b      	str	r3, [r7, #16]
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2f4:	1c5a      	adds	r2, r3, #1
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	62da      	str	r2, [r3, #44]	; 0x2c
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	895b      	ldrh	r3, [r3, #10]
 800f2fe:	461a      	mov	r2, r3
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	4293      	cmp	r3, r2
 800f304:	d3e6      	bcc.n	800f2d4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	1ad2      	subs	r2, r2, r3
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	697a      	ldr	r2, [r7, #20]
 800f316:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f318:	6979      	ldr	r1, [r7, #20]
 800f31a:	68f8      	ldr	r0, [r7, #12]
 800f31c:	f7ff fbf2 	bl	800eb04 <clust2sect>
 800f320:	4602      	mov	r2, r0
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	68ba      	ldr	r2, [r7, #8]
 800f32a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f338:	441a      	add	r2, r3
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f33e:	2300      	movs	r3, #0
}
 800f340:	4618      	mov	r0, r3
 800f342:	3718      	adds	r7, #24
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b086      	sub	sp, #24
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
 800f350:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f358:	2100      	movs	r1, #0
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f7ff feb4 	bl	800f0c8 <dir_sdi>
 800f360:	4603      	mov	r3, r0
 800f362:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f364:	7dfb      	ldrb	r3, [r7, #23]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d12b      	bne.n	800f3c2 <dir_alloc+0x7a>
		n = 0;
 800f36a:	2300      	movs	r3, #0
 800f36c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	69db      	ldr	r3, [r3, #28]
 800f372:	4619      	mov	r1, r3
 800f374:	68f8      	ldr	r0, [r7, #12]
 800f376:	f7ff fb29 	bl	800e9cc <move_window>
 800f37a:	4603      	mov	r3, r0
 800f37c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f37e:	7dfb      	ldrb	r3, [r7, #23]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d11d      	bne.n	800f3c0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6a1b      	ldr	r3, [r3, #32]
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	2be5      	cmp	r3, #229	; 0xe5
 800f38c:	d004      	beq.n	800f398 <dir_alloc+0x50>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6a1b      	ldr	r3, [r3, #32]
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d107      	bne.n	800f3a8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	3301      	adds	r3, #1
 800f39c:	613b      	str	r3, [r7, #16]
 800f39e:	693a      	ldr	r2, [r7, #16]
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d102      	bne.n	800f3ac <dir_alloc+0x64>
 800f3a6:	e00c      	b.n	800f3c2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f3ac:	2101      	movs	r1, #1
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f7ff ff05 	bl	800f1be <dir_next>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f3b8:	7dfb      	ldrb	r3, [r7, #23]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d0d7      	beq.n	800f36e <dir_alloc+0x26>
 800f3be:	e000      	b.n	800f3c2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f3c0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f3c2:	7dfb      	ldrb	r3, [r7, #23]
 800f3c4:	2b04      	cmp	r3, #4
 800f3c6:	d101      	bne.n	800f3cc <dir_alloc+0x84>
 800f3c8:	2307      	movs	r3, #7
 800f3ca:	75fb      	strb	r3, [r7, #23]
	return res;
 800f3cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3718      	adds	r7, #24
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}

0800f3d6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f3d6:	b580      	push	{r7, lr}
 800f3d8:	b084      	sub	sp, #16
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
 800f3de:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	331a      	adds	r3, #26
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7ff f841 	bl	800e46c <ld_word>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	2b03      	cmp	r3, #3
 800f3f4:	d109      	bne.n	800f40a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	3314      	adds	r3, #20
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7ff f836 	bl	800e46c <ld_word>
 800f400:	4603      	mov	r3, r0
 800f402:	041b      	lsls	r3, r3, #16
 800f404:	68fa      	ldr	r2, [r7, #12]
 800f406:	4313      	orrs	r3, r2
 800f408:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f40a:	68fb      	ldr	r3, [r7, #12]
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3710      	adds	r7, #16
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b084      	sub	sp, #16
 800f418:	af00      	add	r7, sp, #0
 800f41a:	60f8      	str	r0, [r7, #12]
 800f41c:	60b9      	str	r1, [r7, #8]
 800f41e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	331a      	adds	r3, #26
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	b292      	uxth	r2, r2
 800f428:	4611      	mov	r1, r2
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7ff f859 	bl	800e4e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	2b03      	cmp	r3, #3
 800f436:	d109      	bne.n	800f44c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	f103 0214 	add.w	r2, r3, #20
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	0c1b      	lsrs	r3, r3, #16
 800f442:	b29b      	uxth	r3, r3
 800f444:	4619      	mov	r1, r3
 800f446:	4610      	mov	r0, r2
 800f448:	f7ff f84b 	bl	800e4e2 <st_word>
	}
}
 800f44c:	bf00      	nop
 800f44e:	3710      	adds	r7, #16
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b086      	sub	sp, #24
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f462:	2100      	movs	r1, #0
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f7ff fe2f 	bl	800f0c8 <dir_sdi>
 800f46a:	4603      	mov	r3, r0
 800f46c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f46e:	7dfb      	ldrb	r3, [r7, #23]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d001      	beq.n	800f478 <dir_find+0x24>
 800f474:	7dfb      	ldrb	r3, [r7, #23]
 800f476:	e03e      	b.n	800f4f6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	69db      	ldr	r3, [r3, #28]
 800f47c:	4619      	mov	r1, r3
 800f47e:	6938      	ldr	r0, [r7, #16]
 800f480:	f7ff faa4 	bl	800e9cc <move_window>
 800f484:	4603      	mov	r3, r0
 800f486:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f488:	7dfb      	ldrb	r3, [r7, #23]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d12f      	bne.n	800f4ee <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6a1b      	ldr	r3, [r3, #32]
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f496:	7bfb      	ldrb	r3, [r7, #15]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d102      	bne.n	800f4a2 <dir_find+0x4e>
 800f49c:	2304      	movs	r3, #4
 800f49e:	75fb      	strb	r3, [r7, #23]
 800f4a0:	e028      	b.n	800f4f4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6a1b      	ldr	r3, [r3, #32]
 800f4a6:	330b      	adds	r3, #11
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f4ae:	b2da      	uxtb	r2, r3
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6a1b      	ldr	r3, [r3, #32]
 800f4b8:	330b      	adds	r3, #11
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	f003 0308 	and.w	r3, r3, #8
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d10a      	bne.n	800f4da <dir_find+0x86>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6a18      	ldr	r0, [r3, #32]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	3324      	adds	r3, #36	; 0x24
 800f4cc:	220b      	movs	r2, #11
 800f4ce:	4619      	mov	r1, r3
 800f4d0:	f7ff f88a 	bl	800e5e8 <mem_cmp>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d00b      	beq.n	800f4f2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f4da:	2100      	movs	r1, #0
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f7ff fe6e 	bl	800f1be <dir_next>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f4e6:	7dfb      	ldrb	r3, [r7, #23]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d0c5      	beq.n	800f478 <dir_find+0x24>
 800f4ec:	e002      	b.n	800f4f4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f4ee:	bf00      	nop
 800f4f0:	e000      	b.n	800f4f4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f4f2:	bf00      	nop

	return res;
 800f4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3718      	adds	r7, #24
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b084      	sub	sp, #16
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f50c:	2101      	movs	r1, #1
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f7ff ff1a 	bl	800f348 <dir_alloc>
 800f514:	4603      	mov	r3, r0
 800f516:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f518:	7bfb      	ldrb	r3, [r7, #15]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d11c      	bne.n	800f558 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	69db      	ldr	r3, [r3, #28]
 800f522:	4619      	mov	r1, r3
 800f524:	68b8      	ldr	r0, [r7, #8]
 800f526:	f7ff fa51 	bl	800e9cc <move_window>
 800f52a:	4603      	mov	r3, r0
 800f52c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f52e:	7bfb      	ldrb	r3, [r7, #15]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d111      	bne.n	800f558 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6a1b      	ldr	r3, [r3, #32]
 800f538:	2220      	movs	r2, #32
 800f53a:	2100      	movs	r1, #0
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7ff f838 	bl	800e5b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6a18      	ldr	r0, [r3, #32]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	3324      	adds	r3, #36	; 0x24
 800f54a:	220b      	movs	r2, #11
 800f54c:	4619      	mov	r1, r3
 800f54e:	f7ff f80f 	bl	800e570 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	2201      	movs	r2, #1
 800f556:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f558:	7bfb      	ldrb	r3, [r7, #15]
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3710      	adds	r7, #16
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}
	...

0800f564 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b088      	sub	sp, #32
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
 800f56c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	60fb      	str	r3, [r7, #12]
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	3324      	adds	r3, #36	; 0x24
 800f578:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f57a:	220b      	movs	r2, #11
 800f57c:	2120      	movs	r1, #32
 800f57e:	68b8      	ldr	r0, [r7, #8]
 800f580:	f7ff f817 	bl	800e5b2 <mem_set>
	si = i = 0; ni = 8;
 800f584:	2300      	movs	r3, #0
 800f586:	613b      	str	r3, [r7, #16]
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	61fb      	str	r3, [r7, #28]
 800f58c:	2308      	movs	r3, #8
 800f58e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f590:	69fb      	ldr	r3, [r7, #28]
 800f592:	1c5a      	adds	r2, r3, #1
 800f594:	61fa      	str	r2, [r7, #28]
 800f596:	68fa      	ldr	r2, [r7, #12]
 800f598:	4413      	add	r3, r2
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f59e:	7efb      	ldrb	r3, [r7, #27]
 800f5a0:	2b20      	cmp	r3, #32
 800f5a2:	d94e      	bls.n	800f642 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f5a4:	7efb      	ldrb	r3, [r7, #27]
 800f5a6:	2b2f      	cmp	r3, #47	; 0x2f
 800f5a8:	d006      	beq.n	800f5b8 <create_name+0x54>
 800f5aa:	7efb      	ldrb	r3, [r7, #27]
 800f5ac:	2b5c      	cmp	r3, #92	; 0x5c
 800f5ae:	d110      	bne.n	800f5d2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f5b0:	e002      	b.n	800f5b8 <create_name+0x54>
 800f5b2:	69fb      	ldr	r3, [r7, #28]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	61fb      	str	r3, [r7, #28]
 800f5b8:	68fa      	ldr	r2, [r7, #12]
 800f5ba:	69fb      	ldr	r3, [r7, #28]
 800f5bc:	4413      	add	r3, r2
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	2b2f      	cmp	r3, #47	; 0x2f
 800f5c2:	d0f6      	beq.n	800f5b2 <create_name+0x4e>
 800f5c4:	68fa      	ldr	r2, [r7, #12]
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	2b5c      	cmp	r3, #92	; 0x5c
 800f5ce:	d0f0      	beq.n	800f5b2 <create_name+0x4e>
			break;
 800f5d0:	e038      	b.n	800f644 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f5d2:	7efb      	ldrb	r3, [r7, #27]
 800f5d4:	2b2e      	cmp	r3, #46	; 0x2e
 800f5d6:	d003      	beq.n	800f5e0 <create_name+0x7c>
 800f5d8:	693a      	ldr	r2, [r7, #16]
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d30c      	bcc.n	800f5fa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	2b0b      	cmp	r3, #11
 800f5e4:	d002      	beq.n	800f5ec <create_name+0x88>
 800f5e6:	7efb      	ldrb	r3, [r7, #27]
 800f5e8:	2b2e      	cmp	r3, #46	; 0x2e
 800f5ea:	d001      	beq.n	800f5f0 <create_name+0x8c>
 800f5ec:	2306      	movs	r3, #6
 800f5ee:	e044      	b.n	800f67a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f5f0:	2308      	movs	r3, #8
 800f5f2:	613b      	str	r3, [r7, #16]
 800f5f4:	230b      	movs	r3, #11
 800f5f6:	617b      	str	r3, [r7, #20]
			continue;
 800f5f8:	e022      	b.n	800f640 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f5fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	da04      	bge.n	800f60c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f602:	7efb      	ldrb	r3, [r7, #27]
 800f604:	3b80      	subs	r3, #128	; 0x80
 800f606:	4a1f      	ldr	r2, [pc, #124]	; (800f684 <create_name+0x120>)
 800f608:	5cd3      	ldrb	r3, [r2, r3]
 800f60a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f60c:	7efb      	ldrb	r3, [r7, #27]
 800f60e:	4619      	mov	r1, r3
 800f610:	481d      	ldr	r0, [pc, #116]	; (800f688 <create_name+0x124>)
 800f612:	f7ff f810 	bl	800e636 <chk_chr>
 800f616:	4603      	mov	r3, r0
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d001      	beq.n	800f620 <create_name+0xbc>
 800f61c:	2306      	movs	r3, #6
 800f61e:	e02c      	b.n	800f67a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f620:	7efb      	ldrb	r3, [r7, #27]
 800f622:	2b60      	cmp	r3, #96	; 0x60
 800f624:	d905      	bls.n	800f632 <create_name+0xce>
 800f626:	7efb      	ldrb	r3, [r7, #27]
 800f628:	2b7a      	cmp	r3, #122	; 0x7a
 800f62a:	d802      	bhi.n	800f632 <create_name+0xce>
 800f62c:	7efb      	ldrb	r3, [r7, #27]
 800f62e:	3b20      	subs	r3, #32
 800f630:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	1c5a      	adds	r2, r3, #1
 800f636:	613a      	str	r2, [r7, #16]
 800f638:	68ba      	ldr	r2, [r7, #8]
 800f63a:	4413      	add	r3, r2
 800f63c:	7efa      	ldrb	r2, [r7, #27]
 800f63e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f640:	e7a6      	b.n	800f590 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f642:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f644:	68fa      	ldr	r2, [r7, #12]
 800f646:	69fb      	ldr	r3, [r7, #28]
 800f648:	441a      	add	r2, r3
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d101      	bne.n	800f658 <create_name+0xf4>
 800f654:	2306      	movs	r3, #6
 800f656:	e010      	b.n	800f67a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	2be5      	cmp	r3, #229	; 0xe5
 800f65e:	d102      	bne.n	800f666 <create_name+0x102>
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	2205      	movs	r2, #5
 800f664:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f666:	7efb      	ldrb	r3, [r7, #27]
 800f668:	2b20      	cmp	r3, #32
 800f66a:	d801      	bhi.n	800f670 <create_name+0x10c>
 800f66c:	2204      	movs	r2, #4
 800f66e:	e000      	b.n	800f672 <create_name+0x10e>
 800f670:	2200      	movs	r2, #0
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	330b      	adds	r3, #11
 800f676:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f678:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3720      	adds	r7, #32
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
 800f682:	bf00      	nop
 800f684:	0801e99c 	.word	0x0801e99c
 800f688:	0801bf14 	.word	0x0801bf14

0800f68c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b086      	sub	sp, #24
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f6a0:	e002      	b.n	800f6a8 <follow_path+0x1c>
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	603b      	str	r3, [r7, #0]
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	2b2f      	cmp	r3, #47	; 0x2f
 800f6ae:	d0f8      	beq.n	800f6a2 <follow_path+0x16>
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	2b5c      	cmp	r3, #92	; 0x5c
 800f6b6:	d0f4      	beq.n	800f6a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	2b1f      	cmp	r3, #31
 800f6c4:	d80a      	bhi.n	800f6dc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2280      	movs	r2, #128	; 0x80
 800f6ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f6ce:	2100      	movs	r1, #0
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f7ff fcf9 	bl	800f0c8 <dir_sdi>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	75fb      	strb	r3, [r7, #23]
 800f6da:	e043      	b.n	800f764 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f6dc:	463b      	mov	r3, r7
 800f6de:	4619      	mov	r1, r3
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f7ff ff3f 	bl	800f564 <create_name>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f6ea:	7dfb      	ldrb	r3, [r7, #23]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d134      	bne.n	800f75a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f7ff feaf 	bl	800f454 <dir_find>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f700:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f702:	7dfb      	ldrb	r3, [r7, #23]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00a      	beq.n	800f71e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f708:	7dfb      	ldrb	r3, [r7, #23]
 800f70a:	2b04      	cmp	r3, #4
 800f70c:	d127      	bne.n	800f75e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f70e:	7afb      	ldrb	r3, [r7, #11]
 800f710:	f003 0304 	and.w	r3, r3, #4
 800f714:	2b00      	cmp	r3, #0
 800f716:	d122      	bne.n	800f75e <follow_path+0xd2>
 800f718:	2305      	movs	r3, #5
 800f71a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f71c:	e01f      	b.n	800f75e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f71e:	7afb      	ldrb	r3, [r7, #11]
 800f720:	f003 0304 	and.w	r3, r3, #4
 800f724:	2b00      	cmp	r3, #0
 800f726:	d11c      	bne.n	800f762 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	799b      	ldrb	r3, [r3, #6]
 800f72c:	f003 0310 	and.w	r3, r3, #16
 800f730:	2b00      	cmp	r3, #0
 800f732:	d102      	bne.n	800f73a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f734:	2305      	movs	r3, #5
 800f736:	75fb      	strb	r3, [r7, #23]
 800f738:	e014      	b.n	800f764 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	695b      	ldr	r3, [r3, #20]
 800f744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f748:	4413      	add	r3, r2
 800f74a:	4619      	mov	r1, r3
 800f74c:	68f8      	ldr	r0, [r7, #12]
 800f74e:	f7ff fe42 	bl	800f3d6 <ld_clust>
 800f752:	4602      	mov	r2, r0
 800f754:	693b      	ldr	r3, [r7, #16]
 800f756:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f758:	e7c0      	b.n	800f6dc <follow_path+0x50>
			if (res != FR_OK) break;
 800f75a:	bf00      	nop
 800f75c:	e002      	b.n	800f764 <follow_path+0xd8>
				break;
 800f75e:	bf00      	nop
 800f760:	e000      	b.n	800f764 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f762:	bf00      	nop
			}
		}
	}

	return res;
 800f764:	7dfb      	ldrb	r3, [r7, #23]
}
 800f766:	4618      	mov	r0, r3
 800f768:	3718      	adds	r7, #24
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}

0800f76e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f76e:	b480      	push	{r7}
 800f770:	b087      	sub	sp, #28
 800f772:	af00      	add	r7, sp, #0
 800f774:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f776:	f04f 33ff 	mov.w	r3, #4294967295
 800f77a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d031      	beq.n	800f7e8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	617b      	str	r3, [r7, #20]
 800f78a:	e002      	b.n	800f792 <get_ldnumber+0x24>
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	3301      	adds	r3, #1
 800f790:	617b      	str	r3, [r7, #20]
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	781b      	ldrb	r3, [r3, #0]
 800f796:	2b20      	cmp	r3, #32
 800f798:	d903      	bls.n	800f7a2 <get_ldnumber+0x34>
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	2b3a      	cmp	r3, #58	; 0x3a
 800f7a0:	d1f4      	bne.n	800f78c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	2b3a      	cmp	r3, #58	; 0x3a
 800f7a8:	d11c      	bne.n	800f7e4 <get_ldnumber+0x76>
			tp = *path;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	1c5a      	adds	r2, r3, #1
 800f7b4:	60fa      	str	r2, [r7, #12]
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	3b30      	subs	r3, #48	; 0x30
 800f7ba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	2b09      	cmp	r3, #9
 800f7c0:	d80e      	bhi.n	800f7e0 <get_ldnumber+0x72>
 800f7c2:	68fa      	ldr	r2, [r7, #12]
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d10a      	bne.n	800f7e0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d107      	bne.n	800f7e0 <get_ldnumber+0x72>
					vol = (int)i;
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	617b      	str	r3, [r7, #20]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	697a      	ldr	r2, [r7, #20]
 800f7de:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	e002      	b.n	800f7ea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f7e8:	693b      	ldr	r3, [r7, #16]
}
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	371c      	adds	r7, #28
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f4:	4770      	bx	lr
	...

0800f7f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2200      	movs	r2, #0
 800f806:	70da      	strb	r2, [r3, #3]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f04f 32ff 	mov.w	r2, #4294967295
 800f80e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f810:	6839      	ldr	r1, [r7, #0]
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f7ff f8da 	bl	800e9cc <move_window>
 800f818:	4603      	mov	r3, r0
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d001      	beq.n	800f822 <check_fs+0x2a>
 800f81e:	2304      	movs	r3, #4
 800f820:	e038      	b.n	800f894 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	3330      	adds	r3, #48	; 0x30
 800f826:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f82a:	4618      	mov	r0, r3
 800f82c:	f7fe fe1e 	bl	800e46c <ld_word>
 800f830:	4603      	mov	r3, r0
 800f832:	461a      	mov	r2, r3
 800f834:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f838:	429a      	cmp	r2, r3
 800f83a:	d001      	beq.n	800f840 <check_fs+0x48>
 800f83c:	2303      	movs	r3, #3
 800f83e:	e029      	b.n	800f894 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f846:	2be9      	cmp	r3, #233	; 0xe9
 800f848:	d009      	beq.n	800f85e <check_fs+0x66>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f850:	2beb      	cmp	r3, #235	; 0xeb
 800f852:	d11e      	bne.n	800f892 <check_fs+0x9a>
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f85a:	2b90      	cmp	r3, #144	; 0x90
 800f85c:	d119      	bne.n	800f892 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	3330      	adds	r3, #48	; 0x30
 800f862:	3336      	adds	r3, #54	; 0x36
 800f864:	4618      	mov	r0, r3
 800f866:	f7fe fe19 	bl	800e49c <ld_dword>
 800f86a:	4603      	mov	r3, r0
 800f86c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f870:	4a0a      	ldr	r2, [pc, #40]	; (800f89c <check_fs+0xa4>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d101      	bne.n	800f87a <check_fs+0x82>
 800f876:	2300      	movs	r3, #0
 800f878:	e00c      	b.n	800f894 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	3330      	adds	r3, #48	; 0x30
 800f87e:	3352      	adds	r3, #82	; 0x52
 800f880:	4618      	mov	r0, r3
 800f882:	f7fe fe0b 	bl	800e49c <ld_dword>
 800f886:	4603      	mov	r3, r0
 800f888:	4a05      	ldr	r2, [pc, #20]	; (800f8a0 <check_fs+0xa8>)
 800f88a:	4293      	cmp	r3, r2
 800f88c:	d101      	bne.n	800f892 <check_fs+0x9a>
 800f88e:	2300      	movs	r3, #0
 800f890:	e000      	b.n	800f894 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f892:	2302      	movs	r3, #2
}
 800f894:	4618      	mov	r0, r3
 800f896:	3708      	adds	r7, #8
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	00544146 	.word	0x00544146
 800f8a0:	33544146 	.word	0x33544146

0800f8a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b096      	sub	sp, #88	; 0x58
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	60f8      	str	r0, [r7, #12]
 800f8ac:	60b9      	str	r1, [r7, #8]
 800f8ae:	4613      	mov	r3, r2
 800f8b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f8b8:	68f8      	ldr	r0, [r7, #12]
 800f8ba:	f7ff ff58 	bl	800f76e <get_ldnumber>
 800f8be:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	da01      	bge.n	800f8ca <find_volume+0x26>
 800f8c6:	230b      	movs	r3, #11
 800f8c8:	e22d      	b.n	800fd26 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f8ca:	4aa1      	ldr	r2, [pc, #644]	; (800fb50 <find_volume+0x2ac>)
 800f8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d101      	bne.n	800f8de <find_volume+0x3a>
 800f8da:	230c      	movs	r3, #12
 800f8dc:	e223      	b.n	800fd26 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f8e4:	79fb      	ldrb	r3, [r7, #7]
 800f8e6:	f023 0301 	bic.w	r3, r3, #1
 800f8ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d01a      	beq.n	800f92a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f6:	785b      	ldrb	r3, [r3, #1]
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7fe fd17 	bl	800e32c <disk_status>
 800f8fe:	4603      	mov	r3, r0
 800f900:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f904:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f908:	f003 0301 	and.w	r3, r3, #1
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d10c      	bne.n	800f92a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f910:	79fb      	ldrb	r3, [r7, #7]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d007      	beq.n	800f926 <find_volume+0x82>
 800f916:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f91a:	f003 0304 	and.w	r3, r3, #4
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d001      	beq.n	800f926 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f922:	230a      	movs	r3, #10
 800f924:	e1ff      	b.n	800fd26 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800f926:	2300      	movs	r3, #0
 800f928:	e1fd      	b.n	800fd26 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92c:	2200      	movs	r2, #0
 800f92e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f932:	b2da      	uxtb	r2, r3
 800f934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f936:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93a:	785b      	ldrb	r3, [r3, #1]
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7fe fd0f 	bl	800e360 <disk_initialize>
 800f942:	4603      	mov	r3, r0
 800f944:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f948:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f94c:	f003 0301 	and.w	r3, r3, #1
 800f950:	2b00      	cmp	r3, #0
 800f952:	d001      	beq.n	800f958 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f954:	2303      	movs	r3, #3
 800f956:	e1e6      	b.n	800fd26 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f958:	79fb      	ldrb	r3, [r7, #7]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d007      	beq.n	800f96e <find_volume+0xca>
 800f95e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f962:	f003 0304 	and.w	r3, r3, #4
 800f966:	2b00      	cmp	r3, #0
 800f968:	d001      	beq.n	800f96e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f96a:	230a      	movs	r3, #10
 800f96c:	e1db      	b.n	800fd26 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f96e:	2300      	movs	r3, #0
 800f970:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f972:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f974:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f976:	f7ff ff3f 	bl	800f7f8 <check_fs>
 800f97a:	4603      	mov	r3, r0
 800f97c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f980:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f984:	2b02      	cmp	r3, #2
 800f986:	d149      	bne.n	800fa1c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f988:	2300      	movs	r3, #0
 800f98a:	643b      	str	r3, [r7, #64]	; 0x40
 800f98c:	e01e      	b.n	800f9cc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f990:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f996:	011b      	lsls	r3, r3, #4
 800f998:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f99c:	4413      	add	r3, r2
 800f99e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a2:	3304      	adds	r3, #4
 800f9a4:	781b      	ldrb	r3, [r3, #0]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d006      	beq.n	800f9b8 <find_volume+0x114>
 800f9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ac:	3308      	adds	r3, #8
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fe fd74 	bl	800e49c <ld_dword>
 800f9b4:	4602      	mov	r2, r0
 800f9b6:	e000      	b.n	800f9ba <find_volume+0x116>
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	3358      	adds	r3, #88	; 0x58
 800f9c0:	443b      	add	r3, r7
 800f9c2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f9c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9c8:	3301      	adds	r3, #1
 800f9ca:	643b      	str	r3, [r7, #64]	; 0x40
 800f9cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9ce:	2b03      	cmp	r3, #3
 800f9d0:	d9dd      	bls.n	800f98e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f9d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d002      	beq.n	800f9e2 <find_volume+0x13e>
 800f9dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9de:	3b01      	subs	r3, #1
 800f9e0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f9e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9e4:	009b      	lsls	r3, r3, #2
 800f9e6:	3358      	adds	r3, #88	; 0x58
 800f9e8:	443b      	add	r3, r7
 800f9ea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f9ee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f9f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d005      	beq.n	800fa02 <find_volume+0x15e>
 800f9f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f9f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f9fa:	f7ff fefd 	bl	800f7f8 <check_fs>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	e000      	b.n	800fa04 <find_volume+0x160>
 800fa02:	2303      	movs	r3, #3
 800fa04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fa08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	d905      	bls.n	800fa1c <find_volume+0x178>
 800fa10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa12:	3301      	adds	r3, #1
 800fa14:	643b      	str	r3, [r7, #64]	; 0x40
 800fa16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa18:	2b03      	cmp	r3, #3
 800fa1a:	d9e2      	bls.n	800f9e2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fa1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fa20:	2b04      	cmp	r3, #4
 800fa22:	d101      	bne.n	800fa28 <find_volume+0x184>
 800fa24:	2301      	movs	r3, #1
 800fa26:	e17e      	b.n	800fd26 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fa28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	d901      	bls.n	800fa34 <find_volume+0x190>
 800fa30:	230d      	movs	r3, #13
 800fa32:	e178      	b.n	800fd26 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa36:	3330      	adds	r3, #48	; 0x30
 800fa38:	330b      	adds	r3, #11
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7fe fd16 	bl	800e46c <ld_word>
 800fa40:	4603      	mov	r3, r0
 800fa42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa46:	d001      	beq.n	800fa4c <find_volume+0x1a8>
 800fa48:	230d      	movs	r3, #13
 800fa4a:	e16c      	b.n	800fd26 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4e:	3330      	adds	r3, #48	; 0x30
 800fa50:	3316      	adds	r3, #22
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7fe fd0a 	bl	800e46c <ld_word>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fa5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d106      	bne.n	800fa70 <find_volume+0x1cc>
 800fa62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa64:	3330      	adds	r3, #48	; 0x30
 800fa66:	3324      	adds	r3, #36	; 0x24
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f7fe fd17 	bl	800e49c <ld_dword>
 800fa6e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fa74:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fa76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa78:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800fa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fa80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa82:	789b      	ldrb	r3, [r3, #2]
 800fa84:	2b01      	cmp	r3, #1
 800fa86:	d005      	beq.n	800fa94 <find_volume+0x1f0>
 800fa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa8a:	789b      	ldrb	r3, [r3, #2]
 800fa8c:	2b02      	cmp	r3, #2
 800fa8e:	d001      	beq.n	800fa94 <find_volume+0x1f0>
 800fa90:	230d      	movs	r3, #13
 800fa92:	e148      	b.n	800fd26 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fa94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa96:	789b      	ldrb	r3, [r3, #2]
 800fa98:	461a      	mov	r2, r3
 800fa9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa9c:	fb02 f303 	mul.w	r3, r2, r3
 800faa0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800faa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800faa8:	b29a      	uxth	r2, r3
 800faaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800faae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab0:	895b      	ldrh	r3, [r3, #10]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d008      	beq.n	800fac8 <find_volume+0x224>
 800fab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab8:	895b      	ldrh	r3, [r3, #10]
 800faba:	461a      	mov	r2, r3
 800fabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fabe:	895b      	ldrh	r3, [r3, #10]
 800fac0:	3b01      	subs	r3, #1
 800fac2:	4013      	ands	r3, r2
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d001      	beq.n	800facc <find_volume+0x228>
 800fac8:	230d      	movs	r3, #13
 800faca:	e12c      	b.n	800fd26 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800facc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800face:	3330      	adds	r3, #48	; 0x30
 800fad0:	3311      	adds	r3, #17
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fe fcca 	bl	800e46c <ld_word>
 800fad8:	4603      	mov	r3, r0
 800fada:	461a      	mov	r2, r3
 800fadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fade:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae2:	891b      	ldrh	r3, [r3, #8]
 800fae4:	f003 030f 	and.w	r3, r3, #15
 800fae8:	b29b      	uxth	r3, r3
 800faea:	2b00      	cmp	r3, #0
 800faec:	d001      	beq.n	800faf2 <find_volume+0x24e>
 800faee:	230d      	movs	r3, #13
 800faf0:	e119      	b.n	800fd26 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800faf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf4:	3330      	adds	r3, #48	; 0x30
 800faf6:	3313      	adds	r3, #19
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7fe fcb7 	bl	800e46c <ld_word>
 800fafe:	4603      	mov	r3, r0
 800fb00:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fb02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d106      	bne.n	800fb16 <find_volume+0x272>
 800fb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0a:	3330      	adds	r3, #48	; 0x30
 800fb0c:	3320      	adds	r3, #32
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7fe fcc4 	bl	800e49c <ld_dword>
 800fb14:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb18:	3330      	adds	r3, #48	; 0x30
 800fb1a:	330e      	adds	r3, #14
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7fe fca5 	bl	800e46c <ld_word>
 800fb22:	4603      	mov	r3, r0
 800fb24:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fb26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d101      	bne.n	800fb30 <find_volume+0x28c>
 800fb2c:	230d      	movs	r3, #13
 800fb2e:	e0fa      	b.n	800fd26 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fb30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fb32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb34:	4413      	add	r3, r2
 800fb36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb38:	8912      	ldrh	r2, [r2, #8]
 800fb3a:	0912      	lsrs	r2, r2, #4
 800fb3c:	b292      	uxth	r2, r2
 800fb3e:	4413      	add	r3, r2
 800fb40:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fb42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d204      	bcs.n	800fb54 <find_volume+0x2b0>
 800fb4a:	230d      	movs	r3, #13
 800fb4c:	e0eb      	b.n	800fd26 <find_volume+0x482>
 800fb4e:	bf00      	nop
 800fb50:	200054b4 	.word	0x200054b4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fb54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb58:	1ad3      	subs	r3, r2, r3
 800fb5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb5c:	8952      	ldrh	r2, [r2, #10]
 800fb5e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb62:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d101      	bne.n	800fb6e <find_volume+0x2ca>
 800fb6a:	230d      	movs	r3, #13
 800fb6c:	e0db      	b.n	800fd26 <find_volume+0x482>
		fmt = FS_FAT32;
 800fb6e:	2303      	movs	r3, #3
 800fb70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb76:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fb7a:	4293      	cmp	r3, r2
 800fb7c:	d802      	bhi.n	800fb84 <find_volume+0x2e0>
 800fb7e:	2302      	movs	r3, #2
 800fb80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb86:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d802      	bhi.n	800fb94 <find_volume+0x2f0>
 800fb8e:	2301      	movs	r3, #1
 800fb90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb96:	1c9a      	adds	r2, r3, #2
 800fb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800fb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fba0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fba2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fba6:	441a      	add	r2, r3
 800fba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbaa:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800fbac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbb0:	441a      	add	r2, r3
 800fbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800fbb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fbba:	2b03      	cmp	r3, #3
 800fbbc:	d11e      	bne.n	800fbfc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc0:	3330      	adds	r3, #48	; 0x30
 800fbc2:	332a      	adds	r3, #42	; 0x2a
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7fe fc51 	bl	800e46c <ld_word>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d001      	beq.n	800fbd4 <find_volume+0x330>
 800fbd0:	230d      	movs	r3, #13
 800fbd2:	e0a8      	b.n	800fd26 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd6:	891b      	ldrh	r3, [r3, #8]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d001      	beq.n	800fbe0 <find_volume+0x33c>
 800fbdc:	230d      	movs	r3, #13
 800fbde:	e0a2      	b.n	800fd26 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe2:	3330      	adds	r3, #48	; 0x30
 800fbe4:	332c      	adds	r3, #44	; 0x2c
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fe fc58 	bl	800e49c <ld_dword>
 800fbec:	4602      	mov	r2, r0
 800fbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf4:	695b      	ldr	r3, [r3, #20]
 800fbf6:	009b      	lsls	r3, r3, #2
 800fbf8:	647b      	str	r3, [r7, #68]	; 0x44
 800fbfa:	e01f      	b.n	800fc3c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbfe:	891b      	ldrh	r3, [r3, #8]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d101      	bne.n	800fc08 <find_volume+0x364>
 800fc04:	230d      	movs	r3, #13
 800fc06:	e08e      	b.n	800fd26 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0a:	6a1a      	ldr	r2, [r3, #32]
 800fc0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc0e:	441a      	add	r2, r3
 800fc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc12:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fc14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc18:	2b02      	cmp	r3, #2
 800fc1a:	d103      	bne.n	800fc24 <find_volume+0x380>
 800fc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc1e:	695b      	ldr	r3, [r3, #20]
 800fc20:	005b      	lsls	r3, r3, #1
 800fc22:	e00a      	b.n	800fc3a <find_volume+0x396>
 800fc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc26:	695a      	ldr	r2, [r3, #20]
 800fc28:	4613      	mov	r3, r2
 800fc2a:	005b      	lsls	r3, r3, #1
 800fc2c:	4413      	add	r3, r2
 800fc2e:	085a      	lsrs	r2, r3, #1
 800fc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc32:	695b      	ldr	r3, [r3, #20]
 800fc34:	f003 0301 	and.w	r3, r3, #1
 800fc38:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fc3a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc3e:	699a      	ldr	r2, [r3, #24]
 800fc40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc42:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800fc46:	0a5b      	lsrs	r3, r3, #9
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d201      	bcs.n	800fc50 <find_volume+0x3ac>
 800fc4c:	230d      	movs	r3, #13
 800fc4e:	e06a      	b.n	800fd26 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc52:	f04f 32ff 	mov.w	r2, #4294967295
 800fc56:	611a      	str	r2, [r3, #16]
 800fc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc5a:	691a      	ldr	r2, [r3, #16]
 800fc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc5e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800fc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc62:	2280      	movs	r2, #128	; 0x80
 800fc64:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fc66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc6a:	2b03      	cmp	r3, #3
 800fc6c:	d149      	bne.n	800fd02 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc70:	3330      	adds	r3, #48	; 0x30
 800fc72:	3330      	adds	r3, #48	; 0x30
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7fe fbf9 	bl	800e46c <ld_word>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	d140      	bne.n	800fd02 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fc80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc82:	3301      	adds	r3, #1
 800fc84:	4619      	mov	r1, r3
 800fc86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc88:	f7fe fea0 	bl	800e9cc <move_window>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d137      	bne.n	800fd02 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800fc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc94:	2200      	movs	r2, #0
 800fc96:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9a:	3330      	adds	r3, #48	; 0x30
 800fc9c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7fe fbe3 	bl	800e46c <ld_word>
 800fca6:	4603      	mov	r3, r0
 800fca8:	461a      	mov	r2, r3
 800fcaa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d127      	bne.n	800fd02 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb4:	3330      	adds	r3, #48	; 0x30
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fe fbf0 	bl	800e49c <ld_dword>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	4a1c      	ldr	r2, [pc, #112]	; (800fd30 <find_volume+0x48c>)
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	d11e      	bne.n	800fd02 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc6:	3330      	adds	r3, #48	; 0x30
 800fcc8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fccc:	4618      	mov	r0, r3
 800fcce:	f7fe fbe5 	bl	800e49c <ld_dword>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	4a17      	ldr	r2, [pc, #92]	; (800fd34 <find_volume+0x490>)
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	d113      	bne.n	800fd02 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcdc:	3330      	adds	r3, #48	; 0x30
 800fcde:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7fe fbda 	bl	800e49c <ld_dword>
 800fce8:	4602      	mov	r2, r0
 800fcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcec:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf0:	3330      	adds	r3, #48	; 0x30
 800fcf2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7fe fbd0 	bl	800e49c <ld_dword>
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd00:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd04:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fd08:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fd0a:	4b0b      	ldr	r3, [pc, #44]	; (800fd38 <find_volume+0x494>)
 800fd0c:	881b      	ldrh	r3, [r3, #0]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	b29a      	uxth	r2, r3
 800fd12:	4b09      	ldr	r3, [pc, #36]	; (800fd38 <find_volume+0x494>)
 800fd14:	801a      	strh	r2, [r3, #0]
 800fd16:	4b08      	ldr	r3, [pc, #32]	; (800fd38 <find_volume+0x494>)
 800fd18:	881a      	ldrh	r2, [r3, #0]
 800fd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fd1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fd20:	f7fe fdec 	bl	800e8fc <clear_lock>
#endif
	return FR_OK;
 800fd24:	2300      	movs	r3, #0
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3758      	adds	r7, #88	; 0x58
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	41615252 	.word	0x41615252
 800fd34:	61417272 	.word	0x61417272
 800fd38:	200054b8 	.word	0x200054b8

0800fd3c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b084      	sub	sp, #16
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fd46:	2309      	movs	r3, #9
 800fd48:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d01c      	beq.n	800fd8a <validate+0x4e>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d018      	beq.n	800fd8a <validate+0x4e>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	781b      	ldrb	r3, [r3, #0]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d013      	beq.n	800fd8a <validate+0x4e>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	889a      	ldrh	r2, [r3, #4]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	88db      	ldrh	r3, [r3, #6]
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d10c      	bne.n	800fd8a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	785b      	ldrb	r3, [r3, #1]
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7fe fad8 	bl	800e32c <disk_status>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	f003 0301 	and.w	r3, r3, #1
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d101      	bne.n	800fd8a <validate+0x4e>
			res = FR_OK;
 800fd86:	2300      	movs	r3, #0
 800fd88:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fd8a:	7bfb      	ldrb	r3, [r7, #15]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d102      	bne.n	800fd96 <validate+0x5a>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	e000      	b.n	800fd98 <validate+0x5c>
 800fd96:	2300      	movs	r3, #0
 800fd98:	683a      	ldr	r2, [r7, #0]
 800fd9a:	6013      	str	r3, [r2, #0]
	return res;
 800fd9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3710      	adds	r7, #16
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
	...

0800fda8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b088      	sub	sp, #32
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	60f8      	str	r0, [r7, #12]
 800fdb0:	60b9      	str	r1, [r7, #8]
 800fdb2:	4613      	mov	r3, r2
 800fdb4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fdb6:	68bb      	ldr	r3, [r7, #8]
 800fdb8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fdba:	f107 0310 	add.w	r3, r7, #16
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7ff fcd5 	bl	800f76e <get_ldnumber>
 800fdc4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fdc6:	69fb      	ldr	r3, [r7, #28]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	da01      	bge.n	800fdd0 <f_mount+0x28>
 800fdcc:	230b      	movs	r3, #11
 800fdce:	e02b      	b.n	800fe28 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fdd0:	4a17      	ldr	r2, [pc, #92]	; (800fe30 <f_mount+0x88>)
 800fdd2:	69fb      	ldr	r3, [r7, #28]
 800fdd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdd8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fdda:	69bb      	ldr	r3, [r7, #24]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d005      	beq.n	800fdec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fde0:	69b8      	ldr	r0, [r7, #24]
 800fde2:	f7fe fd8b 	bl	800e8fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fde6:	69bb      	ldr	r3, [r7, #24]
 800fde8:	2200      	movs	r2, #0
 800fdea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d002      	beq.n	800fdf8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fdf8:	68fa      	ldr	r2, [r7, #12]
 800fdfa:	490d      	ldr	r1, [pc, #52]	; (800fe30 <f_mount+0x88>)
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d002      	beq.n	800fe0e <f_mount+0x66>
 800fe08:	79fb      	ldrb	r3, [r7, #7]
 800fe0a:	2b01      	cmp	r3, #1
 800fe0c:	d001      	beq.n	800fe12 <f_mount+0x6a>
 800fe0e:	2300      	movs	r3, #0
 800fe10:	e00a      	b.n	800fe28 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fe12:	f107 010c 	add.w	r1, r7, #12
 800fe16:	f107 0308 	add.w	r3, r7, #8
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7ff fd41 	bl	800f8a4 <find_volume>
 800fe22:	4603      	mov	r3, r0
 800fe24:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fe26:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3720      	adds	r7, #32
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	200054b4 	.word	0x200054b4

0800fe34 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b098      	sub	sp, #96	; 0x60
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	60f8      	str	r0, [r7, #12]
 800fe3c:	60b9      	str	r1, [r7, #8]
 800fe3e:	4613      	mov	r3, r2
 800fe40:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d101      	bne.n	800fe4c <f_open+0x18>
 800fe48:	2309      	movs	r3, #9
 800fe4a:	e1ad      	b.n	80101a8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fe4c:	79fb      	ldrb	r3, [r7, #7]
 800fe4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe52:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fe54:	79fa      	ldrb	r2, [r7, #7]
 800fe56:	f107 0110 	add.w	r1, r7, #16
 800fe5a:	f107 0308 	add.w	r3, r7, #8
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f7ff fd20 	bl	800f8a4 <find_volume>
 800fe64:	4603      	mov	r3, r0
 800fe66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800fe6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	f040 8191 	bne.w	8010196 <f_open+0x362>
		dj.obj.fs = fs;
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fe78:	68ba      	ldr	r2, [r7, #8]
 800fe7a:	f107 0314 	add.w	r3, r7, #20
 800fe7e:	4611      	mov	r1, r2
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7ff fc03 	bl	800f68c <follow_path>
 800fe86:	4603      	mov	r3, r0
 800fe88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fe8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d11a      	bne.n	800feca <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fe94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fe98:	b25b      	sxtb	r3, r3
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	da03      	bge.n	800fea6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800fe9e:	2306      	movs	r3, #6
 800fea0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fea4:	e011      	b.n	800feca <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fea6:	79fb      	ldrb	r3, [r7, #7]
 800fea8:	f023 0301 	bic.w	r3, r3, #1
 800feac:	2b00      	cmp	r3, #0
 800feae:	bf14      	ite	ne
 800feb0:	2301      	movne	r3, #1
 800feb2:	2300      	moveq	r3, #0
 800feb4:	b2db      	uxtb	r3, r3
 800feb6:	461a      	mov	r2, r3
 800feb8:	f107 0314 	add.w	r3, r7, #20
 800febc:	4611      	mov	r1, r2
 800febe:	4618      	mov	r0, r3
 800fec0:	f7fe fbd4 	bl	800e66c <chk_lock>
 800fec4:	4603      	mov	r3, r0
 800fec6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800feca:	79fb      	ldrb	r3, [r7, #7]
 800fecc:	f003 031c 	and.w	r3, r3, #28
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d07f      	beq.n	800ffd4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fed4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d017      	beq.n	800ff0c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fedc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fee0:	2b04      	cmp	r3, #4
 800fee2:	d10e      	bne.n	800ff02 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fee4:	f7fe fc1e 	bl	800e724 <enq_lock>
 800fee8:	4603      	mov	r3, r0
 800feea:	2b00      	cmp	r3, #0
 800feec:	d006      	beq.n	800fefc <f_open+0xc8>
 800feee:	f107 0314 	add.w	r3, r7, #20
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7ff fb03 	bl	800f4fe <dir_register>
 800fef8:	4603      	mov	r3, r0
 800fefa:	e000      	b.n	800fefe <f_open+0xca>
 800fefc:	2312      	movs	r3, #18
 800fefe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ff02:	79fb      	ldrb	r3, [r7, #7]
 800ff04:	f043 0308 	orr.w	r3, r3, #8
 800ff08:	71fb      	strb	r3, [r7, #7]
 800ff0a:	e010      	b.n	800ff2e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ff0c:	7ebb      	ldrb	r3, [r7, #26]
 800ff0e:	f003 0311 	and.w	r3, r3, #17
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d003      	beq.n	800ff1e <f_open+0xea>
					res = FR_DENIED;
 800ff16:	2307      	movs	r3, #7
 800ff18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ff1c:	e007      	b.n	800ff2e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ff1e:	79fb      	ldrb	r3, [r7, #7]
 800ff20:	f003 0304 	and.w	r3, r3, #4
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d002      	beq.n	800ff2e <f_open+0xfa>
 800ff28:	2308      	movs	r3, #8
 800ff2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ff2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d168      	bne.n	8010008 <f_open+0x1d4>
 800ff36:	79fb      	ldrb	r3, [r7, #7]
 800ff38:	f003 0308 	and.w	r3, r3, #8
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d063      	beq.n	8010008 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ff40:	f7f9 fbfe 	bl	8009740 <get_fattime>
 800ff44:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ff46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff48:	330e      	adds	r3, #14
 800ff4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7fe fae3 	bl	800e518 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ff52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff54:	3316      	adds	r3, #22
 800ff56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7fe fadd 	bl	800e518 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ff5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff60:	330b      	adds	r3, #11
 800ff62:	2220      	movs	r2, #32
 800ff64:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ff66:	693b      	ldr	r3, [r7, #16]
 800ff68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff6a:	4611      	mov	r1, r2
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7ff fa32 	bl	800f3d6 <ld_clust>
 800ff72:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff78:	2200      	movs	r2, #0
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7ff fa4a 	bl	800f414 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ff80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff82:	331c      	adds	r3, #28
 800ff84:	2100      	movs	r1, #0
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7fe fac6 	bl	800e518 <st_dword>
					fs->wflag = 1;
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	2201      	movs	r2, #1
 800ff90:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ff92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d037      	beq.n	8010008 <f_open+0x1d4>
						dw = fs->winsect;
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff9c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ff9e:	f107 0314 	add.w	r3, r7, #20
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f7fe ff5d 	bl	800ee66 <remove_chain>
 800ffac:	4603      	mov	r3, r0
 800ffae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ffb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d126      	bne.n	8010008 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7fe fd04 	bl	800e9cc <move_window>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ffce:	3a01      	subs	r2, #1
 800ffd0:	60da      	str	r2, [r3, #12]
 800ffd2:	e019      	b.n	8010008 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ffd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d115      	bne.n	8010008 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ffdc:	7ebb      	ldrb	r3, [r7, #26]
 800ffde:	f003 0310 	and.w	r3, r3, #16
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d003      	beq.n	800ffee <f_open+0x1ba>
					res = FR_NO_FILE;
 800ffe6:	2304      	movs	r3, #4
 800ffe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ffec:	e00c      	b.n	8010008 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ffee:	79fb      	ldrb	r3, [r7, #7]
 800fff0:	f003 0302 	and.w	r3, r3, #2
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d007      	beq.n	8010008 <f_open+0x1d4>
 800fff8:	7ebb      	ldrb	r3, [r7, #26]
 800fffa:	f003 0301 	and.w	r3, r3, #1
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d002      	beq.n	8010008 <f_open+0x1d4>
						res = FR_DENIED;
 8010002:	2307      	movs	r3, #7
 8010004:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010008:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801000c:	2b00      	cmp	r3, #0
 801000e:	d128      	bne.n	8010062 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010010:	79fb      	ldrb	r3, [r7, #7]
 8010012:	f003 0308 	and.w	r3, r3, #8
 8010016:	2b00      	cmp	r3, #0
 8010018:	d003      	beq.n	8010022 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801001a:	79fb      	ldrb	r3, [r7, #7]
 801001c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010020:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801002a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010030:	79fb      	ldrb	r3, [r7, #7]
 8010032:	f023 0301 	bic.w	r3, r3, #1
 8010036:	2b00      	cmp	r3, #0
 8010038:	bf14      	ite	ne
 801003a:	2301      	movne	r3, #1
 801003c:	2300      	moveq	r3, #0
 801003e:	b2db      	uxtb	r3, r3
 8010040:	461a      	mov	r2, r3
 8010042:	f107 0314 	add.w	r3, r7, #20
 8010046:	4611      	mov	r1, r2
 8010048:	4618      	mov	r0, r3
 801004a:	f7fe fb8d 	bl	800e768 <inc_lock>
 801004e:	4602      	mov	r2, r0
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	691b      	ldr	r3, [r3, #16]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d102      	bne.n	8010062 <f_open+0x22e>
 801005c:	2302      	movs	r3, #2
 801005e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010062:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010066:	2b00      	cmp	r3, #0
 8010068:	f040 8095 	bne.w	8010196 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010070:	4611      	mov	r1, r2
 8010072:	4618      	mov	r0, r3
 8010074:	f7ff f9af 	bl	800f3d6 <ld_clust>
 8010078:	4602      	mov	r2, r0
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801007e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010080:	331c      	adds	r3, #28
 8010082:	4618      	mov	r0, r3
 8010084:	f7fe fa0a 	bl	800e49c <ld_dword>
 8010088:	4602      	mov	r2, r0
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	2200      	movs	r2, #0
 8010092:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010094:	693a      	ldr	r2, [r7, #16]
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801009a:	693b      	ldr	r3, [r7, #16]
 801009c:	88da      	ldrh	r2, [r3, #6]
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	79fa      	ldrb	r2, [r7, #7]
 80100a6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	2200      	movs	r2, #0
 80100ac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	2200      	movs	r2, #0
 80100b2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	2200      	movs	r2, #0
 80100b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	3330      	adds	r3, #48	; 0x30
 80100be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80100c2:	2100      	movs	r1, #0
 80100c4:	4618      	mov	r0, r3
 80100c6:	f7fe fa74 	bl	800e5b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80100ca:	79fb      	ldrb	r3, [r7, #7]
 80100cc:	f003 0320 	and.w	r3, r3, #32
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d060      	beq.n	8010196 <f_open+0x362>
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	68db      	ldr	r3, [r3, #12]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d05c      	beq.n	8010196 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	68da      	ldr	r2, [r3, #12]
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	895b      	ldrh	r3, [r3, #10]
 80100e8:	025b      	lsls	r3, r3, #9
 80100ea:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	689b      	ldr	r3, [r3, #8]
 80100f0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	68db      	ldr	r3, [r3, #12]
 80100f6:	657b      	str	r3, [r7, #84]	; 0x54
 80100f8:	e016      	b.n	8010128 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80100fe:	4618      	mov	r0, r3
 8010100:	f7fe fd1f 	bl	800eb42 <get_fat>
 8010104:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010108:	2b01      	cmp	r3, #1
 801010a:	d802      	bhi.n	8010112 <f_open+0x2de>
 801010c:	2302      	movs	r3, #2
 801010e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010118:	d102      	bne.n	8010120 <f_open+0x2ec>
 801011a:	2301      	movs	r3, #1
 801011c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010120:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010124:	1ad3      	subs	r3, r2, r3
 8010126:	657b      	str	r3, [r7, #84]	; 0x54
 8010128:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801012c:	2b00      	cmp	r3, #0
 801012e:	d103      	bne.n	8010138 <f_open+0x304>
 8010130:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010134:	429a      	cmp	r2, r3
 8010136:	d8e0      	bhi.n	80100fa <f_open+0x2c6>
				}
				fp->clust = clst;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801013c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801013e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010142:	2b00      	cmp	r3, #0
 8010144:	d127      	bne.n	8010196 <f_open+0x362>
 8010146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801014c:	2b00      	cmp	r3, #0
 801014e:	d022      	beq.n	8010196 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010154:	4618      	mov	r0, r3
 8010156:	f7fe fcd5 	bl	800eb04 <clust2sect>
 801015a:	6478      	str	r0, [r7, #68]	; 0x44
 801015c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801015e:	2b00      	cmp	r3, #0
 8010160:	d103      	bne.n	801016a <f_open+0x336>
						res = FR_INT_ERR;
 8010162:	2302      	movs	r3, #2
 8010164:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010168:	e015      	b.n	8010196 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801016a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801016c:	0a5a      	lsrs	r2, r3, #9
 801016e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010170:	441a      	add	r2, r3
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010176:	693b      	ldr	r3, [r7, #16]
 8010178:	7858      	ldrb	r0, [r3, #1]
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	6a1a      	ldr	r2, [r3, #32]
 8010184:	2301      	movs	r3, #1
 8010186:	f7fe f913 	bl	800e3b0 <disk_read>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d002      	beq.n	8010196 <f_open+0x362>
 8010190:	2301      	movs	r3, #1
 8010192:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010196:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801019a:	2b00      	cmp	r3, #0
 801019c:	d002      	beq.n	80101a4 <f_open+0x370>
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2200      	movs	r2, #0
 80101a2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80101a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3760      	adds	r7, #96	; 0x60
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b08c      	sub	sp, #48	; 0x30
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	60b9      	str	r1, [r7, #8]
 80101ba:	607a      	str	r2, [r7, #4]
 80101bc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	2200      	movs	r2, #0
 80101c6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	f107 0210 	add.w	r2, r7, #16
 80101ce:	4611      	mov	r1, r2
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7ff fdb3 	bl	800fd3c <validate>
 80101d6:	4603      	mov	r3, r0
 80101d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80101dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d107      	bne.n	80101f4 <f_write+0x44>
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	7d5b      	ldrb	r3, [r3, #21]
 80101e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80101ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d002      	beq.n	80101fa <f_write+0x4a>
 80101f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101f8:	e14b      	b.n	8010492 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	7d1b      	ldrb	r3, [r3, #20]
 80101fe:	f003 0302 	and.w	r3, r3, #2
 8010202:	2b00      	cmp	r3, #0
 8010204:	d101      	bne.n	801020a <f_write+0x5a>
 8010206:	2307      	movs	r3, #7
 8010208:	e143      	b.n	8010492 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	699a      	ldr	r2, [r3, #24]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	441a      	add	r2, r3
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	699b      	ldr	r3, [r3, #24]
 8010216:	429a      	cmp	r2, r3
 8010218:	f080 812d 	bcs.w	8010476 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	699b      	ldr	r3, [r3, #24]
 8010220:	43db      	mvns	r3, r3
 8010222:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010224:	e127      	b.n	8010476 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	699b      	ldr	r3, [r3, #24]
 801022a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801022e:	2b00      	cmp	r3, #0
 8010230:	f040 80e3 	bne.w	80103fa <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	699b      	ldr	r3, [r3, #24]
 8010238:	0a5b      	lsrs	r3, r3, #9
 801023a:	693a      	ldr	r2, [r7, #16]
 801023c:	8952      	ldrh	r2, [r2, #10]
 801023e:	3a01      	subs	r2, #1
 8010240:	4013      	ands	r3, r2
 8010242:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010244:	69bb      	ldr	r3, [r7, #24]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d143      	bne.n	80102d2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	699b      	ldr	r3, [r3, #24]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d10c      	bne.n	801026c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	689b      	ldr	r3, [r3, #8]
 8010256:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025a:	2b00      	cmp	r3, #0
 801025c:	d11a      	bne.n	8010294 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	2100      	movs	r1, #0
 8010262:	4618      	mov	r0, r3
 8010264:	f7fe fe64 	bl	800ef30 <create_chain>
 8010268:	62b8      	str	r0, [r7, #40]	; 0x28
 801026a:	e013      	b.n	8010294 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010270:	2b00      	cmp	r3, #0
 8010272:	d007      	beq.n	8010284 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	699b      	ldr	r3, [r3, #24]
 8010278:	4619      	mov	r1, r3
 801027a:	68f8      	ldr	r0, [r7, #12]
 801027c:	f7fe fef0 	bl	800f060 <clmt_clust>
 8010280:	62b8      	str	r0, [r7, #40]	; 0x28
 8010282:	e007      	b.n	8010294 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010284:	68fa      	ldr	r2, [r7, #12]
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	69db      	ldr	r3, [r3, #28]
 801028a:	4619      	mov	r1, r3
 801028c:	4610      	mov	r0, r2
 801028e:	f7fe fe4f 	bl	800ef30 <create_chain>
 8010292:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010296:	2b00      	cmp	r3, #0
 8010298:	f000 80f2 	beq.w	8010480 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801029c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d104      	bne.n	80102ac <f_write+0xfc>
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	2202      	movs	r2, #2
 80102a6:	755a      	strb	r2, [r3, #21]
 80102a8:	2302      	movs	r3, #2
 80102aa:	e0f2      	b.n	8010492 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80102ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102b2:	d104      	bne.n	80102be <f_write+0x10e>
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2201      	movs	r2, #1
 80102b8:	755a      	strb	r2, [r3, #21]
 80102ba:	2301      	movs	r3, #1
 80102bc:	e0e9      	b.n	8010492 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102c2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	689b      	ldr	r3, [r3, #8]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d102      	bne.n	80102d2 <f_write+0x122>
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102d0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	7d1b      	ldrb	r3, [r3, #20]
 80102d6:	b25b      	sxtb	r3, r3
 80102d8:	2b00      	cmp	r3, #0
 80102da:	da18      	bge.n	801030e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	7858      	ldrb	r0, [r3, #1]
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	6a1a      	ldr	r2, [r3, #32]
 80102ea:	2301      	movs	r3, #1
 80102ec:	f7fe f880 	bl	800e3f0 <disk_write>
 80102f0:	4603      	mov	r3, r0
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d004      	beq.n	8010300 <f_write+0x150>
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	2201      	movs	r2, #1
 80102fa:	755a      	strb	r2, [r3, #21]
 80102fc:	2301      	movs	r3, #1
 80102fe:	e0c8      	b.n	8010492 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	7d1b      	ldrb	r3, [r3, #20]
 8010304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010308:	b2da      	uxtb	r2, r3
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801030e:	693a      	ldr	r2, [r7, #16]
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	69db      	ldr	r3, [r3, #28]
 8010314:	4619      	mov	r1, r3
 8010316:	4610      	mov	r0, r2
 8010318:	f7fe fbf4 	bl	800eb04 <clust2sect>
 801031c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d104      	bne.n	801032e <f_write+0x17e>
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2202      	movs	r2, #2
 8010328:	755a      	strb	r2, [r3, #21]
 801032a:	2302      	movs	r3, #2
 801032c:	e0b1      	b.n	8010492 <f_write+0x2e2>
			sect += csect;
 801032e:	697a      	ldr	r2, [r7, #20]
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	4413      	add	r3, r2
 8010334:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	0a5b      	lsrs	r3, r3, #9
 801033a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801033c:	6a3b      	ldr	r3, [r7, #32]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d03c      	beq.n	80103bc <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010342:	69ba      	ldr	r2, [r7, #24]
 8010344:	6a3b      	ldr	r3, [r7, #32]
 8010346:	4413      	add	r3, r2
 8010348:	693a      	ldr	r2, [r7, #16]
 801034a:	8952      	ldrh	r2, [r2, #10]
 801034c:	4293      	cmp	r3, r2
 801034e:	d905      	bls.n	801035c <f_write+0x1ac>
					cc = fs->csize - csect;
 8010350:	693b      	ldr	r3, [r7, #16]
 8010352:	895b      	ldrh	r3, [r3, #10]
 8010354:	461a      	mov	r2, r3
 8010356:	69bb      	ldr	r3, [r7, #24]
 8010358:	1ad3      	subs	r3, r2, r3
 801035a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	7858      	ldrb	r0, [r3, #1]
 8010360:	6a3b      	ldr	r3, [r7, #32]
 8010362:	697a      	ldr	r2, [r7, #20]
 8010364:	69f9      	ldr	r1, [r7, #28]
 8010366:	f7fe f843 	bl	800e3f0 <disk_write>
 801036a:	4603      	mov	r3, r0
 801036c:	2b00      	cmp	r3, #0
 801036e:	d004      	beq.n	801037a <f_write+0x1ca>
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	2201      	movs	r2, #1
 8010374:	755a      	strb	r2, [r3, #21]
 8010376:	2301      	movs	r3, #1
 8010378:	e08b      	b.n	8010492 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	6a1a      	ldr	r2, [r3, #32]
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	1ad3      	subs	r3, r2, r3
 8010382:	6a3a      	ldr	r2, [r7, #32]
 8010384:	429a      	cmp	r2, r3
 8010386:	d915      	bls.n	80103b4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	6a1a      	ldr	r2, [r3, #32]
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	1ad3      	subs	r3, r2, r3
 8010396:	025b      	lsls	r3, r3, #9
 8010398:	69fa      	ldr	r2, [r7, #28]
 801039a:	4413      	add	r3, r2
 801039c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80103a0:	4619      	mov	r1, r3
 80103a2:	f7fe f8e5 	bl	800e570 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	7d1b      	ldrb	r3, [r3, #20]
 80103aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103ae:	b2da      	uxtb	r2, r3
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80103b4:	6a3b      	ldr	r3, [r7, #32]
 80103b6:	025b      	lsls	r3, r3, #9
 80103b8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80103ba:	e03f      	b.n	801043c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	6a1b      	ldr	r3, [r3, #32]
 80103c0:	697a      	ldr	r2, [r7, #20]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d016      	beq.n	80103f4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	699a      	ldr	r2, [r3, #24]
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80103ce:	429a      	cmp	r2, r3
 80103d0:	d210      	bcs.n	80103f4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	7858      	ldrb	r0, [r3, #1]
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103dc:	2301      	movs	r3, #1
 80103de:	697a      	ldr	r2, [r7, #20]
 80103e0:	f7fd ffe6 	bl	800e3b0 <disk_read>
 80103e4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d004      	beq.n	80103f4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	2201      	movs	r2, #1
 80103ee:	755a      	strb	r2, [r3, #21]
 80103f0:	2301      	movs	r3, #1
 80103f2:	e04e      	b.n	8010492 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	697a      	ldr	r2, [r7, #20]
 80103f8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	699b      	ldr	r3, [r3, #24]
 80103fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010402:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010406:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	429a      	cmp	r2, r3
 801040e:	d901      	bls.n	8010414 <f_write+0x264>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	699b      	ldr	r3, [r3, #24]
 801041e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010422:	4413      	add	r3, r2
 8010424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010426:	69f9      	ldr	r1, [r7, #28]
 8010428:	4618      	mov	r0, r3
 801042a:	f7fe f8a1 	bl	800e570 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	7d1b      	ldrb	r3, [r3, #20]
 8010432:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010436:	b2da      	uxtb	r2, r3
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801043c:	69fa      	ldr	r2, [r7, #28]
 801043e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010440:	4413      	add	r3, r2
 8010442:	61fb      	str	r3, [r7, #28]
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	699a      	ldr	r2, [r3, #24]
 8010448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801044a:	441a      	add	r2, r3
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	619a      	str	r2, [r3, #24]
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	68da      	ldr	r2, [r3, #12]
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	699b      	ldr	r3, [r3, #24]
 8010458:	429a      	cmp	r2, r3
 801045a:	bf38      	it	cc
 801045c:	461a      	movcc	r2, r3
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	60da      	str	r2, [r3, #12]
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010468:	441a      	add	r2, r3
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	601a      	str	r2, [r3, #0]
 801046e:	687a      	ldr	r2, [r7, #4]
 8010470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010472:	1ad3      	subs	r3, r2, r3
 8010474:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2b00      	cmp	r3, #0
 801047a:	f47f aed4 	bne.w	8010226 <f_write+0x76>
 801047e:	e000      	b.n	8010482 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010480:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	7d1b      	ldrb	r3, [r3, #20]
 8010486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801048a:	b2da      	uxtb	r2, r3
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010490:	2300      	movs	r3, #0
}
 8010492:	4618      	mov	r0, r3
 8010494:	3730      	adds	r7, #48	; 0x30
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}

0801049a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801049a:	b580      	push	{r7, lr}
 801049c:	b086      	sub	sp, #24
 801049e:	af00      	add	r7, sp, #0
 80104a0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f107 0208 	add.w	r2, r7, #8
 80104a8:	4611      	mov	r1, r2
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7ff fc46 	bl	800fd3c <validate>
 80104b0:	4603      	mov	r3, r0
 80104b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80104b4:	7dfb      	ldrb	r3, [r7, #23]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d168      	bne.n	801058c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	7d1b      	ldrb	r3, [r3, #20]
 80104be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d062      	beq.n	801058c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	7d1b      	ldrb	r3, [r3, #20]
 80104ca:	b25b      	sxtb	r3, r3
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	da15      	bge.n	80104fc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	7858      	ldrb	r0, [r3, #1]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6a1a      	ldr	r2, [r3, #32]
 80104de:	2301      	movs	r3, #1
 80104e0:	f7fd ff86 	bl	800e3f0 <disk_write>
 80104e4:	4603      	mov	r3, r0
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d001      	beq.n	80104ee <f_sync+0x54>
 80104ea:	2301      	movs	r3, #1
 80104ec:	e04f      	b.n	801058e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	7d1b      	ldrb	r3, [r3, #20]
 80104f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104f6:	b2da      	uxtb	r2, r3
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80104fc:	f7f9 f920 	bl	8009740 <get_fattime>
 8010500:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010502:	68ba      	ldr	r2, [r7, #8]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010508:	4619      	mov	r1, r3
 801050a:	4610      	mov	r0, r2
 801050c:	f7fe fa5e 	bl	800e9cc <move_window>
 8010510:	4603      	mov	r3, r0
 8010512:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010514:	7dfb      	ldrb	r3, [r7, #23]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d138      	bne.n	801058c <f_sync+0xf2>
					dir = fp->dir_ptr;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801051e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	330b      	adds	r3, #11
 8010524:	781a      	ldrb	r2, [r3, #0]
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	330b      	adds	r3, #11
 801052a:	f042 0220 	orr.w	r2, r2, #32
 801052e:	b2d2      	uxtb	r2, r2
 8010530:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6818      	ldr	r0, [r3, #0]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	689b      	ldr	r3, [r3, #8]
 801053a:	461a      	mov	r2, r3
 801053c:	68f9      	ldr	r1, [r7, #12]
 801053e:	f7fe ff69 	bl	800f414 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	f103 021c 	add.w	r2, r3, #28
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	68db      	ldr	r3, [r3, #12]
 801054c:	4619      	mov	r1, r3
 801054e:	4610      	mov	r0, r2
 8010550:	f7fd ffe2 	bl	800e518 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	3316      	adds	r3, #22
 8010558:	6939      	ldr	r1, [r7, #16]
 801055a:	4618      	mov	r0, r3
 801055c:	f7fd ffdc 	bl	800e518 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	3312      	adds	r3, #18
 8010564:	2100      	movs	r1, #0
 8010566:	4618      	mov	r0, r3
 8010568:	f7fd ffbb 	bl	800e4e2 <st_word>
					fs->wflag = 1;
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	2201      	movs	r2, #1
 8010570:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	4618      	mov	r0, r3
 8010576:	f7fe fa57 	bl	800ea28 <sync_fs>
 801057a:	4603      	mov	r3, r0
 801057c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	7d1b      	ldrb	r3, [r3, #20]
 8010582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010586:	b2da      	uxtb	r2, r3
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801058c:	7dfb      	ldrb	r3, [r7, #23]
}
 801058e:	4618      	mov	r0, r3
 8010590:	3718      	adds	r7, #24
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}

08010596 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010596:	b580      	push	{r7, lr}
 8010598:	b084      	sub	sp, #16
 801059a:	af00      	add	r7, sp, #0
 801059c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f7ff ff7b 	bl	801049a <f_sync>
 80105a4:	4603      	mov	r3, r0
 80105a6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80105a8:	7bfb      	ldrb	r3, [r7, #15]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d118      	bne.n	80105e0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f107 0208 	add.w	r2, r7, #8
 80105b4:	4611      	mov	r1, r2
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7ff fbc0 	bl	800fd3c <validate>
 80105bc:	4603      	mov	r3, r0
 80105be:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80105c0:	7bfb      	ldrb	r3, [r7, #15]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d10c      	bne.n	80105e0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	691b      	ldr	r3, [r3, #16]
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7fe f95a 	bl	800e884 <dec_lock>
 80105d0:	4603      	mov	r3, r0
 80105d2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80105d4:	7bfb      	ldrb	r3, [r7, #15]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d102      	bne.n	80105e0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2200      	movs	r2, #0
 80105de:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80105e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3710      	adds	r7, #16
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
	...

080105ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b087      	sub	sp, #28
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	4613      	mov	r3, r2
 80105f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80105fa:	2301      	movs	r3, #1
 80105fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80105fe:	2300      	movs	r3, #0
 8010600:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr <= _VOLUMES)
 8010602:	4b1f      	ldr	r3, [pc, #124]	; (8010680 <FATFS_LinkDriverEx+0x94>)
 8010604:	7a5b      	ldrb	r3, [r3, #9]
 8010606:	b2db      	uxtb	r3, r3
 8010608:	2b01      	cmp	r3, #1
 801060a:	d831      	bhi.n	8010670 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801060c:	4b1c      	ldr	r3, [pc, #112]	; (8010680 <FATFS_LinkDriverEx+0x94>)
 801060e:	7a5b      	ldrb	r3, [r3, #9]
 8010610:	b2db      	uxtb	r3, r3
 8010612:	461a      	mov	r2, r3
 8010614:	4b1a      	ldr	r3, [pc, #104]	; (8010680 <FATFS_LinkDriverEx+0x94>)
 8010616:	2100      	movs	r1, #0
 8010618:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801061a:	4b19      	ldr	r3, [pc, #100]	; (8010680 <FATFS_LinkDriverEx+0x94>)
 801061c:	7a5b      	ldrb	r3, [r3, #9]
 801061e:	b2db      	uxtb	r3, r3
 8010620:	4a17      	ldr	r2, [pc, #92]	; (8010680 <FATFS_LinkDriverEx+0x94>)
 8010622:	009b      	lsls	r3, r3, #2
 8010624:	4413      	add	r3, r2
 8010626:	68fa      	ldr	r2, [r7, #12]
 8010628:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801062a:	4b15      	ldr	r3, [pc, #84]	; (8010680 <FATFS_LinkDriverEx+0x94>)
 801062c:	7a5b      	ldrb	r3, [r3, #9]
 801062e:	b2db      	uxtb	r3, r3
 8010630:	461a      	mov	r2, r3
 8010632:	4b13      	ldr	r3, [pc, #76]	; (8010680 <FATFS_LinkDriverEx+0x94>)
 8010634:	4413      	add	r3, r2
 8010636:	79fa      	ldrb	r2, [r7, #7]
 8010638:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801063a:	4b11      	ldr	r3, [pc, #68]	; (8010680 <FATFS_LinkDriverEx+0x94>)
 801063c:	7a5b      	ldrb	r3, [r3, #9]
 801063e:	b2db      	uxtb	r3, r3
 8010640:	1c5a      	adds	r2, r3, #1
 8010642:	b2d1      	uxtb	r1, r2
 8010644:	4a0e      	ldr	r2, [pc, #56]	; (8010680 <FATFS_LinkDriverEx+0x94>)
 8010646:	7251      	strb	r1, [r2, #9]
 8010648:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801064a:	7dbb      	ldrb	r3, [r7, #22]
 801064c:	3330      	adds	r3, #48	; 0x30
 801064e:	b2da      	uxtb	r2, r3
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	3301      	adds	r3, #1
 8010658:	223a      	movs	r2, #58	; 0x3a
 801065a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	3302      	adds	r3, #2
 8010660:	222f      	movs	r2, #47	; 0x2f
 8010662:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	3303      	adds	r3, #3
 8010668:	2200      	movs	r2, #0
 801066a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801066c:	2300      	movs	r3, #0
 801066e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010670:	7dfb      	ldrb	r3, [r7, #23]
}
 8010672:	4618      	mov	r0, r3
 8010674:	371c      	adds	r7, #28
 8010676:	46bd      	mov	sp, r7
 8010678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067c:	4770      	bx	lr
 801067e:	bf00      	nop
 8010680:	200054dc 	.word	0x200054dc

08010684 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b082      	sub	sp, #8
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801068e:	2200      	movs	r2, #0
 8010690:	6839      	ldr	r1, [r7, #0]
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f7ff ffaa 	bl	80105ec <FATFS_LinkDriverEx>
 8010698:	4603      	mov	r3, r0
}
 801069a:	4618      	mov	r0, r3
 801069c:	3708      	adds	r7, #8
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}

080106a2 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80106a2:	b480      	push	{r7}
 80106a4:	b083      	sub	sp, #12
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	4603      	mov	r3, r0
 80106aa:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80106ac:	88fb      	ldrh	r3, [r7, #6]
 80106ae:	021b      	lsls	r3, r3, #8
 80106b0:	b21a      	sxth	r2, r3
 80106b2:	88fb      	ldrh	r3, [r7, #6]
 80106b4:	0a1b      	lsrs	r3, r3, #8
 80106b6:	b29b      	uxth	r3, r3
 80106b8:	b21b      	sxth	r3, r3
 80106ba:	4313      	orrs	r3, r2
 80106bc:	b21b      	sxth	r3, r3
 80106be:	b29b      	uxth	r3, r3
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	370c      	adds	r7, #12
 80106c4:	46bd      	mov	sp, r7
 80106c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ca:	4770      	bx	lr

080106cc <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80106cc:	b480      	push	{r7}
 80106ce:	b083      	sub	sp, #12
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	061a      	lsls	r2, r3, #24
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	021b      	lsls	r3, r3, #8
 80106dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80106e0:	431a      	orrs	r2, r3
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	0a1b      	lsrs	r3, r3, #8
 80106e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80106ea:	431a      	orrs	r2, r3
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	0e1b      	lsrs	r3, r3, #24
 80106f0:	4313      	orrs	r3, r2
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	370c      	adds	r7, #12
 80106f6:	46bd      	mov	sp, r7
 80106f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fc:	4770      	bx	lr

080106fe <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80106fe:	b580      	push	{r7, lr}
 8010700:	b082      	sub	sp, #8
 8010702:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010704:	2300      	movs	r3, #0
 8010706:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8010708:	f000 f8d4 	bl	80108b4 <mem_init>
  memp_init();
 801070c:	f000 fbda 	bl	8010ec4 <memp_init>
  pbuf_init();
  netif_init();
 8010710:	f000 fcd8 	bl	80110c4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010714:	f007 f854 	bl	80177c0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010718:	f001 fdae 	bl	8012278 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801071c:	f006 ffc6 	bl	80176ac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010720:	bf00      	nop
 8010722:	3708      	adds	r7, #8
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}

08010728 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010728:	b480      	push	{r7}
 801072a:	b083      	sub	sp, #12
 801072c:	af00      	add	r7, sp, #0
 801072e:	4603      	mov	r3, r0
 8010730:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010732:	4b05      	ldr	r3, [pc, #20]	; (8010748 <ptr_to_mem+0x20>)
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	88fb      	ldrh	r3, [r7, #6]
 8010738:	4413      	add	r3, r2
}
 801073a:	4618      	mov	r0, r3
 801073c:	370c      	adds	r7, #12
 801073e:	46bd      	mov	sp, r7
 8010740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010744:	4770      	bx	lr
 8010746:	bf00      	nop
 8010748:	20005b54 	.word	0x20005b54

0801074c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801074c:	b480      	push	{r7}
 801074e:	b083      	sub	sp, #12
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010754:	4b05      	ldr	r3, [pc, #20]	; (801076c <mem_to_ptr+0x20>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	687a      	ldr	r2, [r7, #4]
 801075a:	1ad3      	subs	r3, r2, r3
 801075c:	b29b      	uxth	r3, r3
}
 801075e:	4618      	mov	r0, r3
 8010760:	370c      	adds	r7, #12
 8010762:	46bd      	mov	sp, r7
 8010764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010768:	4770      	bx	lr
 801076a:	bf00      	nop
 801076c:	20005b54 	.word	0x20005b54

08010770 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010770:	b590      	push	{r4, r7, lr}
 8010772:	b085      	sub	sp, #20
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010778:	4b45      	ldr	r3, [pc, #276]	; (8010890 <plug_holes+0x120>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	687a      	ldr	r2, [r7, #4]
 801077e:	429a      	cmp	r2, r3
 8010780:	d206      	bcs.n	8010790 <plug_holes+0x20>
 8010782:	4b44      	ldr	r3, [pc, #272]	; (8010894 <plug_holes+0x124>)
 8010784:	f240 12df 	movw	r2, #479	; 0x1df
 8010788:	4943      	ldr	r1, [pc, #268]	; (8010898 <plug_holes+0x128>)
 801078a:	4844      	ldr	r0, [pc, #272]	; (801089c <plug_holes+0x12c>)
 801078c:	f00a fc6a 	bl	801b064 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010790:	4b43      	ldr	r3, [pc, #268]	; (80108a0 <plug_holes+0x130>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	429a      	cmp	r2, r3
 8010798:	d306      	bcc.n	80107a8 <plug_holes+0x38>
 801079a:	4b3e      	ldr	r3, [pc, #248]	; (8010894 <plug_holes+0x124>)
 801079c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80107a0:	4940      	ldr	r1, [pc, #256]	; (80108a4 <plug_holes+0x134>)
 80107a2:	483e      	ldr	r0, [pc, #248]	; (801089c <plug_holes+0x12c>)
 80107a4:	f00a fc5e 	bl	801b064 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	791b      	ldrb	r3, [r3, #4]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d006      	beq.n	80107be <plug_holes+0x4e>
 80107b0:	4b38      	ldr	r3, [pc, #224]	; (8010894 <plug_holes+0x124>)
 80107b2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80107b6:	493c      	ldr	r1, [pc, #240]	; (80108a8 <plug_holes+0x138>)
 80107b8:	4838      	ldr	r0, [pc, #224]	; (801089c <plug_holes+0x12c>)
 80107ba:	f00a fc53 	bl	801b064 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	881b      	ldrh	r3, [r3, #0]
 80107c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80107c6:	d906      	bls.n	80107d6 <plug_holes+0x66>
 80107c8:	4b32      	ldr	r3, [pc, #200]	; (8010894 <plug_holes+0x124>)
 80107ca:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80107ce:	4937      	ldr	r1, [pc, #220]	; (80108ac <plug_holes+0x13c>)
 80107d0:	4832      	ldr	r0, [pc, #200]	; (801089c <plug_holes+0x12c>)
 80107d2:	f00a fc47 	bl	801b064 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	881b      	ldrh	r3, [r3, #0]
 80107da:	4618      	mov	r0, r3
 80107dc:	f7ff ffa4 	bl	8010728 <ptr_to_mem>
 80107e0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80107e2:	687a      	ldr	r2, [r7, #4]
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d024      	beq.n	8010834 <plug_holes+0xc4>
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	791b      	ldrb	r3, [r3, #4]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d120      	bne.n	8010834 <plug_holes+0xc4>
 80107f2:	4b2b      	ldr	r3, [pc, #172]	; (80108a0 <plug_holes+0x130>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	68fa      	ldr	r2, [r7, #12]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d01b      	beq.n	8010834 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80107fc:	4b2c      	ldr	r3, [pc, #176]	; (80108b0 <plug_holes+0x140>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	68fa      	ldr	r2, [r7, #12]
 8010802:	429a      	cmp	r2, r3
 8010804:	d102      	bne.n	801080c <plug_holes+0x9c>
      lfree = mem;
 8010806:	4a2a      	ldr	r2, [pc, #168]	; (80108b0 <plug_holes+0x140>)
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	881a      	ldrh	r2, [r3, #0]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	881b      	ldrh	r3, [r3, #0]
 8010818:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801081c:	d00a      	beq.n	8010834 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	881b      	ldrh	r3, [r3, #0]
 8010822:	4618      	mov	r0, r3
 8010824:	f7ff ff80 	bl	8010728 <ptr_to_mem>
 8010828:	4604      	mov	r4, r0
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	f7ff ff8e 	bl	801074c <mem_to_ptr>
 8010830:	4603      	mov	r3, r0
 8010832:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	885b      	ldrh	r3, [r3, #2]
 8010838:	4618      	mov	r0, r3
 801083a:	f7ff ff75 	bl	8010728 <ptr_to_mem>
 801083e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010840:	68ba      	ldr	r2, [r7, #8]
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	429a      	cmp	r2, r3
 8010846:	d01f      	beq.n	8010888 <plug_holes+0x118>
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	791b      	ldrb	r3, [r3, #4]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d11b      	bne.n	8010888 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010850:	4b17      	ldr	r3, [pc, #92]	; (80108b0 <plug_holes+0x140>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	687a      	ldr	r2, [r7, #4]
 8010856:	429a      	cmp	r2, r3
 8010858:	d102      	bne.n	8010860 <plug_holes+0xf0>
      lfree = pmem;
 801085a:	4a15      	ldr	r2, [pc, #84]	; (80108b0 <plug_holes+0x140>)
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	881a      	ldrh	r2, [r3, #0]
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	881b      	ldrh	r3, [r3, #0]
 801086c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010870:	d00a      	beq.n	8010888 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	881b      	ldrh	r3, [r3, #0]
 8010876:	4618      	mov	r0, r3
 8010878:	f7ff ff56 	bl	8010728 <ptr_to_mem>
 801087c:	4604      	mov	r4, r0
 801087e:	68b8      	ldr	r0, [r7, #8]
 8010880:	f7ff ff64 	bl	801074c <mem_to_ptr>
 8010884:	4603      	mov	r3, r0
 8010886:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010888:	bf00      	nop
 801088a:	3714      	adds	r7, #20
 801088c:	46bd      	mov	sp, r7
 801088e:	bd90      	pop	{r4, r7, pc}
 8010890:	20005b54 	.word	0x20005b54
 8010894:	0801bf58 	.word	0x0801bf58
 8010898:	0801bf88 	.word	0x0801bf88
 801089c:	0801bfa0 	.word	0x0801bfa0
 80108a0:	20005b58 	.word	0x20005b58
 80108a4:	0801bfc8 	.word	0x0801bfc8
 80108a8:	0801bfe4 	.word	0x0801bfe4
 80108ac:	0801c000 	.word	0x0801c000
 80108b0:	20005b5c 	.word	0x20005b5c

080108b4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b082      	sub	sp, #8
 80108b8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80108ba:	4b18      	ldr	r3, [pc, #96]	; (801091c <mem_init+0x68>)
 80108bc:	3303      	adds	r3, #3
 80108be:	f023 0303 	bic.w	r3, r3, #3
 80108c2:	461a      	mov	r2, r3
 80108c4:	4b16      	ldr	r3, [pc, #88]	; (8010920 <mem_init+0x6c>)
 80108c6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80108c8:	4b15      	ldr	r3, [pc, #84]	; (8010920 <mem_init+0x6c>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80108d4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2200      	movs	r2, #0
 80108da:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2200      	movs	r2, #0
 80108e0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80108e2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80108e6:	f7ff ff1f 	bl	8010728 <ptr_to_mem>
 80108ea:	4603      	mov	r3, r0
 80108ec:	4a0d      	ldr	r2, [pc, #52]	; (8010924 <mem_init+0x70>)
 80108ee:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80108f0:	4b0c      	ldr	r3, [pc, #48]	; (8010924 <mem_init+0x70>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	2201      	movs	r2, #1
 80108f6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80108f8:	4b0a      	ldr	r3, [pc, #40]	; (8010924 <mem_init+0x70>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010900:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010902:	4b08      	ldr	r3, [pc, #32]	; (8010924 <mem_init+0x70>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801090a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801090c:	4b04      	ldr	r3, [pc, #16]	; (8010920 <mem_init+0x6c>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4a05      	ldr	r2, [pc, #20]	; (8010928 <mem_init+0x74>)
 8010912:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8010914:	bf00      	nop
 8010916:	3708      	adds	r7, #8
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}
 801091c:	20005500 	.word	0x20005500
 8010920:	20005b54 	.word	0x20005b54
 8010924:	20005b58 	.word	0x20005b58
 8010928:	20005b5c 	.word	0x20005b5c

0801092c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b086      	sub	sp, #24
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	f7ff ff09 	bl	801074c <mem_to_ptr>
 801093a:	4603      	mov	r3, r0
 801093c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	881b      	ldrh	r3, [r3, #0]
 8010942:	4618      	mov	r0, r3
 8010944:	f7ff fef0 	bl	8010728 <ptr_to_mem>
 8010948:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	885b      	ldrh	r3, [r3, #2]
 801094e:	4618      	mov	r0, r3
 8010950:	f7ff feea 	bl	8010728 <ptr_to_mem>
 8010954:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	881b      	ldrh	r3, [r3, #0]
 801095a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801095e:	d818      	bhi.n	8010992 <mem_link_valid+0x66>
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	885b      	ldrh	r3, [r3, #2]
 8010964:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010968:	d813      	bhi.n	8010992 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801096e:	8afa      	ldrh	r2, [r7, #22]
 8010970:	429a      	cmp	r2, r3
 8010972:	d004      	beq.n	801097e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	881b      	ldrh	r3, [r3, #0]
 8010978:	8afa      	ldrh	r2, [r7, #22]
 801097a:	429a      	cmp	r2, r3
 801097c:	d109      	bne.n	8010992 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801097e:	4b08      	ldr	r3, [pc, #32]	; (80109a0 <mem_link_valid+0x74>)
 8010980:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010982:	693a      	ldr	r2, [r7, #16]
 8010984:	429a      	cmp	r2, r3
 8010986:	d006      	beq.n	8010996 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	885b      	ldrh	r3, [r3, #2]
 801098c:	8afa      	ldrh	r2, [r7, #22]
 801098e:	429a      	cmp	r2, r3
 8010990:	d001      	beq.n	8010996 <mem_link_valid+0x6a>
    return 0;
 8010992:	2300      	movs	r3, #0
 8010994:	e000      	b.n	8010998 <mem_link_valid+0x6c>
  }
  return 1;
 8010996:	2301      	movs	r3, #1
}
 8010998:	4618      	mov	r0, r3
 801099a:	3718      	adds	r7, #24
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	20005b58 	.word	0x20005b58

080109a4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b084      	sub	sp, #16
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d04c      	beq.n	8010a4c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f003 0303 	and.w	r3, r3, #3
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d007      	beq.n	80109cc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80109bc:	4b25      	ldr	r3, [pc, #148]	; (8010a54 <mem_free+0xb0>)
 80109be:	f240 2273 	movw	r2, #627	; 0x273
 80109c2:	4925      	ldr	r1, [pc, #148]	; (8010a58 <mem_free+0xb4>)
 80109c4:	4825      	ldr	r0, [pc, #148]	; (8010a5c <mem_free+0xb8>)
 80109c6:	f00a fb4d 	bl	801b064 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80109ca:	e040      	b.n	8010a4e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	3b08      	subs	r3, #8
 80109d0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80109d2:	4b23      	ldr	r3, [pc, #140]	; (8010a60 <mem_free+0xbc>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	68fa      	ldr	r2, [r7, #12]
 80109d8:	429a      	cmp	r2, r3
 80109da:	d306      	bcc.n	80109ea <mem_free+0x46>
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f103 020c 	add.w	r2, r3, #12
 80109e2:	4b20      	ldr	r3, [pc, #128]	; (8010a64 <mem_free+0xc0>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	429a      	cmp	r2, r3
 80109e8:	d907      	bls.n	80109fa <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80109ea:	4b1a      	ldr	r3, [pc, #104]	; (8010a54 <mem_free+0xb0>)
 80109ec:	f240 227f 	movw	r2, #639	; 0x27f
 80109f0:	491d      	ldr	r1, [pc, #116]	; (8010a68 <mem_free+0xc4>)
 80109f2:	481a      	ldr	r0, [pc, #104]	; (8010a5c <mem_free+0xb8>)
 80109f4:	f00a fb36 	bl	801b064 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80109f8:	e029      	b.n	8010a4e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	791b      	ldrb	r3, [r3, #4]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d107      	bne.n	8010a12 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010a02:	4b14      	ldr	r3, [pc, #80]	; (8010a54 <mem_free+0xb0>)
 8010a04:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8010a08:	4918      	ldr	r1, [pc, #96]	; (8010a6c <mem_free+0xc8>)
 8010a0a:	4814      	ldr	r0, [pc, #80]	; (8010a5c <mem_free+0xb8>)
 8010a0c:	f00a fb2a 	bl	801b064 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010a10:	e01d      	b.n	8010a4e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8010a12:	68f8      	ldr	r0, [r7, #12]
 8010a14:	f7ff ff8a 	bl	801092c <mem_link_valid>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d107      	bne.n	8010a2e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8010a1e:	4b0d      	ldr	r3, [pc, #52]	; (8010a54 <mem_free+0xb0>)
 8010a20:	f240 2295 	movw	r2, #661	; 0x295
 8010a24:	4912      	ldr	r1, [pc, #72]	; (8010a70 <mem_free+0xcc>)
 8010a26:	480d      	ldr	r0, [pc, #52]	; (8010a5c <mem_free+0xb8>)
 8010a28:	f00a fb1c 	bl	801b064 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010a2c:	e00f      	b.n	8010a4e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	2200      	movs	r2, #0
 8010a32:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010a34:	4b0f      	ldr	r3, [pc, #60]	; (8010a74 <mem_free+0xd0>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	68fa      	ldr	r2, [r7, #12]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d202      	bcs.n	8010a44 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010a3e:	4a0d      	ldr	r2, [pc, #52]	; (8010a74 <mem_free+0xd0>)
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010a44:	68f8      	ldr	r0, [r7, #12]
 8010a46:	f7ff fe93 	bl	8010770 <plug_holes>
 8010a4a:	e000      	b.n	8010a4e <mem_free+0xaa>
    return;
 8010a4c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8010a4e:	3710      	adds	r7, #16
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}
 8010a54:	0801bf58 	.word	0x0801bf58
 8010a58:	0801c02c 	.word	0x0801c02c
 8010a5c:	0801bfa0 	.word	0x0801bfa0
 8010a60:	20005b54 	.word	0x20005b54
 8010a64:	20005b58 	.word	0x20005b58
 8010a68:	0801c050 	.word	0x0801c050
 8010a6c:	0801c06c 	.word	0x0801c06c
 8010a70:	0801c094 	.word	0x0801c094
 8010a74:	20005b5c 	.word	0x20005b5c

08010a78 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b088      	sub	sp, #32
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	460b      	mov	r3, r1
 8010a82:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010a84:	887b      	ldrh	r3, [r7, #2]
 8010a86:	3303      	adds	r3, #3
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	f023 0303 	bic.w	r3, r3, #3
 8010a8e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010a90:	8bfb      	ldrh	r3, [r7, #30]
 8010a92:	2b0b      	cmp	r3, #11
 8010a94:	d801      	bhi.n	8010a9a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8010a96:	230c      	movs	r3, #12
 8010a98:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010a9a:	8bfb      	ldrh	r3, [r7, #30]
 8010a9c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010aa0:	d803      	bhi.n	8010aaa <mem_trim+0x32>
 8010aa2:	8bfa      	ldrh	r2, [r7, #30]
 8010aa4:	887b      	ldrh	r3, [r7, #2]
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d201      	bcs.n	8010aae <mem_trim+0x36>
    return NULL;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	e0cc      	b.n	8010c48 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010aae:	4b68      	ldr	r3, [pc, #416]	; (8010c50 <mem_trim+0x1d8>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	687a      	ldr	r2, [r7, #4]
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d304      	bcc.n	8010ac2 <mem_trim+0x4a>
 8010ab8:	4b66      	ldr	r3, [pc, #408]	; (8010c54 <mem_trim+0x1dc>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	687a      	ldr	r2, [r7, #4]
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d306      	bcc.n	8010ad0 <mem_trim+0x58>
 8010ac2:	4b65      	ldr	r3, [pc, #404]	; (8010c58 <mem_trim+0x1e0>)
 8010ac4:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010ac8:	4964      	ldr	r1, [pc, #400]	; (8010c5c <mem_trim+0x1e4>)
 8010aca:	4865      	ldr	r0, [pc, #404]	; (8010c60 <mem_trim+0x1e8>)
 8010acc:	f00a faca 	bl	801b064 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010ad0:	4b5f      	ldr	r3, [pc, #380]	; (8010c50 <mem_trim+0x1d8>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	687a      	ldr	r2, [r7, #4]
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d304      	bcc.n	8010ae4 <mem_trim+0x6c>
 8010ada:	4b5e      	ldr	r3, [pc, #376]	; (8010c54 <mem_trim+0x1dc>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	687a      	ldr	r2, [r7, #4]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d301      	bcc.n	8010ae8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	e0af      	b.n	8010c48 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	3b08      	subs	r3, #8
 8010aec:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010aee:	69b8      	ldr	r0, [r7, #24]
 8010af0:	f7ff fe2c 	bl	801074c <mem_to_ptr>
 8010af4:	4603      	mov	r3, r0
 8010af6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010af8:	69bb      	ldr	r3, [r7, #24]
 8010afa:	881a      	ldrh	r2, [r3, #0]
 8010afc:	8afb      	ldrh	r3, [r7, #22]
 8010afe:	1ad3      	subs	r3, r2, r3
 8010b00:	b29b      	uxth	r3, r3
 8010b02:	3b08      	subs	r3, #8
 8010b04:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010b06:	8bfa      	ldrh	r2, [r7, #30]
 8010b08:	8abb      	ldrh	r3, [r7, #20]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d906      	bls.n	8010b1c <mem_trim+0xa4>
 8010b0e:	4b52      	ldr	r3, [pc, #328]	; (8010c58 <mem_trim+0x1e0>)
 8010b10:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8010b14:	4953      	ldr	r1, [pc, #332]	; (8010c64 <mem_trim+0x1ec>)
 8010b16:	4852      	ldr	r0, [pc, #328]	; (8010c60 <mem_trim+0x1e8>)
 8010b18:	f00a faa4 	bl	801b064 <iprintf>
  if (newsize > size) {
 8010b1c:	8bfa      	ldrh	r2, [r7, #30]
 8010b1e:	8abb      	ldrh	r3, [r7, #20]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d901      	bls.n	8010b28 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8010b24:	2300      	movs	r3, #0
 8010b26:	e08f      	b.n	8010c48 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8010b28:	8bfa      	ldrh	r2, [r7, #30]
 8010b2a:	8abb      	ldrh	r3, [r7, #20]
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d101      	bne.n	8010b34 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	e089      	b.n	8010c48 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8010b34:	69bb      	ldr	r3, [r7, #24]
 8010b36:	881b      	ldrh	r3, [r3, #0]
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f7ff fdf5 	bl	8010728 <ptr_to_mem>
 8010b3e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010b40:	693b      	ldr	r3, [r7, #16]
 8010b42:	791b      	ldrb	r3, [r3, #4]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d13f      	bne.n	8010bc8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010b48:	69bb      	ldr	r3, [r7, #24]
 8010b4a:	881b      	ldrh	r3, [r3, #0]
 8010b4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010b50:	d106      	bne.n	8010b60 <mem_trim+0xe8>
 8010b52:	4b41      	ldr	r3, [pc, #260]	; (8010c58 <mem_trim+0x1e0>)
 8010b54:	f240 22f5 	movw	r2, #757	; 0x2f5
 8010b58:	4943      	ldr	r1, [pc, #268]	; (8010c68 <mem_trim+0x1f0>)
 8010b5a:	4841      	ldr	r0, [pc, #260]	; (8010c60 <mem_trim+0x1e8>)
 8010b5c:	f00a fa82 	bl	801b064 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	881b      	ldrh	r3, [r3, #0]
 8010b64:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010b66:	8afa      	ldrh	r2, [r7, #22]
 8010b68:	8bfb      	ldrh	r3, [r7, #30]
 8010b6a:	4413      	add	r3, r2
 8010b6c:	b29b      	uxth	r3, r3
 8010b6e:	3308      	adds	r3, #8
 8010b70:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010b72:	4b3e      	ldr	r3, [pc, #248]	; (8010c6c <mem_trim+0x1f4>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	693a      	ldr	r2, [r7, #16]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d106      	bne.n	8010b8a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8010b7c:	89fb      	ldrh	r3, [r7, #14]
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7ff fdd2 	bl	8010728 <ptr_to_mem>
 8010b84:	4603      	mov	r3, r0
 8010b86:	4a39      	ldr	r2, [pc, #228]	; (8010c6c <mem_trim+0x1f4>)
 8010b88:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010b8a:	89fb      	ldrh	r3, [r7, #14]
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f7ff fdcb 	bl	8010728 <ptr_to_mem>
 8010b92:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	2200      	movs	r2, #0
 8010b98:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	89ba      	ldrh	r2, [r7, #12]
 8010b9e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	8afa      	ldrh	r2, [r7, #22]
 8010ba4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010ba6:	69bb      	ldr	r3, [r7, #24]
 8010ba8:	89fa      	ldrh	r2, [r7, #14]
 8010baa:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010bac:	693b      	ldr	r3, [r7, #16]
 8010bae:	881b      	ldrh	r3, [r3, #0]
 8010bb0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010bb4:	d047      	beq.n	8010c46 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	881b      	ldrh	r3, [r3, #0]
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7ff fdb4 	bl	8010728 <ptr_to_mem>
 8010bc0:	4602      	mov	r2, r0
 8010bc2:	89fb      	ldrh	r3, [r7, #14]
 8010bc4:	8053      	strh	r3, [r2, #2]
 8010bc6:	e03e      	b.n	8010c46 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010bc8:	8bfb      	ldrh	r3, [r7, #30]
 8010bca:	f103 0214 	add.w	r2, r3, #20
 8010bce:	8abb      	ldrh	r3, [r7, #20]
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	d838      	bhi.n	8010c46 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010bd4:	8afa      	ldrh	r2, [r7, #22]
 8010bd6:	8bfb      	ldrh	r3, [r7, #30]
 8010bd8:	4413      	add	r3, r2
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	3308      	adds	r3, #8
 8010bde:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010be0:	69bb      	ldr	r3, [r7, #24]
 8010be2:	881b      	ldrh	r3, [r3, #0]
 8010be4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010be8:	d106      	bne.n	8010bf8 <mem_trim+0x180>
 8010bea:	4b1b      	ldr	r3, [pc, #108]	; (8010c58 <mem_trim+0x1e0>)
 8010bec:	f240 3216 	movw	r2, #790	; 0x316
 8010bf0:	491d      	ldr	r1, [pc, #116]	; (8010c68 <mem_trim+0x1f0>)
 8010bf2:	481b      	ldr	r0, [pc, #108]	; (8010c60 <mem_trim+0x1e8>)
 8010bf4:	f00a fa36 	bl	801b064 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010bf8:	89fb      	ldrh	r3, [r7, #14]
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7ff fd94 	bl	8010728 <ptr_to_mem>
 8010c00:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010c02:	4b1a      	ldr	r3, [pc, #104]	; (8010c6c <mem_trim+0x1f4>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	693a      	ldr	r2, [r7, #16]
 8010c08:	429a      	cmp	r2, r3
 8010c0a:	d202      	bcs.n	8010c12 <mem_trim+0x19a>
      lfree = mem2;
 8010c0c:	4a17      	ldr	r2, [pc, #92]	; (8010c6c <mem_trim+0x1f4>)
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	2200      	movs	r2, #0
 8010c16:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010c18:	69bb      	ldr	r3, [r7, #24]
 8010c1a:	881a      	ldrh	r2, [r3, #0]
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010c20:	693b      	ldr	r3, [r7, #16]
 8010c22:	8afa      	ldrh	r2, [r7, #22]
 8010c24:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010c26:	69bb      	ldr	r3, [r7, #24]
 8010c28:	89fa      	ldrh	r2, [r7, #14]
 8010c2a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	881b      	ldrh	r3, [r3, #0]
 8010c30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010c34:	d007      	beq.n	8010c46 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010c36:	693b      	ldr	r3, [r7, #16]
 8010c38:	881b      	ldrh	r3, [r3, #0]
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7ff fd74 	bl	8010728 <ptr_to_mem>
 8010c40:	4602      	mov	r2, r0
 8010c42:	89fb      	ldrh	r3, [r7, #14]
 8010c44:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8010c46:	687b      	ldr	r3, [r7, #4]
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3720      	adds	r7, #32
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	20005b54 	.word	0x20005b54
 8010c54:	20005b58 	.word	0x20005b58
 8010c58:	0801bf58 	.word	0x0801bf58
 8010c5c:	0801c0c8 	.word	0x0801c0c8
 8010c60:	0801bfa0 	.word	0x0801bfa0
 8010c64:	0801c0e0 	.word	0x0801c0e0
 8010c68:	0801c100 	.word	0x0801c100
 8010c6c:	20005b5c 	.word	0x20005b5c

08010c70 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b088      	sub	sp, #32
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	4603      	mov	r3, r0
 8010c78:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010c7a:	88fb      	ldrh	r3, [r7, #6]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d101      	bne.n	8010c84 <mem_malloc+0x14>
    return NULL;
 8010c80:	2300      	movs	r3, #0
 8010c82:	e0d9      	b.n	8010e38 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010c84:	88fb      	ldrh	r3, [r7, #6]
 8010c86:	3303      	adds	r3, #3
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	f023 0303 	bic.w	r3, r3, #3
 8010c8e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010c90:	8bbb      	ldrh	r3, [r7, #28]
 8010c92:	2b0b      	cmp	r3, #11
 8010c94:	d801      	bhi.n	8010c9a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010c96:	230c      	movs	r3, #12
 8010c98:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010c9a:	8bbb      	ldrh	r3, [r7, #28]
 8010c9c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010ca0:	d803      	bhi.n	8010caa <mem_malloc+0x3a>
 8010ca2:	8bba      	ldrh	r2, [r7, #28]
 8010ca4:	88fb      	ldrh	r3, [r7, #6]
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d201      	bcs.n	8010cae <mem_malloc+0x3e>
    return NULL;
 8010caa:	2300      	movs	r3, #0
 8010cac:	e0c4      	b.n	8010e38 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010cae:	4b64      	ldr	r3, [pc, #400]	; (8010e40 <mem_malloc+0x1d0>)
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7ff fd4a 	bl	801074c <mem_to_ptr>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	83fb      	strh	r3, [r7, #30]
 8010cbc:	e0b4      	b.n	8010e28 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010cbe:	8bfb      	ldrh	r3, [r7, #30]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7ff fd31 	bl	8010728 <ptr_to_mem>
 8010cc6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	791b      	ldrb	r3, [r3, #4]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	f040 80a4 	bne.w	8010e1a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	881b      	ldrh	r3, [r3, #0]
 8010cd6:	461a      	mov	r2, r3
 8010cd8:	8bfb      	ldrh	r3, [r7, #30]
 8010cda:	1ad3      	subs	r3, r2, r3
 8010cdc:	f1a3 0208 	sub.w	r2, r3, #8
 8010ce0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	f0c0 8099 	bcc.w	8010e1a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	881b      	ldrh	r3, [r3, #0]
 8010cec:	461a      	mov	r2, r3
 8010cee:	8bfb      	ldrh	r3, [r7, #30]
 8010cf0:	1ad3      	subs	r3, r2, r3
 8010cf2:	f1a3 0208 	sub.w	r2, r3, #8
 8010cf6:	8bbb      	ldrh	r3, [r7, #28]
 8010cf8:	3314      	adds	r3, #20
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d333      	bcc.n	8010d66 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010cfe:	8bfa      	ldrh	r2, [r7, #30]
 8010d00:	8bbb      	ldrh	r3, [r7, #28]
 8010d02:	4413      	add	r3, r2
 8010d04:	b29b      	uxth	r3, r3
 8010d06:	3308      	adds	r3, #8
 8010d08:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010d0a:	8a7b      	ldrh	r3, [r7, #18]
 8010d0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010d10:	d106      	bne.n	8010d20 <mem_malloc+0xb0>
 8010d12:	4b4c      	ldr	r3, [pc, #304]	; (8010e44 <mem_malloc+0x1d4>)
 8010d14:	f240 3287 	movw	r2, #903	; 0x387
 8010d18:	494b      	ldr	r1, [pc, #300]	; (8010e48 <mem_malloc+0x1d8>)
 8010d1a:	484c      	ldr	r0, [pc, #304]	; (8010e4c <mem_malloc+0x1dc>)
 8010d1c:	f00a f9a2 	bl	801b064 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010d20:	8a7b      	ldrh	r3, [r7, #18]
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7ff fd00 	bl	8010728 <ptr_to_mem>
 8010d28:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	881a      	ldrh	r2, [r3, #0]
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	8bfa      	ldrh	r2, [r7, #30]
 8010d3c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	8a7a      	ldrh	r2, [r7, #18]
 8010d42:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010d44:	697b      	ldr	r3, [r7, #20]
 8010d46:	2201      	movs	r2, #1
 8010d48:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	881b      	ldrh	r3, [r3, #0]
 8010d4e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010d52:	d00b      	beq.n	8010d6c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	881b      	ldrh	r3, [r3, #0]
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7ff fce5 	bl	8010728 <ptr_to_mem>
 8010d5e:	4602      	mov	r2, r0
 8010d60:	8a7b      	ldrh	r3, [r7, #18]
 8010d62:	8053      	strh	r3, [r2, #2]
 8010d64:	e002      	b.n	8010d6c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	2201      	movs	r2, #1
 8010d6a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010d6c:	4b34      	ldr	r3, [pc, #208]	; (8010e40 <mem_malloc+0x1d0>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	697a      	ldr	r2, [r7, #20]
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d127      	bne.n	8010dc6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8010d76:	4b32      	ldr	r3, [pc, #200]	; (8010e40 <mem_malloc+0x1d0>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010d7c:	e005      	b.n	8010d8a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010d7e:	69bb      	ldr	r3, [r7, #24]
 8010d80:	881b      	ldrh	r3, [r3, #0]
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7ff fcd0 	bl	8010728 <ptr_to_mem>
 8010d88:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010d8a:	69bb      	ldr	r3, [r7, #24]
 8010d8c:	791b      	ldrb	r3, [r3, #4]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d004      	beq.n	8010d9c <mem_malloc+0x12c>
 8010d92:	4b2f      	ldr	r3, [pc, #188]	; (8010e50 <mem_malloc+0x1e0>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	69ba      	ldr	r2, [r7, #24]
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	d1f0      	bne.n	8010d7e <mem_malloc+0x10e>
          }
          lfree = cur;
 8010d9c:	4a28      	ldr	r2, [pc, #160]	; (8010e40 <mem_malloc+0x1d0>)
 8010d9e:	69bb      	ldr	r3, [r7, #24]
 8010da0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010da2:	4b27      	ldr	r3, [pc, #156]	; (8010e40 <mem_malloc+0x1d0>)
 8010da4:	681a      	ldr	r2, [r3, #0]
 8010da6:	4b2a      	ldr	r3, [pc, #168]	; (8010e50 <mem_malloc+0x1e0>)
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d00b      	beq.n	8010dc6 <mem_malloc+0x156>
 8010dae:	4b24      	ldr	r3, [pc, #144]	; (8010e40 <mem_malloc+0x1d0>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	791b      	ldrb	r3, [r3, #4]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d006      	beq.n	8010dc6 <mem_malloc+0x156>
 8010db8:	4b22      	ldr	r3, [pc, #136]	; (8010e44 <mem_malloc+0x1d4>)
 8010dba:	f240 32b5 	movw	r2, #949	; 0x3b5
 8010dbe:	4925      	ldr	r1, [pc, #148]	; (8010e54 <mem_malloc+0x1e4>)
 8010dc0:	4822      	ldr	r0, [pc, #136]	; (8010e4c <mem_malloc+0x1dc>)
 8010dc2:	f00a f94f 	bl	801b064 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010dc6:	8bba      	ldrh	r2, [r7, #28]
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	4413      	add	r3, r2
 8010dcc:	3308      	adds	r3, #8
 8010dce:	4a20      	ldr	r2, [pc, #128]	; (8010e50 <mem_malloc+0x1e0>)
 8010dd0:	6812      	ldr	r2, [r2, #0]
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	d906      	bls.n	8010de4 <mem_malloc+0x174>
 8010dd6:	4b1b      	ldr	r3, [pc, #108]	; (8010e44 <mem_malloc+0x1d4>)
 8010dd8:	f240 32b9 	movw	r2, #953	; 0x3b9
 8010ddc:	491e      	ldr	r1, [pc, #120]	; (8010e58 <mem_malloc+0x1e8>)
 8010dde:	481b      	ldr	r0, [pc, #108]	; (8010e4c <mem_malloc+0x1dc>)
 8010de0:	f00a f940 	bl	801b064 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	f003 0303 	and.w	r3, r3, #3
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d006      	beq.n	8010dfc <mem_malloc+0x18c>
 8010dee:	4b15      	ldr	r3, [pc, #84]	; (8010e44 <mem_malloc+0x1d4>)
 8010df0:	f240 32bb 	movw	r2, #955	; 0x3bb
 8010df4:	4919      	ldr	r1, [pc, #100]	; (8010e5c <mem_malloc+0x1ec>)
 8010df6:	4815      	ldr	r0, [pc, #84]	; (8010e4c <mem_malloc+0x1dc>)
 8010df8:	f00a f934 	bl	801b064 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	f003 0303 	and.w	r3, r3, #3
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d006      	beq.n	8010e14 <mem_malloc+0x1a4>
 8010e06:	4b0f      	ldr	r3, [pc, #60]	; (8010e44 <mem_malloc+0x1d4>)
 8010e08:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010e0c:	4914      	ldr	r1, [pc, #80]	; (8010e60 <mem_malloc+0x1f0>)
 8010e0e:	480f      	ldr	r0, [pc, #60]	; (8010e4c <mem_malloc+0x1dc>)
 8010e10:	f00a f928 	bl	801b064 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010e14:	697b      	ldr	r3, [r7, #20]
 8010e16:	3308      	adds	r3, #8
 8010e18:	e00e      	b.n	8010e38 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8010e1a:	8bfb      	ldrh	r3, [r7, #30]
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f7ff fc83 	bl	8010728 <ptr_to_mem>
 8010e22:	4603      	mov	r3, r0
 8010e24:	881b      	ldrh	r3, [r3, #0]
 8010e26:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010e28:	8bfa      	ldrh	r2, [r7, #30]
 8010e2a:	8bbb      	ldrh	r3, [r7, #28]
 8010e2c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8010e30:	429a      	cmp	r2, r3
 8010e32:	f4ff af44 	bcc.w	8010cbe <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010e36:	2300      	movs	r3, #0
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3720      	adds	r7, #32
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}
 8010e40:	20005b5c 	.word	0x20005b5c
 8010e44:	0801bf58 	.word	0x0801bf58
 8010e48:	0801c100 	.word	0x0801c100
 8010e4c:	0801bfa0 	.word	0x0801bfa0
 8010e50:	20005b58 	.word	0x20005b58
 8010e54:	0801c114 	.word	0x0801c114
 8010e58:	0801c130 	.word	0x0801c130
 8010e5c:	0801c160 	.word	0x0801c160
 8010e60:	0801c190 	.word	0x0801c190

08010e64 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010e64:	b480      	push	{r7}
 8010e66:	b085      	sub	sp, #20
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	689b      	ldr	r3, [r3, #8]
 8010e70:	2200      	movs	r2, #0
 8010e72:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	685b      	ldr	r3, [r3, #4]
 8010e78:	3303      	adds	r3, #3
 8010e7a:	f023 0303 	bic.w	r3, r3, #3
 8010e7e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010e80:	2300      	movs	r3, #0
 8010e82:	60fb      	str	r3, [r7, #12]
 8010e84:	e011      	b.n	8010eaa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	689b      	ldr	r3, [r3, #8]
 8010e8a:	681a      	ldr	r2, [r3, #0]
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	689b      	ldr	r3, [r3, #8]
 8010e94:	68ba      	ldr	r2, [r7, #8]
 8010e96:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	881b      	ldrh	r3, [r3, #0]
 8010e9c:	461a      	mov	r2, r3
 8010e9e:	68bb      	ldr	r3, [r7, #8]
 8010ea0:	4413      	add	r3, r2
 8010ea2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	60fb      	str	r3, [r7, #12]
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	885b      	ldrh	r3, [r3, #2]
 8010eae:	461a      	mov	r2, r3
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	4293      	cmp	r3, r2
 8010eb4:	dbe7      	blt.n	8010e86 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8010eb6:	bf00      	nop
 8010eb8:	bf00      	nop
 8010eba:	3714      	adds	r7, #20
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec2:	4770      	bx	lr

08010ec4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010eca:	2300      	movs	r3, #0
 8010ecc:	80fb      	strh	r3, [r7, #6]
 8010ece:	e009      	b.n	8010ee4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010ed0:	88fb      	ldrh	r3, [r7, #6]
 8010ed2:	4a08      	ldr	r2, [pc, #32]	; (8010ef4 <memp_init+0x30>)
 8010ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f7ff ffc3 	bl	8010e64 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010ede:	88fb      	ldrh	r3, [r7, #6]
 8010ee0:	3301      	adds	r3, #1
 8010ee2:	80fb      	strh	r3, [r7, #6]
 8010ee4:	88fb      	ldrh	r3, [r7, #6]
 8010ee6:	2b08      	cmp	r3, #8
 8010ee8:	d9f2      	bls.n	8010ed0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010eea:	bf00      	nop
 8010eec:	bf00      	nop
 8010eee:	3708      	adds	r7, #8
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd80      	pop	{r7, pc}
 8010ef4:	0801ea88 	.word	0x0801ea88

08010ef8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b084      	sub	sp, #16
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	689b      	ldr	r3, [r3, #8]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d012      	beq.n	8010f34 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	689b      	ldr	r3, [r3, #8]
 8010f12:	68fa      	ldr	r2, [r7, #12]
 8010f14:	6812      	ldr	r2, [r2, #0]
 8010f16:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	f003 0303 	and.w	r3, r3, #3
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d006      	beq.n	8010f30 <do_memp_malloc_pool+0x38>
 8010f22:	4b07      	ldr	r3, [pc, #28]	; (8010f40 <do_memp_malloc_pool+0x48>)
 8010f24:	f44f 728c 	mov.w	r2, #280	; 0x118
 8010f28:	4906      	ldr	r1, [pc, #24]	; (8010f44 <do_memp_malloc_pool+0x4c>)
 8010f2a:	4807      	ldr	r0, [pc, #28]	; (8010f48 <do_memp_malloc_pool+0x50>)
 8010f2c:	f00a f89a 	bl	801b064 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	e000      	b.n	8010f36 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010f34:	2300      	movs	r3, #0
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3710      	adds	r7, #16
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}
 8010f3e:	bf00      	nop
 8010f40:	0801c1b4 	.word	0x0801c1b4
 8010f44:	0801c1e4 	.word	0x0801c1e4
 8010f48:	0801c208 	.word	0x0801c208

08010f4c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d106      	bne.n	8010f68 <memp_malloc_pool+0x1c>
 8010f5a:	4b0a      	ldr	r3, [pc, #40]	; (8010f84 <memp_malloc_pool+0x38>)
 8010f5c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8010f60:	4909      	ldr	r1, [pc, #36]	; (8010f88 <memp_malloc_pool+0x3c>)
 8010f62:	480a      	ldr	r0, [pc, #40]	; (8010f8c <memp_malloc_pool+0x40>)
 8010f64:	f00a f87e 	bl	801b064 <iprintf>
  if (desc == NULL) {
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d101      	bne.n	8010f72 <memp_malloc_pool+0x26>
    return NULL;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	e003      	b.n	8010f7a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f7ff ffc0 	bl	8010ef8 <do_memp_malloc_pool>
 8010f78:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	3708      	adds	r7, #8
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}
 8010f82:	bf00      	nop
 8010f84:	0801c1b4 	.word	0x0801c1b4
 8010f88:	0801c230 	.word	0x0801c230
 8010f8c:	0801c208 	.word	0x0801c208

08010f90 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b084      	sub	sp, #16
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	4603      	mov	r3, r0
 8010f98:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010f9a:	79fb      	ldrb	r3, [r7, #7]
 8010f9c:	2b08      	cmp	r3, #8
 8010f9e:	d908      	bls.n	8010fb2 <memp_malloc+0x22>
 8010fa0:	4b0a      	ldr	r3, [pc, #40]	; (8010fcc <memp_malloc+0x3c>)
 8010fa2:	f240 1257 	movw	r2, #343	; 0x157
 8010fa6:	490a      	ldr	r1, [pc, #40]	; (8010fd0 <memp_malloc+0x40>)
 8010fa8:	480a      	ldr	r0, [pc, #40]	; (8010fd4 <memp_malloc+0x44>)
 8010faa:	f00a f85b 	bl	801b064 <iprintf>
 8010fae:	2300      	movs	r3, #0
 8010fb0:	e008      	b.n	8010fc4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010fb2:	79fb      	ldrb	r3, [r7, #7]
 8010fb4:	4a08      	ldr	r2, [pc, #32]	; (8010fd8 <memp_malloc+0x48>)
 8010fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7ff ff9c 	bl	8010ef8 <do_memp_malloc_pool>
 8010fc0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
}
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	3710      	adds	r7, #16
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}
 8010fcc:	0801c1b4 	.word	0x0801c1b4
 8010fd0:	0801c244 	.word	0x0801c244
 8010fd4:	0801c208 	.word	0x0801c208
 8010fd8:	0801ea88 	.word	0x0801ea88

08010fdc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b084      	sub	sp, #16
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	f003 0303 	and.w	r3, r3, #3
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d006      	beq.n	8010ffe <do_memp_free_pool+0x22>
 8010ff0:	4b0a      	ldr	r3, [pc, #40]	; (801101c <do_memp_free_pool+0x40>)
 8010ff2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8010ff6:	490a      	ldr	r1, [pc, #40]	; (8011020 <do_memp_free_pool+0x44>)
 8010ff8:	480a      	ldr	r0, [pc, #40]	; (8011024 <do_memp_free_pool+0x48>)
 8010ffa:	f00a f833 	bl	801b064 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	689b      	ldr	r3, [r3, #8]
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	689b      	ldr	r3, [r3, #8]
 8011010:	68fa      	ldr	r2, [r7, #12]
 8011012:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8011014:	bf00      	nop
 8011016:	3710      	adds	r7, #16
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}
 801101c:	0801c1b4 	.word	0x0801c1b4
 8011020:	0801c264 	.word	0x0801c264
 8011024:	0801c208 	.word	0x0801c208

08011028 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b082      	sub	sp, #8
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d106      	bne.n	8011046 <memp_free_pool+0x1e>
 8011038:	4b0a      	ldr	r3, [pc, #40]	; (8011064 <memp_free_pool+0x3c>)
 801103a:	f240 1295 	movw	r2, #405	; 0x195
 801103e:	490a      	ldr	r1, [pc, #40]	; (8011068 <memp_free_pool+0x40>)
 8011040:	480a      	ldr	r0, [pc, #40]	; (801106c <memp_free_pool+0x44>)
 8011042:	f00a f80f 	bl	801b064 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d007      	beq.n	801105c <memp_free_pool+0x34>
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d004      	beq.n	801105c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8011052:	6839      	ldr	r1, [r7, #0]
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f7ff ffc1 	bl	8010fdc <do_memp_free_pool>
 801105a:	e000      	b.n	801105e <memp_free_pool+0x36>
    return;
 801105c:	bf00      	nop
}
 801105e:	3708      	adds	r7, #8
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}
 8011064:	0801c1b4 	.word	0x0801c1b4
 8011068:	0801c230 	.word	0x0801c230
 801106c:	0801c208 	.word	0x0801c208

08011070 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b082      	sub	sp, #8
 8011074:	af00      	add	r7, sp, #0
 8011076:	4603      	mov	r3, r0
 8011078:	6039      	str	r1, [r7, #0]
 801107a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801107c:	79fb      	ldrb	r3, [r7, #7]
 801107e:	2b08      	cmp	r3, #8
 8011080:	d907      	bls.n	8011092 <memp_free+0x22>
 8011082:	4b0c      	ldr	r3, [pc, #48]	; (80110b4 <memp_free+0x44>)
 8011084:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8011088:	490b      	ldr	r1, [pc, #44]	; (80110b8 <memp_free+0x48>)
 801108a:	480c      	ldr	r0, [pc, #48]	; (80110bc <memp_free+0x4c>)
 801108c:	f009 ffea 	bl	801b064 <iprintf>
 8011090:	e00c      	b.n	80110ac <memp_free+0x3c>

  if (mem == NULL) {
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d008      	beq.n	80110aa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011098:	79fb      	ldrb	r3, [r7, #7]
 801109a:	4a09      	ldr	r2, [pc, #36]	; (80110c0 <memp_free+0x50>)
 801109c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110a0:	6839      	ldr	r1, [r7, #0]
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7ff ff9a 	bl	8010fdc <do_memp_free_pool>
 80110a8:	e000      	b.n	80110ac <memp_free+0x3c>
    return;
 80110aa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80110ac:	3708      	adds	r7, #8
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}
 80110b2:	bf00      	nop
 80110b4:	0801c1b4 	.word	0x0801c1b4
 80110b8:	0801c284 	.word	0x0801c284
 80110bc:	0801c208 	.word	0x0801c208
 80110c0:	0801ea88 	.word	0x0801ea88

080110c4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80110c4:	b480      	push	{r7}
 80110c6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80110c8:	bf00      	nop
 80110ca:	46bd      	mov	sp, r7
 80110cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d0:	4770      	bx	lr
	...

080110d4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b086      	sub	sp, #24
 80110d8:	af00      	add	r7, sp, #0
 80110da:	60f8      	str	r0, [r7, #12]
 80110dc:	60b9      	str	r1, [r7, #8]
 80110de:	607a      	str	r2, [r7, #4]
 80110e0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d108      	bne.n	80110fa <netif_add+0x26>
 80110e8:	4b57      	ldr	r3, [pc, #348]	; (8011248 <netif_add+0x174>)
 80110ea:	f240 1227 	movw	r2, #295	; 0x127
 80110ee:	4957      	ldr	r1, [pc, #348]	; (801124c <netif_add+0x178>)
 80110f0:	4857      	ldr	r0, [pc, #348]	; (8011250 <netif_add+0x17c>)
 80110f2:	f009 ffb7 	bl	801b064 <iprintf>
 80110f6:	2300      	movs	r3, #0
 80110f8:	e0a2      	b.n	8011240 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80110fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d108      	bne.n	8011112 <netif_add+0x3e>
 8011100:	4b51      	ldr	r3, [pc, #324]	; (8011248 <netif_add+0x174>)
 8011102:	f44f 7294 	mov.w	r2, #296	; 0x128
 8011106:	4953      	ldr	r1, [pc, #332]	; (8011254 <netif_add+0x180>)
 8011108:	4851      	ldr	r0, [pc, #324]	; (8011250 <netif_add+0x17c>)
 801110a:	f009 ffab 	bl	801b064 <iprintf>
 801110e:	2300      	movs	r3, #0
 8011110:	e096      	b.n	8011240 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d101      	bne.n	801111c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011118:	4b4f      	ldr	r3, [pc, #316]	; (8011258 <netif_add+0x184>)
 801111a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d101      	bne.n	8011126 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8011122:	4b4d      	ldr	r3, [pc, #308]	; (8011258 <netif_add+0x184>)
 8011124:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d101      	bne.n	8011130 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801112c:	4b4a      	ldr	r3, [pc, #296]	; (8011258 <netif_add+0x184>)
 801112e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2200      	movs	r2, #0
 8011134:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2200      	movs	r2, #0
 801113a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	2200      	movs	r2, #0
 8011140:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	4a45      	ldr	r2, [pc, #276]	; (801125c <netif_add+0x188>)
 8011146:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	2200      	movs	r2, #0
 801114c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	2200      	movs	r2, #0
 8011152:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	2200      	movs	r2, #0
 801115a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	6a3a      	ldr	r2, [r7, #32]
 8011160:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8011162:	4b3f      	ldr	r3, [pc, #252]	; (8011260 <netif_add+0x18c>)
 8011164:	781a      	ldrb	r2, [r3, #0]
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011170:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	687a      	ldr	r2, [r7, #4]
 8011176:	68b9      	ldr	r1, [r7, #8]
 8011178:	68f8      	ldr	r0, [r7, #12]
 801117a:	f000 f913 	bl	80113a4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011180:	68f8      	ldr	r0, [r7, #12]
 8011182:	4798      	blx	r3
 8011184:	4603      	mov	r3, r0
 8011186:	2b00      	cmp	r3, #0
 8011188:	d001      	beq.n	801118e <netif_add+0xba>
    return NULL;
 801118a:	2300      	movs	r3, #0
 801118c:	e058      	b.n	8011240 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011194:	2bff      	cmp	r3, #255	; 0xff
 8011196:	d103      	bne.n	80111a0 <netif_add+0xcc>
        netif->num = 0;
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	2200      	movs	r2, #0
 801119c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80111a0:	2300      	movs	r3, #0
 80111a2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80111a4:	4b2f      	ldr	r3, [pc, #188]	; (8011264 <netif_add+0x190>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	617b      	str	r3, [r7, #20]
 80111aa:	e02b      	b.n	8011204 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80111ac:	697a      	ldr	r2, [r7, #20]
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	429a      	cmp	r2, r3
 80111b2:	d106      	bne.n	80111c2 <netif_add+0xee>
 80111b4:	4b24      	ldr	r3, [pc, #144]	; (8011248 <netif_add+0x174>)
 80111b6:	f240 128b 	movw	r2, #395	; 0x18b
 80111ba:	492b      	ldr	r1, [pc, #172]	; (8011268 <netif_add+0x194>)
 80111bc:	4824      	ldr	r0, [pc, #144]	; (8011250 <netif_add+0x17c>)
 80111be:	f009 ff51 	bl	801b064 <iprintf>
        num_netifs++;
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	3301      	adds	r3, #1
 80111c6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	2bff      	cmp	r3, #255	; 0xff
 80111cc:	dd06      	ble.n	80111dc <netif_add+0x108>
 80111ce:	4b1e      	ldr	r3, [pc, #120]	; (8011248 <netif_add+0x174>)
 80111d0:	f240 128d 	movw	r2, #397	; 0x18d
 80111d4:	4925      	ldr	r1, [pc, #148]	; (801126c <netif_add+0x198>)
 80111d6:	481e      	ldr	r0, [pc, #120]	; (8011250 <netif_add+0x17c>)
 80111d8:	f009 ff44 	bl	801b064 <iprintf>
        if (netif2->num == netif->num) {
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d108      	bne.n	80111fe <netif_add+0x12a>
          netif->num++;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80111f2:	3301      	adds	r3, #1
 80111f4:	b2da      	uxtb	r2, r3
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80111fc:	e005      	b.n	801120a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	617b      	str	r3, [r7, #20]
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d1d0      	bne.n	80111ac <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d1be      	bne.n	801118e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011216:	2bfe      	cmp	r3, #254	; 0xfe
 8011218:	d103      	bne.n	8011222 <netif_add+0x14e>
    netif_num = 0;
 801121a:	4b11      	ldr	r3, [pc, #68]	; (8011260 <netif_add+0x18c>)
 801121c:	2200      	movs	r2, #0
 801121e:	701a      	strb	r2, [r3, #0]
 8011220:	e006      	b.n	8011230 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011228:	3301      	adds	r3, #1
 801122a:	b2da      	uxtb	r2, r3
 801122c:	4b0c      	ldr	r3, [pc, #48]	; (8011260 <netif_add+0x18c>)
 801122e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011230:	4b0c      	ldr	r3, [pc, #48]	; (8011264 <netif_add+0x190>)
 8011232:	681a      	ldr	r2, [r3, #0]
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011238:	4a0a      	ldr	r2, [pc, #40]	; (8011264 <netif_add+0x190>)
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801123e:	68fb      	ldr	r3, [r7, #12]
}
 8011240:	4618      	mov	r0, r3
 8011242:	3718      	adds	r7, #24
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	0801c2a0 	.word	0x0801c2a0
 801124c:	0801c334 	.word	0x0801c334
 8011250:	0801c2f0 	.word	0x0801c2f0
 8011254:	0801c350 	.word	0x0801c350
 8011258:	0801eaec 	.word	0x0801eaec
 801125c:	0801167f 	.word	0x0801167f
 8011260:	20008614 	.word	0x20008614
 8011264:	2000860c 	.word	0x2000860c
 8011268:	0801c374 	.word	0x0801c374
 801126c:	0801c388 	.word	0x0801c388

08011270 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801127a:	6839      	ldr	r1, [r7, #0]
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f002 fb43 	bl	8013908 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8011282:	6839      	ldr	r1, [r7, #0]
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f006 fc25 	bl	8017ad4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801128a:	bf00      	nop
 801128c:	3708      	adds	r7, #8
 801128e:	46bd      	mov	sp, r7
 8011290:	bd80      	pop	{r7, pc}
	...

08011294 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b086      	sub	sp, #24
 8011298:	af00      	add	r7, sp, #0
 801129a:	60f8      	str	r0, [r7, #12]
 801129c:	60b9      	str	r1, [r7, #8]
 801129e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80112a0:	68bb      	ldr	r3, [r7, #8]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d106      	bne.n	80112b4 <netif_do_set_ipaddr+0x20>
 80112a6:	4b1d      	ldr	r3, [pc, #116]	; (801131c <netif_do_set_ipaddr+0x88>)
 80112a8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80112ac:	491c      	ldr	r1, [pc, #112]	; (8011320 <netif_do_set_ipaddr+0x8c>)
 80112ae:	481d      	ldr	r0, [pc, #116]	; (8011324 <netif_do_set_ipaddr+0x90>)
 80112b0:	f009 fed8 	bl	801b064 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d106      	bne.n	80112c8 <netif_do_set_ipaddr+0x34>
 80112ba:	4b18      	ldr	r3, [pc, #96]	; (801131c <netif_do_set_ipaddr+0x88>)
 80112bc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80112c0:	4917      	ldr	r1, [pc, #92]	; (8011320 <netif_do_set_ipaddr+0x8c>)
 80112c2:	4818      	ldr	r0, [pc, #96]	; (8011324 <netif_do_set_ipaddr+0x90>)
 80112c4:	f009 fece 	bl	801b064 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80112c8:	68bb      	ldr	r3, [r7, #8]
 80112ca:	681a      	ldr	r2, [r3, #0]
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	3304      	adds	r3, #4
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	429a      	cmp	r2, r3
 80112d4:	d01c      	beq.n	8011310 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	3304      	adds	r3, #4
 80112e0:	681a      	ldr	r2, [r3, #0]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80112e6:	f107 0314 	add.w	r3, r7, #20
 80112ea:	4619      	mov	r1, r3
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f7ff ffbf 	bl	8011270 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d002      	beq.n	80112fe <netif_do_set_ipaddr+0x6a>
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	e000      	b.n	8011300 <netif_do_set_ipaddr+0x6c>
 80112fe:	2300      	movs	r3, #0
 8011300:	68fa      	ldr	r2, [r7, #12]
 8011302:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011304:	2101      	movs	r1, #1
 8011306:	68f8      	ldr	r0, [r7, #12]
 8011308:	f000 f8d2 	bl	80114b0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801130c:	2301      	movs	r3, #1
 801130e:	e000      	b.n	8011312 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011310:	2300      	movs	r3, #0
}
 8011312:	4618      	mov	r0, r3
 8011314:	3718      	adds	r7, #24
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}
 801131a:	bf00      	nop
 801131c:	0801c2a0 	.word	0x0801c2a0
 8011320:	0801c3b8 	.word	0x0801c3b8
 8011324:	0801c2f0 	.word	0x0801c2f0

08011328 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011328:	b480      	push	{r7}
 801132a:	b085      	sub	sp, #20
 801132c:	af00      	add	r7, sp, #0
 801132e:	60f8      	str	r0, [r7, #12]
 8011330:	60b9      	str	r1, [r7, #8]
 8011332:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	681a      	ldr	r2, [r3, #0]
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	3308      	adds	r3, #8
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	429a      	cmp	r2, r3
 8011340:	d00a      	beq.n	8011358 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d002      	beq.n	801134e <netif_do_set_netmask+0x26>
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	e000      	b.n	8011350 <netif_do_set_netmask+0x28>
 801134e:	2300      	movs	r3, #0
 8011350:	68fa      	ldr	r2, [r7, #12]
 8011352:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8011354:	2301      	movs	r3, #1
 8011356:	e000      	b.n	801135a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011358:	2300      	movs	r3, #0
}
 801135a:	4618      	mov	r0, r3
 801135c:	3714      	adds	r7, #20
 801135e:	46bd      	mov	sp, r7
 8011360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011364:	4770      	bx	lr

08011366 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8011366:	b480      	push	{r7}
 8011368:	b085      	sub	sp, #20
 801136a:	af00      	add	r7, sp, #0
 801136c:	60f8      	str	r0, [r7, #12]
 801136e:	60b9      	str	r1, [r7, #8]
 8011370:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	681a      	ldr	r2, [r3, #0]
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	330c      	adds	r3, #12
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	429a      	cmp	r2, r3
 801137e:	d00a      	beq.n	8011396 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d002      	beq.n	801138c <netif_do_set_gw+0x26>
 8011386:	68bb      	ldr	r3, [r7, #8]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	e000      	b.n	801138e <netif_do_set_gw+0x28>
 801138c:	2300      	movs	r3, #0
 801138e:	68fa      	ldr	r2, [r7, #12]
 8011390:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8011392:	2301      	movs	r3, #1
 8011394:	e000      	b.n	8011398 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8011396:	2300      	movs	r3, #0
}
 8011398:	4618      	mov	r0, r3
 801139a:	3714      	adds	r7, #20
 801139c:	46bd      	mov	sp, r7
 801139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a2:	4770      	bx	lr

080113a4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b088      	sub	sp, #32
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	60f8      	str	r0, [r7, #12]
 80113ac:	60b9      	str	r1, [r7, #8]
 80113ae:	607a      	str	r2, [r7, #4]
 80113b0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80113b2:	2300      	movs	r3, #0
 80113b4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80113b6:	2300      	movs	r3, #0
 80113b8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d101      	bne.n	80113c4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80113c0:	4b1c      	ldr	r3, [pc, #112]	; (8011434 <netif_set_addr+0x90>)
 80113c2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d101      	bne.n	80113ce <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80113ca:	4b1a      	ldr	r3, [pc, #104]	; (8011434 <netif_set_addr+0x90>)
 80113cc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d101      	bne.n	80113d8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80113d4:	4b17      	ldr	r3, [pc, #92]	; (8011434 <netif_set_addr+0x90>)
 80113d6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d003      	beq.n	80113e6 <netif_set_addr+0x42>
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d101      	bne.n	80113ea <netif_set_addr+0x46>
 80113e6:	2301      	movs	r3, #1
 80113e8:	e000      	b.n	80113ec <netif_set_addr+0x48>
 80113ea:	2300      	movs	r3, #0
 80113ec:	617b      	str	r3, [r7, #20]
  if (remove) {
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d006      	beq.n	8011402 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80113f4:	f107 0310 	add.w	r3, r7, #16
 80113f8:	461a      	mov	r2, r3
 80113fa:	68b9      	ldr	r1, [r7, #8]
 80113fc:	68f8      	ldr	r0, [r7, #12]
 80113fe:	f7ff ff49 	bl	8011294 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011402:	69fa      	ldr	r2, [r7, #28]
 8011404:	6879      	ldr	r1, [r7, #4]
 8011406:	68f8      	ldr	r0, [r7, #12]
 8011408:	f7ff ff8e 	bl	8011328 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801140c:	69ba      	ldr	r2, [r7, #24]
 801140e:	6839      	ldr	r1, [r7, #0]
 8011410:	68f8      	ldr	r0, [r7, #12]
 8011412:	f7ff ffa8 	bl	8011366 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d106      	bne.n	801142a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801141c:	f107 0310 	add.w	r3, r7, #16
 8011420:	461a      	mov	r2, r3
 8011422:	68b9      	ldr	r1, [r7, #8]
 8011424:	68f8      	ldr	r0, [r7, #12]
 8011426:	f7ff ff35 	bl	8011294 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801142a:	bf00      	nop
 801142c:	3720      	adds	r7, #32
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}
 8011432:	bf00      	nop
 8011434:	0801eaec 	.word	0x0801eaec

08011438 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011438:	b480      	push	{r7}
 801143a:	b083      	sub	sp, #12
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011440:	4a04      	ldr	r2, [pc, #16]	; (8011454 <netif_set_default+0x1c>)
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011446:	bf00      	nop
 8011448:	370c      	adds	r7, #12
 801144a:	46bd      	mov	sp, r7
 801144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011450:	4770      	bx	lr
 8011452:	bf00      	nop
 8011454:	20008610 	.word	0x20008610

08011458 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b082      	sub	sp, #8
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d107      	bne.n	8011476 <netif_set_up+0x1e>
 8011466:	4b0f      	ldr	r3, [pc, #60]	; (80114a4 <netif_set_up+0x4c>)
 8011468:	f44f 7254 	mov.w	r2, #848	; 0x350
 801146c:	490e      	ldr	r1, [pc, #56]	; (80114a8 <netif_set_up+0x50>)
 801146e:	480f      	ldr	r0, [pc, #60]	; (80114ac <netif_set_up+0x54>)
 8011470:	f009 fdf8 	bl	801b064 <iprintf>
 8011474:	e013      	b.n	801149e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801147c:	f003 0301 	and.w	r3, r3, #1
 8011480:	2b00      	cmp	r3, #0
 8011482:	d10c      	bne.n	801149e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801148a:	f043 0301 	orr.w	r3, r3, #1
 801148e:	b2da      	uxtb	r2, r3
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011496:	2103      	movs	r1, #3
 8011498:	6878      	ldr	r0, [r7, #4]
 801149a:	f000 f809 	bl	80114b0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801149e:	3708      	adds	r7, #8
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd80      	pop	{r7, pc}
 80114a4:	0801c2a0 	.word	0x0801c2a0
 80114a8:	0801c428 	.word	0x0801c428
 80114ac:	0801c2f0 	.word	0x0801c2f0

080114b0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b082      	sub	sp, #8
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
 80114b8:	460b      	mov	r3, r1
 80114ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d106      	bne.n	80114d0 <netif_issue_reports+0x20>
 80114c2:	4b18      	ldr	r3, [pc, #96]	; (8011524 <netif_issue_reports+0x74>)
 80114c4:	f240 326d 	movw	r2, #877	; 0x36d
 80114c8:	4917      	ldr	r1, [pc, #92]	; (8011528 <netif_issue_reports+0x78>)
 80114ca:	4818      	ldr	r0, [pc, #96]	; (801152c <netif_issue_reports+0x7c>)
 80114cc:	f009 fdca 	bl	801b064 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80114d6:	f003 0304 	and.w	r3, r3, #4
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d01e      	beq.n	801151c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80114e4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d017      	beq.n	801151c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80114ec:	78fb      	ldrb	r3, [r7, #3]
 80114ee:	f003 0301 	and.w	r3, r3, #1
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d013      	beq.n	801151e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	3304      	adds	r3, #4
 80114fa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d00e      	beq.n	801151e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011506:	f003 0308 	and.w	r3, r3, #8
 801150a:	2b00      	cmp	r3, #0
 801150c:	d007      	beq.n	801151e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	3304      	adds	r3, #4
 8011512:	4619      	mov	r1, r3
 8011514:	6878      	ldr	r0, [r7, #4]
 8011516:	f007 fa47 	bl	80189a8 <etharp_request>
 801151a:	e000      	b.n	801151e <netif_issue_reports+0x6e>
    return;
 801151c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801151e:	3708      	adds	r7, #8
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	0801c2a0 	.word	0x0801c2a0
 8011528:	0801c444 	.word	0x0801c444
 801152c:	0801c2f0 	.word	0x0801c2f0

08011530 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b082      	sub	sp, #8
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d107      	bne.n	801154e <netif_set_down+0x1e>
 801153e:	4b12      	ldr	r3, [pc, #72]	; (8011588 <netif_set_down+0x58>)
 8011540:	f240 329b 	movw	r2, #923	; 0x39b
 8011544:	4911      	ldr	r1, [pc, #68]	; (801158c <netif_set_down+0x5c>)
 8011546:	4812      	ldr	r0, [pc, #72]	; (8011590 <netif_set_down+0x60>)
 8011548:	f009 fd8c 	bl	801b064 <iprintf>
 801154c:	e019      	b.n	8011582 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011554:	f003 0301 	and.w	r3, r3, #1
 8011558:	2b00      	cmp	r3, #0
 801155a:	d012      	beq.n	8011582 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011562:	f023 0301 	bic.w	r3, r3, #1
 8011566:	b2da      	uxtb	r2, r3
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011574:	f003 0308 	and.w	r3, r3, #8
 8011578:	2b00      	cmp	r3, #0
 801157a:	d002      	beq.n	8011582 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f006 fdd1 	bl	8018124 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8011582:	3708      	adds	r7, #8
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}
 8011588:	0801c2a0 	.word	0x0801c2a0
 801158c:	0801c468 	.word	0x0801c468
 8011590:	0801c2f0 	.word	0x0801c2f0

08011594 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d107      	bne.n	80115b2 <netif_set_link_up+0x1e>
 80115a2:	4b13      	ldr	r3, [pc, #76]	; (80115f0 <netif_set_link_up+0x5c>)
 80115a4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80115a8:	4912      	ldr	r1, [pc, #72]	; (80115f4 <netif_set_link_up+0x60>)
 80115aa:	4813      	ldr	r0, [pc, #76]	; (80115f8 <netif_set_link_up+0x64>)
 80115ac:	f009 fd5a 	bl	801b064 <iprintf>
 80115b0:	e01b      	b.n	80115ea <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80115b8:	f003 0304 	and.w	r3, r3, #4
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d114      	bne.n	80115ea <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80115c6:	f043 0304 	orr.w	r3, r3, #4
 80115ca:	b2da      	uxtb	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80115d2:	2103      	movs	r1, #3
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f7ff ff6b 	bl	80114b0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	69db      	ldr	r3, [r3, #28]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d003      	beq.n	80115ea <netif_set_link_up+0x56>
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	69db      	ldr	r3, [r3, #28]
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80115ea:	3708      	adds	r7, #8
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}
 80115f0:	0801c2a0 	.word	0x0801c2a0
 80115f4:	0801c488 	.word	0x0801c488
 80115f8:	0801c2f0 	.word	0x0801c2f0

080115fc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b082      	sub	sp, #8
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d107      	bne.n	801161a <netif_set_link_down+0x1e>
 801160a:	4b11      	ldr	r3, [pc, #68]	; (8011650 <netif_set_link_down+0x54>)
 801160c:	f240 4206 	movw	r2, #1030	; 0x406
 8011610:	4910      	ldr	r1, [pc, #64]	; (8011654 <netif_set_link_down+0x58>)
 8011612:	4811      	ldr	r0, [pc, #68]	; (8011658 <netif_set_link_down+0x5c>)
 8011614:	f009 fd26 	bl	801b064 <iprintf>
 8011618:	e017      	b.n	801164a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011620:	f003 0304 	and.w	r3, r3, #4
 8011624:	2b00      	cmp	r3, #0
 8011626:	d010      	beq.n	801164a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801162e:	f023 0304 	bic.w	r3, r3, #4
 8011632:	b2da      	uxtb	r2, r3
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	69db      	ldr	r3, [r3, #28]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d003      	beq.n	801164a <netif_set_link_down+0x4e>
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	69db      	ldr	r3, [r3, #28]
 8011646:	6878      	ldr	r0, [r7, #4]
 8011648:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801164a:	3708      	adds	r7, #8
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}
 8011650:	0801c2a0 	.word	0x0801c2a0
 8011654:	0801c4ac 	.word	0x0801c4ac
 8011658:	0801c2f0 	.word	0x0801c2f0

0801165c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801165c:	b480      	push	{r7}
 801165e:	b083      	sub	sp, #12
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
 8011664:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d002      	beq.n	8011672 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	683a      	ldr	r2, [r7, #0]
 8011670:	61da      	str	r2, [r3, #28]
  }
}
 8011672:	bf00      	nop
 8011674:	370c      	adds	r7, #12
 8011676:	46bd      	mov	sp, r7
 8011678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167c:	4770      	bx	lr

0801167e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801167e:	b480      	push	{r7}
 8011680:	b085      	sub	sp, #20
 8011682:	af00      	add	r7, sp, #0
 8011684:	60f8      	str	r0, [r7, #12]
 8011686:	60b9      	str	r1, [r7, #8]
 8011688:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801168a:	f06f 030b 	mvn.w	r3, #11
}
 801168e:	4618      	mov	r0, r3
 8011690:	3714      	adds	r7, #20
 8011692:	46bd      	mov	sp, r7
 8011694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011698:	4770      	bx	lr
	...

0801169c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801169c:	b480      	push	{r7}
 801169e:	b085      	sub	sp, #20
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	4603      	mov	r3, r0
 80116a4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80116a6:	79fb      	ldrb	r3, [r7, #7]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d013      	beq.n	80116d4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80116ac:	4b0d      	ldr	r3, [pc, #52]	; (80116e4 <netif_get_by_index+0x48>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	60fb      	str	r3, [r7, #12]
 80116b2:	e00c      	b.n	80116ce <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80116ba:	3301      	adds	r3, #1
 80116bc:	b2db      	uxtb	r3, r3
 80116be:	79fa      	ldrb	r2, [r7, #7]
 80116c0:	429a      	cmp	r2, r3
 80116c2:	d101      	bne.n	80116c8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	e006      	b.n	80116d6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	60fb      	str	r3, [r7, #12]
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d1ef      	bne.n	80116b4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80116d4:	2300      	movs	r3, #0
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3714      	adds	r7, #20
 80116da:	46bd      	mov	sp, r7
 80116dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e0:	4770      	bx	lr
 80116e2:	bf00      	nop
 80116e4:	2000860c 	.word	0x2000860c

080116e8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b082      	sub	sp, #8
 80116ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80116ee:	4b0c      	ldr	r3, [pc, #48]	; (8011720 <pbuf_free_ooseq+0x38>)
 80116f0:	2200      	movs	r2, #0
 80116f2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80116f4:	4b0b      	ldr	r3, [pc, #44]	; (8011724 <pbuf_free_ooseq+0x3c>)
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	607b      	str	r3, [r7, #4]
 80116fa:	e00a      	b.n	8011712 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011700:	2b00      	cmp	r3, #0
 8011702:	d003      	beq.n	801170c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f002 f93d 	bl	8013984 <tcp_free_ooseq>
      return;
 801170a:	e005      	b.n	8011718 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	68db      	ldr	r3, [r3, #12]
 8011710:	607b      	str	r3, [r7, #4]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d1f1      	bne.n	80116fc <pbuf_free_ooseq+0x14>
    }
  }
}
 8011718:	3708      	adds	r7, #8
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}
 801171e:	bf00      	nop
 8011720:	20008615 	.word	0x20008615
 8011724:	20008624 	.word	0x20008624

08011728 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011728:	b480      	push	{r7}
 801172a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 801172c:	4b03      	ldr	r3, [pc, #12]	; (801173c <pbuf_pool_is_empty+0x14>)
 801172e:	2201      	movs	r2, #1
 8011730:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011732:	bf00      	nop
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr
 801173c:	20008615 	.word	0x20008615

08011740 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011740:	b480      	push	{r7}
 8011742:	b085      	sub	sp, #20
 8011744:	af00      	add	r7, sp, #0
 8011746:	60f8      	str	r0, [r7, #12]
 8011748:	60b9      	str	r1, [r7, #8]
 801174a:	4611      	mov	r1, r2
 801174c:	461a      	mov	r2, r3
 801174e:	460b      	mov	r3, r1
 8011750:	80fb      	strh	r3, [r7, #6]
 8011752:	4613      	mov	r3, r2
 8011754:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2200      	movs	r2, #0
 801175a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	68ba      	ldr	r2, [r7, #8]
 8011760:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	88fa      	ldrh	r2, [r7, #6]
 8011766:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	88ba      	ldrh	r2, [r7, #4]
 801176c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801176e:	8b3b      	ldrh	r3, [r7, #24]
 8011770:	b2da      	uxtb	r2, r3
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	7f3a      	ldrb	r2, [r7, #28]
 801177a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	2201      	movs	r2, #1
 8011780:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	2200      	movs	r2, #0
 8011786:	73da      	strb	r2, [r3, #15]
}
 8011788:	bf00      	nop
 801178a:	3714      	adds	r7, #20
 801178c:	46bd      	mov	sp, r7
 801178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011792:	4770      	bx	lr

08011794 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b08c      	sub	sp, #48	; 0x30
 8011798:	af02      	add	r7, sp, #8
 801179a:	4603      	mov	r3, r0
 801179c:	71fb      	strb	r3, [r7, #7]
 801179e:	460b      	mov	r3, r1
 80117a0:	80bb      	strh	r3, [r7, #4]
 80117a2:	4613      	mov	r3, r2
 80117a4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80117a6:	79fb      	ldrb	r3, [r7, #7]
 80117a8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80117aa:	887b      	ldrh	r3, [r7, #2]
 80117ac:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80117b0:	d07f      	beq.n	80118b2 <pbuf_alloc+0x11e>
 80117b2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80117b6:	f300 80c8 	bgt.w	801194a <pbuf_alloc+0x1b6>
 80117ba:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80117be:	d010      	beq.n	80117e2 <pbuf_alloc+0x4e>
 80117c0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80117c4:	f300 80c1 	bgt.w	801194a <pbuf_alloc+0x1b6>
 80117c8:	2b01      	cmp	r3, #1
 80117ca:	d002      	beq.n	80117d2 <pbuf_alloc+0x3e>
 80117cc:	2b41      	cmp	r3, #65	; 0x41
 80117ce:	f040 80bc 	bne.w	801194a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80117d2:	887a      	ldrh	r2, [r7, #2]
 80117d4:	88bb      	ldrh	r3, [r7, #4]
 80117d6:	4619      	mov	r1, r3
 80117d8:	2000      	movs	r0, #0
 80117da:	f000 f8d1 	bl	8011980 <pbuf_alloc_reference>
 80117de:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80117e0:	e0bd      	b.n	801195e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80117e2:	2300      	movs	r3, #0
 80117e4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80117e6:	2300      	movs	r3, #0
 80117e8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80117ea:	88bb      	ldrh	r3, [r7, #4]
 80117ec:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80117ee:	2008      	movs	r0, #8
 80117f0:	f7ff fbce 	bl	8010f90 <memp_malloc>
 80117f4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80117f6:	693b      	ldr	r3, [r7, #16]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d109      	bne.n	8011810 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80117fc:	f7ff ff94 	bl	8011728 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011802:	2b00      	cmp	r3, #0
 8011804:	d002      	beq.n	801180c <pbuf_alloc+0x78>
            pbuf_free(p);
 8011806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011808:	f000 faa8 	bl	8011d5c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801180c:	2300      	movs	r3, #0
 801180e:	e0a7      	b.n	8011960 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011812:	3303      	adds	r3, #3
 8011814:	b29b      	uxth	r3, r3
 8011816:	f023 0303 	bic.w	r3, r3, #3
 801181a:	b29b      	uxth	r3, r3
 801181c:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 8011820:	b29b      	uxth	r3, r3
 8011822:	8b7a      	ldrh	r2, [r7, #26]
 8011824:	4293      	cmp	r3, r2
 8011826:	bf28      	it	cs
 8011828:	4613      	movcs	r3, r2
 801182a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801182c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801182e:	3310      	adds	r3, #16
 8011830:	693a      	ldr	r2, [r7, #16]
 8011832:	4413      	add	r3, r2
 8011834:	3303      	adds	r3, #3
 8011836:	f023 0303 	bic.w	r3, r3, #3
 801183a:	4618      	mov	r0, r3
 801183c:	89f9      	ldrh	r1, [r7, #14]
 801183e:	8b7a      	ldrh	r2, [r7, #26]
 8011840:	2300      	movs	r3, #0
 8011842:	9301      	str	r3, [sp, #4]
 8011844:	887b      	ldrh	r3, [r7, #2]
 8011846:	9300      	str	r3, [sp, #0]
 8011848:	460b      	mov	r3, r1
 801184a:	4601      	mov	r1, r0
 801184c:	6938      	ldr	r0, [r7, #16]
 801184e:	f7ff ff77 	bl	8011740 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011852:	693b      	ldr	r3, [r7, #16]
 8011854:	685b      	ldr	r3, [r3, #4]
 8011856:	f003 0303 	and.w	r3, r3, #3
 801185a:	2b00      	cmp	r3, #0
 801185c:	d006      	beq.n	801186c <pbuf_alloc+0xd8>
 801185e:	4b42      	ldr	r3, [pc, #264]	; (8011968 <pbuf_alloc+0x1d4>)
 8011860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011864:	4941      	ldr	r1, [pc, #260]	; (801196c <pbuf_alloc+0x1d8>)
 8011866:	4842      	ldr	r0, [pc, #264]	; (8011970 <pbuf_alloc+0x1dc>)
 8011868:	f009 fbfc 	bl	801b064 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801186c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801186e:	3303      	adds	r3, #3
 8011870:	f023 0303 	bic.w	r3, r3, #3
 8011874:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8011878:	d106      	bne.n	8011888 <pbuf_alloc+0xf4>
 801187a:	4b3b      	ldr	r3, [pc, #236]	; (8011968 <pbuf_alloc+0x1d4>)
 801187c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011880:	493c      	ldr	r1, [pc, #240]	; (8011974 <pbuf_alloc+0x1e0>)
 8011882:	483b      	ldr	r0, [pc, #236]	; (8011970 <pbuf_alloc+0x1dc>)
 8011884:	f009 fbee 	bl	801b064 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188a:	2b00      	cmp	r3, #0
 801188c:	d102      	bne.n	8011894 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801188e:	693b      	ldr	r3, [r7, #16]
 8011890:	627b      	str	r3, [r7, #36]	; 0x24
 8011892:	e002      	b.n	801189a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011894:	69fb      	ldr	r3, [r7, #28]
 8011896:	693a      	ldr	r2, [r7, #16]
 8011898:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801189e:	8b7a      	ldrh	r2, [r7, #26]
 80118a0:	89fb      	ldrh	r3, [r7, #14]
 80118a2:	1ad3      	subs	r3, r2, r3
 80118a4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80118a6:	2300      	movs	r3, #0
 80118a8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80118aa:	8b7b      	ldrh	r3, [r7, #26]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d19e      	bne.n	80117ee <pbuf_alloc+0x5a>
      break;
 80118b0:	e055      	b.n	801195e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80118b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80118b4:	3303      	adds	r3, #3
 80118b6:	b29b      	uxth	r3, r3
 80118b8:	f023 0303 	bic.w	r3, r3, #3
 80118bc:	b29a      	uxth	r2, r3
 80118be:	88bb      	ldrh	r3, [r7, #4]
 80118c0:	3303      	adds	r3, #3
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	f023 0303 	bic.w	r3, r3, #3
 80118c8:	b29b      	uxth	r3, r3
 80118ca:	4413      	add	r3, r2
 80118cc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80118ce:	8b3b      	ldrh	r3, [r7, #24]
 80118d0:	3310      	adds	r3, #16
 80118d2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80118d4:	8b3a      	ldrh	r2, [r7, #24]
 80118d6:	88bb      	ldrh	r3, [r7, #4]
 80118d8:	3303      	adds	r3, #3
 80118da:	f023 0303 	bic.w	r3, r3, #3
 80118de:	429a      	cmp	r2, r3
 80118e0:	d306      	bcc.n	80118f0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80118e2:	8afa      	ldrh	r2, [r7, #22]
 80118e4:	88bb      	ldrh	r3, [r7, #4]
 80118e6:	3303      	adds	r3, #3
 80118e8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d201      	bcs.n	80118f4 <pbuf_alloc+0x160>
        return NULL;
 80118f0:	2300      	movs	r3, #0
 80118f2:	e035      	b.n	8011960 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80118f4:	8afb      	ldrh	r3, [r7, #22]
 80118f6:	4618      	mov	r0, r3
 80118f8:	f7ff f9ba 	bl	8010c70 <mem_malloc>
 80118fc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80118fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011900:	2b00      	cmp	r3, #0
 8011902:	d101      	bne.n	8011908 <pbuf_alloc+0x174>
        return NULL;
 8011904:	2300      	movs	r3, #0
 8011906:	e02b      	b.n	8011960 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011908:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801190a:	3310      	adds	r3, #16
 801190c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801190e:	4413      	add	r3, r2
 8011910:	3303      	adds	r3, #3
 8011912:	f023 0303 	bic.w	r3, r3, #3
 8011916:	4618      	mov	r0, r3
 8011918:	88b9      	ldrh	r1, [r7, #4]
 801191a:	88ba      	ldrh	r2, [r7, #4]
 801191c:	2300      	movs	r3, #0
 801191e:	9301      	str	r3, [sp, #4]
 8011920:	887b      	ldrh	r3, [r7, #2]
 8011922:	9300      	str	r3, [sp, #0]
 8011924:	460b      	mov	r3, r1
 8011926:	4601      	mov	r1, r0
 8011928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801192a:	f7ff ff09 	bl	8011740 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	f003 0303 	and.w	r3, r3, #3
 8011936:	2b00      	cmp	r3, #0
 8011938:	d010      	beq.n	801195c <pbuf_alloc+0x1c8>
 801193a:	4b0b      	ldr	r3, [pc, #44]	; (8011968 <pbuf_alloc+0x1d4>)
 801193c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8011940:	490d      	ldr	r1, [pc, #52]	; (8011978 <pbuf_alloc+0x1e4>)
 8011942:	480b      	ldr	r0, [pc, #44]	; (8011970 <pbuf_alloc+0x1dc>)
 8011944:	f009 fb8e 	bl	801b064 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011948:	e008      	b.n	801195c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801194a:	4b07      	ldr	r3, [pc, #28]	; (8011968 <pbuf_alloc+0x1d4>)
 801194c:	f240 1227 	movw	r2, #295	; 0x127
 8011950:	490a      	ldr	r1, [pc, #40]	; (801197c <pbuf_alloc+0x1e8>)
 8011952:	4807      	ldr	r0, [pc, #28]	; (8011970 <pbuf_alloc+0x1dc>)
 8011954:	f009 fb86 	bl	801b064 <iprintf>
      return NULL;
 8011958:	2300      	movs	r3, #0
 801195a:	e001      	b.n	8011960 <pbuf_alloc+0x1cc>
      break;
 801195c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011960:	4618      	mov	r0, r3
 8011962:	3728      	adds	r7, #40	; 0x28
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}
 8011968:	0801c4d0 	.word	0x0801c4d0
 801196c:	0801c500 	.word	0x0801c500
 8011970:	0801c530 	.word	0x0801c530
 8011974:	0801c558 	.word	0x0801c558
 8011978:	0801c58c 	.word	0x0801c58c
 801197c:	0801c5b8 	.word	0x0801c5b8

08011980 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b086      	sub	sp, #24
 8011984:	af02      	add	r7, sp, #8
 8011986:	6078      	str	r0, [r7, #4]
 8011988:	460b      	mov	r3, r1
 801198a:	807b      	strh	r3, [r7, #2]
 801198c:	4613      	mov	r3, r2
 801198e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011990:	883b      	ldrh	r3, [r7, #0]
 8011992:	2b41      	cmp	r3, #65	; 0x41
 8011994:	d009      	beq.n	80119aa <pbuf_alloc_reference+0x2a>
 8011996:	883b      	ldrh	r3, [r7, #0]
 8011998:	2b01      	cmp	r3, #1
 801199a:	d006      	beq.n	80119aa <pbuf_alloc_reference+0x2a>
 801199c:	4b0f      	ldr	r3, [pc, #60]	; (80119dc <pbuf_alloc_reference+0x5c>)
 801199e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80119a2:	490f      	ldr	r1, [pc, #60]	; (80119e0 <pbuf_alloc_reference+0x60>)
 80119a4:	480f      	ldr	r0, [pc, #60]	; (80119e4 <pbuf_alloc_reference+0x64>)
 80119a6:	f009 fb5d 	bl	801b064 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80119aa:	2007      	movs	r0, #7
 80119ac:	f7ff faf0 	bl	8010f90 <memp_malloc>
 80119b0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d101      	bne.n	80119bc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80119b8:	2300      	movs	r3, #0
 80119ba:	e00b      	b.n	80119d4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80119bc:	8879      	ldrh	r1, [r7, #2]
 80119be:	887a      	ldrh	r2, [r7, #2]
 80119c0:	2300      	movs	r3, #0
 80119c2:	9301      	str	r3, [sp, #4]
 80119c4:	883b      	ldrh	r3, [r7, #0]
 80119c6:	9300      	str	r3, [sp, #0]
 80119c8:	460b      	mov	r3, r1
 80119ca:	6879      	ldr	r1, [r7, #4]
 80119cc:	68f8      	ldr	r0, [r7, #12]
 80119ce:	f7ff feb7 	bl	8011740 <pbuf_init_alloced_pbuf>
  return p;
 80119d2:	68fb      	ldr	r3, [r7, #12]
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3710      	adds	r7, #16
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}
 80119dc:	0801c4d0 	.word	0x0801c4d0
 80119e0:	0801c5d4 	.word	0x0801c5d4
 80119e4:	0801c530 	.word	0x0801c530

080119e8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b088      	sub	sp, #32
 80119ec:	af02      	add	r7, sp, #8
 80119ee:	607b      	str	r3, [r7, #4]
 80119f0:	4603      	mov	r3, r0
 80119f2:	73fb      	strb	r3, [r7, #15]
 80119f4:	460b      	mov	r3, r1
 80119f6:	81bb      	strh	r3, [r7, #12]
 80119f8:	4613      	mov	r3, r2
 80119fa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80119fc:	7bfb      	ldrb	r3, [r7, #15]
 80119fe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011a00:	8a7b      	ldrh	r3, [r7, #18]
 8011a02:	3303      	adds	r3, #3
 8011a04:	f023 0203 	bic.w	r2, r3, #3
 8011a08:	89bb      	ldrh	r3, [r7, #12]
 8011a0a:	441a      	add	r2, r3
 8011a0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a0e:	429a      	cmp	r2, r3
 8011a10:	d901      	bls.n	8011a16 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011a12:	2300      	movs	r3, #0
 8011a14:	e018      	b.n	8011a48 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011a16:	6a3b      	ldr	r3, [r7, #32]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d007      	beq.n	8011a2c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011a1c:	8a7b      	ldrh	r3, [r7, #18]
 8011a1e:	3303      	adds	r3, #3
 8011a20:	f023 0303 	bic.w	r3, r3, #3
 8011a24:	6a3a      	ldr	r2, [r7, #32]
 8011a26:	4413      	add	r3, r2
 8011a28:	617b      	str	r3, [r7, #20]
 8011a2a:	e001      	b.n	8011a30 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	89b9      	ldrh	r1, [r7, #12]
 8011a34:	89ba      	ldrh	r2, [r7, #12]
 8011a36:	2302      	movs	r3, #2
 8011a38:	9301      	str	r3, [sp, #4]
 8011a3a:	897b      	ldrh	r3, [r7, #10]
 8011a3c:	9300      	str	r3, [sp, #0]
 8011a3e:	460b      	mov	r3, r1
 8011a40:	6979      	ldr	r1, [r7, #20]
 8011a42:	f7ff fe7d 	bl	8011740 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011a46:	687b      	ldr	r3, [r7, #4]
}
 8011a48:	4618      	mov	r0, r3
 8011a4a:	3718      	adds	r7, #24
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}

08011a50 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	460b      	mov	r3, r1
 8011a5a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d106      	bne.n	8011a70 <pbuf_realloc+0x20>
 8011a62:	4b3a      	ldr	r3, [pc, #232]	; (8011b4c <pbuf_realloc+0xfc>)
 8011a64:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011a68:	4939      	ldr	r1, [pc, #228]	; (8011b50 <pbuf_realloc+0x100>)
 8011a6a:	483a      	ldr	r0, [pc, #232]	; (8011b54 <pbuf_realloc+0x104>)
 8011a6c:	f009 fafa 	bl	801b064 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	891b      	ldrh	r3, [r3, #8]
 8011a74:	887a      	ldrh	r2, [r7, #2]
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d263      	bcs.n	8011b42 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	891a      	ldrh	r2, [r3, #8]
 8011a7e:	887b      	ldrh	r3, [r7, #2]
 8011a80:	1ad3      	subs	r3, r2, r3
 8011a82:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011a84:	887b      	ldrh	r3, [r7, #2]
 8011a86:	817b      	strh	r3, [r7, #10]
  q = p;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011a8c:	e018      	b.n	8011ac0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	895b      	ldrh	r3, [r3, #10]
 8011a92:	897a      	ldrh	r2, [r7, #10]
 8011a94:	1ad3      	subs	r3, r2, r3
 8011a96:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	891a      	ldrh	r2, [r3, #8]
 8011a9c:	893b      	ldrh	r3, [r7, #8]
 8011a9e:	1ad3      	subs	r3, r2, r3
 8011aa0:	b29a      	uxth	r2, r3
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d106      	bne.n	8011ac0 <pbuf_realloc+0x70>
 8011ab2:	4b26      	ldr	r3, [pc, #152]	; (8011b4c <pbuf_realloc+0xfc>)
 8011ab4:	f240 12af 	movw	r2, #431	; 0x1af
 8011ab8:	4927      	ldr	r1, [pc, #156]	; (8011b58 <pbuf_realloc+0x108>)
 8011aba:	4826      	ldr	r0, [pc, #152]	; (8011b54 <pbuf_realloc+0x104>)
 8011abc:	f009 fad2 	bl	801b064 <iprintf>
  while (rem_len > q->len) {
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	895b      	ldrh	r3, [r3, #10]
 8011ac4:	897a      	ldrh	r2, [r7, #10]
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d8e1      	bhi.n	8011a8e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	7b1b      	ldrb	r3, [r3, #12]
 8011ace:	f003 030f 	and.w	r3, r3, #15
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d121      	bne.n	8011b1a <pbuf_realloc+0xca>
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	895b      	ldrh	r3, [r3, #10]
 8011ada:	897a      	ldrh	r2, [r7, #10]
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d01c      	beq.n	8011b1a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	7b5b      	ldrb	r3, [r3, #13]
 8011ae4:	f003 0302 	and.w	r3, r3, #2
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d116      	bne.n	8011b1a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	685a      	ldr	r2, [r3, #4]
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	1ad3      	subs	r3, r2, r3
 8011af4:	b29a      	uxth	r2, r3
 8011af6:	897b      	ldrh	r3, [r7, #10]
 8011af8:	4413      	add	r3, r2
 8011afa:	b29b      	uxth	r3, r3
 8011afc:	4619      	mov	r1, r3
 8011afe:	68f8      	ldr	r0, [r7, #12]
 8011b00:	f7fe ffba 	bl	8010a78 <mem_trim>
 8011b04:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d106      	bne.n	8011b1a <pbuf_realloc+0xca>
 8011b0c:	4b0f      	ldr	r3, [pc, #60]	; (8011b4c <pbuf_realloc+0xfc>)
 8011b0e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8011b12:	4912      	ldr	r1, [pc, #72]	; (8011b5c <pbuf_realloc+0x10c>)
 8011b14:	480f      	ldr	r0, [pc, #60]	; (8011b54 <pbuf_realloc+0x104>)
 8011b16:	f009 faa5 	bl	801b064 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	897a      	ldrh	r2, [r7, #10]
 8011b1e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	895a      	ldrh	r2, [r3, #10]
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d004      	beq.n	8011b3a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	4618      	mov	r0, r3
 8011b36:	f000 f911 	bl	8011d5c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	601a      	str	r2, [r3, #0]
 8011b40:	e000      	b.n	8011b44 <pbuf_realloc+0xf4>
    return;
 8011b42:	bf00      	nop

}
 8011b44:	3710      	adds	r7, #16
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop
 8011b4c:	0801c4d0 	.word	0x0801c4d0
 8011b50:	0801c5e8 	.word	0x0801c5e8
 8011b54:	0801c530 	.word	0x0801c530
 8011b58:	0801c600 	.word	0x0801c600
 8011b5c:	0801c618 	.word	0x0801c618

08011b60 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b086      	sub	sp, #24
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	60f8      	str	r0, [r7, #12]
 8011b68:	60b9      	str	r1, [r7, #8]
 8011b6a:	4613      	mov	r3, r2
 8011b6c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d106      	bne.n	8011b82 <pbuf_add_header_impl+0x22>
 8011b74:	4b2b      	ldr	r3, [pc, #172]	; (8011c24 <pbuf_add_header_impl+0xc4>)
 8011b76:	f240 12df 	movw	r2, #479	; 0x1df
 8011b7a:	492b      	ldr	r1, [pc, #172]	; (8011c28 <pbuf_add_header_impl+0xc8>)
 8011b7c:	482b      	ldr	r0, [pc, #172]	; (8011c2c <pbuf_add_header_impl+0xcc>)
 8011b7e:	f009 fa71 	bl	801b064 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d003      	beq.n	8011b90 <pbuf_add_header_impl+0x30>
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b8e:	d301      	bcc.n	8011b94 <pbuf_add_header_impl+0x34>
    return 1;
 8011b90:	2301      	movs	r3, #1
 8011b92:	e043      	b.n	8011c1c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d101      	bne.n	8011b9e <pbuf_add_header_impl+0x3e>
    return 0;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	e03e      	b.n	8011c1c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	891a      	ldrh	r2, [r3, #8]
 8011ba6:	8a7b      	ldrh	r3, [r7, #18]
 8011ba8:	4413      	add	r3, r2
 8011baa:	b29b      	uxth	r3, r3
 8011bac:	8a7a      	ldrh	r2, [r7, #18]
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d901      	bls.n	8011bb6 <pbuf_add_header_impl+0x56>
    return 1;
 8011bb2:	2301      	movs	r3, #1
 8011bb4:	e032      	b.n	8011c1c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	7b1b      	ldrb	r3, [r3, #12]
 8011bba:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011bbc:	8a3b      	ldrh	r3, [r7, #16]
 8011bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d00c      	beq.n	8011be0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	685a      	ldr	r2, [r3, #4]
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	425b      	negs	r3, r3
 8011bce:	4413      	add	r3, r2
 8011bd0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	3310      	adds	r3, #16
 8011bd6:	697a      	ldr	r2, [r7, #20]
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d20d      	bcs.n	8011bf8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011bdc:	2301      	movs	r3, #1
 8011bde:	e01d      	b.n	8011c1c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011be0:	79fb      	ldrb	r3, [r7, #7]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d006      	beq.n	8011bf4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	685a      	ldr	r2, [r3, #4]
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	425b      	negs	r3, r3
 8011bee:	4413      	add	r3, r2
 8011bf0:	617b      	str	r3, [r7, #20]
 8011bf2:	e001      	b.n	8011bf8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	e011      	b.n	8011c1c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	697a      	ldr	r2, [r7, #20]
 8011bfc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	895a      	ldrh	r2, [r3, #10]
 8011c02:	8a7b      	ldrh	r3, [r7, #18]
 8011c04:	4413      	add	r3, r2
 8011c06:	b29a      	uxth	r2, r3
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	891a      	ldrh	r2, [r3, #8]
 8011c10:	8a7b      	ldrh	r3, [r7, #18]
 8011c12:	4413      	add	r3, r2
 8011c14:	b29a      	uxth	r2, r3
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	811a      	strh	r2, [r3, #8]


  return 0;
 8011c1a:	2300      	movs	r3, #0
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3718      	adds	r7, #24
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}
 8011c24:	0801c4d0 	.word	0x0801c4d0
 8011c28:	0801c634 	.word	0x0801c634
 8011c2c:	0801c530 	.word	0x0801c530

08011c30 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b082      	sub	sp, #8
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
 8011c38:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	6839      	ldr	r1, [r7, #0]
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f7ff ff8e 	bl	8011b60 <pbuf_add_header_impl>
 8011c44:	4603      	mov	r3, r0
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	3708      	adds	r7, #8
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}
	...

08011c50 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b084      	sub	sp, #16
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d106      	bne.n	8011c6e <pbuf_remove_header+0x1e>
 8011c60:	4b20      	ldr	r3, [pc, #128]	; (8011ce4 <pbuf_remove_header+0x94>)
 8011c62:	f240 224b 	movw	r2, #587	; 0x24b
 8011c66:	4920      	ldr	r1, [pc, #128]	; (8011ce8 <pbuf_remove_header+0x98>)
 8011c68:	4820      	ldr	r0, [pc, #128]	; (8011cec <pbuf_remove_header+0x9c>)
 8011c6a:	f009 f9fb 	bl	801b064 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d003      	beq.n	8011c7c <pbuf_remove_header+0x2c>
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c7a:	d301      	bcc.n	8011c80 <pbuf_remove_header+0x30>
    return 1;
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	e02c      	b.n	8011cda <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d101      	bne.n	8011c8a <pbuf_remove_header+0x3a>
    return 0;
 8011c86:	2300      	movs	r3, #0
 8011c88:	e027      	b.n	8011cda <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	895b      	ldrh	r3, [r3, #10]
 8011c92:	89fa      	ldrh	r2, [r7, #14]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d908      	bls.n	8011caa <pbuf_remove_header+0x5a>
 8011c98:	4b12      	ldr	r3, [pc, #72]	; (8011ce4 <pbuf_remove_header+0x94>)
 8011c9a:	f240 2255 	movw	r2, #597	; 0x255
 8011c9e:	4914      	ldr	r1, [pc, #80]	; (8011cf0 <pbuf_remove_header+0xa0>)
 8011ca0:	4812      	ldr	r0, [pc, #72]	; (8011cec <pbuf_remove_header+0x9c>)
 8011ca2:	f009 f9df 	bl	801b064 <iprintf>
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	e017      	b.n	8011cda <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	685b      	ldr	r3, [r3, #4]
 8011cae:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	685a      	ldr	r2, [r3, #4]
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	441a      	add	r2, r3
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	895a      	ldrh	r2, [r3, #10]
 8011cc0:	89fb      	ldrh	r3, [r7, #14]
 8011cc2:	1ad3      	subs	r3, r2, r3
 8011cc4:	b29a      	uxth	r2, r3
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	891a      	ldrh	r2, [r3, #8]
 8011cce:	89fb      	ldrh	r3, [r7, #14]
 8011cd0:	1ad3      	subs	r3, r2, r3
 8011cd2:	b29a      	uxth	r2, r3
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011cd8:	2300      	movs	r3, #0
}
 8011cda:	4618      	mov	r0, r3
 8011cdc:	3710      	adds	r7, #16
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	0801c4d0 	.word	0x0801c4d0
 8011ce8:	0801c634 	.word	0x0801c634
 8011cec:	0801c530 	.word	0x0801c530
 8011cf0:	0801c640 	.word	0x0801c640

08011cf4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b082      	sub	sp, #8
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	460b      	mov	r3, r1
 8011cfe:	807b      	strh	r3, [r7, #2]
 8011d00:	4613      	mov	r3, r2
 8011d02:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011d04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	da08      	bge.n	8011d1e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011d0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d10:	425b      	negs	r3, r3
 8011d12:	4619      	mov	r1, r3
 8011d14:	6878      	ldr	r0, [r7, #4]
 8011d16:	f7ff ff9b 	bl	8011c50 <pbuf_remove_header>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	e007      	b.n	8011d2e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011d1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d22:	787a      	ldrb	r2, [r7, #1]
 8011d24:	4619      	mov	r1, r3
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	f7ff ff1a 	bl	8011b60 <pbuf_add_header_impl>
 8011d2c:	4603      	mov	r3, r0
  }
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3708      	adds	r7, #8
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}

08011d36 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011d36:	b580      	push	{r7, lr}
 8011d38:	b082      	sub	sp, #8
 8011d3a:	af00      	add	r7, sp, #0
 8011d3c:	6078      	str	r0, [r7, #4]
 8011d3e:	460b      	mov	r3, r1
 8011d40:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011d42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d46:	2201      	movs	r2, #1
 8011d48:	4619      	mov	r1, r3
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f7ff ffd2 	bl	8011cf4 <pbuf_header_impl>
 8011d50:	4603      	mov	r3, r0
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	3708      	adds	r7, #8
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}
	...

08011d5c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b086      	sub	sp, #24
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d10b      	bne.n	8011d82 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d106      	bne.n	8011d7e <pbuf_free+0x22>
 8011d70:	4b38      	ldr	r3, [pc, #224]	; (8011e54 <pbuf_free+0xf8>)
 8011d72:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8011d76:	4938      	ldr	r1, [pc, #224]	; (8011e58 <pbuf_free+0xfc>)
 8011d78:	4838      	ldr	r0, [pc, #224]	; (8011e5c <pbuf_free+0x100>)
 8011d7a:	f009 f973 	bl	801b064 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	e063      	b.n	8011e4a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011d82:	2300      	movs	r3, #0
 8011d84:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011d86:	e05c      	b.n	8011e42 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	7b9b      	ldrb	r3, [r3, #14]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d106      	bne.n	8011d9e <pbuf_free+0x42>
 8011d90:	4b30      	ldr	r3, [pc, #192]	; (8011e54 <pbuf_free+0xf8>)
 8011d92:	f240 22f1 	movw	r2, #753	; 0x2f1
 8011d96:	4932      	ldr	r1, [pc, #200]	; (8011e60 <pbuf_free+0x104>)
 8011d98:	4830      	ldr	r0, [pc, #192]	; (8011e5c <pbuf_free+0x100>)
 8011d9a:	f009 f963 	bl	801b064 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	7b9b      	ldrb	r3, [r3, #14]
 8011da2:	3b01      	subs	r3, #1
 8011da4:	b2da      	uxtb	r2, r3
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	739a      	strb	r2, [r3, #14]
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	7b9b      	ldrb	r3, [r3, #14]
 8011dae:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011db0:	7dbb      	ldrb	r3, [r7, #22]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d143      	bne.n	8011e3e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	7b1b      	ldrb	r3, [r3, #12]
 8011dc0:	f003 030f 	and.w	r3, r3, #15
 8011dc4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	7b5b      	ldrb	r3, [r3, #13]
 8011dca:	f003 0302 	and.w	r3, r3, #2
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d011      	beq.n	8011df6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	691b      	ldr	r3, [r3, #16]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d106      	bne.n	8011dec <pbuf_free+0x90>
 8011dde:	4b1d      	ldr	r3, [pc, #116]	; (8011e54 <pbuf_free+0xf8>)
 8011de0:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011de4:	491f      	ldr	r1, [pc, #124]	; (8011e64 <pbuf_free+0x108>)
 8011de6:	481d      	ldr	r0, [pc, #116]	; (8011e5c <pbuf_free+0x100>)
 8011de8:	f009 f93c 	bl	801b064 <iprintf>
        pc->custom_free_function(p);
 8011dec:	68bb      	ldr	r3, [r7, #8]
 8011dee:	691b      	ldr	r3, [r3, #16]
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	4798      	blx	r3
 8011df4:	e01d      	b.n	8011e32 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011df6:	7bfb      	ldrb	r3, [r7, #15]
 8011df8:	2b02      	cmp	r3, #2
 8011dfa:	d104      	bne.n	8011e06 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8011dfc:	6879      	ldr	r1, [r7, #4]
 8011dfe:	2008      	movs	r0, #8
 8011e00:	f7ff f936 	bl	8011070 <memp_free>
 8011e04:	e015      	b.n	8011e32 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011e06:	7bfb      	ldrb	r3, [r7, #15]
 8011e08:	2b01      	cmp	r3, #1
 8011e0a:	d104      	bne.n	8011e16 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8011e0c:	6879      	ldr	r1, [r7, #4]
 8011e0e:	2007      	movs	r0, #7
 8011e10:	f7ff f92e 	bl	8011070 <memp_free>
 8011e14:	e00d      	b.n	8011e32 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011e16:	7bfb      	ldrb	r3, [r7, #15]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d103      	bne.n	8011e24 <pbuf_free+0xc8>
          mem_free(p);
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f7fe fdc1 	bl	80109a4 <mem_free>
 8011e22:	e006      	b.n	8011e32 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011e24:	4b0b      	ldr	r3, [pc, #44]	; (8011e54 <pbuf_free+0xf8>)
 8011e26:	f240 320f 	movw	r2, #783	; 0x30f
 8011e2a:	490f      	ldr	r1, [pc, #60]	; (8011e68 <pbuf_free+0x10c>)
 8011e2c:	480b      	ldr	r0, [pc, #44]	; (8011e5c <pbuf_free+0x100>)
 8011e2e:	f009 f919 	bl	801b064 <iprintf>
        }
      }
      count++;
 8011e32:	7dfb      	ldrb	r3, [r7, #23]
 8011e34:	3301      	adds	r3, #1
 8011e36:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	607b      	str	r3, [r7, #4]
 8011e3c:	e001      	b.n	8011e42 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011e3e:	2300      	movs	r3, #0
 8011e40:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d19f      	bne.n	8011d88 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3718      	adds	r7, #24
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}
 8011e52:	bf00      	nop
 8011e54:	0801c4d0 	.word	0x0801c4d0
 8011e58:	0801c634 	.word	0x0801c634
 8011e5c:	0801c530 	.word	0x0801c530
 8011e60:	0801c660 	.word	0x0801c660
 8011e64:	0801c678 	.word	0x0801c678
 8011e68:	0801c69c 	.word	0x0801c69c

08011e6c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b085      	sub	sp, #20
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011e74:	2300      	movs	r3, #0
 8011e76:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011e78:	e005      	b.n	8011e86 <pbuf_clen+0x1a>
    ++len;
 8011e7a:	89fb      	ldrh	r3, [r7, #14]
 8011e7c:	3301      	adds	r3, #1
 8011e7e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d1f6      	bne.n	8011e7a <pbuf_clen+0xe>
  }
  return len;
 8011e8c:	89fb      	ldrh	r3, [r7, #14]
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	3714      	adds	r7, #20
 8011e92:	46bd      	mov	sp, r7
 8011e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e98:	4770      	bx	lr
	...

08011e9c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b082      	sub	sp, #8
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d010      	beq.n	8011ecc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	7b9b      	ldrb	r3, [r3, #14]
 8011eae:	3301      	adds	r3, #1
 8011eb0:	b2da      	uxtb	r2, r3
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	7b9b      	ldrb	r3, [r3, #14]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d106      	bne.n	8011ecc <pbuf_ref+0x30>
 8011ebe:	4b05      	ldr	r3, [pc, #20]	; (8011ed4 <pbuf_ref+0x38>)
 8011ec0:	f240 3242 	movw	r2, #834	; 0x342
 8011ec4:	4904      	ldr	r1, [pc, #16]	; (8011ed8 <pbuf_ref+0x3c>)
 8011ec6:	4805      	ldr	r0, [pc, #20]	; (8011edc <pbuf_ref+0x40>)
 8011ec8:	f009 f8cc 	bl	801b064 <iprintf>
  }
}
 8011ecc:	bf00      	nop
 8011ece:	3708      	adds	r7, #8
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	0801c4d0 	.word	0x0801c4d0
 8011ed8:	0801c6b0 	.word	0x0801c6b0
 8011edc:	0801c530 	.word	0x0801c530

08011ee0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b084      	sub	sp, #16
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d002      	beq.n	8011ef6 <pbuf_cat+0x16>
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d107      	bne.n	8011f06 <pbuf_cat+0x26>
 8011ef6:	4b20      	ldr	r3, [pc, #128]	; (8011f78 <pbuf_cat+0x98>)
 8011ef8:	f240 3259 	movw	r2, #857	; 0x359
 8011efc:	491f      	ldr	r1, [pc, #124]	; (8011f7c <pbuf_cat+0x9c>)
 8011efe:	4820      	ldr	r0, [pc, #128]	; (8011f80 <pbuf_cat+0xa0>)
 8011f00:	f009 f8b0 	bl	801b064 <iprintf>
 8011f04:	e034      	b.n	8011f70 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	60fb      	str	r3, [r7, #12]
 8011f0a:	e00a      	b.n	8011f22 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	891a      	ldrh	r2, [r3, #8]
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	891b      	ldrh	r3, [r3, #8]
 8011f14:	4413      	add	r3, r2
 8011f16:	b29a      	uxth	r2, r3
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	60fb      	str	r3, [r7, #12]
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d1f0      	bne.n	8011f0c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	891a      	ldrh	r2, [r3, #8]
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	895b      	ldrh	r3, [r3, #10]
 8011f32:	429a      	cmp	r2, r3
 8011f34:	d006      	beq.n	8011f44 <pbuf_cat+0x64>
 8011f36:	4b10      	ldr	r3, [pc, #64]	; (8011f78 <pbuf_cat+0x98>)
 8011f38:	f240 3262 	movw	r2, #866	; 0x362
 8011f3c:	4911      	ldr	r1, [pc, #68]	; (8011f84 <pbuf_cat+0xa4>)
 8011f3e:	4810      	ldr	r0, [pc, #64]	; (8011f80 <pbuf_cat+0xa0>)
 8011f40:	f009 f890 	bl	801b064 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d006      	beq.n	8011f5a <pbuf_cat+0x7a>
 8011f4c:	4b0a      	ldr	r3, [pc, #40]	; (8011f78 <pbuf_cat+0x98>)
 8011f4e:	f240 3263 	movw	r2, #867	; 0x363
 8011f52:	490d      	ldr	r1, [pc, #52]	; (8011f88 <pbuf_cat+0xa8>)
 8011f54:	480a      	ldr	r0, [pc, #40]	; (8011f80 <pbuf_cat+0xa0>)
 8011f56:	f009 f885 	bl	801b064 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	891a      	ldrh	r2, [r3, #8]
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	891b      	ldrh	r3, [r3, #8]
 8011f62:	4413      	add	r3, r2
 8011f64:	b29a      	uxth	r2, r3
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	683a      	ldr	r2, [r7, #0]
 8011f6e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011f70:	3710      	adds	r7, #16
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
 8011f76:	bf00      	nop
 8011f78:	0801c4d0 	.word	0x0801c4d0
 8011f7c:	0801c6c4 	.word	0x0801c6c4
 8011f80:	0801c530 	.word	0x0801c530
 8011f84:	0801c6fc 	.word	0x0801c6fc
 8011f88:	0801c72c 	.word	0x0801c72c

08011f8c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b086      	sub	sp, #24
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011f96:	2300      	movs	r3, #0
 8011f98:	617b      	str	r3, [r7, #20]
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d008      	beq.n	8011fb6 <pbuf_copy+0x2a>
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d005      	beq.n	8011fb6 <pbuf_copy+0x2a>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	891a      	ldrh	r2, [r3, #8]
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	891b      	ldrh	r3, [r3, #8]
 8011fb2:	429a      	cmp	r2, r3
 8011fb4:	d209      	bcs.n	8011fca <pbuf_copy+0x3e>
 8011fb6:	4b57      	ldr	r3, [pc, #348]	; (8012114 <pbuf_copy+0x188>)
 8011fb8:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011fbc:	4956      	ldr	r1, [pc, #344]	; (8012118 <pbuf_copy+0x18c>)
 8011fbe:	4857      	ldr	r0, [pc, #348]	; (801211c <pbuf_copy+0x190>)
 8011fc0:	f009 f850 	bl	801b064 <iprintf>
 8011fc4:	f06f 030f 	mvn.w	r3, #15
 8011fc8:	e09f      	b.n	801210a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	895b      	ldrh	r3, [r3, #10]
 8011fce:	461a      	mov	r2, r3
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	1ad2      	subs	r2, r2, r3
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	895b      	ldrh	r3, [r3, #10]
 8011fd8:	4619      	mov	r1, r3
 8011fda:	693b      	ldr	r3, [r7, #16]
 8011fdc:	1acb      	subs	r3, r1, r3
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d306      	bcc.n	8011ff0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	895b      	ldrh	r3, [r3, #10]
 8011fe6:	461a      	mov	r2, r3
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	1ad3      	subs	r3, r2, r3
 8011fec:	60fb      	str	r3, [r7, #12]
 8011fee:	e005      	b.n	8011ffc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	895b      	ldrh	r3, [r3, #10]
 8011ff4:	461a      	mov	r2, r3
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	1ad3      	subs	r3, r2, r3
 8011ffa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	685a      	ldr	r2, [r3, #4]
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	18d0      	adds	r0, r2, r3
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	685a      	ldr	r2, [r3, #4]
 8012008:	693b      	ldr	r3, [r7, #16]
 801200a:	4413      	add	r3, r2
 801200c:	68fa      	ldr	r2, [r7, #12]
 801200e:	4619      	mov	r1, r3
 8012010:	f009 f903 	bl	801b21a <memcpy>
    offset_to += len;
 8012014:	697a      	ldr	r2, [r7, #20]
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	4413      	add	r3, r2
 801201a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801201c:	693a      	ldr	r2, [r7, #16]
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	4413      	add	r3, r2
 8012022:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	895b      	ldrh	r3, [r3, #10]
 8012028:	461a      	mov	r2, r3
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	4293      	cmp	r3, r2
 801202e:	d906      	bls.n	801203e <pbuf_copy+0xb2>
 8012030:	4b38      	ldr	r3, [pc, #224]	; (8012114 <pbuf_copy+0x188>)
 8012032:	f240 32d9 	movw	r2, #985	; 0x3d9
 8012036:	493a      	ldr	r1, [pc, #232]	; (8012120 <pbuf_copy+0x194>)
 8012038:	4838      	ldr	r0, [pc, #224]	; (801211c <pbuf_copy+0x190>)
 801203a:	f009 f813 	bl	801b064 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	895b      	ldrh	r3, [r3, #10]
 8012042:	461a      	mov	r2, r3
 8012044:	693b      	ldr	r3, [r7, #16]
 8012046:	4293      	cmp	r3, r2
 8012048:	d906      	bls.n	8012058 <pbuf_copy+0xcc>
 801204a:	4b32      	ldr	r3, [pc, #200]	; (8012114 <pbuf_copy+0x188>)
 801204c:	f240 32da 	movw	r2, #986	; 0x3da
 8012050:	4934      	ldr	r1, [pc, #208]	; (8012124 <pbuf_copy+0x198>)
 8012052:	4832      	ldr	r0, [pc, #200]	; (801211c <pbuf_copy+0x190>)
 8012054:	f009 f806 	bl	801b064 <iprintf>
    if (offset_from >= p_from->len) {
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	895b      	ldrh	r3, [r3, #10]
 801205c:	461a      	mov	r2, r3
 801205e:	693b      	ldr	r3, [r7, #16]
 8012060:	4293      	cmp	r3, r2
 8012062:	d304      	bcc.n	801206e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012064:	2300      	movs	r3, #0
 8012066:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	895b      	ldrh	r3, [r3, #10]
 8012072:	461a      	mov	r2, r3
 8012074:	697b      	ldr	r3, [r7, #20]
 8012076:	4293      	cmp	r3, r2
 8012078:	d114      	bne.n	80120a4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801207a:	2300      	movs	r3, #0
 801207c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d10c      	bne.n	80120a4 <pbuf_copy+0x118>
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d009      	beq.n	80120a4 <pbuf_copy+0x118>
 8012090:	4b20      	ldr	r3, [pc, #128]	; (8012114 <pbuf_copy+0x188>)
 8012092:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8012096:	4924      	ldr	r1, [pc, #144]	; (8012128 <pbuf_copy+0x19c>)
 8012098:	4820      	ldr	r0, [pc, #128]	; (801211c <pbuf_copy+0x190>)
 801209a:	f008 ffe3 	bl	801b064 <iprintf>
 801209e:	f06f 030f 	mvn.w	r3, #15
 80120a2:	e032      	b.n	801210a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d013      	beq.n	80120d2 <pbuf_copy+0x146>
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	895a      	ldrh	r2, [r3, #10]
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	891b      	ldrh	r3, [r3, #8]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d10d      	bne.n	80120d2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d009      	beq.n	80120d2 <pbuf_copy+0x146>
 80120be:	4b15      	ldr	r3, [pc, #84]	; (8012114 <pbuf_copy+0x188>)
 80120c0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80120c4:	4919      	ldr	r1, [pc, #100]	; (801212c <pbuf_copy+0x1a0>)
 80120c6:	4815      	ldr	r0, [pc, #84]	; (801211c <pbuf_copy+0x190>)
 80120c8:	f008 ffcc 	bl	801b064 <iprintf>
 80120cc:	f06f 0305 	mvn.w	r3, #5
 80120d0:	e01b      	b.n	801210a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d013      	beq.n	8012100 <pbuf_copy+0x174>
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	895a      	ldrh	r2, [r3, #10]
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	891b      	ldrh	r3, [r3, #8]
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d10d      	bne.n	8012100 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d009      	beq.n	8012100 <pbuf_copy+0x174>
 80120ec:	4b09      	ldr	r3, [pc, #36]	; (8012114 <pbuf_copy+0x188>)
 80120ee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80120f2:	490e      	ldr	r1, [pc, #56]	; (801212c <pbuf_copy+0x1a0>)
 80120f4:	4809      	ldr	r0, [pc, #36]	; (801211c <pbuf_copy+0x190>)
 80120f6:	f008 ffb5 	bl	801b064 <iprintf>
 80120fa:	f06f 0305 	mvn.w	r3, #5
 80120fe:	e004      	b.n	801210a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012100:	683b      	ldr	r3, [r7, #0]
 8012102:	2b00      	cmp	r3, #0
 8012104:	f47f af61 	bne.w	8011fca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012108:	2300      	movs	r3, #0
}
 801210a:	4618      	mov	r0, r3
 801210c:	3718      	adds	r7, #24
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}
 8012112:	bf00      	nop
 8012114:	0801c4d0 	.word	0x0801c4d0
 8012118:	0801c778 	.word	0x0801c778
 801211c:	0801c530 	.word	0x0801c530
 8012120:	0801c7a8 	.word	0x0801c7a8
 8012124:	0801c7c0 	.word	0x0801c7c0
 8012128:	0801c7dc 	.word	0x0801c7dc
 801212c:	0801c7ec 	.word	0x0801c7ec

08012130 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b088      	sub	sp, #32
 8012134:	af00      	add	r7, sp, #0
 8012136:	60f8      	str	r0, [r7, #12]
 8012138:	60b9      	str	r1, [r7, #8]
 801213a:	4611      	mov	r1, r2
 801213c:	461a      	mov	r2, r3
 801213e:	460b      	mov	r3, r1
 8012140:	80fb      	strh	r3, [r7, #6]
 8012142:	4613      	mov	r3, r2
 8012144:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012146:	2300      	movs	r3, #0
 8012148:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801214a:	2300      	movs	r3, #0
 801214c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d108      	bne.n	8012166 <pbuf_copy_partial+0x36>
 8012154:	4b2b      	ldr	r3, [pc, #172]	; (8012204 <pbuf_copy_partial+0xd4>)
 8012156:	f240 420a 	movw	r2, #1034	; 0x40a
 801215a:	492b      	ldr	r1, [pc, #172]	; (8012208 <pbuf_copy_partial+0xd8>)
 801215c:	482b      	ldr	r0, [pc, #172]	; (801220c <pbuf_copy_partial+0xdc>)
 801215e:	f008 ff81 	bl	801b064 <iprintf>
 8012162:	2300      	movs	r3, #0
 8012164:	e04a      	b.n	80121fc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d108      	bne.n	801217e <pbuf_copy_partial+0x4e>
 801216c:	4b25      	ldr	r3, [pc, #148]	; (8012204 <pbuf_copy_partial+0xd4>)
 801216e:	f240 420b 	movw	r2, #1035	; 0x40b
 8012172:	4927      	ldr	r1, [pc, #156]	; (8012210 <pbuf_copy_partial+0xe0>)
 8012174:	4825      	ldr	r0, [pc, #148]	; (801220c <pbuf_copy_partial+0xdc>)
 8012176:	f008 ff75 	bl	801b064 <iprintf>
 801217a:	2300      	movs	r3, #0
 801217c:	e03e      	b.n	80121fc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	61fb      	str	r3, [r7, #28]
 8012182:	e034      	b.n	80121ee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012184:	88bb      	ldrh	r3, [r7, #4]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d00a      	beq.n	80121a0 <pbuf_copy_partial+0x70>
 801218a:	69fb      	ldr	r3, [r7, #28]
 801218c:	895b      	ldrh	r3, [r3, #10]
 801218e:	88ba      	ldrh	r2, [r7, #4]
 8012190:	429a      	cmp	r2, r3
 8012192:	d305      	bcc.n	80121a0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012194:	69fb      	ldr	r3, [r7, #28]
 8012196:	895b      	ldrh	r3, [r3, #10]
 8012198:	88ba      	ldrh	r2, [r7, #4]
 801219a:	1ad3      	subs	r3, r2, r3
 801219c:	80bb      	strh	r3, [r7, #4]
 801219e:	e023      	b.n	80121e8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80121a0:	69fb      	ldr	r3, [r7, #28]
 80121a2:	895a      	ldrh	r2, [r3, #10]
 80121a4:	88bb      	ldrh	r3, [r7, #4]
 80121a6:	1ad3      	subs	r3, r2, r3
 80121a8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80121aa:	8b3a      	ldrh	r2, [r7, #24]
 80121ac:	88fb      	ldrh	r3, [r7, #6]
 80121ae:	429a      	cmp	r2, r3
 80121b0:	d901      	bls.n	80121b6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80121b2:	88fb      	ldrh	r3, [r7, #6]
 80121b4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80121b6:	8b7b      	ldrh	r3, [r7, #26]
 80121b8:	68ba      	ldr	r2, [r7, #8]
 80121ba:	18d0      	adds	r0, r2, r3
 80121bc:	69fb      	ldr	r3, [r7, #28]
 80121be:	685a      	ldr	r2, [r3, #4]
 80121c0:	88bb      	ldrh	r3, [r7, #4]
 80121c2:	4413      	add	r3, r2
 80121c4:	8b3a      	ldrh	r2, [r7, #24]
 80121c6:	4619      	mov	r1, r3
 80121c8:	f009 f827 	bl	801b21a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80121cc:	8afa      	ldrh	r2, [r7, #22]
 80121ce:	8b3b      	ldrh	r3, [r7, #24]
 80121d0:	4413      	add	r3, r2
 80121d2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80121d4:	8b7a      	ldrh	r2, [r7, #26]
 80121d6:	8b3b      	ldrh	r3, [r7, #24]
 80121d8:	4413      	add	r3, r2
 80121da:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80121dc:	88fa      	ldrh	r2, [r7, #6]
 80121de:	8b3b      	ldrh	r3, [r7, #24]
 80121e0:	1ad3      	subs	r3, r2, r3
 80121e2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80121e4:	2300      	movs	r3, #0
 80121e6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	61fb      	str	r3, [r7, #28]
 80121ee:	88fb      	ldrh	r3, [r7, #6]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d002      	beq.n	80121fa <pbuf_copy_partial+0xca>
 80121f4:	69fb      	ldr	r3, [r7, #28]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d1c4      	bne.n	8012184 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80121fa:	8afb      	ldrh	r3, [r7, #22]
}
 80121fc:	4618      	mov	r0, r3
 80121fe:	3720      	adds	r7, #32
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}
 8012204:	0801c4d0 	.word	0x0801c4d0
 8012208:	0801c818 	.word	0x0801c818
 801220c:	0801c530 	.word	0x0801c530
 8012210:	0801c838 	.word	0x0801c838

08012214 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b084      	sub	sp, #16
 8012218:	af00      	add	r7, sp, #0
 801221a:	4603      	mov	r3, r0
 801221c:	603a      	str	r2, [r7, #0]
 801221e:	71fb      	strb	r3, [r7, #7]
 8012220:	460b      	mov	r3, r1
 8012222:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	8919      	ldrh	r1, [r3, #8]
 8012228:	88ba      	ldrh	r2, [r7, #4]
 801222a:	79fb      	ldrb	r3, [r7, #7]
 801222c:	4618      	mov	r0, r3
 801222e:	f7ff fab1 	bl	8011794 <pbuf_alloc>
 8012232:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d101      	bne.n	801223e <pbuf_clone+0x2a>
    return NULL;
 801223a:	2300      	movs	r3, #0
 801223c:	e011      	b.n	8012262 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801223e:	6839      	ldr	r1, [r7, #0]
 8012240:	68f8      	ldr	r0, [r7, #12]
 8012242:	f7ff fea3 	bl	8011f8c <pbuf_copy>
 8012246:	4603      	mov	r3, r0
 8012248:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801224a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d006      	beq.n	8012260 <pbuf_clone+0x4c>
 8012252:	4b06      	ldr	r3, [pc, #24]	; (801226c <pbuf_clone+0x58>)
 8012254:	f240 5224 	movw	r2, #1316	; 0x524
 8012258:	4905      	ldr	r1, [pc, #20]	; (8012270 <pbuf_clone+0x5c>)
 801225a:	4806      	ldr	r0, [pc, #24]	; (8012274 <pbuf_clone+0x60>)
 801225c:	f008 ff02 	bl	801b064 <iprintf>
  return q;
 8012260:	68fb      	ldr	r3, [r7, #12]
}
 8012262:	4618      	mov	r0, r3
 8012264:	3710      	adds	r7, #16
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}
 801226a:	bf00      	nop
 801226c:	0801c4d0 	.word	0x0801c4d0
 8012270:	0801c944 	.word	0x0801c944
 8012274:	0801c530 	.word	0x0801c530

08012278 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801227c:	f008 fdf2 	bl	801ae64 <rand>
 8012280:	4603      	mov	r3, r0
 8012282:	b29b      	uxth	r3, r3
 8012284:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012288:	b29b      	uxth	r3, r3
 801228a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801228e:	b29a      	uxth	r2, r3
 8012290:	4b01      	ldr	r3, [pc, #4]	; (8012298 <tcp_init+0x20>)
 8012292:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012294:	bf00      	nop
 8012296:	bd80      	pop	{r7, pc}
 8012298:	2000012c 	.word	0x2000012c

0801229c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b082      	sub	sp, #8
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	7d1b      	ldrb	r3, [r3, #20]
 80122a8:	2b01      	cmp	r3, #1
 80122aa:	d105      	bne.n	80122b8 <tcp_free+0x1c>
 80122ac:	4b06      	ldr	r3, [pc, #24]	; (80122c8 <tcp_free+0x2c>)
 80122ae:	22d4      	movs	r2, #212	; 0xd4
 80122b0:	4906      	ldr	r1, [pc, #24]	; (80122cc <tcp_free+0x30>)
 80122b2:	4807      	ldr	r0, [pc, #28]	; (80122d0 <tcp_free+0x34>)
 80122b4:	f008 fed6 	bl	801b064 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80122b8:	6879      	ldr	r1, [r7, #4]
 80122ba:	2001      	movs	r0, #1
 80122bc:	f7fe fed8 	bl	8011070 <memp_free>
}
 80122c0:	bf00      	nop
 80122c2:	3708      	adds	r7, #8
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bd80      	pop	{r7, pc}
 80122c8:	0801c9d0 	.word	0x0801c9d0
 80122cc:	0801ca00 	.word	0x0801ca00
 80122d0:	0801ca14 	.word	0x0801ca14

080122d4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b082      	sub	sp, #8
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	7d1b      	ldrb	r3, [r3, #20]
 80122e0:	2b01      	cmp	r3, #1
 80122e2:	d105      	bne.n	80122f0 <tcp_free_listen+0x1c>
 80122e4:	4b06      	ldr	r3, [pc, #24]	; (8012300 <tcp_free_listen+0x2c>)
 80122e6:	22df      	movs	r2, #223	; 0xdf
 80122e8:	4906      	ldr	r1, [pc, #24]	; (8012304 <tcp_free_listen+0x30>)
 80122ea:	4807      	ldr	r0, [pc, #28]	; (8012308 <tcp_free_listen+0x34>)
 80122ec:	f008 feba 	bl	801b064 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80122f0:	6879      	ldr	r1, [r7, #4]
 80122f2:	2002      	movs	r0, #2
 80122f4:	f7fe febc 	bl	8011070 <memp_free>
}
 80122f8:	bf00      	nop
 80122fa:	3708      	adds	r7, #8
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	0801c9d0 	.word	0x0801c9d0
 8012304:	0801ca3c 	.word	0x0801ca3c
 8012308:	0801ca14 	.word	0x0801ca14

0801230c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012310:	f000 fea2 	bl	8013058 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012314:	4b07      	ldr	r3, [pc, #28]	; (8012334 <tcp_tmr+0x28>)
 8012316:	781b      	ldrb	r3, [r3, #0]
 8012318:	3301      	adds	r3, #1
 801231a:	b2da      	uxtb	r2, r3
 801231c:	4b05      	ldr	r3, [pc, #20]	; (8012334 <tcp_tmr+0x28>)
 801231e:	701a      	strb	r2, [r3, #0]
 8012320:	4b04      	ldr	r3, [pc, #16]	; (8012334 <tcp_tmr+0x28>)
 8012322:	781b      	ldrb	r3, [r3, #0]
 8012324:	f003 0301 	and.w	r3, r3, #1
 8012328:	2b00      	cmp	r3, #0
 801232a:	d001      	beq.n	8012330 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801232c:	f000 fb54 	bl	80129d8 <tcp_slowtmr>
  }
}
 8012330:	bf00      	nop
 8012332:	bd80      	pop	{r7, pc}
 8012334:	2000862d 	.word	0x2000862d

08012338 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b084      	sub	sp, #16
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d105      	bne.n	8012354 <tcp_remove_listener+0x1c>
 8012348:	4b0d      	ldr	r3, [pc, #52]	; (8012380 <tcp_remove_listener+0x48>)
 801234a:	22ff      	movs	r2, #255	; 0xff
 801234c:	490d      	ldr	r1, [pc, #52]	; (8012384 <tcp_remove_listener+0x4c>)
 801234e:	480e      	ldr	r0, [pc, #56]	; (8012388 <tcp_remove_listener+0x50>)
 8012350:	f008 fe88 	bl	801b064 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	60fb      	str	r3, [r7, #12]
 8012358:	e00a      	b.n	8012370 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801235e:	683a      	ldr	r2, [r7, #0]
 8012360:	429a      	cmp	r2, r3
 8012362:	d102      	bne.n	801236a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	2200      	movs	r2, #0
 8012368:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	68db      	ldr	r3, [r3, #12]
 801236e:	60fb      	str	r3, [r7, #12]
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d1f1      	bne.n	801235a <tcp_remove_listener+0x22>
    }
  }
}
 8012376:	bf00      	nop
 8012378:	bf00      	nop
 801237a:	3710      	adds	r7, #16
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	0801c9d0 	.word	0x0801c9d0
 8012384:	0801ca58 	.word	0x0801ca58
 8012388:	0801ca14 	.word	0x0801ca14

0801238c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b084      	sub	sp, #16
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d106      	bne.n	80123a8 <tcp_listen_closed+0x1c>
 801239a:	4b14      	ldr	r3, [pc, #80]	; (80123ec <tcp_listen_closed+0x60>)
 801239c:	f240 1211 	movw	r2, #273	; 0x111
 80123a0:	4913      	ldr	r1, [pc, #76]	; (80123f0 <tcp_listen_closed+0x64>)
 80123a2:	4814      	ldr	r0, [pc, #80]	; (80123f4 <tcp_listen_closed+0x68>)
 80123a4:	f008 fe5e 	bl	801b064 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	7d1b      	ldrb	r3, [r3, #20]
 80123ac:	2b01      	cmp	r3, #1
 80123ae:	d006      	beq.n	80123be <tcp_listen_closed+0x32>
 80123b0:	4b0e      	ldr	r3, [pc, #56]	; (80123ec <tcp_listen_closed+0x60>)
 80123b2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80123b6:	4910      	ldr	r1, [pc, #64]	; (80123f8 <tcp_listen_closed+0x6c>)
 80123b8:	480e      	ldr	r0, [pc, #56]	; (80123f4 <tcp_listen_closed+0x68>)
 80123ba:	f008 fe53 	bl	801b064 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80123be:	2301      	movs	r3, #1
 80123c0:	60fb      	str	r3, [r7, #12]
 80123c2:	e00b      	b.n	80123dc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80123c4:	4a0d      	ldr	r2, [pc, #52]	; (80123fc <tcp_listen_closed+0x70>)
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	6879      	ldr	r1, [r7, #4]
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7ff ffb1 	bl	8012338 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	3301      	adds	r3, #1
 80123da:	60fb      	str	r3, [r7, #12]
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	2b03      	cmp	r3, #3
 80123e0:	d9f0      	bls.n	80123c4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80123e2:	bf00      	nop
 80123e4:	bf00      	nop
 80123e6:	3710      	adds	r7, #16
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}
 80123ec:	0801c9d0 	.word	0x0801c9d0
 80123f0:	0801ca80 	.word	0x0801ca80
 80123f4:	0801ca14 	.word	0x0801ca14
 80123f8:	0801ca8c 	.word	0x0801ca8c
 80123fc:	0801eac4 	.word	0x0801eac4

08012400 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012400:	b5b0      	push	{r4, r5, r7, lr}
 8012402:	b088      	sub	sp, #32
 8012404:	af04      	add	r7, sp, #16
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	460b      	mov	r3, r1
 801240a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d106      	bne.n	8012420 <tcp_close_shutdown+0x20>
 8012412:	4b63      	ldr	r3, [pc, #396]	; (80125a0 <tcp_close_shutdown+0x1a0>)
 8012414:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8012418:	4962      	ldr	r1, [pc, #392]	; (80125a4 <tcp_close_shutdown+0x1a4>)
 801241a:	4863      	ldr	r0, [pc, #396]	; (80125a8 <tcp_close_shutdown+0x1a8>)
 801241c:	f008 fe22 	bl	801b064 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012420:	78fb      	ldrb	r3, [r7, #3]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d066      	beq.n	80124f4 <tcp_close_shutdown+0xf4>
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	7d1b      	ldrb	r3, [r3, #20]
 801242a:	2b04      	cmp	r3, #4
 801242c:	d003      	beq.n	8012436 <tcp_close_shutdown+0x36>
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	7d1b      	ldrb	r3, [r3, #20]
 8012432:	2b07      	cmp	r3, #7
 8012434:	d15e      	bne.n	80124f4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801243a:	2b00      	cmp	r3, #0
 801243c:	d104      	bne.n	8012448 <tcp_close_shutdown+0x48>
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012446:	d055      	beq.n	80124f4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	8b5b      	ldrh	r3, [r3, #26]
 801244c:	f003 0310 	and.w	r3, r3, #16
 8012450:	2b00      	cmp	r3, #0
 8012452:	d106      	bne.n	8012462 <tcp_close_shutdown+0x62>
 8012454:	4b52      	ldr	r3, [pc, #328]	; (80125a0 <tcp_close_shutdown+0x1a0>)
 8012456:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801245a:	4954      	ldr	r1, [pc, #336]	; (80125ac <tcp_close_shutdown+0x1ac>)
 801245c:	4852      	ldr	r0, [pc, #328]	; (80125a8 <tcp_close_shutdown+0x1a8>)
 801245e:	f008 fe01 	bl	801b064 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801246a:	687d      	ldr	r5, [r7, #4]
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	3304      	adds	r3, #4
 8012470:	687a      	ldr	r2, [r7, #4]
 8012472:	8ad2      	ldrh	r2, [r2, #22]
 8012474:	6879      	ldr	r1, [r7, #4]
 8012476:	8b09      	ldrh	r1, [r1, #24]
 8012478:	9102      	str	r1, [sp, #8]
 801247a:	9201      	str	r2, [sp, #4]
 801247c:	9300      	str	r3, [sp, #0]
 801247e:	462b      	mov	r3, r5
 8012480:	4622      	mov	r2, r4
 8012482:	4601      	mov	r1, r0
 8012484:	6878      	ldr	r0, [r7, #4]
 8012486:	f004 fe91 	bl	80171ac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f001 f8c6 	bl	801361c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012490:	4b47      	ldr	r3, [pc, #284]	; (80125b0 <tcp_close_shutdown+0x1b0>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	687a      	ldr	r2, [r7, #4]
 8012496:	429a      	cmp	r2, r3
 8012498:	d105      	bne.n	80124a6 <tcp_close_shutdown+0xa6>
 801249a:	4b45      	ldr	r3, [pc, #276]	; (80125b0 <tcp_close_shutdown+0x1b0>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	68db      	ldr	r3, [r3, #12]
 80124a0:	4a43      	ldr	r2, [pc, #268]	; (80125b0 <tcp_close_shutdown+0x1b0>)
 80124a2:	6013      	str	r3, [r2, #0]
 80124a4:	e013      	b.n	80124ce <tcp_close_shutdown+0xce>
 80124a6:	4b42      	ldr	r3, [pc, #264]	; (80125b0 <tcp_close_shutdown+0x1b0>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	60fb      	str	r3, [r7, #12]
 80124ac:	e00c      	b.n	80124c8 <tcp_close_shutdown+0xc8>
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	68db      	ldr	r3, [r3, #12]
 80124b2:	687a      	ldr	r2, [r7, #4]
 80124b4:	429a      	cmp	r2, r3
 80124b6:	d104      	bne.n	80124c2 <tcp_close_shutdown+0xc2>
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	68da      	ldr	r2, [r3, #12]
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	60da      	str	r2, [r3, #12]
 80124c0:	e005      	b.n	80124ce <tcp_close_shutdown+0xce>
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	68db      	ldr	r3, [r3, #12]
 80124c6:	60fb      	str	r3, [r7, #12]
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d1ef      	bne.n	80124ae <tcp_close_shutdown+0xae>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	2200      	movs	r2, #0
 80124d2:	60da      	str	r2, [r3, #12]
 80124d4:	4b37      	ldr	r3, [pc, #220]	; (80125b4 <tcp_close_shutdown+0x1b4>)
 80124d6:	2201      	movs	r2, #1
 80124d8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80124da:	4b37      	ldr	r3, [pc, #220]	; (80125b8 <tcp_close_shutdown+0x1b8>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	687a      	ldr	r2, [r7, #4]
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d102      	bne.n	80124ea <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80124e4:	f003 fd5e 	bl	8015fa4 <tcp_trigger_input_pcb_close>
 80124e8:	e002      	b.n	80124f0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	f7ff fed6 	bl	801229c <tcp_free>
      }
      return ERR_OK;
 80124f0:	2300      	movs	r3, #0
 80124f2:	e050      	b.n	8012596 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	7d1b      	ldrb	r3, [r3, #20]
 80124f8:	2b02      	cmp	r3, #2
 80124fa:	d03b      	beq.n	8012574 <tcp_close_shutdown+0x174>
 80124fc:	2b02      	cmp	r3, #2
 80124fe:	dc44      	bgt.n	801258a <tcp_close_shutdown+0x18a>
 8012500:	2b00      	cmp	r3, #0
 8012502:	d002      	beq.n	801250a <tcp_close_shutdown+0x10a>
 8012504:	2b01      	cmp	r3, #1
 8012506:	d02a      	beq.n	801255e <tcp_close_shutdown+0x15e>
 8012508:	e03f      	b.n	801258a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	8adb      	ldrh	r3, [r3, #22]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d021      	beq.n	8012556 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012512:	4b2a      	ldr	r3, [pc, #168]	; (80125bc <tcp_close_shutdown+0x1bc>)
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	687a      	ldr	r2, [r7, #4]
 8012518:	429a      	cmp	r2, r3
 801251a:	d105      	bne.n	8012528 <tcp_close_shutdown+0x128>
 801251c:	4b27      	ldr	r3, [pc, #156]	; (80125bc <tcp_close_shutdown+0x1bc>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	68db      	ldr	r3, [r3, #12]
 8012522:	4a26      	ldr	r2, [pc, #152]	; (80125bc <tcp_close_shutdown+0x1bc>)
 8012524:	6013      	str	r3, [r2, #0]
 8012526:	e013      	b.n	8012550 <tcp_close_shutdown+0x150>
 8012528:	4b24      	ldr	r3, [pc, #144]	; (80125bc <tcp_close_shutdown+0x1bc>)
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	60bb      	str	r3, [r7, #8]
 801252e:	e00c      	b.n	801254a <tcp_close_shutdown+0x14a>
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	68db      	ldr	r3, [r3, #12]
 8012534:	687a      	ldr	r2, [r7, #4]
 8012536:	429a      	cmp	r2, r3
 8012538:	d104      	bne.n	8012544 <tcp_close_shutdown+0x144>
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	68da      	ldr	r2, [r3, #12]
 801253e:	68bb      	ldr	r3, [r7, #8]
 8012540:	60da      	str	r2, [r3, #12]
 8012542:	e005      	b.n	8012550 <tcp_close_shutdown+0x150>
 8012544:	68bb      	ldr	r3, [r7, #8]
 8012546:	68db      	ldr	r3, [r3, #12]
 8012548:	60bb      	str	r3, [r7, #8]
 801254a:	68bb      	ldr	r3, [r7, #8]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d1ef      	bne.n	8012530 <tcp_close_shutdown+0x130>
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	2200      	movs	r2, #0
 8012554:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f7ff fea0 	bl	801229c <tcp_free>
      break;
 801255c:	e01a      	b.n	8012594 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801255e:	6878      	ldr	r0, [r7, #4]
 8012560:	f7ff ff14 	bl	801238c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012564:	6879      	ldr	r1, [r7, #4]
 8012566:	4816      	ldr	r0, [pc, #88]	; (80125c0 <tcp_close_shutdown+0x1c0>)
 8012568:	f001 f8a8 	bl	80136bc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801256c:	6878      	ldr	r0, [r7, #4]
 801256e:	f7ff feb1 	bl	80122d4 <tcp_free_listen>
      break;
 8012572:	e00f      	b.n	8012594 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012574:	6879      	ldr	r1, [r7, #4]
 8012576:	480e      	ldr	r0, [pc, #56]	; (80125b0 <tcp_close_shutdown+0x1b0>)
 8012578:	f001 f8a0 	bl	80136bc <tcp_pcb_remove>
 801257c:	4b0d      	ldr	r3, [pc, #52]	; (80125b4 <tcp_close_shutdown+0x1b4>)
 801257e:	2201      	movs	r2, #1
 8012580:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f7ff fe8a 	bl	801229c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012588:	e004      	b.n	8012594 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f000 f81a 	bl	80125c4 <tcp_close_shutdown_fin>
 8012590:	4603      	mov	r3, r0
 8012592:	e000      	b.n	8012596 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8012594:	2300      	movs	r3, #0
}
 8012596:	4618      	mov	r0, r3
 8012598:	3710      	adds	r7, #16
 801259a:	46bd      	mov	sp, r7
 801259c:	bdb0      	pop	{r4, r5, r7, pc}
 801259e:	bf00      	nop
 80125a0:	0801c9d0 	.word	0x0801c9d0
 80125a4:	0801caa4 	.word	0x0801caa4
 80125a8:	0801ca14 	.word	0x0801ca14
 80125ac:	0801cac4 	.word	0x0801cac4
 80125b0:	20008624 	.word	0x20008624
 80125b4:	2000862c 	.word	0x2000862c
 80125b8:	20008664 	.word	0x20008664
 80125bc:	2000861c 	.word	0x2000861c
 80125c0:	20008620 	.word	0x20008620

080125c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b084      	sub	sp, #16
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d106      	bne.n	80125e0 <tcp_close_shutdown_fin+0x1c>
 80125d2:	4b2e      	ldr	r3, [pc, #184]	; (801268c <tcp_close_shutdown_fin+0xc8>)
 80125d4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80125d8:	492d      	ldr	r1, [pc, #180]	; (8012690 <tcp_close_shutdown_fin+0xcc>)
 80125da:	482e      	ldr	r0, [pc, #184]	; (8012694 <tcp_close_shutdown_fin+0xd0>)
 80125dc:	f008 fd42 	bl	801b064 <iprintf>

  switch (pcb->state) {
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	7d1b      	ldrb	r3, [r3, #20]
 80125e4:	2b07      	cmp	r3, #7
 80125e6:	d020      	beq.n	801262a <tcp_close_shutdown_fin+0x66>
 80125e8:	2b07      	cmp	r3, #7
 80125ea:	dc2b      	bgt.n	8012644 <tcp_close_shutdown_fin+0x80>
 80125ec:	2b03      	cmp	r3, #3
 80125ee:	d002      	beq.n	80125f6 <tcp_close_shutdown_fin+0x32>
 80125f0:	2b04      	cmp	r3, #4
 80125f2:	d00d      	beq.n	8012610 <tcp_close_shutdown_fin+0x4c>
 80125f4:	e026      	b.n	8012644 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f003 fee6 	bl	80163c8 <tcp_send_fin>
 80125fc:	4603      	mov	r3, r0
 80125fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d11f      	bne.n	8012648 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2205      	movs	r2, #5
 801260c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801260e:	e01b      	b.n	8012648 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012610:	6878      	ldr	r0, [r7, #4]
 8012612:	f003 fed9 	bl	80163c8 <tcp_send_fin>
 8012616:	4603      	mov	r3, r0
 8012618:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801261a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d114      	bne.n	801264c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	2205      	movs	r2, #5
 8012626:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012628:	e010      	b.n	801264c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f003 fecc 	bl	80163c8 <tcp_send_fin>
 8012630:	4603      	mov	r3, r0
 8012632:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d109      	bne.n	8012650 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	2209      	movs	r2, #9
 8012640:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012642:	e005      	b.n	8012650 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012644:	2300      	movs	r3, #0
 8012646:	e01c      	b.n	8012682 <tcp_close_shutdown_fin+0xbe>
      break;
 8012648:	bf00      	nop
 801264a:	e002      	b.n	8012652 <tcp_close_shutdown_fin+0x8e>
      break;
 801264c:	bf00      	nop
 801264e:	e000      	b.n	8012652 <tcp_close_shutdown_fin+0x8e>
      break;
 8012650:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d103      	bne.n	8012662 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f003 fff2 	bl	8016644 <tcp_output>
 8012660:	e00d      	b.n	801267e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012666:	f1b3 3fff 	cmp.w	r3, #4294967295
 801266a:	d108      	bne.n	801267e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	8b5b      	ldrh	r3, [r3, #26]
 8012670:	f043 0308 	orr.w	r3, r3, #8
 8012674:	b29a      	uxth	r2, r3
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801267a:	2300      	movs	r3, #0
 801267c:	e001      	b.n	8012682 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801267e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012682:	4618      	mov	r0, r3
 8012684:	3710      	adds	r7, #16
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
 801268a:	bf00      	nop
 801268c:	0801c9d0 	.word	0x0801c9d0
 8012690:	0801ca80 	.word	0x0801ca80
 8012694:	0801ca14 	.word	0x0801ca14

08012698 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d109      	bne.n	80126ba <tcp_close+0x22>
 80126a6:	4b0f      	ldr	r3, [pc, #60]	; (80126e4 <tcp_close+0x4c>)
 80126a8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80126ac:	490e      	ldr	r1, [pc, #56]	; (80126e8 <tcp_close+0x50>)
 80126ae:	480f      	ldr	r0, [pc, #60]	; (80126ec <tcp_close+0x54>)
 80126b0:	f008 fcd8 	bl	801b064 <iprintf>
 80126b4:	f06f 030f 	mvn.w	r3, #15
 80126b8:	e00f      	b.n	80126da <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	7d1b      	ldrb	r3, [r3, #20]
 80126be:	2b01      	cmp	r3, #1
 80126c0:	d006      	beq.n	80126d0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	8b5b      	ldrh	r3, [r3, #26]
 80126c6:	f043 0310 	orr.w	r3, r3, #16
 80126ca:	b29a      	uxth	r2, r3
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80126d0:	2101      	movs	r1, #1
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	f7ff fe94 	bl	8012400 <tcp_close_shutdown>
 80126d8:	4603      	mov	r3, r0
}
 80126da:	4618      	mov	r0, r3
 80126dc:	3708      	adds	r7, #8
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd80      	pop	{r7, pc}
 80126e2:	bf00      	nop
 80126e4:	0801c9d0 	.word	0x0801c9d0
 80126e8:	0801cae0 	.word	0x0801cae0
 80126ec:	0801ca14 	.word	0x0801ca14

080126f0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b08e      	sub	sp, #56	; 0x38
 80126f4:	af04      	add	r7, sp, #16
 80126f6:	6078      	str	r0, [r7, #4]
 80126f8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d107      	bne.n	8012710 <tcp_abandon+0x20>
 8012700:	4b52      	ldr	r3, [pc, #328]	; (801284c <tcp_abandon+0x15c>)
 8012702:	f240 223d 	movw	r2, #573	; 0x23d
 8012706:	4952      	ldr	r1, [pc, #328]	; (8012850 <tcp_abandon+0x160>)
 8012708:	4852      	ldr	r0, [pc, #328]	; (8012854 <tcp_abandon+0x164>)
 801270a:	f008 fcab 	bl	801b064 <iprintf>
 801270e:	e099      	b.n	8012844 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	7d1b      	ldrb	r3, [r3, #20]
 8012714:	2b01      	cmp	r3, #1
 8012716:	d106      	bne.n	8012726 <tcp_abandon+0x36>
 8012718:	4b4c      	ldr	r3, [pc, #304]	; (801284c <tcp_abandon+0x15c>)
 801271a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801271e:	494e      	ldr	r1, [pc, #312]	; (8012858 <tcp_abandon+0x168>)
 8012720:	484c      	ldr	r0, [pc, #304]	; (8012854 <tcp_abandon+0x164>)
 8012722:	f008 fc9f 	bl	801b064 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	7d1b      	ldrb	r3, [r3, #20]
 801272a:	2b0a      	cmp	r3, #10
 801272c:	d107      	bne.n	801273e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801272e:	6879      	ldr	r1, [r7, #4]
 8012730:	484a      	ldr	r0, [pc, #296]	; (801285c <tcp_abandon+0x16c>)
 8012732:	f000 ffc3 	bl	80136bc <tcp_pcb_remove>
    tcp_free(pcb);
 8012736:	6878      	ldr	r0, [r7, #4]
 8012738:	f7ff fdb0 	bl	801229c <tcp_free>
 801273c:	e082      	b.n	8012844 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801273e:	2300      	movs	r3, #0
 8012740:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8012742:	2300      	movs	r3, #0
 8012744:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801274a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012750:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012758:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	691b      	ldr	r3, [r3, #16]
 801275e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	7d1b      	ldrb	r3, [r3, #20]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d126      	bne.n	80127b6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	8adb      	ldrh	r3, [r3, #22]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d02e      	beq.n	80127ce <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012770:	4b3b      	ldr	r3, [pc, #236]	; (8012860 <tcp_abandon+0x170>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	687a      	ldr	r2, [r7, #4]
 8012776:	429a      	cmp	r2, r3
 8012778:	d105      	bne.n	8012786 <tcp_abandon+0x96>
 801277a:	4b39      	ldr	r3, [pc, #228]	; (8012860 <tcp_abandon+0x170>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	68db      	ldr	r3, [r3, #12]
 8012780:	4a37      	ldr	r2, [pc, #220]	; (8012860 <tcp_abandon+0x170>)
 8012782:	6013      	str	r3, [r2, #0]
 8012784:	e013      	b.n	80127ae <tcp_abandon+0xbe>
 8012786:	4b36      	ldr	r3, [pc, #216]	; (8012860 <tcp_abandon+0x170>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	61fb      	str	r3, [r7, #28]
 801278c:	e00c      	b.n	80127a8 <tcp_abandon+0xb8>
 801278e:	69fb      	ldr	r3, [r7, #28]
 8012790:	68db      	ldr	r3, [r3, #12]
 8012792:	687a      	ldr	r2, [r7, #4]
 8012794:	429a      	cmp	r2, r3
 8012796:	d104      	bne.n	80127a2 <tcp_abandon+0xb2>
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	68da      	ldr	r2, [r3, #12]
 801279c:	69fb      	ldr	r3, [r7, #28]
 801279e:	60da      	str	r2, [r3, #12]
 80127a0:	e005      	b.n	80127ae <tcp_abandon+0xbe>
 80127a2:	69fb      	ldr	r3, [r7, #28]
 80127a4:	68db      	ldr	r3, [r3, #12]
 80127a6:	61fb      	str	r3, [r7, #28]
 80127a8:	69fb      	ldr	r3, [r7, #28]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d1ef      	bne.n	801278e <tcp_abandon+0x9e>
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2200      	movs	r2, #0
 80127b2:	60da      	str	r2, [r3, #12]
 80127b4:	e00b      	b.n	80127ce <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	8adb      	ldrh	r3, [r3, #22]
 80127be:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80127c0:	6879      	ldr	r1, [r7, #4]
 80127c2:	4828      	ldr	r0, [pc, #160]	; (8012864 <tcp_abandon+0x174>)
 80127c4:	f000 ff7a 	bl	80136bc <tcp_pcb_remove>
 80127c8:	4b27      	ldr	r3, [pc, #156]	; (8012868 <tcp_abandon+0x178>)
 80127ca:	2201      	movs	r2, #1
 80127cc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d004      	beq.n	80127e0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127da:	4618      	mov	r0, r3
 80127dc:	f000 fd1c 	bl	8013218 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d004      	beq.n	80127f2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127ec:	4618      	mov	r0, r3
 80127ee:	f000 fd13 	bl	8013218 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d004      	beq.n	8012804 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127fe:	4618      	mov	r0, r3
 8012800:	f000 fd0a 	bl	8013218 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012806:	2b00      	cmp	r3, #0
 8012808:	d00e      	beq.n	8012828 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801280a:	6879      	ldr	r1, [r7, #4]
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	3304      	adds	r3, #4
 8012810:	687a      	ldr	r2, [r7, #4]
 8012812:	8b12      	ldrh	r2, [r2, #24]
 8012814:	9202      	str	r2, [sp, #8]
 8012816:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012818:	9201      	str	r2, [sp, #4]
 801281a:	9300      	str	r3, [sp, #0]
 801281c:	460b      	mov	r3, r1
 801281e:	697a      	ldr	r2, [r7, #20]
 8012820:	69b9      	ldr	r1, [r7, #24]
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	f004 fcc2 	bl	80171ac <tcp_rst>
    }
    last_state = pcb->state;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	7d1b      	ldrb	r3, [r3, #20]
 801282c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f7ff fd34 	bl	801229c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d004      	beq.n	8012844 <tcp_abandon+0x154>
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	f06f 010c 	mvn.w	r1, #12
 8012840:	68f8      	ldr	r0, [r7, #12]
 8012842:	4798      	blx	r3
  }
}
 8012844:	3728      	adds	r7, #40	; 0x28
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}
 801284a:	bf00      	nop
 801284c:	0801c9d0 	.word	0x0801c9d0
 8012850:	0801cb14 	.word	0x0801cb14
 8012854:	0801ca14 	.word	0x0801ca14
 8012858:	0801cb30 	.word	0x0801cb30
 801285c:	20008628 	.word	0x20008628
 8012860:	2000861c 	.word	0x2000861c
 8012864:	20008624 	.word	0x20008624
 8012868:	2000862c 	.word	0x2000862c

0801286c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b082      	sub	sp, #8
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012874:	2101      	movs	r1, #1
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f7ff ff3a 	bl	80126f0 <tcp_abandon>
}
 801287c:	bf00      	nop
 801287e:	3708      	adds	r7, #8
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}

08012884 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b084      	sub	sp, #16
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d106      	bne.n	80128a0 <tcp_update_rcv_ann_wnd+0x1c>
 8012892:	4b25      	ldr	r3, [pc, #148]	; (8012928 <tcp_update_rcv_ann_wnd+0xa4>)
 8012894:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012898:	4924      	ldr	r1, [pc, #144]	; (801292c <tcp_update_rcv_ann_wnd+0xa8>)
 801289a:	4825      	ldr	r0, [pc, #148]	; (8012930 <tcp_update_rcv_ann_wnd+0xac>)
 801289c:	f008 fbe2 	bl	801b064 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128a4:	687a      	ldr	r2, [r7, #4]
 80128a6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80128a8:	4413      	add	r3, r2
 80128aa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128b0:	687a      	ldr	r2, [r7, #4]
 80128b2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80128b4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80128b8:	bf28      	it	cs
 80128ba:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 80128be:	b292      	uxth	r2, r2
 80128c0:	4413      	add	r3, r2
 80128c2:	68fa      	ldr	r2, [r7, #12]
 80128c4:	1ad3      	subs	r3, r2, r3
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	db08      	blt.n	80128dc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128d6:	68fa      	ldr	r2, [r7, #12]
 80128d8:	1ad3      	subs	r3, r2, r3
 80128da:	e020      	b.n	801291e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128e4:	1ad3      	subs	r3, r2, r3
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	dd03      	ble.n	80128f2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	2200      	movs	r2, #0
 80128ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80128f0:	e014      	b.n	801291c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128fa:	1ad3      	subs	r3, r2, r3
 80128fc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012904:	d306      	bcc.n	8012914 <tcp_update_rcv_ann_wnd+0x90>
 8012906:	4b08      	ldr	r3, [pc, #32]	; (8012928 <tcp_update_rcv_ann_wnd+0xa4>)
 8012908:	f240 32b6 	movw	r2, #950	; 0x3b6
 801290c:	4909      	ldr	r1, [pc, #36]	; (8012934 <tcp_update_rcv_ann_wnd+0xb0>)
 801290e:	4808      	ldr	r0, [pc, #32]	; (8012930 <tcp_update_rcv_ann_wnd+0xac>)
 8012910:	f008 fba8 	bl	801b064 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	b29a      	uxth	r2, r3
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801291c:	2300      	movs	r3, #0
  }
}
 801291e:	4618      	mov	r0, r3
 8012920:	3710      	adds	r7, #16
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}
 8012926:	bf00      	nop
 8012928:	0801c9d0 	.word	0x0801c9d0
 801292c:	0801cc2c 	.word	0x0801cc2c
 8012930:	0801ca14 	.word	0x0801ca14
 8012934:	0801cc50 	.word	0x0801cc50

08012938 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b084      	sub	sp, #16
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
 8012940:	460b      	mov	r3, r1
 8012942:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d107      	bne.n	801295a <tcp_recved+0x22>
 801294a:	4b1f      	ldr	r3, [pc, #124]	; (80129c8 <tcp_recved+0x90>)
 801294c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012950:	491e      	ldr	r1, [pc, #120]	; (80129cc <tcp_recved+0x94>)
 8012952:	481f      	ldr	r0, [pc, #124]	; (80129d0 <tcp_recved+0x98>)
 8012954:	f008 fb86 	bl	801b064 <iprintf>
 8012958:	e032      	b.n	80129c0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	7d1b      	ldrb	r3, [r3, #20]
 801295e:	2b01      	cmp	r3, #1
 8012960:	d106      	bne.n	8012970 <tcp_recved+0x38>
 8012962:	4b19      	ldr	r3, [pc, #100]	; (80129c8 <tcp_recved+0x90>)
 8012964:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012968:	491a      	ldr	r1, [pc, #104]	; (80129d4 <tcp_recved+0x9c>)
 801296a:	4819      	ldr	r0, [pc, #100]	; (80129d0 <tcp_recved+0x98>)
 801296c:	f008 fb7a 	bl	801b064 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012974:	887b      	ldrh	r3, [r7, #2]
 8012976:	4413      	add	r3, r2
 8012978:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801297a:	89fb      	ldrh	r3, [r7, #14]
 801297c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012980:	d804      	bhi.n	801298c <tcp_recved+0x54>
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012986:	89fa      	ldrh	r2, [r7, #14]
 8012988:	429a      	cmp	r2, r3
 801298a:	d204      	bcs.n	8012996 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012992:	851a      	strh	r2, [r3, #40]	; 0x28
 8012994:	e002      	b.n	801299c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	89fa      	ldrh	r2, [r7, #14]
 801299a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f7ff ff71 	bl	8012884 <tcp_update_rcv_ann_wnd>
 80129a2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80129aa:	d309      	bcc.n	80129c0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	8b5b      	ldrh	r3, [r3, #26]
 80129b0:	f043 0302 	orr.w	r3, r3, #2
 80129b4:	b29a      	uxth	r2, r3
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f003 fe42 	bl	8016644 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80129c0:	3710      	adds	r7, #16
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	0801c9d0 	.word	0x0801c9d0
 80129cc:	0801cc6c 	.word	0x0801cc6c
 80129d0:	0801ca14 	.word	0x0801ca14
 80129d4:	0801cc84 	.word	0x0801cc84

080129d8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80129d8:	b5b0      	push	{r4, r5, r7, lr}
 80129da:	b090      	sub	sp, #64	; 0x40
 80129dc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80129de:	2300      	movs	r3, #0
 80129e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80129e4:	4b94      	ldr	r3, [pc, #592]	; (8012c38 <tcp_slowtmr+0x260>)
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	3301      	adds	r3, #1
 80129ea:	4a93      	ldr	r2, [pc, #588]	; (8012c38 <tcp_slowtmr+0x260>)
 80129ec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80129ee:	4b93      	ldr	r3, [pc, #588]	; (8012c3c <tcp_slowtmr+0x264>)
 80129f0:	781b      	ldrb	r3, [r3, #0]
 80129f2:	3301      	adds	r3, #1
 80129f4:	b2da      	uxtb	r2, r3
 80129f6:	4b91      	ldr	r3, [pc, #580]	; (8012c3c <tcp_slowtmr+0x264>)
 80129f8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80129fa:	2300      	movs	r3, #0
 80129fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80129fe:	4b90      	ldr	r3, [pc, #576]	; (8012c40 <tcp_slowtmr+0x268>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012a04:	e29f      	b.n	8012f46 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a08:	7d1b      	ldrb	r3, [r3, #20]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d106      	bne.n	8012a1c <tcp_slowtmr+0x44>
 8012a0e:	4b8d      	ldr	r3, [pc, #564]	; (8012c44 <tcp_slowtmr+0x26c>)
 8012a10:	f240 42be 	movw	r2, #1214	; 0x4be
 8012a14:	498c      	ldr	r1, [pc, #560]	; (8012c48 <tcp_slowtmr+0x270>)
 8012a16:	488d      	ldr	r0, [pc, #564]	; (8012c4c <tcp_slowtmr+0x274>)
 8012a18:	f008 fb24 	bl	801b064 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1e:	7d1b      	ldrb	r3, [r3, #20]
 8012a20:	2b01      	cmp	r3, #1
 8012a22:	d106      	bne.n	8012a32 <tcp_slowtmr+0x5a>
 8012a24:	4b87      	ldr	r3, [pc, #540]	; (8012c44 <tcp_slowtmr+0x26c>)
 8012a26:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8012a2a:	4989      	ldr	r1, [pc, #548]	; (8012c50 <tcp_slowtmr+0x278>)
 8012a2c:	4887      	ldr	r0, [pc, #540]	; (8012c4c <tcp_slowtmr+0x274>)
 8012a2e:	f008 fb19 	bl	801b064 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a34:	7d1b      	ldrb	r3, [r3, #20]
 8012a36:	2b0a      	cmp	r3, #10
 8012a38:	d106      	bne.n	8012a48 <tcp_slowtmr+0x70>
 8012a3a:	4b82      	ldr	r3, [pc, #520]	; (8012c44 <tcp_slowtmr+0x26c>)
 8012a3c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8012a40:	4984      	ldr	r1, [pc, #528]	; (8012c54 <tcp_slowtmr+0x27c>)
 8012a42:	4882      	ldr	r0, [pc, #520]	; (8012c4c <tcp_slowtmr+0x274>)
 8012a44:	f008 fb0e 	bl	801b064 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a4a:	7f9a      	ldrb	r2, [r3, #30]
 8012a4c:	4b7b      	ldr	r3, [pc, #492]	; (8012c3c <tcp_slowtmr+0x264>)
 8012a4e:	781b      	ldrb	r3, [r3, #0]
 8012a50:	429a      	cmp	r2, r3
 8012a52:	d105      	bne.n	8012a60 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a56:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a5a:	68db      	ldr	r3, [r3, #12]
 8012a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8012a5e:	e272      	b.n	8012f46 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8012a60:	4b76      	ldr	r3, [pc, #472]	; (8012c3c <tcp_slowtmr+0x264>)
 8012a62:	781a      	ldrb	r2, [r3, #0]
 8012a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a66:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a76:	7d1b      	ldrb	r3, [r3, #20]
 8012a78:	2b02      	cmp	r3, #2
 8012a7a:	d10a      	bne.n	8012a92 <tcp_slowtmr+0xba>
 8012a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012a82:	2b05      	cmp	r3, #5
 8012a84:	d905      	bls.n	8012a92 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8012a86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a8a:	3301      	adds	r3, #1
 8012a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012a90:	e11e      	b.n	8012cd0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012a98:	2b0b      	cmp	r3, #11
 8012a9a:	d905      	bls.n	8012aa8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012aa0:	3301      	adds	r3, #1
 8012aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012aa6:	e113      	b.n	8012cd0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aaa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d075      	beq.n	8012b9e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d006      	beq.n	8012ac8 <tcp_slowtmr+0xf0>
 8012aba:	4b62      	ldr	r3, [pc, #392]	; (8012c44 <tcp_slowtmr+0x26c>)
 8012abc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8012ac0:	4965      	ldr	r1, [pc, #404]	; (8012c58 <tcp_slowtmr+0x280>)
 8012ac2:	4862      	ldr	r0, [pc, #392]	; (8012c4c <tcp_slowtmr+0x274>)
 8012ac4:	f008 face 	bl	801b064 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d106      	bne.n	8012ade <tcp_slowtmr+0x106>
 8012ad0:	4b5c      	ldr	r3, [pc, #368]	; (8012c44 <tcp_slowtmr+0x26c>)
 8012ad2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012ad6:	4961      	ldr	r1, [pc, #388]	; (8012c5c <tcp_slowtmr+0x284>)
 8012ad8:	485c      	ldr	r0, [pc, #368]	; (8012c4c <tcp_slowtmr+0x274>)
 8012ada:	f008 fac3 	bl	801b064 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012ae4:	2b0b      	cmp	r3, #11
 8012ae6:	d905      	bls.n	8012af4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012aec:	3301      	adds	r3, #1
 8012aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012af2:	e0ed      	b.n	8012cd0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012af6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012afa:	3b01      	subs	r3, #1
 8012afc:	4a58      	ldr	r2, [pc, #352]	; (8012c60 <tcp_slowtmr+0x288>)
 8012afe:	5cd3      	ldrb	r3, [r2, r3]
 8012b00:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012b08:	7c7a      	ldrb	r2, [r7, #17]
 8012b0a:	429a      	cmp	r2, r3
 8012b0c:	d907      	bls.n	8012b1e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8012b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012b14:	3301      	adds	r3, #1
 8012b16:	b2da      	uxtb	r2, r3
 8012b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b1a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8012b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b20:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012b24:	7c7a      	ldrb	r2, [r7, #17]
 8012b26:	429a      	cmp	r2, r3
 8012b28:	f200 80d2 	bhi.w	8012cd0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8012b2c:	2301      	movs	r3, #1
 8012b2e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8012b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d108      	bne.n	8012b4c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012b3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b3c:	f004 fc28 	bl	8017390 <tcp_zero_window_probe>
 8012b40:	4603      	mov	r3, r0
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d014      	beq.n	8012b70 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8012b46:	2300      	movs	r3, #0
 8012b48:	623b      	str	r3, [r7, #32]
 8012b4a:	e011      	b.n	8012b70 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b52:	4619      	mov	r1, r3
 8012b54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b56:	f003 faef 	bl	8016138 <tcp_split_unsent_seg>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d107      	bne.n	8012b70 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8012b60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b62:	f003 fd6f 	bl	8016644 <tcp_output>
 8012b66:	4603      	mov	r3, r0
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d101      	bne.n	8012b70 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8012b70:	6a3b      	ldr	r3, [r7, #32]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	f000 80ac 	beq.w	8012cd0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8012b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b82:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012b86:	2b06      	cmp	r3, #6
 8012b88:	f200 80a2 	bhi.w	8012cd0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8012b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b8e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012b92:	3301      	adds	r3, #1
 8012b94:	b2da      	uxtb	r2, r3
 8012b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b98:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012b9c:	e098      	b.n	8012cd0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	db0f      	blt.n	8012bc8 <tcp_slowtmr+0x1f0>
 8012ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012baa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012bae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012bb2:	4293      	cmp	r3, r2
 8012bb4:	d008      	beq.n	8012bc8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8012bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012bbc:	b29b      	uxth	r3, r3
 8012bbe:	3301      	adds	r3, #1
 8012bc0:	b29b      	uxth	r3, r3
 8012bc2:	b21a      	sxth	r2, r3
 8012bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8012bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bca:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8012bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	db7b      	blt.n	8012cd0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012bd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bda:	f004 f827 	bl	8016c2c <tcp_rexmit_rto_prepare>
 8012bde:	4603      	mov	r3, r0
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d007      	beq.n	8012bf4 <tcp_slowtmr+0x21c>
 8012be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d171      	bne.n	8012cd0 <tcp_slowtmr+0x2f8>
 8012bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d06d      	beq.n	8012cd0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8012bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf6:	7d1b      	ldrb	r3, [r3, #20]
 8012bf8:	2b02      	cmp	r3, #2
 8012bfa:	d03a      	beq.n	8012c72 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c02:	2b0c      	cmp	r3, #12
 8012c04:	bf28      	it	cs
 8012c06:	230c      	movcs	r3, #12
 8012c08:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012c10:	10db      	asrs	r3, r3, #3
 8012c12:	b21b      	sxth	r3, r3
 8012c14:	461a      	mov	r2, r3
 8012c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c18:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012c1c:	4413      	add	r3, r2
 8012c1e:	7efa      	ldrb	r2, [r7, #27]
 8012c20:	4910      	ldr	r1, [pc, #64]	; (8012c64 <tcp_slowtmr+0x28c>)
 8012c22:	5c8a      	ldrb	r2, [r1, r2]
 8012c24:	4093      	lsls	r3, r2
 8012c26:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012c28:	697b      	ldr	r3, [r7, #20]
 8012c2a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8012c2e:	4293      	cmp	r3, r2
 8012c30:	dc1a      	bgt.n	8012c68 <tcp_slowtmr+0x290>
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	b21a      	sxth	r2, r3
 8012c36:	e019      	b.n	8012c6c <tcp_slowtmr+0x294>
 8012c38:	20008618 	.word	0x20008618
 8012c3c:	2000862e 	.word	0x2000862e
 8012c40:	20008624 	.word	0x20008624
 8012c44:	0801c9d0 	.word	0x0801c9d0
 8012c48:	0801cd14 	.word	0x0801cd14
 8012c4c:	0801ca14 	.word	0x0801ca14
 8012c50:	0801cd40 	.word	0x0801cd40
 8012c54:	0801cd6c 	.word	0x0801cd6c
 8012c58:	0801cd9c 	.word	0x0801cd9c
 8012c5c:	0801cdd0 	.word	0x0801cdd0
 8012c60:	0801eabc 	.word	0x0801eabc
 8012c64:	0801eaac 	.word	0x0801eaac
 8012c68:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8012c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c74:	2200      	movs	r2, #0
 8012c76:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012c84:	4293      	cmp	r3, r2
 8012c86:	bf28      	it	cs
 8012c88:	4613      	movcs	r3, r2
 8012c8a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012c8c:	8a7b      	ldrh	r3, [r7, #18]
 8012c8e:	085b      	lsrs	r3, r3, #1
 8012c90:	b29a      	uxth	r2, r3
 8012c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c9a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ca2:	005b      	lsls	r3, r3, #1
 8012ca4:	b29b      	uxth	r3, r3
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d206      	bcs.n	8012cb8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cae:	005b      	lsls	r3, r3, #1
 8012cb0:	b29a      	uxth	r2, r3
 8012cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8012cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cba:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cbe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8012cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8012cca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ccc:	f004 f81e 	bl	8016d0c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8012cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd2:	7d1b      	ldrb	r3, [r3, #20]
 8012cd4:	2b06      	cmp	r3, #6
 8012cd6:	d111      	bne.n	8012cfc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cda:	8b5b      	ldrh	r3, [r3, #26]
 8012cdc:	f003 0310 	and.w	r3, r3, #16
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d00b      	beq.n	8012cfc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012ce4:	4b9d      	ldr	r3, [pc, #628]	; (8012f5c <tcp_slowtmr+0x584>)
 8012ce6:	681a      	ldr	r2, [r3, #0]
 8012ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cea:	6a1b      	ldr	r3, [r3, #32]
 8012cec:	1ad3      	subs	r3, r2, r3
 8012cee:	2b28      	cmp	r3, #40	; 0x28
 8012cf0:	d904      	bls.n	8012cfc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8012cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cf6:	3301      	adds	r3, #1
 8012cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cfe:	7a5b      	ldrb	r3, [r3, #9]
 8012d00:	f003 0308 	and.w	r3, r3, #8
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d04c      	beq.n	8012da2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8012d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d0a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012d0c:	2b04      	cmp	r3, #4
 8012d0e:	d003      	beq.n	8012d18 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8012d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d12:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012d14:	2b07      	cmp	r3, #7
 8012d16:	d144      	bne.n	8012da2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012d18:	4b90      	ldr	r3, [pc, #576]	; (8012f5c <tcp_slowtmr+0x584>)
 8012d1a:	681a      	ldr	r2, [r3, #0]
 8012d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d1e:	6a1b      	ldr	r3, [r3, #32]
 8012d20:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012d28:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8012d2c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8012d30:	498b      	ldr	r1, [pc, #556]	; (8012f60 <tcp_slowtmr+0x588>)
 8012d32:	fba1 1303 	umull	r1, r3, r1, r3
 8012d36:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012d38:	429a      	cmp	r2, r3
 8012d3a:	d90a      	bls.n	8012d52 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8012d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d40:	3301      	adds	r3, #1
 8012d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8012d46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d4a:	3301      	adds	r3, #1
 8012d4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012d50:	e027      	b.n	8012da2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012d52:	4b82      	ldr	r3, [pc, #520]	; (8012f5c <tcp_slowtmr+0x584>)
 8012d54:	681a      	ldr	r2, [r3, #0]
 8012d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d58:	6a1b      	ldr	r3, [r3, #32]
 8012d5a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d5e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d64:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012d68:	4618      	mov	r0, r3
 8012d6a:	4b7e      	ldr	r3, [pc, #504]	; (8012f64 <tcp_slowtmr+0x58c>)
 8012d6c:	fb00 f303 	mul.w	r3, r0, r3
 8012d70:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012d72:	497b      	ldr	r1, [pc, #492]	; (8012f60 <tcp_slowtmr+0x588>)
 8012d74:	fba1 1303 	umull	r1, r3, r1, r3
 8012d78:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012d7a:	429a      	cmp	r2, r3
 8012d7c:	d911      	bls.n	8012da2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8012d7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d80:	f004 fac6 	bl	8017310 <tcp_keepalive>
 8012d84:	4603      	mov	r3, r0
 8012d86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8012d8a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d107      	bne.n	8012da2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8012d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d94:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012d98:	3301      	adds	r3, #1
 8012d9a:	b2da      	uxtb	r2, r3
 8012d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d9e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8012da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d011      	beq.n	8012dce <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8012daa:	4b6c      	ldr	r3, [pc, #432]	; (8012f5c <tcp_slowtmr+0x584>)
 8012dac:	681a      	ldr	r2, [r3, #0]
 8012dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db0:	6a1b      	ldr	r3, [r3, #32]
 8012db2:	1ad2      	subs	r2, r2, r3
 8012db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012dba:	4619      	mov	r1, r3
 8012dbc:	460b      	mov	r3, r1
 8012dbe:	005b      	lsls	r3, r3, #1
 8012dc0:	440b      	add	r3, r1
 8012dc2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	d302      	bcc.n	8012dce <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8012dc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012dca:	f000 fddb 	bl	8013984 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8012dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dd0:	7d1b      	ldrb	r3, [r3, #20]
 8012dd2:	2b03      	cmp	r3, #3
 8012dd4:	d10b      	bne.n	8012dee <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012dd6:	4b61      	ldr	r3, [pc, #388]	; (8012f5c <tcp_slowtmr+0x584>)
 8012dd8:	681a      	ldr	r2, [r3, #0]
 8012dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ddc:	6a1b      	ldr	r3, [r3, #32]
 8012dde:	1ad3      	subs	r3, r2, r3
 8012de0:	2b28      	cmp	r3, #40	; 0x28
 8012de2:	d904      	bls.n	8012dee <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8012de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012de8:	3301      	adds	r3, #1
 8012dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df0:	7d1b      	ldrb	r3, [r3, #20]
 8012df2:	2b09      	cmp	r3, #9
 8012df4:	d10b      	bne.n	8012e0e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012df6:	4b59      	ldr	r3, [pc, #356]	; (8012f5c <tcp_slowtmr+0x584>)
 8012df8:	681a      	ldr	r2, [r3, #0]
 8012dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dfc:	6a1b      	ldr	r3, [r3, #32]
 8012dfe:	1ad3      	subs	r3, r2, r3
 8012e00:	2bf0      	cmp	r3, #240	; 0xf0
 8012e02:	d904      	bls.n	8012e0e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8012e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e08:	3301      	adds	r3, #1
 8012e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012e0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d060      	beq.n	8012ed8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8012e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e1c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012e1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e20:	f000 fbfc 	bl	801361c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d010      	beq.n	8012e4c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012e2a:	4b4f      	ldr	r3, [pc, #316]	; (8012f68 <tcp_slowtmr+0x590>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e30:	429a      	cmp	r2, r3
 8012e32:	d106      	bne.n	8012e42 <tcp_slowtmr+0x46a>
 8012e34:	4b4d      	ldr	r3, [pc, #308]	; (8012f6c <tcp_slowtmr+0x594>)
 8012e36:	f240 526d 	movw	r2, #1389	; 0x56d
 8012e3a:	494d      	ldr	r1, [pc, #308]	; (8012f70 <tcp_slowtmr+0x598>)
 8012e3c:	484d      	ldr	r0, [pc, #308]	; (8012f74 <tcp_slowtmr+0x59c>)
 8012e3e:	f008 f911 	bl	801b064 <iprintf>
        prev->next = pcb->next;
 8012e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e44:	68da      	ldr	r2, [r3, #12]
 8012e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e48:	60da      	str	r2, [r3, #12]
 8012e4a:	e00f      	b.n	8012e6c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012e4c:	4b46      	ldr	r3, [pc, #280]	; (8012f68 <tcp_slowtmr+0x590>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e52:	429a      	cmp	r2, r3
 8012e54:	d006      	beq.n	8012e64 <tcp_slowtmr+0x48c>
 8012e56:	4b45      	ldr	r3, [pc, #276]	; (8012f6c <tcp_slowtmr+0x594>)
 8012e58:	f240 5271 	movw	r2, #1393	; 0x571
 8012e5c:	4946      	ldr	r1, [pc, #280]	; (8012f78 <tcp_slowtmr+0x5a0>)
 8012e5e:	4845      	ldr	r0, [pc, #276]	; (8012f74 <tcp_slowtmr+0x59c>)
 8012e60:	f008 f900 	bl	801b064 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e66:	68db      	ldr	r3, [r3, #12]
 8012e68:	4a3f      	ldr	r2, [pc, #252]	; (8012f68 <tcp_slowtmr+0x590>)
 8012e6a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012e6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d013      	beq.n	8012e9c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e76:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e7a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012e7c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8012e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e80:	3304      	adds	r3, #4
 8012e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e84:	8ad2      	ldrh	r2, [r2, #22]
 8012e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e88:	8b09      	ldrh	r1, [r1, #24]
 8012e8a:	9102      	str	r1, [sp, #8]
 8012e8c:	9201      	str	r2, [sp, #4]
 8012e8e:	9300      	str	r3, [sp, #0]
 8012e90:	462b      	mov	r3, r5
 8012e92:	4622      	mov	r2, r4
 8012e94:	4601      	mov	r1, r0
 8012e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e98:	f004 f988 	bl	80171ac <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e9e:	691b      	ldr	r3, [r3, #16]
 8012ea0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ea4:	7d1b      	ldrb	r3, [r3, #20]
 8012ea6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eaa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eae:	68db      	ldr	r3, [r3, #12]
 8012eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012eb2:	6838      	ldr	r0, [r7, #0]
 8012eb4:	f7ff f9f2 	bl	801229c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012eb8:	4b30      	ldr	r3, [pc, #192]	; (8012f7c <tcp_slowtmr+0x5a4>)
 8012eba:	2200      	movs	r2, #0
 8012ebc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d004      	beq.n	8012ece <tcp_slowtmr+0x4f6>
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	f06f 010c 	mvn.w	r1, #12
 8012eca:	68b8      	ldr	r0, [r7, #8]
 8012ecc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012ece:	4b2b      	ldr	r3, [pc, #172]	; (8012f7c <tcp_slowtmr+0x5a4>)
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d037      	beq.n	8012f46 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8012ed6:	e590      	b.n	80129fa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eda:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ede:	68db      	ldr	r3, [r3, #12]
 8012ee0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee4:	7f1b      	ldrb	r3, [r3, #28]
 8012ee6:	3301      	adds	r3, #1
 8012ee8:	b2da      	uxtb	r2, r3
 8012eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eec:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef0:	7f1a      	ldrb	r2, [r3, #28]
 8012ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef4:	7f5b      	ldrb	r3, [r3, #29]
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d325      	bcc.n	8012f46 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8012efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012efc:	2200      	movs	r2, #0
 8012efe:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012f00:	4b1e      	ldr	r3, [pc, #120]	; (8012f7c <tcp_slowtmr+0x5a4>)
 8012f02:	2200      	movs	r2, #0
 8012f04:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d00b      	beq.n	8012f28 <tcp_slowtmr+0x550>
 8012f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f18:	6912      	ldr	r2, [r2, #16]
 8012f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012f1c:	4610      	mov	r0, r2
 8012f1e:	4798      	blx	r3
 8012f20:	4603      	mov	r3, r0
 8012f22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012f26:	e002      	b.n	8012f2e <tcp_slowtmr+0x556>
 8012f28:	2300      	movs	r3, #0
 8012f2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012f2e:	4b13      	ldr	r3, [pc, #76]	; (8012f7c <tcp_slowtmr+0x5a4>)
 8012f30:	781b      	ldrb	r3, [r3, #0]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d000      	beq.n	8012f38 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8012f36:	e560      	b.n	80129fa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012f38:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d102      	bne.n	8012f46 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8012f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f42:	f003 fb7f 	bl	8016644 <tcp_output>
  while (pcb != NULL) {
 8012f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	f47f ad5c 	bne.w	8012a06 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012f52:	4b0b      	ldr	r3, [pc, #44]	; (8012f80 <tcp_slowtmr+0x5a8>)
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012f58:	e067      	b.n	801302a <tcp_slowtmr+0x652>
 8012f5a:	bf00      	nop
 8012f5c:	20008618 	.word	0x20008618
 8012f60:	10624dd3 	.word	0x10624dd3
 8012f64:	000124f8 	.word	0x000124f8
 8012f68:	20008624 	.word	0x20008624
 8012f6c:	0801c9d0 	.word	0x0801c9d0
 8012f70:	0801ce08 	.word	0x0801ce08
 8012f74:	0801ca14 	.word	0x0801ca14
 8012f78:	0801ce34 	.word	0x0801ce34
 8012f7c:	2000862c 	.word	0x2000862c
 8012f80:	20008628 	.word	0x20008628
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f86:	7d1b      	ldrb	r3, [r3, #20]
 8012f88:	2b0a      	cmp	r3, #10
 8012f8a:	d006      	beq.n	8012f9a <tcp_slowtmr+0x5c2>
 8012f8c:	4b2b      	ldr	r3, [pc, #172]	; (801303c <tcp_slowtmr+0x664>)
 8012f8e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012f92:	492b      	ldr	r1, [pc, #172]	; (8013040 <tcp_slowtmr+0x668>)
 8012f94:	482b      	ldr	r0, [pc, #172]	; (8013044 <tcp_slowtmr+0x66c>)
 8012f96:	f008 f865 	bl	801b064 <iprintf>
    pcb_remove = 0;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012fa0:	4b29      	ldr	r3, [pc, #164]	; (8013048 <tcp_slowtmr+0x670>)
 8012fa2:	681a      	ldr	r2, [r3, #0]
 8012fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa6:	6a1b      	ldr	r3, [r3, #32]
 8012fa8:	1ad3      	subs	r3, r2, r3
 8012faa:	2bf0      	cmp	r3, #240	; 0xf0
 8012fac:	d904      	bls.n	8012fb8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012fae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fb2:	3301      	adds	r3, #1
 8012fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d02f      	beq.n	8013020 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012fc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012fc2:	f000 fb2b 	bl	801361c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d010      	beq.n	8012fee <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012fcc:	4b1f      	ldr	r3, [pc, #124]	; (801304c <tcp_slowtmr+0x674>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012fd2:	429a      	cmp	r2, r3
 8012fd4:	d106      	bne.n	8012fe4 <tcp_slowtmr+0x60c>
 8012fd6:	4b19      	ldr	r3, [pc, #100]	; (801303c <tcp_slowtmr+0x664>)
 8012fd8:	f240 52af 	movw	r2, #1455	; 0x5af
 8012fdc:	491c      	ldr	r1, [pc, #112]	; (8013050 <tcp_slowtmr+0x678>)
 8012fde:	4819      	ldr	r0, [pc, #100]	; (8013044 <tcp_slowtmr+0x66c>)
 8012fe0:	f008 f840 	bl	801b064 <iprintf>
        prev->next = pcb->next;
 8012fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe6:	68da      	ldr	r2, [r3, #12]
 8012fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fea:	60da      	str	r2, [r3, #12]
 8012fec:	e00f      	b.n	801300e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012fee:	4b17      	ldr	r3, [pc, #92]	; (801304c <tcp_slowtmr+0x674>)
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	d006      	beq.n	8013006 <tcp_slowtmr+0x62e>
 8012ff8:	4b10      	ldr	r3, [pc, #64]	; (801303c <tcp_slowtmr+0x664>)
 8012ffa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012ffe:	4915      	ldr	r1, [pc, #84]	; (8013054 <tcp_slowtmr+0x67c>)
 8013000:	4810      	ldr	r0, [pc, #64]	; (8013044 <tcp_slowtmr+0x66c>)
 8013002:	f008 f82f 	bl	801b064 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8013006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013008:	68db      	ldr	r3, [r3, #12]
 801300a:	4a10      	ldr	r2, [pc, #64]	; (801304c <tcp_slowtmr+0x674>)
 801300c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013010:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8013012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013014:	68db      	ldr	r3, [r3, #12]
 8013016:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013018:	69f8      	ldr	r0, [r7, #28]
 801301a:	f7ff f93f 	bl	801229c <tcp_free>
 801301e:	e004      	b.n	801302a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8013020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013022:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013026:	68db      	ldr	r3, [r3, #12]
 8013028:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801302c:	2b00      	cmp	r3, #0
 801302e:	d1a9      	bne.n	8012f84 <tcp_slowtmr+0x5ac>
    }
  }
}
 8013030:	bf00      	nop
 8013032:	bf00      	nop
 8013034:	3730      	adds	r7, #48	; 0x30
 8013036:	46bd      	mov	sp, r7
 8013038:	bdb0      	pop	{r4, r5, r7, pc}
 801303a:	bf00      	nop
 801303c:	0801c9d0 	.word	0x0801c9d0
 8013040:	0801ce60 	.word	0x0801ce60
 8013044:	0801ca14 	.word	0x0801ca14
 8013048:	20008618 	.word	0x20008618
 801304c:	20008628 	.word	0x20008628
 8013050:	0801ce90 	.word	0x0801ce90
 8013054:	0801ceb8 	.word	0x0801ceb8

08013058 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b082      	sub	sp, #8
 801305c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801305e:	4b2d      	ldr	r3, [pc, #180]	; (8013114 <tcp_fasttmr+0xbc>)
 8013060:	781b      	ldrb	r3, [r3, #0]
 8013062:	3301      	adds	r3, #1
 8013064:	b2da      	uxtb	r2, r3
 8013066:	4b2b      	ldr	r3, [pc, #172]	; (8013114 <tcp_fasttmr+0xbc>)
 8013068:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801306a:	4b2b      	ldr	r3, [pc, #172]	; (8013118 <tcp_fasttmr+0xc0>)
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013070:	e048      	b.n	8013104 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	7f9a      	ldrb	r2, [r3, #30]
 8013076:	4b27      	ldr	r3, [pc, #156]	; (8013114 <tcp_fasttmr+0xbc>)
 8013078:	781b      	ldrb	r3, [r3, #0]
 801307a:	429a      	cmp	r2, r3
 801307c:	d03f      	beq.n	80130fe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801307e:	4b25      	ldr	r3, [pc, #148]	; (8013114 <tcp_fasttmr+0xbc>)
 8013080:	781a      	ldrb	r2, [r3, #0]
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	8b5b      	ldrh	r3, [r3, #26]
 801308a:	f003 0301 	and.w	r3, r3, #1
 801308e:	2b00      	cmp	r3, #0
 8013090:	d010      	beq.n	80130b4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	8b5b      	ldrh	r3, [r3, #26]
 8013096:	f043 0302 	orr.w	r3, r3, #2
 801309a:	b29a      	uxth	r2, r3
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80130a0:	6878      	ldr	r0, [r7, #4]
 80130a2:	f003 facf 	bl	8016644 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	8b5b      	ldrh	r3, [r3, #26]
 80130aa:	f023 0303 	bic.w	r3, r3, #3
 80130ae:	b29a      	uxth	r2, r3
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	8b5b      	ldrh	r3, [r3, #26]
 80130b8:	f003 0308 	and.w	r3, r3, #8
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d009      	beq.n	80130d4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	8b5b      	ldrh	r3, [r3, #26]
 80130c4:	f023 0308 	bic.w	r3, r3, #8
 80130c8:	b29a      	uxth	r2, r3
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	f7ff fa78 	bl	80125c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	68db      	ldr	r3, [r3, #12]
 80130d8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d00a      	beq.n	80130f8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80130e2:	4b0e      	ldr	r3, [pc, #56]	; (801311c <tcp_fasttmr+0xc4>)
 80130e4:	2200      	movs	r2, #0
 80130e6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80130e8:	6878      	ldr	r0, [r7, #4]
 80130ea:	f000 f819 	bl	8013120 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80130ee:	4b0b      	ldr	r3, [pc, #44]	; (801311c <tcp_fasttmr+0xc4>)
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d000      	beq.n	80130f8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80130f6:	e7b8      	b.n	801306a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	607b      	str	r3, [r7, #4]
 80130fc:	e002      	b.n	8013104 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	68db      	ldr	r3, [r3, #12]
 8013102:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d1b3      	bne.n	8013072 <tcp_fasttmr+0x1a>
    }
  }
}
 801310a:	bf00      	nop
 801310c:	bf00      	nop
 801310e:	3708      	adds	r7, #8
 8013110:	46bd      	mov	sp, r7
 8013112:	bd80      	pop	{r7, pc}
 8013114:	2000862e 	.word	0x2000862e
 8013118:	20008624 	.word	0x20008624
 801311c:	2000862c 	.word	0x2000862c

08013120 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013120:	b590      	push	{r4, r7, lr}
 8013122:	b085      	sub	sp, #20
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d109      	bne.n	8013142 <tcp_process_refused_data+0x22>
 801312e:	4b37      	ldr	r3, [pc, #220]	; (801320c <tcp_process_refused_data+0xec>)
 8013130:	f240 6209 	movw	r2, #1545	; 0x609
 8013134:	4936      	ldr	r1, [pc, #216]	; (8013210 <tcp_process_refused_data+0xf0>)
 8013136:	4837      	ldr	r0, [pc, #220]	; (8013214 <tcp_process_refused_data+0xf4>)
 8013138:	f007 ff94 	bl	801b064 <iprintf>
 801313c:	f06f 030f 	mvn.w	r3, #15
 8013140:	e060      	b.n	8013204 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013146:	7b5b      	ldrb	r3, [r3, #13]
 8013148:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801314e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	2200      	movs	r2, #0
 8013154:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801315c:	2b00      	cmp	r3, #0
 801315e:	d00b      	beq.n	8013178 <tcp_process_refused_data+0x58>
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	6918      	ldr	r0, [r3, #16]
 801316a:	2300      	movs	r3, #0
 801316c:	68ba      	ldr	r2, [r7, #8]
 801316e:	6879      	ldr	r1, [r7, #4]
 8013170:	47a0      	blx	r4
 8013172:	4603      	mov	r3, r0
 8013174:	73fb      	strb	r3, [r7, #15]
 8013176:	e007      	b.n	8013188 <tcp_process_refused_data+0x68>
 8013178:	2300      	movs	r3, #0
 801317a:	68ba      	ldr	r2, [r7, #8]
 801317c:	6879      	ldr	r1, [r7, #4]
 801317e:	2000      	movs	r0, #0
 8013180:	f000 f8a4 	bl	80132cc <tcp_recv_null>
 8013184:	4603      	mov	r3, r0
 8013186:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d12a      	bne.n	80131e6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013190:	7bbb      	ldrb	r3, [r7, #14]
 8013192:	f003 0320 	and.w	r3, r3, #32
 8013196:	2b00      	cmp	r3, #0
 8013198:	d033      	beq.n	8013202 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801319e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80131a2:	d005      	beq.n	80131b0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80131a8:	3301      	adds	r3, #1
 80131aa:	b29a      	uxth	r2, r3
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d00b      	beq.n	80131d2 <tcp_process_refused_data+0xb2>
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	6918      	ldr	r0, [r3, #16]
 80131c4:	2300      	movs	r3, #0
 80131c6:	2200      	movs	r2, #0
 80131c8:	6879      	ldr	r1, [r7, #4]
 80131ca:	47a0      	blx	r4
 80131cc:	4603      	mov	r3, r0
 80131ce:	73fb      	strb	r3, [r7, #15]
 80131d0:	e001      	b.n	80131d6 <tcp_process_refused_data+0xb6>
 80131d2:	2300      	movs	r3, #0
 80131d4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80131d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131da:	f113 0f0d 	cmn.w	r3, #13
 80131de:	d110      	bne.n	8013202 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80131e0:	f06f 030c 	mvn.w	r3, #12
 80131e4:	e00e      	b.n	8013204 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80131e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131ea:	f113 0f0d 	cmn.w	r3, #13
 80131ee:	d102      	bne.n	80131f6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80131f0:	f06f 030c 	mvn.w	r3, #12
 80131f4:	e006      	b.n	8013204 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	68ba      	ldr	r2, [r7, #8]
 80131fa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80131fc:	f06f 0304 	mvn.w	r3, #4
 8013200:	e000      	b.n	8013204 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8013202:	2300      	movs	r3, #0
}
 8013204:	4618      	mov	r0, r3
 8013206:	3714      	adds	r7, #20
 8013208:	46bd      	mov	sp, r7
 801320a:	bd90      	pop	{r4, r7, pc}
 801320c:	0801c9d0 	.word	0x0801c9d0
 8013210:	0801cee0 	.word	0x0801cee0
 8013214:	0801ca14 	.word	0x0801ca14

08013218 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b084      	sub	sp, #16
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013220:	e007      	b.n	8013232 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013228:	6878      	ldr	r0, [r7, #4]
 801322a:	f000 f80a 	bl	8013242 <tcp_seg_free>
    seg = next;
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d1f4      	bne.n	8013222 <tcp_segs_free+0xa>
  }
}
 8013238:	bf00      	nop
 801323a:	bf00      	nop
 801323c:	3710      	adds	r7, #16
 801323e:	46bd      	mov	sp, r7
 8013240:	bd80      	pop	{r7, pc}

08013242 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013242:	b580      	push	{r7, lr}
 8013244:	b082      	sub	sp, #8
 8013246:	af00      	add	r7, sp, #0
 8013248:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d00c      	beq.n	801326a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	685b      	ldr	r3, [r3, #4]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d004      	beq.n	8013262 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	685b      	ldr	r3, [r3, #4]
 801325c:	4618      	mov	r0, r3
 801325e:	f7fe fd7d 	bl	8011d5c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013262:	6879      	ldr	r1, [r7, #4]
 8013264:	2003      	movs	r0, #3
 8013266:	f7fd ff03 	bl	8011070 <memp_free>
  }
}
 801326a:	bf00      	nop
 801326c:	3708      	adds	r7, #8
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}
	...

08013274 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b084      	sub	sp, #16
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d106      	bne.n	8013290 <tcp_seg_copy+0x1c>
 8013282:	4b0f      	ldr	r3, [pc, #60]	; (80132c0 <tcp_seg_copy+0x4c>)
 8013284:	f240 6282 	movw	r2, #1666	; 0x682
 8013288:	490e      	ldr	r1, [pc, #56]	; (80132c4 <tcp_seg_copy+0x50>)
 801328a:	480f      	ldr	r0, [pc, #60]	; (80132c8 <tcp_seg_copy+0x54>)
 801328c:	f007 feea 	bl	801b064 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013290:	2003      	movs	r0, #3
 8013292:	f7fd fe7d 	bl	8010f90 <memp_malloc>
 8013296:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d101      	bne.n	80132a2 <tcp_seg_copy+0x2e>
    return NULL;
 801329e:	2300      	movs	r3, #0
 80132a0:	e00a      	b.n	80132b8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80132a2:	2210      	movs	r2, #16
 80132a4:	6879      	ldr	r1, [r7, #4]
 80132a6:	68f8      	ldr	r0, [r7, #12]
 80132a8:	f007 ffb7 	bl	801b21a <memcpy>
  pbuf_ref(cseg->p);
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	685b      	ldr	r3, [r3, #4]
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7fe fdf3 	bl	8011e9c <pbuf_ref>
  return cseg;
 80132b6:	68fb      	ldr	r3, [r7, #12]
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3710      	adds	r7, #16
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}
 80132c0:	0801c9d0 	.word	0x0801c9d0
 80132c4:	0801cf24 	.word	0x0801cf24
 80132c8:	0801ca14 	.word	0x0801ca14

080132cc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b084      	sub	sp, #16
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	60f8      	str	r0, [r7, #12]
 80132d4:	60b9      	str	r1, [r7, #8]
 80132d6:	607a      	str	r2, [r7, #4]
 80132d8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d109      	bne.n	80132f4 <tcp_recv_null+0x28>
 80132e0:	4b12      	ldr	r3, [pc, #72]	; (801332c <tcp_recv_null+0x60>)
 80132e2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80132e6:	4912      	ldr	r1, [pc, #72]	; (8013330 <tcp_recv_null+0x64>)
 80132e8:	4812      	ldr	r0, [pc, #72]	; (8013334 <tcp_recv_null+0x68>)
 80132ea:	f007 febb 	bl	801b064 <iprintf>
 80132ee:	f06f 030f 	mvn.w	r3, #15
 80132f2:	e016      	b.n	8013322 <tcp_recv_null+0x56>

  if (p != NULL) {
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d009      	beq.n	801330e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	891b      	ldrh	r3, [r3, #8]
 80132fe:	4619      	mov	r1, r3
 8013300:	68b8      	ldr	r0, [r7, #8]
 8013302:	f7ff fb19 	bl	8012938 <tcp_recved>
    pbuf_free(p);
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f7fe fd28 	bl	8011d5c <pbuf_free>
 801330c:	e008      	b.n	8013320 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801330e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d104      	bne.n	8013320 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013316:	68b8      	ldr	r0, [r7, #8]
 8013318:	f7ff f9be 	bl	8012698 <tcp_close>
 801331c:	4603      	mov	r3, r0
 801331e:	e000      	b.n	8013322 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013320:	2300      	movs	r3, #0
}
 8013322:	4618      	mov	r0, r3
 8013324:	3710      	adds	r7, #16
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}
 801332a:	bf00      	nop
 801332c:	0801c9d0 	.word	0x0801c9d0
 8013330:	0801cf40 	.word	0x0801cf40
 8013334:	0801ca14 	.word	0x0801ca14

08013338 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b086      	sub	sp, #24
 801333c:	af00      	add	r7, sp, #0
 801333e:	4603      	mov	r3, r0
 8013340:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013346:	2b00      	cmp	r3, #0
 8013348:	db01      	blt.n	801334e <tcp_kill_prio+0x16>
 801334a:	79fb      	ldrb	r3, [r7, #7]
 801334c:	e000      	b.n	8013350 <tcp_kill_prio+0x18>
 801334e:	237f      	movs	r3, #127	; 0x7f
 8013350:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013352:	7afb      	ldrb	r3, [r7, #11]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d034      	beq.n	80133c2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013358:	7afb      	ldrb	r3, [r7, #11]
 801335a:	3b01      	subs	r3, #1
 801335c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801335e:	2300      	movs	r3, #0
 8013360:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013362:	2300      	movs	r3, #0
 8013364:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013366:	4b19      	ldr	r3, [pc, #100]	; (80133cc <tcp_kill_prio+0x94>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	617b      	str	r3, [r7, #20]
 801336c:	e01f      	b.n	80133ae <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801336e:	697b      	ldr	r3, [r7, #20]
 8013370:	7d5b      	ldrb	r3, [r3, #21]
 8013372:	7afa      	ldrb	r2, [r7, #11]
 8013374:	429a      	cmp	r2, r3
 8013376:	d80c      	bhi.n	8013392 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013378:	697b      	ldr	r3, [r7, #20]
 801337a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801337c:	7afa      	ldrb	r2, [r7, #11]
 801337e:	429a      	cmp	r2, r3
 8013380:	d112      	bne.n	80133a8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013382:	4b13      	ldr	r3, [pc, #76]	; (80133d0 <tcp_kill_prio+0x98>)
 8013384:	681a      	ldr	r2, [r3, #0]
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	6a1b      	ldr	r3, [r3, #32]
 801338a:	1ad3      	subs	r3, r2, r3
 801338c:	68fa      	ldr	r2, [r7, #12]
 801338e:	429a      	cmp	r2, r3
 8013390:	d80a      	bhi.n	80133a8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013392:	4b0f      	ldr	r3, [pc, #60]	; (80133d0 <tcp_kill_prio+0x98>)
 8013394:	681a      	ldr	r2, [r3, #0]
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	6a1b      	ldr	r3, [r3, #32]
 801339a:	1ad3      	subs	r3, r2, r3
 801339c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801339e:	697b      	ldr	r3, [r7, #20]
 80133a0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80133a2:	697b      	ldr	r3, [r7, #20]
 80133a4:	7d5b      	ldrb	r3, [r3, #21]
 80133a6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80133a8:	697b      	ldr	r3, [r7, #20]
 80133aa:	68db      	ldr	r3, [r3, #12]
 80133ac:	617b      	str	r3, [r7, #20]
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d1dc      	bne.n	801336e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d004      	beq.n	80133c4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80133ba:	6938      	ldr	r0, [r7, #16]
 80133bc:	f7ff fa56 	bl	801286c <tcp_abort>
 80133c0:	e000      	b.n	80133c4 <tcp_kill_prio+0x8c>
    return;
 80133c2:	bf00      	nop
  }
}
 80133c4:	3718      	adds	r7, #24
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}
 80133ca:	bf00      	nop
 80133cc:	20008624 	.word	0x20008624
 80133d0:	20008618 	.word	0x20008618

080133d4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b086      	sub	sp, #24
 80133d8:	af00      	add	r7, sp, #0
 80133da:	4603      	mov	r3, r0
 80133dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80133de:	79fb      	ldrb	r3, [r7, #7]
 80133e0:	2b08      	cmp	r3, #8
 80133e2:	d009      	beq.n	80133f8 <tcp_kill_state+0x24>
 80133e4:	79fb      	ldrb	r3, [r7, #7]
 80133e6:	2b09      	cmp	r3, #9
 80133e8:	d006      	beq.n	80133f8 <tcp_kill_state+0x24>
 80133ea:	4b1a      	ldr	r3, [pc, #104]	; (8013454 <tcp_kill_state+0x80>)
 80133ec:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80133f0:	4919      	ldr	r1, [pc, #100]	; (8013458 <tcp_kill_state+0x84>)
 80133f2:	481a      	ldr	r0, [pc, #104]	; (801345c <tcp_kill_state+0x88>)
 80133f4:	f007 fe36 	bl	801b064 <iprintf>

  inactivity = 0;
 80133f8:	2300      	movs	r3, #0
 80133fa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80133fc:	2300      	movs	r3, #0
 80133fe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013400:	4b17      	ldr	r3, [pc, #92]	; (8013460 <tcp_kill_state+0x8c>)
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	617b      	str	r3, [r7, #20]
 8013406:	e017      	b.n	8013438 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	7d1b      	ldrb	r3, [r3, #20]
 801340c:	79fa      	ldrb	r2, [r7, #7]
 801340e:	429a      	cmp	r2, r3
 8013410:	d10f      	bne.n	8013432 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013412:	4b14      	ldr	r3, [pc, #80]	; (8013464 <tcp_kill_state+0x90>)
 8013414:	681a      	ldr	r2, [r3, #0]
 8013416:	697b      	ldr	r3, [r7, #20]
 8013418:	6a1b      	ldr	r3, [r3, #32]
 801341a:	1ad3      	subs	r3, r2, r3
 801341c:	68fa      	ldr	r2, [r7, #12]
 801341e:	429a      	cmp	r2, r3
 8013420:	d807      	bhi.n	8013432 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013422:	4b10      	ldr	r3, [pc, #64]	; (8013464 <tcp_kill_state+0x90>)
 8013424:	681a      	ldr	r2, [r3, #0]
 8013426:	697b      	ldr	r3, [r7, #20]
 8013428:	6a1b      	ldr	r3, [r3, #32]
 801342a:	1ad3      	subs	r3, r2, r3
 801342c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801342e:	697b      	ldr	r3, [r7, #20]
 8013430:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013432:	697b      	ldr	r3, [r7, #20]
 8013434:	68db      	ldr	r3, [r3, #12]
 8013436:	617b      	str	r3, [r7, #20]
 8013438:	697b      	ldr	r3, [r7, #20]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d1e4      	bne.n	8013408 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801343e:	693b      	ldr	r3, [r7, #16]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d003      	beq.n	801344c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013444:	2100      	movs	r1, #0
 8013446:	6938      	ldr	r0, [r7, #16]
 8013448:	f7ff f952 	bl	80126f0 <tcp_abandon>
  }
}
 801344c:	bf00      	nop
 801344e:	3718      	adds	r7, #24
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}
 8013454:	0801c9d0 	.word	0x0801c9d0
 8013458:	0801cf5c 	.word	0x0801cf5c
 801345c:	0801ca14 	.word	0x0801ca14
 8013460:	20008624 	.word	0x20008624
 8013464:	20008618 	.word	0x20008618

08013468 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b084      	sub	sp, #16
 801346c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801346e:	2300      	movs	r3, #0
 8013470:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013472:	2300      	movs	r3, #0
 8013474:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013476:	4b12      	ldr	r3, [pc, #72]	; (80134c0 <tcp_kill_timewait+0x58>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	60fb      	str	r3, [r7, #12]
 801347c:	e012      	b.n	80134a4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801347e:	4b11      	ldr	r3, [pc, #68]	; (80134c4 <tcp_kill_timewait+0x5c>)
 8013480:	681a      	ldr	r2, [r3, #0]
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	6a1b      	ldr	r3, [r3, #32]
 8013486:	1ad3      	subs	r3, r2, r3
 8013488:	687a      	ldr	r2, [r7, #4]
 801348a:	429a      	cmp	r2, r3
 801348c:	d807      	bhi.n	801349e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801348e:	4b0d      	ldr	r3, [pc, #52]	; (80134c4 <tcp_kill_timewait+0x5c>)
 8013490:	681a      	ldr	r2, [r3, #0]
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	6a1b      	ldr	r3, [r3, #32]
 8013496:	1ad3      	subs	r3, r2, r3
 8013498:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	68db      	ldr	r3, [r3, #12]
 80134a2:	60fb      	str	r3, [r7, #12]
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d1e9      	bne.n	801347e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80134aa:	68bb      	ldr	r3, [r7, #8]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d002      	beq.n	80134b6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80134b0:	68b8      	ldr	r0, [r7, #8]
 80134b2:	f7ff f9db 	bl	801286c <tcp_abort>
  }
}
 80134b6:	bf00      	nop
 80134b8:	3710      	adds	r7, #16
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}
 80134be:	bf00      	nop
 80134c0:	20008628 	.word	0x20008628
 80134c4:	20008618 	.word	0x20008618

080134c8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b082      	sub	sp, #8
 80134cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80134ce:	4b10      	ldr	r3, [pc, #64]	; (8013510 <tcp_handle_closepend+0x48>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80134d4:	e014      	b.n	8013500 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	68db      	ldr	r3, [r3, #12]
 80134da:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	8b5b      	ldrh	r3, [r3, #26]
 80134e0:	f003 0308 	and.w	r3, r3, #8
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d009      	beq.n	80134fc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	8b5b      	ldrh	r3, [r3, #26]
 80134ec:	f023 0308 	bic.w	r3, r3, #8
 80134f0:	b29a      	uxth	r2, r3
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80134f6:	6878      	ldr	r0, [r7, #4]
 80134f8:	f7ff f864 	bl	80125c4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d1e7      	bne.n	80134d6 <tcp_handle_closepend+0xe>
  }
}
 8013506:	bf00      	nop
 8013508:	bf00      	nop
 801350a:	3708      	adds	r7, #8
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}
 8013510:	20008624 	.word	0x20008624

08013514 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b084      	sub	sp, #16
 8013518:	af00      	add	r7, sp, #0
 801351a:	4603      	mov	r3, r0
 801351c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801351e:	2001      	movs	r0, #1
 8013520:	f7fd fd36 	bl	8010f90 <memp_malloc>
 8013524:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d126      	bne.n	801357a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801352c:	f7ff ffcc 	bl	80134c8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013530:	f7ff ff9a 	bl	8013468 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013534:	2001      	movs	r0, #1
 8013536:	f7fd fd2b 	bl	8010f90 <memp_malloc>
 801353a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d11b      	bne.n	801357a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013542:	2009      	movs	r0, #9
 8013544:	f7ff ff46 	bl	80133d4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013548:	2001      	movs	r0, #1
 801354a:	f7fd fd21 	bl	8010f90 <memp_malloc>
 801354e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d111      	bne.n	801357a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013556:	2008      	movs	r0, #8
 8013558:	f7ff ff3c 	bl	80133d4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801355c:	2001      	movs	r0, #1
 801355e:	f7fd fd17 	bl	8010f90 <memp_malloc>
 8013562:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d107      	bne.n	801357a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801356a:	79fb      	ldrb	r3, [r7, #7]
 801356c:	4618      	mov	r0, r3
 801356e:	f7ff fee3 	bl	8013338 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013572:	2001      	movs	r0, #1
 8013574:	f7fd fd0c 	bl	8010f90 <memp_malloc>
 8013578:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d03f      	beq.n	8013600 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013580:	229c      	movs	r2, #156	; 0x9c
 8013582:	2100      	movs	r1, #0
 8013584:	68f8      	ldr	r0, [r7, #12]
 8013586:	f007 fdd2 	bl	801b12e <memset>
    pcb->prio = prio;
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	79fa      	ldrb	r2, [r7, #7]
 801358e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8013596:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80135a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	22ff      	movs	r2, #255	; 0xff
 80135ae:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80135b6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	2206      	movs	r2, #6
 80135bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	2206      	movs	r2, #6
 80135c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135cc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	2201      	movs	r2, #1
 80135d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80135d6:	4b0d      	ldr	r3, [pc, #52]	; (801360c <tcp_alloc+0xf8>)
 80135d8:	681a      	ldr	r2, [r3, #0]
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80135de:	4b0c      	ldr	r3, [pc, #48]	; (8013610 <tcp_alloc+0xfc>)
 80135e0:	781a      	ldrb	r2, [r3, #0]
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 80135ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	4a08      	ldr	r2, [pc, #32]	; (8013614 <tcp_alloc+0x100>)
 80135f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	4a07      	ldr	r2, [pc, #28]	; (8013618 <tcp_alloc+0x104>)
 80135fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013600:	68fb      	ldr	r3, [r7, #12]
}
 8013602:	4618      	mov	r0, r3
 8013604:	3710      	adds	r7, #16
 8013606:	46bd      	mov	sp, r7
 8013608:	bd80      	pop	{r7, pc}
 801360a:	bf00      	nop
 801360c:	20008618 	.word	0x20008618
 8013610:	2000862e 	.word	0x2000862e
 8013614:	080132cd 	.word	0x080132cd
 8013618:	006ddd00 	.word	0x006ddd00

0801361c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b082      	sub	sp, #8
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d107      	bne.n	801363a <tcp_pcb_purge+0x1e>
 801362a:	4b21      	ldr	r3, [pc, #132]	; (80136b0 <tcp_pcb_purge+0x94>)
 801362c:	f640 0251 	movw	r2, #2129	; 0x851
 8013630:	4920      	ldr	r1, [pc, #128]	; (80136b4 <tcp_pcb_purge+0x98>)
 8013632:	4821      	ldr	r0, [pc, #132]	; (80136b8 <tcp_pcb_purge+0x9c>)
 8013634:	f007 fd16 	bl	801b064 <iprintf>
 8013638:	e037      	b.n	80136aa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	7d1b      	ldrb	r3, [r3, #20]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d033      	beq.n	80136aa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013646:	2b0a      	cmp	r3, #10
 8013648:	d02f      	beq.n	80136aa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801364e:	2b01      	cmp	r3, #1
 8013650:	d02b      	beq.n	80136aa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013656:	2b00      	cmp	r3, #0
 8013658:	d007      	beq.n	801366a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801365e:	4618      	mov	r0, r3
 8013660:	f7fe fb7c 	bl	8011d5c <pbuf_free>
      pcb->refused_data = NULL;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2200      	movs	r2, #0
 8013668:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801366e:	2b00      	cmp	r3, #0
 8013670:	d002      	beq.n	8013678 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	f000 f986 	bl	8013984 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801367e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013684:	4618      	mov	r0, r3
 8013686:	f7ff fdc7 	bl	8013218 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801368e:	4618      	mov	r0, r3
 8013690:	f7ff fdc2 	bl	8013218 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	2200      	movs	r2, #0
 8013698:	66da      	str	r2, [r3, #108]	; 0x6c
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	2200      	movs	r2, #0
 80136a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80136aa:	3708      	adds	r7, #8
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd80      	pop	{r7, pc}
 80136b0:	0801c9d0 	.word	0x0801c9d0
 80136b4:	0801d01c 	.word	0x0801d01c
 80136b8:	0801ca14 	.word	0x0801ca14

080136bc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b084      	sub	sp, #16
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
 80136c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d106      	bne.n	80136da <tcp_pcb_remove+0x1e>
 80136cc:	4b3e      	ldr	r3, [pc, #248]	; (80137c8 <tcp_pcb_remove+0x10c>)
 80136ce:	f640 0283 	movw	r2, #2179	; 0x883
 80136d2:	493e      	ldr	r1, [pc, #248]	; (80137cc <tcp_pcb_remove+0x110>)
 80136d4:	483e      	ldr	r0, [pc, #248]	; (80137d0 <tcp_pcb_remove+0x114>)
 80136d6:	f007 fcc5 	bl	801b064 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d106      	bne.n	80136ee <tcp_pcb_remove+0x32>
 80136e0:	4b39      	ldr	r3, [pc, #228]	; (80137c8 <tcp_pcb_remove+0x10c>)
 80136e2:	f640 0284 	movw	r2, #2180	; 0x884
 80136e6:	493b      	ldr	r1, [pc, #236]	; (80137d4 <tcp_pcb_remove+0x118>)
 80136e8:	4839      	ldr	r0, [pc, #228]	; (80137d0 <tcp_pcb_remove+0x114>)
 80136ea:	f007 fcbb 	bl	801b064 <iprintf>

  TCP_RMV(pcblist, pcb);
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	683a      	ldr	r2, [r7, #0]
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d105      	bne.n	8013704 <tcp_pcb_remove+0x48>
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	68da      	ldr	r2, [r3, #12]
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	601a      	str	r2, [r3, #0]
 8013702:	e013      	b.n	801372c <tcp_pcb_remove+0x70>
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	60fb      	str	r3, [r7, #12]
 801370a:	e00c      	b.n	8013726 <tcp_pcb_remove+0x6a>
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	68db      	ldr	r3, [r3, #12]
 8013710:	683a      	ldr	r2, [r7, #0]
 8013712:	429a      	cmp	r2, r3
 8013714:	d104      	bne.n	8013720 <tcp_pcb_remove+0x64>
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	68da      	ldr	r2, [r3, #12]
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	60da      	str	r2, [r3, #12]
 801371e:	e005      	b.n	801372c <tcp_pcb_remove+0x70>
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	68db      	ldr	r3, [r3, #12]
 8013724:	60fb      	str	r3, [r7, #12]
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d1ef      	bne.n	801370c <tcp_pcb_remove+0x50>
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	2200      	movs	r2, #0
 8013730:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013732:	6838      	ldr	r0, [r7, #0]
 8013734:	f7ff ff72 	bl	801361c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013738:	683b      	ldr	r3, [r7, #0]
 801373a:	7d1b      	ldrb	r3, [r3, #20]
 801373c:	2b0a      	cmp	r3, #10
 801373e:	d013      	beq.n	8013768 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013744:	2b01      	cmp	r3, #1
 8013746:	d00f      	beq.n	8013768 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	8b5b      	ldrh	r3, [r3, #26]
 801374c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013750:	2b00      	cmp	r3, #0
 8013752:	d009      	beq.n	8013768 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	8b5b      	ldrh	r3, [r3, #26]
 8013758:	f043 0302 	orr.w	r3, r3, #2
 801375c:	b29a      	uxth	r2, r3
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013762:	6838      	ldr	r0, [r7, #0]
 8013764:	f002 ff6e 	bl	8016644 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	7d1b      	ldrb	r3, [r3, #20]
 801376c:	2b01      	cmp	r3, #1
 801376e:	d020      	beq.n	80137b2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013774:	2b00      	cmp	r3, #0
 8013776:	d006      	beq.n	8013786 <tcp_pcb_remove+0xca>
 8013778:	4b13      	ldr	r3, [pc, #76]	; (80137c8 <tcp_pcb_remove+0x10c>)
 801377a:	f640 0293 	movw	r2, #2195	; 0x893
 801377e:	4916      	ldr	r1, [pc, #88]	; (80137d8 <tcp_pcb_remove+0x11c>)
 8013780:	4813      	ldr	r0, [pc, #76]	; (80137d0 <tcp_pcb_remove+0x114>)
 8013782:	f007 fc6f 	bl	801b064 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801378a:	2b00      	cmp	r3, #0
 801378c:	d006      	beq.n	801379c <tcp_pcb_remove+0xe0>
 801378e:	4b0e      	ldr	r3, [pc, #56]	; (80137c8 <tcp_pcb_remove+0x10c>)
 8013790:	f640 0294 	movw	r2, #2196	; 0x894
 8013794:	4911      	ldr	r1, [pc, #68]	; (80137dc <tcp_pcb_remove+0x120>)
 8013796:	480e      	ldr	r0, [pc, #56]	; (80137d0 <tcp_pcb_remove+0x114>)
 8013798:	f007 fc64 	bl	801b064 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d006      	beq.n	80137b2 <tcp_pcb_remove+0xf6>
 80137a4:	4b08      	ldr	r3, [pc, #32]	; (80137c8 <tcp_pcb_remove+0x10c>)
 80137a6:	f640 0296 	movw	r2, #2198	; 0x896
 80137aa:	490d      	ldr	r1, [pc, #52]	; (80137e0 <tcp_pcb_remove+0x124>)
 80137ac:	4808      	ldr	r0, [pc, #32]	; (80137d0 <tcp_pcb_remove+0x114>)
 80137ae:	f007 fc59 	bl	801b064 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	2200      	movs	r2, #0
 80137b6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	2200      	movs	r2, #0
 80137bc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80137be:	bf00      	nop
 80137c0:	3710      	adds	r7, #16
 80137c2:	46bd      	mov	sp, r7
 80137c4:	bd80      	pop	{r7, pc}
 80137c6:	bf00      	nop
 80137c8:	0801c9d0 	.word	0x0801c9d0
 80137cc:	0801d038 	.word	0x0801d038
 80137d0:	0801ca14 	.word	0x0801ca14
 80137d4:	0801d054 	.word	0x0801d054
 80137d8:	0801d074 	.word	0x0801d074
 80137dc:	0801d08c 	.word	0x0801d08c
 80137e0:	0801d0a8 	.word	0x0801d0a8

080137e4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b082      	sub	sp, #8
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d106      	bne.n	8013800 <tcp_next_iss+0x1c>
 80137f2:	4b0a      	ldr	r3, [pc, #40]	; (801381c <tcp_next_iss+0x38>)
 80137f4:	f640 02af 	movw	r2, #2223	; 0x8af
 80137f8:	4909      	ldr	r1, [pc, #36]	; (8013820 <tcp_next_iss+0x3c>)
 80137fa:	480a      	ldr	r0, [pc, #40]	; (8013824 <tcp_next_iss+0x40>)
 80137fc:	f007 fc32 	bl	801b064 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013800:	4b09      	ldr	r3, [pc, #36]	; (8013828 <tcp_next_iss+0x44>)
 8013802:	681a      	ldr	r2, [r3, #0]
 8013804:	4b09      	ldr	r3, [pc, #36]	; (801382c <tcp_next_iss+0x48>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	4413      	add	r3, r2
 801380a:	4a07      	ldr	r2, [pc, #28]	; (8013828 <tcp_next_iss+0x44>)
 801380c:	6013      	str	r3, [r2, #0]
  return iss;
 801380e:	4b06      	ldr	r3, [pc, #24]	; (8013828 <tcp_next_iss+0x44>)
 8013810:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013812:	4618      	mov	r0, r3
 8013814:	3708      	adds	r7, #8
 8013816:	46bd      	mov	sp, r7
 8013818:	bd80      	pop	{r7, pc}
 801381a:	bf00      	nop
 801381c:	0801c9d0 	.word	0x0801c9d0
 8013820:	0801d0c0 	.word	0x0801d0c0
 8013824:	0801ca14 	.word	0x0801ca14
 8013828:	20000130 	.word	0x20000130
 801382c:	20008618 	.word	0x20008618

08013830 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b086      	sub	sp, #24
 8013834:	af00      	add	r7, sp, #0
 8013836:	4603      	mov	r3, r0
 8013838:	60b9      	str	r1, [r7, #8]
 801383a:	607a      	str	r2, [r7, #4]
 801383c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d106      	bne.n	8013852 <tcp_eff_send_mss_netif+0x22>
 8013844:	4b14      	ldr	r3, [pc, #80]	; (8013898 <tcp_eff_send_mss_netif+0x68>)
 8013846:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801384a:	4914      	ldr	r1, [pc, #80]	; (801389c <tcp_eff_send_mss_netif+0x6c>)
 801384c:	4814      	ldr	r0, [pc, #80]	; (80138a0 <tcp_eff_send_mss_netif+0x70>)
 801384e:	f007 fc09 	bl	801b064 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d101      	bne.n	801385c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013858:	89fb      	ldrh	r3, [r7, #14]
 801385a:	e019      	b.n	8013890 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013860:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013862:	8afb      	ldrh	r3, [r7, #22]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d012      	beq.n	801388e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013868:	2328      	movs	r3, #40	; 0x28
 801386a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801386c:	8afa      	ldrh	r2, [r7, #22]
 801386e:	8abb      	ldrh	r3, [r7, #20]
 8013870:	429a      	cmp	r2, r3
 8013872:	d904      	bls.n	801387e <tcp_eff_send_mss_netif+0x4e>
 8013874:	8afa      	ldrh	r2, [r7, #22]
 8013876:	8abb      	ldrh	r3, [r7, #20]
 8013878:	1ad3      	subs	r3, r2, r3
 801387a:	b29b      	uxth	r3, r3
 801387c:	e000      	b.n	8013880 <tcp_eff_send_mss_netif+0x50>
 801387e:	2300      	movs	r3, #0
 8013880:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013882:	8a7a      	ldrh	r2, [r7, #18]
 8013884:	89fb      	ldrh	r3, [r7, #14]
 8013886:	4293      	cmp	r3, r2
 8013888:	bf28      	it	cs
 801388a:	4613      	movcs	r3, r2
 801388c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801388e:	89fb      	ldrh	r3, [r7, #14]
}
 8013890:	4618      	mov	r0, r3
 8013892:	3718      	adds	r7, #24
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}
 8013898:	0801c9d0 	.word	0x0801c9d0
 801389c:	0801d0dc 	.word	0x0801d0dc
 80138a0:	0801ca14 	.word	0x0801ca14

080138a4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b084      	sub	sp, #16
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
 80138ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80138ae:	683b      	ldr	r3, [r7, #0]
 80138b0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d119      	bne.n	80138ec <tcp_netif_ip_addr_changed_pcblist+0x48>
 80138b8:	4b10      	ldr	r3, [pc, #64]	; (80138fc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80138ba:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80138be:	4910      	ldr	r1, [pc, #64]	; (8013900 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80138c0:	4810      	ldr	r0, [pc, #64]	; (8013904 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80138c2:	f007 fbcf 	bl	801b064 <iprintf>

  while (pcb != NULL) {
 80138c6:	e011      	b.n	80138ec <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	681a      	ldr	r2, [r3, #0]
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	429a      	cmp	r2, r3
 80138d2:	d108      	bne.n	80138e6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	68db      	ldr	r3, [r3, #12]
 80138d8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80138da:	68f8      	ldr	r0, [r7, #12]
 80138dc:	f7fe ffc6 	bl	801286c <tcp_abort>
      pcb = next;
 80138e0:	68bb      	ldr	r3, [r7, #8]
 80138e2:	60fb      	str	r3, [r7, #12]
 80138e4:	e002      	b.n	80138ec <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	68db      	ldr	r3, [r3, #12]
 80138ea:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d1ea      	bne.n	80138c8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80138f2:	bf00      	nop
 80138f4:	bf00      	nop
 80138f6:	3710      	adds	r7, #16
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bd80      	pop	{r7, pc}
 80138fc:	0801c9d0 	.word	0x0801c9d0
 8013900:	0801d104 	.word	0x0801d104
 8013904:	0801ca14 	.word	0x0801ca14

08013908 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b084      	sub	sp, #16
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
 8013910:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d02a      	beq.n	801396e <tcp_netif_ip_addr_changed+0x66>
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d026      	beq.n	801396e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013920:	4b15      	ldr	r3, [pc, #84]	; (8013978 <tcp_netif_ip_addr_changed+0x70>)
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	4619      	mov	r1, r3
 8013926:	6878      	ldr	r0, [r7, #4]
 8013928:	f7ff ffbc 	bl	80138a4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801392c:	4b13      	ldr	r3, [pc, #76]	; (801397c <tcp_netif_ip_addr_changed+0x74>)
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	4619      	mov	r1, r3
 8013932:	6878      	ldr	r0, [r7, #4]
 8013934:	f7ff ffb6 	bl	80138a4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d017      	beq.n	801396e <tcp_netif_ip_addr_changed+0x66>
 801393e:	683b      	ldr	r3, [r7, #0]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d013      	beq.n	801396e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013946:	4b0e      	ldr	r3, [pc, #56]	; (8013980 <tcp_netif_ip_addr_changed+0x78>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	60fb      	str	r3, [r7, #12]
 801394c:	e00c      	b.n	8013968 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	681a      	ldr	r2, [r3, #0]
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	429a      	cmp	r2, r3
 8013958:	d103      	bne.n	8013962 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	681a      	ldr	r2, [r3, #0]
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	68db      	ldr	r3, [r3, #12]
 8013966:	60fb      	str	r3, [r7, #12]
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d1ef      	bne.n	801394e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801396e:	bf00      	nop
 8013970:	3710      	adds	r7, #16
 8013972:	46bd      	mov	sp, r7
 8013974:	bd80      	pop	{r7, pc}
 8013976:	bf00      	nop
 8013978:	20008624 	.word	0x20008624
 801397c:	2000861c 	.word	0x2000861c
 8013980:	20008620 	.word	0x20008620

08013984 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b082      	sub	sp, #8
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013990:	2b00      	cmp	r3, #0
 8013992:	d007      	beq.n	80139a4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013998:	4618      	mov	r0, r3
 801399a:	f7ff fc3d 	bl	8013218 <tcp_segs_free>
    pcb->ooseq = NULL;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	2200      	movs	r2, #0
 80139a2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80139a4:	bf00      	nop
 80139a6:	3708      	adds	r7, #8
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}

080139ac <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80139ac:	b590      	push	{r4, r7, lr}
 80139ae:	b08d      	sub	sp, #52	; 0x34
 80139b0:	af04      	add	r7, sp, #16
 80139b2:	6078      	str	r0, [r7, #4]
 80139b4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d105      	bne.n	80139c8 <tcp_input+0x1c>
 80139bc:	4b9b      	ldr	r3, [pc, #620]	; (8013c2c <tcp_input+0x280>)
 80139be:	2283      	movs	r2, #131	; 0x83
 80139c0:	499b      	ldr	r1, [pc, #620]	; (8013c30 <tcp_input+0x284>)
 80139c2:	489c      	ldr	r0, [pc, #624]	; (8013c34 <tcp_input+0x288>)
 80139c4:	f007 fb4e 	bl	801b064 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	685b      	ldr	r3, [r3, #4]
 80139cc:	4a9a      	ldr	r2, [pc, #616]	; (8013c38 <tcp_input+0x28c>)
 80139ce:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	895b      	ldrh	r3, [r3, #10]
 80139d4:	2b13      	cmp	r3, #19
 80139d6:	f240 83d1 	bls.w	801417c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80139da:	4b98      	ldr	r3, [pc, #608]	; (8013c3c <tcp_input+0x290>)
 80139dc:	695b      	ldr	r3, [r3, #20]
 80139de:	4a97      	ldr	r2, [pc, #604]	; (8013c3c <tcp_input+0x290>)
 80139e0:	6812      	ldr	r2, [r2, #0]
 80139e2:	4611      	mov	r1, r2
 80139e4:	4618      	mov	r0, r3
 80139e6:	f005 fc15 	bl	8019214 <ip4_addr_isbroadcast_u32>
 80139ea:	4603      	mov	r3, r0
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	f040 83c7 	bne.w	8014180 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80139f2:	4b92      	ldr	r3, [pc, #584]	; (8013c3c <tcp_input+0x290>)
 80139f4:	695b      	ldr	r3, [r3, #20]
 80139f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80139fa:	2be0      	cmp	r3, #224	; 0xe0
 80139fc:	f000 83c0 	beq.w	8014180 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013a00:	4b8d      	ldr	r3, [pc, #564]	; (8013c38 <tcp_input+0x28c>)
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	899b      	ldrh	r3, [r3, #12]
 8013a06:	b29b      	uxth	r3, r3
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f7fc fe4a 	bl	80106a2 <lwip_htons>
 8013a0e:	4603      	mov	r3, r0
 8013a10:	0b1b      	lsrs	r3, r3, #12
 8013a12:	b29b      	uxth	r3, r3
 8013a14:	b2db      	uxtb	r3, r3
 8013a16:	009b      	lsls	r3, r3, #2
 8013a18:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013a1a:	7cbb      	ldrb	r3, [r7, #18]
 8013a1c:	2b13      	cmp	r3, #19
 8013a1e:	f240 83b1 	bls.w	8014184 <tcp_input+0x7d8>
 8013a22:	7cbb      	ldrb	r3, [r7, #18]
 8013a24:	b29a      	uxth	r2, r3
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	891b      	ldrh	r3, [r3, #8]
 8013a2a:	429a      	cmp	r2, r3
 8013a2c:	f200 83aa 	bhi.w	8014184 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013a30:	7cbb      	ldrb	r3, [r7, #18]
 8013a32:	b29b      	uxth	r3, r3
 8013a34:	3b14      	subs	r3, #20
 8013a36:	b29a      	uxth	r2, r3
 8013a38:	4b81      	ldr	r3, [pc, #516]	; (8013c40 <tcp_input+0x294>)
 8013a3a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8013a3c:	4b81      	ldr	r3, [pc, #516]	; (8013c44 <tcp_input+0x298>)
 8013a3e:	2200      	movs	r2, #0
 8013a40:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	895a      	ldrh	r2, [r3, #10]
 8013a46:	7cbb      	ldrb	r3, [r7, #18]
 8013a48:	b29b      	uxth	r3, r3
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	d309      	bcc.n	8013a62 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8013a4e:	4b7c      	ldr	r3, [pc, #496]	; (8013c40 <tcp_input+0x294>)
 8013a50:	881a      	ldrh	r2, [r3, #0]
 8013a52:	4b7d      	ldr	r3, [pc, #500]	; (8013c48 <tcp_input+0x29c>)
 8013a54:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013a56:	7cbb      	ldrb	r3, [r7, #18]
 8013a58:	4619      	mov	r1, r3
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	f7fe f8f8 	bl	8011c50 <pbuf_remove_header>
 8013a60:	e04e      	b.n	8013b00 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d105      	bne.n	8013a76 <tcp_input+0xca>
 8013a6a:	4b70      	ldr	r3, [pc, #448]	; (8013c2c <tcp_input+0x280>)
 8013a6c:	22c2      	movs	r2, #194	; 0xc2
 8013a6e:	4977      	ldr	r1, [pc, #476]	; (8013c4c <tcp_input+0x2a0>)
 8013a70:	4870      	ldr	r0, [pc, #448]	; (8013c34 <tcp_input+0x288>)
 8013a72:	f007 faf7 	bl	801b064 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013a76:	2114      	movs	r1, #20
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f7fe f8e9 	bl	8011c50 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	895a      	ldrh	r2, [r3, #10]
 8013a82:	4b71      	ldr	r3, [pc, #452]	; (8013c48 <tcp_input+0x29c>)
 8013a84:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013a86:	4b6e      	ldr	r3, [pc, #440]	; (8013c40 <tcp_input+0x294>)
 8013a88:	881a      	ldrh	r2, [r3, #0]
 8013a8a:	4b6f      	ldr	r3, [pc, #444]	; (8013c48 <tcp_input+0x29c>)
 8013a8c:	881b      	ldrh	r3, [r3, #0]
 8013a8e:	1ad3      	subs	r3, r2, r3
 8013a90:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8013a92:	4b6d      	ldr	r3, [pc, #436]	; (8013c48 <tcp_input+0x29c>)
 8013a94:	881b      	ldrh	r3, [r3, #0]
 8013a96:	4619      	mov	r1, r3
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f7fe f8d9 	bl	8011c50 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	895b      	ldrh	r3, [r3, #10]
 8013aa4:	8a3a      	ldrh	r2, [r7, #16]
 8013aa6:	429a      	cmp	r2, r3
 8013aa8:	f200 836e 	bhi.w	8014188 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	685b      	ldr	r3, [r3, #4]
 8013ab2:	4a64      	ldr	r2, [pc, #400]	; (8013c44 <tcp_input+0x298>)
 8013ab4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	8a3a      	ldrh	r2, [r7, #16]
 8013abc:	4611      	mov	r1, r2
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f7fe f8c6 	bl	8011c50 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	891a      	ldrh	r2, [r3, #8]
 8013ac8:	8a3b      	ldrh	r3, [r7, #16]
 8013aca:	1ad3      	subs	r3, r2, r3
 8013acc:	b29a      	uxth	r2, r3
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	895b      	ldrh	r3, [r3, #10]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d005      	beq.n	8013ae6 <tcp_input+0x13a>
 8013ada:	4b54      	ldr	r3, [pc, #336]	; (8013c2c <tcp_input+0x280>)
 8013adc:	22df      	movs	r2, #223	; 0xdf
 8013ade:	495c      	ldr	r1, [pc, #368]	; (8013c50 <tcp_input+0x2a4>)
 8013ae0:	4854      	ldr	r0, [pc, #336]	; (8013c34 <tcp_input+0x288>)
 8013ae2:	f007 fabf 	bl	801b064 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	891a      	ldrh	r2, [r3, #8]
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	891b      	ldrh	r3, [r3, #8]
 8013af0:	429a      	cmp	r2, r3
 8013af2:	d005      	beq.n	8013b00 <tcp_input+0x154>
 8013af4:	4b4d      	ldr	r3, [pc, #308]	; (8013c2c <tcp_input+0x280>)
 8013af6:	22e0      	movs	r2, #224	; 0xe0
 8013af8:	4956      	ldr	r1, [pc, #344]	; (8013c54 <tcp_input+0x2a8>)
 8013afa:	484e      	ldr	r0, [pc, #312]	; (8013c34 <tcp_input+0x288>)
 8013afc:	f007 fab2 	bl	801b064 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013b00:	4b4d      	ldr	r3, [pc, #308]	; (8013c38 <tcp_input+0x28c>)
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	881b      	ldrh	r3, [r3, #0]
 8013b06:	b29b      	uxth	r3, r3
 8013b08:	4a4b      	ldr	r2, [pc, #300]	; (8013c38 <tcp_input+0x28c>)
 8013b0a:	6814      	ldr	r4, [r2, #0]
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7fc fdc8 	bl	80106a2 <lwip_htons>
 8013b12:	4603      	mov	r3, r0
 8013b14:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013b16:	4b48      	ldr	r3, [pc, #288]	; (8013c38 <tcp_input+0x28c>)
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	885b      	ldrh	r3, [r3, #2]
 8013b1c:	b29b      	uxth	r3, r3
 8013b1e:	4a46      	ldr	r2, [pc, #280]	; (8013c38 <tcp_input+0x28c>)
 8013b20:	6814      	ldr	r4, [r2, #0]
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7fc fdbd 	bl	80106a2 <lwip_htons>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013b2c:	4b42      	ldr	r3, [pc, #264]	; (8013c38 <tcp_input+0x28c>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	685b      	ldr	r3, [r3, #4]
 8013b32:	4a41      	ldr	r2, [pc, #260]	; (8013c38 <tcp_input+0x28c>)
 8013b34:	6814      	ldr	r4, [r2, #0]
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7fc fdc8 	bl	80106cc <lwip_htonl>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	6063      	str	r3, [r4, #4]
 8013b40:	6863      	ldr	r3, [r4, #4]
 8013b42:	4a45      	ldr	r2, [pc, #276]	; (8013c58 <tcp_input+0x2ac>)
 8013b44:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013b46:	4b3c      	ldr	r3, [pc, #240]	; (8013c38 <tcp_input+0x28c>)
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	689b      	ldr	r3, [r3, #8]
 8013b4c:	4a3a      	ldr	r2, [pc, #232]	; (8013c38 <tcp_input+0x28c>)
 8013b4e:	6814      	ldr	r4, [r2, #0]
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7fc fdbb 	bl	80106cc <lwip_htonl>
 8013b56:	4603      	mov	r3, r0
 8013b58:	60a3      	str	r3, [r4, #8]
 8013b5a:	68a3      	ldr	r3, [r4, #8]
 8013b5c:	4a3f      	ldr	r2, [pc, #252]	; (8013c5c <tcp_input+0x2b0>)
 8013b5e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013b60:	4b35      	ldr	r3, [pc, #212]	; (8013c38 <tcp_input+0x28c>)
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	89db      	ldrh	r3, [r3, #14]
 8013b66:	b29b      	uxth	r3, r3
 8013b68:	4a33      	ldr	r2, [pc, #204]	; (8013c38 <tcp_input+0x28c>)
 8013b6a:	6814      	ldr	r4, [r2, #0]
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f7fc fd98 	bl	80106a2 <lwip_htons>
 8013b72:	4603      	mov	r3, r0
 8013b74:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013b76:	4b30      	ldr	r3, [pc, #192]	; (8013c38 <tcp_input+0x28c>)
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	899b      	ldrh	r3, [r3, #12]
 8013b7c:	b29b      	uxth	r3, r3
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f7fc fd8f 	bl	80106a2 <lwip_htons>
 8013b84:	4603      	mov	r3, r0
 8013b86:	b2db      	uxtb	r3, r3
 8013b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013b8c:	b2da      	uxtb	r2, r3
 8013b8e:	4b34      	ldr	r3, [pc, #208]	; (8013c60 <tcp_input+0x2b4>)
 8013b90:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	891a      	ldrh	r2, [r3, #8]
 8013b96:	4b33      	ldr	r3, [pc, #204]	; (8013c64 <tcp_input+0x2b8>)
 8013b98:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013b9a:	4b31      	ldr	r3, [pc, #196]	; (8013c60 <tcp_input+0x2b4>)
 8013b9c:	781b      	ldrb	r3, [r3, #0]
 8013b9e:	f003 0303 	and.w	r3, r3, #3
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d00c      	beq.n	8013bc0 <tcp_input+0x214>
    tcplen++;
 8013ba6:	4b2f      	ldr	r3, [pc, #188]	; (8013c64 <tcp_input+0x2b8>)
 8013ba8:	881b      	ldrh	r3, [r3, #0]
 8013baa:	3301      	adds	r3, #1
 8013bac:	b29a      	uxth	r2, r3
 8013bae:	4b2d      	ldr	r3, [pc, #180]	; (8013c64 <tcp_input+0x2b8>)
 8013bb0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	891a      	ldrh	r2, [r3, #8]
 8013bb6:	4b2b      	ldr	r3, [pc, #172]	; (8013c64 <tcp_input+0x2b8>)
 8013bb8:	881b      	ldrh	r3, [r3, #0]
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	f200 82e6 	bhi.w	801418c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013bc4:	4b28      	ldr	r3, [pc, #160]	; (8013c68 <tcp_input+0x2bc>)
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	61fb      	str	r3, [r7, #28]
 8013bca:	e09d      	b.n	8013d08 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013bcc:	69fb      	ldr	r3, [r7, #28]
 8013bce:	7d1b      	ldrb	r3, [r3, #20]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d105      	bne.n	8013be0 <tcp_input+0x234>
 8013bd4:	4b15      	ldr	r3, [pc, #84]	; (8013c2c <tcp_input+0x280>)
 8013bd6:	22fb      	movs	r2, #251	; 0xfb
 8013bd8:	4924      	ldr	r1, [pc, #144]	; (8013c6c <tcp_input+0x2c0>)
 8013bda:	4816      	ldr	r0, [pc, #88]	; (8013c34 <tcp_input+0x288>)
 8013bdc:	f007 fa42 	bl	801b064 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013be0:	69fb      	ldr	r3, [r7, #28]
 8013be2:	7d1b      	ldrb	r3, [r3, #20]
 8013be4:	2b0a      	cmp	r3, #10
 8013be6:	d105      	bne.n	8013bf4 <tcp_input+0x248>
 8013be8:	4b10      	ldr	r3, [pc, #64]	; (8013c2c <tcp_input+0x280>)
 8013bea:	22fc      	movs	r2, #252	; 0xfc
 8013bec:	4920      	ldr	r1, [pc, #128]	; (8013c70 <tcp_input+0x2c4>)
 8013bee:	4811      	ldr	r0, [pc, #68]	; (8013c34 <tcp_input+0x288>)
 8013bf0:	f007 fa38 	bl	801b064 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013bf4:	69fb      	ldr	r3, [r7, #28]
 8013bf6:	7d1b      	ldrb	r3, [r3, #20]
 8013bf8:	2b01      	cmp	r3, #1
 8013bfa:	d105      	bne.n	8013c08 <tcp_input+0x25c>
 8013bfc:	4b0b      	ldr	r3, [pc, #44]	; (8013c2c <tcp_input+0x280>)
 8013bfe:	22fd      	movs	r2, #253	; 0xfd
 8013c00:	491c      	ldr	r1, [pc, #112]	; (8013c74 <tcp_input+0x2c8>)
 8013c02:	480c      	ldr	r0, [pc, #48]	; (8013c34 <tcp_input+0x288>)
 8013c04:	f007 fa2e 	bl	801b064 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c08:	69fb      	ldr	r3, [r7, #28]
 8013c0a:	7a1b      	ldrb	r3, [r3, #8]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d033      	beq.n	8013c78 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013c10:	69fb      	ldr	r3, [r7, #28]
 8013c12:	7a1a      	ldrb	r2, [r3, #8]
 8013c14:	4b09      	ldr	r3, [pc, #36]	; (8013c3c <tcp_input+0x290>)
 8013c16:	685b      	ldr	r3, [r3, #4]
 8013c18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013c1c:	3301      	adds	r3, #1
 8013c1e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c20:	429a      	cmp	r2, r3
 8013c22:	d029      	beq.n	8013c78 <tcp_input+0x2cc>
      prev = pcb;
 8013c24:	69fb      	ldr	r3, [r7, #28]
 8013c26:	61bb      	str	r3, [r7, #24]
      continue;
 8013c28:	e06b      	b.n	8013d02 <tcp_input+0x356>
 8013c2a:	bf00      	nop
 8013c2c:	0801d138 	.word	0x0801d138
 8013c30:	0801d16c 	.word	0x0801d16c
 8013c34:	0801d184 	.word	0x0801d184
 8013c38:	20008640 	.word	0x20008640
 8013c3c:	200054e8 	.word	0x200054e8
 8013c40:	20008644 	.word	0x20008644
 8013c44:	20008648 	.word	0x20008648
 8013c48:	20008646 	.word	0x20008646
 8013c4c:	0801d1ac 	.word	0x0801d1ac
 8013c50:	0801d1bc 	.word	0x0801d1bc
 8013c54:	0801d1c8 	.word	0x0801d1c8
 8013c58:	20008650 	.word	0x20008650
 8013c5c:	20008654 	.word	0x20008654
 8013c60:	2000865c 	.word	0x2000865c
 8013c64:	2000865a 	.word	0x2000865a
 8013c68:	20008624 	.word	0x20008624
 8013c6c:	0801d1e8 	.word	0x0801d1e8
 8013c70:	0801d210 	.word	0x0801d210
 8013c74:	0801d23c 	.word	0x0801d23c
    }

    if (pcb->remote_port == tcphdr->src &&
 8013c78:	69fb      	ldr	r3, [r7, #28]
 8013c7a:	8b1a      	ldrh	r2, [r3, #24]
 8013c7c:	4b72      	ldr	r3, [pc, #456]	; (8013e48 <tcp_input+0x49c>)
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	881b      	ldrh	r3, [r3, #0]
 8013c82:	b29b      	uxth	r3, r3
 8013c84:	429a      	cmp	r2, r3
 8013c86:	d13a      	bne.n	8013cfe <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	8ada      	ldrh	r2, [r3, #22]
 8013c8c:	4b6e      	ldr	r3, [pc, #440]	; (8013e48 <tcp_input+0x49c>)
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	885b      	ldrh	r3, [r3, #2]
 8013c92:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d132      	bne.n	8013cfe <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013c98:	69fb      	ldr	r3, [r7, #28]
 8013c9a:	685a      	ldr	r2, [r3, #4]
 8013c9c:	4b6b      	ldr	r3, [pc, #428]	; (8013e4c <tcp_input+0x4a0>)
 8013c9e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013ca0:	429a      	cmp	r2, r3
 8013ca2:	d12c      	bne.n	8013cfe <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013ca4:	69fb      	ldr	r3, [r7, #28]
 8013ca6:	681a      	ldr	r2, [r3, #0]
 8013ca8:	4b68      	ldr	r3, [pc, #416]	; (8013e4c <tcp_input+0x4a0>)
 8013caa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013cac:	429a      	cmp	r2, r3
 8013cae:	d126      	bne.n	8013cfe <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013cb0:	69fb      	ldr	r3, [r7, #28]
 8013cb2:	68db      	ldr	r3, [r3, #12]
 8013cb4:	69fa      	ldr	r2, [r7, #28]
 8013cb6:	429a      	cmp	r2, r3
 8013cb8:	d106      	bne.n	8013cc8 <tcp_input+0x31c>
 8013cba:	4b65      	ldr	r3, [pc, #404]	; (8013e50 <tcp_input+0x4a4>)
 8013cbc:	f240 120d 	movw	r2, #269	; 0x10d
 8013cc0:	4964      	ldr	r1, [pc, #400]	; (8013e54 <tcp_input+0x4a8>)
 8013cc2:	4865      	ldr	r0, [pc, #404]	; (8013e58 <tcp_input+0x4ac>)
 8013cc4:	f007 f9ce 	bl	801b064 <iprintf>
      if (prev != NULL) {
 8013cc8:	69bb      	ldr	r3, [r7, #24]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d00a      	beq.n	8013ce4 <tcp_input+0x338>
        prev->next = pcb->next;
 8013cce:	69fb      	ldr	r3, [r7, #28]
 8013cd0:	68da      	ldr	r2, [r3, #12]
 8013cd2:	69bb      	ldr	r3, [r7, #24]
 8013cd4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013cd6:	4b61      	ldr	r3, [pc, #388]	; (8013e5c <tcp_input+0x4b0>)
 8013cd8:	681a      	ldr	r2, [r3, #0]
 8013cda:	69fb      	ldr	r3, [r7, #28]
 8013cdc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013cde:	4a5f      	ldr	r2, [pc, #380]	; (8013e5c <tcp_input+0x4b0>)
 8013ce0:	69fb      	ldr	r3, [r7, #28]
 8013ce2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013ce4:	69fb      	ldr	r3, [r7, #28]
 8013ce6:	68db      	ldr	r3, [r3, #12]
 8013ce8:	69fa      	ldr	r2, [r7, #28]
 8013cea:	429a      	cmp	r2, r3
 8013cec:	d111      	bne.n	8013d12 <tcp_input+0x366>
 8013cee:	4b58      	ldr	r3, [pc, #352]	; (8013e50 <tcp_input+0x4a4>)
 8013cf0:	f240 1215 	movw	r2, #277	; 0x115
 8013cf4:	495a      	ldr	r1, [pc, #360]	; (8013e60 <tcp_input+0x4b4>)
 8013cf6:	4858      	ldr	r0, [pc, #352]	; (8013e58 <tcp_input+0x4ac>)
 8013cf8:	f007 f9b4 	bl	801b064 <iprintf>
      break;
 8013cfc:	e009      	b.n	8013d12 <tcp_input+0x366>
    }
    prev = pcb;
 8013cfe:	69fb      	ldr	r3, [r7, #28]
 8013d00:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d02:	69fb      	ldr	r3, [r7, #28]
 8013d04:	68db      	ldr	r3, [r3, #12]
 8013d06:	61fb      	str	r3, [r7, #28]
 8013d08:	69fb      	ldr	r3, [r7, #28]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	f47f af5e 	bne.w	8013bcc <tcp_input+0x220>
 8013d10:	e000      	b.n	8013d14 <tcp_input+0x368>
      break;
 8013d12:	bf00      	nop
  }

  if (pcb == NULL) {
 8013d14:	69fb      	ldr	r3, [r7, #28]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	f040 80aa 	bne.w	8013e70 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d1c:	4b51      	ldr	r3, [pc, #324]	; (8013e64 <tcp_input+0x4b8>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	61fb      	str	r3, [r7, #28]
 8013d22:	e03f      	b.n	8013da4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013d24:	69fb      	ldr	r3, [r7, #28]
 8013d26:	7d1b      	ldrb	r3, [r3, #20]
 8013d28:	2b0a      	cmp	r3, #10
 8013d2a:	d006      	beq.n	8013d3a <tcp_input+0x38e>
 8013d2c:	4b48      	ldr	r3, [pc, #288]	; (8013e50 <tcp_input+0x4a4>)
 8013d2e:	f240 121f 	movw	r2, #287	; 0x11f
 8013d32:	494d      	ldr	r1, [pc, #308]	; (8013e68 <tcp_input+0x4bc>)
 8013d34:	4848      	ldr	r0, [pc, #288]	; (8013e58 <tcp_input+0x4ac>)
 8013d36:	f007 f995 	bl	801b064 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d3a:	69fb      	ldr	r3, [r7, #28]
 8013d3c:	7a1b      	ldrb	r3, [r3, #8]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d009      	beq.n	8013d56 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d42:	69fb      	ldr	r3, [r7, #28]
 8013d44:	7a1a      	ldrb	r2, [r3, #8]
 8013d46:	4b41      	ldr	r3, [pc, #260]	; (8013e4c <tcp_input+0x4a0>)
 8013d48:	685b      	ldr	r3, [r3, #4]
 8013d4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d4e:	3301      	adds	r3, #1
 8013d50:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d52:	429a      	cmp	r2, r3
 8013d54:	d122      	bne.n	8013d9c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013d56:	69fb      	ldr	r3, [r7, #28]
 8013d58:	8b1a      	ldrh	r2, [r3, #24]
 8013d5a:	4b3b      	ldr	r3, [pc, #236]	; (8013e48 <tcp_input+0x49c>)
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	881b      	ldrh	r3, [r3, #0]
 8013d60:	b29b      	uxth	r3, r3
 8013d62:	429a      	cmp	r2, r3
 8013d64:	d11b      	bne.n	8013d9e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013d66:	69fb      	ldr	r3, [r7, #28]
 8013d68:	8ada      	ldrh	r2, [r3, #22]
 8013d6a:	4b37      	ldr	r3, [pc, #220]	; (8013e48 <tcp_input+0x49c>)
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	885b      	ldrh	r3, [r3, #2]
 8013d70:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d113      	bne.n	8013d9e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013d76:	69fb      	ldr	r3, [r7, #28]
 8013d78:	685a      	ldr	r2, [r3, #4]
 8013d7a:	4b34      	ldr	r3, [pc, #208]	; (8013e4c <tcp_input+0x4a0>)
 8013d7c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013d7e:	429a      	cmp	r2, r3
 8013d80:	d10d      	bne.n	8013d9e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013d82:	69fb      	ldr	r3, [r7, #28]
 8013d84:	681a      	ldr	r2, [r3, #0]
 8013d86:	4b31      	ldr	r3, [pc, #196]	; (8013e4c <tcp_input+0x4a0>)
 8013d88:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013d8a:	429a      	cmp	r2, r3
 8013d8c:	d107      	bne.n	8013d9e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013d8e:	69f8      	ldr	r0, [r7, #28]
 8013d90:	f000 fb56 	bl	8014440 <tcp_timewait_input>
        }
        pbuf_free(p);
 8013d94:	6878      	ldr	r0, [r7, #4]
 8013d96:	f7fd ffe1 	bl	8011d5c <pbuf_free>
        return;
 8013d9a:	e1fd      	b.n	8014198 <tcp_input+0x7ec>
        continue;
 8013d9c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d9e:	69fb      	ldr	r3, [r7, #28]
 8013da0:	68db      	ldr	r3, [r3, #12]
 8013da2:	61fb      	str	r3, [r7, #28]
 8013da4:	69fb      	ldr	r3, [r7, #28]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d1bc      	bne.n	8013d24 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013daa:	2300      	movs	r3, #0
 8013dac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013dae:	4b2f      	ldr	r3, [pc, #188]	; (8013e6c <tcp_input+0x4c0>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	617b      	str	r3, [r7, #20]
 8013db4:	e02a      	b.n	8013e0c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013db6:	697b      	ldr	r3, [r7, #20]
 8013db8:	7a1b      	ldrb	r3, [r3, #8]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d00c      	beq.n	8013dd8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013dbe:	697b      	ldr	r3, [r7, #20]
 8013dc0:	7a1a      	ldrb	r2, [r3, #8]
 8013dc2:	4b22      	ldr	r3, [pc, #136]	; (8013e4c <tcp_input+0x4a0>)
 8013dc4:	685b      	ldr	r3, [r3, #4]
 8013dc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013dca:	3301      	adds	r3, #1
 8013dcc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013dce:	429a      	cmp	r2, r3
 8013dd0:	d002      	beq.n	8013dd8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013dd2:	697b      	ldr	r3, [r7, #20]
 8013dd4:	61bb      	str	r3, [r7, #24]
        continue;
 8013dd6:	e016      	b.n	8013e06 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013dd8:	697b      	ldr	r3, [r7, #20]
 8013dda:	8ada      	ldrh	r2, [r3, #22]
 8013ddc:	4b1a      	ldr	r3, [pc, #104]	; (8013e48 <tcp_input+0x49c>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	885b      	ldrh	r3, [r3, #2]
 8013de2:	b29b      	uxth	r3, r3
 8013de4:	429a      	cmp	r2, r3
 8013de6:	d10c      	bne.n	8013e02 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013de8:	697b      	ldr	r3, [r7, #20]
 8013dea:	681a      	ldr	r2, [r3, #0]
 8013dec:	4b17      	ldr	r3, [pc, #92]	; (8013e4c <tcp_input+0x4a0>)
 8013dee:	695b      	ldr	r3, [r3, #20]
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d00f      	beq.n	8013e14 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013df4:	697b      	ldr	r3, [r7, #20]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d00d      	beq.n	8013e16 <tcp_input+0x46a>
 8013dfa:	697b      	ldr	r3, [r7, #20]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d009      	beq.n	8013e16 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013e02:	697b      	ldr	r3, [r7, #20]
 8013e04:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	68db      	ldr	r3, [r3, #12]
 8013e0a:	617b      	str	r3, [r7, #20]
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d1d1      	bne.n	8013db6 <tcp_input+0x40a>
 8013e12:	e000      	b.n	8013e16 <tcp_input+0x46a>
            break;
 8013e14:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d029      	beq.n	8013e70 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013e1c:	69bb      	ldr	r3, [r7, #24]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d00a      	beq.n	8013e38 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013e22:	697b      	ldr	r3, [r7, #20]
 8013e24:	68da      	ldr	r2, [r3, #12]
 8013e26:	69bb      	ldr	r3, [r7, #24]
 8013e28:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013e2a:	4b10      	ldr	r3, [pc, #64]	; (8013e6c <tcp_input+0x4c0>)
 8013e2c:	681a      	ldr	r2, [r3, #0]
 8013e2e:	697b      	ldr	r3, [r7, #20]
 8013e30:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013e32:	4a0e      	ldr	r2, [pc, #56]	; (8013e6c <tcp_input+0x4c0>)
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013e38:	6978      	ldr	r0, [r7, #20]
 8013e3a:	f000 fa03 	bl	8014244 <tcp_listen_input>
      }
      pbuf_free(p);
 8013e3e:	6878      	ldr	r0, [r7, #4]
 8013e40:	f7fd ff8c 	bl	8011d5c <pbuf_free>
      return;
 8013e44:	e1a8      	b.n	8014198 <tcp_input+0x7ec>
 8013e46:	bf00      	nop
 8013e48:	20008640 	.word	0x20008640
 8013e4c:	200054e8 	.word	0x200054e8
 8013e50:	0801d138 	.word	0x0801d138
 8013e54:	0801d264 	.word	0x0801d264
 8013e58:	0801d184 	.word	0x0801d184
 8013e5c:	20008624 	.word	0x20008624
 8013e60:	0801d290 	.word	0x0801d290
 8013e64:	20008628 	.word	0x20008628
 8013e68:	0801d2bc 	.word	0x0801d2bc
 8013e6c:	20008620 	.word	0x20008620
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013e70:	69fb      	ldr	r3, [r7, #28]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	f000 8158 	beq.w	8014128 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013e78:	4b95      	ldr	r3, [pc, #596]	; (80140d0 <tcp_input+0x724>)
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	891a      	ldrh	r2, [r3, #8]
 8013e82:	4b93      	ldr	r3, [pc, #588]	; (80140d0 <tcp_input+0x724>)
 8013e84:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013e86:	4a92      	ldr	r2, [pc, #584]	; (80140d0 <tcp_input+0x724>)
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013e8c:	4b91      	ldr	r3, [pc, #580]	; (80140d4 <tcp_input+0x728>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	4a8f      	ldr	r2, [pc, #572]	; (80140d0 <tcp_input+0x724>)
 8013e92:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013e94:	4b90      	ldr	r3, [pc, #576]	; (80140d8 <tcp_input+0x72c>)
 8013e96:	2200      	movs	r2, #0
 8013e98:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013e9a:	4b90      	ldr	r3, [pc, #576]	; (80140dc <tcp_input+0x730>)
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013ea0:	4b8f      	ldr	r3, [pc, #572]	; (80140e0 <tcp_input+0x734>)
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013ea6:	4b8f      	ldr	r3, [pc, #572]	; (80140e4 <tcp_input+0x738>)
 8013ea8:	781b      	ldrb	r3, [r3, #0]
 8013eaa:	f003 0308 	and.w	r3, r3, #8
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d006      	beq.n	8013ec0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	7b5b      	ldrb	r3, [r3, #13]
 8013eb6:	f043 0301 	orr.w	r3, r3, #1
 8013eba:	b2da      	uxtb	r2, r3
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013ec0:	69fb      	ldr	r3, [r7, #28]
 8013ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d017      	beq.n	8013ef8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013ec8:	69f8      	ldr	r0, [r7, #28]
 8013eca:	f7ff f929 	bl	8013120 <tcp_process_refused_data>
 8013ece:	4603      	mov	r3, r0
 8013ed0:	f113 0f0d 	cmn.w	r3, #13
 8013ed4:	d007      	beq.n	8013ee6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013ed6:	69fb      	ldr	r3, [r7, #28]
 8013ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d00c      	beq.n	8013ef8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013ede:	4b82      	ldr	r3, [pc, #520]	; (80140e8 <tcp_input+0x73c>)
 8013ee0:	881b      	ldrh	r3, [r3, #0]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d008      	beq.n	8013ef8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013ee6:	69fb      	ldr	r3, [r7, #28]
 8013ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	f040 80e3 	bne.w	80140b6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013ef0:	69f8      	ldr	r0, [r7, #28]
 8013ef2:	f003 f9ab 	bl	801724c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013ef6:	e0de      	b.n	80140b6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8013ef8:	4a7c      	ldr	r2, [pc, #496]	; (80140ec <tcp_input+0x740>)
 8013efa:	69fb      	ldr	r3, [r7, #28]
 8013efc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013efe:	69f8      	ldr	r0, [r7, #28]
 8013f00:	f000 fb18 	bl	8014534 <tcp_process>
 8013f04:	4603      	mov	r3, r0
 8013f06:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013f08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013f0c:	f113 0f0d 	cmn.w	r3, #13
 8013f10:	f000 80d3 	beq.w	80140ba <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8013f14:	4b71      	ldr	r3, [pc, #452]	; (80140dc <tcp_input+0x730>)
 8013f16:	781b      	ldrb	r3, [r3, #0]
 8013f18:	f003 0308 	and.w	r3, r3, #8
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d015      	beq.n	8013f4c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013f20:	69fb      	ldr	r3, [r7, #28]
 8013f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d008      	beq.n	8013f3c <tcp_input+0x590>
 8013f2a:	69fb      	ldr	r3, [r7, #28]
 8013f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f30:	69fa      	ldr	r2, [r7, #28]
 8013f32:	6912      	ldr	r2, [r2, #16]
 8013f34:	f06f 010d 	mvn.w	r1, #13
 8013f38:	4610      	mov	r0, r2
 8013f3a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013f3c:	69f9      	ldr	r1, [r7, #28]
 8013f3e:	486c      	ldr	r0, [pc, #432]	; (80140f0 <tcp_input+0x744>)
 8013f40:	f7ff fbbc 	bl	80136bc <tcp_pcb_remove>
        tcp_free(pcb);
 8013f44:	69f8      	ldr	r0, [r7, #28]
 8013f46:	f7fe f9a9 	bl	801229c <tcp_free>
 8013f4a:	e0da      	b.n	8014102 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013f50:	4b63      	ldr	r3, [pc, #396]	; (80140e0 <tcp_input+0x734>)
 8013f52:	881b      	ldrh	r3, [r3, #0]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d01d      	beq.n	8013f94 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013f58:	4b61      	ldr	r3, [pc, #388]	; (80140e0 <tcp_input+0x734>)
 8013f5a:	881b      	ldrh	r3, [r3, #0]
 8013f5c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013f5e:	69fb      	ldr	r3, [r7, #28]
 8013f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d00a      	beq.n	8013f7e <tcp_input+0x5d2>
 8013f68:	69fb      	ldr	r3, [r7, #28]
 8013f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f6e:	69fa      	ldr	r2, [r7, #28]
 8013f70:	6910      	ldr	r0, [r2, #16]
 8013f72:	89fa      	ldrh	r2, [r7, #14]
 8013f74:	69f9      	ldr	r1, [r7, #28]
 8013f76:	4798      	blx	r3
 8013f78:	4603      	mov	r3, r0
 8013f7a:	74fb      	strb	r3, [r7, #19]
 8013f7c:	e001      	b.n	8013f82 <tcp_input+0x5d6>
 8013f7e:	2300      	movs	r3, #0
 8013f80:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013f82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013f86:	f113 0f0d 	cmn.w	r3, #13
 8013f8a:	f000 8098 	beq.w	80140be <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013f8e:	4b54      	ldr	r3, [pc, #336]	; (80140e0 <tcp_input+0x734>)
 8013f90:	2200      	movs	r2, #0
 8013f92:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013f94:	69f8      	ldr	r0, [r7, #28]
 8013f96:	f000 f915 	bl	80141c4 <tcp_input_delayed_close>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	f040 8090 	bne.w	80140c2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013fa2:	4b4d      	ldr	r3, [pc, #308]	; (80140d8 <tcp_input+0x72c>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d041      	beq.n	801402e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013faa:	69fb      	ldr	r3, [r7, #28]
 8013fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d006      	beq.n	8013fc0 <tcp_input+0x614>
 8013fb2:	4b50      	ldr	r3, [pc, #320]	; (80140f4 <tcp_input+0x748>)
 8013fb4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013fb8:	494f      	ldr	r1, [pc, #316]	; (80140f8 <tcp_input+0x74c>)
 8013fba:	4850      	ldr	r0, [pc, #320]	; (80140fc <tcp_input+0x750>)
 8013fbc:	f007 f852 	bl	801b064 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013fc0:	69fb      	ldr	r3, [r7, #28]
 8013fc2:	8b5b      	ldrh	r3, [r3, #26]
 8013fc4:	f003 0310 	and.w	r3, r3, #16
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d008      	beq.n	8013fde <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013fcc:	4b42      	ldr	r3, [pc, #264]	; (80140d8 <tcp_input+0x72c>)
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f7fd fec3 	bl	8011d5c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013fd6:	69f8      	ldr	r0, [r7, #28]
 8013fd8:	f7fe fc48 	bl	801286c <tcp_abort>
            goto aborted;
 8013fdc:	e091      	b.n	8014102 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013fde:	69fb      	ldr	r3, [r7, #28]
 8013fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d00c      	beq.n	8014002 <tcp_input+0x656>
 8013fe8:	69fb      	ldr	r3, [r7, #28]
 8013fea:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013fee:	69fb      	ldr	r3, [r7, #28]
 8013ff0:	6918      	ldr	r0, [r3, #16]
 8013ff2:	4b39      	ldr	r3, [pc, #228]	; (80140d8 <tcp_input+0x72c>)
 8013ff4:	681a      	ldr	r2, [r3, #0]
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	69f9      	ldr	r1, [r7, #28]
 8013ffa:	47a0      	blx	r4
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	74fb      	strb	r3, [r7, #19]
 8014000:	e008      	b.n	8014014 <tcp_input+0x668>
 8014002:	4b35      	ldr	r3, [pc, #212]	; (80140d8 <tcp_input+0x72c>)
 8014004:	681a      	ldr	r2, [r3, #0]
 8014006:	2300      	movs	r3, #0
 8014008:	69f9      	ldr	r1, [r7, #28]
 801400a:	2000      	movs	r0, #0
 801400c:	f7ff f95e 	bl	80132cc <tcp_recv_null>
 8014010:	4603      	mov	r3, r0
 8014012:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014014:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014018:	f113 0f0d 	cmn.w	r3, #13
 801401c:	d053      	beq.n	80140c6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801401e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d003      	beq.n	801402e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014026:	4b2c      	ldr	r3, [pc, #176]	; (80140d8 <tcp_input+0x72c>)
 8014028:	681a      	ldr	r2, [r3, #0]
 801402a:	69fb      	ldr	r3, [r7, #28]
 801402c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801402e:	4b2b      	ldr	r3, [pc, #172]	; (80140dc <tcp_input+0x730>)
 8014030:	781b      	ldrb	r3, [r3, #0]
 8014032:	f003 0320 	and.w	r3, r3, #32
 8014036:	2b00      	cmp	r3, #0
 8014038:	d030      	beq.n	801409c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801403a:	69fb      	ldr	r3, [r7, #28]
 801403c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801403e:	2b00      	cmp	r3, #0
 8014040:	d009      	beq.n	8014056 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8014042:	69fb      	ldr	r3, [r7, #28]
 8014044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014046:	7b5a      	ldrb	r2, [r3, #13]
 8014048:	69fb      	ldr	r3, [r7, #28]
 801404a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801404c:	f042 0220 	orr.w	r2, r2, #32
 8014050:	b2d2      	uxtb	r2, r2
 8014052:	735a      	strb	r2, [r3, #13]
 8014054:	e022      	b.n	801409c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014056:	69fb      	ldr	r3, [r7, #28]
 8014058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801405a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801405e:	d005      	beq.n	801406c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8014060:	69fb      	ldr	r3, [r7, #28]
 8014062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014064:	3301      	adds	r3, #1
 8014066:	b29a      	uxth	r2, r3
 8014068:	69fb      	ldr	r3, [r7, #28]
 801406a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801406c:	69fb      	ldr	r3, [r7, #28]
 801406e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014072:	2b00      	cmp	r3, #0
 8014074:	d00b      	beq.n	801408e <tcp_input+0x6e2>
 8014076:	69fb      	ldr	r3, [r7, #28]
 8014078:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801407c:	69fb      	ldr	r3, [r7, #28]
 801407e:	6918      	ldr	r0, [r3, #16]
 8014080:	2300      	movs	r3, #0
 8014082:	2200      	movs	r2, #0
 8014084:	69f9      	ldr	r1, [r7, #28]
 8014086:	47a0      	blx	r4
 8014088:	4603      	mov	r3, r0
 801408a:	74fb      	strb	r3, [r7, #19]
 801408c:	e001      	b.n	8014092 <tcp_input+0x6e6>
 801408e:	2300      	movs	r3, #0
 8014090:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014092:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014096:	f113 0f0d 	cmn.w	r3, #13
 801409a:	d016      	beq.n	80140ca <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801409c:	4b13      	ldr	r3, [pc, #76]	; (80140ec <tcp_input+0x740>)
 801409e:	2200      	movs	r2, #0
 80140a0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80140a2:	69f8      	ldr	r0, [r7, #28]
 80140a4:	f000 f88e 	bl	80141c4 <tcp_input_delayed_close>
 80140a8:	4603      	mov	r3, r0
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d128      	bne.n	8014100 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80140ae:	69f8      	ldr	r0, [r7, #28]
 80140b0:	f002 fac8 	bl	8016644 <tcp_output>
 80140b4:	e025      	b.n	8014102 <tcp_input+0x756>
        goto aborted;
 80140b6:	bf00      	nop
 80140b8:	e023      	b.n	8014102 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80140ba:	bf00      	nop
 80140bc:	e021      	b.n	8014102 <tcp_input+0x756>
              goto aborted;
 80140be:	bf00      	nop
 80140c0:	e01f      	b.n	8014102 <tcp_input+0x756>
          goto aborted;
 80140c2:	bf00      	nop
 80140c4:	e01d      	b.n	8014102 <tcp_input+0x756>
            goto aborted;
 80140c6:	bf00      	nop
 80140c8:	e01b      	b.n	8014102 <tcp_input+0x756>
              goto aborted;
 80140ca:	bf00      	nop
 80140cc:	e019      	b.n	8014102 <tcp_input+0x756>
 80140ce:	bf00      	nop
 80140d0:	20008630 	.word	0x20008630
 80140d4:	20008640 	.word	0x20008640
 80140d8:	20008660 	.word	0x20008660
 80140dc:	2000865d 	.word	0x2000865d
 80140e0:	20008658 	.word	0x20008658
 80140e4:	2000865c 	.word	0x2000865c
 80140e8:	2000865a 	.word	0x2000865a
 80140ec:	20008664 	.word	0x20008664
 80140f0:	20008624 	.word	0x20008624
 80140f4:	0801d138 	.word	0x0801d138
 80140f8:	0801d2ec 	.word	0x0801d2ec
 80140fc:	0801d184 	.word	0x0801d184
          goto aborted;
 8014100:	bf00      	nop
    tcp_input_pcb = NULL;
 8014102:	4b27      	ldr	r3, [pc, #156]	; (80141a0 <tcp_input+0x7f4>)
 8014104:	2200      	movs	r2, #0
 8014106:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014108:	4b26      	ldr	r3, [pc, #152]	; (80141a4 <tcp_input+0x7f8>)
 801410a:	2200      	movs	r2, #0
 801410c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801410e:	4b26      	ldr	r3, [pc, #152]	; (80141a8 <tcp_input+0x7fc>)
 8014110:	685b      	ldr	r3, [r3, #4]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d03f      	beq.n	8014196 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8014116:	4b24      	ldr	r3, [pc, #144]	; (80141a8 <tcp_input+0x7fc>)
 8014118:	685b      	ldr	r3, [r3, #4]
 801411a:	4618      	mov	r0, r3
 801411c:	f7fd fe1e 	bl	8011d5c <pbuf_free>
      inseg.p = NULL;
 8014120:	4b21      	ldr	r3, [pc, #132]	; (80141a8 <tcp_input+0x7fc>)
 8014122:	2200      	movs	r2, #0
 8014124:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014126:	e036      	b.n	8014196 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014128:	4b20      	ldr	r3, [pc, #128]	; (80141ac <tcp_input+0x800>)
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	899b      	ldrh	r3, [r3, #12]
 801412e:	b29b      	uxth	r3, r3
 8014130:	4618      	mov	r0, r3
 8014132:	f7fc fab6 	bl	80106a2 <lwip_htons>
 8014136:	4603      	mov	r3, r0
 8014138:	b2db      	uxtb	r3, r3
 801413a:	f003 0304 	and.w	r3, r3, #4
 801413e:	2b00      	cmp	r3, #0
 8014140:	d118      	bne.n	8014174 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014142:	4b1b      	ldr	r3, [pc, #108]	; (80141b0 <tcp_input+0x804>)
 8014144:	6819      	ldr	r1, [r3, #0]
 8014146:	4b1b      	ldr	r3, [pc, #108]	; (80141b4 <tcp_input+0x808>)
 8014148:	881b      	ldrh	r3, [r3, #0]
 801414a:	461a      	mov	r2, r3
 801414c:	4b1a      	ldr	r3, [pc, #104]	; (80141b8 <tcp_input+0x80c>)
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014152:	4b16      	ldr	r3, [pc, #88]	; (80141ac <tcp_input+0x800>)
 8014154:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014156:	885b      	ldrh	r3, [r3, #2]
 8014158:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801415a:	4a14      	ldr	r2, [pc, #80]	; (80141ac <tcp_input+0x800>)
 801415c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801415e:	8812      	ldrh	r2, [r2, #0]
 8014160:	b292      	uxth	r2, r2
 8014162:	9202      	str	r2, [sp, #8]
 8014164:	9301      	str	r3, [sp, #4]
 8014166:	4b15      	ldr	r3, [pc, #84]	; (80141bc <tcp_input+0x810>)
 8014168:	9300      	str	r3, [sp, #0]
 801416a:	4b15      	ldr	r3, [pc, #84]	; (80141c0 <tcp_input+0x814>)
 801416c:	4602      	mov	r2, r0
 801416e:	2000      	movs	r0, #0
 8014170:	f003 f81c 	bl	80171ac <tcp_rst>
    pbuf_free(p);
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f7fd fdf1 	bl	8011d5c <pbuf_free>
  return;
 801417a:	e00c      	b.n	8014196 <tcp_input+0x7ea>
    goto dropped;
 801417c:	bf00      	nop
 801417e:	e006      	b.n	801418e <tcp_input+0x7e2>
    goto dropped;
 8014180:	bf00      	nop
 8014182:	e004      	b.n	801418e <tcp_input+0x7e2>
    goto dropped;
 8014184:	bf00      	nop
 8014186:	e002      	b.n	801418e <tcp_input+0x7e2>
      goto dropped;
 8014188:	bf00      	nop
 801418a:	e000      	b.n	801418e <tcp_input+0x7e2>
      goto dropped;
 801418c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801418e:	6878      	ldr	r0, [r7, #4]
 8014190:	f7fd fde4 	bl	8011d5c <pbuf_free>
 8014194:	e000      	b.n	8014198 <tcp_input+0x7ec>
  return;
 8014196:	bf00      	nop
}
 8014198:	3724      	adds	r7, #36	; 0x24
 801419a:	46bd      	mov	sp, r7
 801419c:	bd90      	pop	{r4, r7, pc}
 801419e:	bf00      	nop
 80141a0:	20008664 	.word	0x20008664
 80141a4:	20008660 	.word	0x20008660
 80141a8:	20008630 	.word	0x20008630
 80141ac:	20008640 	.word	0x20008640
 80141b0:	20008654 	.word	0x20008654
 80141b4:	2000865a 	.word	0x2000865a
 80141b8:	20008650 	.word	0x20008650
 80141bc:	200054f8 	.word	0x200054f8
 80141c0:	200054fc 	.word	0x200054fc

080141c4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b082      	sub	sp, #8
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d106      	bne.n	80141e0 <tcp_input_delayed_close+0x1c>
 80141d2:	4b17      	ldr	r3, [pc, #92]	; (8014230 <tcp_input_delayed_close+0x6c>)
 80141d4:	f240 225a 	movw	r2, #602	; 0x25a
 80141d8:	4916      	ldr	r1, [pc, #88]	; (8014234 <tcp_input_delayed_close+0x70>)
 80141da:	4817      	ldr	r0, [pc, #92]	; (8014238 <tcp_input_delayed_close+0x74>)
 80141dc:	f006 ff42 	bl	801b064 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80141e0:	4b16      	ldr	r3, [pc, #88]	; (801423c <tcp_input_delayed_close+0x78>)
 80141e2:	781b      	ldrb	r3, [r3, #0]
 80141e4:	f003 0310 	and.w	r3, r3, #16
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d01c      	beq.n	8014226 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	8b5b      	ldrh	r3, [r3, #26]
 80141f0:	f003 0310 	and.w	r3, r3, #16
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d10d      	bne.n	8014214 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d008      	beq.n	8014214 <tcp_input_delayed_close+0x50>
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014208:	687a      	ldr	r2, [r7, #4]
 801420a:	6912      	ldr	r2, [r2, #16]
 801420c:	f06f 010e 	mvn.w	r1, #14
 8014210:	4610      	mov	r0, r2
 8014212:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014214:	6879      	ldr	r1, [r7, #4]
 8014216:	480a      	ldr	r0, [pc, #40]	; (8014240 <tcp_input_delayed_close+0x7c>)
 8014218:	f7ff fa50 	bl	80136bc <tcp_pcb_remove>
    tcp_free(pcb);
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	f7fe f83d 	bl	801229c <tcp_free>
    return 1;
 8014222:	2301      	movs	r3, #1
 8014224:	e000      	b.n	8014228 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8014226:	2300      	movs	r3, #0
}
 8014228:	4618      	mov	r0, r3
 801422a:	3708      	adds	r7, #8
 801422c:	46bd      	mov	sp, r7
 801422e:	bd80      	pop	{r7, pc}
 8014230:	0801d138 	.word	0x0801d138
 8014234:	0801d308 	.word	0x0801d308
 8014238:	0801d184 	.word	0x0801d184
 801423c:	2000865d 	.word	0x2000865d
 8014240:	20008624 	.word	0x20008624

08014244 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014244:	b590      	push	{r4, r7, lr}
 8014246:	b08b      	sub	sp, #44	; 0x2c
 8014248:	af04      	add	r7, sp, #16
 801424a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801424c:	4b6f      	ldr	r3, [pc, #444]	; (801440c <tcp_listen_input+0x1c8>)
 801424e:	781b      	ldrb	r3, [r3, #0]
 8014250:	f003 0304 	and.w	r3, r3, #4
 8014254:	2b00      	cmp	r3, #0
 8014256:	f040 80d2 	bne.w	80143fe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d106      	bne.n	801426e <tcp_listen_input+0x2a>
 8014260:	4b6b      	ldr	r3, [pc, #428]	; (8014410 <tcp_listen_input+0x1cc>)
 8014262:	f240 2281 	movw	r2, #641	; 0x281
 8014266:	496b      	ldr	r1, [pc, #428]	; (8014414 <tcp_listen_input+0x1d0>)
 8014268:	486b      	ldr	r0, [pc, #428]	; (8014418 <tcp_listen_input+0x1d4>)
 801426a:	f006 fefb 	bl	801b064 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801426e:	4b67      	ldr	r3, [pc, #412]	; (801440c <tcp_listen_input+0x1c8>)
 8014270:	781b      	ldrb	r3, [r3, #0]
 8014272:	f003 0310 	and.w	r3, r3, #16
 8014276:	2b00      	cmp	r3, #0
 8014278:	d019      	beq.n	80142ae <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801427a:	4b68      	ldr	r3, [pc, #416]	; (801441c <tcp_listen_input+0x1d8>)
 801427c:	6819      	ldr	r1, [r3, #0]
 801427e:	4b68      	ldr	r3, [pc, #416]	; (8014420 <tcp_listen_input+0x1dc>)
 8014280:	881b      	ldrh	r3, [r3, #0]
 8014282:	461a      	mov	r2, r3
 8014284:	4b67      	ldr	r3, [pc, #412]	; (8014424 <tcp_listen_input+0x1e0>)
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801428a:	4b67      	ldr	r3, [pc, #412]	; (8014428 <tcp_listen_input+0x1e4>)
 801428c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801428e:	885b      	ldrh	r3, [r3, #2]
 8014290:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014292:	4a65      	ldr	r2, [pc, #404]	; (8014428 <tcp_listen_input+0x1e4>)
 8014294:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014296:	8812      	ldrh	r2, [r2, #0]
 8014298:	b292      	uxth	r2, r2
 801429a:	9202      	str	r2, [sp, #8]
 801429c:	9301      	str	r3, [sp, #4]
 801429e:	4b63      	ldr	r3, [pc, #396]	; (801442c <tcp_listen_input+0x1e8>)
 80142a0:	9300      	str	r3, [sp, #0]
 80142a2:	4b63      	ldr	r3, [pc, #396]	; (8014430 <tcp_listen_input+0x1ec>)
 80142a4:	4602      	mov	r2, r0
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	f002 ff80 	bl	80171ac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80142ac:	e0a9      	b.n	8014402 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80142ae:	4b57      	ldr	r3, [pc, #348]	; (801440c <tcp_listen_input+0x1c8>)
 80142b0:	781b      	ldrb	r3, [r3, #0]
 80142b2:	f003 0302 	and.w	r3, r3, #2
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	f000 80a3 	beq.w	8014402 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	7d5b      	ldrb	r3, [r3, #21]
 80142c0:	4618      	mov	r0, r3
 80142c2:	f7ff f927 	bl	8013514 <tcp_alloc>
 80142c6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80142c8:	697b      	ldr	r3, [r7, #20]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d111      	bne.n	80142f2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	699b      	ldr	r3, [r3, #24]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d00a      	beq.n	80142ec <tcp_listen_input+0xa8>
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	699b      	ldr	r3, [r3, #24]
 80142da:	687a      	ldr	r2, [r7, #4]
 80142dc:	6910      	ldr	r0, [r2, #16]
 80142de:	f04f 32ff 	mov.w	r2, #4294967295
 80142e2:	2100      	movs	r1, #0
 80142e4:	4798      	blx	r3
 80142e6:	4603      	mov	r3, r0
 80142e8:	73bb      	strb	r3, [r7, #14]
      return;
 80142ea:	e08b      	b.n	8014404 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80142ec:	23f0      	movs	r3, #240	; 0xf0
 80142ee:	73bb      	strb	r3, [r7, #14]
      return;
 80142f0:	e088      	b.n	8014404 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80142f2:	4b50      	ldr	r3, [pc, #320]	; (8014434 <tcp_listen_input+0x1f0>)
 80142f4:	695a      	ldr	r2, [r3, #20]
 80142f6:	697b      	ldr	r3, [r7, #20]
 80142f8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80142fa:	4b4e      	ldr	r3, [pc, #312]	; (8014434 <tcp_listen_input+0x1f0>)
 80142fc:	691a      	ldr	r2, [r3, #16]
 80142fe:	697b      	ldr	r3, [r7, #20]
 8014300:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	8ada      	ldrh	r2, [r3, #22]
 8014306:	697b      	ldr	r3, [r7, #20]
 8014308:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801430a:	4b47      	ldr	r3, [pc, #284]	; (8014428 <tcp_listen_input+0x1e4>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	881b      	ldrh	r3, [r3, #0]
 8014310:	b29a      	uxth	r2, r3
 8014312:	697b      	ldr	r3, [r7, #20]
 8014314:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	2203      	movs	r2, #3
 801431a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801431c:	4b41      	ldr	r3, [pc, #260]	; (8014424 <tcp_listen_input+0x1e0>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	1c5a      	adds	r2, r3, #1
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014326:	697b      	ldr	r3, [r7, #20]
 8014328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801432a:	697b      	ldr	r3, [r7, #20]
 801432c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801432e:	6978      	ldr	r0, [r7, #20]
 8014330:	f7ff fa58 	bl	80137e4 <tcp_next_iss>
 8014334:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014336:	697b      	ldr	r3, [r7, #20]
 8014338:	693a      	ldr	r2, [r7, #16]
 801433a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	693a      	ldr	r2, [r7, #16]
 8014340:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	693a      	ldr	r2, [r7, #16]
 8014346:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8014348:	697b      	ldr	r3, [r7, #20]
 801434a:	693a      	ldr	r2, [r7, #16]
 801434c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801434e:	4b35      	ldr	r3, [pc, #212]	; (8014424 <tcp_listen_input+0x1e0>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	1e5a      	subs	r2, r3, #1
 8014354:	697b      	ldr	r3, [r7, #20]
 8014356:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	691a      	ldr	r2, [r3, #16]
 801435c:	697b      	ldr	r3, [r7, #20]
 801435e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	687a      	ldr	r2, [r7, #4]
 8014364:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	7a5b      	ldrb	r3, [r3, #9]
 801436a:	f003 030c 	and.w	r3, r3, #12
 801436e:	b2da      	uxtb	r2, r3
 8014370:	697b      	ldr	r3, [r7, #20]
 8014372:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	7a1a      	ldrb	r2, [r3, #8]
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801437c:	4b2e      	ldr	r3, [pc, #184]	; (8014438 <tcp_listen_input+0x1f4>)
 801437e:	681a      	ldr	r2, [r3, #0]
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	60da      	str	r2, [r3, #12]
 8014384:	4a2c      	ldr	r2, [pc, #176]	; (8014438 <tcp_listen_input+0x1f4>)
 8014386:	697b      	ldr	r3, [r7, #20]
 8014388:	6013      	str	r3, [r2, #0]
 801438a:	f003 f8cf 	bl	801752c <tcp_timer_needed>
 801438e:	4b2b      	ldr	r3, [pc, #172]	; (801443c <tcp_listen_input+0x1f8>)
 8014390:	2201      	movs	r2, #1
 8014392:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014394:	6978      	ldr	r0, [r7, #20]
 8014396:	f001 fd8f 	bl	8015eb8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801439a:	4b23      	ldr	r3, [pc, #140]	; (8014428 <tcp_listen_input+0x1e4>)
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	89db      	ldrh	r3, [r3, #14]
 80143a0:	b29a      	uxth	r2, r3
 80143a2:	697b      	ldr	r3, [r7, #20]
 80143a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80143a8:	697b      	ldr	r3, [r7, #20]
 80143aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80143ae:	697b      	ldr	r3, [r7, #20]
 80143b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80143b4:	697b      	ldr	r3, [r7, #20]
 80143b6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80143b8:	697b      	ldr	r3, [r7, #20]
 80143ba:	3304      	adds	r3, #4
 80143bc:	4618      	mov	r0, r3
 80143be:	f004 fc93 	bl	8018ce8 <ip4_route>
 80143c2:	4601      	mov	r1, r0
 80143c4:	697b      	ldr	r3, [r7, #20]
 80143c6:	3304      	adds	r3, #4
 80143c8:	461a      	mov	r2, r3
 80143ca:	4620      	mov	r0, r4
 80143cc:	f7ff fa30 	bl	8013830 <tcp_eff_send_mss_netif>
 80143d0:	4603      	mov	r3, r0
 80143d2:	461a      	mov	r2, r3
 80143d4:	697b      	ldr	r3, [r7, #20]
 80143d6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80143d8:	2112      	movs	r1, #18
 80143da:	6978      	ldr	r0, [r7, #20]
 80143dc:	f002 f844 	bl	8016468 <tcp_enqueue_flags>
 80143e0:	4603      	mov	r3, r0
 80143e2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80143e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d004      	beq.n	80143f6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80143ec:	2100      	movs	r1, #0
 80143ee:	6978      	ldr	r0, [r7, #20]
 80143f0:	f7fe f97e 	bl	80126f0 <tcp_abandon>
      return;
 80143f4:	e006      	b.n	8014404 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80143f6:	6978      	ldr	r0, [r7, #20]
 80143f8:	f002 f924 	bl	8016644 <tcp_output>
  return;
 80143fc:	e001      	b.n	8014402 <tcp_listen_input+0x1be>
    return;
 80143fe:	bf00      	nop
 8014400:	e000      	b.n	8014404 <tcp_listen_input+0x1c0>
  return;
 8014402:	bf00      	nop
}
 8014404:	371c      	adds	r7, #28
 8014406:	46bd      	mov	sp, r7
 8014408:	bd90      	pop	{r4, r7, pc}
 801440a:	bf00      	nop
 801440c:	2000865c 	.word	0x2000865c
 8014410:	0801d138 	.word	0x0801d138
 8014414:	0801d330 	.word	0x0801d330
 8014418:	0801d184 	.word	0x0801d184
 801441c:	20008654 	.word	0x20008654
 8014420:	2000865a 	.word	0x2000865a
 8014424:	20008650 	.word	0x20008650
 8014428:	20008640 	.word	0x20008640
 801442c:	200054f8 	.word	0x200054f8
 8014430:	200054fc 	.word	0x200054fc
 8014434:	200054e8 	.word	0x200054e8
 8014438:	20008624 	.word	0x20008624
 801443c:	2000862c 	.word	0x2000862c

08014440 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b086      	sub	sp, #24
 8014444:	af04      	add	r7, sp, #16
 8014446:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014448:	4b2f      	ldr	r3, [pc, #188]	; (8014508 <tcp_timewait_input+0xc8>)
 801444a:	781b      	ldrb	r3, [r3, #0]
 801444c:	f003 0304 	and.w	r3, r3, #4
 8014450:	2b00      	cmp	r3, #0
 8014452:	d153      	bne.n	80144fc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d106      	bne.n	8014468 <tcp_timewait_input+0x28>
 801445a:	4b2c      	ldr	r3, [pc, #176]	; (801450c <tcp_timewait_input+0xcc>)
 801445c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014460:	492b      	ldr	r1, [pc, #172]	; (8014510 <tcp_timewait_input+0xd0>)
 8014462:	482c      	ldr	r0, [pc, #176]	; (8014514 <tcp_timewait_input+0xd4>)
 8014464:	f006 fdfe 	bl	801b064 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014468:	4b27      	ldr	r3, [pc, #156]	; (8014508 <tcp_timewait_input+0xc8>)
 801446a:	781b      	ldrb	r3, [r3, #0]
 801446c:	f003 0302 	and.w	r3, r3, #2
 8014470:	2b00      	cmp	r3, #0
 8014472:	d02a      	beq.n	80144ca <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014474:	4b28      	ldr	r3, [pc, #160]	; (8014518 <tcp_timewait_input+0xd8>)
 8014476:	681a      	ldr	r2, [r3, #0]
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801447c:	1ad3      	subs	r3, r2, r3
 801447e:	2b00      	cmp	r3, #0
 8014480:	db2d      	blt.n	80144de <tcp_timewait_input+0x9e>
 8014482:	4b25      	ldr	r3, [pc, #148]	; (8014518 <tcp_timewait_input+0xd8>)
 8014484:	681a      	ldr	r2, [r3, #0]
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801448a:	6879      	ldr	r1, [r7, #4]
 801448c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801448e:	440b      	add	r3, r1
 8014490:	1ad3      	subs	r3, r2, r3
 8014492:	2b00      	cmp	r3, #0
 8014494:	dc23      	bgt.n	80144de <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014496:	4b21      	ldr	r3, [pc, #132]	; (801451c <tcp_timewait_input+0xdc>)
 8014498:	6819      	ldr	r1, [r3, #0]
 801449a:	4b21      	ldr	r3, [pc, #132]	; (8014520 <tcp_timewait_input+0xe0>)
 801449c:	881b      	ldrh	r3, [r3, #0]
 801449e:	461a      	mov	r2, r3
 80144a0:	4b1d      	ldr	r3, [pc, #116]	; (8014518 <tcp_timewait_input+0xd8>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80144a6:	4b1f      	ldr	r3, [pc, #124]	; (8014524 <tcp_timewait_input+0xe4>)
 80144a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80144aa:	885b      	ldrh	r3, [r3, #2]
 80144ac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80144ae:	4a1d      	ldr	r2, [pc, #116]	; (8014524 <tcp_timewait_input+0xe4>)
 80144b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80144b2:	8812      	ldrh	r2, [r2, #0]
 80144b4:	b292      	uxth	r2, r2
 80144b6:	9202      	str	r2, [sp, #8]
 80144b8:	9301      	str	r3, [sp, #4]
 80144ba:	4b1b      	ldr	r3, [pc, #108]	; (8014528 <tcp_timewait_input+0xe8>)
 80144bc:	9300      	str	r3, [sp, #0]
 80144be:	4b1b      	ldr	r3, [pc, #108]	; (801452c <tcp_timewait_input+0xec>)
 80144c0:	4602      	mov	r2, r0
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f002 fe72 	bl	80171ac <tcp_rst>
      return;
 80144c8:	e01b      	b.n	8014502 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80144ca:	4b0f      	ldr	r3, [pc, #60]	; (8014508 <tcp_timewait_input+0xc8>)
 80144cc:	781b      	ldrb	r3, [r3, #0]
 80144ce:	f003 0301 	and.w	r3, r3, #1
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d003      	beq.n	80144de <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80144d6:	4b16      	ldr	r3, [pc, #88]	; (8014530 <tcp_timewait_input+0xf0>)
 80144d8:	681a      	ldr	r2, [r3, #0]
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80144de:	4b10      	ldr	r3, [pc, #64]	; (8014520 <tcp_timewait_input+0xe0>)
 80144e0:	881b      	ldrh	r3, [r3, #0]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d00c      	beq.n	8014500 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	8b5b      	ldrh	r3, [r3, #26]
 80144ea:	f043 0302 	orr.w	r3, r3, #2
 80144ee:	b29a      	uxth	r2, r3
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80144f4:	6878      	ldr	r0, [r7, #4]
 80144f6:	f002 f8a5 	bl	8016644 <tcp_output>
  }
  return;
 80144fa:	e001      	b.n	8014500 <tcp_timewait_input+0xc0>
    return;
 80144fc:	bf00      	nop
 80144fe:	e000      	b.n	8014502 <tcp_timewait_input+0xc2>
  return;
 8014500:	bf00      	nop
}
 8014502:	3708      	adds	r7, #8
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}
 8014508:	2000865c 	.word	0x2000865c
 801450c:	0801d138 	.word	0x0801d138
 8014510:	0801d350 	.word	0x0801d350
 8014514:	0801d184 	.word	0x0801d184
 8014518:	20008650 	.word	0x20008650
 801451c:	20008654 	.word	0x20008654
 8014520:	2000865a 	.word	0x2000865a
 8014524:	20008640 	.word	0x20008640
 8014528:	200054f8 	.word	0x200054f8
 801452c:	200054fc 	.word	0x200054fc
 8014530:	20008618 	.word	0x20008618

08014534 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014534:	b590      	push	{r4, r7, lr}
 8014536:	b08d      	sub	sp, #52	; 0x34
 8014538:	af04      	add	r7, sp, #16
 801453a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801453c:	2300      	movs	r3, #0
 801453e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014540:	2300      	movs	r3, #0
 8014542:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d106      	bne.n	8014558 <tcp_process+0x24>
 801454a:	4b9d      	ldr	r3, [pc, #628]	; (80147c0 <tcp_process+0x28c>)
 801454c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014550:	499c      	ldr	r1, [pc, #624]	; (80147c4 <tcp_process+0x290>)
 8014552:	489d      	ldr	r0, [pc, #628]	; (80147c8 <tcp_process+0x294>)
 8014554:	f006 fd86 	bl	801b064 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014558:	4b9c      	ldr	r3, [pc, #624]	; (80147cc <tcp_process+0x298>)
 801455a:	781b      	ldrb	r3, [r3, #0]
 801455c:	f003 0304 	and.w	r3, r3, #4
 8014560:	2b00      	cmp	r3, #0
 8014562:	d04e      	beq.n	8014602 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	7d1b      	ldrb	r3, [r3, #20]
 8014568:	2b02      	cmp	r3, #2
 801456a:	d108      	bne.n	801457e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014570:	4b97      	ldr	r3, [pc, #604]	; (80147d0 <tcp_process+0x29c>)
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	429a      	cmp	r2, r3
 8014576:	d123      	bne.n	80145c0 <tcp_process+0x8c>
        acceptable = 1;
 8014578:	2301      	movs	r3, #1
 801457a:	76fb      	strb	r3, [r7, #27]
 801457c:	e020      	b.n	80145c0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014582:	4b94      	ldr	r3, [pc, #592]	; (80147d4 <tcp_process+0x2a0>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	429a      	cmp	r2, r3
 8014588:	d102      	bne.n	8014590 <tcp_process+0x5c>
        acceptable = 1;
 801458a:	2301      	movs	r3, #1
 801458c:	76fb      	strb	r3, [r7, #27]
 801458e:	e017      	b.n	80145c0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014590:	4b90      	ldr	r3, [pc, #576]	; (80147d4 <tcp_process+0x2a0>)
 8014592:	681a      	ldr	r2, [r3, #0]
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014598:	1ad3      	subs	r3, r2, r3
 801459a:	2b00      	cmp	r3, #0
 801459c:	db10      	blt.n	80145c0 <tcp_process+0x8c>
 801459e:	4b8d      	ldr	r3, [pc, #564]	; (80147d4 <tcp_process+0x2a0>)
 80145a0:	681a      	ldr	r2, [r3, #0]
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145a6:	6879      	ldr	r1, [r7, #4]
 80145a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80145aa:	440b      	add	r3, r1
 80145ac:	1ad3      	subs	r3, r2, r3
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	dc06      	bgt.n	80145c0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	8b5b      	ldrh	r3, [r3, #26]
 80145b6:	f043 0302 	orr.w	r3, r3, #2
 80145ba:	b29a      	uxth	r2, r3
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80145c0:	7efb      	ldrb	r3, [r7, #27]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d01b      	beq.n	80145fe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	7d1b      	ldrb	r3, [r3, #20]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d106      	bne.n	80145dc <tcp_process+0xa8>
 80145ce:	4b7c      	ldr	r3, [pc, #496]	; (80147c0 <tcp_process+0x28c>)
 80145d0:	f44f 724e 	mov.w	r2, #824	; 0x338
 80145d4:	4980      	ldr	r1, [pc, #512]	; (80147d8 <tcp_process+0x2a4>)
 80145d6:	487c      	ldr	r0, [pc, #496]	; (80147c8 <tcp_process+0x294>)
 80145d8:	f006 fd44 	bl	801b064 <iprintf>
      recv_flags |= TF_RESET;
 80145dc:	4b7f      	ldr	r3, [pc, #508]	; (80147dc <tcp_process+0x2a8>)
 80145de:	781b      	ldrb	r3, [r3, #0]
 80145e0:	f043 0308 	orr.w	r3, r3, #8
 80145e4:	b2da      	uxtb	r2, r3
 80145e6:	4b7d      	ldr	r3, [pc, #500]	; (80147dc <tcp_process+0x2a8>)
 80145e8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	8b5b      	ldrh	r3, [r3, #26]
 80145ee:	f023 0301 	bic.w	r3, r3, #1
 80145f2:	b29a      	uxth	r2, r3
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80145f8:	f06f 030d 	mvn.w	r3, #13
 80145fc:	e37a      	b.n	8014cf4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80145fe:	2300      	movs	r3, #0
 8014600:	e378      	b.n	8014cf4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014602:	4b72      	ldr	r3, [pc, #456]	; (80147cc <tcp_process+0x298>)
 8014604:	781b      	ldrb	r3, [r3, #0]
 8014606:	f003 0302 	and.w	r3, r3, #2
 801460a:	2b00      	cmp	r3, #0
 801460c:	d010      	beq.n	8014630 <tcp_process+0xfc>
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	7d1b      	ldrb	r3, [r3, #20]
 8014612:	2b02      	cmp	r3, #2
 8014614:	d00c      	beq.n	8014630 <tcp_process+0xfc>
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	7d1b      	ldrb	r3, [r3, #20]
 801461a:	2b03      	cmp	r3, #3
 801461c:	d008      	beq.n	8014630 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	8b5b      	ldrh	r3, [r3, #26]
 8014622:	f043 0302 	orr.w	r3, r3, #2
 8014626:	b29a      	uxth	r2, r3
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801462c:	2300      	movs	r3, #0
 801462e:	e361      	b.n	8014cf4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	8b5b      	ldrh	r3, [r3, #26]
 8014634:	f003 0310 	and.w	r3, r3, #16
 8014638:	2b00      	cmp	r3, #0
 801463a:	d103      	bne.n	8014644 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801463c:	4b68      	ldr	r3, [pc, #416]	; (80147e0 <tcp_process+0x2ac>)
 801463e:	681a      	ldr	r2, [r3, #0]
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2200      	movs	r2, #0
 8014648:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	2200      	movs	r2, #0
 8014650:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f001 fc2f 	bl	8015eb8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	7d1b      	ldrb	r3, [r3, #20]
 801465e:	3b02      	subs	r3, #2
 8014660:	2b07      	cmp	r3, #7
 8014662:	f200 8337 	bhi.w	8014cd4 <tcp_process+0x7a0>
 8014666:	a201      	add	r2, pc, #4	; (adr r2, 801466c <tcp_process+0x138>)
 8014668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801466c:	0801468d 	.word	0x0801468d
 8014670:	080148bd 	.word	0x080148bd
 8014674:	08014a35 	.word	0x08014a35
 8014678:	08014a5f 	.word	0x08014a5f
 801467c:	08014b83 	.word	0x08014b83
 8014680:	08014a35 	.word	0x08014a35
 8014684:	08014c0f 	.word	0x08014c0f
 8014688:	08014c9f 	.word	0x08014c9f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801468c:	4b4f      	ldr	r3, [pc, #316]	; (80147cc <tcp_process+0x298>)
 801468e:	781b      	ldrb	r3, [r3, #0]
 8014690:	f003 0310 	and.w	r3, r3, #16
 8014694:	2b00      	cmp	r3, #0
 8014696:	f000 80e4 	beq.w	8014862 <tcp_process+0x32e>
 801469a:	4b4c      	ldr	r3, [pc, #304]	; (80147cc <tcp_process+0x298>)
 801469c:	781b      	ldrb	r3, [r3, #0]
 801469e:	f003 0302 	and.w	r3, r3, #2
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	f000 80dd 	beq.w	8014862 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146ac:	1c5a      	adds	r2, r3, #1
 80146ae:	4b48      	ldr	r3, [pc, #288]	; (80147d0 <tcp_process+0x29c>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	429a      	cmp	r2, r3
 80146b4:	f040 80d5 	bne.w	8014862 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80146b8:	4b46      	ldr	r3, [pc, #280]	; (80147d4 <tcp_process+0x2a0>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	1c5a      	adds	r2, r3, #1
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80146ca:	4b41      	ldr	r3, [pc, #260]	; (80147d0 <tcp_process+0x29c>)
 80146cc:	681a      	ldr	r2, [r3, #0]
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80146d2:	4b44      	ldr	r3, [pc, #272]	; (80147e4 <tcp_process+0x2b0>)
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	89db      	ldrh	r3, [r3, #14]
 80146d8:	b29a      	uxth	r2, r3
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80146ec:	4b39      	ldr	r3, [pc, #228]	; (80147d4 <tcp_process+0x2a0>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	1e5a      	subs	r2, r3, #1
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	2204      	movs	r2, #4
 80146fa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	3304      	adds	r3, #4
 8014704:	4618      	mov	r0, r3
 8014706:	f004 faef 	bl	8018ce8 <ip4_route>
 801470a:	4601      	mov	r1, r0
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	3304      	adds	r3, #4
 8014710:	461a      	mov	r2, r3
 8014712:	4620      	mov	r0, r4
 8014714:	f7ff f88c 	bl	8013830 <tcp_eff_send_mss_netif>
 8014718:	4603      	mov	r3, r0
 801471a:	461a      	mov	r2, r3
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014724:	009a      	lsls	r2, r3, #2
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801472a:	005b      	lsls	r3, r3, #1
 801472c:	f241 111c 	movw	r1, #4380	; 0x111c
 8014730:	428b      	cmp	r3, r1
 8014732:	bf38      	it	cc
 8014734:	460b      	movcc	r3, r1
 8014736:	429a      	cmp	r2, r3
 8014738:	d204      	bcs.n	8014744 <tcp_process+0x210>
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801473e:	009b      	lsls	r3, r3, #2
 8014740:	b29b      	uxth	r3, r3
 8014742:	e00d      	b.n	8014760 <tcp_process+0x22c>
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014748:	005b      	lsls	r3, r3, #1
 801474a:	f241 121c 	movw	r2, #4380	; 0x111c
 801474e:	4293      	cmp	r3, r2
 8014750:	d904      	bls.n	801475c <tcp_process+0x228>
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014756:	005b      	lsls	r3, r3, #1
 8014758:	b29b      	uxth	r3, r3
 801475a:	e001      	b.n	8014760 <tcp_process+0x22c>
 801475c:	f241 131c 	movw	r3, #4380	; 0x111c
 8014760:	687a      	ldr	r2, [r7, #4]
 8014762:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801476c:	2b00      	cmp	r3, #0
 801476e:	d106      	bne.n	801477e <tcp_process+0x24a>
 8014770:	4b13      	ldr	r3, [pc, #76]	; (80147c0 <tcp_process+0x28c>)
 8014772:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014776:	491c      	ldr	r1, [pc, #112]	; (80147e8 <tcp_process+0x2b4>)
 8014778:	4813      	ldr	r0, [pc, #76]	; (80147c8 <tcp_process+0x294>)
 801477a:	f006 fc73 	bl	801b064 <iprintf>
        --pcb->snd_queuelen;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014784:	3b01      	subs	r3, #1
 8014786:	b29a      	uxth	r2, r3
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014792:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014794:	69fb      	ldr	r3, [r7, #28]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d12a      	bne.n	80147f0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801479e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80147a0:	69fb      	ldr	r3, [r7, #28]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d106      	bne.n	80147b4 <tcp_process+0x280>
 80147a6:	4b06      	ldr	r3, [pc, #24]	; (80147c0 <tcp_process+0x28c>)
 80147a8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80147ac:	490f      	ldr	r1, [pc, #60]	; (80147ec <tcp_process+0x2b8>)
 80147ae:	4806      	ldr	r0, [pc, #24]	; (80147c8 <tcp_process+0x294>)
 80147b0:	f006 fc58 	bl	801b064 <iprintf>
          pcb->unsent = rseg->next;
 80147b4:	69fb      	ldr	r3, [r7, #28]
 80147b6:	681a      	ldr	r2, [r3, #0]
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	66da      	str	r2, [r3, #108]	; 0x6c
 80147bc:	e01c      	b.n	80147f8 <tcp_process+0x2c4>
 80147be:	bf00      	nop
 80147c0:	0801d138 	.word	0x0801d138
 80147c4:	0801d370 	.word	0x0801d370
 80147c8:	0801d184 	.word	0x0801d184
 80147cc:	2000865c 	.word	0x2000865c
 80147d0:	20008654 	.word	0x20008654
 80147d4:	20008650 	.word	0x20008650
 80147d8:	0801d38c 	.word	0x0801d38c
 80147dc:	2000865d 	.word	0x2000865d
 80147e0:	20008618 	.word	0x20008618
 80147e4:	20008640 	.word	0x20008640
 80147e8:	0801d3ac 	.word	0x0801d3ac
 80147ec:	0801d3c4 	.word	0x0801d3c4
        } else {
          pcb->unacked = rseg->next;
 80147f0:	69fb      	ldr	r3, [r7, #28]
 80147f2:	681a      	ldr	r2, [r3, #0]
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80147f8:	69f8      	ldr	r0, [r7, #28]
 80147fa:	f7fe fd22 	bl	8013242 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014802:	2b00      	cmp	r3, #0
 8014804:	d104      	bne.n	8014810 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801480c:	861a      	strh	r2, [r3, #48]	; 0x30
 801480e:	e006      	b.n	801481e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	2200      	movs	r2, #0
 8014814:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	2200      	movs	r2, #0
 801481a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014824:	2b00      	cmp	r3, #0
 8014826:	d00a      	beq.n	801483e <tcp_process+0x30a>
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801482e:	687a      	ldr	r2, [r7, #4]
 8014830:	6910      	ldr	r0, [r2, #16]
 8014832:	2200      	movs	r2, #0
 8014834:	6879      	ldr	r1, [r7, #4]
 8014836:	4798      	blx	r3
 8014838:	4603      	mov	r3, r0
 801483a:	76bb      	strb	r3, [r7, #26]
 801483c:	e001      	b.n	8014842 <tcp_process+0x30e>
 801483e:	2300      	movs	r3, #0
 8014840:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014842:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014846:	f113 0f0d 	cmn.w	r3, #13
 801484a:	d102      	bne.n	8014852 <tcp_process+0x31e>
          return ERR_ABRT;
 801484c:	f06f 030c 	mvn.w	r3, #12
 8014850:	e250      	b.n	8014cf4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	8b5b      	ldrh	r3, [r3, #26]
 8014856:	f043 0302 	orr.w	r3, r3, #2
 801485a:	b29a      	uxth	r2, r3
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014860:	e23a      	b.n	8014cd8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014862:	4b98      	ldr	r3, [pc, #608]	; (8014ac4 <tcp_process+0x590>)
 8014864:	781b      	ldrb	r3, [r3, #0]
 8014866:	f003 0310 	and.w	r3, r3, #16
 801486a:	2b00      	cmp	r3, #0
 801486c:	f000 8234 	beq.w	8014cd8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014870:	4b95      	ldr	r3, [pc, #596]	; (8014ac8 <tcp_process+0x594>)
 8014872:	6819      	ldr	r1, [r3, #0]
 8014874:	4b95      	ldr	r3, [pc, #596]	; (8014acc <tcp_process+0x598>)
 8014876:	881b      	ldrh	r3, [r3, #0]
 8014878:	461a      	mov	r2, r3
 801487a:	4b95      	ldr	r3, [pc, #596]	; (8014ad0 <tcp_process+0x59c>)
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014880:	4b94      	ldr	r3, [pc, #592]	; (8014ad4 <tcp_process+0x5a0>)
 8014882:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014884:	885b      	ldrh	r3, [r3, #2]
 8014886:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014888:	4a92      	ldr	r2, [pc, #584]	; (8014ad4 <tcp_process+0x5a0>)
 801488a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801488c:	8812      	ldrh	r2, [r2, #0]
 801488e:	b292      	uxth	r2, r2
 8014890:	9202      	str	r2, [sp, #8]
 8014892:	9301      	str	r3, [sp, #4]
 8014894:	4b90      	ldr	r3, [pc, #576]	; (8014ad8 <tcp_process+0x5a4>)
 8014896:	9300      	str	r3, [sp, #0]
 8014898:	4b90      	ldr	r3, [pc, #576]	; (8014adc <tcp_process+0x5a8>)
 801489a:	4602      	mov	r2, r0
 801489c:	6878      	ldr	r0, [r7, #4]
 801489e:	f002 fc85 	bl	80171ac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80148a8:	2b05      	cmp	r3, #5
 80148aa:	f200 8215 	bhi.w	8014cd8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	2200      	movs	r2, #0
 80148b2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80148b4:	6878      	ldr	r0, [r7, #4]
 80148b6:	f002 fa51 	bl	8016d5c <tcp_rexmit_rto>
      break;
 80148ba:	e20d      	b.n	8014cd8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80148bc:	4b81      	ldr	r3, [pc, #516]	; (8014ac4 <tcp_process+0x590>)
 80148be:	781b      	ldrb	r3, [r3, #0]
 80148c0:	f003 0310 	and.w	r3, r3, #16
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	f000 80a1 	beq.w	8014a0c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80148ca:	4b7f      	ldr	r3, [pc, #508]	; (8014ac8 <tcp_process+0x594>)
 80148cc:	681a      	ldr	r2, [r3, #0]
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80148d2:	1ad3      	subs	r3, r2, r3
 80148d4:	3b01      	subs	r3, #1
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	db7e      	blt.n	80149d8 <tcp_process+0x4a4>
 80148da:	4b7b      	ldr	r3, [pc, #492]	; (8014ac8 <tcp_process+0x594>)
 80148dc:	681a      	ldr	r2, [r3, #0]
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80148e2:	1ad3      	subs	r3, r2, r3
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	dc77      	bgt.n	80149d8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	2204      	movs	r2, #4
 80148ec:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d102      	bne.n	80148fc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80148f6:	23fa      	movs	r3, #250	; 0xfa
 80148f8:	76bb      	strb	r3, [r7, #26]
 80148fa:	e01d      	b.n	8014938 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014900:	699b      	ldr	r3, [r3, #24]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d106      	bne.n	8014914 <tcp_process+0x3e0>
 8014906:	4b76      	ldr	r3, [pc, #472]	; (8014ae0 <tcp_process+0x5ac>)
 8014908:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801490c:	4975      	ldr	r1, [pc, #468]	; (8014ae4 <tcp_process+0x5b0>)
 801490e:	4876      	ldr	r0, [pc, #472]	; (8014ae8 <tcp_process+0x5b4>)
 8014910:	f006 fba8 	bl	801b064 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014918:	699b      	ldr	r3, [r3, #24]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d00a      	beq.n	8014934 <tcp_process+0x400>
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014922:	699b      	ldr	r3, [r3, #24]
 8014924:	687a      	ldr	r2, [r7, #4]
 8014926:	6910      	ldr	r0, [r2, #16]
 8014928:	2200      	movs	r2, #0
 801492a:	6879      	ldr	r1, [r7, #4]
 801492c:	4798      	blx	r3
 801492e:	4603      	mov	r3, r0
 8014930:	76bb      	strb	r3, [r7, #26]
 8014932:	e001      	b.n	8014938 <tcp_process+0x404>
 8014934:	23f0      	movs	r3, #240	; 0xf0
 8014936:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014938:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d00a      	beq.n	8014956 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014940:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014944:	f113 0f0d 	cmn.w	r3, #13
 8014948:	d002      	beq.n	8014950 <tcp_process+0x41c>
              tcp_abort(pcb);
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f7fd ff8e 	bl	801286c <tcp_abort>
            }
            return ERR_ABRT;
 8014950:	f06f 030c 	mvn.w	r3, #12
 8014954:	e1ce      	b.n	8014cf4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014956:	6878      	ldr	r0, [r7, #4]
 8014958:	f000 fae0 	bl	8014f1c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801495c:	4b63      	ldr	r3, [pc, #396]	; (8014aec <tcp_process+0x5b8>)
 801495e:	881b      	ldrh	r3, [r3, #0]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d005      	beq.n	8014970 <tcp_process+0x43c>
            recv_acked--;
 8014964:	4b61      	ldr	r3, [pc, #388]	; (8014aec <tcp_process+0x5b8>)
 8014966:	881b      	ldrh	r3, [r3, #0]
 8014968:	3b01      	subs	r3, #1
 801496a:	b29a      	uxth	r2, r3
 801496c:	4b5f      	ldr	r3, [pc, #380]	; (8014aec <tcp_process+0x5b8>)
 801496e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014974:	009a      	lsls	r2, r3, #2
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801497a:	005b      	lsls	r3, r3, #1
 801497c:	f241 111c 	movw	r1, #4380	; 0x111c
 8014980:	428b      	cmp	r3, r1
 8014982:	bf38      	it	cc
 8014984:	460b      	movcc	r3, r1
 8014986:	429a      	cmp	r2, r3
 8014988:	d204      	bcs.n	8014994 <tcp_process+0x460>
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801498e:	009b      	lsls	r3, r3, #2
 8014990:	b29b      	uxth	r3, r3
 8014992:	e00d      	b.n	80149b0 <tcp_process+0x47c>
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014998:	005b      	lsls	r3, r3, #1
 801499a:	f241 121c 	movw	r2, #4380	; 0x111c
 801499e:	4293      	cmp	r3, r2
 80149a0:	d904      	bls.n	80149ac <tcp_process+0x478>
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80149a6:	005b      	lsls	r3, r3, #1
 80149a8:	b29b      	uxth	r3, r3
 80149aa:	e001      	b.n	80149b0 <tcp_process+0x47c>
 80149ac:	f241 131c 	movw	r3, #4380	; 0x111c
 80149b0:	687a      	ldr	r2, [r7, #4]
 80149b2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80149b6:	4b4e      	ldr	r3, [pc, #312]	; (8014af0 <tcp_process+0x5bc>)
 80149b8:	781b      	ldrb	r3, [r3, #0]
 80149ba:	f003 0320 	and.w	r3, r3, #32
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d037      	beq.n	8014a32 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	8b5b      	ldrh	r3, [r3, #26]
 80149c6:	f043 0302 	orr.w	r3, r3, #2
 80149ca:	b29a      	uxth	r2, r3
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2207      	movs	r2, #7
 80149d4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80149d6:	e02c      	b.n	8014a32 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80149d8:	4b3b      	ldr	r3, [pc, #236]	; (8014ac8 <tcp_process+0x594>)
 80149da:	6819      	ldr	r1, [r3, #0]
 80149dc:	4b3b      	ldr	r3, [pc, #236]	; (8014acc <tcp_process+0x598>)
 80149de:	881b      	ldrh	r3, [r3, #0]
 80149e0:	461a      	mov	r2, r3
 80149e2:	4b3b      	ldr	r3, [pc, #236]	; (8014ad0 <tcp_process+0x59c>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80149e8:	4b3a      	ldr	r3, [pc, #232]	; (8014ad4 <tcp_process+0x5a0>)
 80149ea:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80149ec:	885b      	ldrh	r3, [r3, #2]
 80149ee:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80149f0:	4a38      	ldr	r2, [pc, #224]	; (8014ad4 <tcp_process+0x5a0>)
 80149f2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80149f4:	8812      	ldrh	r2, [r2, #0]
 80149f6:	b292      	uxth	r2, r2
 80149f8:	9202      	str	r2, [sp, #8]
 80149fa:	9301      	str	r3, [sp, #4]
 80149fc:	4b36      	ldr	r3, [pc, #216]	; (8014ad8 <tcp_process+0x5a4>)
 80149fe:	9300      	str	r3, [sp, #0]
 8014a00:	4b36      	ldr	r3, [pc, #216]	; (8014adc <tcp_process+0x5a8>)
 8014a02:	4602      	mov	r2, r0
 8014a04:	6878      	ldr	r0, [r7, #4]
 8014a06:	f002 fbd1 	bl	80171ac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014a0a:	e167      	b.n	8014cdc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014a0c:	4b2d      	ldr	r3, [pc, #180]	; (8014ac4 <tcp_process+0x590>)
 8014a0e:	781b      	ldrb	r3, [r3, #0]
 8014a10:	f003 0302 	and.w	r3, r3, #2
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	f000 8161 	beq.w	8014cdc <tcp_process+0x7a8>
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a1e:	1e5a      	subs	r2, r3, #1
 8014a20:	4b2b      	ldr	r3, [pc, #172]	; (8014ad0 <tcp_process+0x59c>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	429a      	cmp	r2, r3
 8014a26:	f040 8159 	bne.w	8014cdc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014a2a:	6878      	ldr	r0, [r7, #4]
 8014a2c:	f002 f9b8 	bl	8016da0 <tcp_rexmit>
      break;
 8014a30:	e154      	b.n	8014cdc <tcp_process+0x7a8>
 8014a32:	e153      	b.n	8014cdc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014a34:	6878      	ldr	r0, [r7, #4]
 8014a36:	f000 fa71 	bl	8014f1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014a3a:	4b2d      	ldr	r3, [pc, #180]	; (8014af0 <tcp_process+0x5bc>)
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	f003 0320 	and.w	r3, r3, #32
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	f000 814c 	beq.w	8014ce0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	8b5b      	ldrh	r3, [r3, #26]
 8014a4c:	f043 0302 	orr.w	r3, r3, #2
 8014a50:	b29a      	uxth	r2, r3
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	2207      	movs	r2, #7
 8014a5a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014a5c:	e140      	b.n	8014ce0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f000 fa5c 	bl	8014f1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014a64:	4b22      	ldr	r3, [pc, #136]	; (8014af0 <tcp_process+0x5bc>)
 8014a66:	781b      	ldrb	r3, [r3, #0]
 8014a68:	f003 0320 	and.w	r3, r3, #32
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d071      	beq.n	8014b54 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014a70:	4b14      	ldr	r3, [pc, #80]	; (8014ac4 <tcp_process+0x590>)
 8014a72:	781b      	ldrb	r3, [r3, #0]
 8014a74:	f003 0310 	and.w	r3, r3, #16
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d060      	beq.n	8014b3e <tcp_process+0x60a>
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014a80:	4b11      	ldr	r3, [pc, #68]	; (8014ac8 <tcp_process+0x594>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	429a      	cmp	r2, r3
 8014a86:	d15a      	bne.n	8014b3e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d156      	bne.n	8014b3e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	8b5b      	ldrh	r3, [r3, #26]
 8014a94:	f043 0302 	orr.w	r3, r3, #2
 8014a98:	b29a      	uxth	r2, r3
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8014a9e:	6878      	ldr	r0, [r7, #4]
 8014aa0:	f7fe fdbc 	bl	801361c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014aa4:	4b13      	ldr	r3, [pc, #76]	; (8014af4 <tcp_process+0x5c0>)
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	687a      	ldr	r2, [r7, #4]
 8014aaa:	429a      	cmp	r2, r3
 8014aac:	d105      	bne.n	8014aba <tcp_process+0x586>
 8014aae:	4b11      	ldr	r3, [pc, #68]	; (8014af4 <tcp_process+0x5c0>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	68db      	ldr	r3, [r3, #12]
 8014ab4:	4a0f      	ldr	r2, [pc, #60]	; (8014af4 <tcp_process+0x5c0>)
 8014ab6:	6013      	str	r3, [r2, #0]
 8014ab8:	e02e      	b.n	8014b18 <tcp_process+0x5e4>
 8014aba:	4b0e      	ldr	r3, [pc, #56]	; (8014af4 <tcp_process+0x5c0>)
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	617b      	str	r3, [r7, #20]
 8014ac0:	e027      	b.n	8014b12 <tcp_process+0x5de>
 8014ac2:	bf00      	nop
 8014ac4:	2000865c 	.word	0x2000865c
 8014ac8:	20008654 	.word	0x20008654
 8014acc:	2000865a 	.word	0x2000865a
 8014ad0:	20008650 	.word	0x20008650
 8014ad4:	20008640 	.word	0x20008640
 8014ad8:	200054f8 	.word	0x200054f8
 8014adc:	200054fc 	.word	0x200054fc
 8014ae0:	0801d138 	.word	0x0801d138
 8014ae4:	0801d3d8 	.word	0x0801d3d8
 8014ae8:	0801d184 	.word	0x0801d184
 8014aec:	20008658 	.word	0x20008658
 8014af0:	2000865d 	.word	0x2000865d
 8014af4:	20008624 	.word	0x20008624
 8014af8:	697b      	ldr	r3, [r7, #20]
 8014afa:	68db      	ldr	r3, [r3, #12]
 8014afc:	687a      	ldr	r2, [r7, #4]
 8014afe:	429a      	cmp	r2, r3
 8014b00:	d104      	bne.n	8014b0c <tcp_process+0x5d8>
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	68da      	ldr	r2, [r3, #12]
 8014b06:	697b      	ldr	r3, [r7, #20]
 8014b08:	60da      	str	r2, [r3, #12]
 8014b0a:	e005      	b.n	8014b18 <tcp_process+0x5e4>
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	68db      	ldr	r3, [r3, #12]
 8014b10:	617b      	str	r3, [r7, #20]
 8014b12:	697b      	ldr	r3, [r7, #20]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d1ef      	bne.n	8014af8 <tcp_process+0x5c4>
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	60da      	str	r2, [r3, #12]
 8014b1e:	4b77      	ldr	r3, [pc, #476]	; (8014cfc <tcp_process+0x7c8>)
 8014b20:	2201      	movs	r2, #1
 8014b22:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	220a      	movs	r2, #10
 8014b28:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014b2a:	4b75      	ldr	r3, [pc, #468]	; (8014d00 <tcp_process+0x7cc>)
 8014b2c:	681a      	ldr	r2, [r3, #0]
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	60da      	str	r2, [r3, #12]
 8014b32:	4a73      	ldr	r2, [pc, #460]	; (8014d00 <tcp_process+0x7cc>)
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	6013      	str	r3, [r2, #0]
 8014b38:	f002 fcf8 	bl	801752c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014b3c:	e0d2      	b.n	8014ce4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	8b5b      	ldrh	r3, [r3, #26]
 8014b42:	f043 0302 	orr.w	r3, r3, #2
 8014b46:	b29a      	uxth	r2, r3
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	2208      	movs	r2, #8
 8014b50:	751a      	strb	r2, [r3, #20]
      break;
 8014b52:	e0c7      	b.n	8014ce4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014b54:	4b6b      	ldr	r3, [pc, #428]	; (8014d04 <tcp_process+0x7d0>)
 8014b56:	781b      	ldrb	r3, [r3, #0]
 8014b58:	f003 0310 	and.w	r3, r3, #16
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	f000 80c1 	beq.w	8014ce4 <tcp_process+0x7b0>
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b66:	4b68      	ldr	r3, [pc, #416]	; (8014d08 <tcp_process+0x7d4>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	429a      	cmp	r2, r3
 8014b6c:	f040 80ba 	bne.w	8014ce4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	f040 80b5 	bne.w	8014ce4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	2206      	movs	r2, #6
 8014b7e:	751a      	strb	r2, [r3, #20]
      break;
 8014b80:	e0b0      	b.n	8014ce4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014b82:	6878      	ldr	r0, [r7, #4]
 8014b84:	f000 f9ca 	bl	8014f1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014b88:	4b60      	ldr	r3, [pc, #384]	; (8014d0c <tcp_process+0x7d8>)
 8014b8a:	781b      	ldrb	r3, [r3, #0]
 8014b8c:	f003 0320 	and.w	r3, r3, #32
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	f000 80a9 	beq.w	8014ce8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	8b5b      	ldrh	r3, [r3, #26]
 8014b9a:	f043 0302 	orr.w	r3, r3, #2
 8014b9e:	b29a      	uxth	r2, r3
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014ba4:	6878      	ldr	r0, [r7, #4]
 8014ba6:	f7fe fd39 	bl	801361c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014baa:	4b59      	ldr	r3, [pc, #356]	; (8014d10 <tcp_process+0x7dc>)
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	687a      	ldr	r2, [r7, #4]
 8014bb0:	429a      	cmp	r2, r3
 8014bb2:	d105      	bne.n	8014bc0 <tcp_process+0x68c>
 8014bb4:	4b56      	ldr	r3, [pc, #344]	; (8014d10 <tcp_process+0x7dc>)
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	68db      	ldr	r3, [r3, #12]
 8014bba:	4a55      	ldr	r2, [pc, #340]	; (8014d10 <tcp_process+0x7dc>)
 8014bbc:	6013      	str	r3, [r2, #0]
 8014bbe:	e013      	b.n	8014be8 <tcp_process+0x6b4>
 8014bc0:	4b53      	ldr	r3, [pc, #332]	; (8014d10 <tcp_process+0x7dc>)
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	613b      	str	r3, [r7, #16]
 8014bc6:	e00c      	b.n	8014be2 <tcp_process+0x6ae>
 8014bc8:	693b      	ldr	r3, [r7, #16]
 8014bca:	68db      	ldr	r3, [r3, #12]
 8014bcc:	687a      	ldr	r2, [r7, #4]
 8014bce:	429a      	cmp	r2, r3
 8014bd0:	d104      	bne.n	8014bdc <tcp_process+0x6a8>
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	68da      	ldr	r2, [r3, #12]
 8014bd6:	693b      	ldr	r3, [r7, #16]
 8014bd8:	60da      	str	r2, [r3, #12]
 8014bda:	e005      	b.n	8014be8 <tcp_process+0x6b4>
 8014bdc:	693b      	ldr	r3, [r7, #16]
 8014bde:	68db      	ldr	r3, [r3, #12]
 8014be0:	613b      	str	r3, [r7, #16]
 8014be2:	693b      	ldr	r3, [r7, #16]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d1ef      	bne.n	8014bc8 <tcp_process+0x694>
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	2200      	movs	r2, #0
 8014bec:	60da      	str	r2, [r3, #12]
 8014bee:	4b43      	ldr	r3, [pc, #268]	; (8014cfc <tcp_process+0x7c8>)
 8014bf0:	2201      	movs	r2, #1
 8014bf2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	220a      	movs	r2, #10
 8014bf8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014bfa:	4b41      	ldr	r3, [pc, #260]	; (8014d00 <tcp_process+0x7cc>)
 8014bfc:	681a      	ldr	r2, [r3, #0]
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	60da      	str	r2, [r3, #12]
 8014c02:	4a3f      	ldr	r2, [pc, #252]	; (8014d00 <tcp_process+0x7cc>)
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	6013      	str	r3, [r2, #0]
 8014c08:	f002 fc90 	bl	801752c <tcp_timer_needed>
      }
      break;
 8014c0c:	e06c      	b.n	8014ce8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8014c0e:	6878      	ldr	r0, [r7, #4]
 8014c10:	f000 f984 	bl	8014f1c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014c14:	4b3b      	ldr	r3, [pc, #236]	; (8014d04 <tcp_process+0x7d0>)
 8014c16:	781b      	ldrb	r3, [r3, #0]
 8014c18:	f003 0310 	and.w	r3, r3, #16
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d065      	beq.n	8014cec <tcp_process+0x7b8>
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014c24:	4b38      	ldr	r3, [pc, #224]	; (8014d08 <tcp_process+0x7d4>)
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	429a      	cmp	r2, r3
 8014c2a:	d15f      	bne.n	8014cec <tcp_process+0x7b8>
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d15b      	bne.n	8014cec <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014c34:	6878      	ldr	r0, [r7, #4]
 8014c36:	f7fe fcf1 	bl	801361c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014c3a:	4b35      	ldr	r3, [pc, #212]	; (8014d10 <tcp_process+0x7dc>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	687a      	ldr	r2, [r7, #4]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	d105      	bne.n	8014c50 <tcp_process+0x71c>
 8014c44:	4b32      	ldr	r3, [pc, #200]	; (8014d10 <tcp_process+0x7dc>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	68db      	ldr	r3, [r3, #12]
 8014c4a:	4a31      	ldr	r2, [pc, #196]	; (8014d10 <tcp_process+0x7dc>)
 8014c4c:	6013      	str	r3, [r2, #0]
 8014c4e:	e013      	b.n	8014c78 <tcp_process+0x744>
 8014c50:	4b2f      	ldr	r3, [pc, #188]	; (8014d10 <tcp_process+0x7dc>)
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	60fb      	str	r3, [r7, #12]
 8014c56:	e00c      	b.n	8014c72 <tcp_process+0x73e>
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	68db      	ldr	r3, [r3, #12]
 8014c5c:	687a      	ldr	r2, [r7, #4]
 8014c5e:	429a      	cmp	r2, r3
 8014c60:	d104      	bne.n	8014c6c <tcp_process+0x738>
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	68da      	ldr	r2, [r3, #12]
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	60da      	str	r2, [r3, #12]
 8014c6a:	e005      	b.n	8014c78 <tcp_process+0x744>
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	68db      	ldr	r3, [r3, #12]
 8014c70:	60fb      	str	r3, [r7, #12]
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d1ef      	bne.n	8014c58 <tcp_process+0x724>
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	60da      	str	r2, [r3, #12]
 8014c7e:	4b1f      	ldr	r3, [pc, #124]	; (8014cfc <tcp_process+0x7c8>)
 8014c80:	2201      	movs	r2, #1
 8014c82:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	220a      	movs	r2, #10
 8014c88:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014c8a:	4b1d      	ldr	r3, [pc, #116]	; (8014d00 <tcp_process+0x7cc>)
 8014c8c:	681a      	ldr	r2, [r3, #0]
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	60da      	str	r2, [r3, #12]
 8014c92:	4a1b      	ldr	r2, [pc, #108]	; (8014d00 <tcp_process+0x7cc>)
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6013      	str	r3, [r2, #0]
 8014c98:	f002 fc48 	bl	801752c <tcp_timer_needed>
      }
      break;
 8014c9c:	e026      	b.n	8014cec <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014c9e:	6878      	ldr	r0, [r7, #4]
 8014ca0:	f000 f93c 	bl	8014f1c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014ca4:	4b17      	ldr	r3, [pc, #92]	; (8014d04 <tcp_process+0x7d0>)
 8014ca6:	781b      	ldrb	r3, [r3, #0]
 8014ca8:	f003 0310 	and.w	r3, r3, #16
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d01f      	beq.n	8014cf0 <tcp_process+0x7bc>
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014cb4:	4b14      	ldr	r3, [pc, #80]	; (8014d08 <tcp_process+0x7d4>)
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	429a      	cmp	r2, r3
 8014cba:	d119      	bne.n	8014cf0 <tcp_process+0x7bc>
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d115      	bne.n	8014cf0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014cc4:	4b11      	ldr	r3, [pc, #68]	; (8014d0c <tcp_process+0x7d8>)
 8014cc6:	781b      	ldrb	r3, [r3, #0]
 8014cc8:	f043 0310 	orr.w	r3, r3, #16
 8014ccc:	b2da      	uxtb	r2, r3
 8014cce:	4b0f      	ldr	r3, [pc, #60]	; (8014d0c <tcp_process+0x7d8>)
 8014cd0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014cd2:	e00d      	b.n	8014cf0 <tcp_process+0x7bc>
    default:
      break;
 8014cd4:	bf00      	nop
 8014cd6:	e00c      	b.n	8014cf2 <tcp_process+0x7be>
      break;
 8014cd8:	bf00      	nop
 8014cda:	e00a      	b.n	8014cf2 <tcp_process+0x7be>
      break;
 8014cdc:	bf00      	nop
 8014cde:	e008      	b.n	8014cf2 <tcp_process+0x7be>
      break;
 8014ce0:	bf00      	nop
 8014ce2:	e006      	b.n	8014cf2 <tcp_process+0x7be>
      break;
 8014ce4:	bf00      	nop
 8014ce6:	e004      	b.n	8014cf2 <tcp_process+0x7be>
      break;
 8014ce8:	bf00      	nop
 8014cea:	e002      	b.n	8014cf2 <tcp_process+0x7be>
      break;
 8014cec:	bf00      	nop
 8014cee:	e000      	b.n	8014cf2 <tcp_process+0x7be>
      break;
 8014cf0:	bf00      	nop
  }
  return ERR_OK;
 8014cf2:	2300      	movs	r3, #0
}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3724      	adds	r7, #36	; 0x24
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd90      	pop	{r4, r7, pc}
 8014cfc:	2000862c 	.word	0x2000862c
 8014d00:	20008628 	.word	0x20008628
 8014d04:	2000865c 	.word	0x2000865c
 8014d08:	20008654 	.word	0x20008654
 8014d0c:	2000865d 	.word	0x2000865d
 8014d10:	20008624 	.word	0x20008624

08014d14 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014d14:	b590      	push	{r4, r7, lr}
 8014d16:	b085      	sub	sp, #20
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
 8014d1c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d106      	bne.n	8014d32 <tcp_oos_insert_segment+0x1e>
 8014d24:	4b3b      	ldr	r3, [pc, #236]	; (8014e14 <tcp_oos_insert_segment+0x100>)
 8014d26:	f240 421f 	movw	r2, #1055	; 0x41f
 8014d2a:	493b      	ldr	r1, [pc, #236]	; (8014e18 <tcp_oos_insert_segment+0x104>)
 8014d2c:	483b      	ldr	r0, [pc, #236]	; (8014e1c <tcp_oos_insert_segment+0x108>)
 8014d2e:	f006 f999 	bl	801b064 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	68db      	ldr	r3, [r3, #12]
 8014d36:	899b      	ldrh	r3, [r3, #12]
 8014d38:	b29b      	uxth	r3, r3
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	f7fb fcb1 	bl	80106a2 <lwip_htons>
 8014d40:	4603      	mov	r3, r0
 8014d42:	b2db      	uxtb	r3, r3
 8014d44:	f003 0301 	and.w	r3, r3, #1
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d028      	beq.n	8014d9e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014d4c:	6838      	ldr	r0, [r7, #0]
 8014d4e:	f7fe fa63 	bl	8013218 <tcp_segs_free>
    next = NULL;
 8014d52:	2300      	movs	r3, #0
 8014d54:	603b      	str	r3, [r7, #0]
 8014d56:	e056      	b.n	8014e06 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014d58:	683b      	ldr	r3, [r7, #0]
 8014d5a:	68db      	ldr	r3, [r3, #12]
 8014d5c:	899b      	ldrh	r3, [r3, #12]
 8014d5e:	b29b      	uxth	r3, r3
 8014d60:	4618      	mov	r0, r3
 8014d62:	f7fb fc9e 	bl	80106a2 <lwip_htons>
 8014d66:	4603      	mov	r3, r0
 8014d68:	b2db      	uxtb	r3, r3
 8014d6a:	f003 0301 	and.w	r3, r3, #1
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d00d      	beq.n	8014d8e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	68db      	ldr	r3, [r3, #12]
 8014d76:	899b      	ldrh	r3, [r3, #12]
 8014d78:	b29c      	uxth	r4, r3
 8014d7a:	2001      	movs	r0, #1
 8014d7c:	f7fb fc91 	bl	80106a2 <lwip_htons>
 8014d80:	4603      	mov	r3, r0
 8014d82:	461a      	mov	r2, r3
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	68db      	ldr	r3, [r3, #12]
 8014d88:	4322      	orrs	r2, r4
 8014d8a:	b292      	uxth	r2, r2
 8014d8c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014d92:	683b      	ldr	r3, [r7, #0]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014d98:	68f8      	ldr	r0, [r7, #12]
 8014d9a:	f7fe fa52 	bl	8013242 <tcp_seg_free>
    while (next &&
 8014d9e:	683b      	ldr	r3, [r7, #0]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d00e      	beq.n	8014dc2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	891b      	ldrh	r3, [r3, #8]
 8014da8:	461a      	mov	r2, r3
 8014daa:	4b1d      	ldr	r3, [pc, #116]	; (8014e20 <tcp_oos_insert_segment+0x10c>)
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	441a      	add	r2, r3
 8014db0:	683b      	ldr	r3, [r7, #0]
 8014db2:	68db      	ldr	r3, [r3, #12]
 8014db4:	685b      	ldr	r3, [r3, #4]
 8014db6:	6839      	ldr	r1, [r7, #0]
 8014db8:	8909      	ldrh	r1, [r1, #8]
 8014dba:	440b      	add	r3, r1
 8014dbc:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	daca      	bge.n	8014d58 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014dc2:	683b      	ldr	r3, [r7, #0]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d01e      	beq.n	8014e06 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	891b      	ldrh	r3, [r3, #8]
 8014dcc:	461a      	mov	r2, r3
 8014dce:	4b14      	ldr	r3, [pc, #80]	; (8014e20 <tcp_oos_insert_segment+0x10c>)
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	441a      	add	r2, r3
 8014dd4:	683b      	ldr	r3, [r7, #0]
 8014dd6:	68db      	ldr	r3, [r3, #12]
 8014dd8:	685b      	ldr	r3, [r3, #4]
 8014dda:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	dd12      	ble.n	8014e06 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014de0:	683b      	ldr	r3, [r7, #0]
 8014de2:	68db      	ldr	r3, [r3, #12]
 8014de4:	685b      	ldr	r3, [r3, #4]
 8014de6:	b29a      	uxth	r2, r3
 8014de8:	4b0d      	ldr	r3, [pc, #52]	; (8014e20 <tcp_oos_insert_segment+0x10c>)
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	b29b      	uxth	r3, r3
 8014dee:	1ad3      	subs	r3, r2, r3
 8014df0:	b29a      	uxth	r2, r3
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	685a      	ldr	r2, [r3, #4]
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	891b      	ldrh	r3, [r3, #8]
 8014dfe:	4619      	mov	r1, r3
 8014e00:	4610      	mov	r0, r2
 8014e02:	f7fc fe25 	bl	8011a50 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	683a      	ldr	r2, [r7, #0]
 8014e0a:	601a      	str	r2, [r3, #0]
}
 8014e0c:	bf00      	nop
 8014e0e:	3714      	adds	r7, #20
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd90      	pop	{r4, r7, pc}
 8014e14:	0801d138 	.word	0x0801d138
 8014e18:	0801d3f8 	.word	0x0801d3f8
 8014e1c:	0801d184 	.word	0x0801d184
 8014e20:	20008650 	.word	0x20008650

08014e24 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014e24:	b5b0      	push	{r4, r5, r7, lr}
 8014e26:	b086      	sub	sp, #24
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	60f8      	str	r0, [r7, #12]
 8014e2c:	60b9      	str	r1, [r7, #8]
 8014e2e:	607a      	str	r2, [r7, #4]
 8014e30:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014e32:	e03e      	b.n	8014eb2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014e34:	68bb      	ldr	r3, [r7, #8]
 8014e36:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014e3e:	697b      	ldr	r3, [r7, #20]
 8014e40:	685b      	ldr	r3, [r3, #4]
 8014e42:	4618      	mov	r0, r3
 8014e44:	f7fd f812 	bl	8011e6c <pbuf_clen>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e52:	8a7a      	ldrh	r2, [r7, #18]
 8014e54:	429a      	cmp	r2, r3
 8014e56:	d906      	bls.n	8014e66 <tcp_free_acked_segments+0x42>
 8014e58:	4b2a      	ldr	r3, [pc, #168]	; (8014f04 <tcp_free_acked_segments+0xe0>)
 8014e5a:	f240 4257 	movw	r2, #1111	; 0x457
 8014e5e:	492a      	ldr	r1, [pc, #168]	; (8014f08 <tcp_free_acked_segments+0xe4>)
 8014e60:	482a      	ldr	r0, [pc, #168]	; (8014f0c <tcp_free_acked_segments+0xe8>)
 8014e62:	f006 f8ff 	bl	801b064 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014e6c:	8a7b      	ldrh	r3, [r7, #18]
 8014e6e:	1ad3      	subs	r3, r2, r3
 8014e70:	b29a      	uxth	r2, r3
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014e78:	697b      	ldr	r3, [r7, #20]
 8014e7a:	891a      	ldrh	r2, [r3, #8]
 8014e7c:	4b24      	ldr	r3, [pc, #144]	; (8014f10 <tcp_free_acked_segments+0xec>)
 8014e7e:	881b      	ldrh	r3, [r3, #0]
 8014e80:	4413      	add	r3, r2
 8014e82:	b29a      	uxth	r2, r3
 8014e84:	4b22      	ldr	r3, [pc, #136]	; (8014f10 <tcp_free_acked_segments+0xec>)
 8014e86:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014e88:	6978      	ldr	r0, [r7, #20]
 8014e8a:	f7fe f9da 	bl	8013242 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d00c      	beq.n	8014eb2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014e98:	68bb      	ldr	r3, [r7, #8]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d109      	bne.n	8014eb2 <tcp_free_acked_segments+0x8e>
 8014e9e:	683b      	ldr	r3, [r7, #0]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d106      	bne.n	8014eb2 <tcp_free_acked_segments+0x8e>
 8014ea4:	4b17      	ldr	r3, [pc, #92]	; (8014f04 <tcp_free_acked_segments+0xe0>)
 8014ea6:	f240 4261 	movw	r2, #1121	; 0x461
 8014eaa:	491a      	ldr	r1, [pc, #104]	; (8014f14 <tcp_free_acked_segments+0xf0>)
 8014eac:	4817      	ldr	r0, [pc, #92]	; (8014f0c <tcp_free_acked_segments+0xe8>)
 8014eae:	f006 f8d9 	bl	801b064 <iprintf>
  while (seg_list != NULL &&
 8014eb2:	68bb      	ldr	r3, [r7, #8]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d020      	beq.n	8014efa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014eb8:	68bb      	ldr	r3, [r7, #8]
 8014eba:	68db      	ldr	r3, [r3, #12]
 8014ebc:	685b      	ldr	r3, [r3, #4]
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7fb fc04 	bl	80106cc <lwip_htonl>
 8014ec4:	4604      	mov	r4, r0
 8014ec6:	68bb      	ldr	r3, [r7, #8]
 8014ec8:	891b      	ldrh	r3, [r3, #8]
 8014eca:	461d      	mov	r5, r3
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	68db      	ldr	r3, [r3, #12]
 8014ed0:	899b      	ldrh	r3, [r3, #12]
 8014ed2:	b29b      	uxth	r3, r3
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f7fb fbe4 	bl	80106a2 <lwip_htons>
 8014eda:	4603      	mov	r3, r0
 8014edc:	b2db      	uxtb	r3, r3
 8014ede:	f003 0303 	and.w	r3, r3, #3
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d001      	beq.n	8014eea <tcp_free_acked_segments+0xc6>
 8014ee6:	2301      	movs	r3, #1
 8014ee8:	e000      	b.n	8014eec <tcp_free_acked_segments+0xc8>
 8014eea:	2300      	movs	r3, #0
 8014eec:	442b      	add	r3, r5
 8014eee:	18e2      	adds	r2, r4, r3
 8014ef0:	4b09      	ldr	r3, [pc, #36]	; (8014f18 <tcp_free_acked_segments+0xf4>)
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	dd9c      	ble.n	8014e34 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014efa:	68bb      	ldr	r3, [r7, #8]
}
 8014efc:	4618      	mov	r0, r3
 8014efe:	3718      	adds	r7, #24
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bdb0      	pop	{r4, r5, r7, pc}
 8014f04:	0801d138 	.word	0x0801d138
 8014f08:	0801d420 	.word	0x0801d420
 8014f0c:	0801d184 	.word	0x0801d184
 8014f10:	20008658 	.word	0x20008658
 8014f14:	0801d448 	.word	0x0801d448
 8014f18:	20008654 	.word	0x20008654

08014f1c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014f1c:	b5b0      	push	{r4, r5, r7, lr}
 8014f1e:	b094      	sub	sp, #80	; 0x50
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014f24:	2300      	movs	r3, #0
 8014f26:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d106      	bne.n	8014f3c <tcp_receive+0x20>
 8014f2e:	4b91      	ldr	r3, [pc, #580]	; (8015174 <tcp_receive+0x258>)
 8014f30:	f240 427b 	movw	r2, #1147	; 0x47b
 8014f34:	4990      	ldr	r1, [pc, #576]	; (8015178 <tcp_receive+0x25c>)
 8014f36:	4891      	ldr	r0, [pc, #580]	; (801517c <tcp_receive+0x260>)
 8014f38:	f006 f894 	bl	801b064 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	7d1b      	ldrb	r3, [r3, #20]
 8014f40:	2b03      	cmp	r3, #3
 8014f42:	d806      	bhi.n	8014f52 <tcp_receive+0x36>
 8014f44:	4b8b      	ldr	r3, [pc, #556]	; (8015174 <tcp_receive+0x258>)
 8014f46:	f240 427c 	movw	r2, #1148	; 0x47c
 8014f4a:	498d      	ldr	r1, [pc, #564]	; (8015180 <tcp_receive+0x264>)
 8014f4c:	488b      	ldr	r0, [pc, #556]	; (801517c <tcp_receive+0x260>)
 8014f4e:	f006 f889 	bl	801b064 <iprintf>

  if (flags & TCP_ACK) {
 8014f52:	4b8c      	ldr	r3, [pc, #560]	; (8015184 <tcp_receive+0x268>)
 8014f54:	781b      	ldrb	r3, [r3, #0]
 8014f56:	f003 0310 	and.w	r3, r3, #16
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	f000 8264 	beq.w	8015428 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014f66:	461a      	mov	r2, r3
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f6c:	4413      	add	r3, r2
 8014f6e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014f74:	4b84      	ldr	r3, [pc, #528]	; (8015188 <tcp_receive+0x26c>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	1ad3      	subs	r3, r2, r3
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	db1b      	blt.n	8014fb6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014f82:	4b81      	ldr	r3, [pc, #516]	; (8015188 <tcp_receive+0x26c>)
 8014f84:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d106      	bne.n	8014f98 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014f8e:	4b7f      	ldr	r3, [pc, #508]	; (801518c <tcp_receive+0x270>)
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	1ad3      	subs	r3, r2, r3
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	db0e      	blt.n	8014fb6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014f9c:	4b7b      	ldr	r3, [pc, #492]	; (801518c <tcp_receive+0x270>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014fa0:	429a      	cmp	r2, r3
 8014fa2:	d125      	bne.n	8014ff0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014fa4:	4b7a      	ldr	r3, [pc, #488]	; (8015190 <tcp_receive+0x274>)
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	89db      	ldrh	r3, [r3, #14]
 8014faa:	b29a      	uxth	r2, r3
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	d91c      	bls.n	8014ff0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014fb6:	4b76      	ldr	r3, [pc, #472]	; (8015190 <tcp_receive+0x274>)
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	89db      	ldrh	r3, [r3, #14]
 8014fbc:	b29a      	uxth	r2, r3
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d205      	bcs.n	8014fe0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014fe0:	4b69      	ldr	r3, [pc, #420]	; (8015188 <tcp_receive+0x26c>)
 8014fe2:	681a      	ldr	r2, [r3, #0]
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014fe8:	4b68      	ldr	r3, [pc, #416]	; (801518c <tcp_receive+0x270>)
 8014fea:	681a      	ldr	r2, [r3, #0]
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014ff0:	4b66      	ldr	r3, [pc, #408]	; (801518c <tcp_receive+0x270>)
 8014ff2:	681a      	ldr	r2, [r3, #0]
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ff8:	1ad3      	subs	r3, r2, r3
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	dc58      	bgt.n	80150b0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014ffe:	4b65      	ldr	r3, [pc, #404]	; (8015194 <tcp_receive+0x278>)
 8015000:	881b      	ldrh	r3, [r3, #0]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d14b      	bne.n	801509e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801500a:	687a      	ldr	r2, [r7, #4]
 801500c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8015010:	4413      	add	r3, r2
 8015012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015014:	429a      	cmp	r2, r3
 8015016:	d142      	bne.n	801509e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801501e:	2b00      	cmp	r3, #0
 8015020:	db3d      	blt.n	801509e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015026:	4b59      	ldr	r3, [pc, #356]	; (801518c <tcp_receive+0x270>)
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	429a      	cmp	r2, r3
 801502c:	d137      	bne.n	801509e <tcp_receive+0x182>
              found_dupack = 1;
 801502e:	2301      	movs	r3, #1
 8015030:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015038:	2bff      	cmp	r3, #255	; 0xff
 801503a:	d007      	beq.n	801504c <tcp_receive+0x130>
                ++pcb->dupacks;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015042:	3301      	adds	r3, #1
 8015044:	b2da      	uxtb	r2, r3
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015052:	2b03      	cmp	r3, #3
 8015054:	d91b      	bls.n	801508e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015060:	4413      	add	r3, r2
 8015062:	b29a      	uxth	r2, r3
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801506a:	429a      	cmp	r2, r3
 801506c:	d30a      	bcc.n	8015084 <tcp_receive+0x168>
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015078:	4413      	add	r3, r2
 801507a:	b29a      	uxth	r2, r3
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015082:	e004      	b.n	801508e <tcp_receive+0x172>
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801508a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015094:	2b02      	cmp	r3, #2
 8015096:	d902      	bls.n	801509e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015098:	6878      	ldr	r0, [r7, #4]
 801509a:	f001 feed 	bl	8016e78 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801509e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	f040 8161 	bne.w	8015368 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	2200      	movs	r2, #0
 80150aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80150ae:	e15b      	b.n	8015368 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80150b0:	4b36      	ldr	r3, [pc, #216]	; (801518c <tcp_receive+0x270>)
 80150b2:	681a      	ldr	r2, [r3, #0]
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80150b8:	1ad3      	subs	r3, r2, r3
 80150ba:	3b01      	subs	r3, #1
 80150bc:	2b00      	cmp	r3, #0
 80150be:	f2c0 814e 	blt.w	801535e <tcp_receive+0x442>
 80150c2:	4b32      	ldr	r3, [pc, #200]	; (801518c <tcp_receive+0x270>)
 80150c4:	681a      	ldr	r2, [r3, #0]
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150ca:	1ad3      	subs	r3, r2, r3
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	f300 8146 	bgt.w	801535e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	8b5b      	ldrh	r3, [r3, #26]
 80150d6:	f003 0304 	and.w	r3, r3, #4
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d010      	beq.n	8015100 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	8b5b      	ldrh	r3, [r3, #26]
 80150e2:	f023 0304 	bic.w	r3, r3, #4
 80150e6:	b29a      	uxth	r2, r3
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2200      	movs	r2, #0
 80150fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	2200      	movs	r2, #0
 8015104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801510e:	10db      	asrs	r3, r3, #3
 8015110:	b21b      	sxth	r3, r3
 8015112:	b29a      	uxth	r2, r3
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801511a:	b29b      	uxth	r3, r3
 801511c:	4413      	add	r3, r2
 801511e:	b29b      	uxth	r3, r3
 8015120:	b21a      	sxth	r2, r3
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015128:	4b18      	ldr	r3, [pc, #96]	; (801518c <tcp_receive+0x270>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	b29a      	uxth	r2, r3
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015132:	b29b      	uxth	r3, r3
 8015134:	1ad3      	subs	r3, r2, r3
 8015136:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	2200      	movs	r2, #0
 801513c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8015140:	4b12      	ldr	r3, [pc, #72]	; (801518c <tcp_receive+0x270>)
 8015142:	681a      	ldr	r2, [r3, #0]
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	7d1b      	ldrb	r3, [r3, #20]
 801514c:	2b03      	cmp	r3, #3
 801514e:	f240 8097 	bls.w	8015280 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801515e:	429a      	cmp	r2, r3
 8015160:	d245      	bcs.n	80151ee <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	8b5b      	ldrh	r3, [r3, #26]
 8015166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801516a:	2b00      	cmp	r3, #0
 801516c:	d014      	beq.n	8015198 <tcp_receive+0x27c>
 801516e:	2301      	movs	r3, #1
 8015170:	e013      	b.n	801519a <tcp_receive+0x27e>
 8015172:	bf00      	nop
 8015174:	0801d138 	.word	0x0801d138
 8015178:	0801d468 	.word	0x0801d468
 801517c:	0801d184 	.word	0x0801d184
 8015180:	0801d484 	.word	0x0801d484
 8015184:	2000865c 	.word	0x2000865c
 8015188:	20008650 	.word	0x20008650
 801518c:	20008654 	.word	0x20008654
 8015190:	20008640 	.word	0x20008640
 8015194:	2000865a 	.word	0x2000865a
 8015198:	2302      	movs	r3, #2
 801519a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801519e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80151a2:	b29a      	uxth	r2, r3
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80151a8:	fb12 f303 	smulbb	r3, r2, r3
 80151ac:	b29b      	uxth	r3, r3
 80151ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80151b0:	4293      	cmp	r3, r2
 80151b2:	bf28      	it	cs
 80151b4:	4613      	movcs	r3, r2
 80151b6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80151be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80151c0:	4413      	add	r3, r2
 80151c2:	b29a      	uxth	r2, r3
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80151ca:	429a      	cmp	r2, r3
 80151cc:	d309      	bcc.n	80151e2 <tcp_receive+0x2c6>
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80151d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80151d6:	4413      	add	r3, r2
 80151d8:	b29a      	uxth	r2, r3
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80151e0:	e04e      	b.n	8015280 <tcp_receive+0x364>
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80151e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80151ec:	e048      	b.n	8015280 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80151f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80151f6:	4413      	add	r3, r2
 80151f8:	b29a      	uxth	r2, r3
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015200:	429a      	cmp	r2, r3
 8015202:	d309      	bcc.n	8015218 <tcp_receive+0x2fc>
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801520a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801520c:	4413      	add	r3, r2
 801520e:	b29a      	uxth	r2, r3
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8015216:	e004      	b.n	8015222 <tcp_receive+0x306>
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801521e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801522e:	429a      	cmp	r2, r3
 8015230:	d326      	bcc.n	8015280 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801523e:	1ad3      	subs	r3, r2, r3
 8015240:	b29a      	uxth	r2, r3
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015252:	4413      	add	r3, r2
 8015254:	b29a      	uxth	r2, r3
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801525c:	429a      	cmp	r2, r3
 801525e:	d30a      	bcc.n	8015276 <tcp_receive+0x35a>
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801526a:	4413      	add	r3, r2
 801526c:	b29a      	uxth	r2, r3
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015274:	e004      	b.n	8015280 <tcp_receive+0x364>
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801527c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015288:	4a98      	ldr	r2, [pc, #608]	; (80154ec <tcp_receive+0x5d0>)
 801528a:	6878      	ldr	r0, [r7, #4]
 801528c:	f7ff fdca 	bl	8014e24 <tcp_free_acked_segments>
 8015290:	4602      	mov	r2, r0
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801529e:	4a94      	ldr	r2, [pc, #592]	; (80154f0 <tcp_receive+0x5d4>)
 80152a0:	6878      	ldr	r0, [r7, #4]
 80152a2:	f7ff fdbf 	bl	8014e24 <tcp_free_acked_segments>
 80152a6:	4602      	mov	r2, r0
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d104      	bne.n	80152be <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80152ba:	861a      	strh	r2, [r3, #48]	; 0x30
 80152bc:	e002      	b.n	80152c4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	2200      	movs	r2, #0
 80152c2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	2200      	movs	r2, #0
 80152c8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d103      	bne.n	80152da <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2200      	movs	r2, #0
 80152d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80152e0:	4b84      	ldr	r3, [pc, #528]	; (80154f4 <tcp_receive+0x5d8>)
 80152e2:	881b      	ldrh	r3, [r3, #0]
 80152e4:	4413      	add	r3, r2
 80152e6:	b29a      	uxth	r2, r3
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	8b5b      	ldrh	r3, [r3, #26]
 80152f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d035      	beq.n	8015366 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d118      	bne.n	8015334 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015306:	2b00      	cmp	r3, #0
 8015308:	d00c      	beq.n	8015324 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015312:	68db      	ldr	r3, [r3, #12]
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	4618      	mov	r0, r3
 8015318:	f7fb f9d8 	bl	80106cc <lwip_htonl>
 801531c:	4603      	mov	r3, r0
 801531e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015320:	2b00      	cmp	r3, #0
 8015322:	dc20      	bgt.n	8015366 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	8b5b      	ldrh	r3, [r3, #26]
 8015328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801532c:	b29a      	uxth	r2, r3
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015332:	e018      	b.n	8015366 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801533c:	68db      	ldr	r3, [r3, #12]
 801533e:	685b      	ldr	r3, [r3, #4]
 8015340:	4618      	mov	r0, r3
 8015342:	f7fb f9c3 	bl	80106cc <lwip_htonl>
 8015346:	4603      	mov	r3, r0
 8015348:	1ae3      	subs	r3, r4, r3
 801534a:	2b00      	cmp	r3, #0
 801534c:	dc0b      	bgt.n	8015366 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	8b5b      	ldrh	r3, [r3, #26]
 8015352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015356:	b29a      	uxth	r2, r3
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801535c:	e003      	b.n	8015366 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801535e:	6878      	ldr	r0, [r7, #4]
 8015360:	f001 ff74 	bl	801724c <tcp_send_empty_ack>
 8015364:	e000      	b.n	8015368 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015366:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801536c:	2b00      	cmp	r3, #0
 801536e:	d05b      	beq.n	8015428 <tcp_receive+0x50c>
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015374:	4b60      	ldr	r3, [pc, #384]	; (80154f8 <tcp_receive+0x5dc>)
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	1ad3      	subs	r3, r2, r3
 801537a:	2b00      	cmp	r3, #0
 801537c:	da54      	bge.n	8015428 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801537e:	4b5f      	ldr	r3, [pc, #380]	; (80154fc <tcp_receive+0x5e0>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	b29a      	uxth	r2, r3
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015388:	b29b      	uxth	r3, r3
 801538a:	1ad3      	subs	r3, r2, r3
 801538c:	b29b      	uxth	r3, r3
 801538e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015392:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801539c:	10db      	asrs	r3, r3, #3
 801539e:	b21b      	sxth	r3, r3
 80153a0:	b29b      	uxth	r3, r3
 80153a2:	1ad3      	subs	r3, r2, r3
 80153a4:	b29b      	uxth	r3, r3
 80153a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80153b0:	b29a      	uxth	r2, r3
 80153b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80153b6:	4413      	add	r3, r2
 80153b8:	b29b      	uxth	r3, r3
 80153ba:	b21a      	sxth	r2, r3
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80153c0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	da05      	bge.n	80153d4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80153c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80153cc:	425b      	negs	r3, r3
 80153ce:	b29b      	uxth	r3, r3
 80153d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80153d4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80153de:	109b      	asrs	r3, r3, #2
 80153e0:	b21b      	sxth	r3, r3
 80153e2:	b29b      	uxth	r3, r3
 80153e4:	1ad3      	subs	r3, r2, r3
 80153e6:	b29b      	uxth	r3, r3
 80153e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80153f2:	b29a      	uxth	r2, r3
 80153f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80153f8:	4413      	add	r3, r2
 80153fa:	b29b      	uxth	r3, r3
 80153fc:	b21a      	sxth	r2, r3
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015408:	10db      	asrs	r3, r3, #3
 801540a:	b21b      	sxth	r3, r3
 801540c:	b29a      	uxth	r2, r3
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015414:	b29b      	uxth	r3, r3
 8015416:	4413      	add	r3, r2
 8015418:	b29b      	uxth	r3, r3
 801541a:	b21a      	sxth	r2, r3
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	2200      	movs	r2, #0
 8015426:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015428:	4b35      	ldr	r3, [pc, #212]	; (8015500 <tcp_receive+0x5e4>)
 801542a:	881b      	ldrh	r3, [r3, #0]
 801542c:	2b00      	cmp	r3, #0
 801542e:	f000 84e2 	beq.w	8015df6 <tcp_receive+0xeda>
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	7d1b      	ldrb	r3, [r3, #20]
 8015436:	2b06      	cmp	r3, #6
 8015438:	f200 84dd 	bhi.w	8015df6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015440:	4b30      	ldr	r3, [pc, #192]	; (8015504 <tcp_receive+0x5e8>)
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	1ad3      	subs	r3, r2, r3
 8015446:	3b01      	subs	r3, #1
 8015448:	2b00      	cmp	r3, #0
 801544a:	f2c0 808f 	blt.w	801556c <tcp_receive+0x650>
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015452:	4b2b      	ldr	r3, [pc, #172]	; (8015500 <tcp_receive+0x5e4>)
 8015454:	881b      	ldrh	r3, [r3, #0]
 8015456:	4619      	mov	r1, r3
 8015458:	4b2a      	ldr	r3, [pc, #168]	; (8015504 <tcp_receive+0x5e8>)
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	440b      	add	r3, r1
 801545e:	1ad3      	subs	r3, r2, r3
 8015460:	3301      	adds	r3, #1
 8015462:	2b00      	cmp	r3, #0
 8015464:	f300 8082 	bgt.w	801556c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015468:	4b27      	ldr	r3, [pc, #156]	; (8015508 <tcp_receive+0x5ec>)
 801546a:	685b      	ldr	r3, [r3, #4]
 801546c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015472:	4b24      	ldr	r3, [pc, #144]	; (8015504 <tcp_receive+0x5e8>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	1ad3      	subs	r3, r2, r3
 8015478:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801547a:	4b23      	ldr	r3, [pc, #140]	; (8015508 <tcp_receive+0x5ec>)
 801547c:	685b      	ldr	r3, [r3, #4]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d106      	bne.n	8015490 <tcp_receive+0x574>
 8015482:	4b22      	ldr	r3, [pc, #136]	; (801550c <tcp_receive+0x5f0>)
 8015484:	f240 5294 	movw	r2, #1428	; 0x594
 8015488:	4921      	ldr	r1, [pc, #132]	; (8015510 <tcp_receive+0x5f4>)
 801548a:	4822      	ldr	r0, [pc, #136]	; (8015514 <tcp_receive+0x5f8>)
 801548c:	f005 fdea 	bl	801b064 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015492:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015496:	4293      	cmp	r3, r2
 8015498:	d906      	bls.n	80154a8 <tcp_receive+0x58c>
 801549a:	4b1c      	ldr	r3, [pc, #112]	; (801550c <tcp_receive+0x5f0>)
 801549c:	f240 5295 	movw	r2, #1429	; 0x595
 80154a0:	491d      	ldr	r1, [pc, #116]	; (8015518 <tcp_receive+0x5fc>)
 80154a2:	481c      	ldr	r0, [pc, #112]	; (8015514 <tcp_receive+0x5f8>)
 80154a4:	f005 fdde 	bl	801b064 <iprintf>
      off = (u16_t)off32;
 80154a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80154ae:	4b16      	ldr	r3, [pc, #88]	; (8015508 <tcp_receive+0x5ec>)
 80154b0:	685b      	ldr	r3, [r3, #4]
 80154b2:	891b      	ldrh	r3, [r3, #8]
 80154b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80154b8:	429a      	cmp	r2, r3
 80154ba:	d906      	bls.n	80154ca <tcp_receive+0x5ae>
 80154bc:	4b13      	ldr	r3, [pc, #76]	; (801550c <tcp_receive+0x5f0>)
 80154be:	f240 5297 	movw	r2, #1431	; 0x597
 80154c2:	4916      	ldr	r1, [pc, #88]	; (801551c <tcp_receive+0x600>)
 80154c4:	4813      	ldr	r0, [pc, #76]	; (8015514 <tcp_receive+0x5f8>)
 80154c6:	f005 fdcd 	bl	801b064 <iprintf>
      inseg.len -= off;
 80154ca:	4b0f      	ldr	r3, [pc, #60]	; (8015508 <tcp_receive+0x5ec>)
 80154cc:	891a      	ldrh	r2, [r3, #8]
 80154ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80154d2:	1ad3      	subs	r3, r2, r3
 80154d4:	b29a      	uxth	r2, r3
 80154d6:	4b0c      	ldr	r3, [pc, #48]	; (8015508 <tcp_receive+0x5ec>)
 80154d8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80154da:	4b0b      	ldr	r3, [pc, #44]	; (8015508 <tcp_receive+0x5ec>)
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	891a      	ldrh	r2, [r3, #8]
 80154e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80154e4:	1ad3      	subs	r3, r2, r3
 80154e6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80154e8:	e02a      	b.n	8015540 <tcp_receive+0x624>
 80154ea:	bf00      	nop
 80154ec:	0801d4a0 	.word	0x0801d4a0
 80154f0:	0801d4a8 	.word	0x0801d4a8
 80154f4:	20008658 	.word	0x20008658
 80154f8:	20008654 	.word	0x20008654
 80154fc:	20008618 	.word	0x20008618
 8015500:	2000865a 	.word	0x2000865a
 8015504:	20008650 	.word	0x20008650
 8015508:	20008630 	.word	0x20008630
 801550c:	0801d138 	.word	0x0801d138
 8015510:	0801d4b0 	.word	0x0801d4b0
 8015514:	0801d184 	.word	0x0801d184
 8015518:	0801d4c0 	.word	0x0801d4c0
 801551c:	0801d4d0 	.word	0x0801d4d0
        off -= p->len;
 8015520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015522:	895b      	ldrh	r3, [r3, #10]
 8015524:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015528:	1ad3      	subs	r3, r2, r3
 801552a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801552e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015530:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015532:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015536:	2200      	movs	r2, #0
 8015538:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801553a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015542:	895b      	ldrh	r3, [r3, #10]
 8015544:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015548:	429a      	cmp	r2, r3
 801554a:	d8e9      	bhi.n	8015520 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801554c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015550:	4619      	mov	r1, r3
 8015552:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015554:	f7fc fb7c 	bl	8011c50 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801555c:	4a91      	ldr	r2, [pc, #580]	; (80157a4 <tcp_receive+0x888>)
 801555e:	6013      	str	r3, [r2, #0]
 8015560:	4b91      	ldr	r3, [pc, #580]	; (80157a8 <tcp_receive+0x88c>)
 8015562:	68db      	ldr	r3, [r3, #12]
 8015564:	4a8f      	ldr	r2, [pc, #572]	; (80157a4 <tcp_receive+0x888>)
 8015566:	6812      	ldr	r2, [r2, #0]
 8015568:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801556a:	e00d      	b.n	8015588 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801556c:	4b8d      	ldr	r3, [pc, #564]	; (80157a4 <tcp_receive+0x888>)
 801556e:	681a      	ldr	r2, [r3, #0]
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015574:	1ad3      	subs	r3, r2, r3
 8015576:	2b00      	cmp	r3, #0
 8015578:	da06      	bge.n	8015588 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	8b5b      	ldrh	r3, [r3, #26]
 801557e:	f043 0302 	orr.w	r3, r3, #2
 8015582:	b29a      	uxth	r2, r3
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015588:	4b86      	ldr	r3, [pc, #536]	; (80157a4 <tcp_receive+0x888>)
 801558a:	681a      	ldr	r2, [r3, #0]
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015590:	1ad3      	subs	r3, r2, r3
 8015592:	2b00      	cmp	r3, #0
 8015594:	f2c0 842a 	blt.w	8015dec <tcp_receive+0xed0>
 8015598:	4b82      	ldr	r3, [pc, #520]	; (80157a4 <tcp_receive+0x888>)
 801559a:	681a      	ldr	r2, [r3, #0]
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155a0:	6879      	ldr	r1, [r7, #4]
 80155a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80155a4:	440b      	add	r3, r1
 80155a6:	1ad3      	subs	r3, r2, r3
 80155a8:	3301      	adds	r3, #1
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	f300 841e 	bgt.w	8015dec <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80155b4:	4b7b      	ldr	r3, [pc, #492]	; (80157a4 <tcp_receive+0x888>)
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	429a      	cmp	r2, r3
 80155ba:	f040 829a 	bne.w	8015af2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80155be:	4b7a      	ldr	r3, [pc, #488]	; (80157a8 <tcp_receive+0x88c>)
 80155c0:	891c      	ldrh	r4, [r3, #8]
 80155c2:	4b79      	ldr	r3, [pc, #484]	; (80157a8 <tcp_receive+0x88c>)
 80155c4:	68db      	ldr	r3, [r3, #12]
 80155c6:	899b      	ldrh	r3, [r3, #12]
 80155c8:	b29b      	uxth	r3, r3
 80155ca:	4618      	mov	r0, r3
 80155cc:	f7fb f869 	bl	80106a2 <lwip_htons>
 80155d0:	4603      	mov	r3, r0
 80155d2:	b2db      	uxtb	r3, r3
 80155d4:	f003 0303 	and.w	r3, r3, #3
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d001      	beq.n	80155e0 <tcp_receive+0x6c4>
 80155dc:	2301      	movs	r3, #1
 80155de:	e000      	b.n	80155e2 <tcp_receive+0x6c6>
 80155e0:	2300      	movs	r3, #0
 80155e2:	4423      	add	r3, r4
 80155e4:	b29a      	uxth	r2, r3
 80155e6:	4b71      	ldr	r3, [pc, #452]	; (80157ac <tcp_receive+0x890>)
 80155e8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80155ee:	4b6f      	ldr	r3, [pc, #444]	; (80157ac <tcp_receive+0x890>)
 80155f0:	881b      	ldrh	r3, [r3, #0]
 80155f2:	429a      	cmp	r2, r3
 80155f4:	d275      	bcs.n	80156e2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80155f6:	4b6c      	ldr	r3, [pc, #432]	; (80157a8 <tcp_receive+0x88c>)
 80155f8:	68db      	ldr	r3, [r3, #12]
 80155fa:	899b      	ldrh	r3, [r3, #12]
 80155fc:	b29b      	uxth	r3, r3
 80155fe:	4618      	mov	r0, r3
 8015600:	f7fb f84f 	bl	80106a2 <lwip_htons>
 8015604:	4603      	mov	r3, r0
 8015606:	b2db      	uxtb	r3, r3
 8015608:	f003 0301 	and.w	r3, r3, #1
 801560c:	2b00      	cmp	r3, #0
 801560e:	d01f      	beq.n	8015650 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015610:	4b65      	ldr	r3, [pc, #404]	; (80157a8 <tcp_receive+0x88c>)
 8015612:	68db      	ldr	r3, [r3, #12]
 8015614:	899b      	ldrh	r3, [r3, #12]
 8015616:	b29b      	uxth	r3, r3
 8015618:	b21b      	sxth	r3, r3
 801561a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801561e:	b21c      	sxth	r4, r3
 8015620:	4b61      	ldr	r3, [pc, #388]	; (80157a8 <tcp_receive+0x88c>)
 8015622:	68db      	ldr	r3, [r3, #12]
 8015624:	899b      	ldrh	r3, [r3, #12]
 8015626:	b29b      	uxth	r3, r3
 8015628:	4618      	mov	r0, r3
 801562a:	f7fb f83a 	bl	80106a2 <lwip_htons>
 801562e:	4603      	mov	r3, r0
 8015630:	b2db      	uxtb	r3, r3
 8015632:	b29b      	uxth	r3, r3
 8015634:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015638:	b29b      	uxth	r3, r3
 801563a:	4618      	mov	r0, r3
 801563c:	f7fb f831 	bl	80106a2 <lwip_htons>
 8015640:	4603      	mov	r3, r0
 8015642:	b21b      	sxth	r3, r3
 8015644:	4323      	orrs	r3, r4
 8015646:	b21a      	sxth	r2, r3
 8015648:	4b57      	ldr	r3, [pc, #348]	; (80157a8 <tcp_receive+0x88c>)
 801564a:	68db      	ldr	r3, [r3, #12]
 801564c:	b292      	uxth	r2, r2
 801564e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015654:	4b54      	ldr	r3, [pc, #336]	; (80157a8 <tcp_receive+0x88c>)
 8015656:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015658:	4b53      	ldr	r3, [pc, #332]	; (80157a8 <tcp_receive+0x88c>)
 801565a:	68db      	ldr	r3, [r3, #12]
 801565c:	899b      	ldrh	r3, [r3, #12]
 801565e:	b29b      	uxth	r3, r3
 8015660:	4618      	mov	r0, r3
 8015662:	f7fb f81e 	bl	80106a2 <lwip_htons>
 8015666:	4603      	mov	r3, r0
 8015668:	b2db      	uxtb	r3, r3
 801566a:	f003 0302 	and.w	r3, r3, #2
 801566e:	2b00      	cmp	r3, #0
 8015670:	d005      	beq.n	801567e <tcp_receive+0x762>
            inseg.len -= 1;
 8015672:	4b4d      	ldr	r3, [pc, #308]	; (80157a8 <tcp_receive+0x88c>)
 8015674:	891b      	ldrh	r3, [r3, #8]
 8015676:	3b01      	subs	r3, #1
 8015678:	b29a      	uxth	r2, r3
 801567a:	4b4b      	ldr	r3, [pc, #300]	; (80157a8 <tcp_receive+0x88c>)
 801567c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801567e:	4b4a      	ldr	r3, [pc, #296]	; (80157a8 <tcp_receive+0x88c>)
 8015680:	685b      	ldr	r3, [r3, #4]
 8015682:	4a49      	ldr	r2, [pc, #292]	; (80157a8 <tcp_receive+0x88c>)
 8015684:	8912      	ldrh	r2, [r2, #8]
 8015686:	4611      	mov	r1, r2
 8015688:	4618      	mov	r0, r3
 801568a:	f7fc f9e1 	bl	8011a50 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801568e:	4b46      	ldr	r3, [pc, #280]	; (80157a8 <tcp_receive+0x88c>)
 8015690:	891c      	ldrh	r4, [r3, #8]
 8015692:	4b45      	ldr	r3, [pc, #276]	; (80157a8 <tcp_receive+0x88c>)
 8015694:	68db      	ldr	r3, [r3, #12]
 8015696:	899b      	ldrh	r3, [r3, #12]
 8015698:	b29b      	uxth	r3, r3
 801569a:	4618      	mov	r0, r3
 801569c:	f7fb f801 	bl	80106a2 <lwip_htons>
 80156a0:	4603      	mov	r3, r0
 80156a2:	b2db      	uxtb	r3, r3
 80156a4:	f003 0303 	and.w	r3, r3, #3
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d001      	beq.n	80156b0 <tcp_receive+0x794>
 80156ac:	2301      	movs	r3, #1
 80156ae:	e000      	b.n	80156b2 <tcp_receive+0x796>
 80156b0:	2300      	movs	r3, #0
 80156b2:	4423      	add	r3, r4
 80156b4:	b29a      	uxth	r2, r3
 80156b6:	4b3d      	ldr	r3, [pc, #244]	; (80157ac <tcp_receive+0x890>)
 80156b8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80156ba:	4b3c      	ldr	r3, [pc, #240]	; (80157ac <tcp_receive+0x890>)
 80156bc:	881b      	ldrh	r3, [r3, #0]
 80156be:	461a      	mov	r2, r3
 80156c0:	4b38      	ldr	r3, [pc, #224]	; (80157a4 <tcp_receive+0x888>)
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	441a      	add	r2, r3
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156ca:	6879      	ldr	r1, [r7, #4]
 80156cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80156ce:	440b      	add	r3, r1
 80156d0:	429a      	cmp	r2, r3
 80156d2:	d006      	beq.n	80156e2 <tcp_receive+0x7c6>
 80156d4:	4b36      	ldr	r3, [pc, #216]	; (80157b0 <tcp_receive+0x894>)
 80156d6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80156da:	4936      	ldr	r1, [pc, #216]	; (80157b4 <tcp_receive+0x898>)
 80156dc:	4836      	ldr	r0, [pc, #216]	; (80157b8 <tcp_receive+0x89c>)
 80156de:	f005 fcc1 	bl	801b064 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	f000 80e7 	beq.w	80158ba <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80156ec:	4b2e      	ldr	r3, [pc, #184]	; (80157a8 <tcp_receive+0x88c>)
 80156ee:	68db      	ldr	r3, [r3, #12]
 80156f0:	899b      	ldrh	r3, [r3, #12]
 80156f2:	b29b      	uxth	r3, r3
 80156f4:	4618      	mov	r0, r3
 80156f6:	f7fa ffd4 	bl	80106a2 <lwip_htons>
 80156fa:	4603      	mov	r3, r0
 80156fc:	b2db      	uxtb	r3, r3
 80156fe:	f003 0301 	and.w	r3, r3, #1
 8015702:	2b00      	cmp	r3, #0
 8015704:	d010      	beq.n	8015728 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015706:	e00a      	b.n	801571e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801570c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015712:	681a      	ldr	r2, [r3, #0]
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015718:	68f8      	ldr	r0, [r7, #12]
 801571a:	f7fd fd92 	bl	8013242 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015722:	2b00      	cmp	r3, #0
 8015724:	d1f0      	bne.n	8015708 <tcp_receive+0x7ec>
 8015726:	e0c8      	b.n	80158ba <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801572c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801572e:	e052      	b.n	80157d6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015732:	68db      	ldr	r3, [r3, #12]
 8015734:	899b      	ldrh	r3, [r3, #12]
 8015736:	b29b      	uxth	r3, r3
 8015738:	4618      	mov	r0, r3
 801573a:	f7fa ffb2 	bl	80106a2 <lwip_htons>
 801573e:	4603      	mov	r3, r0
 8015740:	b2db      	uxtb	r3, r3
 8015742:	f003 0301 	and.w	r3, r3, #1
 8015746:	2b00      	cmp	r3, #0
 8015748:	d03d      	beq.n	80157c6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801574a:	4b17      	ldr	r3, [pc, #92]	; (80157a8 <tcp_receive+0x88c>)
 801574c:	68db      	ldr	r3, [r3, #12]
 801574e:	899b      	ldrh	r3, [r3, #12]
 8015750:	b29b      	uxth	r3, r3
 8015752:	4618      	mov	r0, r3
 8015754:	f7fa ffa5 	bl	80106a2 <lwip_htons>
 8015758:	4603      	mov	r3, r0
 801575a:	b2db      	uxtb	r3, r3
 801575c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015760:	2b00      	cmp	r3, #0
 8015762:	d130      	bne.n	80157c6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015764:	4b10      	ldr	r3, [pc, #64]	; (80157a8 <tcp_receive+0x88c>)
 8015766:	68db      	ldr	r3, [r3, #12]
 8015768:	899b      	ldrh	r3, [r3, #12]
 801576a:	b29c      	uxth	r4, r3
 801576c:	2001      	movs	r0, #1
 801576e:	f7fa ff98 	bl	80106a2 <lwip_htons>
 8015772:	4603      	mov	r3, r0
 8015774:	461a      	mov	r2, r3
 8015776:	4b0c      	ldr	r3, [pc, #48]	; (80157a8 <tcp_receive+0x88c>)
 8015778:	68db      	ldr	r3, [r3, #12]
 801577a:	4322      	orrs	r2, r4
 801577c:	b292      	uxth	r2, r2
 801577e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015780:	4b09      	ldr	r3, [pc, #36]	; (80157a8 <tcp_receive+0x88c>)
 8015782:	891c      	ldrh	r4, [r3, #8]
 8015784:	4b08      	ldr	r3, [pc, #32]	; (80157a8 <tcp_receive+0x88c>)
 8015786:	68db      	ldr	r3, [r3, #12]
 8015788:	899b      	ldrh	r3, [r3, #12]
 801578a:	b29b      	uxth	r3, r3
 801578c:	4618      	mov	r0, r3
 801578e:	f7fa ff88 	bl	80106a2 <lwip_htons>
 8015792:	4603      	mov	r3, r0
 8015794:	b2db      	uxtb	r3, r3
 8015796:	f003 0303 	and.w	r3, r3, #3
 801579a:	2b00      	cmp	r3, #0
 801579c:	d00e      	beq.n	80157bc <tcp_receive+0x8a0>
 801579e:	2301      	movs	r3, #1
 80157a0:	e00d      	b.n	80157be <tcp_receive+0x8a2>
 80157a2:	bf00      	nop
 80157a4:	20008650 	.word	0x20008650
 80157a8:	20008630 	.word	0x20008630
 80157ac:	2000865a 	.word	0x2000865a
 80157b0:	0801d138 	.word	0x0801d138
 80157b4:	0801d4e0 	.word	0x0801d4e0
 80157b8:	0801d184 	.word	0x0801d184
 80157bc:	2300      	movs	r3, #0
 80157be:	4423      	add	r3, r4
 80157c0:	b29a      	uxth	r2, r3
 80157c2:	4b98      	ldr	r3, [pc, #608]	; (8015a24 <tcp_receive+0xb08>)
 80157c4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80157c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157c8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80157ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80157d0:	6938      	ldr	r0, [r7, #16]
 80157d2:	f7fd fd36 	bl	8013242 <tcp_seg_free>
            while (next &&
 80157d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d00e      	beq.n	80157fa <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80157dc:	4b91      	ldr	r3, [pc, #580]	; (8015a24 <tcp_receive+0xb08>)
 80157de:	881b      	ldrh	r3, [r3, #0]
 80157e0:	461a      	mov	r2, r3
 80157e2:	4b91      	ldr	r3, [pc, #580]	; (8015a28 <tcp_receive+0xb0c>)
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	441a      	add	r2, r3
 80157e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157ea:	68db      	ldr	r3, [r3, #12]
 80157ec:	685b      	ldr	r3, [r3, #4]
 80157ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80157f0:	8909      	ldrh	r1, [r1, #8]
 80157f2:	440b      	add	r3, r1
 80157f4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	da9a      	bge.n	8015730 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80157fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d059      	beq.n	80158b4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8015800:	4b88      	ldr	r3, [pc, #544]	; (8015a24 <tcp_receive+0xb08>)
 8015802:	881b      	ldrh	r3, [r3, #0]
 8015804:	461a      	mov	r2, r3
 8015806:	4b88      	ldr	r3, [pc, #544]	; (8015a28 <tcp_receive+0xb0c>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	441a      	add	r2, r3
 801580c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801580e:	68db      	ldr	r3, [r3, #12]
 8015810:	685b      	ldr	r3, [r3, #4]
 8015812:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015814:	2b00      	cmp	r3, #0
 8015816:	dd4d      	ble.n	80158b4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801581a:	68db      	ldr	r3, [r3, #12]
 801581c:	685b      	ldr	r3, [r3, #4]
 801581e:	b29a      	uxth	r2, r3
 8015820:	4b81      	ldr	r3, [pc, #516]	; (8015a28 <tcp_receive+0xb0c>)
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	b29b      	uxth	r3, r3
 8015826:	1ad3      	subs	r3, r2, r3
 8015828:	b29a      	uxth	r2, r3
 801582a:	4b80      	ldr	r3, [pc, #512]	; (8015a2c <tcp_receive+0xb10>)
 801582c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801582e:	4b7f      	ldr	r3, [pc, #508]	; (8015a2c <tcp_receive+0xb10>)
 8015830:	68db      	ldr	r3, [r3, #12]
 8015832:	899b      	ldrh	r3, [r3, #12]
 8015834:	b29b      	uxth	r3, r3
 8015836:	4618      	mov	r0, r3
 8015838:	f7fa ff33 	bl	80106a2 <lwip_htons>
 801583c:	4603      	mov	r3, r0
 801583e:	b2db      	uxtb	r3, r3
 8015840:	f003 0302 	and.w	r3, r3, #2
 8015844:	2b00      	cmp	r3, #0
 8015846:	d005      	beq.n	8015854 <tcp_receive+0x938>
                inseg.len -= 1;
 8015848:	4b78      	ldr	r3, [pc, #480]	; (8015a2c <tcp_receive+0xb10>)
 801584a:	891b      	ldrh	r3, [r3, #8]
 801584c:	3b01      	subs	r3, #1
 801584e:	b29a      	uxth	r2, r3
 8015850:	4b76      	ldr	r3, [pc, #472]	; (8015a2c <tcp_receive+0xb10>)
 8015852:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015854:	4b75      	ldr	r3, [pc, #468]	; (8015a2c <tcp_receive+0xb10>)
 8015856:	685b      	ldr	r3, [r3, #4]
 8015858:	4a74      	ldr	r2, [pc, #464]	; (8015a2c <tcp_receive+0xb10>)
 801585a:	8912      	ldrh	r2, [r2, #8]
 801585c:	4611      	mov	r1, r2
 801585e:	4618      	mov	r0, r3
 8015860:	f7fc f8f6 	bl	8011a50 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015864:	4b71      	ldr	r3, [pc, #452]	; (8015a2c <tcp_receive+0xb10>)
 8015866:	891c      	ldrh	r4, [r3, #8]
 8015868:	4b70      	ldr	r3, [pc, #448]	; (8015a2c <tcp_receive+0xb10>)
 801586a:	68db      	ldr	r3, [r3, #12]
 801586c:	899b      	ldrh	r3, [r3, #12]
 801586e:	b29b      	uxth	r3, r3
 8015870:	4618      	mov	r0, r3
 8015872:	f7fa ff16 	bl	80106a2 <lwip_htons>
 8015876:	4603      	mov	r3, r0
 8015878:	b2db      	uxtb	r3, r3
 801587a:	f003 0303 	and.w	r3, r3, #3
 801587e:	2b00      	cmp	r3, #0
 8015880:	d001      	beq.n	8015886 <tcp_receive+0x96a>
 8015882:	2301      	movs	r3, #1
 8015884:	e000      	b.n	8015888 <tcp_receive+0x96c>
 8015886:	2300      	movs	r3, #0
 8015888:	4423      	add	r3, r4
 801588a:	b29a      	uxth	r2, r3
 801588c:	4b65      	ldr	r3, [pc, #404]	; (8015a24 <tcp_receive+0xb08>)
 801588e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015890:	4b64      	ldr	r3, [pc, #400]	; (8015a24 <tcp_receive+0xb08>)
 8015892:	881b      	ldrh	r3, [r3, #0]
 8015894:	461a      	mov	r2, r3
 8015896:	4b64      	ldr	r3, [pc, #400]	; (8015a28 <tcp_receive+0xb0c>)
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	441a      	add	r2, r3
 801589c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801589e:	68db      	ldr	r3, [r3, #12]
 80158a0:	685b      	ldr	r3, [r3, #4]
 80158a2:	429a      	cmp	r2, r3
 80158a4:	d006      	beq.n	80158b4 <tcp_receive+0x998>
 80158a6:	4b62      	ldr	r3, [pc, #392]	; (8015a30 <tcp_receive+0xb14>)
 80158a8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80158ac:	4961      	ldr	r1, [pc, #388]	; (8015a34 <tcp_receive+0xb18>)
 80158ae:	4862      	ldr	r0, [pc, #392]	; (8015a38 <tcp_receive+0xb1c>)
 80158b0:	f005 fbd8 	bl	801b064 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80158b8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80158ba:	4b5a      	ldr	r3, [pc, #360]	; (8015a24 <tcp_receive+0xb08>)
 80158bc:	881b      	ldrh	r3, [r3, #0]
 80158be:	461a      	mov	r2, r3
 80158c0:	4b59      	ldr	r3, [pc, #356]	; (8015a28 <tcp_receive+0xb0c>)
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	441a      	add	r2, r3
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80158ce:	4b55      	ldr	r3, [pc, #340]	; (8015a24 <tcp_receive+0xb08>)
 80158d0:	881b      	ldrh	r3, [r3, #0]
 80158d2:	429a      	cmp	r2, r3
 80158d4:	d206      	bcs.n	80158e4 <tcp_receive+0x9c8>
 80158d6:	4b56      	ldr	r3, [pc, #344]	; (8015a30 <tcp_receive+0xb14>)
 80158d8:	f240 6207 	movw	r2, #1543	; 0x607
 80158dc:	4957      	ldr	r1, [pc, #348]	; (8015a3c <tcp_receive+0xb20>)
 80158de:	4856      	ldr	r0, [pc, #344]	; (8015a38 <tcp_receive+0xb1c>)
 80158e0:	f005 fbc0 	bl	801b064 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80158e8:	4b4e      	ldr	r3, [pc, #312]	; (8015a24 <tcp_receive+0xb08>)
 80158ea:	881b      	ldrh	r3, [r3, #0]
 80158ec:	1ad3      	subs	r3, r2, r3
 80158ee:	b29a      	uxth	r2, r3
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80158f4:	6878      	ldr	r0, [r7, #4]
 80158f6:	f7fc ffc5 	bl	8012884 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80158fa:	4b4c      	ldr	r3, [pc, #304]	; (8015a2c <tcp_receive+0xb10>)
 80158fc:	685b      	ldr	r3, [r3, #4]
 80158fe:	891b      	ldrh	r3, [r3, #8]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d006      	beq.n	8015912 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8015904:	4b49      	ldr	r3, [pc, #292]	; (8015a2c <tcp_receive+0xb10>)
 8015906:	685b      	ldr	r3, [r3, #4]
 8015908:	4a4d      	ldr	r2, [pc, #308]	; (8015a40 <tcp_receive+0xb24>)
 801590a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801590c:	4b47      	ldr	r3, [pc, #284]	; (8015a2c <tcp_receive+0xb10>)
 801590e:	2200      	movs	r2, #0
 8015910:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015912:	4b46      	ldr	r3, [pc, #280]	; (8015a2c <tcp_receive+0xb10>)
 8015914:	68db      	ldr	r3, [r3, #12]
 8015916:	899b      	ldrh	r3, [r3, #12]
 8015918:	b29b      	uxth	r3, r3
 801591a:	4618      	mov	r0, r3
 801591c:	f7fa fec1 	bl	80106a2 <lwip_htons>
 8015920:	4603      	mov	r3, r0
 8015922:	b2db      	uxtb	r3, r3
 8015924:	f003 0301 	and.w	r3, r3, #1
 8015928:	2b00      	cmp	r3, #0
 801592a:	f000 80b8 	beq.w	8015a9e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801592e:	4b45      	ldr	r3, [pc, #276]	; (8015a44 <tcp_receive+0xb28>)
 8015930:	781b      	ldrb	r3, [r3, #0]
 8015932:	f043 0320 	orr.w	r3, r3, #32
 8015936:	b2da      	uxtb	r2, r3
 8015938:	4b42      	ldr	r3, [pc, #264]	; (8015a44 <tcp_receive+0xb28>)
 801593a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801593c:	e0af      	b.n	8015a9e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015942:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015948:	68db      	ldr	r3, [r3, #12]
 801594a:	685b      	ldr	r3, [r3, #4]
 801594c:	4a36      	ldr	r2, [pc, #216]	; (8015a28 <tcp_receive+0xb0c>)
 801594e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015950:	68bb      	ldr	r3, [r7, #8]
 8015952:	891b      	ldrh	r3, [r3, #8]
 8015954:	461c      	mov	r4, r3
 8015956:	68bb      	ldr	r3, [r7, #8]
 8015958:	68db      	ldr	r3, [r3, #12]
 801595a:	899b      	ldrh	r3, [r3, #12]
 801595c:	b29b      	uxth	r3, r3
 801595e:	4618      	mov	r0, r3
 8015960:	f7fa fe9f 	bl	80106a2 <lwip_htons>
 8015964:	4603      	mov	r3, r0
 8015966:	b2db      	uxtb	r3, r3
 8015968:	f003 0303 	and.w	r3, r3, #3
 801596c:	2b00      	cmp	r3, #0
 801596e:	d001      	beq.n	8015974 <tcp_receive+0xa58>
 8015970:	2301      	movs	r3, #1
 8015972:	e000      	b.n	8015976 <tcp_receive+0xa5a>
 8015974:	2300      	movs	r3, #0
 8015976:	191a      	adds	r2, r3, r4
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801597c:	441a      	add	r2, r3
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015986:	461c      	mov	r4, r3
 8015988:	68bb      	ldr	r3, [r7, #8]
 801598a:	891b      	ldrh	r3, [r3, #8]
 801598c:	461d      	mov	r5, r3
 801598e:	68bb      	ldr	r3, [r7, #8]
 8015990:	68db      	ldr	r3, [r3, #12]
 8015992:	899b      	ldrh	r3, [r3, #12]
 8015994:	b29b      	uxth	r3, r3
 8015996:	4618      	mov	r0, r3
 8015998:	f7fa fe83 	bl	80106a2 <lwip_htons>
 801599c:	4603      	mov	r3, r0
 801599e:	b2db      	uxtb	r3, r3
 80159a0:	f003 0303 	and.w	r3, r3, #3
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d001      	beq.n	80159ac <tcp_receive+0xa90>
 80159a8:	2301      	movs	r3, #1
 80159aa:	e000      	b.n	80159ae <tcp_receive+0xa92>
 80159ac:	2300      	movs	r3, #0
 80159ae:	442b      	add	r3, r5
 80159b0:	429c      	cmp	r4, r3
 80159b2:	d206      	bcs.n	80159c2 <tcp_receive+0xaa6>
 80159b4:	4b1e      	ldr	r3, [pc, #120]	; (8015a30 <tcp_receive+0xb14>)
 80159b6:	f240 622b 	movw	r2, #1579	; 0x62b
 80159ba:	4923      	ldr	r1, [pc, #140]	; (8015a48 <tcp_receive+0xb2c>)
 80159bc:	481e      	ldr	r0, [pc, #120]	; (8015a38 <tcp_receive+0xb1c>)
 80159be:	f005 fb51 	bl	801b064 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80159c2:	68bb      	ldr	r3, [r7, #8]
 80159c4:	891b      	ldrh	r3, [r3, #8]
 80159c6:	461c      	mov	r4, r3
 80159c8:	68bb      	ldr	r3, [r7, #8]
 80159ca:	68db      	ldr	r3, [r3, #12]
 80159cc:	899b      	ldrh	r3, [r3, #12]
 80159ce:	b29b      	uxth	r3, r3
 80159d0:	4618      	mov	r0, r3
 80159d2:	f7fa fe66 	bl	80106a2 <lwip_htons>
 80159d6:	4603      	mov	r3, r0
 80159d8:	b2db      	uxtb	r3, r3
 80159da:	f003 0303 	and.w	r3, r3, #3
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d001      	beq.n	80159e6 <tcp_receive+0xaca>
 80159e2:	2301      	movs	r3, #1
 80159e4:	e000      	b.n	80159e8 <tcp_receive+0xacc>
 80159e6:	2300      	movs	r3, #0
 80159e8:	1919      	adds	r1, r3, r4
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80159ee:	b28b      	uxth	r3, r1
 80159f0:	1ad3      	subs	r3, r2, r3
 80159f2:	b29a      	uxth	r2, r3
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80159f8:	6878      	ldr	r0, [r7, #4]
 80159fa:	f7fc ff43 	bl	8012884 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80159fe:	68bb      	ldr	r3, [r7, #8]
 8015a00:	685b      	ldr	r3, [r3, #4]
 8015a02:	891b      	ldrh	r3, [r3, #8]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d028      	beq.n	8015a5a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015a08:	4b0d      	ldr	r3, [pc, #52]	; (8015a40 <tcp_receive+0xb24>)
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d01d      	beq.n	8015a4c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8015a10:	4b0b      	ldr	r3, [pc, #44]	; (8015a40 <tcp_receive+0xb24>)
 8015a12:	681a      	ldr	r2, [r3, #0]
 8015a14:	68bb      	ldr	r3, [r7, #8]
 8015a16:	685b      	ldr	r3, [r3, #4]
 8015a18:	4619      	mov	r1, r3
 8015a1a:	4610      	mov	r0, r2
 8015a1c:	f7fc fa60 	bl	8011ee0 <pbuf_cat>
 8015a20:	e018      	b.n	8015a54 <tcp_receive+0xb38>
 8015a22:	bf00      	nop
 8015a24:	2000865a 	.word	0x2000865a
 8015a28:	20008650 	.word	0x20008650
 8015a2c:	20008630 	.word	0x20008630
 8015a30:	0801d138 	.word	0x0801d138
 8015a34:	0801d518 	.word	0x0801d518
 8015a38:	0801d184 	.word	0x0801d184
 8015a3c:	0801d554 	.word	0x0801d554
 8015a40:	20008660 	.word	0x20008660
 8015a44:	2000865d 	.word	0x2000865d
 8015a48:	0801d574 	.word	0x0801d574
            } else {
              recv_data = cseg->p;
 8015a4c:	68bb      	ldr	r3, [r7, #8]
 8015a4e:	685b      	ldr	r3, [r3, #4]
 8015a50:	4a70      	ldr	r2, [pc, #448]	; (8015c14 <tcp_receive+0xcf8>)
 8015a52:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015a54:	68bb      	ldr	r3, [r7, #8]
 8015a56:	2200      	movs	r2, #0
 8015a58:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015a5a:	68bb      	ldr	r3, [r7, #8]
 8015a5c:	68db      	ldr	r3, [r3, #12]
 8015a5e:	899b      	ldrh	r3, [r3, #12]
 8015a60:	b29b      	uxth	r3, r3
 8015a62:	4618      	mov	r0, r3
 8015a64:	f7fa fe1d 	bl	80106a2 <lwip_htons>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	b2db      	uxtb	r3, r3
 8015a6c:	f003 0301 	and.w	r3, r3, #1
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d00d      	beq.n	8015a90 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015a74:	4b68      	ldr	r3, [pc, #416]	; (8015c18 <tcp_receive+0xcfc>)
 8015a76:	781b      	ldrb	r3, [r3, #0]
 8015a78:	f043 0320 	orr.w	r3, r3, #32
 8015a7c:	b2da      	uxtb	r2, r3
 8015a7e:	4b66      	ldr	r3, [pc, #408]	; (8015c18 <tcp_receive+0xcfc>)
 8015a80:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	7d1b      	ldrb	r3, [r3, #20]
 8015a86:	2b04      	cmp	r3, #4
 8015a88:	d102      	bne.n	8015a90 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	2207      	movs	r2, #7
 8015a8e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015a90:	68bb      	ldr	r3, [r7, #8]
 8015a92:	681a      	ldr	r2, [r3, #0]
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8015a98:	68b8      	ldr	r0, [r7, #8]
 8015a9a:	f7fd fbd2 	bl	8013242 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d008      	beq.n	8015ab8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015aaa:	68db      	ldr	r3, [r3, #12]
 8015aac:	685a      	ldr	r2, [r3, #4]
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8015ab2:	429a      	cmp	r2, r3
 8015ab4:	f43f af43 	beq.w	801593e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	8b5b      	ldrh	r3, [r3, #26]
 8015abc:	f003 0301 	and.w	r3, r3, #1
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d00e      	beq.n	8015ae2 <tcp_receive+0xbc6>
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	8b5b      	ldrh	r3, [r3, #26]
 8015ac8:	f023 0301 	bic.w	r3, r3, #1
 8015acc:	b29a      	uxth	r2, r3
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	835a      	strh	r2, [r3, #26]
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	8b5b      	ldrh	r3, [r3, #26]
 8015ad6:	f043 0302 	orr.w	r3, r3, #2
 8015ada:	b29a      	uxth	r2, r3
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015ae0:	e188      	b.n	8015df4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	8b5b      	ldrh	r3, [r3, #26]
 8015ae6:	f043 0301 	orr.w	r3, r3, #1
 8015aea:	b29a      	uxth	r2, r3
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015af0:	e180      	b.n	8015df4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d106      	bne.n	8015b08 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015afa:	4848      	ldr	r0, [pc, #288]	; (8015c1c <tcp_receive+0xd00>)
 8015afc:	f7fd fbba 	bl	8013274 <tcp_seg_copy>
 8015b00:	4602      	mov	r2, r0
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	675a      	str	r2, [r3, #116]	; 0x74
 8015b06:	e16d      	b.n	8015de4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015b10:	63bb      	str	r3, [r7, #56]	; 0x38
 8015b12:	e157      	b.n	8015dc4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8015b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b16:	68db      	ldr	r3, [r3, #12]
 8015b18:	685a      	ldr	r2, [r3, #4]
 8015b1a:	4b41      	ldr	r3, [pc, #260]	; (8015c20 <tcp_receive+0xd04>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	429a      	cmp	r2, r3
 8015b20:	d11d      	bne.n	8015b5e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015b22:	4b3e      	ldr	r3, [pc, #248]	; (8015c1c <tcp_receive+0xd00>)
 8015b24:	891a      	ldrh	r2, [r3, #8]
 8015b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b28:	891b      	ldrh	r3, [r3, #8]
 8015b2a:	429a      	cmp	r2, r3
 8015b2c:	f240 814f 	bls.w	8015dce <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015b30:	483a      	ldr	r0, [pc, #232]	; (8015c1c <tcp_receive+0xd00>)
 8015b32:	f7fd fb9f 	bl	8013274 <tcp_seg_copy>
 8015b36:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015b38:	697b      	ldr	r3, [r7, #20]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	f000 8149 	beq.w	8015dd2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8015b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d003      	beq.n	8015b4e <tcp_receive+0xc32>
                    prev->next = cseg;
 8015b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b48:	697a      	ldr	r2, [r7, #20]
 8015b4a:	601a      	str	r2, [r3, #0]
 8015b4c:	e002      	b.n	8015b54 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	697a      	ldr	r2, [r7, #20]
 8015b52:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015b54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015b56:	6978      	ldr	r0, [r7, #20]
 8015b58:	f7ff f8dc 	bl	8014d14 <tcp_oos_insert_segment>
                }
                break;
 8015b5c:	e139      	b.n	8015dd2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8015b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d117      	bne.n	8015b94 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015b64:	4b2e      	ldr	r3, [pc, #184]	; (8015c20 <tcp_receive+0xd04>)
 8015b66:	681a      	ldr	r2, [r3, #0]
 8015b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b6a:	68db      	ldr	r3, [r3, #12]
 8015b6c:	685b      	ldr	r3, [r3, #4]
 8015b6e:	1ad3      	subs	r3, r2, r3
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	da57      	bge.n	8015c24 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015b74:	4829      	ldr	r0, [pc, #164]	; (8015c1c <tcp_receive+0xd00>)
 8015b76:	f7fd fb7d 	bl	8013274 <tcp_seg_copy>
 8015b7a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015b7c:	69bb      	ldr	r3, [r7, #24]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	f000 8129 	beq.w	8015dd6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	69ba      	ldr	r2, [r7, #24]
 8015b88:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015b8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015b8c:	69b8      	ldr	r0, [r7, #24]
 8015b8e:	f7ff f8c1 	bl	8014d14 <tcp_oos_insert_segment>
                  }
                  break;
 8015b92:	e120      	b.n	8015dd6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015b94:	4b22      	ldr	r3, [pc, #136]	; (8015c20 <tcp_receive+0xd04>)
 8015b96:	681a      	ldr	r2, [r3, #0]
 8015b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b9a:	68db      	ldr	r3, [r3, #12]
 8015b9c:	685b      	ldr	r3, [r3, #4]
 8015b9e:	1ad3      	subs	r3, r2, r3
 8015ba0:	3b01      	subs	r3, #1
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	db3e      	blt.n	8015c24 <tcp_receive+0xd08>
 8015ba6:	4b1e      	ldr	r3, [pc, #120]	; (8015c20 <tcp_receive+0xd04>)
 8015ba8:	681a      	ldr	r2, [r3, #0]
 8015baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bac:	68db      	ldr	r3, [r3, #12]
 8015bae:	685b      	ldr	r3, [r3, #4]
 8015bb0:	1ad3      	subs	r3, r2, r3
 8015bb2:	3301      	adds	r3, #1
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	dc35      	bgt.n	8015c24 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015bb8:	4818      	ldr	r0, [pc, #96]	; (8015c1c <tcp_receive+0xd00>)
 8015bba:	f7fd fb5b 	bl	8013274 <tcp_seg_copy>
 8015bbe:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015bc0:	69fb      	ldr	r3, [r7, #28]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	f000 8109 	beq.w	8015dda <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bca:	68db      	ldr	r3, [r3, #12]
 8015bcc:	685b      	ldr	r3, [r3, #4]
 8015bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015bd0:	8912      	ldrh	r2, [r2, #8]
 8015bd2:	441a      	add	r2, r3
 8015bd4:	4b12      	ldr	r3, [pc, #72]	; (8015c20 <tcp_receive+0xd04>)
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	1ad3      	subs	r3, r2, r3
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	dd12      	ble.n	8015c04 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015bde:	4b10      	ldr	r3, [pc, #64]	; (8015c20 <tcp_receive+0xd04>)
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	b29a      	uxth	r2, r3
 8015be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015be6:	68db      	ldr	r3, [r3, #12]
 8015be8:	685b      	ldr	r3, [r3, #4]
 8015bea:	b29b      	uxth	r3, r3
 8015bec:	1ad3      	subs	r3, r2, r3
 8015bee:	b29a      	uxth	r2, r3
 8015bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bf2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bf6:	685a      	ldr	r2, [r3, #4]
 8015bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bfa:	891b      	ldrh	r3, [r3, #8]
 8015bfc:	4619      	mov	r1, r3
 8015bfe:	4610      	mov	r0, r2
 8015c00:	f7fb ff26 	bl	8011a50 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c06:	69fa      	ldr	r2, [r7, #28]
 8015c08:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015c0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015c0c:	69f8      	ldr	r0, [r7, #28]
 8015c0e:	f7ff f881 	bl	8014d14 <tcp_oos_insert_segment>
                  }
                  break;
 8015c12:	e0e2      	b.n	8015dda <tcp_receive+0xebe>
 8015c14:	20008660 	.word	0x20008660
 8015c18:	2000865d 	.word	0x2000865d
 8015c1c:	20008630 	.word	0x20008630
 8015c20:	20008650 	.word	0x20008650
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c26:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	f040 80c6 	bne.w	8015dbe <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015c32:	4b80      	ldr	r3, [pc, #512]	; (8015e34 <tcp_receive+0xf18>)
 8015c34:	681a      	ldr	r2, [r3, #0]
 8015c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c38:	68db      	ldr	r3, [r3, #12]
 8015c3a:	685b      	ldr	r3, [r3, #4]
 8015c3c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	f340 80bd 	ble.w	8015dbe <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c46:	68db      	ldr	r3, [r3, #12]
 8015c48:	899b      	ldrh	r3, [r3, #12]
 8015c4a:	b29b      	uxth	r3, r3
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	f7fa fd28 	bl	80106a2 <lwip_htons>
 8015c52:	4603      	mov	r3, r0
 8015c54:	b2db      	uxtb	r3, r3
 8015c56:	f003 0301 	and.w	r3, r3, #1
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	f040 80bf 	bne.w	8015dde <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015c60:	4875      	ldr	r0, [pc, #468]	; (8015e38 <tcp_receive+0xf1c>)
 8015c62:	f7fd fb07 	bl	8013274 <tcp_seg_copy>
 8015c66:	4602      	mov	r2, r0
 8015c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c6a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	f000 80b6 	beq.w	8015de2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c78:	68db      	ldr	r3, [r3, #12]
 8015c7a:	685b      	ldr	r3, [r3, #4]
 8015c7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015c7e:	8912      	ldrh	r2, [r2, #8]
 8015c80:	441a      	add	r2, r3
 8015c82:	4b6c      	ldr	r3, [pc, #432]	; (8015e34 <tcp_receive+0xf18>)
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	1ad3      	subs	r3, r2, r3
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	dd12      	ble.n	8015cb2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015c8c:	4b69      	ldr	r3, [pc, #420]	; (8015e34 <tcp_receive+0xf18>)
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	b29a      	uxth	r2, r3
 8015c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c94:	68db      	ldr	r3, [r3, #12]
 8015c96:	685b      	ldr	r3, [r3, #4]
 8015c98:	b29b      	uxth	r3, r3
 8015c9a:	1ad3      	subs	r3, r2, r3
 8015c9c:	b29a      	uxth	r2, r3
 8015c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ca0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ca4:	685a      	ldr	r2, [r3, #4]
 8015ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ca8:	891b      	ldrh	r3, [r3, #8]
 8015caa:	4619      	mov	r1, r3
 8015cac:	4610      	mov	r0, r2
 8015cae:	f7fb fecf 	bl	8011a50 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015cb2:	4b62      	ldr	r3, [pc, #392]	; (8015e3c <tcp_receive+0xf20>)
 8015cb4:	881b      	ldrh	r3, [r3, #0]
 8015cb6:	461a      	mov	r2, r3
 8015cb8:	4b5e      	ldr	r3, [pc, #376]	; (8015e34 <tcp_receive+0xf18>)
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	441a      	add	r2, r3
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cc2:	6879      	ldr	r1, [r7, #4]
 8015cc4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015cc6:	440b      	add	r3, r1
 8015cc8:	1ad3      	subs	r3, r2, r3
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	f340 8089 	ble.w	8015de2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	68db      	ldr	r3, [r3, #12]
 8015cd6:	899b      	ldrh	r3, [r3, #12]
 8015cd8:	b29b      	uxth	r3, r3
 8015cda:	4618      	mov	r0, r3
 8015cdc:	f7fa fce1 	bl	80106a2 <lwip_htons>
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	b2db      	uxtb	r3, r3
 8015ce4:	f003 0301 	and.w	r3, r3, #1
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d022      	beq.n	8015d32 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	68db      	ldr	r3, [r3, #12]
 8015cf2:	899b      	ldrh	r3, [r3, #12]
 8015cf4:	b29b      	uxth	r3, r3
 8015cf6:	b21b      	sxth	r3, r3
 8015cf8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015cfc:	b21c      	sxth	r4, r3
 8015cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	68db      	ldr	r3, [r3, #12]
 8015d04:	899b      	ldrh	r3, [r3, #12]
 8015d06:	b29b      	uxth	r3, r3
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7fa fcca 	bl	80106a2 <lwip_htons>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	b2db      	uxtb	r3, r3
 8015d12:	b29b      	uxth	r3, r3
 8015d14:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015d18:	b29b      	uxth	r3, r3
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7fa fcc1 	bl	80106a2 <lwip_htons>
 8015d20:	4603      	mov	r3, r0
 8015d22:	b21b      	sxth	r3, r3
 8015d24:	4323      	orrs	r3, r4
 8015d26:	b21a      	sxth	r2, r3
 8015d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	68db      	ldr	r3, [r3, #12]
 8015d2e:	b292      	uxth	r2, r2
 8015d30:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d36:	b29a      	uxth	r2, r3
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d3c:	4413      	add	r3, r2
 8015d3e:	b299      	uxth	r1, r3
 8015d40:	4b3c      	ldr	r3, [pc, #240]	; (8015e34 <tcp_receive+0xf18>)
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	b29a      	uxth	r2, r3
 8015d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	1a8a      	subs	r2, r1, r2
 8015d4c:	b292      	uxth	r2, r2
 8015d4e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	685a      	ldr	r2, [r3, #4]
 8015d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	891b      	ldrh	r3, [r3, #8]
 8015d5c:	4619      	mov	r1, r3
 8015d5e:	4610      	mov	r0, r2
 8015d60:	f7fb fe76 	bl	8011a50 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	891c      	ldrh	r4, [r3, #8]
 8015d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	68db      	ldr	r3, [r3, #12]
 8015d70:	899b      	ldrh	r3, [r3, #12]
 8015d72:	b29b      	uxth	r3, r3
 8015d74:	4618      	mov	r0, r3
 8015d76:	f7fa fc94 	bl	80106a2 <lwip_htons>
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	b2db      	uxtb	r3, r3
 8015d7e:	f003 0303 	and.w	r3, r3, #3
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d001      	beq.n	8015d8a <tcp_receive+0xe6e>
 8015d86:	2301      	movs	r3, #1
 8015d88:	e000      	b.n	8015d8c <tcp_receive+0xe70>
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	4423      	add	r3, r4
 8015d8e:	b29a      	uxth	r2, r3
 8015d90:	4b2a      	ldr	r3, [pc, #168]	; (8015e3c <tcp_receive+0xf20>)
 8015d92:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015d94:	4b29      	ldr	r3, [pc, #164]	; (8015e3c <tcp_receive+0xf20>)
 8015d96:	881b      	ldrh	r3, [r3, #0]
 8015d98:	461a      	mov	r2, r3
 8015d9a:	4b26      	ldr	r3, [pc, #152]	; (8015e34 <tcp_receive+0xf18>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	441a      	add	r2, r3
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015da4:	6879      	ldr	r1, [r7, #4]
 8015da6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015da8:	440b      	add	r3, r1
 8015daa:	429a      	cmp	r2, r3
 8015dac:	d019      	beq.n	8015de2 <tcp_receive+0xec6>
 8015dae:	4b24      	ldr	r3, [pc, #144]	; (8015e40 <tcp_receive+0xf24>)
 8015db0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015db4:	4923      	ldr	r1, [pc, #140]	; (8015e44 <tcp_receive+0xf28>)
 8015db6:	4824      	ldr	r0, [pc, #144]	; (8015e48 <tcp_receive+0xf2c>)
 8015db8:	f005 f954 	bl	801b064 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015dbc:	e011      	b.n	8015de2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8015dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	f47f aea4 	bne.w	8015b14 <tcp_receive+0xbf8>
 8015dcc:	e00a      	b.n	8015de4 <tcp_receive+0xec8>
                break;
 8015dce:	bf00      	nop
 8015dd0:	e008      	b.n	8015de4 <tcp_receive+0xec8>
                break;
 8015dd2:	bf00      	nop
 8015dd4:	e006      	b.n	8015de4 <tcp_receive+0xec8>
                  break;
 8015dd6:	bf00      	nop
 8015dd8:	e004      	b.n	8015de4 <tcp_receive+0xec8>
                  break;
 8015dda:	bf00      	nop
 8015ddc:	e002      	b.n	8015de4 <tcp_receive+0xec8>
                  break;
 8015dde:	bf00      	nop
 8015de0:	e000      	b.n	8015de4 <tcp_receive+0xec8>
                break;
 8015de2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015de4:	6878      	ldr	r0, [r7, #4]
 8015de6:	f001 fa31 	bl	801724c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015dea:	e003      	b.n	8015df4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015dec:	6878      	ldr	r0, [r7, #4]
 8015dee:	f001 fa2d 	bl	801724c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015df2:	e01a      	b.n	8015e2a <tcp_receive+0xf0e>
 8015df4:	e019      	b.n	8015e2a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015df6:	4b0f      	ldr	r3, [pc, #60]	; (8015e34 <tcp_receive+0xf18>)
 8015df8:	681a      	ldr	r2, [r3, #0]
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dfe:	1ad3      	subs	r3, r2, r3
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	db0a      	blt.n	8015e1a <tcp_receive+0xefe>
 8015e04:	4b0b      	ldr	r3, [pc, #44]	; (8015e34 <tcp_receive+0xf18>)
 8015e06:	681a      	ldr	r2, [r3, #0]
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e0c:	6879      	ldr	r1, [r7, #4]
 8015e0e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015e10:	440b      	add	r3, r1
 8015e12:	1ad3      	subs	r3, r2, r3
 8015e14:	3301      	adds	r3, #1
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	dd07      	ble.n	8015e2a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	8b5b      	ldrh	r3, [r3, #26]
 8015e1e:	f043 0302 	orr.w	r3, r3, #2
 8015e22:	b29a      	uxth	r2, r3
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015e28:	e7ff      	b.n	8015e2a <tcp_receive+0xf0e>
 8015e2a:	bf00      	nop
 8015e2c:	3750      	adds	r7, #80	; 0x50
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	bdb0      	pop	{r4, r5, r7, pc}
 8015e32:	bf00      	nop
 8015e34:	20008650 	.word	0x20008650
 8015e38:	20008630 	.word	0x20008630
 8015e3c:	2000865a 	.word	0x2000865a
 8015e40:	0801d138 	.word	0x0801d138
 8015e44:	0801d4e0 	.word	0x0801d4e0
 8015e48:	0801d184 	.word	0x0801d184

08015e4c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015e4c:	b480      	push	{r7}
 8015e4e:	b083      	sub	sp, #12
 8015e50:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015e52:	4b15      	ldr	r3, [pc, #84]	; (8015ea8 <tcp_get_next_optbyte+0x5c>)
 8015e54:	881b      	ldrh	r3, [r3, #0]
 8015e56:	1c5a      	adds	r2, r3, #1
 8015e58:	b291      	uxth	r1, r2
 8015e5a:	4a13      	ldr	r2, [pc, #76]	; (8015ea8 <tcp_get_next_optbyte+0x5c>)
 8015e5c:	8011      	strh	r1, [r2, #0]
 8015e5e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015e60:	4b12      	ldr	r3, [pc, #72]	; (8015eac <tcp_get_next_optbyte+0x60>)
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d004      	beq.n	8015e72 <tcp_get_next_optbyte+0x26>
 8015e68:	4b11      	ldr	r3, [pc, #68]	; (8015eb0 <tcp_get_next_optbyte+0x64>)
 8015e6a:	881b      	ldrh	r3, [r3, #0]
 8015e6c:	88fa      	ldrh	r2, [r7, #6]
 8015e6e:	429a      	cmp	r2, r3
 8015e70:	d208      	bcs.n	8015e84 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015e72:	4b10      	ldr	r3, [pc, #64]	; (8015eb4 <tcp_get_next_optbyte+0x68>)
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	3314      	adds	r3, #20
 8015e78:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015e7a:	88fb      	ldrh	r3, [r7, #6]
 8015e7c:	683a      	ldr	r2, [r7, #0]
 8015e7e:	4413      	add	r3, r2
 8015e80:	781b      	ldrb	r3, [r3, #0]
 8015e82:	e00b      	b.n	8015e9c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015e84:	88fb      	ldrh	r3, [r7, #6]
 8015e86:	b2da      	uxtb	r2, r3
 8015e88:	4b09      	ldr	r3, [pc, #36]	; (8015eb0 <tcp_get_next_optbyte+0x64>)
 8015e8a:	881b      	ldrh	r3, [r3, #0]
 8015e8c:	b2db      	uxtb	r3, r3
 8015e8e:	1ad3      	subs	r3, r2, r3
 8015e90:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015e92:	4b06      	ldr	r3, [pc, #24]	; (8015eac <tcp_get_next_optbyte+0x60>)
 8015e94:	681a      	ldr	r2, [r3, #0]
 8015e96:	797b      	ldrb	r3, [r7, #5]
 8015e98:	4413      	add	r3, r2
 8015e9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	370c      	adds	r7, #12
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea6:	4770      	bx	lr
 8015ea8:	2000864c 	.word	0x2000864c
 8015eac:	20008648 	.word	0x20008648
 8015eb0:	20008646 	.word	0x20008646
 8015eb4:	20008640 	.word	0x20008640

08015eb8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b084      	sub	sp, #16
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d106      	bne.n	8015ed4 <tcp_parseopt+0x1c>
 8015ec6:	4b32      	ldr	r3, [pc, #200]	; (8015f90 <tcp_parseopt+0xd8>)
 8015ec8:	f240 727d 	movw	r2, #1917	; 0x77d
 8015ecc:	4931      	ldr	r1, [pc, #196]	; (8015f94 <tcp_parseopt+0xdc>)
 8015ece:	4832      	ldr	r0, [pc, #200]	; (8015f98 <tcp_parseopt+0xe0>)
 8015ed0:	f005 f8c8 	bl	801b064 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015ed4:	4b31      	ldr	r3, [pc, #196]	; (8015f9c <tcp_parseopt+0xe4>)
 8015ed6:	881b      	ldrh	r3, [r3, #0]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d055      	beq.n	8015f88 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015edc:	4b30      	ldr	r3, [pc, #192]	; (8015fa0 <tcp_parseopt+0xe8>)
 8015ede:	2200      	movs	r2, #0
 8015ee0:	801a      	strh	r2, [r3, #0]
 8015ee2:	e045      	b.n	8015f70 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8015ee4:	f7ff ffb2 	bl	8015e4c <tcp_get_next_optbyte>
 8015ee8:	4603      	mov	r3, r0
 8015eea:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015eec:	7bfb      	ldrb	r3, [r7, #15]
 8015eee:	2b02      	cmp	r3, #2
 8015ef0:	d006      	beq.n	8015f00 <tcp_parseopt+0x48>
 8015ef2:	2b02      	cmp	r3, #2
 8015ef4:	dc2b      	bgt.n	8015f4e <tcp_parseopt+0x96>
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d041      	beq.n	8015f7e <tcp_parseopt+0xc6>
 8015efa:	2b01      	cmp	r3, #1
 8015efc:	d127      	bne.n	8015f4e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015efe:	e037      	b.n	8015f70 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015f00:	f7ff ffa4 	bl	8015e4c <tcp_get_next_optbyte>
 8015f04:	4603      	mov	r3, r0
 8015f06:	2b04      	cmp	r3, #4
 8015f08:	d13b      	bne.n	8015f82 <tcp_parseopt+0xca>
 8015f0a:	4b25      	ldr	r3, [pc, #148]	; (8015fa0 <tcp_parseopt+0xe8>)
 8015f0c:	881b      	ldrh	r3, [r3, #0]
 8015f0e:	3301      	adds	r3, #1
 8015f10:	4a22      	ldr	r2, [pc, #136]	; (8015f9c <tcp_parseopt+0xe4>)
 8015f12:	8812      	ldrh	r2, [r2, #0]
 8015f14:	4293      	cmp	r3, r2
 8015f16:	da34      	bge.n	8015f82 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015f18:	f7ff ff98 	bl	8015e4c <tcp_get_next_optbyte>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	b29b      	uxth	r3, r3
 8015f20:	021b      	lsls	r3, r3, #8
 8015f22:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015f24:	f7ff ff92 	bl	8015e4c <tcp_get_next_optbyte>
 8015f28:	4603      	mov	r3, r0
 8015f2a:	b29a      	uxth	r2, r3
 8015f2c:	89bb      	ldrh	r3, [r7, #12]
 8015f2e:	4313      	orrs	r3, r2
 8015f30:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015f32:	89bb      	ldrh	r3, [r7, #12]
 8015f34:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8015f38:	d804      	bhi.n	8015f44 <tcp_parseopt+0x8c>
 8015f3a:	89bb      	ldrh	r3, [r7, #12]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d001      	beq.n	8015f44 <tcp_parseopt+0x8c>
 8015f40:	89ba      	ldrh	r2, [r7, #12]
 8015f42:	e001      	b.n	8015f48 <tcp_parseopt+0x90>
 8015f44:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015f4c:	e010      	b.n	8015f70 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015f4e:	f7ff ff7d 	bl	8015e4c <tcp_get_next_optbyte>
 8015f52:	4603      	mov	r3, r0
 8015f54:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015f56:	7afb      	ldrb	r3, [r7, #11]
 8015f58:	2b01      	cmp	r3, #1
 8015f5a:	d914      	bls.n	8015f86 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015f5c:	7afb      	ldrb	r3, [r7, #11]
 8015f5e:	b29a      	uxth	r2, r3
 8015f60:	4b0f      	ldr	r3, [pc, #60]	; (8015fa0 <tcp_parseopt+0xe8>)
 8015f62:	881b      	ldrh	r3, [r3, #0]
 8015f64:	4413      	add	r3, r2
 8015f66:	b29b      	uxth	r3, r3
 8015f68:	3b02      	subs	r3, #2
 8015f6a:	b29a      	uxth	r2, r3
 8015f6c:	4b0c      	ldr	r3, [pc, #48]	; (8015fa0 <tcp_parseopt+0xe8>)
 8015f6e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015f70:	4b0b      	ldr	r3, [pc, #44]	; (8015fa0 <tcp_parseopt+0xe8>)
 8015f72:	881a      	ldrh	r2, [r3, #0]
 8015f74:	4b09      	ldr	r3, [pc, #36]	; (8015f9c <tcp_parseopt+0xe4>)
 8015f76:	881b      	ldrh	r3, [r3, #0]
 8015f78:	429a      	cmp	r2, r3
 8015f7a:	d3b3      	bcc.n	8015ee4 <tcp_parseopt+0x2c>
 8015f7c:	e004      	b.n	8015f88 <tcp_parseopt+0xd0>
          return;
 8015f7e:	bf00      	nop
 8015f80:	e002      	b.n	8015f88 <tcp_parseopt+0xd0>
            return;
 8015f82:	bf00      	nop
 8015f84:	e000      	b.n	8015f88 <tcp_parseopt+0xd0>
            return;
 8015f86:	bf00      	nop
      }
    }
  }
}
 8015f88:	3710      	adds	r7, #16
 8015f8a:	46bd      	mov	sp, r7
 8015f8c:	bd80      	pop	{r7, pc}
 8015f8e:	bf00      	nop
 8015f90:	0801d138 	.word	0x0801d138
 8015f94:	0801d59c 	.word	0x0801d59c
 8015f98:	0801d184 	.word	0x0801d184
 8015f9c:	20008644 	.word	0x20008644
 8015fa0:	2000864c 	.word	0x2000864c

08015fa4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015fa4:	b480      	push	{r7}
 8015fa6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015fa8:	4b05      	ldr	r3, [pc, #20]	; (8015fc0 <tcp_trigger_input_pcb_close+0x1c>)
 8015faa:	781b      	ldrb	r3, [r3, #0]
 8015fac:	f043 0310 	orr.w	r3, r3, #16
 8015fb0:	b2da      	uxtb	r2, r3
 8015fb2:	4b03      	ldr	r3, [pc, #12]	; (8015fc0 <tcp_trigger_input_pcb_close+0x1c>)
 8015fb4:	701a      	strb	r2, [r3, #0]
}
 8015fb6:	bf00      	nop
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fbe:	4770      	bx	lr
 8015fc0:	2000865d 	.word	0x2000865d

08015fc4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b084      	sub	sp, #16
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	60f8      	str	r0, [r7, #12]
 8015fcc:	60b9      	str	r1, [r7, #8]
 8015fce:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d00a      	beq.n	8015fec <tcp_route+0x28>
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	7a1b      	ldrb	r3, [r3, #8]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d006      	beq.n	8015fec <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	7a1b      	ldrb	r3, [r3, #8]
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	f7fb fb5a 	bl	801169c <netif_get_by_index>
 8015fe8:	4603      	mov	r3, r0
 8015fea:	e003      	b.n	8015ff4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015fec:	6878      	ldr	r0, [r7, #4]
 8015fee:	f002 fe7b 	bl	8018ce8 <ip4_route>
 8015ff2:	4603      	mov	r3, r0
  }
}
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	3710      	adds	r7, #16
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	bd80      	pop	{r7, pc}

08015ffc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015ffc:	b590      	push	{r4, r7, lr}
 8015ffe:	b087      	sub	sp, #28
 8016000:	af00      	add	r7, sp, #0
 8016002:	60f8      	str	r0, [r7, #12]
 8016004:	60b9      	str	r1, [r7, #8]
 8016006:	603b      	str	r3, [r7, #0]
 8016008:	4613      	mov	r3, r2
 801600a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d105      	bne.n	801601e <tcp_create_segment+0x22>
 8016012:	4b44      	ldr	r3, [pc, #272]	; (8016124 <tcp_create_segment+0x128>)
 8016014:	22a3      	movs	r2, #163	; 0xa3
 8016016:	4944      	ldr	r1, [pc, #272]	; (8016128 <tcp_create_segment+0x12c>)
 8016018:	4844      	ldr	r0, [pc, #272]	; (801612c <tcp_create_segment+0x130>)
 801601a:	f005 f823 	bl	801b064 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801601e:	68bb      	ldr	r3, [r7, #8]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d105      	bne.n	8016030 <tcp_create_segment+0x34>
 8016024:	4b3f      	ldr	r3, [pc, #252]	; (8016124 <tcp_create_segment+0x128>)
 8016026:	22a4      	movs	r2, #164	; 0xa4
 8016028:	4941      	ldr	r1, [pc, #260]	; (8016130 <tcp_create_segment+0x134>)
 801602a:	4840      	ldr	r0, [pc, #256]	; (801612c <tcp_create_segment+0x130>)
 801602c:	f005 f81a 	bl	801b064 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016030:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016034:	009b      	lsls	r3, r3, #2
 8016036:	b2db      	uxtb	r3, r3
 8016038:	f003 0304 	and.w	r3, r3, #4
 801603c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801603e:	2003      	movs	r0, #3
 8016040:	f7fa ffa6 	bl	8010f90 <memp_malloc>
 8016044:	6138      	str	r0, [r7, #16]
 8016046:	693b      	ldr	r3, [r7, #16]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d104      	bne.n	8016056 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801604c:	68b8      	ldr	r0, [r7, #8]
 801604e:	f7fb fe85 	bl	8011d5c <pbuf_free>
    return NULL;
 8016052:	2300      	movs	r3, #0
 8016054:	e061      	b.n	801611a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8016056:	693b      	ldr	r3, [r7, #16]
 8016058:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801605c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801605e:	693b      	ldr	r3, [r7, #16]
 8016060:	2200      	movs	r2, #0
 8016062:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016064:	693b      	ldr	r3, [r7, #16]
 8016066:	68ba      	ldr	r2, [r7, #8]
 8016068:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801606a:	68bb      	ldr	r3, [r7, #8]
 801606c:	891a      	ldrh	r2, [r3, #8]
 801606e:	7dfb      	ldrb	r3, [r7, #23]
 8016070:	b29b      	uxth	r3, r3
 8016072:	429a      	cmp	r2, r3
 8016074:	d205      	bcs.n	8016082 <tcp_create_segment+0x86>
 8016076:	4b2b      	ldr	r3, [pc, #172]	; (8016124 <tcp_create_segment+0x128>)
 8016078:	22b0      	movs	r2, #176	; 0xb0
 801607a:	492e      	ldr	r1, [pc, #184]	; (8016134 <tcp_create_segment+0x138>)
 801607c:	482b      	ldr	r0, [pc, #172]	; (801612c <tcp_create_segment+0x130>)
 801607e:	f004 fff1 	bl	801b064 <iprintf>
  seg->len = p->tot_len - optlen;
 8016082:	68bb      	ldr	r3, [r7, #8]
 8016084:	891a      	ldrh	r2, [r3, #8]
 8016086:	7dfb      	ldrb	r3, [r7, #23]
 8016088:	b29b      	uxth	r3, r3
 801608a:	1ad3      	subs	r3, r2, r3
 801608c:	b29a      	uxth	r2, r3
 801608e:	693b      	ldr	r3, [r7, #16]
 8016090:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016092:	2114      	movs	r1, #20
 8016094:	68b8      	ldr	r0, [r7, #8]
 8016096:	f7fb fdcb 	bl	8011c30 <pbuf_add_header>
 801609a:	4603      	mov	r3, r0
 801609c:	2b00      	cmp	r3, #0
 801609e:	d004      	beq.n	80160aa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80160a0:	6938      	ldr	r0, [r7, #16]
 80160a2:	f7fd f8ce 	bl	8013242 <tcp_seg_free>
    return NULL;
 80160a6:	2300      	movs	r3, #0
 80160a8:	e037      	b.n	801611a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80160aa:	693b      	ldr	r3, [r7, #16]
 80160ac:	685b      	ldr	r3, [r3, #4]
 80160ae:	685a      	ldr	r2, [r3, #4]
 80160b0:	693b      	ldr	r3, [r7, #16]
 80160b2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	8ada      	ldrh	r2, [r3, #22]
 80160b8:	693b      	ldr	r3, [r7, #16]
 80160ba:	68dc      	ldr	r4, [r3, #12]
 80160bc:	4610      	mov	r0, r2
 80160be:	f7fa faf0 	bl	80106a2 <lwip_htons>
 80160c2:	4603      	mov	r3, r0
 80160c4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	8b1a      	ldrh	r2, [r3, #24]
 80160ca:	693b      	ldr	r3, [r7, #16]
 80160cc:	68dc      	ldr	r4, [r3, #12]
 80160ce:	4610      	mov	r0, r2
 80160d0:	f7fa fae7 	bl	80106a2 <lwip_htons>
 80160d4:	4603      	mov	r3, r0
 80160d6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80160d8:	693b      	ldr	r3, [r7, #16]
 80160da:	68dc      	ldr	r4, [r3, #12]
 80160dc:	6838      	ldr	r0, [r7, #0]
 80160de:	f7fa faf5 	bl	80106cc <lwip_htonl>
 80160e2:	4603      	mov	r3, r0
 80160e4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80160e6:	7dfb      	ldrb	r3, [r7, #23]
 80160e8:	089b      	lsrs	r3, r3, #2
 80160ea:	b2db      	uxtb	r3, r3
 80160ec:	b29b      	uxth	r3, r3
 80160ee:	3305      	adds	r3, #5
 80160f0:	b29b      	uxth	r3, r3
 80160f2:	031b      	lsls	r3, r3, #12
 80160f4:	b29a      	uxth	r2, r3
 80160f6:	79fb      	ldrb	r3, [r7, #7]
 80160f8:	b29b      	uxth	r3, r3
 80160fa:	4313      	orrs	r3, r2
 80160fc:	b29a      	uxth	r2, r3
 80160fe:	693b      	ldr	r3, [r7, #16]
 8016100:	68dc      	ldr	r4, [r3, #12]
 8016102:	4610      	mov	r0, r2
 8016104:	f7fa facd 	bl	80106a2 <lwip_htons>
 8016108:	4603      	mov	r3, r0
 801610a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801610c:	693b      	ldr	r3, [r7, #16]
 801610e:	68db      	ldr	r3, [r3, #12]
 8016110:	2200      	movs	r2, #0
 8016112:	749a      	strb	r2, [r3, #18]
 8016114:	2200      	movs	r2, #0
 8016116:	74da      	strb	r2, [r3, #19]
  return seg;
 8016118:	693b      	ldr	r3, [r7, #16]
}
 801611a:	4618      	mov	r0, r3
 801611c:	371c      	adds	r7, #28
 801611e:	46bd      	mov	sp, r7
 8016120:	bd90      	pop	{r4, r7, pc}
 8016122:	bf00      	nop
 8016124:	0801d5b8 	.word	0x0801d5b8
 8016128:	0801d5ec 	.word	0x0801d5ec
 801612c:	0801d60c 	.word	0x0801d60c
 8016130:	0801d634 	.word	0x0801d634
 8016134:	0801d658 	.word	0x0801d658

08016138 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016138:	b590      	push	{r4, r7, lr}
 801613a:	b08b      	sub	sp, #44	; 0x2c
 801613c:	af02      	add	r7, sp, #8
 801613e:	6078      	str	r0, [r7, #4]
 8016140:	460b      	mov	r3, r1
 8016142:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016144:	2300      	movs	r3, #0
 8016146:	61fb      	str	r3, [r7, #28]
 8016148:	2300      	movs	r3, #0
 801614a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801614c:	2300      	movs	r3, #0
 801614e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d106      	bne.n	8016164 <tcp_split_unsent_seg+0x2c>
 8016156:	4b95      	ldr	r3, [pc, #596]	; (80163ac <tcp_split_unsent_seg+0x274>)
 8016158:	f240 324b 	movw	r2, #843	; 0x34b
 801615c:	4994      	ldr	r1, [pc, #592]	; (80163b0 <tcp_split_unsent_seg+0x278>)
 801615e:	4895      	ldr	r0, [pc, #596]	; (80163b4 <tcp_split_unsent_seg+0x27c>)
 8016160:	f004 ff80 	bl	801b064 <iprintf>

  useg = pcb->unsent;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016168:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801616a:	697b      	ldr	r3, [r7, #20]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d102      	bne.n	8016176 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016170:	f04f 33ff 	mov.w	r3, #4294967295
 8016174:	e116      	b.n	80163a4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016176:	887b      	ldrh	r3, [r7, #2]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d109      	bne.n	8016190 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801617c:	4b8b      	ldr	r3, [pc, #556]	; (80163ac <tcp_split_unsent_seg+0x274>)
 801617e:	f240 3253 	movw	r2, #851	; 0x353
 8016182:	498d      	ldr	r1, [pc, #564]	; (80163b8 <tcp_split_unsent_seg+0x280>)
 8016184:	488b      	ldr	r0, [pc, #556]	; (80163b4 <tcp_split_unsent_seg+0x27c>)
 8016186:	f004 ff6d 	bl	801b064 <iprintf>
    return ERR_VAL;
 801618a:	f06f 0305 	mvn.w	r3, #5
 801618e:	e109      	b.n	80163a4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016190:	697b      	ldr	r3, [r7, #20]
 8016192:	891b      	ldrh	r3, [r3, #8]
 8016194:	887a      	ldrh	r2, [r7, #2]
 8016196:	429a      	cmp	r2, r3
 8016198:	d301      	bcc.n	801619e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801619a:	2300      	movs	r3, #0
 801619c:	e102      	b.n	80163a4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80161a2:	887a      	ldrh	r2, [r7, #2]
 80161a4:	429a      	cmp	r2, r3
 80161a6:	d906      	bls.n	80161b6 <tcp_split_unsent_seg+0x7e>
 80161a8:	4b80      	ldr	r3, [pc, #512]	; (80163ac <tcp_split_unsent_seg+0x274>)
 80161aa:	f240 325b 	movw	r2, #859	; 0x35b
 80161ae:	4983      	ldr	r1, [pc, #524]	; (80163bc <tcp_split_unsent_seg+0x284>)
 80161b0:	4880      	ldr	r0, [pc, #512]	; (80163b4 <tcp_split_unsent_seg+0x27c>)
 80161b2:	f004 ff57 	bl	801b064 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80161b6:	697b      	ldr	r3, [r7, #20]
 80161b8:	891b      	ldrh	r3, [r3, #8]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d106      	bne.n	80161cc <tcp_split_unsent_seg+0x94>
 80161be:	4b7b      	ldr	r3, [pc, #492]	; (80163ac <tcp_split_unsent_seg+0x274>)
 80161c0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80161c4:	497e      	ldr	r1, [pc, #504]	; (80163c0 <tcp_split_unsent_seg+0x288>)
 80161c6:	487b      	ldr	r0, [pc, #492]	; (80163b4 <tcp_split_unsent_seg+0x27c>)
 80161c8:	f004 ff4c 	bl	801b064 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80161cc:	697b      	ldr	r3, [r7, #20]
 80161ce:	7a9b      	ldrb	r3, [r3, #10]
 80161d0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80161d2:	7bfb      	ldrb	r3, [r7, #15]
 80161d4:	009b      	lsls	r3, r3, #2
 80161d6:	b2db      	uxtb	r3, r3
 80161d8:	f003 0304 	and.w	r3, r3, #4
 80161dc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80161de:	697b      	ldr	r3, [r7, #20]
 80161e0:	891a      	ldrh	r2, [r3, #8]
 80161e2:	887b      	ldrh	r3, [r7, #2]
 80161e4:	1ad3      	subs	r3, r2, r3
 80161e6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80161e8:	7bbb      	ldrb	r3, [r7, #14]
 80161ea:	b29a      	uxth	r2, r3
 80161ec:	89bb      	ldrh	r3, [r7, #12]
 80161ee:	4413      	add	r3, r2
 80161f0:	b29b      	uxth	r3, r3
 80161f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80161f6:	4619      	mov	r1, r3
 80161f8:	2036      	movs	r0, #54	; 0x36
 80161fa:	f7fb facb 	bl	8011794 <pbuf_alloc>
 80161fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016200:	693b      	ldr	r3, [r7, #16]
 8016202:	2b00      	cmp	r3, #0
 8016204:	f000 80b7 	beq.w	8016376 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016208:	697b      	ldr	r3, [r7, #20]
 801620a:	685b      	ldr	r3, [r3, #4]
 801620c:	891a      	ldrh	r2, [r3, #8]
 801620e:	697b      	ldr	r3, [r7, #20]
 8016210:	891b      	ldrh	r3, [r3, #8]
 8016212:	1ad3      	subs	r3, r2, r3
 8016214:	b29a      	uxth	r2, r3
 8016216:	887b      	ldrh	r3, [r7, #2]
 8016218:	4413      	add	r3, r2
 801621a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801621c:	697b      	ldr	r3, [r7, #20]
 801621e:	6858      	ldr	r0, [r3, #4]
 8016220:	693b      	ldr	r3, [r7, #16]
 8016222:	685a      	ldr	r2, [r3, #4]
 8016224:	7bbb      	ldrb	r3, [r7, #14]
 8016226:	18d1      	adds	r1, r2, r3
 8016228:	897b      	ldrh	r3, [r7, #10]
 801622a:	89ba      	ldrh	r2, [r7, #12]
 801622c:	f7fb ff80 	bl	8012130 <pbuf_copy_partial>
 8016230:	4603      	mov	r3, r0
 8016232:	461a      	mov	r2, r3
 8016234:	89bb      	ldrh	r3, [r7, #12]
 8016236:	4293      	cmp	r3, r2
 8016238:	f040 809f 	bne.w	801637a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801623c:	697b      	ldr	r3, [r7, #20]
 801623e:	68db      	ldr	r3, [r3, #12]
 8016240:	899b      	ldrh	r3, [r3, #12]
 8016242:	b29b      	uxth	r3, r3
 8016244:	4618      	mov	r0, r3
 8016246:	f7fa fa2c 	bl	80106a2 <lwip_htons>
 801624a:	4603      	mov	r3, r0
 801624c:	b2db      	uxtb	r3, r3
 801624e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016252:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016254:	2300      	movs	r3, #0
 8016256:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016258:	7efb      	ldrb	r3, [r7, #27]
 801625a:	f003 0308 	and.w	r3, r3, #8
 801625e:	2b00      	cmp	r3, #0
 8016260:	d007      	beq.n	8016272 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016262:	7efb      	ldrb	r3, [r7, #27]
 8016264:	f023 0308 	bic.w	r3, r3, #8
 8016268:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801626a:	7ebb      	ldrb	r3, [r7, #26]
 801626c:	f043 0308 	orr.w	r3, r3, #8
 8016270:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016272:	7efb      	ldrb	r3, [r7, #27]
 8016274:	f003 0301 	and.w	r3, r3, #1
 8016278:	2b00      	cmp	r3, #0
 801627a:	d007      	beq.n	801628c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801627c:	7efb      	ldrb	r3, [r7, #27]
 801627e:	f023 0301 	bic.w	r3, r3, #1
 8016282:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016284:	7ebb      	ldrb	r3, [r7, #26]
 8016286:	f043 0301 	orr.w	r3, r3, #1
 801628a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801628c:	697b      	ldr	r3, [r7, #20]
 801628e:	68db      	ldr	r3, [r3, #12]
 8016290:	685b      	ldr	r3, [r3, #4]
 8016292:	4618      	mov	r0, r3
 8016294:	f7fa fa1a 	bl	80106cc <lwip_htonl>
 8016298:	4602      	mov	r2, r0
 801629a:	887b      	ldrh	r3, [r7, #2]
 801629c:	18d1      	adds	r1, r2, r3
 801629e:	7eba      	ldrb	r2, [r7, #26]
 80162a0:	7bfb      	ldrb	r3, [r7, #15]
 80162a2:	9300      	str	r3, [sp, #0]
 80162a4:	460b      	mov	r3, r1
 80162a6:	6939      	ldr	r1, [r7, #16]
 80162a8:	6878      	ldr	r0, [r7, #4]
 80162aa:	f7ff fea7 	bl	8015ffc <tcp_create_segment>
 80162ae:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80162b0:	69fb      	ldr	r3, [r7, #28]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d063      	beq.n	801637e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80162b6:	697b      	ldr	r3, [r7, #20]
 80162b8:	685b      	ldr	r3, [r3, #4]
 80162ba:	4618      	mov	r0, r3
 80162bc:	f7fb fdd6 	bl	8011e6c <pbuf_clen>
 80162c0:	4603      	mov	r3, r0
 80162c2:	461a      	mov	r2, r3
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80162ca:	1a9b      	subs	r3, r3, r2
 80162cc:	b29a      	uxth	r2, r3
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80162d4:	697b      	ldr	r3, [r7, #20]
 80162d6:	6858      	ldr	r0, [r3, #4]
 80162d8:	697b      	ldr	r3, [r7, #20]
 80162da:	685b      	ldr	r3, [r3, #4]
 80162dc:	891a      	ldrh	r2, [r3, #8]
 80162de:	89bb      	ldrh	r3, [r7, #12]
 80162e0:	1ad3      	subs	r3, r2, r3
 80162e2:	b29b      	uxth	r3, r3
 80162e4:	4619      	mov	r1, r3
 80162e6:	f7fb fbb3 	bl	8011a50 <pbuf_realloc>
  useg->len -= remainder;
 80162ea:	697b      	ldr	r3, [r7, #20]
 80162ec:	891a      	ldrh	r2, [r3, #8]
 80162ee:	89bb      	ldrh	r3, [r7, #12]
 80162f0:	1ad3      	subs	r3, r2, r3
 80162f2:	b29a      	uxth	r2, r3
 80162f4:	697b      	ldr	r3, [r7, #20]
 80162f6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80162f8:	697b      	ldr	r3, [r7, #20]
 80162fa:	68db      	ldr	r3, [r3, #12]
 80162fc:	899b      	ldrh	r3, [r3, #12]
 80162fe:	b29c      	uxth	r4, r3
 8016300:	7efb      	ldrb	r3, [r7, #27]
 8016302:	b29b      	uxth	r3, r3
 8016304:	4618      	mov	r0, r3
 8016306:	f7fa f9cc 	bl	80106a2 <lwip_htons>
 801630a:	4603      	mov	r3, r0
 801630c:	461a      	mov	r2, r3
 801630e:	697b      	ldr	r3, [r7, #20]
 8016310:	68db      	ldr	r3, [r3, #12]
 8016312:	4322      	orrs	r2, r4
 8016314:	b292      	uxth	r2, r2
 8016316:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016318:	697b      	ldr	r3, [r7, #20]
 801631a:	685b      	ldr	r3, [r3, #4]
 801631c:	4618      	mov	r0, r3
 801631e:	f7fb fda5 	bl	8011e6c <pbuf_clen>
 8016322:	4603      	mov	r3, r0
 8016324:	461a      	mov	r2, r3
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801632c:	4413      	add	r3, r2
 801632e:	b29a      	uxth	r2, r3
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016336:	69fb      	ldr	r3, [r7, #28]
 8016338:	685b      	ldr	r3, [r3, #4]
 801633a:	4618      	mov	r0, r3
 801633c:	f7fb fd96 	bl	8011e6c <pbuf_clen>
 8016340:	4603      	mov	r3, r0
 8016342:	461a      	mov	r2, r3
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801634a:	4413      	add	r3, r2
 801634c:	b29a      	uxth	r2, r3
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016354:	697b      	ldr	r3, [r7, #20]
 8016356:	681a      	ldr	r2, [r3, #0]
 8016358:	69fb      	ldr	r3, [r7, #28]
 801635a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801635c:	697b      	ldr	r3, [r7, #20]
 801635e:	69fa      	ldr	r2, [r7, #28]
 8016360:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016362:	69fb      	ldr	r3, [r7, #28]
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d103      	bne.n	8016372 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	2200      	movs	r2, #0
 801636e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016372:	2300      	movs	r3, #0
 8016374:	e016      	b.n	80163a4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016376:	bf00      	nop
 8016378:	e002      	b.n	8016380 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801637a:	bf00      	nop
 801637c:	e000      	b.n	8016380 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801637e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016380:	69fb      	ldr	r3, [r7, #28]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d006      	beq.n	8016394 <tcp_split_unsent_seg+0x25c>
 8016386:	4b09      	ldr	r3, [pc, #36]	; (80163ac <tcp_split_unsent_seg+0x274>)
 8016388:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801638c:	490d      	ldr	r1, [pc, #52]	; (80163c4 <tcp_split_unsent_seg+0x28c>)
 801638e:	4809      	ldr	r0, [pc, #36]	; (80163b4 <tcp_split_unsent_seg+0x27c>)
 8016390:	f004 fe68 	bl	801b064 <iprintf>
  if (p != NULL) {
 8016394:	693b      	ldr	r3, [r7, #16]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d002      	beq.n	80163a0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801639a:	6938      	ldr	r0, [r7, #16]
 801639c:	f7fb fcde 	bl	8011d5c <pbuf_free>
  }

  return ERR_MEM;
 80163a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80163a4:	4618      	mov	r0, r3
 80163a6:	3724      	adds	r7, #36	; 0x24
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd90      	pop	{r4, r7, pc}
 80163ac:	0801d5b8 	.word	0x0801d5b8
 80163b0:	0801d94c 	.word	0x0801d94c
 80163b4:	0801d60c 	.word	0x0801d60c
 80163b8:	0801d970 	.word	0x0801d970
 80163bc:	0801d994 	.word	0x0801d994
 80163c0:	0801d9a4 	.word	0x0801d9a4
 80163c4:	0801d9b4 	.word	0x0801d9b4

080163c8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80163c8:	b590      	push	{r4, r7, lr}
 80163ca:	b085      	sub	sp, #20
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d106      	bne.n	80163e4 <tcp_send_fin+0x1c>
 80163d6:	4b21      	ldr	r3, [pc, #132]	; (801645c <tcp_send_fin+0x94>)
 80163d8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80163dc:	4920      	ldr	r1, [pc, #128]	; (8016460 <tcp_send_fin+0x98>)
 80163de:	4821      	ldr	r0, [pc, #132]	; (8016464 <tcp_send_fin+0x9c>)
 80163e0:	f004 fe40 	bl	801b064 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d02e      	beq.n	801644a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163f0:	60fb      	str	r3, [r7, #12]
 80163f2:	e002      	b.n	80163fa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d1f8      	bne.n	80163f4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	68db      	ldr	r3, [r3, #12]
 8016406:	899b      	ldrh	r3, [r3, #12]
 8016408:	b29b      	uxth	r3, r3
 801640a:	4618      	mov	r0, r3
 801640c:	f7fa f949 	bl	80106a2 <lwip_htons>
 8016410:	4603      	mov	r3, r0
 8016412:	b2db      	uxtb	r3, r3
 8016414:	f003 0307 	and.w	r3, r3, #7
 8016418:	2b00      	cmp	r3, #0
 801641a:	d116      	bne.n	801644a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	68db      	ldr	r3, [r3, #12]
 8016420:	899b      	ldrh	r3, [r3, #12]
 8016422:	b29c      	uxth	r4, r3
 8016424:	2001      	movs	r0, #1
 8016426:	f7fa f93c 	bl	80106a2 <lwip_htons>
 801642a:	4603      	mov	r3, r0
 801642c:	461a      	mov	r2, r3
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	68db      	ldr	r3, [r3, #12]
 8016432:	4322      	orrs	r2, r4
 8016434:	b292      	uxth	r2, r2
 8016436:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	8b5b      	ldrh	r3, [r3, #26]
 801643c:	f043 0320 	orr.w	r3, r3, #32
 8016440:	b29a      	uxth	r2, r3
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016446:	2300      	movs	r3, #0
 8016448:	e004      	b.n	8016454 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801644a:	2101      	movs	r1, #1
 801644c:	6878      	ldr	r0, [r7, #4]
 801644e:	f000 f80b 	bl	8016468 <tcp_enqueue_flags>
 8016452:	4603      	mov	r3, r0
}
 8016454:	4618      	mov	r0, r3
 8016456:	3714      	adds	r7, #20
 8016458:	46bd      	mov	sp, r7
 801645a:	bd90      	pop	{r4, r7, pc}
 801645c:	0801d5b8 	.word	0x0801d5b8
 8016460:	0801d9c0 	.word	0x0801d9c0
 8016464:	0801d60c 	.word	0x0801d60c

08016468 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b08a      	sub	sp, #40	; 0x28
 801646c:	af02      	add	r7, sp, #8
 801646e:	6078      	str	r0, [r7, #4]
 8016470:	460b      	mov	r3, r1
 8016472:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016474:	2300      	movs	r3, #0
 8016476:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016478:	2300      	movs	r3, #0
 801647a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801647c:	78fb      	ldrb	r3, [r7, #3]
 801647e:	f003 0303 	and.w	r3, r3, #3
 8016482:	2b00      	cmp	r3, #0
 8016484:	d106      	bne.n	8016494 <tcp_enqueue_flags+0x2c>
 8016486:	4b67      	ldr	r3, [pc, #412]	; (8016624 <tcp_enqueue_flags+0x1bc>)
 8016488:	f240 4211 	movw	r2, #1041	; 0x411
 801648c:	4966      	ldr	r1, [pc, #408]	; (8016628 <tcp_enqueue_flags+0x1c0>)
 801648e:	4867      	ldr	r0, [pc, #412]	; (801662c <tcp_enqueue_flags+0x1c4>)
 8016490:	f004 fde8 	bl	801b064 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d106      	bne.n	80164a8 <tcp_enqueue_flags+0x40>
 801649a:	4b62      	ldr	r3, [pc, #392]	; (8016624 <tcp_enqueue_flags+0x1bc>)
 801649c:	f240 4213 	movw	r2, #1043	; 0x413
 80164a0:	4963      	ldr	r1, [pc, #396]	; (8016630 <tcp_enqueue_flags+0x1c8>)
 80164a2:	4862      	ldr	r0, [pc, #392]	; (801662c <tcp_enqueue_flags+0x1c4>)
 80164a4:	f004 fdde 	bl	801b064 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80164a8:	78fb      	ldrb	r3, [r7, #3]
 80164aa:	f003 0302 	and.w	r3, r3, #2
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d001      	beq.n	80164b6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80164b2:	2301      	movs	r3, #1
 80164b4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80164b6:	7ffb      	ldrb	r3, [r7, #31]
 80164b8:	009b      	lsls	r3, r3, #2
 80164ba:	b2db      	uxtb	r3, r3
 80164bc:	f003 0304 	and.w	r3, r3, #4
 80164c0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80164c2:	7dfb      	ldrb	r3, [r7, #23]
 80164c4:	b29b      	uxth	r3, r3
 80164c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80164ca:	4619      	mov	r1, r3
 80164cc:	2036      	movs	r0, #54	; 0x36
 80164ce:	f7fb f961 	bl	8011794 <pbuf_alloc>
 80164d2:	6138      	str	r0, [r7, #16]
 80164d4:	693b      	ldr	r3, [r7, #16]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d109      	bne.n	80164ee <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	8b5b      	ldrh	r3, [r3, #26]
 80164de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80164e2:	b29a      	uxth	r2, r3
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80164e8:	f04f 33ff 	mov.w	r3, #4294967295
 80164ec:	e095      	b.n	801661a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80164ee:	693b      	ldr	r3, [r7, #16]
 80164f0:	895a      	ldrh	r2, [r3, #10]
 80164f2:	7dfb      	ldrb	r3, [r7, #23]
 80164f4:	b29b      	uxth	r3, r3
 80164f6:	429a      	cmp	r2, r3
 80164f8:	d206      	bcs.n	8016508 <tcp_enqueue_flags+0xa0>
 80164fa:	4b4a      	ldr	r3, [pc, #296]	; (8016624 <tcp_enqueue_flags+0x1bc>)
 80164fc:	f240 4239 	movw	r2, #1081	; 0x439
 8016500:	494c      	ldr	r1, [pc, #304]	; (8016634 <tcp_enqueue_flags+0x1cc>)
 8016502:	484a      	ldr	r0, [pc, #296]	; (801662c <tcp_enqueue_flags+0x1c4>)
 8016504:	f004 fdae 	bl	801b064 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801650c:	78fa      	ldrb	r2, [r7, #3]
 801650e:	7ffb      	ldrb	r3, [r7, #31]
 8016510:	9300      	str	r3, [sp, #0]
 8016512:	460b      	mov	r3, r1
 8016514:	6939      	ldr	r1, [r7, #16]
 8016516:	6878      	ldr	r0, [r7, #4]
 8016518:	f7ff fd70 	bl	8015ffc <tcp_create_segment>
 801651c:	60f8      	str	r0, [r7, #12]
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d109      	bne.n	8016538 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	8b5b      	ldrh	r3, [r3, #26]
 8016528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801652c:	b29a      	uxth	r2, r3
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016532:	f04f 33ff 	mov.w	r3, #4294967295
 8016536:	e070      	b.n	801661a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	68db      	ldr	r3, [r3, #12]
 801653c:	f003 0303 	and.w	r3, r3, #3
 8016540:	2b00      	cmp	r3, #0
 8016542:	d006      	beq.n	8016552 <tcp_enqueue_flags+0xea>
 8016544:	4b37      	ldr	r3, [pc, #220]	; (8016624 <tcp_enqueue_flags+0x1bc>)
 8016546:	f240 4242 	movw	r2, #1090	; 0x442
 801654a:	493b      	ldr	r1, [pc, #236]	; (8016638 <tcp_enqueue_flags+0x1d0>)
 801654c:	4837      	ldr	r0, [pc, #220]	; (801662c <tcp_enqueue_flags+0x1c4>)
 801654e:	f004 fd89 	bl	801b064 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	891b      	ldrh	r3, [r3, #8]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d006      	beq.n	8016568 <tcp_enqueue_flags+0x100>
 801655a:	4b32      	ldr	r3, [pc, #200]	; (8016624 <tcp_enqueue_flags+0x1bc>)
 801655c:	f240 4243 	movw	r2, #1091	; 0x443
 8016560:	4936      	ldr	r1, [pc, #216]	; (801663c <tcp_enqueue_flags+0x1d4>)
 8016562:	4832      	ldr	r0, [pc, #200]	; (801662c <tcp_enqueue_flags+0x1c4>)
 8016564:	f004 fd7e 	bl	801b064 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801656c:	2b00      	cmp	r3, #0
 801656e:	d103      	bne.n	8016578 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	68fa      	ldr	r2, [r7, #12]
 8016574:	66da      	str	r2, [r3, #108]	; 0x6c
 8016576:	e00d      	b.n	8016594 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801657c:	61bb      	str	r3, [r7, #24]
 801657e:	e002      	b.n	8016586 <tcp_enqueue_flags+0x11e>
 8016580:	69bb      	ldr	r3, [r7, #24]
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	61bb      	str	r3, [r7, #24]
 8016586:	69bb      	ldr	r3, [r7, #24]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d1f8      	bne.n	8016580 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801658e:	69bb      	ldr	r3, [r7, #24]
 8016590:	68fa      	ldr	r2, [r7, #12]
 8016592:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	2200      	movs	r2, #0
 8016598:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801659c:	78fb      	ldrb	r3, [r7, #3]
 801659e:	f003 0302 	and.w	r3, r3, #2
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d104      	bne.n	80165b0 <tcp_enqueue_flags+0x148>
 80165a6:	78fb      	ldrb	r3, [r7, #3]
 80165a8:	f003 0301 	and.w	r3, r3, #1
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d004      	beq.n	80165ba <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80165b4:	1c5a      	adds	r2, r3, #1
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80165ba:	78fb      	ldrb	r3, [r7, #3]
 80165bc:	f003 0301 	and.w	r3, r3, #1
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d006      	beq.n	80165d2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	8b5b      	ldrh	r3, [r3, #26]
 80165c8:	f043 0320 	orr.w	r3, r3, #32
 80165cc:	b29a      	uxth	r2, r3
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	685b      	ldr	r3, [r3, #4]
 80165d6:	4618      	mov	r0, r3
 80165d8:	f7fb fc48 	bl	8011e6c <pbuf_clen>
 80165dc:	4603      	mov	r3, r0
 80165de:	461a      	mov	r2, r3
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80165e6:	4413      	add	r3, r2
 80165e8:	b29a      	uxth	r2, r3
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d00e      	beq.n	8016618 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d10a      	bne.n	8016618 <tcp_enqueue_flags+0x1b0>
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016606:	2b00      	cmp	r3, #0
 8016608:	d106      	bne.n	8016618 <tcp_enqueue_flags+0x1b0>
 801660a:	4b06      	ldr	r3, [pc, #24]	; (8016624 <tcp_enqueue_flags+0x1bc>)
 801660c:	f240 4265 	movw	r2, #1125	; 0x465
 8016610:	490b      	ldr	r1, [pc, #44]	; (8016640 <tcp_enqueue_flags+0x1d8>)
 8016612:	4806      	ldr	r0, [pc, #24]	; (801662c <tcp_enqueue_flags+0x1c4>)
 8016614:	f004 fd26 	bl	801b064 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016618:	2300      	movs	r3, #0
}
 801661a:	4618      	mov	r0, r3
 801661c:	3720      	adds	r7, #32
 801661e:	46bd      	mov	sp, r7
 8016620:	bd80      	pop	{r7, pc}
 8016622:	bf00      	nop
 8016624:	0801d5b8 	.word	0x0801d5b8
 8016628:	0801d9dc 	.word	0x0801d9dc
 801662c:	0801d60c 	.word	0x0801d60c
 8016630:	0801da34 	.word	0x0801da34
 8016634:	0801da54 	.word	0x0801da54
 8016638:	0801da90 	.word	0x0801da90
 801663c:	0801daa8 	.word	0x0801daa8
 8016640:	0801dad4 	.word	0x0801dad4

08016644 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016644:	b5b0      	push	{r4, r5, r7, lr}
 8016646:	b08a      	sub	sp, #40	; 0x28
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d106      	bne.n	8016660 <tcp_output+0x1c>
 8016652:	4b8a      	ldr	r3, [pc, #552]	; (801687c <tcp_output+0x238>)
 8016654:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016658:	4989      	ldr	r1, [pc, #548]	; (8016880 <tcp_output+0x23c>)
 801665a:	488a      	ldr	r0, [pc, #552]	; (8016884 <tcp_output+0x240>)
 801665c:	f004 fd02 	bl	801b064 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	7d1b      	ldrb	r3, [r3, #20]
 8016664:	2b01      	cmp	r3, #1
 8016666:	d106      	bne.n	8016676 <tcp_output+0x32>
 8016668:	4b84      	ldr	r3, [pc, #528]	; (801687c <tcp_output+0x238>)
 801666a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801666e:	4986      	ldr	r1, [pc, #536]	; (8016888 <tcp_output+0x244>)
 8016670:	4884      	ldr	r0, [pc, #528]	; (8016884 <tcp_output+0x240>)
 8016672:	f004 fcf7 	bl	801b064 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016676:	4b85      	ldr	r3, [pc, #532]	; (801688c <tcp_output+0x248>)
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	687a      	ldr	r2, [r7, #4]
 801667c:	429a      	cmp	r2, r3
 801667e:	d101      	bne.n	8016684 <tcp_output+0x40>
    return ERR_OK;
 8016680:	2300      	movs	r3, #0
 8016682:	e1ce      	b.n	8016a22 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016690:	4293      	cmp	r3, r2
 8016692:	bf28      	it	cs
 8016694:	4613      	movcs	r3, r2
 8016696:	b29b      	uxth	r3, r3
 8016698:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801669e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80166a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d10b      	bne.n	80166be <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	8b5b      	ldrh	r3, [r3, #26]
 80166aa:	f003 0302 	and.w	r3, r3, #2
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	f000 81aa 	beq.w	8016a08 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80166b4:	6878      	ldr	r0, [r7, #4]
 80166b6:	f000 fdc9 	bl	801724c <tcp_send_empty_ack>
 80166ba:	4603      	mov	r3, r0
 80166bc:	e1b1      	b.n	8016a22 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80166be:	6879      	ldr	r1, [r7, #4]
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	3304      	adds	r3, #4
 80166c4:	461a      	mov	r2, r3
 80166c6:	6878      	ldr	r0, [r7, #4]
 80166c8:	f7ff fc7c 	bl	8015fc4 <tcp_route>
 80166cc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80166ce:	697b      	ldr	r3, [r7, #20]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d102      	bne.n	80166da <tcp_output+0x96>
    return ERR_RTE;
 80166d4:	f06f 0303 	mvn.w	r3, #3
 80166d8:	e1a3      	b.n	8016a22 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d003      	beq.n	80166e8 <tcp_output+0xa4>
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d111      	bne.n	801670c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80166e8:	697b      	ldr	r3, [r7, #20]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d002      	beq.n	80166f4 <tcp_output+0xb0>
 80166ee:	697b      	ldr	r3, [r7, #20]
 80166f0:	3304      	adds	r3, #4
 80166f2:	e000      	b.n	80166f6 <tcp_output+0xb2>
 80166f4:	2300      	movs	r3, #0
 80166f6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80166f8:	693b      	ldr	r3, [r7, #16]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d102      	bne.n	8016704 <tcp_output+0xc0>
      return ERR_RTE;
 80166fe:	f06f 0303 	mvn.w	r3, #3
 8016702:	e18e      	b.n	8016a22 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016704:	693b      	ldr	r3, [r7, #16]
 8016706:	681a      	ldr	r2, [r3, #0]
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801670e:	68db      	ldr	r3, [r3, #12]
 8016710:	685b      	ldr	r3, [r3, #4]
 8016712:	4618      	mov	r0, r3
 8016714:	f7f9 ffda 	bl	80106cc <lwip_htonl>
 8016718:	4602      	mov	r2, r0
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801671e:	1ad3      	subs	r3, r2, r3
 8016720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016722:	8912      	ldrh	r2, [r2, #8]
 8016724:	4413      	add	r3, r2
 8016726:	69ba      	ldr	r2, [r7, #24]
 8016728:	429a      	cmp	r2, r3
 801672a:	d227      	bcs.n	801677c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016732:	461a      	mov	r2, r3
 8016734:	69bb      	ldr	r3, [r7, #24]
 8016736:	4293      	cmp	r3, r2
 8016738:	d114      	bne.n	8016764 <tcp_output+0x120>
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801673e:	2b00      	cmp	r3, #0
 8016740:	d110      	bne.n	8016764 <tcp_output+0x120>
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016748:	2b00      	cmp	r3, #0
 801674a:	d10b      	bne.n	8016764 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	2200      	movs	r2, #0
 8016750:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	2201      	movs	r2, #1
 8016758:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2200      	movs	r2, #0
 8016760:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	8b5b      	ldrh	r3, [r3, #26]
 8016768:	f003 0302 	and.w	r3, r3, #2
 801676c:	2b00      	cmp	r3, #0
 801676e:	f000 814d 	beq.w	8016a0c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016772:	6878      	ldr	r0, [r7, #4]
 8016774:	f000 fd6a 	bl	801724c <tcp_send_empty_ack>
 8016778:	4603      	mov	r3, r0
 801677a:	e152      	b.n	8016a22 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	2200      	movs	r2, #0
 8016780:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016788:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801678a:	6a3b      	ldr	r3, [r7, #32]
 801678c:	2b00      	cmp	r3, #0
 801678e:	f000 811c 	beq.w	80169ca <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016792:	e002      	b.n	801679a <tcp_output+0x156>
 8016794:	6a3b      	ldr	r3, [r7, #32]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	623b      	str	r3, [r7, #32]
 801679a:	6a3b      	ldr	r3, [r7, #32]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d1f8      	bne.n	8016794 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80167a2:	e112      	b.n	80169ca <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80167a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167a6:	68db      	ldr	r3, [r3, #12]
 80167a8:	899b      	ldrh	r3, [r3, #12]
 80167aa:	b29b      	uxth	r3, r3
 80167ac:	4618      	mov	r0, r3
 80167ae:	f7f9 ff78 	bl	80106a2 <lwip_htons>
 80167b2:	4603      	mov	r3, r0
 80167b4:	b2db      	uxtb	r3, r3
 80167b6:	f003 0304 	and.w	r3, r3, #4
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d006      	beq.n	80167cc <tcp_output+0x188>
 80167be:	4b2f      	ldr	r3, [pc, #188]	; (801687c <tcp_output+0x238>)
 80167c0:	f240 5236 	movw	r2, #1334	; 0x536
 80167c4:	4932      	ldr	r1, [pc, #200]	; (8016890 <tcp_output+0x24c>)
 80167c6:	482f      	ldr	r0, [pc, #188]	; (8016884 <tcp_output+0x240>)
 80167c8:	f004 fc4c 	bl	801b064 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d01f      	beq.n	8016814 <tcp_output+0x1d0>
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	8b5b      	ldrh	r3, [r3, #26]
 80167d8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d119      	bne.n	8016814 <tcp_output+0x1d0>
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d00b      	beq.n	8016800 <tcp_output+0x1bc>
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d110      	bne.n	8016814 <tcp_output+0x1d0>
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167f6:	891a      	ldrh	r2, [r3, #8]
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80167fc:	429a      	cmp	r2, r3
 80167fe:	d209      	bcs.n	8016814 <tcp_output+0x1d0>
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016806:	2b00      	cmp	r3, #0
 8016808:	d004      	beq.n	8016814 <tcp_output+0x1d0>
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016810:	2b0f      	cmp	r3, #15
 8016812:	d901      	bls.n	8016818 <tcp_output+0x1d4>
 8016814:	2301      	movs	r3, #1
 8016816:	e000      	b.n	801681a <tcp_output+0x1d6>
 8016818:	2300      	movs	r3, #0
 801681a:	2b00      	cmp	r3, #0
 801681c:	d106      	bne.n	801682c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	8b5b      	ldrh	r3, [r3, #26]
 8016822:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016826:	2b00      	cmp	r3, #0
 8016828:	f000 80e4 	beq.w	80169f4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	7d1b      	ldrb	r3, [r3, #20]
 8016830:	2b02      	cmp	r3, #2
 8016832:	d00d      	beq.n	8016850 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016836:	68db      	ldr	r3, [r3, #12]
 8016838:	899b      	ldrh	r3, [r3, #12]
 801683a:	b29c      	uxth	r4, r3
 801683c:	2010      	movs	r0, #16
 801683e:	f7f9 ff30 	bl	80106a2 <lwip_htons>
 8016842:	4603      	mov	r3, r0
 8016844:	461a      	mov	r2, r3
 8016846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016848:	68db      	ldr	r3, [r3, #12]
 801684a:	4322      	orrs	r2, r4
 801684c:	b292      	uxth	r2, r2
 801684e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016850:	697a      	ldr	r2, [r7, #20]
 8016852:	6879      	ldr	r1, [r7, #4]
 8016854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016856:	f000 f909 	bl	8016a6c <tcp_output_segment>
 801685a:	4603      	mov	r3, r0
 801685c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801685e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d016      	beq.n	8016894 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	8b5b      	ldrh	r3, [r3, #26]
 801686a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801686e:	b29a      	uxth	r2, r3
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	835a      	strh	r2, [r3, #26]
      return err;
 8016874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016878:	e0d3      	b.n	8016a22 <tcp_output+0x3de>
 801687a:	bf00      	nop
 801687c:	0801d5b8 	.word	0x0801d5b8
 8016880:	0801dafc 	.word	0x0801dafc
 8016884:	0801d60c 	.word	0x0801d60c
 8016888:	0801db14 	.word	0x0801db14
 801688c:	20008664 	.word	0x20008664
 8016890:	0801db3c 	.word	0x0801db3c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016896:	681a      	ldr	r2, [r3, #0]
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	7d1b      	ldrb	r3, [r3, #20]
 80168a0:	2b02      	cmp	r3, #2
 80168a2:	d006      	beq.n	80168b2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	8b5b      	ldrh	r3, [r3, #26]
 80168a8:	f023 0303 	bic.w	r3, r3, #3
 80168ac:	b29a      	uxth	r2, r3
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80168b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168b4:	68db      	ldr	r3, [r3, #12]
 80168b6:	685b      	ldr	r3, [r3, #4]
 80168b8:	4618      	mov	r0, r3
 80168ba:	f7f9 ff07 	bl	80106cc <lwip_htonl>
 80168be:	4604      	mov	r4, r0
 80168c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168c2:	891b      	ldrh	r3, [r3, #8]
 80168c4:	461d      	mov	r5, r3
 80168c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168c8:	68db      	ldr	r3, [r3, #12]
 80168ca:	899b      	ldrh	r3, [r3, #12]
 80168cc:	b29b      	uxth	r3, r3
 80168ce:	4618      	mov	r0, r3
 80168d0:	f7f9 fee7 	bl	80106a2 <lwip_htons>
 80168d4:	4603      	mov	r3, r0
 80168d6:	b2db      	uxtb	r3, r3
 80168d8:	f003 0303 	and.w	r3, r3, #3
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d001      	beq.n	80168e4 <tcp_output+0x2a0>
 80168e0:	2301      	movs	r3, #1
 80168e2:	e000      	b.n	80168e6 <tcp_output+0x2a2>
 80168e4:	2300      	movs	r3, #0
 80168e6:	442b      	add	r3, r5
 80168e8:	4423      	add	r3, r4
 80168ea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80168f0:	68bb      	ldr	r3, [r7, #8]
 80168f2:	1ad3      	subs	r3, r2, r3
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	da02      	bge.n	80168fe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	68ba      	ldr	r2, [r7, #8]
 80168fc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80168fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016900:	891b      	ldrh	r3, [r3, #8]
 8016902:	461c      	mov	r4, r3
 8016904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016906:	68db      	ldr	r3, [r3, #12]
 8016908:	899b      	ldrh	r3, [r3, #12]
 801690a:	b29b      	uxth	r3, r3
 801690c:	4618      	mov	r0, r3
 801690e:	f7f9 fec8 	bl	80106a2 <lwip_htons>
 8016912:	4603      	mov	r3, r0
 8016914:	b2db      	uxtb	r3, r3
 8016916:	f003 0303 	and.w	r3, r3, #3
 801691a:	2b00      	cmp	r3, #0
 801691c:	d001      	beq.n	8016922 <tcp_output+0x2de>
 801691e:	2301      	movs	r3, #1
 8016920:	e000      	b.n	8016924 <tcp_output+0x2e0>
 8016922:	2300      	movs	r3, #0
 8016924:	4423      	add	r3, r4
 8016926:	2b00      	cmp	r3, #0
 8016928:	d049      	beq.n	80169be <tcp_output+0x37a>
      seg->next = NULL;
 801692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801692c:	2200      	movs	r2, #0
 801692e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016934:	2b00      	cmp	r3, #0
 8016936:	d105      	bne.n	8016944 <tcp_output+0x300>
        pcb->unacked = seg;
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801693c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016940:	623b      	str	r3, [r7, #32]
 8016942:	e03f      	b.n	80169c4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016946:	68db      	ldr	r3, [r3, #12]
 8016948:	685b      	ldr	r3, [r3, #4]
 801694a:	4618      	mov	r0, r3
 801694c:	f7f9 febe 	bl	80106cc <lwip_htonl>
 8016950:	4604      	mov	r4, r0
 8016952:	6a3b      	ldr	r3, [r7, #32]
 8016954:	68db      	ldr	r3, [r3, #12]
 8016956:	685b      	ldr	r3, [r3, #4]
 8016958:	4618      	mov	r0, r3
 801695a:	f7f9 feb7 	bl	80106cc <lwip_htonl>
 801695e:	4603      	mov	r3, r0
 8016960:	1ae3      	subs	r3, r4, r3
 8016962:	2b00      	cmp	r3, #0
 8016964:	da24      	bge.n	80169b0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	3370      	adds	r3, #112	; 0x70
 801696a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801696c:	e002      	b.n	8016974 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801696e:	69fb      	ldr	r3, [r7, #28]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016974:	69fb      	ldr	r3, [r7, #28]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d011      	beq.n	80169a0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801697c:	69fb      	ldr	r3, [r7, #28]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	68db      	ldr	r3, [r3, #12]
 8016982:	685b      	ldr	r3, [r3, #4]
 8016984:	4618      	mov	r0, r3
 8016986:	f7f9 fea1 	bl	80106cc <lwip_htonl>
 801698a:	4604      	mov	r4, r0
 801698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801698e:	68db      	ldr	r3, [r3, #12]
 8016990:	685b      	ldr	r3, [r3, #4]
 8016992:	4618      	mov	r0, r3
 8016994:	f7f9 fe9a 	bl	80106cc <lwip_htonl>
 8016998:	4603      	mov	r3, r0
 801699a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801699c:	2b00      	cmp	r3, #0
 801699e:	dbe6      	blt.n	801696e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80169a0:	69fb      	ldr	r3, [r7, #28]
 80169a2:	681a      	ldr	r2, [r3, #0]
 80169a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169a6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80169a8:	69fb      	ldr	r3, [r7, #28]
 80169aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169ac:	601a      	str	r2, [r3, #0]
 80169ae:	e009      	b.n	80169c4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80169b0:	6a3b      	ldr	r3, [r7, #32]
 80169b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169b4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80169b6:	6a3b      	ldr	r3, [r7, #32]
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	623b      	str	r3, [r7, #32]
 80169bc:	e002      	b.n	80169c4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80169be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169c0:	f7fc fc3f 	bl	8013242 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169c8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80169ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d012      	beq.n	80169f6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80169d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d2:	68db      	ldr	r3, [r3, #12]
 80169d4:	685b      	ldr	r3, [r3, #4]
 80169d6:	4618      	mov	r0, r3
 80169d8:	f7f9 fe78 	bl	80106cc <lwip_htonl>
 80169dc:	4602      	mov	r2, r0
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80169e2:	1ad3      	subs	r3, r2, r3
 80169e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169e6:	8912      	ldrh	r2, [r2, #8]
 80169e8:	4413      	add	r3, r2
  while (seg != NULL &&
 80169ea:	69ba      	ldr	r2, [r7, #24]
 80169ec:	429a      	cmp	r2, r3
 80169ee:	f4bf aed9 	bcs.w	80167a4 <tcp_output+0x160>
 80169f2:	e000      	b.n	80169f6 <tcp_output+0x3b2>
      break;
 80169f4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d108      	bne.n	8016a10 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	2200      	movs	r2, #0
 8016a02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016a06:	e004      	b.n	8016a12 <tcp_output+0x3ce>
    goto output_done;
 8016a08:	bf00      	nop
 8016a0a:	e002      	b.n	8016a12 <tcp_output+0x3ce>
    goto output_done;
 8016a0c:	bf00      	nop
 8016a0e:	e000      	b.n	8016a12 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016a10:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	8b5b      	ldrh	r3, [r3, #26]
 8016a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016a1a:	b29a      	uxth	r2, r3
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016a20:	2300      	movs	r3, #0
}
 8016a22:	4618      	mov	r0, r3
 8016a24:	3728      	adds	r7, #40	; 0x28
 8016a26:	46bd      	mov	sp, r7
 8016a28:	bdb0      	pop	{r4, r5, r7, pc}
 8016a2a:	bf00      	nop

08016a2c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b082      	sub	sp, #8
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d106      	bne.n	8016a48 <tcp_output_segment_busy+0x1c>
 8016a3a:	4b09      	ldr	r3, [pc, #36]	; (8016a60 <tcp_output_segment_busy+0x34>)
 8016a3c:	f240 529a 	movw	r2, #1434	; 0x59a
 8016a40:	4908      	ldr	r1, [pc, #32]	; (8016a64 <tcp_output_segment_busy+0x38>)
 8016a42:	4809      	ldr	r0, [pc, #36]	; (8016a68 <tcp_output_segment_busy+0x3c>)
 8016a44:	f004 fb0e 	bl	801b064 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	685b      	ldr	r3, [r3, #4]
 8016a4c:	7b9b      	ldrb	r3, [r3, #14]
 8016a4e:	2b01      	cmp	r3, #1
 8016a50:	d001      	beq.n	8016a56 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016a52:	2301      	movs	r3, #1
 8016a54:	e000      	b.n	8016a58 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016a56:	2300      	movs	r3, #0
}
 8016a58:	4618      	mov	r0, r3
 8016a5a:	3708      	adds	r7, #8
 8016a5c:	46bd      	mov	sp, r7
 8016a5e:	bd80      	pop	{r7, pc}
 8016a60:	0801d5b8 	.word	0x0801d5b8
 8016a64:	0801db54 	.word	0x0801db54
 8016a68:	0801d60c 	.word	0x0801d60c

08016a6c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016a6c:	b5b0      	push	{r4, r5, r7, lr}
 8016a6e:	b08c      	sub	sp, #48	; 0x30
 8016a70:	af04      	add	r7, sp, #16
 8016a72:	60f8      	str	r0, [r7, #12]
 8016a74:	60b9      	str	r1, [r7, #8]
 8016a76:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d106      	bne.n	8016a8c <tcp_output_segment+0x20>
 8016a7e:	4b64      	ldr	r3, [pc, #400]	; (8016c10 <tcp_output_segment+0x1a4>)
 8016a80:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8016a84:	4963      	ldr	r1, [pc, #396]	; (8016c14 <tcp_output_segment+0x1a8>)
 8016a86:	4864      	ldr	r0, [pc, #400]	; (8016c18 <tcp_output_segment+0x1ac>)
 8016a88:	f004 faec 	bl	801b064 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016a8c:	68bb      	ldr	r3, [r7, #8]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d106      	bne.n	8016aa0 <tcp_output_segment+0x34>
 8016a92:	4b5f      	ldr	r3, [pc, #380]	; (8016c10 <tcp_output_segment+0x1a4>)
 8016a94:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016a98:	4960      	ldr	r1, [pc, #384]	; (8016c1c <tcp_output_segment+0x1b0>)
 8016a9a:	485f      	ldr	r0, [pc, #380]	; (8016c18 <tcp_output_segment+0x1ac>)
 8016a9c:	f004 fae2 	bl	801b064 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d106      	bne.n	8016ab4 <tcp_output_segment+0x48>
 8016aa6:	4b5a      	ldr	r3, [pc, #360]	; (8016c10 <tcp_output_segment+0x1a4>)
 8016aa8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8016aac:	495c      	ldr	r1, [pc, #368]	; (8016c20 <tcp_output_segment+0x1b4>)
 8016aae:	485a      	ldr	r0, [pc, #360]	; (8016c18 <tcp_output_segment+0x1ac>)
 8016ab0:	f004 fad8 	bl	801b064 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016ab4:	68f8      	ldr	r0, [r7, #12]
 8016ab6:	f7ff ffb9 	bl	8016a2c <tcp_output_segment_busy>
 8016aba:	4603      	mov	r3, r0
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d001      	beq.n	8016ac4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	e0a1      	b.n	8016c08 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016ac4:	68bb      	ldr	r3, [r7, #8]
 8016ac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	68dc      	ldr	r4, [r3, #12]
 8016acc:	4610      	mov	r0, r2
 8016ace:	f7f9 fdfd 	bl	80106cc <lwip_htonl>
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016ad6:	68bb      	ldr	r3, [r7, #8]
 8016ad8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	68dc      	ldr	r4, [r3, #12]
 8016ade:	4610      	mov	r0, r2
 8016ae0:	f7f9 fddf 	bl	80106a2 <lwip_htons>
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016ae8:	68bb      	ldr	r3, [r7, #8]
 8016aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aec:	68ba      	ldr	r2, [r7, #8]
 8016aee:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016af0:	441a      	add	r2, r3
 8016af2:	68bb      	ldr	r3, [r7, #8]
 8016af4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	68db      	ldr	r3, [r3, #12]
 8016afa:	3314      	adds	r3, #20
 8016afc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	7a9b      	ldrb	r3, [r3, #10]
 8016b02:	f003 0301 	and.w	r3, r3, #1
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d015      	beq.n	8016b36 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016b0a:	68bb      	ldr	r3, [r7, #8]
 8016b0c:	3304      	adds	r3, #4
 8016b0e:	461a      	mov	r2, r3
 8016b10:	6879      	ldr	r1, [r7, #4]
 8016b12:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8016b16:	f7fc fe8b 	bl	8013830 <tcp_eff_send_mss_netif>
 8016b1a:	4603      	mov	r3, r0
 8016b1c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016b1e:	8b7b      	ldrh	r3, [r7, #26]
 8016b20:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016b24:	4618      	mov	r0, r3
 8016b26:	f7f9 fdd1 	bl	80106cc <lwip_htonl>
 8016b2a:	4602      	mov	r2, r0
 8016b2c:	69fb      	ldr	r3, [r7, #28]
 8016b2e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016b30:	69fb      	ldr	r3, [r7, #28]
 8016b32:	3304      	adds	r3, #4
 8016b34:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016b36:	68bb      	ldr	r3, [r7, #8]
 8016b38:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	da02      	bge.n	8016b46 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016b40:	68bb      	ldr	r3, [r7, #8]
 8016b42:	2200      	movs	r2, #0
 8016b44:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016b46:	68bb      	ldr	r3, [r7, #8]
 8016b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d10c      	bne.n	8016b68 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8016b4e:	4b35      	ldr	r3, [pc, #212]	; (8016c24 <tcp_output_segment+0x1b8>)
 8016b50:	681a      	ldr	r2, [r3, #0]
 8016b52:	68bb      	ldr	r3, [r7, #8]
 8016b54:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	68db      	ldr	r3, [r3, #12]
 8016b5a:	685b      	ldr	r3, [r3, #4]
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f7f9 fdb5 	bl	80106cc <lwip_htonl>
 8016b62:	4602      	mov	r2, r0
 8016b64:	68bb      	ldr	r3, [r7, #8]
 8016b66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	68da      	ldr	r2, [r3, #12]
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	685b      	ldr	r3, [r3, #4]
 8016b70:	685b      	ldr	r3, [r3, #4]
 8016b72:	1ad3      	subs	r3, r2, r3
 8016b74:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	685b      	ldr	r3, [r3, #4]
 8016b7a:	8959      	ldrh	r1, [r3, #10]
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	685b      	ldr	r3, [r3, #4]
 8016b80:	8b3a      	ldrh	r2, [r7, #24]
 8016b82:	1a8a      	subs	r2, r1, r2
 8016b84:	b292      	uxth	r2, r2
 8016b86:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	685b      	ldr	r3, [r3, #4]
 8016b8c:	8919      	ldrh	r1, [r3, #8]
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	685b      	ldr	r3, [r3, #4]
 8016b92:	8b3a      	ldrh	r2, [r7, #24]
 8016b94:	1a8a      	subs	r2, r1, r2
 8016b96:	b292      	uxth	r2, r2
 8016b98:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	685b      	ldr	r3, [r3, #4]
 8016b9e:	68fa      	ldr	r2, [r7, #12]
 8016ba0:	68d2      	ldr	r2, [r2, #12]
 8016ba2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	68db      	ldr	r3, [r3, #12]
 8016ba8:	2200      	movs	r2, #0
 8016baa:	741a      	strb	r2, [r3, #16]
 8016bac:	2200      	movs	r2, #0
 8016bae:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	68da      	ldr	r2, [r3, #12]
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	7a9b      	ldrb	r3, [r3, #10]
 8016bb8:	f003 0301 	and.w	r3, r3, #1
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d001      	beq.n	8016bc4 <tcp_output_segment+0x158>
 8016bc0:	2318      	movs	r3, #24
 8016bc2:	e000      	b.n	8016bc6 <tcp_output_segment+0x15a>
 8016bc4:	2314      	movs	r3, #20
 8016bc6:	4413      	add	r3, r2
 8016bc8:	69fa      	ldr	r2, [r7, #28]
 8016bca:	429a      	cmp	r2, r3
 8016bcc:	d006      	beq.n	8016bdc <tcp_output_segment+0x170>
 8016bce:	4b10      	ldr	r3, [pc, #64]	; (8016c10 <tcp_output_segment+0x1a4>)
 8016bd0:	f240 621c 	movw	r2, #1564	; 0x61c
 8016bd4:	4914      	ldr	r1, [pc, #80]	; (8016c28 <tcp_output_segment+0x1bc>)
 8016bd6:	4810      	ldr	r0, [pc, #64]	; (8016c18 <tcp_output_segment+0x1ac>)
 8016bd8:	f004 fa44 	bl	801b064 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	6858      	ldr	r0, [r3, #4]
 8016be0:	68b9      	ldr	r1, [r7, #8]
 8016be2:	68bb      	ldr	r3, [r7, #8]
 8016be4:	1d1c      	adds	r4, r3, #4
 8016be6:	68bb      	ldr	r3, [r7, #8]
 8016be8:	7add      	ldrb	r5, [r3, #11]
 8016bea:	68bb      	ldr	r3, [r7, #8]
 8016bec:	7a9b      	ldrb	r3, [r3, #10]
 8016bee:	687a      	ldr	r2, [r7, #4]
 8016bf0:	9202      	str	r2, [sp, #8]
 8016bf2:	2206      	movs	r2, #6
 8016bf4:	9201      	str	r2, [sp, #4]
 8016bf6:	9300      	str	r3, [sp, #0]
 8016bf8:	462b      	mov	r3, r5
 8016bfa:	4622      	mov	r2, r4
 8016bfc:	f002 fa32 	bl	8019064 <ip4_output_if>
 8016c00:	4603      	mov	r3, r0
 8016c02:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016c08:	4618      	mov	r0, r3
 8016c0a:	3720      	adds	r7, #32
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8016c10:	0801d5b8 	.word	0x0801d5b8
 8016c14:	0801db7c 	.word	0x0801db7c
 8016c18:	0801d60c 	.word	0x0801d60c
 8016c1c:	0801db9c 	.word	0x0801db9c
 8016c20:	0801dbbc 	.word	0x0801dbbc
 8016c24:	20008618 	.word	0x20008618
 8016c28:	0801dbe0 	.word	0x0801dbe0

08016c2c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016c2c:	b5b0      	push	{r4, r5, r7, lr}
 8016c2e:	b084      	sub	sp, #16
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d106      	bne.n	8016c48 <tcp_rexmit_rto_prepare+0x1c>
 8016c3a:	4b31      	ldr	r3, [pc, #196]	; (8016d00 <tcp_rexmit_rto_prepare+0xd4>)
 8016c3c:	f240 6263 	movw	r2, #1635	; 0x663
 8016c40:	4930      	ldr	r1, [pc, #192]	; (8016d04 <tcp_rexmit_rto_prepare+0xd8>)
 8016c42:	4831      	ldr	r0, [pc, #196]	; (8016d08 <tcp_rexmit_rto_prepare+0xdc>)
 8016c44:	f004 fa0e 	bl	801b064 <iprintf>

  if (pcb->unacked == NULL) {
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d102      	bne.n	8016c56 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016c50:	f06f 0305 	mvn.w	r3, #5
 8016c54:	e050      	b.n	8016cf8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c5a:	60fb      	str	r3, [r7, #12]
 8016c5c:	e00b      	b.n	8016c76 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8016c5e:	68f8      	ldr	r0, [r7, #12]
 8016c60:	f7ff fee4 	bl	8016a2c <tcp_output_segment_busy>
 8016c64:	4603      	mov	r3, r0
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d002      	beq.n	8016c70 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016c6a:	f06f 0305 	mvn.w	r3, #5
 8016c6e:	e043      	b.n	8016cf8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	60fb      	str	r3, [r7, #12]
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d1ef      	bne.n	8016c5e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8016c7e:	68f8      	ldr	r0, [r7, #12]
 8016c80:	f7ff fed4 	bl	8016a2c <tcp_output_segment_busy>
 8016c84:	4603      	mov	r3, r0
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d002      	beq.n	8016c90 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8016c8a:	f06f 0305 	mvn.w	r3, #5
 8016c8e:	e033      	b.n	8016cf8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	8b5b      	ldrh	r3, [r3, #26]
 8016caa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8016cae:	b29a      	uxth	r2, r3
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	68db      	ldr	r3, [r3, #12]
 8016cb8:	685b      	ldr	r3, [r3, #4]
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f7f9 fd06 	bl	80106cc <lwip_htonl>
 8016cc0:	4604      	mov	r4, r0
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	891b      	ldrh	r3, [r3, #8]
 8016cc6:	461d      	mov	r5, r3
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	68db      	ldr	r3, [r3, #12]
 8016ccc:	899b      	ldrh	r3, [r3, #12]
 8016cce:	b29b      	uxth	r3, r3
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7f9 fce6 	bl	80106a2 <lwip_htons>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	b2db      	uxtb	r3, r3
 8016cda:	f003 0303 	and.w	r3, r3, #3
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d001      	beq.n	8016ce6 <tcp_rexmit_rto_prepare+0xba>
 8016ce2:	2301      	movs	r3, #1
 8016ce4:	e000      	b.n	8016ce8 <tcp_rexmit_rto_prepare+0xbc>
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	442b      	add	r3, r5
 8016cea:	18e2      	adds	r2, r4, r3
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	2200      	movs	r2, #0
 8016cf4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8016cf6:	2300      	movs	r3, #0
}
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	3710      	adds	r7, #16
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8016d00:	0801d5b8 	.word	0x0801d5b8
 8016d04:	0801dbf4 	.word	0x0801dbf4
 8016d08:	0801d60c 	.word	0x0801d60c

08016d0c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b082      	sub	sp, #8
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d106      	bne.n	8016d28 <tcp_rexmit_rto_commit+0x1c>
 8016d1a:	4b0d      	ldr	r3, [pc, #52]	; (8016d50 <tcp_rexmit_rto_commit+0x44>)
 8016d1c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016d20:	490c      	ldr	r1, [pc, #48]	; (8016d54 <tcp_rexmit_rto_commit+0x48>)
 8016d22:	480d      	ldr	r0, [pc, #52]	; (8016d58 <tcp_rexmit_rto_commit+0x4c>)
 8016d24:	f004 f99e 	bl	801b064 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016d2e:	2bff      	cmp	r3, #255	; 0xff
 8016d30:	d007      	beq.n	8016d42 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016d38:	3301      	adds	r3, #1
 8016d3a:	b2da      	uxtb	r2, r3
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8016d42:	6878      	ldr	r0, [r7, #4]
 8016d44:	f7ff fc7e 	bl	8016644 <tcp_output>
}
 8016d48:	bf00      	nop
 8016d4a:	3708      	adds	r7, #8
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd80      	pop	{r7, pc}
 8016d50:	0801d5b8 	.word	0x0801d5b8
 8016d54:	0801dc18 	.word	0x0801dc18
 8016d58:	0801d60c 	.word	0x0801d60c

08016d5c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b082      	sub	sp, #8
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d106      	bne.n	8016d78 <tcp_rexmit_rto+0x1c>
 8016d6a:	4b0a      	ldr	r3, [pc, #40]	; (8016d94 <tcp_rexmit_rto+0x38>)
 8016d6c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8016d70:	4909      	ldr	r1, [pc, #36]	; (8016d98 <tcp_rexmit_rto+0x3c>)
 8016d72:	480a      	ldr	r0, [pc, #40]	; (8016d9c <tcp_rexmit_rto+0x40>)
 8016d74:	f004 f976 	bl	801b064 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8016d78:	6878      	ldr	r0, [r7, #4]
 8016d7a:	f7ff ff57 	bl	8016c2c <tcp_rexmit_rto_prepare>
 8016d7e:	4603      	mov	r3, r0
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d102      	bne.n	8016d8a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8016d84:	6878      	ldr	r0, [r7, #4]
 8016d86:	f7ff ffc1 	bl	8016d0c <tcp_rexmit_rto_commit>
  }
}
 8016d8a:	bf00      	nop
 8016d8c:	3708      	adds	r7, #8
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	bd80      	pop	{r7, pc}
 8016d92:	bf00      	nop
 8016d94:	0801d5b8 	.word	0x0801d5b8
 8016d98:	0801dc3c 	.word	0x0801dc3c
 8016d9c:	0801d60c 	.word	0x0801d60c

08016da0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016da0:	b590      	push	{r4, r7, lr}
 8016da2:	b085      	sub	sp, #20
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d106      	bne.n	8016dbc <tcp_rexmit+0x1c>
 8016dae:	4b2f      	ldr	r3, [pc, #188]	; (8016e6c <tcp_rexmit+0xcc>)
 8016db0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8016db4:	492e      	ldr	r1, [pc, #184]	; (8016e70 <tcp_rexmit+0xd0>)
 8016db6:	482f      	ldr	r0, [pc, #188]	; (8016e74 <tcp_rexmit+0xd4>)
 8016db8:	f004 f954 	bl	801b064 <iprintf>

  if (pcb->unacked == NULL) {
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d102      	bne.n	8016dca <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016dc4:	f06f 0305 	mvn.w	r3, #5
 8016dc8:	e04c      	b.n	8016e64 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016dce:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016dd0:	68b8      	ldr	r0, [r7, #8]
 8016dd2:	f7ff fe2b 	bl	8016a2c <tcp_output_segment_busy>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d002      	beq.n	8016de2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016ddc:	f06f 0305 	mvn.w	r3, #5
 8016de0:	e040      	b.n	8016e64 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8016de2:	68bb      	ldr	r3, [r7, #8]
 8016de4:	681a      	ldr	r2, [r3, #0]
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	336c      	adds	r3, #108	; 0x6c
 8016dee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016df0:	e002      	b.n	8016df8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d011      	beq.n	8016e24 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	68db      	ldr	r3, [r3, #12]
 8016e06:	685b      	ldr	r3, [r3, #4]
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f7f9 fc5f 	bl	80106cc <lwip_htonl>
 8016e0e:	4604      	mov	r4, r0
 8016e10:	68bb      	ldr	r3, [r7, #8]
 8016e12:	68db      	ldr	r3, [r3, #12]
 8016e14:	685b      	ldr	r3, [r3, #4]
 8016e16:	4618      	mov	r0, r3
 8016e18:	f7f9 fc58 	bl	80106cc <lwip_htonl>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	dbe6      	blt.n	8016df2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	681a      	ldr	r2, [r3, #0]
 8016e28:	68bb      	ldr	r3, [r7, #8]
 8016e2a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	68ba      	ldr	r2, [r7, #8]
 8016e30:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016e32:	68bb      	ldr	r3, [r7, #8]
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d103      	bne.n	8016e42 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016e48:	2bff      	cmp	r3, #255	; 0xff
 8016e4a:	d007      	beq.n	8016e5c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016e52:	3301      	adds	r3, #1
 8016e54:	b2da      	uxtb	r2, r3
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	2200      	movs	r2, #0
 8016e60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8016e62:	2300      	movs	r3, #0
}
 8016e64:	4618      	mov	r0, r3
 8016e66:	3714      	adds	r7, #20
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bd90      	pop	{r4, r7, pc}
 8016e6c:	0801d5b8 	.word	0x0801d5b8
 8016e70:	0801dc58 	.word	0x0801dc58
 8016e74:	0801d60c 	.word	0x0801d60c

08016e78 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b082      	sub	sp, #8
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d106      	bne.n	8016e94 <tcp_rexmit_fast+0x1c>
 8016e86:	4b2a      	ldr	r3, [pc, #168]	; (8016f30 <tcp_rexmit_fast+0xb8>)
 8016e88:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8016e8c:	4929      	ldr	r1, [pc, #164]	; (8016f34 <tcp_rexmit_fast+0xbc>)
 8016e8e:	482a      	ldr	r0, [pc, #168]	; (8016f38 <tcp_rexmit_fast+0xc0>)
 8016e90:	f004 f8e8 	bl	801b064 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d044      	beq.n	8016f26 <tcp_rexmit_fast+0xae>
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	8b5b      	ldrh	r3, [r3, #26]
 8016ea0:	f003 0304 	and.w	r3, r3, #4
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d13e      	bne.n	8016f26 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8016ea8:	6878      	ldr	r0, [r7, #4]
 8016eaa:	f7ff ff79 	bl	8016da0 <tcp_rexmit>
 8016eae:	4603      	mov	r3, r0
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d138      	bne.n	8016f26 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016ec0:	4293      	cmp	r3, r2
 8016ec2:	bf28      	it	cs
 8016ec4:	4613      	movcs	r3, r2
 8016ec6:	b29b      	uxth	r3, r3
 8016ec8:	0fda      	lsrs	r2, r3, #31
 8016eca:	4413      	add	r3, r2
 8016ecc:	105b      	asrs	r3, r3, #1
 8016ece:	b29a      	uxth	r2, r3
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016edc:	461a      	mov	r2, r3
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016ee2:	005b      	lsls	r3, r3, #1
 8016ee4:	429a      	cmp	r2, r3
 8016ee6:	d206      	bcs.n	8016ef6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016eec:	005b      	lsls	r3, r3, #1
 8016eee:	b29a      	uxth	r2, r3
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016f00:	4619      	mov	r1, r3
 8016f02:	0049      	lsls	r1, r1, #1
 8016f04:	440b      	add	r3, r1
 8016f06:	b29b      	uxth	r3, r3
 8016f08:	4413      	add	r3, r2
 8016f0a:	b29a      	uxth	r2, r3
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	8b5b      	ldrh	r3, [r3, #26]
 8016f16:	f043 0304 	orr.w	r3, r3, #4
 8016f1a:	b29a      	uxth	r2, r3
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	2200      	movs	r2, #0
 8016f24:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8016f26:	bf00      	nop
 8016f28:	3708      	adds	r7, #8
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	bd80      	pop	{r7, pc}
 8016f2e:	bf00      	nop
 8016f30:	0801d5b8 	.word	0x0801d5b8
 8016f34:	0801dc70 	.word	0x0801dc70
 8016f38:	0801d60c 	.word	0x0801d60c

08016f3c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b086      	sub	sp, #24
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	60f8      	str	r0, [r7, #12]
 8016f44:	607b      	str	r3, [r7, #4]
 8016f46:	460b      	mov	r3, r1
 8016f48:	817b      	strh	r3, [r7, #10]
 8016f4a:	4613      	mov	r3, r2
 8016f4c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8016f4e:	897a      	ldrh	r2, [r7, #10]
 8016f50:	893b      	ldrh	r3, [r7, #8]
 8016f52:	4413      	add	r3, r2
 8016f54:	b29b      	uxth	r3, r3
 8016f56:	3314      	adds	r3, #20
 8016f58:	b29b      	uxth	r3, r3
 8016f5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f5e:	4619      	mov	r1, r3
 8016f60:	2022      	movs	r0, #34	; 0x22
 8016f62:	f7fa fc17 	bl	8011794 <pbuf_alloc>
 8016f66:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8016f68:	697b      	ldr	r3, [r7, #20]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d04d      	beq.n	801700a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016f6e:	897b      	ldrh	r3, [r7, #10]
 8016f70:	3313      	adds	r3, #19
 8016f72:	697a      	ldr	r2, [r7, #20]
 8016f74:	8952      	ldrh	r2, [r2, #10]
 8016f76:	4293      	cmp	r3, r2
 8016f78:	db06      	blt.n	8016f88 <tcp_output_alloc_header_common+0x4c>
 8016f7a:	4b26      	ldr	r3, [pc, #152]	; (8017014 <tcp_output_alloc_header_common+0xd8>)
 8016f7c:	f240 7223 	movw	r2, #1827	; 0x723
 8016f80:	4925      	ldr	r1, [pc, #148]	; (8017018 <tcp_output_alloc_header_common+0xdc>)
 8016f82:	4826      	ldr	r0, [pc, #152]	; (801701c <tcp_output_alloc_header_common+0xe0>)
 8016f84:	f004 f86e 	bl	801b064 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8016f88:	697b      	ldr	r3, [r7, #20]
 8016f8a:	685b      	ldr	r3, [r3, #4]
 8016f8c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8016f8e:	8c3b      	ldrh	r3, [r7, #32]
 8016f90:	4618      	mov	r0, r3
 8016f92:	f7f9 fb86 	bl	80106a2 <lwip_htons>
 8016f96:	4603      	mov	r3, r0
 8016f98:	461a      	mov	r2, r3
 8016f9a:	693b      	ldr	r3, [r7, #16]
 8016f9c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8016f9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	f7f9 fb7e 	bl	80106a2 <lwip_htons>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	461a      	mov	r2, r3
 8016faa:	693b      	ldr	r3, [r7, #16]
 8016fac:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8016fae:	693b      	ldr	r3, [r7, #16]
 8016fb0:	687a      	ldr	r2, [r7, #4]
 8016fb2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8016fb4:	68f8      	ldr	r0, [r7, #12]
 8016fb6:	f7f9 fb89 	bl	80106cc <lwip_htonl>
 8016fba:	4602      	mov	r2, r0
 8016fbc:	693b      	ldr	r3, [r7, #16]
 8016fbe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016fc0:	897b      	ldrh	r3, [r7, #10]
 8016fc2:	089b      	lsrs	r3, r3, #2
 8016fc4:	b29b      	uxth	r3, r3
 8016fc6:	3305      	adds	r3, #5
 8016fc8:	b29b      	uxth	r3, r3
 8016fca:	031b      	lsls	r3, r3, #12
 8016fcc:	b29a      	uxth	r2, r3
 8016fce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016fd2:	b29b      	uxth	r3, r3
 8016fd4:	4313      	orrs	r3, r2
 8016fd6:	b29b      	uxth	r3, r3
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7f9 fb62 	bl	80106a2 <lwip_htons>
 8016fde:	4603      	mov	r3, r0
 8016fe0:	461a      	mov	r2, r3
 8016fe2:	693b      	ldr	r3, [r7, #16]
 8016fe4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8016fe6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016fe8:	4618      	mov	r0, r3
 8016fea:	f7f9 fb5a 	bl	80106a2 <lwip_htons>
 8016fee:	4603      	mov	r3, r0
 8016ff0:	461a      	mov	r2, r3
 8016ff2:	693b      	ldr	r3, [r7, #16]
 8016ff4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8016ff6:	693b      	ldr	r3, [r7, #16]
 8016ff8:	2200      	movs	r2, #0
 8016ffa:	741a      	strb	r2, [r3, #16]
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017000:	693b      	ldr	r3, [r7, #16]
 8017002:	2200      	movs	r2, #0
 8017004:	749a      	strb	r2, [r3, #18]
 8017006:	2200      	movs	r2, #0
 8017008:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801700a:	697b      	ldr	r3, [r7, #20]
}
 801700c:	4618      	mov	r0, r3
 801700e:	3718      	adds	r7, #24
 8017010:	46bd      	mov	sp, r7
 8017012:	bd80      	pop	{r7, pc}
 8017014:	0801d5b8 	.word	0x0801d5b8
 8017018:	0801dc90 	.word	0x0801dc90
 801701c:	0801d60c 	.word	0x0801d60c

08017020 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017020:	b5b0      	push	{r4, r5, r7, lr}
 8017022:	b08a      	sub	sp, #40	; 0x28
 8017024:	af04      	add	r7, sp, #16
 8017026:	60f8      	str	r0, [r7, #12]
 8017028:	607b      	str	r3, [r7, #4]
 801702a:	460b      	mov	r3, r1
 801702c:	817b      	strh	r3, [r7, #10]
 801702e:	4613      	mov	r3, r2
 8017030:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d106      	bne.n	8017046 <tcp_output_alloc_header+0x26>
 8017038:	4b15      	ldr	r3, [pc, #84]	; (8017090 <tcp_output_alloc_header+0x70>)
 801703a:	f240 7242 	movw	r2, #1858	; 0x742
 801703e:	4915      	ldr	r1, [pc, #84]	; (8017094 <tcp_output_alloc_header+0x74>)
 8017040:	4815      	ldr	r0, [pc, #84]	; (8017098 <tcp_output_alloc_header+0x78>)
 8017042:	f004 f80f 	bl	801b064 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	8adb      	ldrh	r3, [r3, #22]
 801704e:	68fa      	ldr	r2, [r7, #12]
 8017050:	8b12      	ldrh	r2, [r2, #24]
 8017052:	68f9      	ldr	r1, [r7, #12]
 8017054:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8017056:	893d      	ldrh	r5, [r7, #8]
 8017058:	897c      	ldrh	r4, [r7, #10]
 801705a:	9103      	str	r1, [sp, #12]
 801705c:	2110      	movs	r1, #16
 801705e:	9102      	str	r1, [sp, #8]
 8017060:	9201      	str	r2, [sp, #4]
 8017062:	9300      	str	r3, [sp, #0]
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	462a      	mov	r2, r5
 8017068:	4621      	mov	r1, r4
 801706a:	f7ff ff67 	bl	8016f3c <tcp_output_alloc_header_common>
 801706e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017070:	697b      	ldr	r3, [r7, #20]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d006      	beq.n	8017084 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801707a:	68fa      	ldr	r2, [r7, #12]
 801707c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801707e:	441a      	add	r2, r3
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017084:	697b      	ldr	r3, [r7, #20]
}
 8017086:	4618      	mov	r0, r3
 8017088:	3718      	adds	r7, #24
 801708a:	46bd      	mov	sp, r7
 801708c:	bdb0      	pop	{r4, r5, r7, pc}
 801708e:	bf00      	nop
 8017090:	0801d5b8 	.word	0x0801d5b8
 8017094:	0801dcc0 	.word	0x0801dcc0
 8017098:	0801d60c 	.word	0x0801d60c

0801709c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b088      	sub	sp, #32
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	60f8      	str	r0, [r7, #12]
 80170a4:	60b9      	str	r1, [r7, #8]
 80170a6:	4611      	mov	r1, r2
 80170a8:	461a      	mov	r2, r3
 80170aa:	460b      	mov	r3, r1
 80170ac:	71fb      	strb	r3, [r7, #7]
 80170ae:	4613      	mov	r3, r2
 80170b0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80170b2:	2300      	movs	r3, #0
 80170b4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80170b6:	68bb      	ldr	r3, [r7, #8]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d106      	bne.n	80170ca <tcp_output_fill_options+0x2e>
 80170bc:	4b12      	ldr	r3, [pc, #72]	; (8017108 <tcp_output_fill_options+0x6c>)
 80170be:	f240 7256 	movw	r2, #1878	; 0x756
 80170c2:	4912      	ldr	r1, [pc, #72]	; (801710c <tcp_output_fill_options+0x70>)
 80170c4:	4812      	ldr	r0, [pc, #72]	; (8017110 <tcp_output_fill_options+0x74>)
 80170c6:	f003 ffcd 	bl	801b064 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80170ca:	68bb      	ldr	r3, [r7, #8]
 80170cc:	685b      	ldr	r3, [r3, #4]
 80170ce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80170d0:	69bb      	ldr	r3, [r7, #24]
 80170d2:	3314      	adds	r3, #20
 80170d4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80170d6:	8bfb      	ldrh	r3, [r7, #30]
 80170d8:	009b      	lsls	r3, r3, #2
 80170da:	461a      	mov	r2, r3
 80170dc:	79fb      	ldrb	r3, [r7, #7]
 80170de:	009b      	lsls	r3, r3, #2
 80170e0:	f003 0304 	and.w	r3, r3, #4
 80170e4:	4413      	add	r3, r2
 80170e6:	3314      	adds	r3, #20
 80170e8:	69ba      	ldr	r2, [r7, #24]
 80170ea:	4413      	add	r3, r2
 80170ec:	697a      	ldr	r2, [r7, #20]
 80170ee:	429a      	cmp	r2, r3
 80170f0:	d006      	beq.n	8017100 <tcp_output_fill_options+0x64>
 80170f2:	4b05      	ldr	r3, [pc, #20]	; (8017108 <tcp_output_fill_options+0x6c>)
 80170f4:	f240 7275 	movw	r2, #1909	; 0x775
 80170f8:	4906      	ldr	r1, [pc, #24]	; (8017114 <tcp_output_fill_options+0x78>)
 80170fa:	4805      	ldr	r0, [pc, #20]	; (8017110 <tcp_output_fill_options+0x74>)
 80170fc:	f003 ffb2 	bl	801b064 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017100:	bf00      	nop
 8017102:	3720      	adds	r7, #32
 8017104:	46bd      	mov	sp, r7
 8017106:	bd80      	pop	{r7, pc}
 8017108:	0801d5b8 	.word	0x0801d5b8
 801710c:	0801dce8 	.word	0x0801dce8
 8017110:	0801d60c 	.word	0x0801d60c
 8017114:	0801dbe0 	.word	0x0801dbe0

08017118 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b08a      	sub	sp, #40	; 0x28
 801711c:	af04      	add	r7, sp, #16
 801711e:	60f8      	str	r0, [r7, #12]
 8017120:	60b9      	str	r1, [r7, #8]
 8017122:	607a      	str	r2, [r7, #4]
 8017124:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017126:	68bb      	ldr	r3, [r7, #8]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d106      	bne.n	801713a <tcp_output_control_segment+0x22>
 801712c:	4b1c      	ldr	r3, [pc, #112]	; (80171a0 <tcp_output_control_segment+0x88>)
 801712e:	f240 7287 	movw	r2, #1927	; 0x787
 8017132:	491c      	ldr	r1, [pc, #112]	; (80171a4 <tcp_output_control_segment+0x8c>)
 8017134:	481c      	ldr	r0, [pc, #112]	; (80171a8 <tcp_output_control_segment+0x90>)
 8017136:	f003 ff95 	bl	801b064 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801713a:	683a      	ldr	r2, [r7, #0]
 801713c:	6879      	ldr	r1, [r7, #4]
 801713e:	68f8      	ldr	r0, [r7, #12]
 8017140:	f7fe ff40 	bl	8015fc4 <tcp_route>
 8017144:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017146:	693b      	ldr	r3, [r7, #16]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d102      	bne.n	8017152 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801714c:	23fc      	movs	r3, #252	; 0xfc
 801714e:	75fb      	strb	r3, [r7, #23]
 8017150:	e01c      	b.n	801718c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d006      	beq.n	8017166 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	7adb      	ldrb	r3, [r3, #11]
 801715c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	7a9b      	ldrb	r3, [r3, #10]
 8017162:	757b      	strb	r3, [r7, #21]
 8017164:	e003      	b.n	801716e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017166:	23ff      	movs	r3, #255	; 0xff
 8017168:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801716a:	2300      	movs	r3, #0
 801716c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801716e:	7dba      	ldrb	r2, [r7, #22]
 8017170:	693b      	ldr	r3, [r7, #16]
 8017172:	9302      	str	r3, [sp, #8]
 8017174:	2306      	movs	r3, #6
 8017176:	9301      	str	r3, [sp, #4]
 8017178:	7d7b      	ldrb	r3, [r7, #21]
 801717a:	9300      	str	r3, [sp, #0]
 801717c:	4613      	mov	r3, r2
 801717e:	683a      	ldr	r2, [r7, #0]
 8017180:	6879      	ldr	r1, [r7, #4]
 8017182:	68b8      	ldr	r0, [r7, #8]
 8017184:	f001 ff6e 	bl	8019064 <ip4_output_if>
 8017188:	4603      	mov	r3, r0
 801718a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801718c:	68b8      	ldr	r0, [r7, #8]
 801718e:	f7fa fde5 	bl	8011d5c <pbuf_free>
  return err;
 8017192:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017196:	4618      	mov	r0, r3
 8017198:	3718      	adds	r7, #24
 801719a:	46bd      	mov	sp, r7
 801719c:	bd80      	pop	{r7, pc}
 801719e:	bf00      	nop
 80171a0:	0801d5b8 	.word	0x0801d5b8
 80171a4:	0801dd10 	.word	0x0801dd10
 80171a8:	0801d60c 	.word	0x0801d60c

080171ac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80171ac:	b590      	push	{r4, r7, lr}
 80171ae:	b08b      	sub	sp, #44	; 0x2c
 80171b0:	af04      	add	r7, sp, #16
 80171b2:	60f8      	str	r0, [r7, #12]
 80171b4:	60b9      	str	r1, [r7, #8]
 80171b6:	607a      	str	r2, [r7, #4]
 80171b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80171ba:	683b      	ldr	r3, [r7, #0]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d106      	bne.n	80171ce <tcp_rst+0x22>
 80171c0:	4b1e      	ldr	r3, [pc, #120]	; (801723c <tcp_rst+0x90>)
 80171c2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80171c6:	491e      	ldr	r1, [pc, #120]	; (8017240 <tcp_rst+0x94>)
 80171c8:	481e      	ldr	r0, [pc, #120]	; (8017244 <tcp_rst+0x98>)
 80171ca:	f003 ff4b 	bl	801b064 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80171ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d106      	bne.n	80171e2 <tcp_rst+0x36>
 80171d4:	4b19      	ldr	r3, [pc, #100]	; (801723c <tcp_rst+0x90>)
 80171d6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80171da:	491b      	ldr	r1, [pc, #108]	; (8017248 <tcp_rst+0x9c>)
 80171dc:	4819      	ldr	r0, [pc, #100]	; (8017244 <tcp_rst+0x98>)
 80171de:	f003 ff41 	bl	801b064 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80171e2:	2300      	movs	r3, #0
 80171e4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80171e6:	2308      	movs	r3, #8
 80171e8:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80171ea:	7dfb      	ldrb	r3, [r7, #23]
 80171ec:	b29c      	uxth	r4, r3
 80171ee:	68b8      	ldr	r0, [r7, #8]
 80171f0:	f7f9 fa6c 	bl	80106cc <lwip_htonl>
 80171f4:	4602      	mov	r2, r0
 80171f6:	8abb      	ldrh	r3, [r7, #20]
 80171f8:	9303      	str	r3, [sp, #12]
 80171fa:	2314      	movs	r3, #20
 80171fc:	9302      	str	r3, [sp, #8]
 80171fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017200:	9301      	str	r3, [sp, #4]
 8017202:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017204:	9300      	str	r3, [sp, #0]
 8017206:	4613      	mov	r3, r2
 8017208:	2200      	movs	r2, #0
 801720a:	4621      	mov	r1, r4
 801720c:	6878      	ldr	r0, [r7, #4]
 801720e:	f7ff fe95 	bl	8016f3c <tcp_output_alloc_header_common>
 8017212:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017214:	693b      	ldr	r3, [r7, #16]
 8017216:	2b00      	cmp	r3, #0
 8017218:	d00c      	beq.n	8017234 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801721a:	7dfb      	ldrb	r3, [r7, #23]
 801721c:	2200      	movs	r2, #0
 801721e:	6939      	ldr	r1, [r7, #16]
 8017220:	68f8      	ldr	r0, [r7, #12]
 8017222:	f7ff ff3b 	bl	801709c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017228:	683a      	ldr	r2, [r7, #0]
 801722a:	6939      	ldr	r1, [r7, #16]
 801722c:	68f8      	ldr	r0, [r7, #12]
 801722e:	f7ff ff73 	bl	8017118 <tcp_output_control_segment>
 8017232:	e000      	b.n	8017236 <tcp_rst+0x8a>
    return;
 8017234:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017236:	371c      	adds	r7, #28
 8017238:	46bd      	mov	sp, r7
 801723a:	bd90      	pop	{r4, r7, pc}
 801723c:	0801d5b8 	.word	0x0801d5b8
 8017240:	0801dd3c 	.word	0x0801dd3c
 8017244:	0801d60c 	.word	0x0801d60c
 8017248:	0801dd58 	.word	0x0801dd58

0801724c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801724c:	b590      	push	{r4, r7, lr}
 801724e:	b087      	sub	sp, #28
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017254:	2300      	movs	r3, #0
 8017256:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017258:	2300      	movs	r3, #0
 801725a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d106      	bne.n	8017270 <tcp_send_empty_ack+0x24>
 8017262:	4b28      	ldr	r3, [pc, #160]	; (8017304 <tcp_send_empty_ack+0xb8>)
 8017264:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8017268:	4927      	ldr	r1, [pc, #156]	; (8017308 <tcp_send_empty_ack+0xbc>)
 801726a:	4828      	ldr	r0, [pc, #160]	; (801730c <tcp_send_empty_ack+0xc0>)
 801726c:	f003 fefa 	bl	801b064 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017270:	7dfb      	ldrb	r3, [r7, #23]
 8017272:	009b      	lsls	r3, r3, #2
 8017274:	b2db      	uxtb	r3, r3
 8017276:	f003 0304 	and.w	r3, r3, #4
 801727a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801727c:	7d7b      	ldrb	r3, [r7, #21]
 801727e:	b29c      	uxth	r4, r3
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017284:	4618      	mov	r0, r3
 8017286:	f7f9 fa21 	bl	80106cc <lwip_htonl>
 801728a:	4603      	mov	r3, r0
 801728c:	2200      	movs	r2, #0
 801728e:	4621      	mov	r1, r4
 8017290:	6878      	ldr	r0, [r7, #4]
 8017292:	f7ff fec5 	bl	8017020 <tcp_output_alloc_header>
 8017296:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017298:	693b      	ldr	r3, [r7, #16]
 801729a:	2b00      	cmp	r3, #0
 801729c:	d109      	bne.n	80172b2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	8b5b      	ldrh	r3, [r3, #26]
 80172a2:	f043 0303 	orr.w	r3, r3, #3
 80172a6:	b29a      	uxth	r2, r3
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80172ac:	f06f 0301 	mvn.w	r3, #1
 80172b0:	e023      	b.n	80172fa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80172b2:	7dbb      	ldrb	r3, [r7, #22]
 80172b4:	7dfa      	ldrb	r2, [r7, #23]
 80172b6:	6939      	ldr	r1, [r7, #16]
 80172b8:	6878      	ldr	r0, [r7, #4]
 80172ba:	f7ff feef 	bl	801709c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80172be:	687a      	ldr	r2, [r7, #4]
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	3304      	adds	r3, #4
 80172c4:	6939      	ldr	r1, [r7, #16]
 80172c6:	6878      	ldr	r0, [r7, #4]
 80172c8:	f7ff ff26 	bl	8017118 <tcp_output_control_segment>
 80172cc:	4603      	mov	r3, r0
 80172ce:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80172d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d007      	beq.n	80172e8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	8b5b      	ldrh	r3, [r3, #26]
 80172dc:	f043 0303 	orr.w	r3, r3, #3
 80172e0:	b29a      	uxth	r2, r3
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	835a      	strh	r2, [r3, #26]
 80172e6:	e006      	b.n	80172f6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	8b5b      	ldrh	r3, [r3, #26]
 80172ec:	f023 0303 	bic.w	r3, r3, #3
 80172f0:	b29a      	uxth	r2, r3
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80172f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80172fa:	4618      	mov	r0, r3
 80172fc:	371c      	adds	r7, #28
 80172fe:	46bd      	mov	sp, r7
 8017300:	bd90      	pop	{r4, r7, pc}
 8017302:	bf00      	nop
 8017304:	0801d5b8 	.word	0x0801d5b8
 8017308:	0801dd74 	.word	0x0801dd74
 801730c:	0801d60c 	.word	0x0801d60c

08017310 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017310:	b590      	push	{r4, r7, lr}
 8017312:	b087      	sub	sp, #28
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017318:	2300      	movs	r3, #0
 801731a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d106      	bne.n	8017330 <tcp_keepalive+0x20>
 8017322:	4b18      	ldr	r3, [pc, #96]	; (8017384 <tcp_keepalive+0x74>)
 8017324:	f640 0224 	movw	r2, #2084	; 0x824
 8017328:	4917      	ldr	r1, [pc, #92]	; (8017388 <tcp_keepalive+0x78>)
 801732a:	4818      	ldr	r0, [pc, #96]	; (801738c <tcp_keepalive+0x7c>)
 801732c:	f003 fe9a 	bl	801b064 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017330:	7dfb      	ldrb	r3, [r7, #23]
 8017332:	b29c      	uxth	r4, r3
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017338:	3b01      	subs	r3, #1
 801733a:	4618      	mov	r0, r3
 801733c:	f7f9 f9c6 	bl	80106cc <lwip_htonl>
 8017340:	4603      	mov	r3, r0
 8017342:	2200      	movs	r2, #0
 8017344:	4621      	mov	r1, r4
 8017346:	6878      	ldr	r0, [r7, #4]
 8017348:	f7ff fe6a 	bl	8017020 <tcp_output_alloc_header>
 801734c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801734e:	693b      	ldr	r3, [r7, #16]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d102      	bne.n	801735a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017354:	f04f 33ff 	mov.w	r3, #4294967295
 8017358:	e010      	b.n	801737c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801735a:	7dfb      	ldrb	r3, [r7, #23]
 801735c:	2200      	movs	r2, #0
 801735e:	6939      	ldr	r1, [r7, #16]
 8017360:	6878      	ldr	r0, [r7, #4]
 8017362:	f7ff fe9b 	bl	801709c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017366:	687a      	ldr	r2, [r7, #4]
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	3304      	adds	r3, #4
 801736c:	6939      	ldr	r1, [r7, #16]
 801736e:	6878      	ldr	r0, [r7, #4]
 8017370:	f7ff fed2 	bl	8017118 <tcp_output_control_segment>
 8017374:	4603      	mov	r3, r0
 8017376:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017378:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801737c:	4618      	mov	r0, r3
 801737e:	371c      	adds	r7, #28
 8017380:	46bd      	mov	sp, r7
 8017382:	bd90      	pop	{r4, r7, pc}
 8017384:	0801d5b8 	.word	0x0801d5b8
 8017388:	0801dd94 	.word	0x0801dd94
 801738c:	0801d60c 	.word	0x0801d60c

08017390 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017390:	b590      	push	{r4, r7, lr}
 8017392:	b08b      	sub	sp, #44	; 0x2c
 8017394:	af00      	add	r7, sp, #0
 8017396:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017398:	2300      	movs	r3, #0
 801739a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d106      	bne.n	80173b2 <tcp_zero_window_probe+0x22>
 80173a4:	4b4c      	ldr	r3, [pc, #304]	; (80174d8 <tcp_zero_window_probe+0x148>)
 80173a6:	f640 024f 	movw	r2, #2127	; 0x84f
 80173aa:	494c      	ldr	r1, [pc, #304]	; (80174dc <tcp_zero_window_probe+0x14c>)
 80173ac:	484c      	ldr	r0, [pc, #304]	; (80174e0 <tcp_zero_window_probe+0x150>)
 80173ae:	f003 fe59 	bl	801b064 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80173b6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80173b8:	6a3b      	ldr	r3, [r7, #32]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d101      	bne.n	80173c2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80173be:	2300      	movs	r3, #0
 80173c0:	e086      	b.n	80174d0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80173c8:	2bff      	cmp	r3, #255	; 0xff
 80173ca:	d007      	beq.n	80173dc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80173d2:	3301      	adds	r3, #1
 80173d4:	b2da      	uxtb	r2, r3
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80173dc:	6a3b      	ldr	r3, [r7, #32]
 80173de:	68db      	ldr	r3, [r3, #12]
 80173e0:	899b      	ldrh	r3, [r3, #12]
 80173e2:	b29b      	uxth	r3, r3
 80173e4:	4618      	mov	r0, r3
 80173e6:	f7f9 f95c 	bl	80106a2 <lwip_htons>
 80173ea:	4603      	mov	r3, r0
 80173ec:	b2db      	uxtb	r3, r3
 80173ee:	f003 0301 	and.w	r3, r3, #1
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d005      	beq.n	8017402 <tcp_zero_window_probe+0x72>
 80173f6:	6a3b      	ldr	r3, [r7, #32]
 80173f8:	891b      	ldrh	r3, [r3, #8]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d101      	bne.n	8017402 <tcp_zero_window_probe+0x72>
 80173fe:	2301      	movs	r3, #1
 8017400:	e000      	b.n	8017404 <tcp_zero_window_probe+0x74>
 8017402:	2300      	movs	r3, #0
 8017404:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017406:	7ffb      	ldrb	r3, [r7, #31]
 8017408:	2b00      	cmp	r3, #0
 801740a:	bf0c      	ite	eq
 801740c:	2301      	moveq	r3, #1
 801740e:	2300      	movne	r3, #0
 8017410:	b2db      	uxtb	r3, r3
 8017412:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017418:	b299      	uxth	r1, r3
 801741a:	6a3b      	ldr	r3, [r7, #32]
 801741c:	68db      	ldr	r3, [r3, #12]
 801741e:	685b      	ldr	r3, [r3, #4]
 8017420:	8bba      	ldrh	r2, [r7, #28]
 8017422:	6878      	ldr	r0, [r7, #4]
 8017424:	f7ff fdfc 	bl	8017020 <tcp_output_alloc_header>
 8017428:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801742a:	69bb      	ldr	r3, [r7, #24]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d102      	bne.n	8017436 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017430:	f04f 33ff 	mov.w	r3, #4294967295
 8017434:	e04c      	b.n	80174d0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017436:	69bb      	ldr	r3, [r7, #24]
 8017438:	685b      	ldr	r3, [r3, #4]
 801743a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801743c:	7ffb      	ldrb	r3, [r7, #31]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d011      	beq.n	8017466 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017442:	697b      	ldr	r3, [r7, #20]
 8017444:	899b      	ldrh	r3, [r3, #12]
 8017446:	b29b      	uxth	r3, r3
 8017448:	b21b      	sxth	r3, r3
 801744a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801744e:	b21c      	sxth	r4, r3
 8017450:	2011      	movs	r0, #17
 8017452:	f7f9 f926 	bl	80106a2 <lwip_htons>
 8017456:	4603      	mov	r3, r0
 8017458:	b21b      	sxth	r3, r3
 801745a:	4323      	orrs	r3, r4
 801745c:	b21b      	sxth	r3, r3
 801745e:	b29a      	uxth	r2, r3
 8017460:	697b      	ldr	r3, [r7, #20]
 8017462:	819a      	strh	r2, [r3, #12]
 8017464:	e010      	b.n	8017488 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017466:	69bb      	ldr	r3, [r7, #24]
 8017468:	685b      	ldr	r3, [r3, #4]
 801746a:	3314      	adds	r3, #20
 801746c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801746e:	6a3b      	ldr	r3, [r7, #32]
 8017470:	6858      	ldr	r0, [r3, #4]
 8017472:	6a3b      	ldr	r3, [r7, #32]
 8017474:	685b      	ldr	r3, [r3, #4]
 8017476:	891a      	ldrh	r2, [r3, #8]
 8017478:	6a3b      	ldr	r3, [r7, #32]
 801747a:	891b      	ldrh	r3, [r3, #8]
 801747c:	1ad3      	subs	r3, r2, r3
 801747e:	b29b      	uxth	r3, r3
 8017480:	2201      	movs	r2, #1
 8017482:	6939      	ldr	r1, [r7, #16]
 8017484:	f7fa fe54 	bl	8012130 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017488:	6a3b      	ldr	r3, [r7, #32]
 801748a:	68db      	ldr	r3, [r3, #12]
 801748c:	685b      	ldr	r3, [r3, #4]
 801748e:	4618      	mov	r0, r3
 8017490:	f7f9 f91c 	bl	80106cc <lwip_htonl>
 8017494:	4603      	mov	r3, r0
 8017496:	3301      	adds	r3, #1
 8017498:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	1ad3      	subs	r3, r2, r3
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	da02      	bge.n	80174ac <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	68fa      	ldr	r2, [r7, #12]
 80174aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80174ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174b0:	2200      	movs	r2, #0
 80174b2:	69b9      	ldr	r1, [r7, #24]
 80174b4:	6878      	ldr	r0, [r7, #4]
 80174b6:	f7ff fdf1 	bl	801709c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80174ba:	687a      	ldr	r2, [r7, #4]
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	3304      	adds	r3, #4
 80174c0:	69b9      	ldr	r1, [r7, #24]
 80174c2:	6878      	ldr	r0, [r7, #4]
 80174c4:	f7ff fe28 	bl	8017118 <tcp_output_control_segment>
 80174c8:	4603      	mov	r3, r0
 80174ca:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80174cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80174d0:	4618      	mov	r0, r3
 80174d2:	372c      	adds	r7, #44	; 0x2c
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bd90      	pop	{r4, r7, pc}
 80174d8:	0801d5b8 	.word	0x0801d5b8
 80174dc:	0801ddb0 	.word	0x0801ddb0
 80174e0:	0801d60c 	.word	0x0801d60c

080174e4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b082      	sub	sp, #8
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80174ec:	f7fa ff0e 	bl	801230c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80174f0:	4b0a      	ldr	r3, [pc, #40]	; (801751c <tcpip_tcp_timer+0x38>)
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d103      	bne.n	8017500 <tcpip_tcp_timer+0x1c>
 80174f8:	4b09      	ldr	r3, [pc, #36]	; (8017520 <tcpip_tcp_timer+0x3c>)
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d005      	beq.n	801750c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017500:	2200      	movs	r2, #0
 8017502:	4908      	ldr	r1, [pc, #32]	; (8017524 <tcpip_tcp_timer+0x40>)
 8017504:	20fa      	movs	r0, #250	; 0xfa
 8017506:	f000 f8f3 	bl	80176f0 <sys_timeout>
 801750a:	e003      	b.n	8017514 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801750c:	4b06      	ldr	r3, [pc, #24]	; (8017528 <tcpip_tcp_timer+0x44>)
 801750e:	2200      	movs	r2, #0
 8017510:	601a      	str	r2, [r3, #0]
  }
}
 8017512:	bf00      	nop
 8017514:	bf00      	nop
 8017516:	3708      	adds	r7, #8
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}
 801751c:	20008624 	.word	0x20008624
 8017520:	20008628 	.word	0x20008628
 8017524:	080174e5 	.word	0x080174e5
 8017528:	20008670 	.word	0x20008670

0801752c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017530:	4b0a      	ldr	r3, [pc, #40]	; (801755c <tcp_timer_needed+0x30>)
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	2b00      	cmp	r3, #0
 8017536:	d10f      	bne.n	8017558 <tcp_timer_needed+0x2c>
 8017538:	4b09      	ldr	r3, [pc, #36]	; (8017560 <tcp_timer_needed+0x34>)
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d103      	bne.n	8017548 <tcp_timer_needed+0x1c>
 8017540:	4b08      	ldr	r3, [pc, #32]	; (8017564 <tcp_timer_needed+0x38>)
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d007      	beq.n	8017558 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017548:	4b04      	ldr	r3, [pc, #16]	; (801755c <tcp_timer_needed+0x30>)
 801754a:	2201      	movs	r2, #1
 801754c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801754e:	2200      	movs	r2, #0
 8017550:	4905      	ldr	r1, [pc, #20]	; (8017568 <tcp_timer_needed+0x3c>)
 8017552:	20fa      	movs	r0, #250	; 0xfa
 8017554:	f000 f8cc 	bl	80176f0 <sys_timeout>
  }
}
 8017558:	bf00      	nop
 801755a:	bd80      	pop	{r7, pc}
 801755c:	20008670 	.word	0x20008670
 8017560:	20008624 	.word	0x20008624
 8017564:	20008628 	.word	0x20008628
 8017568:	080174e5 	.word	0x080174e5

0801756c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801756c:	b580      	push	{r7, lr}
 801756e:	b086      	sub	sp, #24
 8017570:	af00      	add	r7, sp, #0
 8017572:	60f8      	str	r0, [r7, #12]
 8017574:	60b9      	str	r1, [r7, #8]
 8017576:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017578:	2006      	movs	r0, #6
 801757a:	f7f9 fd09 	bl	8010f90 <memp_malloc>
 801757e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017580:	693b      	ldr	r3, [r7, #16]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d109      	bne.n	801759a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017586:	693b      	ldr	r3, [r7, #16]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d151      	bne.n	8017630 <sys_timeout_abs+0xc4>
 801758c:	4b2a      	ldr	r3, [pc, #168]	; (8017638 <sys_timeout_abs+0xcc>)
 801758e:	22be      	movs	r2, #190	; 0xbe
 8017590:	492a      	ldr	r1, [pc, #168]	; (801763c <sys_timeout_abs+0xd0>)
 8017592:	482b      	ldr	r0, [pc, #172]	; (8017640 <sys_timeout_abs+0xd4>)
 8017594:	f003 fd66 	bl	801b064 <iprintf>
    return;
 8017598:	e04a      	b.n	8017630 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801759a:	693b      	ldr	r3, [r7, #16]
 801759c:	2200      	movs	r2, #0
 801759e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80175a0:	693b      	ldr	r3, [r7, #16]
 80175a2:	68ba      	ldr	r2, [r7, #8]
 80175a4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80175a6:	693b      	ldr	r3, [r7, #16]
 80175a8:	687a      	ldr	r2, [r7, #4]
 80175aa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80175ac:	693b      	ldr	r3, [r7, #16]
 80175ae:	68fa      	ldr	r2, [r7, #12]
 80175b0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80175b2:	4b24      	ldr	r3, [pc, #144]	; (8017644 <sys_timeout_abs+0xd8>)
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d103      	bne.n	80175c2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80175ba:	4a22      	ldr	r2, [pc, #136]	; (8017644 <sys_timeout_abs+0xd8>)
 80175bc:	693b      	ldr	r3, [r7, #16]
 80175be:	6013      	str	r3, [r2, #0]
    return;
 80175c0:	e037      	b.n	8017632 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80175c2:	693b      	ldr	r3, [r7, #16]
 80175c4:	685a      	ldr	r2, [r3, #4]
 80175c6:	4b1f      	ldr	r3, [pc, #124]	; (8017644 <sys_timeout_abs+0xd8>)
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	685b      	ldr	r3, [r3, #4]
 80175cc:	1ad3      	subs	r3, r2, r3
 80175ce:	0fdb      	lsrs	r3, r3, #31
 80175d0:	f003 0301 	and.w	r3, r3, #1
 80175d4:	b2db      	uxtb	r3, r3
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d007      	beq.n	80175ea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80175da:	4b1a      	ldr	r3, [pc, #104]	; (8017644 <sys_timeout_abs+0xd8>)
 80175dc:	681a      	ldr	r2, [r3, #0]
 80175de:	693b      	ldr	r3, [r7, #16]
 80175e0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80175e2:	4a18      	ldr	r2, [pc, #96]	; (8017644 <sys_timeout_abs+0xd8>)
 80175e4:	693b      	ldr	r3, [r7, #16]
 80175e6:	6013      	str	r3, [r2, #0]
 80175e8:	e023      	b.n	8017632 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80175ea:	4b16      	ldr	r3, [pc, #88]	; (8017644 <sys_timeout_abs+0xd8>)
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	617b      	str	r3, [r7, #20]
 80175f0:	e01a      	b.n	8017628 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80175f2:	697b      	ldr	r3, [r7, #20]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d00b      	beq.n	8017612 <sys_timeout_abs+0xa6>
 80175fa:	693b      	ldr	r3, [r7, #16]
 80175fc:	685a      	ldr	r2, [r3, #4]
 80175fe:	697b      	ldr	r3, [r7, #20]
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	685b      	ldr	r3, [r3, #4]
 8017604:	1ad3      	subs	r3, r2, r3
 8017606:	0fdb      	lsrs	r3, r3, #31
 8017608:	f003 0301 	and.w	r3, r3, #1
 801760c:	b2db      	uxtb	r3, r3
 801760e:	2b00      	cmp	r3, #0
 8017610:	d007      	beq.n	8017622 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017612:	697b      	ldr	r3, [r7, #20]
 8017614:	681a      	ldr	r2, [r3, #0]
 8017616:	693b      	ldr	r3, [r7, #16]
 8017618:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801761a:	697b      	ldr	r3, [r7, #20]
 801761c:	693a      	ldr	r2, [r7, #16]
 801761e:	601a      	str	r2, [r3, #0]
        break;
 8017620:	e007      	b.n	8017632 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017622:	697b      	ldr	r3, [r7, #20]
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	617b      	str	r3, [r7, #20]
 8017628:	697b      	ldr	r3, [r7, #20]
 801762a:	2b00      	cmp	r3, #0
 801762c:	d1e1      	bne.n	80175f2 <sys_timeout_abs+0x86>
 801762e:	e000      	b.n	8017632 <sys_timeout_abs+0xc6>
    return;
 8017630:	bf00      	nop
      }
    }
  }
}
 8017632:	3718      	adds	r7, #24
 8017634:	46bd      	mov	sp, r7
 8017636:	bd80      	pop	{r7, pc}
 8017638:	0801ddd4 	.word	0x0801ddd4
 801763c:	0801de08 	.word	0x0801de08
 8017640:	0801de48 	.word	0x0801de48
 8017644:	20008668 	.word	0x20008668

08017648 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017648:	b580      	push	{r7, lr}
 801764a:	b086      	sub	sp, #24
 801764c:	af00      	add	r7, sp, #0
 801764e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017654:	697b      	ldr	r3, [r7, #20]
 8017656:	685b      	ldr	r3, [r3, #4]
 8017658:	4798      	blx	r3

  now = sys_now();
 801765a:	f7f2 fd03 	bl	800a064 <sys_now>
 801765e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017660:	697b      	ldr	r3, [r7, #20]
 8017662:	681a      	ldr	r2, [r3, #0]
 8017664:	4b0f      	ldr	r3, [pc, #60]	; (80176a4 <lwip_cyclic_timer+0x5c>)
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	4413      	add	r3, r2
 801766a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801766c:	68fa      	ldr	r2, [r7, #12]
 801766e:	693b      	ldr	r3, [r7, #16]
 8017670:	1ad3      	subs	r3, r2, r3
 8017672:	0fdb      	lsrs	r3, r3, #31
 8017674:	f003 0301 	and.w	r3, r3, #1
 8017678:	b2db      	uxtb	r3, r3
 801767a:	2b00      	cmp	r3, #0
 801767c:	d009      	beq.n	8017692 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801767e:	697b      	ldr	r3, [r7, #20]
 8017680:	681a      	ldr	r2, [r3, #0]
 8017682:	693b      	ldr	r3, [r7, #16]
 8017684:	4413      	add	r3, r2
 8017686:	687a      	ldr	r2, [r7, #4]
 8017688:	4907      	ldr	r1, [pc, #28]	; (80176a8 <lwip_cyclic_timer+0x60>)
 801768a:	4618      	mov	r0, r3
 801768c:	f7ff ff6e 	bl	801756c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017690:	e004      	b.n	801769c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017692:	687a      	ldr	r2, [r7, #4]
 8017694:	4904      	ldr	r1, [pc, #16]	; (80176a8 <lwip_cyclic_timer+0x60>)
 8017696:	68f8      	ldr	r0, [r7, #12]
 8017698:	f7ff ff68 	bl	801756c <sys_timeout_abs>
}
 801769c:	bf00      	nop
 801769e:	3718      	adds	r7, #24
 80176a0:	46bd      	mov	sp, r7
 80176a2:	bd80      	pop	{r7, pc}
 80176a4:	2000866c 	.word	0x2000866c
 80176a8:	08017649 	.word	0x08017649

080176ac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b082      	sub	sp, #8
 80176b0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80176b2:	2301      	movs	r3, #1
 80176b4:	607b      	str	r3, [r7, #4]
 80176b6:	e00e      	b.n	80176d6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80176b8:	4a0b      	ldr	r2, [pc, #44]	; (80176e8 <sys_timeouts_init+0x3c>)
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	00db      	lsls	r3, r3, #3
 80176c4:	4a08      	ldr	r2, [pc, #32]	; (80176e8 <sys_timeouts_init+0x3c>)
 80176c6:	4413      	add	r3, r2
 80176c8:	461a      	mov	r2, r3
 80176ca:	4908      	ldr	r1, [pc, #32]	; (80176ec <sys_timeouts_init+0x40>)
 80176cc:	f000 f810 	bl	80176f0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	3301      	adds	r3, #1
 80176d4:	607b      	str	r3, [r7, #4]
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	2b02      	cmp	r3, #2
 80176da:	d9ed      	bls.n	80176b8 <sys_timeouts_init+0xc>
  }
}
 80176dc:	bf00      	nop
 80176de:	bf00      	nop
 80176e0:	3708      	adds	r7, #8
 80176e2:	46bd      	mov	sp, r7
 80176e4:	bd80      	pop	{r7, pc}
 80176e6:	bf00      	nop
 80176e8:	0801ead4 	.word	0x0801ead4
 80176ec:	08017649 	.word	0x08017649

080176f0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b086      	sub	sp, #24
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	60f8      	str	r0, [r7, #12]
 80176f8:	60b9      	str	r1, [r7, #8]
 80176fa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017702:	d306      	bcc.n	8017712 <sys_timeout+0x22>
 8017704:	4b0a      	ldr	r3, [pc, #40]	; (8017730 <sys_timeout+0x40>)
 8017706:	f240 1229 	movw	r2, #297	; 0x129
 801770a:	490a      	ldr	r1, [pc, #40]	; (8017734 <sys_timeout+0x44>)
 801770c:	480a      	ldr	r0, [pc, #40]	; (8017738 <sys_timeout+0x48>)
 801770e:	f003 fca9 	bl	801b064 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017712:	f7f2 fca7 	bl	800a064 <sys_now>
 8017716:	4602      	mov	r2, r0
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	4413      	add	r3, r2
 801771c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801771e:	687a      	ldr	r2, [r7, #4]
 8017720:	68b9      	ldr	r1, [r7, #8]
 8017722:	6978      	ldr	r0, [r7, #20]
 8017724:	f7ff ff22 	bl	801756c <sys_timeout_abs>
#endif
}
 8017728:	bf00      	nop
 801772a:	3718      	adds	r7, #24
 801772c:	46bd      	mov	sp, r7
 801772e:	bd80      	pop	{r7, pc}
 8017730:	0801ddd4 	.word	0x0801ddd4
 8017734:	0801de70 	.word	0x0801de70
 8017738:	0801de48 	.word	0x0801de48

0801773c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801773c:	b580      	push	{r7, lr}
 801773e:	b084      	sub	sp, #16
 8017740:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017742:	f7f2 fc8f 	bl	800a064 <sys_now>
 8017746:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8017748:	4b1a      	ldr	r3, [pc, #104]	; (80177b4 <sys_check_timeouts+0x78>)
 801774a:	781b      	ldrb	r3, [r3, #0]
 801774c:	b2db      	uxtb	r3, r3
 801774e:	2b00      	cmp	r3, #0
 8017750:	d001      	beq.n	8017756 <sys_check_timeouts+0x1a>
 8017752:	f7f9 ffc9 	bl	80116e8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8017756:	4b18      	ldr	r3, [pc, #96]	; (80177b8 <sys_check_timeouts+0x7c>)
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801775c:	68bb      	ldr	r3, [r7, #8]
 801775e:	2b00      	cmp	r3, #0
 8017760:	d022      	beq.n	80177a8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017762:	68bb      	ldr	r3, [r7, #8]
 8017764:	685b      	ldr	r3, [r3, #4]
 8017766:	68fa      	ldr	r2, [r7, #12]
 8017768:	1ad3      	subs	r3, r2, r3
 801776a:	0fdb      	lsrs	r3, r3, #31
 801776c:	f003 0301 	and.w	r3, r3, #1
 8017770:	b2db      	uxtb	r3, r3
 8017772:	2b00      	cmp	r3, #0
 8017774:	d11a      	bne.n	80177ac <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017776:	68bb      	ldr	r3, [r7, #8]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	4a0f      	ldr	r2, [pc, #60]	; (80177b8 <sys_check_timeouts+0x7c>)
 801777c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801777e:	68bb      	ldr	r3, [r7, #8]
 8017780:	689b      	ldr	r3, [r3, #8]
 8017782:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017784:	68bb      	ldr	r3, [r7, #8]
 8017786:	68db      	ldr	r3, [r3, #12]
 8017788:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801778a:	68bb      	ldr	r3, [r7, #8]
 801778c:	685b      	ldr	r3, [r3, #4]
 801778e:	4a0b      	ldr	r2, [pc, #44]	; (80177bc <sys_check_timeouts+0x80>)
 8017790:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017792:	68b9      	ldr	r1, [r7, #8]
 8017794:	2006      	movs	r0, #6
 8017796:	f7f9 fc6b 	bl	8011070 <memp_free>
    if (handler != NULL) {
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	2b00      	cmp	r3, #0
 801779e:	d0d3      	beq.n	8017748 <sys_check_timeouts+0xc>
      handler(arg);
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	6838      	ldr	r0, [r7, #0]
 80177a4:	4798      	blx	r3
  do {
 80177a6:	e7cf      	b.n	8017748 <sys_check_timeouts+0xc>
      return;
 80177a8:	bf00      	nop
 80177aa:	e000      	b.n	80177ae <sys_check_timeouts+0x72>
      return;
 80177ac:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80177ae:	3710      	adds	r7, #16
 80177b0:	46bd      	mov	sp, r7
 80177b2:	bd80      	pop	{r7, pc}
 80177b4:	20008615 	.word	0x20008615
 80177b8:	20008668 	.word	0x20008668
 80177bc:	2000866c 	.word	0x2000866c

080177c0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80177c0:	b580      	push	{r7, lr}
 80177c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80177c4:	f003 fb4e 	bl	801ae64 <rand>
 80177c8:	4603      	mov	r3, r0
 80177ca:	b29b      	uxth	r3, r3
 80177cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80177d0:	b29b      	uxth	r3, r3
 80177d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80177d6:	b29a      	uxth	r2, r3
 80177d8:	4b01      	ldr	r3, [pc, #4]	; (80177e0 <udp_init+0x20>)
 80177da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80177dc:	bf00      	nop
 80177de:	bd80      	pop	{r7, pc}
 80177e0:	20000134 	.word	0x20000134

080177e4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b084      	sub	sp, #16
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	60f8      	str	r0, [r7, #12]
 80177ec:	60b9      	str	r1, [r7, #8]
 80177ee:	4613      	mov	r3, r2
 80177f0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d105      	bne.n	8017804 <udp_input_local_match+0x20>
 80177f8:	4b27      	ldr	r3, [pc, #156]	; (8017898 <udp_input_local_match+0xb4>)
 80177fa:	2287      	movs	r2, #135	; 0x87
 80177fc:	4927      	ldr	r1, [pc, #156]	; (801789c <udp_input_local_match+0xb8>)
 80177fe:	4828      	ldr	r0, [pc, #160]	; (80178a0 <udp_input_local_match+0xbc>)
 8017800:	f003 fc30 	bl	801b064 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017804:	68bb      	ldr	r3, [r7, #8]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d105      	bne.n	8017816 <udp_input_local_match+0x32>
 801780a:	4b23      	ldr	r3, [pc, #140]	; (8017898 <udp_input_local_match+0xb4>)
 801780c:	2288      	movs	r2, #136	; 0x88
 801780e:	4925      	ldr	r1, [pc, #148]	; (80178a4 <udp_input_local_match+0xc0>)
 8017810:	4823      	ldr	r0, [pc, #140]	; (80178a0 <udp_input_local_match+0xbc>)
 8017812:	f003 fc27 	bl	801b064 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	7a1b      	ldrb	r3, [r3, #8]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d00b      	beq.n	8017836 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	7a1a      	ldrb	r2, [r3, #8]
 8017822:	4b21      	ldr	r3, [pc, #132]	; (80178a8 <udp_input_local_match+0xc4>)
 8017824:	685b      	ldr	r3, [r3, #4]
 8017826:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801782a:	3301      	adds	r3, #1
 801782c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801782e:	429a      	cmp	r2, r3
 8017830:	d001      	beq.n	8017836 <udp_input_local_match+0x52>
    return 0;
 8017832:	2300      	movs	r3, #0
 8017834:	e02b      	b.n	801788e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017836:	79fb      	ldrb	r3, [r7, #7]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d018      	beq.n	801786e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	2b00      	cmp	r3, #0
 8017840:	d013      	beq.n	801786a <udp_input_local_match+0x86>
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d00f      	beq.n	801786a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801784a:	4b17      	ldr	r3, [pc, #92]	; (80178a8 <udp_input_local_match+0xc4>)
 801784c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801784e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017852:	d00a      	beq.n	801786a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	681a      	ldr	r2, [r3, #0]
 8017858:	4b13      	ldr	r3, [pc, #76]	; (80178a8 <udp_input_local_match+0xc4>)
 801785a:	695b      	ldr	r3, [r3, #20]
 801785c:	405a      	eors	r2, r3
 801785e:	68bb      	ldr	r3, [r7, #8]
 8017860:	3308      	adds	r3, #8
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017866:	2b00      	cmp	r3, #0
 8017868:	d110      	bne.n	801788c <udp_input_local_match+0xa8>
          return 1;
 801786a:	2301      	movs	r3, #1
 801786c:	e00f      	b.n	801788e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d009      	beq.n	8017888 <udp_input_local_match+0xa4>
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d005      	beq.n	8017888 <udp_input_local_match+0xa4>
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	681a      	ldr	r2, [r3, #0]
 8017880:	4b09      	ldr	r3, [pc, #36]	; (80178a8 <udp_input_local_match+0xc4>)
 8017882:	695b      	ldr	r3, [r3, #20]
 8017884:	429a      	cmp	r2, r3
 8017886:	d101      	bne.n	801788c <udp_input_local_match+0xa8>
        return 1;
 8017888:	2301      	movs	r3, #1
 801788a:	e000      	b.n	801788e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801788c:	2300      	movs	r3, #0
}
 801788e:	4618      	mov	r0, r3
 8017890:	3710      	adds	r7, #16
 8017892:	46bd      	mov	sp, r7
 8017894:	bd80      	pop	{r7, pc}
 8017896:	bf00      	nop
 8017898:	0801debc 	.word	0x0801debc
 801789c:	0801deec 	.word	0x0801deec
 80178a0:	0801df10 	.word	0x0801df10
 80178a4:	0801df38 	.word	0x0801df38
 80178a8:	200054e8 	.word	0x200054e8

080178ac <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80178ac:	b590      	push	{r4, r7, lr}
 80178ae:	b08d      	sub	sp, #52	; 0x34
 80178b0:	af02      	add	r7, sp, #8
 80178b2:	6078      	str	r0, [r7, #4]
 80178b4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80178b6:	2300      	movs	r3, #0
 80178b8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d105      	bne.n	80178cc <udp_input+0x20>
 80178c0:	4b7c      	ldr	r3, [pc, #496]	; (8017ab4 <udp_input+0x208>)
 80178c2:	22cf      	movs	r2, #207	; 0xcf
 80178c4:	497c      	ldr	r1, [pc, #496]	; (8017ab8 <udp_input+0x20c>)
 80178c6:	487d      	ldr	r0, [pc, #500]	; (8017abc <udp_input+0x210>)
 80178c8:	f003 fbcc 	bl	801b064 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80178cc:	683b      	ldr	r3, [r7, #0]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d105      	bne.n	80178de <udp_input+0x32>
 80178d2:	4b78      	ldr	r3, [pc, #480]	; (8017ab4 <udp_input+0x208>)
 80178d4:	22d0      	movs	r2, #208	; 0xd0
 80178d6:	497a      	ldr	r1, [pc, #488]	; (8017ac0 <udp_input+0x214>)
 80178d8:	4878      	ldr	r0, [pc, #480]	; (8017abc <udp_input+0x210>)
 80178da:	f003 fbc3 	bl	801b064 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	895b      	ldrh	r3, [r3, #10]
 80178e2:	2b07      	cmp	r3, #7
 80178e4:	d803      	bhi.n	80178ee <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80178e6:	6878      	ldr	r0, [r7, #4]
 80178e8:	f7fa fa38 	bl	8011d5c <pbuf_free>
    goto end;
 80178ec:	e0de      	b.n	8017aac <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	685b      	ldr	r3, [r3, #4]
 80178f2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80178f4:	4b73      	ldr	r3, [pc, #460]	; (8017ac4 <udp_input+0x218>)
 80178f6:	695b      	ldr	r3, [r3, #20]
 80178f8:	4a72      	ldr	r2, [pc, #456]	; (8017ac4 <udp_input+0x218>)
 80178fa:	6812      	ldr	r2, [r2, #0]
 80178fc:	4611      	mov	r1, r2
 80178fe:	4618      	mov	r0, r3
 8017900:	f001 fc88 	bl	8019214 <ip4_addr_isbroadcast_u32>
 8017904:	4603      	mov	r3, r0
 8017906:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017908:	697b      	ldr	r3, [r7, #20]
 801790a:	881b      	ldrh	r3, [r3, #0]
 801790c:	b29b      	uxth	r3, r3
 801790e:	4618      	mov	r0, r3
 8017910:	f7f8 fec7 	bl	80106a2 <lwip_htons>
 8017914:	4603      	mov	r3, r0
 8017916:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017918:	697b      	ldr	r3, [r7, #20]
 801791a:	885b      	ldrh	r3, [r3, #2]
 801791c:	b29b      	uxth	r3, r3
 801791e:	4618      	mov	r0, r3
 8017920:	f7f8 febf 	bl	80106a2 <lwip_htons>
 8017924:	4603      	mov	r3, r0
 8017926:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017928:	2300      	movs	r3, #0
 801792a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801792c:	2300      	movs	r3, #0
 801792e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017930:	2300      	movs	r3, #0
 8017932:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017934:	4b64      	ldr	r3, [pc, #400]	; (8017ac8 <udp_input+0x21c>)
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	627b      	str	r3, [r7, #36]	; 0x24
 801793a:	e054      	b.n	80179e6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801793e:	8a5b      	ldrh	r3, [r3, #18]
 8017940:	89fa      	ldrh	r2, [r7, #14]
 8017942:	429a      	cmp	r2, r3
 8017944:	d14a      	bne.n	80179dc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017946:	7cfb      	ldrb	r3, [r7, #19]
 8017948:	461a      	mov	r2, r3
 801794a:	6839      	ldr	r1, [r7, #0]
 801794c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801794e:	f7ff ff49 	bl	80177e4 <udp_input_local_match>
 8017952:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017954:	2b00      	cmp	r3, #0
 8017956:	d041      	beq.n	80179dc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801795a:	7c1b      	ldrb	r3, [r3, #16]
 801795c:	f003 0304 	and.w	r3, r3, #4
 8017960:	2b00      	cmp	r3, #0
 8017962:	d11d      	bne.n	80179a0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017964:	69fb      	ldr	r3, [r7, #28]
 8017966:	2b00      	cmp	r3, #0
 8017968:	d102      	bne.n	8017970 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801796c:	61fb      	str	r3, [r7, #28]
 801796e:	e017      	b.n	80179a0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017970:	7cfb      	ldrb	r3, [r7, #19]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d014      	beq.n	80179a0 <udp_input+0xf4>
 8017976:	4b53      	ldr	r3, [pc, #332]	; (8017ac4 <udp_input+0x218>)
 8017978:	695b      	ldr	r3, [r3, #20]
 801797a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801797e:	d10f      	bne.n	80179a0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017980:	69fb      	ldr	r3, [r7, #28]
 8017982:	681a      	ldr	r2, [r3, #0]
 8017984:	683b      	ldr	r3, [r7, #0]
 8017986:	3304      	adds	r3, #4
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	429a      	cmp	r2, r3
 801798c:	d008      	beq.n	80179a0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017990:	681a      	ldr	r2, [r3, #0]
 8017992:	683b      	ldr	r3, [r7, #0]
 8017994:	3304      	adds	r3, #4
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	429a      	cmp	r2, r3
 801799a:	d101      	bne.n	80179a0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801799e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80179a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179a2:	8a9b      	ldrh	r3, [r3, #20]
 80179a4:	8a3a      	ldrh	r2, [r7, #16]
 80179a6:	429a      	cmp	r2, r3
 80179a8:	d118      	bne.n	80179dc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80179aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179ac:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d005      	beq.n	80179be <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80179b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179b4:	685a      	ldr	r2, [r3, #4]
 80179b6:	4b43      	ldr	r3, [pc, #268]	; (8017ac4 <udp_input+0x218>)
 80179b8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d10e      	bne.n	80179dc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80179be:	6a3b      	ldr	r3, [r7, #32]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d014      	beq.n	80179ee <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80179c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179c6:	68da      	ldr	r2, [r3, #12]
 80179c8:	6a3b      	ldr	r3, [r7, #32]
 80179ca:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80179cc:	4b3e      	ldr	r3, [pc, #248]	; (8017ac8 <udp_input+0x21c>)
 80179ce:	681a      	ldr	r2, [r3, #0]
 80179d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179d2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80179d4:	4a3c      	ldr	r2, [pc, #240]	; (8017ac8 <udp_input+0x21c>)
 80179d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179d8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80179da:	e008      	b.n	80179ee <udp_input+0x142>
      }
    }

    prev = pcb;
 80179dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179de:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80179e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179e2:	68db      	ldr	r3, [r3, #12]
 80179e4:	627b      	str	r3, [r7, #36]	; 0x24
 80179e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d1a7      	bne.n	801793c <udp_input+0x90>
 80179ec:	e000      	b.n	80179f0 <udp_input+0x144>
        break;
 80179ee:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80179f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d101      	bne.n	80179fa <udp_input+0x14e>
    pcb = uncon_pcb;
 80179f6:	69fb      	ldr	r3, [r7, #28]
 80179f8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80179fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d002      	beq.n	8017a06 <udp_input+0x15a>
    for_us = 1;
 8017a00:	2301      	movs	r3, #1
 8017a02:	76fb      	strb	r3, [r7, #27]
 8017a04:	e00a      	b.n	8017a1c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017a06:	683b      	ldr	r3, [r7, #0]
 8017a08:	3304      	adds	r3, #4
 8017a0a:	681a      	ldr	r2, [r3, #0]
 8017a0c:	4b2d      	ldr	r3, [pc, #180]	; (8017ac4 <udp_input+0x218>)
 8017a0e:	695b      	ldr	r3, [r3, #20]
 8017a10:	429a      	cmp	r2, r3
 8017a12:	bf0c      	ite	eq
 8017a14:	2301      	moveq	r3, #1
 8017a16:	2300      	movne	r3, #0
 8017a18:	b2db      	uxtb	r3, r3
 8017a1a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017a1c:	7efb      	ldrb	r3, [r7, #27]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d041      	beq.n	8017aa6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017a22:	2108      	movs	r1, #8
 8017a24:	6878      	ldr	r0, [r7, #4]
 8017a26:	f7fa f913 	bl	8011c50 <pbuf_remove_header>
 8017a2a:	4603      	mov	r3, r0
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d00a      	beq.n	8017a46 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017a30:	4b20      	ldr	r3, [pc, #128]	; (8017ab4 <udp_input+0x208>)
 8017a32:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017a36:	4925      	ldr	r1, [pc, #148]	; (8017acc <udp_input+0x220>)
 8017a38:	4820      	ldr	r0, [pc, #128]	; (8017abc <udp_input+0x210>)
 8017a3a:	f003 fb13 	bl	801b064 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017a3e:	6878      	ldr	r0, [r7, #4]
 8017a40:	f7fa f98c 	bl	8011d5c <pbuf_free>
      goto end;
 8017a44:	e032      	b.n	8017aac <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d012      	beq.n	8017a72 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a4e:	699b      	ldr	r3, [r3, #24]
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d00a      	beq.n	8017a6a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a56:	699c      	ldr	r4, [r3, #24]
 8017a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a5a:	69d8      	ldr	r0, [r3, #28]
 8017a5c:	8a3b      	ldrh	r3, [r7, #16]
 8017a5e:	9300      	str	r3, [sp, #0]
 8017a60:	4b1b      	ldr	r3, [pc, #108]	; (8017ad0 <udp_input+0x224>)
 8017a62:	687a      	ldr	r2, [r7, #4]
 8017a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017a66:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017a68:	e021      	b.n	8017aae <udp_input+0x202>
        pbuf_free(p);
 8017a6a:	6878      	ldr	r0, [r7, #4]
 8017a6c:	f7fa f976 	bl	8011d5c <pbuf_free>
        goto end;
 8017a70:	e01c      	b.n	8017aac <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017a72:	7cfb      	ldrb	r3, [r7, #19]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d112      	bne.n	8017a9e <udp_input+0x1f2>
 8017a78:	4b12      	ldr	r3, [pc, #72]	; (8017ac4 <udp_input+0x218>)
 8017a7a:	695b      	ldr	r3, [r3, #20]
 8017a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017a80:	2be0      	cmp	r3, #224	; 0xe0
 8017a82:	d00c      	beq.n	8017a9e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017a84:	4b0f      	ldr	r3, [pc, #60]	; (8017ac4 <udp_input+0x218>)
 8017a86:	899b      	ldrh	r3, [r3, #12]
 8017a88:	3308      	adds	r3, #8
 8017a8a:	b29b      	uxth	r3, r3
 8017a8c:	b21b      	sxth	r3, r3
 8017a8e:	4619      	mov	r1, r3
 8017a90:	6878      	ldr	r0, [r7, #4]
 8017a92:	f7fa f950 	bl	8011d36 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017a96:	2103      	movs	r1, #3
 8017a98:	6878      	ldr	r0, [r7, #4]
 8017a9a:	f001 f89b 	bl	8018bd4 <icmp_dest_unreach>
      pbuf_free(p);
 8017a9e:	6878      	ldr	r0, [r7, #4]
 8017aa0:	f7fa f95c 	bl	8011d5c <pbuf_free>
  return;
 8017aa4:	e003      	b.n	8017aae <udp_input+0x202>
    pbuf_free(p);
 8017aa6:	6878      	ldr	r0, [r7, #4]
 8017aa8:	f7fa f958 	bl	8011d5c <pbuf_free>
  return;
 8017aac:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017aae:	372c      	adds	r7, #44	; 0x2c
 8017ab0:	46bd      	mov	sp, r7
 8017ab2:	bd90      	pop	{r4, r7, pc}
 8017ab4:	0801debc 	.word	0x0801debc
 8017ab8:	0801df60 	.word	0x0801df60
 8017abc:	0801df10 	.word	0x0801df10
 8017ac0:	0801df78 	.word	0x0801df78
 8017ac4:	200054e8 	.word	0x200054e8
 8017ac8:	20008674 	.word	0x20008674
 8017acc:	0801df94 	.word	0x0801df94
 8017ad0:	200054f8 	.word	0x200054f8

08017ad4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017ad4:	b480      	push	{r7}
 8017ad6:	b085      	sub	sp, #20
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	6078      	str	r0, [r7, #4]
 8017adc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d01e      	beq.n	8017b22 <udp_netif_ip_addr_changed+0x4e>
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	681b      	ldr	r3, [r3, #0]
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d01a      	beq.n	8017b22 <udp_netif_ip_addr_changed+0x4e>
 8017aec:	683b      	ldr	r3, [r7, #0]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d017      	beq.n	8017b22 <udp_netif_ip_addr_changed+0x4e>
 8017af2:	683b      	ldr	r3, [r7, #0]
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d013      	beq.n	8017b22 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017afa:	4b0d      	ldr	r3, [pc, #52]	; (8017b30 <udp_netif_ip_addr_changed+0x5c>)
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	60fb      	str	r3, [r7, #12]
 8017b00:	e00c      	b.n	8017b1c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	681a      	ldr	r2, [r3, #0]
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	429a      	cmp	r2, r3
 8017b0c:	d103      	bne.n	8017b16 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8017b0e:	683b      	ldr	r3, [r7, #0]
 8017b10:	681a      	ldr	r2, [r3, #0]
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	68db      	ldr	r3, [r3, #12]
 8017b1a:	60fb      	str	r3, [r7, #12]
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d1ef      	bne.n	8017b02 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8017b22:	bf00      	nop
 8017b24:	3714      	adds	r7, #20
 8017b26:	46bd      	mov	sp, r7
 8017b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b2c:	4770      	bx	lr
 8017b2e:	bf00      	nop
 8017b30:	20008674 	.word	0x20008674

08017b34 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017b34:	b580      	push	{r7, lr}
 8017b36:	b082      	sub	sp, #8
 8017b38:	af00      	add	r7, sp, #0
 8017b3a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017b3c:	4915      	ldr	r1, [pc, #84]	; (8017b94 <etharp_free_entry+0x60>)
 8017b3e:	687a      	ldr	r2, [r7, #4]
 8017b40:	4613      	mov	r3, r2
 8017b42:	005b      	lsls	r3, r3, #1
 8017b44:	4413      	add	r3, r2
 8017b46:	00db      	lsls	r3, r3, #3
 8017b48:	440b      	add	r3, r1
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d013      	beq.n	8017b78 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017b50:	4910      	ldr	r1, [pc, #64]	; (8017b94 <etharp_free_entry+0x60>)
 8017b52:	687a      	ldr	r2, [r7, #4]
 8017b54:	4613      	mov	r3, r2
 8017b56:	005b      	lsls	r3, r3, #1
 8017b58:	4413      	add	r3, r2
 8017b5a:	00db      	lsls	r3, r3, #3
 8017b5c:	440b      	add	r3, r1
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	4618      	mov	r0, r3
 8017b62:	f7fa f8fb 	bl	8011d5c <pbuf_free>
    arp_table[i].q = NULL;
 8017b66:	490b      	ldr	r1, [pc, #44]	; (8017b94 <etharp_free_entry+0x60>)
 8017b68:	687a      	ldr	r2, [r7, #4]
 8017b6a:	4613      	mov	r3, r2
 8017b6c:	005b      	lsls	r3, r3, #1
 8017b6e:	4413      	add	r3, r2
 8017b70:	00db      	lsls	r3, r3, #3
 8017b72:	440b      	add	r3, r1
 8017b74:	2200      	movs	r2, #0
 8017b76:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017b78:	4906      	ldr	r1, [pc, #24]	; (8017b94 <etharp_free_entry+0x60>)
 8017b7a:	687a      	ldr	r2, [r7, #4]
 8017b7c:	4613      	mov	r3, r2
 8017b7e:	005b      	lsls	r3, r3, #1
 8017b80:	4413      	add	r3, r2
 8017b82:	00db      	lsls	r3, r3, #3
 8017b84:	440b      	add	r3, r1
 8017b86:	3314      	adds	r3, #20
 8017b88:	2200      	movs	r2, #0
 8017b8a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8017b8c:	bf00      	nop
 8017b8e:	3708      	adds	r7, #8
 8017b90:	46bd      	mov	sp, r7
 8017b92:	bd80      	pop	{r7, pc}
 8017b94:	20008678 	.word	0x20008678

08017b98 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	b082      	sub	sp, #8
 8017b9c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	607b      	str	r3, [r7, #4]
 8017ba2:	e096      	b.n	8017cd2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8017ba4:	494f      	ldr	r1, [pc, #316]	; (8017ce4 <etharp_tmr+0x14c>)
 8017ba6:	687a      	ldr	r2, [r7, #4]
 8017ba8:	4613      	mov	r3, r2
 8017baa:	005b      	lsls	r3, r3, #1
 8017bac:	4413      	add	r3, r2
 8017bae:	00db      	lsls	r3, r3, #3
 8017bb0:	440b      	add	r3, r1
 8017bb2:	3314      	adds	r3, #20
 8017bb4:	781b      	ldrb	r3, [r3, #0]
 8017bb6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017bb8:	78fb      	ldrb	r3, [r7, #3]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	f000 8086 	beq.w	8017ccc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017bc0:	4948      	ldr	r1, [pc, #288]	; (8017ce4 <etharp_tmr+0x14c>)
 8017bc2:	687a      	ldr	r2, [r7, #4]
 8017bc4:	4613      	mov	r3, r2
 8017bc6:	005b      	lsls	r3, r3, #1
 8017bc8:	4413      	add	r3, r2
 8017bca:	00db      	lsls	r3, r3, #3
 8017bcc:	440b      	add	r3, r1
 8017bce:	3312      	adds	r3, #18
 8017bd0:	881b      	ldrh	r3, [r3, #0]
 8017bd2:	3301      	adds	r3, #1
 8017bd4:	b298      	uxth	r0, r3
 8017bd6:	4943      	ldr	r1, [pc, #268]	; (8017ce4 <etharp_tmr+0x14c>)
 8017bd8:	687a      	ldr	r2, [r7, #4]
 8017bda:	4613      	mov	r3, r2
 8017bdc:	005b      	lsls	r3, r3, #1
 8017bde:	4413      	add	r3, r2
 8017be0:	00db      	lsls	r3, r3, #3
 8017be2:	440b      	add	r3, r1
 8017be4:	3312      	adds	r3, #18
 8017be6:	4602      	mov	r2, r0
 8017be8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017bea:	493e      	ldr	r1, [pc, #248]	; (8017ce4 <etharp_tmr+0x14c>)
 8017bec:	687a      	ldr	r2, [r7, #4]
 8017bee:	4613      	mov	r3, r2
 8017bf0:	005b      	lsls	r3, r3, #1
 8017bf2:	4413      	add	r3, r2
 8017bf4:	00db      	lsls	r3, r3, #3
 8017bf6:	440b      	add	r3, r1
 8017bf8:	3312      	adds	r3, #18
 8017bfa:	881b      	ldrh	r3, [r3, #0]
 8017bfc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017c00:	d215      	bcs.n	8017c2e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017c02:	4938      	ldr	r1, [pc, #224]	; (8017ce4 <etharp_tmr+0x14c>)
 8017c04:	687a      	ldr	r2, [r7, #4]
 8017c06:	4613      	mov	r3, r2
 8017c08:	005b      	lsls	r3, r3, #1
 8017c0a:	4413      	add	r3, r2
 8017c0c:	00db      	lsls	r3, r3, #3
 8017c0e:	440b      	add	r3, r1
 8017c10:	3314      	adds	r3, #20
 8017c12:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017c14:	2b01      	cmp	r3, #1
 8017c16:	d10e      	bne.n	8017c36 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017c18:	4932      	ldr	r1, [pc, #200]	; (8017ce4 <etharp_tmr+0x14c>)
 8017c1a:	687a      	ldr	r2, [r7, #4]
 8017c1c:	4613      	mov	r3, r2
 8017c1e:	005b      	lsls	r3, r3, #1
 8017c20:	4413      	add	r3, r2
 8017c22:	00db      	lsls	r3, r3, #3
 8017c24:	440b      	add	r3, r1
 8017c26:	3312      	adds	r3, #18
 8017c28:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017c2a:	2b04      	cmp	r3, #4
 8017c2c:	d903      	bls.n	8017c36 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017c2e:	6878      	ldr	r0, [r7, #4]
 8017c30:	f7ff ff80 	bl	8017b34 <etharp_free_entry>
 8017c34:	e04a      	b.n	8017ccc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8017c36:	492b      	ldr	r1, [pc, #172]	; (8017ce4 <etharp_tmr+0x14c>)
 8017c38:	687a      	ldr	r2, [r7, #4]
 8017c3a:	4613      	mov	r3, r2
 8017c3c:	005b      	lsls	r3, r3, #1
 8017c3e:	4413      	add	r3, r2
 8017c40:	00db      	lsls	r3, r3, #3
 8017c42:	440b      	add	r3, r1
 8017c44:	3314      	adds	r3, #20
 8017c46:	781b      	ldrb	r3, [r3, #0]
 8017c48:	2b03      	cmp	r3, #3
 8017c4a:	d10a      	bne.n	8017c62 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017c4c:	4925      	ldr	r1, [pc, #148]	; (8017ce4 <etharp_tmr+0x14c>)
 8017c4e:	687a      	ldr	r2, [r7, #4]
 8017c50:	4613      	mov	r3, r2
 8017c52:	005b      	lsls	r3, r3, #1
 8017c54:	4413      	add	r3, r2
 8017c56:	00db      	lsls	r3, r3, #3
 8017c58:	440b      	add	r3, r1
 8017c5a:	3314      	adds	r3, #20
 8017c5c:	2204      	movs	r2, #4
 8017c5e:	701a      	strb	r2, [r3, #0]
 8017c60:	e034      	b.n	8017ccc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017c62:	4920      	ldr	r1, [pc, #128]	; (8017ce4 <etharp_tmr+0x14c>)
 8017c64:	687a      	ldr	r2, [r7, #4]
 8017c66:	4613      	mov	r3, r2
 8017c68:	005b      	lsls	r3, r3, #1
 8017c6a:	4413      	add	r3, r2
 8017c6c:	00db      	lsls	r3, r3, #3
 8017c6e:	440b      	add	r3, r1
 8017c70:	3314      	adds	r3, #20
 8017c72:	781b      	ldrb	r3, [r3, #0]
 8017c74:	2b04      	cmp	r3, #4
 8017c76:	d10a      	bne.n	8017c8e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017c78:	491a      	ldr	r1, [pc, #104]	; (8017ce4 <etharp_tmr+0x14c>)
 8017c7a:	687a      	ldr	r2, [r7, #4]
 8017c7c:	4613      	mov	r3, r2
 8017c7e:	005b      	lsls	r3, r3, #1
 8017c80:	4413      	add	r3, r2
 8017c82:	00db      	lsls	r3, r3, #3
 8017c84:	440b      	add	r3, r1
 8017c86:	3314      	adds	r3, #20
 8017c88:	2202      	movs	r2, #2
 8017c8a:	701a      	strb	r2, [r3, #0]
 8017c8c:	e01e      	b.n	8017ccc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017c8e:	4915      	ldr	r1, [pc, #84]	; (8017ce4 <etharp_tmr+0x14c>)
 8017c90:	687a      	ldr	r2, [r7, #4]
 8017c92:	4613      	mov	r3, r2
 8017c94:	005b      	lsls	r3, r3, #1
 8017c96:	4413      	add	r3, r2
 8017c98:	00db      	lsls	r3, r3, #3
 8017c9a:	440b      	add	r3, r1
 8017c9c:	3314      	adds	r3, #20
 8017c9e:	781b      	ldrb	r3, [r3, #0]
 8017ca0:	2b01      	cmp	r3, #1
 8017ca2:	d113      	bne.n	8017ccc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017ca4:	490f      	ldr	r1, [pc, #60]	; (8017ce4 <etharp_tmr+0x14c>)
 8017ca6:	687a      	ldr	r2, [r7, #4]
 8017ca8:	4613      	mov	r3, r2
 8017caa:	005b      	lsls	r3, r3, #1
 8017cac:	4413      	add	r3, r2
 8017cae:	00db      	lsls	r3, r3, #3
 8017cb0:	440b      	add	r3, r1
 8017cb2:	3308      	adds	r3, #8
 8017cb4:	6818      	ldr	r0, [r3, #0]
 8017cb6:	687a      	ldr	r2, [r7, #4]
 8017cb8:	4613      	mov	r3, r2
 8017cba:	005b      	lsls	r3, r3, #1
 8017cbc:	4413      	add	r3, r2
 8017cbe:	00db      	lsls	r3, r3, #3
 8017cc0:	4a08      	ldr	r2, [pc, #32]	; (8017ce4 <etharp_tmr+0x14c>)
 8017cc2:	4413      	add	r3, r2
 8017cc4:	3304      	adds	r3, #4
 8017cc6:	4619      	mov	r1, r3
 8017cc8:	f000 fe6e 	bl	80189a8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	3301      	adds	r3, #1
 8017cd0:	607b      	str	r3, [r7, #4]
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	2b09      	cmp	r3, #9
 8017cd6:	f77f af65 	ble.w	8017ba4 <etharp_tmr+0xc>
      }
    }
  }
}
 8017cda:	bf00      	nop
 8017cdc:	bf00      	nop
 8017cde:	3708      	adds	r7, #8
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	bd80      	pop	{r7, pc}
 8017ce4:	20008678 	.word	0x20008678

08017ce8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b08a      	sub	sp, #40	; 0x28
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	60f8      	str	r0, [r7, #12]
 8017cf0:	460b      	mov	r3, r1
 8017cf2:	607a      	str	r2, [r7, #4]
 8017cf4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8017cf6:	230a      	movs	r3, #10
 8017cf8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017cfa:	230a      	movs	r3, #10
 8017cfc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8017cfe:	230a      	movs	r3, #10
 8017d00:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8017d02:	2300      	movs	r3, #0
 8017d04:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8017d06:	230a      	movs	r3, #10
 8017d08:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	83bb      	strh	r3, [r7, #28]
 8017d0e:	2300      	movs	r3, #0
 8017d10:	837b      	strh	r3, [r7, #26]
 8017d12:	2300      	movs	r3, #0
 8017d14:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017d16:	2300      	movs	r3, #0
 8017d18:	843b      	strh	r3, [r7, #32]
 8017d1a:	e0ae      	b.n	8017e7a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8017d1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017d20:	49a6      	ldr	r1, [pc, #664]	; (8017fbc <etharp_find_entry+0x2d4>)
 8017d22:	4613      	mov	r3, r2
 8017d24:	005b      	lsls	r3, r3, #1
 8017d26:	4413      	add	r3, r2
 8017d28:	00db      	lsls	r3, r3, #3
 8017d2a:	440b      	add	r3, r1
 8017d2c:	3314      	adds	r3, #20
 8017d2e:	781b      	ldrb	r3, [r3, #0]
 8017d30:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017d32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017d36:	2b0a      	cmp	r3, #10
 8017d38:	d105      	bne.n	8017d46 <etharp_find_entry+0x5e>
 8017d3a:	7dfb      	ldrb	r3, [r7, #23]
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d102      	bne.n	8017d46 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017d40:	8c3b      	ldrh	r3, [r7, #32]
 8017d42:	847b      	strh	r3, [r7, #34]	; 0x22
 8017d44:	e095      	b.n	8017e72 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017d46:	7dfb      	ldrb	r3, [r7, #23]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	f000 8092 	beq.w	8017e72 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017d4e:	7dfb      	ldrb	r3, [r7, #23]
 8017d50:	2b01      	cmp	r3, #1
 8017d52:	d009      	beq.n	8017d68 <etharp_find_entry+0x80>
 8017d54:	7dfb      	ldrb	r3, [r7, #23]
 8017d56:	2b01      	cmp	r3, #1
 8017d58:	d806      	bhi.n	8017d68 <etharp_find_entry+0x80>
 8017d5a:	4b99      	ldr	r3, [pc, #612]	; (8017fc0 <etharp_find_entry+0x2d8>)
 8017d5c:	f240 1223 	movw	r2, #291	; 0x123
 8017d60:	4998      	ldr	r1, [pc, #608]	; (8017fc4 <etharp_find_entry+0x2dc>)
 8017d62:	4899      	ldr	r0, [pc, #612]	; (8017fc8 <etharp_find_entry+0x2e0>)
 8017d64:	f003 f97e 	bl	801b064 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d020      	beq.n	8017db0 <etharp_find_entry+0xc8>
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	6819      	ldr	r1, [r3, #0]
 8017d72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017d76:	4891      	ldr	r0, [pc, #580]	; (8017fbc <etharp_find_entry+0x2d4>)
 8017d78:	4613      	mov	r3, r2
 8017d7a:	005b      	lsls	r3, r3, #1
 8017d7c:	4413      	add	r3, r2
 8017d7e:	00db      	lsls	r3, r3, #3
 8017d80:	4403      	add	r3, r0
 8017d82:	3304      	adds	r3, #4
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	4299      	cmp	r1, r3
 8017d88:	d112      	bne.n	8017db0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d00c      	beq.n	8017daa <etharp_find_entry+0xc2>
 8017d90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017d94:	4989      	ldr	r1, [pc, #548]	; (8017fbc <etharp_find_entry+0x2d4>)
 8017d96:	4613      	mov	r3, r2
 8017d98:	005b      	lsls	r3, r3, #1
 8017d9a:	4413      	add	r3, r2
 8017d9c:	00db      	lsls	r3, r3, #3
 8017d9e:	440b      	add	r3, r1
 8017da0:	3308      	adds	r3, #8
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	687a      	ldr	r2, [r7, #4]
 8017da6:	429a      	cmp	r2, r3
 8017da8:	d102      	bne.n	8017db0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017daa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017dae:	e100      	b.n	8017fb2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017db0:	7dfb      	ldrb	r3, [r7, #23]
 8017db2:	2b01      	cmp	r3, #1
 8017db4:	d140      	bne.n	8017e38 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017db6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017dba:	4980      	ldr	r1, [pc, #512]	; (8017fbc <etharp_find_entry+0x2d4>)
 8017dbc:	4613      	mov	r3, r2
 8017dbe:	005b      	lsls	r3, r3, #1
 8017dc0:	4413      	add	r3, r2
 8017dc2:	00db      	lsls	r3, r3, #3
 8017dc4:	440b      	add	r3, r1
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d01a      	beq.n	8017e02 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017dcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017dd0:	497a      	ldr	r1, [pc, #488]	; (8017fbc <etharp_find_entry+0x2d4>)
 8017dd2:	4613      	mov	r3, r2
 8017dd4:	005b      	lsls	r3, r3, #1
 8017dd6:	4413      	add	r3, r2
 8017dd8:	00db      	lsls	r3, r3, #3
 8017dda:	440b      	add	r3, r1
 8017ddc:	3312      	adds	r3, #18
 8017dde:	881b      	ldrh	r3, [r3, #0]
 8017de0:	8bba      	ldrh	r2, [r7, #28]
 8017de2:	429a      	cmp	r2, r3
 8017de4:	d845      	bhi.n	8017e72 <etharp_find_entry+0x18a>
            old_queue = i;
 8017de6:	8c3b      	ldrh	r3, [r7, #32]
 8017de8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017dea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017dee:	4973      	ldr	r1, [pc, #460]	; (8017fbc <etharp_find_entry+0x2d4>)
 8017df0:	4613      	mov	r3, r2
 8017df2:	005b      	lsls	r3, r3, #1
 8017df4:	4413      	add	r3, r2
 8017df6:	00db      	lsls	r3, r3, #3
 8017df8:	440b      	add	r3, r1
 8017dfa:	3312      	adds	r3, #18
 8017dfc:	881b      	ldrh	r3, [r3, #0]
 8017dfe:	83bb      	strh	r3, [r7, #28]
 8017e00:	e037      	b.n	8017e72 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017e02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017e06:	496d      	ldr	r1, [pc, #436]	; (8017fbc <etharp_find_entry+0x2d4>)
 8017e08:	4613      	mov	r3, r2
 8017e0a:	005b      	lsls	r3, r3, #1
 8017e0c:	4413      	add	r3, r2
 8017e0e:	00db      	lsls	r3, r3, #3
 8017e10:	440b      	add	r3, r1
 8017e12:	3312      	adds	r3, #18
 8017e14:	881b      	ldrh	r3, [r3, #0]
 8017e16:	8b7a      	ldrh	r2, [r7, #26]
 8017e18:	429a      	cmp	r2, r3
 8017e1a:	d82a      	bhi.n	8017e72 <etharp_find_entry+0x18a>
            old_pending = i;
 8017e1c:	8c3b      	ldrh	r3, [r7, #32]
 8017e1e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8017e20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017e24:	4965      	ldr	r1, [pc, #404]	; (8017fbc <etharp_find_entry+0x2d4>)
 8017e26:	4613      	mov	r3, r2
 8017e28:	005b      	lsls	r3, r3, #1
 8017e2a:	4413      	add	r3, r2
 8017e2c:	00db      	lsls	r3, r3, #3
 8017e2e:	440b      	add	r3, r1
 8017e30:	3312      	adds	r3, #18
 8017e32:	881b      	ldrh	r3, [r3, #0]
 8017e34:	837b      	strh	r3, [r7, #26]
 8017e36:	e01c      	b.n	8017e72 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017e38:	7dfb      	ldrb	r3, [r7, #23]
 8017e3a:	2b01      	cmp	r3, #1
 8017e3c:	d919      	bls.n	8017e72 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017e3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017e42:	495e      	ldr	r1, [pc, #376]	; (8017fbc <etharp_find_entry+0x2d4>)
 8017e44:	4613      	mov	r3, r2
 8017e46:	005b      	lsls	r3, r3, #1
 8017e48:	4413      	add	r3, r2
 8017e4a:	00db      	lsls	r3, r3, #3
 8017e4c:	440b      	add	r3, r1
 8017e4e:	3312      	adds	r3, #18
 8017e50:	881b      	ldrh	r3, [r3, #0]
 8017e52:	8b3a      	ldrh	r2, [r7, #24]
 8017e54:	429a      	cmp	r2, r3
 8017e56:	d80c      	bhi.n	8017e72 <etharp_find_entry+0x18a>
            old_stable = i;
 8017e58:	8c3b      	ldrh	r3, [r7, #32]
 8017e5a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8017e5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017e60:	4956      	ldr	r1, [pc, #344]	; (8017fbc <etharp_find_entry+0x2d4>)
 8017e62:	4613      	mov	r3, r2
 8017e64:	005b      	lsls	r3, r3, #1
 8017e66:	4413      	add	r3, r2
 8017e68:	00db      	lsls	r3, r3, #3
 8017e6a:	440b      	add	r3, r1
 8017e6c:	3312      	adds	r3, #18
 8017e6e:	881b      	ldrh	r3, [r3, #0]
 8017e70:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017e72:	8c3b      	ldrh	r3, [r7, #32]
 8017e74:	3301      	adds	r3, #1
 8017e76:	b29b      	uxth	r3, r3
 8017e78:	843b      	strh	r3, [r7, #32]
 8017e7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017e7e:	2b09      	cmp	r3, #9
 8017e80:	f77f af4c 	ble.w	8017d1c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017e84:	7afb      	ldrb	r3, [r7, #11]
 8017e86:	f003 0302 	and.w	r3, r3, #2
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d108      	bne.n	8017ea0 <etharp_find_entry+0x1b8>
 8017e8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017e92:	2b0a      	cmp	r3, #10
 8017e94:	d107      	bne.n	8017ea6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017e96:	7afb      	ldrb	r3, [r7, #11]
 8017e98:	f003 0301 	and.w	r3, r3, #1
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d102      	bne.n	8017ea6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8017ea4:	e085      	b.n	8017fb2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017ea6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017eaa:	2b09      	cmp	r3, #9
 8017eac:	dc02      	bgt.n	8017eb4 <etharp_find_entry+0x1cc>
    i = empty;
 8017eae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017eb0:	843b      	strh	r3, [r7, #32]
 8017eb2:	e039      	b.n	8017f28 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017eb4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017eb8:	2b09      	cmp	r3, #9
 8017eba:	dc14      	bgt.n	8017ee6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017ebc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017ebe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017ec0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017ec4:	493d      	ldr	r1, [pc, #244]	; (8017fbc <etharp_find_entry+0x2d4>)
 8017ec6:	4613      	mov	r3, r2
 8017ec8:	005b      	lsls	r3, r3, #1
 8017eca:	4413      	add	r3, r2
 8017ecc:	00db      	lsls	r3, r3, #3
 8017ece:	440b      	add	r3, r1
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d018      	beq.n	8017f08 <etharp_find_entry+0x220>
 8017ed6:	4b3a      	ldr	r3, [pc, #232]	; (8017fc0 <etharp_find_entry+0x2d8>)
 8017ed8:	f240 126d 	movw	r2, #365	; 0x16d
 8017edc:	493b      	ldr	r1, [pc, #236]	; (8017fcc <etharp_find_entry+0x2e4>)
 8017ede:	483a      	ldr	r0, [pc, #232]	; (8017fc8 <etharp_find_entry+0x2e0>)
 8017ee0:	f003 f8c0 	bl	801b064 <iprintf>
 8017ee4:	e010      	b.n	8017f08 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017ee6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017eea:	2b09      	cmp	r3, #9
 8017eec:	dc02      	bgt.n	8017ef4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8017eee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017ef0:	843b      	strh	r3, [r7, #32]
 8017ef2:	e009      	b.n	8017f08 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017ef4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017ef8:	2b09      	cmp	r3, #9
 8017efa:	dc02      	bgt.n	8017f02 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017efc:	8bfb      	ldrh	r3, [r7, #30]
 8017efe:	843b      	strh	r3, [r7, #32]
 8017f00:	e002      	b.n	8017f08 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017f02:	f04f 33ff 	mov.w	r3, #4294967295
 8017f06:	e054      	b.n	8017fb2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017f08:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017f0c:	2b09      	cmp	r3, #9
 8017f0e:	dd06      	ble.n	8017f1e <etharp_find_entry+0x236>
 8017f10:	4b2b      	ldr	r3, [pc, #172]	; (8017fc0 <etharp_find_entry+0x2d8>)
 8017f12:	f240 127f 	movw	r2, #383	; 0x17f
 8017f16:	492e      	ldr	r1, [pc, #184]	; (8017fd0 <etharp_find_entry+0x2e8>)
 8017f18:	482b      	ldr	r0, [pc, #172]	; (8017fc8 <etharp_find_entry+0x2e0>)
 8017f1a:	f003 f8a3 	bl	801b064 <iprintf>
    etharp_free_entry(i);
 8017f1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017f22:	4618      	mov	r0, r3
 8017f24:	f7ff fe06 	bl	8017b34 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017f28:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017f2c:	2b09      	cmp	r3, #9
 8017f2e:	dd06      	ble.n	8017f3e <etharp_find_entry+0x256>
 8017f30:	4b23      	ldr	r3, [pc, #140]	; (8017fc0 <etharp_find_entry+0x2d8>)
 8017f32:	f240 1283 	movw	r2, #387	; 0x183
 8017f36:	4926      	ldr	r1, [pc, #152]	; (8017fd0 <etharp_find_entry+0x2e8>)
 8017f38:	4823      	ldr	r0, [pc, #140]	; (8017fc8 <etharp_find_entry+0x2e0>)
 8017f3a:	f003 f893 	bl	801b064 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017f3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017f42:	491e      	ldr	r1, [pc, #120]	; (8017fbc <etharp_find_entry+0x2d4>)
 8017f44:	4613      	mov	r3, r2
 8017f46:	005b      	lsls	r3, r3, #1
 8017f48:	4413      	add	r3, r2
 8017f4a:	00db      	lsls	r3, r3, #3
 8017f4c:	440b      	add	r3, r1
 8017f4e:	3314      	adds	r3, #20
 8017f50:	781b      	ldrb	r3, [r3, #0]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d006      	beq.n	8017f64 <etharp_find_entry+0x27c>
 8017f56:	4b1a      	ldr	r3, [pc, #104]	; (8017fc0 <etharp_find_entry+0x2d8>)
 8017f58:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017f5c:	491d      	ldr	r1, [pc, #116]	; (8017fd4 <etharp_find_entry+0x2ec>)
 8017f5e:	481a      	ldr	r0, [pc, #104]	; (8017fc8 <etharp_find_entry+0x2e0>)
 8017f60:	f003 f880 	bl	801b064 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d00b      	beq.n	8017f82 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017f6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	6819      	ldr	r1, [r3, #0]
 8017f72:	4812      	ldr	r0, [pc, #72]	; (8017fbc <etharp_find_entry+0x2d4>)
 8017f74:	4613      	mov	r3, r2
 8017f76:	005b      	lsls	r3, r3, #1
 8017f78:	4413      	add	r3, r2
 8017f7a:	00db      	lsls	r3, r3, #3
 8017f7c:	4403      	add	r3, r0
 8017f7e:	3304      	adds	r3, #4
 8017f80:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017f82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017f86:	490d      	ldr	r1, [pc, #52]	; (8017fbc <etharp_find_entry+0x2d4>)
 8017f88:	4613      	mov	r3, r2
 8017f8a:	005b      	lsls	r3, r3, #1
 8017f8c:	4413      	add	r3, r2
 8017f8e:	00db      	lsls	r3, r3, #3
 8017f90:	440b      	add	r3, r1
 8017f92:	3312      	adds	r3, #18
 8017f94:	2200      	movs	r2, #0
 8017f96:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017f98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017f9c:	4907      	ldr	r1, [pc, #28]	; (8017fbc <etharp_find_entry+0x2d4>)
 8017f9e:	4613      	mov	r3, r2
 8017fa0:	005b      	lsls	r3, r3, #1
 8017fa2:	4413      	add	r3, r2
 8017fa4:	00db      	lsls	r3, r3, #3
 8017fa6:	440b      	add	r3, r1
 8017fa8:	3308      	adds	r3, #8
 8017faa:	687a      	ldr	r2, [r7, #4]
 8017fac:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017fae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	3728      	adds	r7, #40	; 0x28
 8017fb6:	46bd      	mov	sp, r7
 8017fb8:	bd80      	pop	{r7, pc}
 8017fba:	bf00      	nop
 8017fbc:	20008678 	.word	0x20008678
 8017fc0:	0801e220 	.word	0x0801e220
 8017fc4:	0801e258 	.word	0x0801e258
 8017fc8:	0801e298 	.word	0x0801e298
 8017fcc:	0801e2c0 	.word	0x0801e2c0
 8017fd0:	0801e2d8 	.word	0x0801e2d8
 8017fd4:	0801e2ec 	.word	0x0801e2ec

08017fd8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b088      	sub	sp, #32
 8017fdc:	af02      	add	r7, sp, #8
 8017fde:	60f8      	str	r0, [r7, #12]
 8017fe0:	60b9      	str	r1, [r7, #8]
 8017fe2:	607a      	str	r2, [r7, #4]
 8017fe4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017fec:	2b06      	cmp	r3, #6
 8017fee:	d006      	beq.n	8017ffe <etharp_update_arp_entry+0x26>
 8017ff0:	4b48      	ldr	r3, [pc, #288]	; (8018114 <etharp_update_arp_entry+0x13c>)
 8017ff2:	f240 12a9 	movw	r2, #425	; 0x1a9
 8017ff6:	4948      	ldr	r1, [pc, #288]	; (8018118 <etharp_update_arp_entry+0x140>)
 8017ff8:	4848      	ldr	r0, [pc, #288]	; (801811c <etharp_update_arp_entry+0x144>)
 8017ffa:	f003 f833 	bl	801b064 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017ffe:	68bb      	ldr	r3, [r7, #8]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d012      	beq.n	801802a <etharp_update_arp_entry+0x52>
 8018004:	68bb      	ldr	r3, [r7, #8]
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d00e      	beq.n	801802a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801800c:	68bb      	ldr	r3, [r7, #8]
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	68f9      	ldr	r1, [r7, #12]
 8018012:	4618      	mov	r0, r3
 8018014:	f001 f8fe 	bl	8019214 <ip4_addr_isbroadcast_u32>
 8018018:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801801a:	2b00      	cmp	r3, #0
 801801c:	d105      	bne.n	801802a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801801e:	68bb      	ldr	r3, [r7, #8]
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018026:	2be0      	cmp	r3, #224	; 0xe0
 8018028:	d102      	bne.n	8018030 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801802a:	f06f 030f 	mvn.w	r3, #15
 801802e:	e06c      	b.n	801810a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018030:	78fb      	ldrb	r3, [r7, #3]
 8018032:	68fa      	ldr	r2, [r7, #12]
 8018034:	4619      	mov	r1, r3
 8018036:	68b8      	ldr	r0, [r7, #8]
 8018038:	f7ff fe56 	bl	8017ce8 <etharp_find_entry>
 801803c:	4603      	mov	r3, r0
 801803e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018040:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018044:	2b00      	cmp	r3, #0
 8018046:	da02      	bge.n	801804e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018048:	8afb      	ldrh	r3, [r7, #22]
 801804a:	b25b      	sxtb	r3, r3
 801804c:	e05d      	b.n	801810a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801804e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018052:	4933      	ldr	r1, [pc, #204]	; (8018120 <etharp_update_arp_entry+0x148>)
 8018054:	4613      	mov	r3, r2
 8018056:	005b      	lsls	r3, r3, #1
 8018058:	4413      	add	r3, r2
 801805a:	00db      	lsls	r3, r3, #3
 801805c:	440b      	add	r3, r1
 801805e:	3314      	adds	r3, #20
 8018060:	2202      	movs	r2, #2
 8018062:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018064:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018068:	492d      	ldr	r1, [pc, #180]	; (8018120 <etharp_update_arp_entry+0x148>)
 801806a:	4613      	mov	r3, r2
 801806c:	005b      	lsls	r3, r3, #1
 801806e:	4413      	add	r3, r2
 8018070:	00db      	lsls	r3, r3, #3
 8018072:	440b      	add	r3, r1
 8018074:	3308      	adds	r3, #8
 8018076:	68fa      	ldr	r2, [r7, #12]
 8018078:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801807a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801807e:	4613      	mov	r3, r2
 8018080:	005b      	lsls	r3, r3, #1
 8018082:	4413      	add	r3, r2
 8018084:	00db      	lsls	r3, r3, #3
 8018086:	3308      	adds	r3, #8
 8018088:	4a25      	ldr	r2, [pc, #148]	; (8018120 <etharp_update_arp_entry+0x148>)
 801808a:	4413      	add	r3, r2
 801808c:	3304      	adds	r3, #4
 801808e:	2206      	movs	r2, #6
 8018090:	6879      	ldr	r1, [r7, #4]
 8018092:	4618      	mov	r0, r3
 8018094:	f003 f8c1 	bl	801b21a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018098:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801809c:	4920      	ldr	r1, [pc, #128]	; (8018120 <etharp_update_arp_entry+0x148>)
 801809e:	4613      	mov	r3, r2
 80180a0:	005b      	lsls	r3, r3, #1
 80180a2:	4413      	add	r3, r2
 80180a4:	00db      	lsls	r3, r3, #3
 80180a6:	440b      	add	r3, r1
 80180a8:	3312      	adds	r3, #18
 80180aa:	2200      	movs	r2, #0
 80180ac:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80180ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80180b2:	491b      	ldr	r1, [pc, #108]	; (8018120 <etharp_update_arp_entry+0x148>)
 80180b4:	4613      	mov	r3, r2
 80180b6:	005b      	lsls	r3, r3, #1
 80180b8:	4413      	add	r3, r2
 80180ba:	00db      	lsls	r3, r3, #3
 80180bc:	440b      	add	r3, r1
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d021      	beq.n	8018108 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80180c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80180c8:	4915      	ldr	r1, [pc, #84]	; (8018120 <etharp_update_arp_entry+0x148>)
 80180ca:	4613      	mov	r3, r2
 80180cc:	005b      	lsls	r3, r3, #1
 80180ce:	4413      	add	r3, r2
 80180d0:	00db      	lsls	r3, r3, #3
 80180d2:	440b      	add	r3, r1
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80180d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80180dc:	4910      	ldr	r1, [pc, #64]	; (8018120 <etharp_update_arp_entry+0x148>)
 80180de:	4613      	mov	r3, r2
 80180e0:	005b      	lsls	r3, r3, #1
 80180e2:	4413      	add	r3, r2
 80180e4:	00db      	lsls	r3, r3, #3
 80180e6:	440b      	add	r3, r1
 80180e8:	2200      	movs	r2, #0
 80180ea:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80180f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80180f6:	9300      	str	r3, [sp, #0]
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	6939      	ldr	r1, [r7, #16]
 80180fc:	68f8      	ldr	r0, [r7, #12]
 80180fe:	f001 ff97 	bl	801a030 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018102:	6938      	ldr	r0, [r7, #16]
 8018104:	f7f9 fe2a 	bl	8011d5c <pbuf_free>
  }
  return ERR_OK;
 8018108:	2300      	movs	r3, #0
}
 801810a:	4618      	mov	r0, r3
 801810c:	3718      	adds	r7, #24
 801810e:	46bd      	mov	sp, r7
 8018110:	bd80      	pop	{r7, pc}
 8018112:	bf00      	nop
 8018114:	0801e220 	.word	0x0801e220
 8018118:	0801e318 	.word	0x0801e318
 801811c:	0801e298 	.word	0x0801e298
 8018120:	20008678 	.word	0x20008678

08018124 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018124:	b580      	push	{r7, lr}
 8018126:	b084      	sub	sp, #16
 8018128:	af00      	add	r7, sp, #0
 801812a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801812c:	2300      	movs	r3, #0
 801812e:	60fb      	str	r3, [r7, #12]
 8018130:	e01e      	b.n	8018170 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018132:	4913      	ldr	r1, [pc, #76]	; (8018180 <etharp_cleanup_netif+0x5c>)
 8018134:	68fa      	ldr	r2, [r7, #12]
 8018136:	4613      	mov	r3, r2
 8018138:	005b      	lsls	r3, r3, #1
 801813a:	4413      	add	r3, r2
 801813c:	00db      	lsls	r3, r3, #3
 801813e:	440b      	add	r3, r1
 8018140:	3314      	adds	r3, #20
 8018142:	781b      	ldrb	r3, [r3, #0]
 8018144:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018146:	7afb      	ldrb	r3, [r7, #11]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d00e      	beq.n	801816a <etharp_cleanup_netif+0x46>
 801814c:	490c      	ldr	r1, [pc, #48]	; (8018180 <etharp_cleanup_netif+0x5c>)
 801814e:	68fa      	ldr	r2, [r7, #12]
 8018150:	4613      	mov	r3, r2
 8018152:	005b      	lsls	r3, r3, #1
 8018154:	4413      	add	r3, r2
 8018156:	00db      	lsls	r3, r3, #3
 8018158:	440b      	add	r3, r1
 801815a:	3308      	adds	r3, #8
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	687a      	ldr	r2, [r7, #4]
 8018160:	429a      	cmp	r2, r3
 8018162:	d102      	bne.n	801816a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018164:	68f8      	ldr	r0, [r7, #12]
 8018166:	f7ff fce5 	bl	8017b34 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	3301      	adds	r3, #1
 801816e:	60fb      	str	r3, [r7, #12]
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	2b09      	cmp	r3, #9
 8018174:	dddd      	ble.n	8018132 <etharp_cleanup_netif+0xe>
    }
  }
}
 8018176:	bf00      	nop
 8018178:	bf00      	nop
 801817a:	3710      	adds	r7, #16
 801817c:	46bd      	mov	sp, r7
 801817e:	bd80      	pop	{r7, pc}
 8018180:	20008678 	.word	0x20008678

08018184 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018184:	b5b0      	push	{r4, r5, r7, lr}
 8018186:	b08a      	sub	sp, #40	; 0x28
 8018188:	af04      	add	r7, sp, #16
 801818a:	6078      	str	r0, [r7, #4]
 801818c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801818e:	683b      	ldr	r3, [r7, #0]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d107      	bne.n	80181a4 <etharp_input+0x20>
 8018194:	4b3d      	ldr	r3, [pc, #244]	; (801828c <etharp_input+0x108>)
 8018196:	f240 228a 	movw	r2, #650	; 0x28a
 801819a:	493d      	ldr	r1, [pc, #244]	; (8018290 <etharp_input+0x10c>)
 801819c:	483d      	ldr	r0, [pc, #244]	; (8018294 <etharp_input+0x110>)
 801819e:	f002 ff61 	bl	801b064 <iprintf>
 80181a2:	e06f      	b.n	8018284 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	685b      	ldr	r3, [r3, #4]
 80181a8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80181aa:	693b      	ldr	r3, [r7, #16]
 80181ac:	881b      	ldrh	r3, [r3, #0]
 80181ae:	b29b      	uxth	r3, r3
 80181b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80181b4:	d10c      	bne.n	80181d0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80181b6:	693b      	ldr	r3, [r7, #16]
 80181b8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80181ba:	2b06      	cmp	r3, #6
 80181bc:	d108      	bne.n	80181d0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80181be:	693b      	ldr	r3, [r7, #16]
 80181c0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80181c2:	2b04      	cmp	r3, #4
 80181c4:	d104      	bne.n	80181d0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80181c6:	693b      	ldr	r3, [r7, #16]
 80181c8:	885b      	ldrh	r3, [r3, #2]
 80181ca:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80181cc:	2b08      	cmp	r3, #8
 80181ce:	d003      	beq.n	80181d8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80181d0:	6878      	ldr	r0, [r7, #4]
 80181d2:	f7f9 fdc3 	bl	8011d5c <pbuf_free>
    return;
 80181d6:	e055      	b.n	8018284 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80181d8:	693b      	ldr	r3, [r7, #16]
 80181da:	330e      	adds	r3, #14
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80181e0:	693b      	ldr	r3, [r7, #16]
 80181e2:	3318      	adds	r3, #24
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80181e8:	683b      	ldr	r3, [r7, #0]
 80181ea:	3304      	adds	r3, #4
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d102      	bne.n	80181f8 <etharp_input+0x74>
    for_us = 0;
 80181f2:	2300      	movs	r3, #0
 80181f4:	75fb      	strb	r3, [r7, #23]
 80181f6:	e009      	b.n	801820c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80181f8:	68ba      	ldr	r2, [r7, #8]
 80181fa:	683b      	ldr	r3, [r7, #0]
 80181fc:	3304      	adds	r3, #4
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	429a      	cmp	r2, r3
 8018202:	bf0c      	ite	eq
 8018204:	2301      	moveq	r3, #1
 8018206:	2300      	movne	r3, #0
 8018208:	b2db      	uxtb	r3, r3
 801820a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801820c:	693b      	ldr	r3, [r7, #16]
 801820e:	f103 0208 	add.w	r2, r3, #8
 8018212:	7dfb      	ldrb	r3, [r7, #23]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d001      	beq.n	801821c <etharp_input+0x98>
 8018218:	2301      	movs	r3, #1
 801821a:	e000      	b.n	801821e <etharp_input+0x9a>
 801821c:	2302      	movs	r3, #2
 801821e:	f107 010c 	add.w	r1, r7, #12
 8018222:	6838      	ldr	r0, [r7, #0]
 8018224:	f7ff fed8 	bl	8017fd8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018228:	693b      	ldr	r3, [r7, #16]
 801822a:	88db      	ldrh	r3, [r3, #6]
 801822c:	b29b      	uxth	r3, r3
 801822e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018232:	d003      	beq.n	801823c <etharp_input+0xb8>
 8018234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018238:	d01e      	beq.n	8018278 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801823a:	e020      	b.n	801827e <etharp_input+0xfa>
      if (for_us) {
 801823c:	7dfb      	ldrb	r3, [r7, #23]
 801823e:	2b00      	cmp	r3, #0
 8018240:	d01c      	beq.n	801827c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018242:	683b      	ldr	r3, [r7, #0]
 8018244:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018248:	693b      	ldr	r3, [r7, #16]
 801824a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801824e:	683b      	ldr	r3, [r7, #0]
 8018250:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8018254:	683b      	ldr	r3, [r7, #0]
 8018256:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018258:	693a      	ldr	r2, [r7, #16]
 801825a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801825c:	2102      	movs	r1, #2
 801825e:	9103      	str	r1, [sp, #12]
 8018260:	f107 010c 	add.w	r1, r7, #12
 8018264:	9102      	str	r1, [sp, #8]
 8018266:	9201      	str	r2, [sp, #4]
 8018268:	9300      	str	r3, [sp, #0]
 801826a:	462b      	mov	r3, r5
 801826c:	4622      	mov	r2, r4
 801826e:	4601      	mov	r1, r0
 8018270:	6838      	ldr	r0, [r7, #0]
 8018272:	f000 faeb 	bl	801884c <etharp_raw>
      break;
 8018276:	e001      	b.n	801827c <etharp_input+0xf8>
      break;
 8018278:	bf00      	nop
 801827a:	e000      	b.n	801827e <etharp_input+0xfa>
      break;
 801827c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801827e:	6878      	ldr	r0, [r7, #4]
 8018280:	f7f9 fd6c 	bl	8011d5c <pbuf_free>
}
 8018284:	3718      	adds	r7, #24
 8018286:	46bd      	mov	sp, r7
 8018288:	bdb0      	pop	{r4, r5, r7, pc}
 801828a:	bf00      	nop
 801828c:	0801e220 	.word	0x0801e220
 8018290:	0801e370 	.word	0x0801e370
 8018294:	0801e298 	.word	0x0801e298

08018298 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018298:	b580      	push	{r7, lr}
 801829a:	b086      	sub	sp, #24
 801829c:	af02      	add	r7, sp, #8
 801829e:	60f8      	str	r0, [r7, #12]
 80182a0:	60b9      	str	r1, [r7, #8]
 80182a2:	4613      	mov	r3, r2
 80182a4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80182a6:	79fa      	ldrb	r2, [r7, #7]
 80182a8:	4944      	ldr	r1, [pc, #272]	; (80183bc <etharp_output_to_arp_index+0x124>)
 80182aa:	4613      	mov	r3, r2
 80182ac:	005b      	lsls	r3, r3, #1
 80182ae:	4413      	add	r3, r2
 80182b0:	00db      	lsls	r3, r3, #3
 80182b2:	440b      	add	r3, r1
 80182b4:	3314      	adds	r3, #20
 80182b6:	781b      	ldrb	r3, [r3, #0]
 80182b8:	2b01      	cmp	r3, #1
 80182ba:	d806      	bhi.n	80182ca <etharp_output_to_arp_index+0x32>
 80182bc:	4b40      	ldr	r3, [pc, #256]	; (80183c0 <etharp_output_to_arp_index+0x128>)
 80182be:	f240 22ee 	movw	r2, #750	; 0x2ee
 80182c2:	4940      	ldr	r1, [pc, #256]	; (80183c4 <etharp_output_to_arp_index+0x12c>)
 80182c4:	4840      	ldr	r0, [pc, #256]	; (80183c8 <etharp_output_to_arp_index+0x130>)
 80182c6:	f002 fecd 	bl	801b064 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80182ca:	79fa      	ldrb	r2, [r7, #7]
 80182cc:	493b      	ldr	r1, [pc, #236]	; (80183bc <etharp_output_to_arp_index+0x124>)
 80182ce:	4613      	mov	r3, r2
 80182d0:	005b      	lsls	r3, r3, #1
 80182d2:	4413      	add	r3, r2
 80182d4:	00db      	lsls	r3, r3, #3
 80182d6:	440b      	add	r3, r1
 80182d8:	3314      	adds	r3, #20
 80182da:	781b      	ldrb	r3, [r3, #0]
 80182dc:	2b02      	cmp	r3, #2
 80182de:	d153      	bne.n	8018388 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80182e0:	79fa      	ldrb	r2, [r7, #7]
 80182e2:	4936      	ldr	r1, [pc, #216]	; (80183bc <etharp_output_to_arp_index+0x124>)
 80182e4:	4613      	mov	r3, r2
 80182e6:	005b      	lsls	r3, r3, #1
 80182e8:	4413      	add	r3, r2
 80182ea:	00db      	lsls	r3, r3, #3
 80182ec:	440b      	add	r3, r1
 80182ee:	3312      	adds	r3, #18
 80182f0:	881b      	ldrh	r3, [r3, #0]
 80182f2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80182f6:	d919      	bls.n	801832c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80182f8:	79fa      	ldrb	r2, [r7, #7]
 80182fa:	4613      	mov	r3, r2
 80182fc:	005b      	lsls	r3, r3, #1
 80182fe:	4413      	add	r3, r2
 8018300:	00db      	lsls	r3, r3, #3
 8018302:	4a2e      	ldr	r2, [pc, #184]	; (80183bc <etharp_output_to_arp_index+0x124>)
 8018304:	4413      	add	r3, r2
 8018306:	3304      	adds	r3, #4
 8018308:	4619      	mov	r1, r3
 801830a:	68f8      	ldr	r0, [r7, #12]
 801830c:	f000 fb4c 	bl	80189a8 <etharp_request>
 8018310:	4603      	mov	r3, r0
 8018312:	2b00      	cmp	r3, #0
 8018314:	d138      	bne.n	8018388 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018316:	79fa      	ldrb	r2, [r7, #7]
 8018318:	4928      	ldr	r1, [pc, #160]	; (80183bc <etharp_output_to_arp_index+0x124>)
 801831a:	4613      	mov	r3, r2
 801831c:	005b      	lsls	r3, r3, #1
 801831e:	4413      	add	r3, r2
 8018320:	00db      	lsls	r3, r3, #3
 8018322:	440b      	add	r3, r1
 8018324:	3314      	adds	r3, #20
 8018326:	2203      	movs	r2, #3
 8018328:	701a      	strb	r2, [r3, #0]
 801832a:	e02d      	b.n	8018388 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801832c:	79fa      	ldrb	r2, [r7, #7]
 801832e:	4923      	ldr	r1, [pc, #140]	; (80183bc <etharp_output_to_arp_index+0x124>)
 8018330:	4613      	mov	r3, r2
 8018332:	005b      	lsls	r3, r3, #1
 8018334:	4413      	add	r3, r2
 8018336:	00db      	lsls	r3, r3, #3
 8018338:	440b      	add	r3, r1
 801833a:	3312      	adds	r3, #18
 801833c:	881b      	ldrh	r3, [r3, #0]
 801833e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018342:	d321      	bcc.n	8018388 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018344:	79fa      	ldrb	r2, [r7, #7]
 8018346:	4613      	mov	r3, r2
 8018348:	005b      	lsls	r3, r3, #1
 801834a:	4413      	add	r3, r2
 801834c:	00db      	lsls	r3, r3, #3
 801834e:	4a1b      	ldr	r2, [pc, #108]	; (80183bc <etharp_output_to_arp_index+0x124>)
 8018350:	4413      	add	r3, r2
 8018352:	1d19      	adds	r1, r3, #4
 8018354:	79fa      	ldrb	r2, [r7, #7]
 8018356:	4613      	mov	r3, r2
 8018358:	005b      	lsls	r3, r3, #1
 801835a:	4413      	add	r3, r2
 801835c:	00db      	lsls	r3, r3, #3
 801835e:	3308      	adds	r3, #8
 8018360:	4a16      	ldr	r2, [pc, #88]	; (80183bc <etharp_output_to_arp_index+0x124>)
 8018362:	4413      	add	r3, r2
 8018364:	3304      	adds	r3, #4
 8018366:	461a      	mov	r2, r3
 8018368:	68f8      	ldr	r0, [r7, #12]
 801836a:	f000 fafb 	bl	8018964 <etharp_request_dst>
 801836e:	4603      	mov	r3, r0
 8018370:	2b00      	cmp	r3, #0
 8018372:	d109      	bne.n	8018388 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018374:	79fa      	ldrb	r2, [r7, #7]
 8018376:	4911      	ldr	r1, [pc, #68]	; (80183bc <etharp_output_to_arp_index+0x124>)
 8018378:	4613      	mov	r3, r2
 801837a:	005b      	lsls	r3, r3, #1
 801837c:	4413      	add	r3, r2
 801837e:	00db      	lsls	r3, r3, #3
 8018380:	440b      	add	r3, r1
 8018382:	3314      	adds	r3, #20
 8018384:	2203      	movs	r2, #3
 8018386:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801838e:	79fa      	ldrb	r2, [r7, #7]
 8018390:	4613      	mov	r3, r2
 8018392:	005b      	lsls	r3, r3, #1
 8018394:	4413      	add	r3, r2
 8018396:	00db      	lsls	r3, r3, #3
 8018398:	3308      	adds	r3, #8
 801839a:	4a08      	ldr	r2, [pc, #32]	; (80183bc <etharp_output_to_arp_index+0x124>)
 801839c:	4413      	add	r3, r2
 801839e:	3304      	adds	r3, #4
 80183a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80183a4:	9200      	str	r2, [sp, #0]
 80183a6:	460a      	mov	r2, r1
 80183a8:	68b9      	ldr	r1, [r7, #8]
 80183aa:	68f8      	ldr	r0, [r7, #12]
 80183ac:	f001 fe40 	bl	801a030 <ethernet_output>
 80183b0:	4603      	mov	r3, r0
}
 80183b2:	4618      	mov	r0, r3
 80183b4:	3710      	adds	r7, #16
 80183b6:	46bd      	mov	sp, r7
 80183b8:	bd80      	pop	{r7, pc}
 80183ba:	bf00      	nop
 80183bc:	20008678 	.word	0x20008678
 80183c0:	0801e220 	.word	0x0801e220
 80183c4:	0801e390 	.word	0x0801e390
 80183c8:	0801e298 	.word	0x0801e298

080183cc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	b08a      	sub	sp, #40	; 0x28
 80183d0:	af02      	add	r7, sp, #8
 80183d2:	60f8      	str	r0, [r7, #12]
 80183d4:	60b9      	str	r1, [r7, #8]
 80183d6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d106      	bne.n	80183f0 <etharp_output+0x24>
 80183e2:	4b73      	ldr	r3, [pc, #460]	; (80185b0 <etharp_output+0x1e4>)
 80183e4:	f240 321e 	movw	r2, #798	; 0x31e
 80183e8:	4972      	ldr	r1, [pc, #456]	; (80185b4 <etharp_output+0x1e8>)
 80183ea:	4873      	ldr	r0, [pc, #460]	; (80185b8 <etharp_output+0x1ec>)
 80183ec:	f002 fe3a 	bl	801b064 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80183f0:	68bb      	ldr	r3, [r7, #8]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d106      	bne.n	8018404 <etharp_output+0x38>
 80183f6:	4b6e      	ldr	r3, [pc, #440]	; (80185b0 <etharp_output+0x1e4>)
 80183f8:	f240 321f 	movw	r2, #799	; 0x31f
 80183fc:	496f      	ldr	r1, [pc, #444]	; (80185bc <etharp_output+0x1f0>)
 80183fe:	486e      	ldr	r0, [pc, #440]	; (80185b8 <etharp_output+0x1ec>)
 8018400:	f002 fe30 	bl	801b064 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d106      	bne.n	8018418 <etharp_output+0x4c>
 801840a:	4b69      	ldr	r3, [pc, #420]	; (80185b0 <etharp_output+0x1e4>)
 801840c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018410:	496b      	ldr	r1, [pc, #428]	; (80185c0 <etharp_output+0x1f4>)
 8018412:	4869      	ldr	r0, [pc, #420]	; (80185b8 <etharp_output+0x1ec>)
 8018414:	f002 fe26 	bl	801b064 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	68f9      	ldr	r1, [r7, #12]
 801841e:	4618      	mov	r0, r3
 8018420:	f000 fef8 	bl	8019214 <ip4_addr_isbroadcast_u32>
 8018424:	4603      	mov	r3, r0
 8018426:	2b00      	cmp	r3, #0
 8018428:	d002      	beq.n	8018430 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801842a:	4b66      	ldr	r3, [pc, #408]	; (80185c4 <etharp_output+0x1f8>)
 801842c:	61fb      	str	r3, [r7, #28]
 801842e:	e0af      	b.n	8018590 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018438:	2be0      	cmp	r3, #224	; 0xe0
 801843a:	d118      	bne.n	801846e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801843c:	2301      	movs	r3, #1
 801843e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018440:	2300      	movs	r3, #0
 8018442:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018444:	235e      	movs	r3, #94	; 0x5e
 8018446:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	3301      	adds	r3, #1
 801844c:	781b      	ldrb	r3, [r3, #0]
 801844e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018452:	b2db      	uxtb	r3, r3
 8018454:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	3302      	adds	r3, #2
 801845a:	781b      	ldrb	r3, [r3, #0]
 801845c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	3303      	adds	r3, #3
 8018462:	781b      	ldrb	r3, [r3, #0]
 8018464:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018466:	f107 0310 	add.w	r3, r7, #16
 801846a:	61fb      	str	r3, [r7, #28]
 801846c:	e090      	b.n	8018590 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	681a      	ldr	r2, [r3, #0]
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	3304      	adds	r3, #4
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	405a      	eors	r2, r3
 801847a:	68fb      	ldr	r3, [r7, #12]
 801847c:	3308      	adds	r3, #8
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	4013      	ands	r3, r2
 8018482:	2b00      	cmp	r3, #0
 8018484:	d012      	beq.n	80184ac <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801848c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018490:	4293      	cmp	r3, r2
 8018492:	d00b      	beq.n	80184ac <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	330c      	adds	r3, #12
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	2b00      	cmp	r3, #0
 801849c:	d003      	beq.n	80184a6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	330c      	adds	r3, #12
 80184a2:	61bb      	str	r3, [r7, #24]
 80184a4:	e002      	b.n	80184ac <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80184a6:	f06f 0303 	mvn.w	r3, #3
 80184aa:	e07d      	b.n	80185a8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80184ac:	4b46      	ldr	r3, [pc, #280]	; (80185c8 <etharp_output+0x1fc>)
 80184ae:	781b      	ldrb	r3, [r3, #0]
 80184b0:	4619      	mov	r1, r3
 80184b2:	4a46      	ldr	r2, [pc, #280]	; (80185cc <etharp_output+0x200>)
 80184b4:	460b      	mov	r3, r1
 80184b6:	005b      	lsls	r3, r3, #1
 80184b8:	440b      	add	r3, r1
 80184ba:	00db      	lsls	r3, r3, #3
 80184bc:	4413      	add	r3, r2
 80184be:	3314      	adds	r3, #20
 80184c0:	781b      	ldrb	r3, [r3, #0]
 80184c2:	2b01      	cmp	r3, #1
 80184c4:	d925      	bls.n	8018512 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80184c6:	4b40      	ldr	r3, [pc, #256]	; (80185c8 <etharp_output+0x1fc>)
 80184c8:	781b      	ldrb	r3, [r3, #0]
 80184ca:	4619      	mov	r1, r3
 80184cc:	4a3f      	ldr	r2, [pc, #252]	; (80185cc <etharp_output+0x200>)
 80184ce:	460b      	mov	r3, r1
 80184d0:	005b      	lsls	r3, r3, #1
 80184d2:	440b      	add	r3, r1
 80184d4:	00db      	lsls	r3, r3, #3
 80184d6:	4413      	add	r3, r2
 80184d8:	3308      	adds	r3, #8
 80184da:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80184dc:	68fa      	ldr	r2, [r7, #12]
 80184de:	429a      	cmp	r2, r3
 80184e0:	d117      	bne.n	8018512 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80184e2:	69bb      	ldr	r3, [r7, #24]
 80184e4:	681a      	ldr	r2, [r3, #0]
 80184e6:	4b38      	ldr	r3, [pc, #224]	; (80185c8 <etharp_output+0x1fc>)
 80184e8:	781b      	ldrb	r3, [r3, #0]
 80184ea:	4618      	mov	r0, r3
 80184ec:	4937      	ldr	r1, [pc, #220]	; (80185cc <etharp_output+0x200>)
 80184ee:	4603      	mov	r3, r0
 80184f0:	005b      	lsls	r3, r3, #1
 80184f2:	4403      	add	r3, r0
 80184f4:	00db      	lsls	r3, r3, #3
 80184f6:	440b      	add	r3, r1
 80184f8:	3304      	adds	r3, #4
 80184fa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80184fc:	429a      	cmp	r2, r3
 80184fe:	d108      	bne.n	8018512 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018500:	4b31      	ldr	r3, [pc, #196]	; (80185c8 <etharp_output+0x1fc>)
 8018502:	781b      	ldrb	r3, [r3, #0]
 8018504:	461a      	mov	r2, r3
 8018506:	68b9      	ldr	r1, [r7, #8]
 8018508:	68f8      	ldr	r0, [r7, #12]
 801850a:	f7ff fec5 	bl	8018298 <etharp_output_to_arp_index>
 801850e:	4603      	mov	r3, r0
 8018510:	e04a      	b.n	80185a8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018512:	2300      	movs	r3, #0
 8018514:	75fb      	strb	r3, [r7, #23]
 8018516:	e031      	b.n	801857c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018518:	7dfa      	ldrb	r2, [r7, #23]
 801851a:	492c      	ldr	r1, [pc, #176]	; (80185cc <etharp_output+0x200>)
 801851c:	4613      	mov	r3, r2
 801851e:	005b      	lsls	r3, r3, #1
 8018520:	4413      	add	r3, r2
 8018522:	00db      	lsls	r3, r3, #3
 8018524:	440b      	add	r3, r1
 8018526:	3314      	adds	r3, #20
 8018528:	781b      	ldrb	r3, [r3, #0]
 801852a:	2b01      	cmp	r3, #1
 801852c:	d923      	bls.n	8018576 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801852e:	7dfa      	ldrb	r2, [r7, #23]
 8018530:	4926      	ldr	r1, [pc, #152]	; (80185cc <etharp_output+0x200>)
 8018532:	4613      	mov	r3, r2
 8018534:	005b      	lsls	r3, r3, #1
 8018536:	4413      	add	r3, r2
 8018538:	00db      	lsls	r3, r3, #3
 801853a:	440b      	add	r3, r1
 801853c:	3308      	adds	r3, #8
 801853e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018540:	68fa      	ldr	r2, [r7, #12]
 8018542:	429a      	cmp	r2, r3
 8018544:	d117      	bne.n	8018576 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018546:	69bb      	ldr	r3, [r7, #24]
 8018548:	6819      	ldr	r1, [r3, #0]
 801854a:	7dfa      	ldrb	r2, [r7, #23]
 801854c:	481f      	ldr	r0, [pc, #124]	; (80185cc <etharp_output+0x200>)
 801854e:	4613      	mov	r3, r2
 8018550:	005b      	lsls	r3, r3, #1
 8018552:	4413      	add	r3, r2
 8018554:	00db      	lsls	r3, r3, #3
 8018556:	4403      	add	r3, r0
 8018558:	3304      	adds	r3, #4
 801855a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801855c:	4299      	cmp	r1, r3
 801855e:	d10a      	bne.n	8018576 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018560:	4a19      	ldr	r2, [pc, #100]	; (80185c8 <etharp_output+0x1fc>)
 8018562:	7dfb      	ldrb	r3, [r7, #23]
 8018564:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018566:	7dfb      	ldrb	r3, [r7, #23]
 8018568:	461a      	mov	r2, r3
 801856a:	68b9      	ldr	r1, [r7, #8]
 801856c:	68f8      	ldr	r0, [r7, #12]
 801856e:	f7ff fe93 	bl	8018298 <etharp_output_to_arp_index>
 8018572:	4603      	mov	r3, r0
 8018574:	e018      	b.n	80185a8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018576:	7dfb      	ldrb	r3, [r7, #23]
 8018578:	3301      	adds	r3, #1
 801857a:	75fb      	strb	r3, [r7, #23]
 801857c:	7dfb      	ldrb	r3, [r7, #23]
 801857e:	2b09      	cmp	r3, #9
 8018580:	d9ca      	bls.n	8018518 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018582:	68ba      	ldr	r2, [r7, #8]
 8018584:	69b9      	ldr	r1, [r7, #24]
 8018586:	68f8      	ldr	r0, [r7, #12]
 8018588:	f000 f822 	bl	80185d0 <etharp_query>
 801858c:	4603      	mov	r3, r0
 801858e:	e00b      	b.n	80185a8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018596:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801859a:	9300      	str	r3, [sp, #0]
 801859c:	69fb      	ldr	r3, [r7, #28]
 801859e:	68b9      	ldr	r1, [r7, #8]
 80185a0:	68f8      	ldr	r0, [r7, #12]
 80185a2:	f001 fd45 	bl	801a030 <ethernet_output>
 80185a6:	4603      	mov	r3, r0
}
 80185a8:	4618      	mov	r0, r3
 80185aa:	3720      	adds	r7, #32
 80185ac:	46bd      	mov	sp, r7
 80185ae:	bd80      	pop	{r7, pc}
 80185b0:	0801e220 	.word	0x0801e220
 80185b4:	0801e370 	.word	0x0801e370
 80185b8:	0801e298 	.word	0x0801e298
 80185bc:	0801e3c0 	.word	0x0801e3c0
 80185c0:	0801e360 	.word	0x0801e360
 80185c4:	0801eaf0 	.word	0x0801eaf0
 80185c8:	20008768 	.word	0x20008768
 80185cc:	20008678 	.word	0x20008678

080185d0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80185d0:	b580      	push	{r7, lr}
 80185d2:	b08c      	sub	sp, #48	; 0x30
 80185d4:	af02      	add	r7, sp, #8
 80185d6:	60f8      	str	r0, [r7, #12]
 80185d8:	60b9      	str	r1, [r7, #8]
 80185da:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	3326      	adds	r3, #38	; 0x26
 80185e0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80185e2:	23ff      	movs	r3, #255	; 0xff
 80185e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80185e8:	2300      	movs	r3, #0
 80185ea:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80185ec:	68bb      	ldr	r3, [r7, #8]
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	68f9      	ldr	r1, [r7, #12]
 80185f2:	4618      	mov	r0, r3
 80185f4:	f000 fe0e 	bl	8019214 <ip4_addr_isbroadcast_u32>
 80185f8:	4603      	mov	r3, r0
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d10c      	bne.n	8018618 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80185fe:	68bb      	ldr	r3, [r7, #8]
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018606:	2be0      	cmp	r3, #224	; 0xe0
 8018608:	d006      	beq.n	8018618 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801860a:	68bb      	ldr	r3, [r7, #8]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d003      	beq.n	8018618 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018610:	68bb      	ldr	r3, [r7, #8]
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	2b00      	cmp	r3, #0
 8018616:	d102      	bne.n	801861e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018618:	f06f 030f 	mvn.w	r3, #15
 801861c:	e101      	b.n	8018822 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801861e:	68fa      	ldr	r2, [r7, #12]
 8018620:	2101      	movs	r1, #1
 8018622:	68b8      	ldr	r0, [r7, #8]
 8018624:	f7ff fb60 	bl	8017ce8 <etharp_find_entry>
 8018628:	4603      	mov	r3, r0
 801862a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801862c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018630:	2b00      	cmp	r3, #0
 8018632:	da02      	bge.n	801863a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018634:	8a7b      	ldrh	r3, [r7, #18]
 8018636:	b25b      	sxtb	r3, r3
 8018638:	e0f3      	b.n	8018822 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801863a:	8a7b      	ldrh	r3, [r7, #18]
 801863c:	2b7e      	cmp	r3, #126	; 0x7e
 801863e:	d906      	bls.n	801864e <etharp_query+0x7e>
 8018640:	4b7a      	ldr	r3, [pc, #488]	; (801882c <etharp_query+0x25c>)
 8018642:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018646:	497a      	ldr	r1, [pc, #488]	; (8018830 <etharp_query+0x260>)
 8018648:	487a      	ldr	r0, [pc, #488]	; (8018834 <etharp_query+0x264>)
 801864a:	f002 fd0b 	bl	801b064 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801864e:	8a7b      	ldrh	r3, [r7, #18]
 8018650:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018652:	7c7a      	ldrb	r2, [r7, #17]
 8018654:	4978      	ldr	r1, [pc, #480]	; (8018838 <etharp_query+0x268>)
 8018656:	4613      	mov	r3, r2
 8018658:	005b      	lsls	r3, r3, #1
 801865a:	4413      	add	r3, r2
 801865c:	00db      	lsls	r3, r3, #3
 801865e:	440b      	add	r3, r1
 8018660:	3314      	adds	r3, #20
 8018662:	781b      	ldrb	r3, [r3, #0]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d115      	bne.n	8018694 <etharp_query+0xc4>
    is_new_entry = 1;
 8018668:	2301      	movs	r3, #1
 801866a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801866c:	7c7a      	ldrb	r2, [r7, #17]
 801866e:	4972      	ldr	r1, [pc, #456]	; (8018838 <etharp_query+0x268>)
 8018670:	4613      	mov	r3, r2
 8018672:	005b      	lsls	r3, r3, #1
 8018674:	4413      	add	r3, r2
 8018676:	00db      	lsls	r3, r3, #3
 8018678:	440b      	add	r3, r1
 801867a:	3314      	adds	r3, #20
 801867c:	2201      	movs	r2, #1
 801867e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018680:	7c7a      	ldrb	r2, [r7, #17]
 8018682:	496d      	ldr	r1, [pc, #436]	; (8018838 <etharp_query+0x268>)
 8018684:	4613      	mov	r3, r2
 8018686:	005b      	lsls	r3, r3, #1
 8018688:	4413      	add	r3, r2
 801868a:	00db      	lsls	r3, r3, #3
 801868c:	440b      	add	r3, r1
 801868e:	3308      	adds	r3, #8
 8018690:	68fa      	ldr	r2, [r7, #12]
 8018692:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018694:	7c7a      	ldrb	r2, [r7, #17]
 8018696:	4968      	ldr	r1, [pc, #416]	; (8018838 <etharp_query+0x268>)
 8018698:	4613      	mov	r3, r2
 801869a:	005b      	lsls	r3, r3, #1
 801869c:	4413      	add	r3, r2
 801869e:	00db      	lsls	r3, r3, #3
 80186a0:	440b      	add	r3, r1
 80186a2:	3314      	adds	r3, #20
 80186a4:	781b      	ldrb	r3, [r3, #0]
 80186a6:	2b01      	cmp	r3, #1
 80186a8:	d011      	beq.n	80186ce <etharp_query+0xfe>
 80186aa:	7c7a      	ldrb	r2, [r7, #17]
 80186ac:	4962      	ldr	r1, [pc, #392]	; (8018838 <etharp_query+0x268>)
 80186ae:	4613      	mov	r3, r2
 80186b0:	005b      	lsls	r3, r3, #1
 80186b2:	4413      	add	r3, r2
 80186b4:	00db      	lsls	r3, r3, #3
 80186b6:	440b      	add	r3, r1
 80186b8:	3314      	adds	r3, #20
 80186ba:	781b      	ldrb	r3, [r3, #0]
 80186bc:	2b01      	cmp	r3, #1
 80186be:	d806      	bhi.n	80186ce <etharp_query+0xfe>
 80186c0:	4b5a      	ldr	r3, [pc, #360]	; (801882c <etharp_query+0x25c>)
 80186c2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80186c6:	495d      	ldr	r1, [pc, #372]	; (801883c <etharp_query+0x26c>)
 80186c8:	485a      	ldr	r0, [pc, #360]	; (8018834 <etharp_query+0x264>)
 80186ca:	f002 fccb 	bl	801b064 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80186ce:	6a3b      	ldr	r3, [r7, #32]
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d102      	bne.n	80186da <etharp_query+0x10a>
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d10c      	bne.n	80186f4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80186da:	68b9      	ldr	r1, [r7, #8]
 80186dc:	68f8      	ldr	r0, [r7, #12]
 80186de:	f000 f963 	bl	80189a8 <etharp_request>
 80186e2:	4603      	mov	r3, r0
 80186e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d102      	bne.n	80186f4 <etharp_query+0x124>
      return result;
 80186ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80186f2:	e096      	b.n	8018822 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d106      	bne.n	8018708 <etharp_query+0x138>
 80186fa:	4b4c      	ldr	r3, [pc, #304]	; (801882c <etharp_query+0x25c>)
 80186fc:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018700:	494f      	ldr	r1, [pc, #316]	; (8018840 <etharp_query+0x270>)
 8018702:	484c      	ldr	r0, [pc, #304]	; (8018834 <etharp_query+0x264>)
 8018704:	f002 fcae 	bl	801b064 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018708:	7c7a      	ldrb	r2, [r7, #17]
 801870a:	494b      	ldr	r1, [pc, #300]	; (8018838 <etharp_query+0x268>)
 801870c:	4613      	mov	r3, r2
 801870e:	005b      	lsls	r3, r3, #1
 8018710:	4413      	add	r3, r2
 8018712:	00db      	lsls	r3, r3, #3
 8018714:	440b      	add	r3, r1
 8018716:	3314      	adds	r3, #20
 8018718:	781b      	ldrb	r3, [r3, #0]
 801871a:	2b01      	cmp	r3, #1
 801871c:	d917      	bls.n	801874e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801871e:	4a49      	ldr	r2, [pc, #292]	; (8018844 <etharp_query+0x274>)
 8018720:	7c7b      	ldrb	r3, [r7, #17]
 8018722:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018724:	7c7a      	ldrb	r2, [r7, #17]
 8018726:	4613      	mov	r3, r2
 8018728:	005b      	lsls	r3, r3, #1
 801872a:	4413      	add	r3, r2
 801872c:	00db      	lsls	r3, r3, #3
 801872e:	3308      	adds	r3, #8
 8018730:	4a41      	ldr	r2, [pc, #260]	; (8018838 <etharp_query+0x268>)
 8018732:	4413      	add	r3, r2
 8018734:	3304      	adds	r3, #4
 8018736:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801873a:	9200      	str	r2, [sp, #0]
 801873c:	697a      	ldr	r2, [r7, #20]
 801873e:	6879      	ldr	r1, [r7, #4]
 8018740:	68f8      	ldr	r0, [r7, #12]
 8018742:	f001 fc75 	bl	801a030 <ethernet_output>
 8018746:	4603      	mov	r3, r0
 8018748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801874c:	e067      	b.n	801881e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801874e:	7c7a      	ldrb	r2, [r7, #17]
 8018750:	4939      	ldr	r1, [pc, #228]	; (8018838 <etharp_query+0x268>)
 8018752:	4613      	mov	r3, r2
 8018754:	005b      	lsls	r3, r3, #1
 8018756:	4413      	add	r3, r2
 8018758:	00db      	lsls	r3, r3, #3
 801875a:	440b      	add	r3, r1
 801875c:	3314      	adds	r3, #20
 801875e:	781b      	ldrb	r3, [r3, #0]
 8018760:	2b01      	cmp	r3, #1
 8018762:	d15c      	bne.n	801881e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018764:	2300      	movs	r3, #0
 8018766:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801876c:	e01c      	b.n	80187a8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801876e:	69fb      	ldr	r3, [r7, #28]
 8018770:	895a      	ldrh	r2, [r3, #10]
 8018772:	69fb      	ldr	r3, [r7, #28]
 8018774:	891b      	ldrh	r3, [r3, #8]
 8018776:	429a      	cmp	r2, r3
 8018778:	d10a      	bne.n	8018790 <etharp_query+0x1c0>
 801877a:	69fb      	ldr	r3, [r7, #28]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	2b00      	cmp	r3, #0
 8018780:	d006      	beq.n	8018790 <etharp_query+0x1c0>
 8018782:	4b2a      	ldr	r3, [pc, #168]	; (801882c <etharp_query+0x25c>)
 8018784:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018788:	492f      	ldr	r1, [pc, #188]	; (8018848 <etharp_query+0x278>)
 801878a:	482a      	ldr	r0, [pc, #168]	; (8018834 <etharp_query+0x264>)
 801878c:	f002 fc6a 	bl	801b064 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018790:	69fb      	ldr	r3, [r7, #28]
 8018792:	7b1b      	ldrb	r3, [r3, #12]
 8018794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018798:	2b00      	cmp	r3, #0
 801879a:	d002      	beq.n	80187a2 <etharp_query+0x1d2>
        copy_needed = 1;
 801879c:	2301      	movs	r3, #1
 801879e:	61bb      	str	r3, [r7, #24]
        break;
 80187a0:	e005      	b.n	80187ae <etharp_query+0x1de>
      }
      p = p->next;
 80187a2:	69fb      	ldr	r3, [r7, #28]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80187a8:	69fb      	ldr	r3, [r7, #28]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d1df      	bne.n	801876e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80187ae:	69bb      	ldr	r3, [r7, #24]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d007      	beq.n	80187c4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80187b4:	687a      	ldr	r2, [r7, #4]
 80187b6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80187ba:	200e      	movs	r0, #14
 80187bc:	f7f9 fd2a 	bl	8012214 <pbuf_clone>
 80187c0:	61f8      	str	r0, [r7, #28]
 80187c2:	e004      	b.n	80187ce <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80187c8:	69f8      	ldr	r0, [r7, #28]
 80187ca:	f7f9 fb67 	bl	8011e9c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80187ce:	69fb      	ldr	r3, [r7, #28]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d021      	beq.n	8018818 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80187d4:	7c7a      	ldrb	r2, [r7, #17]
 80187d6:	4918      	ldr	r1, [pc, #96]	; (8018838 <etharp_query+0x268>)
 80187d8:	4613      	mov	r3, r2
 80187da:	005b      	lsls	r3, r3, #1
 80187dc:	4413      	add	r3, r2
 80187de:	00db      	lsls	r3, r3, #3
 80187e0:	440b      	add	r3, r1
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d00a      	beq.n	80187fe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80187e8:	7c7a      	ldrb	r2, [r7, #17]
 80187ea:	4913      	ldr	r1, [pc, #76]	; (8018838 <etharp_query+0x268>)
 80187ec:	4613      	mov	r3, r2
 80187ee:	005b      	lsls	r3, r3, #1
 80187f0:	4413      	add	r3, r2
 80187f2:	00db      	lsls	r3, r3, #3
 80187f4:	440b      	add	r3, r1
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	4618      	mov	r0, r3
 80187fa:	f7f9 faaf 	bl	8011d5c <pbuf_free>
      }
      arp_table[i].q = p;
 80187fe:	7c7a      	ldrb	r2, [r7, #17]
 8018800:	490d      	ldr	r1, [pc, #52]	; (8018838 <etharp_query+0x268>)
 8018802:	4613      	mov	r3, r2
 8018804:	005b      	lsls	r3, r3, #1
 8018806:	4413      	add	r3, r2
 8018808:	00db      	lsls	r3, r3, #3
 801880a:	440b      	add	r3, r1
 801880c:	69fa      	ldr	r2, [r7, #28]
 801880e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018810:	2300      	movs	r3, #0
 8018812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018816:	e002      	b.n	801881e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018818:	23ff      	movs	r3, #255	; 0xff
 801881a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801881e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018822:	4618      	mov	r0, r3
 8018824:	3728      	adds	r7, #40	; 0x28
 8018826:	46bd      	mov	sp, r7
 8018828:	bd80      	pop	{r7, pc}
 801882a:	bf00      	nop
 801882c:	0801e220 	.word	0x0801e220
 8018830:	0801e3cc 	.word	0x0801e3cc
 8018834:	0801e298 	.word	0x0801e298
 8018838:	20008678 	.word	0x20008678
 801883c:	0801e3dc 	.word	0x0801e3dc
 8018840:	0801e3c0 	.word	0x0801e3c0
 8018844:	20008768 	.word	0x20008768
 8018848:	0801e404 	.word	0x0801e404

0801884c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801884c:	b580      	push	{r7, lr}
 801884e:	b08a      	sub	sp, #40	; 0x28
 8018850:	af02      	add	r7, sp, #8
 8018852:	60f8      	str	r0, [r7, #12]
 8018854:	60b9      	str	r1, [r7, #8]
 8018856:	607a      	str	r2, [r7, #4]
 8018858:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801885a:	2300      	movs	r3, #0
 801885c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801885e:	68fb      	ldr	r3, [r7, #12]
 8018860:	2b00      	cmp	r3, #0
 8018862:	d106      	bne.n	8018872 <etharp_raw+0x26>
 8018864:	4b3a      	ldr	r3, [pc, #232]	; (8018950 <etharp_raw+0x104>)
 8018866:	f240 4257 	movw	r2, #1111	; 0x457
 801886a:	493a      	ldr	r1, [pc, #232]	; (8018954 <etharp_raw+0x108>)
 801886c:	483a      	ldr	r0, [pc, #232]	; (8018958 <etharp_raw+0x10c>)
 801886e:	f002 fbf9 	bl	801b064 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018872:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018876:	211c      	movs	r1, #28
 8018878:	200e      	movs	r0, #14
 801887a:	f7f8 ff8b 	bl	8011794 <pbuf_alloc>
 801887e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018880:	69bb      	ldr	r3, [r7, #24]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d102      	bne.n	801888c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018886:	f04f 33ff 	mov.w	r3, #4294967295
 801888a:	e05d      	b.n	8018948 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801888c:	69bb      	ldr	r3, [r7, #24]
 801888e:	895b      	ldrh	r3, [r3, #10]
 8018890:	2b1b      	cmp	r3, #27
 8018892:	d806      	bhi.n	80188a2 <etharp_raw+0x56>
 8018894:	4b2e      	ldr	r3, [pc, #184]	; (8018950 <etharp_raw+0x104>)
 8018896:	f240 4262 	movw	r2, #1122	; 0x462
 801889a:	4930      	ldr	r1, [pc, #192]	; (801895c <etharp_raw+0x110>)
 801889c:	482e      	ldr	r0, [pc, #184]	; (8018958 <etharp_raw+0x10c>)
 801889e:	f002 fbe1 	bl	801b064 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80188a2:	69bb      	ldr	r3, [r7, #24]
 80188a4:	685b      	ldr	r3, [r3, #4]
 80188a6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80188a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80188aa:	4618      	mov	r0, r3
 80188ac:	f7f7 fef9 	bl	80106a2 <lwip_htons>
 80188b0:	4603      	mov	r3, r0
 80188b2:	461a      	mov	r2, r3
 80188b4:	697b      	ldr	r3, [r7, #20]
 80188b6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80188be:	2b06      	cmp	r3, #6
 80188c0:	d006      	beq.n	80188d0 <etharp_raw+0x84>
 80188c2:	4b23      	ldr	r3, [pc, #140]	; (8018950 <etharp_raw+0x104>)
 80188c4:	f240 4269 	movw	r2, #1129	; 0x469
 80188c8:	4925      	ldr	r1, [pc, #148]	; (8018960 <etharp_raw+0x114>)
 80188ca:	4823      	ldr	r0, [pc, #140]	; (8018958 <etharp_raw+0x10c>)
 80188cc:	f002 fbca 	bl	801b064 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80188d0:	697b      	ldr	r3, [r7, #20]
 80188d2:	3308      	adds	r3, #8
 80188d4:	2206      	movs	r2, #6
 80188d6:	6839      	ldr	r1, [r7, #0]
 80188d8:	4618      	mov	r0, r3
 80188da:	f002 fc9e 	bl	801b21a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80188de:	697b      	ldr	r3, [r7, #20]
 80188e0:	3312      	adds	r3, #18
 80188e2:	2206      	movs	r2, #6
 80188e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80188e6:	4618      	mov	r0, r3
 80188e8:	f002 fc97 	bl	801b21a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80188ec:	697b      	ldr	r3, [r7, #20]
 80188ee:	330e      	adds	r3, #14
 80188f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80188f2:	6812      	ldr	r2, [r2, #0]
 80188f4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80188f6:	697b      	ldr	r3, [r7, #20]
 80188f8:	3318      	adds	r3, #24
 80188fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188fc:	6812      	ldr	r2, [r2, #0]
 80188fe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018900:	697b      	ldr	r3, [r7, #20]
 8018902:	2200      	movs	r2, #0
 8018904:	701a      	strb	r2, [r3, #0]
 8018906:	2200      	movs	r2, #0
 8018908:	f042 0201 	orr.w	r2, r2, #1
 801890c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801890e:	697b      	ldr	r3, [r7, #20]
 8018910:	2200      	movs	r2, #0
 8018912:	f042 0208 	orr.w	r2, r2, #8
 8018916:	709a      	strb	r2, [r3, #2]
 8018918:	2200      	movs	r2, #0
 801891a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801891c:	697b      	ldr	r3, [r7, #20]
 801891e:	2206      	movs	r2, #6
 8018920:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018922:	697b      	ldr	r3, [r7, #20]
 8018924:	2204      	movs	r2, #4
 8018926:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018928:	f640 0306 	movw	r3, #2054	; 0x806
 801892c:	9300      	str	r3, [sp, #0]
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	68ba      	ldr	r2, [r7, #8]
 8018932:	69b9      	ldr	r1, [r7, #24]
 8018934:	68f8      	ldr	r0, [r7, #12]
 8018936:	f001 fb7b 	bl	801a030 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801893a:	69b8      	ldr	r0, [r7, #24]
 801893c:	f7f9 fa0e 	bl	8011d5c <pbuf_free>
  p = NULL;
 8018940:	2300      	movs	r3, #0
 8018942:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018944:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018948:	4618      	mov	r0, r3
 801894a:	3720      	adds	r7, #32
 801894c:	46bd      	mov	sp, r7
 801894e:	bd80      	pop	{r7, pc}
 8018950:	0801e220 	.word	0x0801e220
 8018954:	0801e370 	.word	0x0801e370
 8018958:	0801e298 	.word	0x0801e298
 801895c:	0801e420 	.word	0x0801e420
 8018960:	0801e454 	.word	0x0801e454

08018964 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018964:	b580      	push	{r7, lr}
 8018966:	b088      	sub	sp, #32
 8018968:	af04      	add	r7, sp, #16
 801896a:	60f8      	str	r0, [r7, #12]
 801896c:	60b9      	str	r1, [r7, #8]
 801896e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018976:	68fb      	ldr	r3, [r7, #12]
 8018978:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018980:	2201      	movs	r2, #1
 8018982:	9203      	str	r2, [sp, #12]
 8018984:	68ba      	ldr	r2, [r7, #8]
 8018986:	9202      	str	r2, [sp, #8]
 8018988:	4a06      	ldr	r2, [pc, #24]	; (80189a4 <etharp_request_dst+0x40>)
 801898a:	9201      	str	r2, [sp, #4]
 801898c:	9300      	str	r3, [sp, #0]
 801898e:	4603      	mov	r3, r0
 8018990:	687a      	ldr	r2, [r7, #4]
 8018992:	68f8      	ldr	r0, [r7, #12]
 8018994:	f7ff ff5a 	bl	801884c <etharp_raw>
 8018998:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801899a:	4618      	mov	r0, r3
 801899c:	3710      	adds	r7, #16
 801899e:	46bd      	mov	sp, r7
 80189a0:	bd80      	pop	{r7, pc}
 80189a2:	bf00      	nop
 80189a4:	0801eaf8 	.word	0x0801eaf8

080189a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b082      	sub	sp, #8
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	6078      	str	r0, [r7, #4]
 80189b0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80189b2:	4a05      	ldr	r2, [pc, #20]	; (80189c8 <etharp_request+0x20>)
 80189b4:	6839      	ldr	r1, [r7, #0]
 80189b6:	6878      	ldr	r0, [r7, #4]
 80189b8:	f7ff ffd4 	bl	8018964 <etharp_request_dst>
 80189bc:	4603      	mov	r3, r0
}
 80189be:	4618      	mov	r0, r3
 80189c0:	3708      	adds	r7, #8
 80189c2:	46bd      	mov	sp, r7
 80189c4:	bd80      	pop	{r7, pc}
 80189c6:	bf00      	nop
 80189c8:	0801eaf0 	.word	0x0801eaf0

080189cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b08e      	sub	sp, #56	; 0x38
 80189d0:	af04      	add	r7, sp, #16
 80189d2:	6078      	str	r0, [r7, #4]
 80189d4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80189d6:	4b79      	ldr	r3, [pc, #484]	; (8018bbc <icmp_input+0x1f0>)
 80189d8:	689b      	ldr	r3, [r3, #8]
 80189da:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80189dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189de:	781b      	ldrb	r3, [r3, #0]
 80189e0:	f003 030f 	and.w	r3, r3, #15
 80189e4:	b2db      	uxtb	r3, r3
 80189e6:	009b      	lsls	r3, r3, #2
 80189e8:	b2db      	uxtb	r3, r3
 80189ea:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80189ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80189ee:	2b13      	cmp	r3, #19
 80189f0:	f240 80cd 	bls.w	8018b8e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	895b      	ldrh	r3, [r3, #10]
 80189f8:	2b03      	cmp	r3, #3
 80189fa:	f240 80ca 	bls.w	8018b92 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	685b      	ldr	r3, [r3, #4]
 8018a02:	781b      	ldrb	r3, [r3, #0]
 8018a04:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018a08:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	f000 80b7 	beq.w	8018b80 <icmp_input+0x1b4>
 8018a12:	2b08      	cmp	r3, #8
 8018a14:	f040 80b7 	bne.w	8018b86 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018a18:	4b69      	ldr	r3, [pc, #420]	; (8018bc0 <icmp_input+0x1f4>)
 8018a1a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018a1c:	4b67      	ldr	r3, [pc, #412]	; (8018bbc <icmp_input+0x1f0>)
 8018a1e:	695b      	ldr	r3, [r3, #20]
 8018a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018a24:	2be0      	cmp	r3, #224	; 0xe0
 8018a26:	f000 80bb 	beq.w	8018ba0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018a2a:	4b64      	ldr	r3, [pc, #400]	; (8018bbc <icmp_input+0x1f0>)
 8018a2c:	695b      	ldr	r3, [r3, #20]
 8018a2e:	4a63      	ldr	r2, [pc, #396]	; (8018bbc <icmp_input+0x1f0>)
 8018a30:	6812      	ldr	r2, [r2, #0]
 8018a32:	4611      	mov	r1, r2
 8018a34:	4618      	mov	r0, r3
 8018a36:	f000 fbed 	bl	8019214 <ip4_addr_isbroadcast_u32>
 8018a3a:	4603      	mov	r3, r0
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	f040 80b1 	bne.w	8018ba4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	891b      	ldrh	r3, [r3, #8]
 8018a46:	2b07      	cmp	r3, #7
 8018a48:	f240 80a5 	bls.w	8018b96 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018a4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018a4e:	330e      	adds	r3, #14
 8018a50:	4619      	mov	r1, r3
 8018a52:	6878      	ldr	r0, [r7, #4]
 8018a54:	f7f9 f8ec 	bl	8011c30 <pbuf_add_header>
 8018a58:	4603      	mov	r3, r0
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d04b      	beq.n	8018af6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	891a      	ldrh	r2, [r3, #8]
 8018a62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018a64:	4413      	add	r3, r2
 8018a66:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	891b      	ldrh	r3, [r3, #8]
 8018a6c:	8b7a      	ldrh	r2, [r7, #26]
 8018a6e:	429a      	cmp	r2, r3
 8018a70:	f0c0 809a 	bcc.w	8018ba8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018a74:	8b7b      	ldrh	r3, [r7, #26]
 8018a76:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018a7a:	4619      	mov	r1, r3
 8018a7c:	200e      	movs	r0, #14
 8018a7e:	f7f8 fe89 	bl	8011794 <pbuf_alloc>
 8018a82:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8018a84:	697b      	ldr	r3, [r7, #20]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	f000 8090 	beq.w	8018bac <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018a8c:	697b      	ldr	r3, [r7, #20]
 8018a8e:	895b      	ldrh	r3, [r3, #10]
 8018a90:	461a      	mov	r2, r3
 8018a92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018a94:	3308      	adds	r3, #8
 8018a96:	429a      	cmp	r2, r3
 8018a98:	d203      	bcs.n	8018aa2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018a9a:	6978      	ldr	r0, [r7, #20]
 8018a9c:	f7f9 f95e 	bl	8011d5c <pbuf_free>
          goto icmperr;
 8018aa0:	e085      	b.n	8018bae <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018aa2:	697b      	ldr	r3, [r7, #20]
 8018aa4:	685b      	ldr	r3, [r3, #4]
 8018aa6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018aa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018aaa:	4618      	mov	r0, r3
 8018aac:	f002 fbb5 	bl	801b21a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018ab0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018ab2:	4619      	mov	r1, r3
 8018ab4:	6978      	ldr	r0, [r7, #20]
 8018ab6:	f7f9 f8cb 	bl	8011c50 <pbuf_remove_header>
 8018aba:	4603      	mov	r3, r0
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d009      	beq.n	8018ad4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018ac0:	4b40      	ldr	r3, [pc, #256]	; (8018bc4 <icmp_input+0x1f8>)
 8018ac2:	22b6      	movs	r2, #182	; 0xb6
 8018ac4:	4940      	ldr	r1, [pc, #256]	; (8018bc8 <icmp_input+0x1fc>)
 8018ac6:	4841      	ldr	r0, [pc, #260]	; (8018bcc <icmp_input+0x200>)
 8018ac8:	f002 facc 	bl	801b064 <iprintf>
          pbuf_free(r);
 8018acc:	6978      	ldr	r0, [r7, #20]
 8018ace:	f7f9 f945 	bl	8011d5c <pbuf_free>
          goto icmperr;
 8018ad2:	e06c      	b.n	8018bae <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8018ad4:	6879      	ldr	r1, [r7, #4]
 8018ad6:	6978      	ldr	r0, [r7, #20]
 8018ad8:	f7f9 fa58 	bl	8011f8c <pbuf_copy>
 8018adc:	4603      	mov	r3, r0
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d003      	beq.n	8018aea <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018ae2:	6978      	ldr	r0, [r7, #20]
 8018ae4:	f7f9 f93a 	bl	8011d5c <pbuf_free>
          goto icmperr;
 8018ae8:	e061      	b.n	8018bae <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8018aea:	6878      	ldr	r0, [r7, #4]
 8018aec:	f7f9 f936 	bl	8011d5c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018af0:	697b      	ldr	r3, [r7, #20]
 8018af2:	607b      	str	r3, [r7, #4]
 8018af4:	e00f      	b.n	8018b16 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018af6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018af8:	330e      	adds	r3, #14
 8018afa:	4619      	mov	r1, r3
 8018afc:	6878      	ldr	r0, [r7, #4]
 8018afe:	f7f9 f8a7 	bl	8011c50 <pbuf_remove_header>
 8018b02:	4603      	mov	r3, r0
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d006      	beq.n	8018b16 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8018b08:	4b2e      	ldr	r3, [pc, #184]	; (8018bc4 <icmp_input+0x1f8>)
 8018b0a:	22c7      	movs	r2, #199	; 0xc7
 8018b0c:	4930      	ldr	r1, [pc, #192]	; (8018bd0 <icmp_input+0x204>)
 8018b0e:	482f      	ldr	r0, [pc, #188]	; (8018bcc <icmp_input+0x200>)
 8018b10:	f002 faa8 	bl	801b064 <iprintf>
          goto icmperr;
 8018b14:	e04b      	b.n	8018bae <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	685b      	ldr	r3, [r3, #4]
 8018b1a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018b1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018b1e:	4619      	mov	r1, r3
 8018b20:	6878      	ldr	r0, [r7, #4]
 8018b22:	f7f9 f885 	bl	8011c30 <pbuf_add_header>
 8018b26:	4603      	mov	r3, r0
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d12b      	bne.n	8018b84 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	685b      	ldr	r3, [r3, #4]
 8018b30:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8018b32:	69fb      	ldr	r3, [r7, #28]
 8018b34:	681a      	ldr	r2, [r3, #0]
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018b3a:	4b20      	ldr	r3, [pc, #128]	; (8018bbc <icmp_input+0x1f0>)
 8018b3c:	691a      	ldr	r2, [r3, #16]
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8018b42:	693b      	ldr	r3, [r7, #16]
 8018b44:	2200      	movs	r2, #0
 8018b46:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8018b48:	693b      	ldr	r3, [r7, #16]
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	709a      	strb	r2, [r3, #2]
 8018b4e:	2200      	movs	r2, #0
 8018b50:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	22ff      	movs	r2, #255	; 0xff
 8018b56:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	729a      	strb	r2, [r3, #10]
 8018b5e:	2200      	movs	r2, #0
 8018b60:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8018b62:	683b      	ldr	r3, [r7, #0]
 8018b64:	9302      	str	r3, [sp, #8]
 8018b66:	2301      	movs	r3, #1
 8018b68:	9301      	str	r3, [sp, #4]
 8018b6a:	2300      	movs	r3, #0
 8018b6c:	9300      	str	r3, [sp, #0]
 8018b6e:	23ff      	movs	r3, #255	; 0xff
 8018b70:	2200      	movs	r2, #0
 8018b72:	69f9      	ldr	r1, [r7, #28]
 8018b74:	6878      	ldr	r0, [r7, #4]
 8018b76:	f000 fa75 	bl	8019064 <ip4_output_if>
 8018b7a:	4603      	mov	r3, r0
 8018b7c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018b7e:	e001      	b.n	8018b84 <icmp_input+0x1b8>
      break;
 8018b80:	bf00      	nop
 8018b82:	e000      	b.n	8018b86 <icmp_input+0x1ba>
      break;
 8018b84:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018b86:	6878      	ldr	r0, [r7, #4]
 8018b88:	f7f9 f8e8 	bl	8011d5c <pbuf_free>
  return;
 8018b8c:	e013      	b.n	8018bb6 <icmp_input+0x1ea>
    goto lenerr;
 8018b8e:	bf00      	nop
 8018b90:	e002      	b.n	8018b98 <icmp_input+0x1cc>
    goto lenerr;
 8018b92:	bf00      	nop
 8018b94:	e000      	b.n	8018b98 <icmp_input+0x1cc>
        goto lenerr;
 8018b96:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018b98:	6878      	ldr	r0, [r7, #4]
 8018b9a:	f7f9 f8df 	bl	8011d5c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018b9e:	e00a      	b.n	8018bb6 <icmp_input+0x1ea>
        goto icmperr;
 8018ba0:	bf00      	nop
 8018ba2:	e004      	b.n	8018bae <icmp_input+0x1e2>
        goto icmperr;
 8018ba4:	bf00      	nop
 8018ba6:	e002      	b.n	8018bae <icmp_input+0x1e2>
          goto icmperr;
 8018ba8:	bf00      	nop
 8018baa:	e000      	b.n	8018bae <icmp_input+0x1e2>
          goto icmperr;
 8018bac:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018bae:	6878      	ldr	r0, [r7, #4]
 8018bb0:	f7f9 f8d4 	bl	8011d5c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018bb4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8018bb6:	3728      	adds	r7, #40	; 0x28
 8018bb8:	46bd      	mov	sp, r7
 8018bba:	bd80      	pop	{r7, pc}
 8018bbc:	200054e8 	.word	0x200054e8
 8018bc0:	200054fc 	.word	0x200054fc
 8018bc4:	0801e498 	.word	0x0801e498
 8018bc8:	0801e4d0 	.word	0x0801e4d0
 8018bcc:	0801e508 	.word	0x0801e508
 8018bd0:	0801e530 	.word	0x0801e530

08018bd4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018bd4:	b580      	push	{r7, lr}
 8018bd6:	b082      	sub	sp, #8
 8018bd8:	af00      	add	r7, sp, #0
 8018bda:	6078      	str	r0, [r7, #4]
 8018bdc:	460b      	mov	r3, r1
 8018bde:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018be0:	78fb      	ldrb	r3, [r7, #3]
 8018be2:	461a      	mov	r2, r3
 8018be4:	2103      	movs	r1, #3
 8018be6:	6878      	ldr	r0, [r7, #4]
 8018be8:	f000 f814 	bl	8018c14 <icmp_send_response>
}
 8018bec:	bf00      	nop
 8018bee:	3708      	adds	r7, #8
 8018bf0:	46bd      	mov	sp, r7
 8018bf2:	bd80      	pop	{r7, pc}

08018bf4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018bf4:	b580      	push	{r7, lr}
 8018bf6:	b082      	sub	sp, #8
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	6078      	str	r0, [r7, #4]
 8018bfc:	460b      	mov	r3, r1
 8018bfe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018c00:	78fb      	ldrb	r3, [r7, #3]
 8018c02:	461a      	mov	r2, r3
 8018c04:	210b      	movs	r1, #11
 8018c06:	6878      	ldr	r0, [r7, #4]
 8018c08:	f000 f804 	bl	8018c14 <icmp_send_response>
}
 8018c0c:	bf00      	nop
 8018c0e:	3708      	adds	r7, #8
 8018c10:	46bd      	mov	sp, r7
 8018c12:	bd80      	pop	{r7, pc}

08018c14 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018c14:	b580      	push	{r7, lr}
 8018c16:	b08c      	sub	sp, #48	; 0x30
 8018c18:	af04      	add	r7, sp, #16
 8018c1a:	6078      	str	r0, [r7, #4]
 8018c1c:	460b      	mov	r3, r1
 8018c1e:	70fb      	strb	r3, [r7, #3]
 8018c20:	4613      	mov	r3, r2
 8018c22:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018c24:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018c28:	2124      	movs	r1, #36	; 0x24
 8018c2a:	2022      	movs	r0, #34	; 0x22
 8018c2c:	f7f8 fdb2 	bl	8011794 <pbuf_alloc>
 8018c30:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8018c32:	69fb      	ldr	r3, [r7, #28]
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d04c      	beq.n	8018cd2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018c38:	69fb      	ldr	r3, [r7, #28]
 8018c3a:	895b      	ldrh	r3, [r3, #10]
 8018c3c:	2b23      	cmp	r3, #35	; 0x23
 8018c3e:	d806      	bhi.n	8018c4e <icmp_send_response+0x3a>
 8018c40:	4b26      	ldr	r3, [pc, #152]	; (8018cdc <icmp_send_response+0xc8>)
 8018c42:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018c46:	4926      	ldr	r1, [pc, #152]	; (8018ce0 <icmp_send_response+0xcc>)
 8018c48:	4826      	ldr	r0, [pc, #152]	; (8018ce4 <icmp_send_response+0xd0>)
 8018c4a:	f002 fa0b 	bl	801b064 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	685b      	ldr	r3, [r3, #4]
 8018c52:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018c54:	69fb      	ldr	r3, [r7, #28]
 8018c56:	685b      	ldr	r3, [r3, #4]
 8018c58:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018c5a:	697b      	ldr	r3, [r7, #20]
 8018c5c:	78fa      	ldrb	r2, [r7, #3]
 8018c5e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018c60:	697b      	ldr	r3, [r7, #20]
 8018c62:	78ba      	ldrb	r2, [r7, #2]
 8018c64:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018c66:	697b      	ldr	r3, [r7, #20]
 8018c68:	2200      	movs	r2, #0
 8018c6a:	711a      	strb	r2, [r3, #4]
 8018c6c:	2200      	movs	r2, #0
 8018c6e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018c70:	697b      	ldr	r3, [r7, #20]
 8018c72:	2200      	movs	r2, #0
 8018c74:	719a      	strb	r2, [r3, #6]
 8018c76:	2200      	movs	r2, #0
 8018c78:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018c7a:	69fb      	ldr	r3, [r7, #28]
 8018c7c:	685b      	ldr	r3, [r3, #4]
 8018c7e:	f103 0008 	add.w	r0, r3, #8
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	685b      	ldr	r3, [r3, #4]
 8018c86:	221c      	movs	r2, #28
 8018c88:	4619      	mov	r1, r3
 8018c8a:	f002 fac6 	bl	801b21a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8018c8e:	69bb      	ldr	r3, [r7, #24]
 8018c90:	68db      	ldr	r3, [r3, #12]
 8018c92:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018c94:	f107 030c 	add.w	r3, r7, #12
 8018c98:	4618      	mov	r0, r3
 8018c9a:	f000 f825 	bl	8018ce8 <ip4_route>
 8018c9e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8018ca0:	693b      	ldr	r3, [r7, #16]
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d011      	beq.n	8018cca <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018ca6:	697b      	ldr	r3, [r7, #20]
 8018ca8:	2200      	movs	r2, #0
 8018caa:	709a      	strb	r2, [r3, #2]
 8018cac:	2200      	movs	r2, #0
 8018cae:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018cb0:	f107 020c 	add.w	r2, r7, #12
 8018cb4:	693b      	ldr	r3, [r7, #16]
 8018cb6:	9302      	str	r3, [sp, #8]
 8018cb8:	2301      	movs	r3, #1
 8018cba:	9301      	str	r3, [sp, #4]
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	9300      	str	r3, [sp, #0]
 8018cc0:	23ff      	movs	r3, #255	; 0xff
 8018cc2:	2100      	movs	r1, #0
 8018cc4:	69f8      	ldr	r0, [r7, #28]
 8018cc6:	f000 f9cd 	bl	8019064 <ip4_output_if>
  }
  pbuf_free(q);
 8018cca:	69f8      	ldr	r0, [r7, #28]
 8018ccc:	f7f9 f846 	bl	8011d5c <pbuf_free>
 8018cd0:	e000      	b.n	8018cd4 <icmp_send_response+0xc0>
    return;
 8018cd2:	bf00      	nop
}
 8018cd4:	3720      	adds	r7, #32
 8018cd6:	46bd      	mov	sp, r7
 8018cd8:	bd80      	pop	{r7, pc}
 8018cda:	bf00      	nop
 8018cdc:	0801e498 	.word	0x0801e498
 8018ce0:	0801e564 	.word	0x0801e564
 8018ce4:	0801e508 	.word	0x0801e508

08018ce8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018ce8:	b480      	push	{r7}
 8018cea:	b085      	sub	sp, #20
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018cf0:	4b33      	ldr	r3, [pc, #204]	; (8018dc0 <ip4_route+0xd8>)
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	60fb      	str	r3, [r7, #12]
 8018cf6:	e036      	b.n	8018d66 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018cf8:	68fb      	ldr	r3, [r7, #12]
 8018cfa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018cfe:	f003 0301 	and.w	r3, r3, #1
 8018d02:	b2db      	uxtb	r3, r3
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d02b      	beq.n	8018d60 <ip4_route+0x78>
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018d0e:	089b      	lsrs	r3, r3, #2
 8018d10:	f003 0301 	and.w	r3, r3, #1
 8018d14:	b2db      	uxtb	r3, r3
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d022      	beq.n	8018d60 <ip4_route+0x78>
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	3304      	adds	r3, #4
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d01d      	beq.n	8018d60 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	681a      	ldr	r2, [r3, #0]
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	3304      	adds	r3, #4
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	405a      	eors	r2, r3
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	3308      	adds	r3, #8
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	4013      	ands	r3, r2
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d101      	bne.n	8018d40 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	e038      	b.n	8018db2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018d46:	f003 0302 	and.w	r3, r3, #2
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d108      	bne.n	8018d60 <ip4_route+0x78>
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	681a      	ldr	r2, [r3, #0]
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	330c      	adds	r3, #12
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	429a      	cmp	r2, r3
 8018d5a:	d101      	bne.n	8018d60 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018d5c:	68fb      	ldr	r3, [r7, #12]
 8018d5e:	e028      	b.n	8018db2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	60fb      	str	r3, [r7, #12]
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d1c5      	bne.n	8018cf8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018d6c:	4b15      	ldr	r3, [pc, #84]	; (8018dc4 <ip4_route+0xdc>)
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d01a      	beq.n	8018daa <ip4_route+0xc2>
 8018d74:	4b13      	ldr	r3, [pc, #76]	; (8018dc4 <ip4_route+0xdc>)
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018d7c:	f003 0301 	and.w	r3, r3, #1
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d012      	beq.n	8018daa <ip4_route+0xc2>
 8018d84:	4b0f      	ldr	r3, [pc, #60]	; (8018dc4 <ip4_route+0xdc>)
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018d8c:	f003 0304 	and.w	r3, r3, #4
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d00a      	beq.n	8018daa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018d94:	4b0b      	ldr	r3, [pc, #44]	; (8018dc4 <ip4_route+0xdc>)
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	3304      	adds	r3, #4
 8018d9a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d004      	beq.n	8018daa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	b2db      	uxtb	r3, r3
 8018da6:	2b7f      	cmp	r3, #127	; 0x7f
 8018da8:	d101      	bne.n	8018dae <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018daa:	2300      	movs	r3, #0
 8018dac:	e001      	b.n	8018db2 <ip4_route+0xca>
  }

  return netif_default;
 8018dae:	4b05      	ldr	r3, [pc, #20]	; (8018dc4 <ip4_route+0xdc>)
 8018db0:	681b      	ldr	r3, [r3, #0]
}
 8018db2:	4618      	mov	r0, r3
 8018db4:	3714      	adds	r7, #20
 8018db6:	46bd      	mov	sp, r7
 8018db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dbc:	4770      	bx	lr
 8018dbe:	bf00      	nop
 8018dc0:	2000860c 	.word	0x2000860c
 8018dc4:	20008610 	.word	0x20008610

08018dc8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b082      	sub	sp, #8
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018dd6:	f003 0301 	and.w	r3, r3, #1
 8018dda:	b2db      	uxtb	r3, r3
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d016      	beq.n	8018e0e <ip4_input_accept+0x46>
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	3304      	adds	r3, #4
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d011      	beq.n	8018e0e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018dea:	4b0b      	ldr	r3, [pc, #44]	; (8018e18 <ip4_input_accept+0x50>)
 8018dec:	695a      	ldr	r2, [r3, #20]
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	3304      	adds	r3, #4
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	429a      	cmp	r2, r3
 8018df6:	d008      	beq.n	8018e0a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018df8:	4b07      	ldr	r3, [pc, #28]	; (8018e18 <ip4_input_accept+0x50>)
 8018dfa:	695b      	ldr	r3, [r3, #20]
 8018dfc:	6879      	ldr	r1, [r7, #4]
 8018dfe:	4618      	mov	r0, r3
 8018e00:	f000 fa08 	bl	8019214 <ip4_addr_isbroadcast_u32>
 8018e04:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d001      	beq.n	8018e0e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018e0a:	2301      	movs	r3, #1
 8018e0c:	e000      	b.n	8018e10 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018e0e:	2300      	movs	r3, #0
}
 8018e10:	4618      	mov	r0, r3
 8018e12:	3708      	adds	r7, #8
 8018e14:	46bd      	mov	sp, r7
 8018e16:	bd80      	pop	{r7, pc}
 8018e18:	200054e8 	.word	0x200054e8

08018e1c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018e1c:	b580      	push	{r7, lr}
 8018e1e:	b086      	sub	sp, #24
 8018e20:	af00      	add	r7, sp, #0
 8018e22:	6078      	str	r0, [r7, #4]
 8018e24:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	685b      	ldr	r3, [r3, #4]
 8018e2a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8018e2c:	697b      	ldr	r3, [r7, #20]
 8018e2e:	781b      	ldrb	r3, [r3, #0]
 8018e30:	091b      	lsrs	r3, r3, #4
 8018e32:	b2db      	uxtb	r3, r3
 8018e34:	2b04      	cmp	r3, #4
 8018e36:	d004      	beq.n	8018e42 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018e38:	6878      	ldr	r0, [r7, #4]
 8018e3a:	f7f8 ff8f 	bl	8011d5c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018e3e:	2300      	movs	r3, #0
 8018e40:	e107      	b.n	8019052 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018e42:	697b      	ldr	r3, [r7, #20]
 8018e44:	781b      	ldrb	r3, [r3, #0]
 8018e46:	f003 030f 	and.w	r3, r3, #15
 8018e4a:	b2db      	uxtb	r3, r3
 8018e4c:	009b      	lsls	r3, r3, #2
 8018e4e:	b2db      	uxtb	r3, r3
 8018e50:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018e52:	697b      	ldr	r3, [r7, #20]
 8018e54:	885b      	ldrh	r3, [r3, #2]
 8018e56:	b29b      	uxth	r3, r3
 8018e58:	4618      	mov	r0, r3
 8018e5a:	f7f7 fc22 	bl	80106a2 <lwip_htons>
 8018e5e:	4603      	mov	r3, r0
 8018e60:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	891b      	ldrh	r3, [r3, #8]
 8018e66:	89ba      	ldrh	r2, [r7, #12]
 8018e68:	429a      	cmp	r2, r3
 8018e6a:	d204      	bcs.n	8018e76 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8018e6c:	89bb      	ldrh	r3, [r7, #12]
 8018e6e:	4619      	mov	r1, r3
 8018e70:	6878      	ldr	r0, [r7, #4]
 8018e72:	f7f8 fded 	bl	8011a50 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	895b      	ldrh	r3, [r3, #10]
 8018e7a:	89fa      	ldrh	r2, [r7, #14]
 8018e7c:	429a      	cmp	r2, r3
 8018e7e:	d807      	bhi.n	8018e90 <ip4_input+0x74>
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	891b      	ldrh	r3, [r3, #8]
 8018e84:	89ba      	ldrh	r2, [r7, #12]
 8018e86:	429a      	cmp	r2, r3
 8018e88:	d802      	bhi.n	8018e90 <ip4_input+0x74>
 8018e8a:	89fb      	ldrh	r3, [r7, #14]
 8018e8c:	2b13      	cmp	r3, #19
 8018e8e:	d804      	bhi.n	8018e9a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018e90:	6878      	ldr	r0, [r7, #4]
 8018e92:	f7f8 ff63 	bl	8011d5c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018e96:	2300      	movs	r3, #0
 8018e98:	e0db      	b.n	8019052 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018e9a:	697b      	ldr	r3, [r7, #20]
 8018e9c:	691b      	ldr	r3, [r3, #16]
 8018e9e:	4a6f      	ldr	r2, [pc, #444]	; (801905c <ip4_input+0x240>)
 8018ea0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018ea2:	697b      	ldr	r3, [r7, #20]
 8018ea4:	68db      	ldr	r3, [r3, #12]
 8018ea6:	4a6d      	ldr	r2, [pc, #436]	; (801905c <ip4_input+0x240>)
 8018ea8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018eaa:	4b6c      	ldr	r3, [pc, #432]	; (801905c <ip4_input+0x240>)
 8018eac:	695b      	ldr	r3, [r3, #20]
 8018eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018eb2:	2be0      	cmp	r3, #224	; 0xe0
 8018eb4:	d112      	bne.n	8018edc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018eb6:	683b      	ldr	r3, [r7, #0]
 8018eb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018ebc:	f003 0301 	and.w	r3, r3, #1
 8018ec0:	b2db      	uxtb	r3, r3
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	d007      	beq.n	8018ed6 <ip4_input+0xba>
 8018ec6:	683b      	ldr	r3, [r7, #0]
 8018ec8:	3304      	adds	r3, #4
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d002      	beq.n	8018ed6 <ip4_input+0xba>
      netif = inp;
 8018ed0:	683b      	ldr	r3, [r7, #0]
 8018ed2:	613b      	str	r3, [r7, #16]
 8018ed4:	e02a      	b.n	8018f2c <ip4_input+0x110>
    } else {
      netif = NULL;
 8018ed6:	2300      	movs	r3, #0
 8018ed8:	613b      	str	r3, [r7, #16]
 8018eda:	e027      	b.n	8018f2c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018edc:	6838      	ldr	r0, [r7, #0]
 8018ede:	f7ff ff73 	bl	8018dc8 <ip4_input_accept>
 8018ee2:	4603      	mov	r3, r0
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d002      	beq.n	8018eee <ip4_input+0xd2>
      netif = inp;
 8018ee8:	683b      	ldr	r3, [r7, #0]
 8018eea:	613b      	str	r3, [r7, #16]
 8018eec:	e01e      	b.n	8018f2c <ip4_input+0x110>
    } else {
      netif = NULL;
 8018eee:	2300      	movs	r3, #0
 8018ef0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018ef2:	4b5a      	ldr	r3, [pc, #360]	; (801905c <ip4_input+0x240>)
 8018ef4:	695b      	ldr	r3, [r3, #20]
 8018ef6:	b2db      	uxtb	r3, r3
 8018ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8018efa:	d017      	beq.n	8018f2c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018efc:	4b58      	ldr	r3, [pc, #352]	; (8019060 <ip4_input+0x244>)
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	613b      	str	r3, [r7, #16]
 8018f02:	e00e      	b.n	8018f22 <ip4_input+0x106>
          if (netif == inp) {
 8018f04:	693a      	ldr	r2, [r7, #16]
 8018f06:	683b      	ldr	r3, [r7, #0]
 8018f08:	429a      	cmp	r2, r3
 8018f0a:	d006      	beq.n	8018f1a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018f0c:	6938      	ldr	r0, [r7, #16]
 8018f0e:	f7ff ff5b 	bl	8018dc8 <ip4_input_accept>
 8018f12:	4603      	mov	r3, r0
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d108      	bne.n	8018f2a <ip4_input+0x10e>
 8018f18:	e000      	b.n	8018f1c <ip4_input+0x100>
            continue;
 8018f1a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018f1c:	693b      	ldr	r3, [r7, #16]
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	613b      	str	r3, [r7, #16]
 8018f22:	693b      	ldr	r3, [r7, #16]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d1ed      	bne.n	8018f04 <ip4_input+0xe8>
 8018f28:	e000      	b.n	8018f2c <ip4_input+0x110>
            break;
 8018f2a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018f2c:	4b4b      	ldr	r3, [pc, #300]	; (801905c <ip4_input+0x240>)
 8018f2e:	691b      	ldr	r3, [r3, #16]
 8018f30:	6839      	ldr	r1, [r7, #0]
 8018f32:	4618      	mov	r0, r3
 8018f34:	f000 f96e 	bl	8019214 <ip4_addr_isbroadcast_u32>
 8018f38:	4603      	mov	r3, r0
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d105      	bne.n	8018f4a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018f3e:	4b47      	ldr	r3, [pc, #284]	; (801905c <ip4_input+0x240>)
 8018f40:	691b      	ldr	r3, [r3, #16]
 8018f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018f46:	2be0      	cmp	r3, #224	; 0xe0
 8018f48:	d104      	bne.n	8018f54 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018f4a:	6878      	ldr	r0, [r7, #4]
 8018f4c:	f7f8 ff06 	bl	8011d5c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018f50:	2300      	movs	r3, #0
 8018f52:	e07e      	b.n	8019052 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018f54:	693b      	ldr	r3, [r7, #16]
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d104      	bne.n	8018f64 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018f5a:	6878      	ldr	r0, [r7, #4]
 8018f5c:	f7f8 fefe 	bl	8011d5c <pbuf_free>
    return ERR_OK;
 8018f60:	2300      	movs	r3, #0
 8018f62:	e076      	b.n	8019052 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018f64:	697b      	ldr	r3, [r7, #20]
 8018f66:	88db      	ldrh	r3, [r3, #6]
 8018f68:	b29b      	uxth	r3, r3
 8018f6a:	461a      	mov	r2, r3
 8018f6c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018f70:	4013      	ands	r3, r2
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d00b      	beq.n	8018f8e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018f76:	6878      	ldr	r0, [r7, #4]
 8018f78:	f000 fc92 	bl	80198a0 <ip4_reass>
 8018f7c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d101      	bne.n	8018f88 <ip4_input+0x16c>
      return ERR_OK;
 8018f84:	2300      	movs	r3, #0
 8018f86:	e064      	b.n	8019052 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	685b      	ldr	r3, [r3, #4]
 8018f8c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018f8e:	4a33      	ldr	r2, [pc, #204]	; (801905c <ip4_input+0x240>)
 8018f90:	693b      	ldr	r3, [r7, #16]
 8018f92:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018f94:	4a31      	ldr	r2, [pc, #196]	; (801905c <ip4_input+0x240>)
 8018f96:	683b      	ldr	r3, [r7, #0]
 8018f98:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018f9a:	4a30      	ldr	r2, [pc, #192]	; (801905c <ip4_input+0x240>)
 8018f9c:	697b      	ldr	r3, [r7, #20]
 8018f9e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018fa0:	697b      	ldr	r3, [r7, #20]
 8018fa2:	781b      	ldrb	r3, [r3, #0]
 8018fa4:	f003 030f 	and.w	r3, r3, #15
 8018fa8:	b2db      	uxtb	r3, r3
 8018faa:	009b      	lsls	r3, r3, #2
 8018fac:	b2db      	uxtb	r3, r3
 8018fae:	b29a      	uxth	r2, r3
 8018fb0:	4b2a      	ldr	r3, [pc, #168]	; (801905c <ip4_input+0x240>)
 8018fb2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018fb4:	89fb      	ldrh	r3, [r7, #14]
 8018fb6:	4619      	mov	r1, r3
 8018fb8:	6878      	ldr	r0, [r7, #4]
 8018fba:	f7f8 fe49 	bl	8011c50 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018fbe:	697b      	ldr	r3, [r7, #20]
 8018fc0:	7a5b      	ldrb	r3, [r3, #9]
 8018fc2:	2b11      	cmp	r3, #17
 8018fc4:	d006      	beq.n	8018fd4 <ip4_input+0x1b8>
 8018fc6:	2b11      	cmp	r3, #17
 8018fc8:	dc13      	bgt.n	8018ff2 <ip4_input+0x1d6>
 8018fca:	2b01      	cmp	r3, #1
 8018fcc:	d00c      	beq.n	8018fe8 <ip4_input+0x1cc>
 8018fce:	2b06      	cmp	r3, #6
 8018fd0:	d005      	beq.n	8018fde <ip4_input+0x1c2>
 8018fd2:	e00e      	b.n	8018ff2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018fd4:	6839      	ldr	r1, [r7, #0]
 8018fd6:	6878      	ldr	r0, [r7, #4]
 8018fd8:	f7fe fc68 	bl	80178ac <udp_input>
        break;
 8018fdc:	e026      	b.n	801902c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018fde:	6839      	ldr	r1, [r7, #0]
 8018fe0:	6878      	ldr	r0, [r7, #4]
 8018fe2:	f7fa fce3 	bl	80139ac <tcp_input>
        break;
 8018fe6:	e021      	b.n	801902c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018fe8:	6839      	ldr	r1, [r7, #0]
 8018fea:	6878      	ldr	r0, [r7, #4]
 8018fec:	f7ff fcee 	bl	80189cc <icmp_input>
        break;
 8018ff0:	e01c      	b.n	801902c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018ff2:	4b1a      	ldr	r3, [pc, #104]	; (801905c <ip4_input+0x240>)
 8018ff4:	695b      	ldr	r3, [r3, #20]
 8018ff6:	6939      	ldr	r1, [r7, #16]
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	f000 f90b 	bl	8019214 <ip4_addr_isbroadcast_u32>
 8018ffe:	4603      	mov	r3, r0
 8019000:	2b00      	cmp	r3, #0
 8019002:	d10f      	bne.n	8019024 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019004:	4b15      	ldr	r3, [pc, #84]	; (801905c <ip4_input+0x240>)
 8019006:	695b      	ldr	r3, [r3, #20]
 8019008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801900c:	2be0      	cmp	r3, #224	; 0xe0
 801900e:	d009      	beq.n	8019024 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019010:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019014:	4619      	mov	r1, r3
 8019016:	6878      	ldr	r0, [r7, #4]
 8019018:	f7f8 fe8d 	bl	8011d36 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801901c:	2102      	movs	r1, #2
 801901e:	6878      	ldr	r0, [r7, #4]
 8019020:	f7ff fdd8 	bl	8018bd4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019024:	6878      	ldr	r0, [r7, #4]
 8019026:	f7f8 fe99 	bl	8011d5c <pbuf_free>
        break;
 801902a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801902c:	4b0b      	ldr	r3, [pc, #44]	; (801905c <ip4_input+0x240>)
 801902e:	2200      	movs	r2, #0
 8019030:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019032:	4b0a      	ldr	r3, [pc, #40]	; (801905c <ip4_input+0x240>)
 8019034:	2200      	movs	r2, #0
 8019036:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019038:	4b08      	ldr	r3, [pc, #32]	; (801905c <ip4_input+0x240>)
 801903a:	2200      	movs	r2, #0
 801903c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801903e:	4b07      	ldr	r3, [pc, #28]	; (801905c <ip4_input+0x240>)
 8019040:	2200      	movs	r2, #0
 8019042:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019044:	4b05      	ldr	r3, [pc, #20]	; (801905c <ip4_input+0x240>)
 8019046:	2200      	movs	r2, #0
 8019048:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801904a:	4b04      	ldr	r3, [pc, #16]	; (801905c <ip4_input+0x240>)
 801904c:	2200      	movs	r2, #0
 801904e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019050:	2300      	movs	r3, #0
}
 8019052:	4618      	mov	r0, r3
 8019054:	3718      	adds	r7, #24
 8019056:	46bd      	mov	sp, r7
 8019058:	bd80      	pop	{r7, pc}
 801905a:	bf00      	nop
 801905c:	200054e8 	.word	0x200054e8
 8019060:	2000860c 	.word	0x2000860c

08019064 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019064:	b580      	push	{r7, lr}
 8019066:	b08a      	sub	sp, #40	; 0x28
 8019068:	af04      	add	r7, sp, #16
 801906a:	60f8      	str	r0, [r7, #12]
 801906c:	60b9      	str	r1, [r7, #8]
 801906e:	607a      	str	r2, [r7, #4]
 8019070:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019072:	68bb      	ldr	r3, [r7, #8]
 8019074:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	2b00      	cmp	r3, #0
 801907a:	d009      	beq.n	8019090 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801907c:	68bb      	ldr	r3, [r7, #8]
 801907e:	2b00      	cmp	r3, #0
 8019080:	d003      	beq.n	801908a <ip4_output_if+0x26>
 8019082:	68bb      	ldr	r3, [r7, #8]
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	2b00      	cmp	r3, #0
 8019088:	d102      	bne.n	8019090 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801908a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801908c:	3304      	adds	r3, #4
 801908e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019090:	78fa      	ldrb	r2, [r7, #3]
 8019092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019094:	9302      	str	r3, [sp, #8]
 8019096:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801909a:	9301      	str	r3, [sp, #4]
 801909c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80190a0:	9300      	str	r3, [sp, #0]
 80190a2:	4613      	mov	r3, r2
 80190a4:	687a      	ldr	r2, [r7, #4]
 80190a6:	6979      	ldr	r1, [r7, #20]
 80190a8:	68f8      	ldr	r0, [r7, #12]
 80190aa:	f000 f805 	bl	80190b8 <ip4_output_if_src>
 80190ae:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80190b0:	4618      	mov	r0, r3
 80190b2:	3718      	adds	r7, #24
 80190b4:	46bd      	mov	sp, r7
 80190b6:	bd80      	pop	{r7, pc}

080190b8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80190b8:	b580      	push	{r7, lr}
 80190ba:	b088      	sub	sp, #32
 80190bc:	af00      	add	r7, sp, #0
 80190be:	60f8      	str	r0, [r7, #12]
 80190c0:	60b9      	str	r1, [r7, #8]
 80190c2:	607a      	str	r2, [r7, #4]
 80190c4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	7b9b      	ldrb	r3, [r3, #14]
 80190ca:	2b01      	cmp	r3, #1
 80190cc:	d006      	beq.n	80190dc <ip4_output_if_src+0x24>
 80190ce:	4b4b      	ldr	r3, [pc, #300]	; (80191fc <ip4_output_if_src+0x144>)
 80190d0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80190d4:	494a      	ldr	r1, [pc, #296]	; (8019200 <ip4_output_if_src+0x148>)
 80190d6:	484b      	ldr	r0, [pc, #300]	; (8019204 <ip4_output_if_src+0x14c>)
 80190d8:	f001 ffc4 	bl	801b064 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d060      	beq.n	80191a4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80190e2:	2314      	movs	r3, #20
 80190e4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80190e6:	2114      	movs	r1, #20
 80190e8:	68f8      	ldr	r0, [r7, #12]
 80190ea:	f7f8 fda1 	bl	8011c30 <pbuf_add_header>
 80190ee:	4603      	mov	r3, r0
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d002      	beq.n	80190fa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80190f4:	f06f 0301 	mvn.w	r3, #1
 80190f8:	e07c      	b.n	80191f4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	685b      	ldr	r3, [r3, #4]
 80190fe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	895b      	ldrh	r3, [r3, #10]
 8019104:	2b13      	cmp	r3, #19
 8019106:	d806      	bhi.n	8019116 <ip4_output_if_src+0x5e>
 8019108:	4b3c      	ldr	r3, [pc, #240]	; (80191fc <ip4_output_if_src+0x144>)
 801910a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801910e:	493e      	ldr	r1, [pc, #248]	; (8019208 <ip4_output_if_src+0x150>)
 8019110:	483c      	ldr	r0, [pc, #240]	; (8019204 <ip4_output_if_src+0x14c>)
 8019112:	f001 ffa7 	bl	801b064 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019116:	69fb      	ldr	r3, [r7, #28]
 8019118:	78fa      	ldrb	r2, [r7, #3]
 801911a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801911c:	69fb      	ldr	r3, [r7, #28]
 801911e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019122:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	681a      	ldr	r2, [r3, #0]
 8019128:	69fb      	ldr	r3, [r7, #28]
 801912a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801912c:	8b7b      	ldrh	r3, [r7, #26]
 801912e:	089b      	lsrs	r3, r3, #2
 8019130:	b29b      	uxth	r3, r3
 8019132:	b2db      	uxtb	r3, r3
 8019134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019138:	b2da      	uxtb	r2, r3
 801913a:	69fb      	ldr	r3, [r7, #28]
 801913c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801913e:	69fb      	ldr	r3, [r7, #28]
 8019140:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019144:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	891b      	ldrh	r3, [r3, #8]
 801914a:	4618      	mov	r0, r3
 801914c:	f7f7 faa9 	bl	80106a2 <lwip_htons>
 8019150:	4603      	mov	r3, r0
 8019152:	461a      	mov	r2, r3
 8019154:	69fb      	ldr	r3, [r7, #28]
 8019156:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019158:	69fb      	ldr	r3, [r7, #28]
 801915a:	2200      	movs	r2, #0
 801915c:	719a      	strb	r2, [r3, #6]
 801915e:	2200      	movs	r2, #0
 8019160:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019162:	4b2a      	ldr	r3, [pc, #168]	; (801920c <ip4_output_if_src+0x154>)
 8019164:	881b      	ldrh	r3, [r3, #0]
 8019166:	4618      	mov	r0, r3
 8019168:	f7f7 fa9b 	bl	80106a2 <lwip_htons>
 801916c:	4603      	mov	r3, r0
 801916e:	461a      	mov	r2, r3
 8019170:	69fb      	ldr	r3, [r7, #28]
 8019172:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019174:	4b25      	ldr	r3, [pc, #148]	; (801920c <ip4_output_if_src+0x154>)
 8019176:	881b      	ldrh	r3, [r3, #0]
 8019178:	3301      	adds	r3, #1
 801917a:	b29a      	uxth	r2, r3
 801917c:	4b23      	ldr	r3, [pc, #140]	; (801920c <ip4_output_if_src+0x154>)
 801917e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019180:	68bb      	ldr	r3, [r7, #8]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d104      	bne.n	8019190 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019186:	4b22      	ldr	r3, [pc, #136]	; (8019210 <ip4_output_if_src+0x158>)
 8019188:	681a      	ldr	r2, [r3, #0]
 801918a:	69fb      	ldr	r3, [r7, #28]
 801918c:	60da      	str	r2, [r3, #12]
 801918e:	e003      	b.n	8019198 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019190:	68bb      	ldr	r3, [r7, #8]
 8019192:	681a      	ldr	r2, [r3, #0]
 8019194:	69fb      	ldr	r3, [r7, #28]
 8019196:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019198:	69fb      	ldr	r3, [r7, #28]
 801919a:	2200      	movs	r2, #0
 801919c:	729a      	strb	r2, [r3, #10]
 801919e:	2200      	movs	r2, #0
 80191a0:	72da      	strb	r2, [r3, #11]
 80191a2:	e00f      	b.n	80191c4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	895b      	ldrh	r3, [r3, #10]
 80191a8:	2b13      	cmp	r3, #19
 80191aa:	d802      	bhi.n	80191b2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80191ac:	f06f 0301 	mvn.w	r3, #1
 80191b0:	e020      	b.n	80191f4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	685b      	ldr	r3, [r3, #4]
 80191b6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80191b8:	69fb      	ldr	r3, [r7, #28]
 80191ba:	691b      	ldr	r3, [r3, #16]
 80191bc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80191be:	f107 0314 	add.w	r3, r7, #20
 80191c2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80191c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d00c      	beq.n	80191e6 <ip4_output_if_src+0x12e>
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	891a      	ldrh	r2, [r3, #8]
 80191d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80191d4:	429a      	cmp	r2, r3
 80191d6:	d906      	bls.n	80191e6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80191d8:	687a      	ldr	r2, [r7, #4]
 80191da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80191dc:	68f8      	ldr	r0, [r7, #12]
 80191de:	f000 fd53 	bl	8019c88 <ip4_frag>
 80191e2:	4603      	mov	r3, r0
 80191e4:	e006      	b.n	80191f4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80191e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191e8:	695b      	ldr	r3, [r3, #20]
 80191ea:	687a      	ldr	r2, [r7, #4]
 80191ec:	68f9      	ldr	r1, [r7, #12]
 80191ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80191f0:	4798      	blx	r3
 80191f2:	4603      	mov	r3, r0
}
 80191f4:	4618      	mov	r0, r3
 80191f6:	3720      	adds	r7, #32
 80191f8:	46bd      	mov	sp, r7
 80191fa:	bd80      	pop	{r7, pc}
 80191fc:	0801e590 	.word	0x0801e590
 8019200:	0801e5c4 	.word	0x0801e5c4
 8019204:	0801e5d0 	.word	0x0801e5d0
 8019208:	0801e5f8 	.word	0x0801e5f8
 801920c:	2000876a 	.word	0x2000876a
 8019210:	0801eaec 	.word	0x0801eaec

08019214 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019214:	b480      	push	{r7}
 8019216:	b085      	sub	sp, #20
 8019218:	af00      	add	r7, sp, #0
 801921a:	6078      	str	r0, [r7, #4]
 801921c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019228:	d002      	beq.n	8019230 <ip4_addr_isbroadcast_u32+0x1c>
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d101      	bne.n	8019234 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019230:	2301      	movs	r3, #1
 8019232:	e02a      	b.n	801928a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019234:	683b      	ldr	r3, [r7, #0]
 8019236:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801923a:	f003 0302 	and.w	r3, r3, #2
 801923e:	2b00      	cmp	r3, #0
 8019240:	d101      	bne.n	8019246 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019242:	2300      	movs	r3, #0
 8019244:	e021      	b.n	801928a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019246:	683b      	ldr	r3, [r7, #0]
 8019248:	3304      	adds	r3, #4
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	687a      	ldr	r2, [r7, #4]
 801924e:	429a      	cmp	r2, r3
 8019250:	d101      	bne.n	8019256 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019252:	2300      	movs	r3, #0
 8019254:	e019      	b.n	801928a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019256:	68fa      	ldr	r2, [r7, #12]
 8019258:	683b      	ldr	r3, [r7, #0]
 801925a:	3304      	adds	r3, #4
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	405a      	eors	r2, r3
 8019260:	683b      	ldr	r3, [r7, #0]
 8019262:	3308      	adds	r3, #8
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	4013      	ands	r3, r2
 8019268:	2b00      	cmp	r3, #0
 801926a:	d10d      	bne.n	8019288 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801926c:	683b      	ldr	r3, [r7, #0]
 801926e:	3308      	adds	r3, #8
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	43da      	mvns	r2, r3
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019278:	683b      	ldr	r3, [r7, #0]
 801927a:	3308      	adds	r3, #8
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019280:	429a      	cmp	r2, r3
 8019282:	d101      	bne.n	8019288 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019284:	2301      	movs	r3, #1
 8019286:	e000      	b.n	801928a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019288:	2300      	movs	r3, #0
  }
}
 801928a:	4618      	mov	r0, r3
 801928c:	3714      	adds	r7, #20
 801928e:	46bd      	mov	sp, r7
 8019290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019294:	4770      	bx	lr
	...

08019298 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019298:	b580      	push	{r7, lr}
 801929a:	b084      	sub	sp, #16
 801929c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801929e:	2300      	movs	r3, #0
 80192a0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80192a2:	4b12      	ldr	r3, [pc, #72]	; (80192ec <ip_reass_tmr+0x54>)
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80192a8:	e018      	b.n	80192dc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	7fdb      	ldrb	r3, [r3, #31]
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d00b      	beq.n	80192ca <ip_reass_tmr+0x32>
      r->timer--;
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	7fdb      	ldrb	r3, [r3, #31]
 80192b6:	3b01      	subs	r3, #1
 80192b8:	b2da      	uxtb	r2, r3
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80192be:	68fb      	ldr	r3, [r7, #12]
 80192c0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	60fb      	str	r3, [r7, #12]
 80192c8:	e008      	b.n	80192dc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80192d4:	68b9      	ldr	r1, [r7, #8]
 80192d6:	6878      	ldr	r0, [r7, #4]
 80192d8:	f000 f80a 	bl	80192f0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80192dc:	68fb      	ldr	r3, [r7, #12]
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d1e3      	bne.n	80192aa <ip_reass_tmr+0x12>
    }
  }
}
 80192e2:	bf00      	nop
 80192e4:	bf00      	nop
 80192e6:	3710      	adds	r7, #16
 80192e8:	46bd      	mov	sp, r7
 80192ea:	bd80      	pop	{r7, pc}
 80192ec:	2000876c 	.word	0x2000876c

080192f0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80192f0:	b580      	push	{r7, lr}
 80192f2:	b088      	sub	sp, #32
 80192f4:	af00      	add	r7, sp, #0
 80192f6:	6078      	str	r0, [r7, #4]
 80192f8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80192fa:	2300      	movs	r3, #0
 80192fc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80192fe:	683a      	ldr	r2, [r7, #0]
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	429a      	cmp	r2, r3
 8019304:	d105      	bne.n	8019312 <ip_reass_free_complete_datagram+0x22>
 8019306:	4b45      	ldr	r3, [pc, #276]	; (801941c <ip_reass_free_complete_datagram+0x12c>)
 8019308:	22ab      	movs	r2, #171	; 0xab
 801930a:	4945      	ldr	r1, [pc, #276]	; (8019420 <ip_reass_free_complete_datagram+0x130>)
 801930c:	4845      	ldr	r0, [pc, #276]	; (8019424 <ip_reass_free_complete_datagram+0x134>)
 801930e:	f001 fea9 	bl	801b064 <iprintf>
  if (prev != NULL) {
 8019312:	683b      	ldr	r3, [r7, #0]
 8019314:	2b00      	cmp	r3, #0
 8019316:	d00a      	beq.n	801932e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019318:	683b      	ldr	r3, [r7, #0]
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	687a      	ldr	r2, [r7, #4]
 801931e:	429a      	cmp	r2, r3
 8019320:	d005      	beq.n	801932e <ip_reass_free_complete_datagram+0x3e>
 8019322:	4b3e      	ldr	r3, [pc, #248]	; (801941c <ip_reass_free_complete_datagram+0x12c>)
 8019324:	22ad      	movs	r2, #173	; 0xad
 8019326:	4940      	ldr	r1, [pc, #256]	; (8019428 <ip_reass_free_complete_datagram+0x138>)
 8019328:	483e      	ldr	r0, [pc, #248]	; (8019424 <ip_reass_free_complete_datagram+0x134>)
 801932a:	f001 fe9b 	bl	801b064 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	685b      	ldr	r3, [r3, #4]
 8019332:	685b      	ldr	r3, [r3, #4]
 8019334:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019336:	697b      	ldr	r3, [r7, #20]
 8019338:	889b      	ldrh	r3, [r3, #4]
 801933a:	b29b      	uxth	r3, r3
 801933c:	2b00      	cmp	r3, #0
 801933e:	d12a      	bne.n	8019396 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	685b      	ldr	r3, [r3, #4]
 8019344:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019346:	697b      	ldr	r3, [r7, #20]
 8019348:	681a      	ldr	r2, [r3, #0]
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801934e:	69bb      	ldr	r3, [r7, #24]
 8019350:	6858      	ldr	r0, [r3, #4]
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	3308      	adds	r3, #8
 8019356:	2214      	movs	r2, #20
 8019358:	4619      	mov	r1, r3
 801935a:	f001 ff5e 	bl	801b21a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801935e:	2101      	movs	r1, #1
 8019360:	69b8      	ldr	r0, [r7, #24]
 8019362:	f7ff fc47 	bl	8018bf4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019366:	69b8      	ldr	r0, [r7, #24]
 8019368:	f7f8 fd80 	bl	8011e6c <pbuf_clen>
 801936c:	4603      	mov	r3, r0
 801936e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019370:	8bfa      	ldrh	r2, [r7, #30]
 8019372:	8a7b      	ldrh	r3, [r7, #18]
 8019374:	4413      	add	r3, r2
 8019376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801937a:	db05      	blt.n	8019388 <ip_reass_free_complete_datagram+0x98>
 801937c:	4b27      	ldr	r3, [pc, #156]	; (801941c <ip_reass_free_complete_datagram+0x12c>)
 801937e:	22bc      	movs	r2, #188	; 0xbc
 8019380:	492a      	ldr	r1, [pc, #168]	; (801942c <ip_reass_free_complete_datagram+0x13c>)
 8019382:	4828      	ldr	r0, [pc, #160]	; (8019424 <ip_reass_free_complete_datagram+0x134>)
 8019384:	f001 fe6e 	bl	801b064 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019388:	8bfa      	ldrh	r2, [r7, #30]
 801938a:	8a7b      	ldrh	r3, [r7, #18]
 801938c:	4413      	add	r3, r2
 801938e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019390:	69b8      	ldr	r0, [r7, #24]
 8019392:	f7f8 fce3 	bl	8011d5c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	685b      	ldr	r3, [r3, #4]
 801939a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801939c:	e01f      	b.n	80193de <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801939e:	69bb      	ldr	r3, [r7, #24]
 80193a0:	685b      	ldr	r3, [r3, #4]
 80193a2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80193a4:	69bb      	ldr	r3, [r7, #24]
 80193a6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80193a8:	697b      	ldr	r3, [r7, #20]
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80193ae:	68f8      	ldr	r0, [r7, #12]
 80193b0:	f7f8 fd5c 	bl	8011e6c <pbuf_clen>
 80193b4:	4603      	mov	r3, r0
 80193b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80193b8:	8bfa      	ldrh	r2, [r7, #30]
 80193ba:	8a7b      	ldrh	r3, [r7, #18]
 80193bc:	4413      	add	r3, r2
 80193be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80193c2:	db05      	blt.n	80193d0 <ip_reass_free_complete_datagram+0xe0>
 80193c4:	4b15      	ldr	r3, [pc, #84]	; (801941c <ip_reass_free_complete_datagram+0x12c>)
 80193c6:	22cc      	movs	r2, #204	; 0xcc
 80193c8:	4918      	ldr	r1, [pc, #96]	; (801942c <ip_reass_free_complete_datagram+0x13c>)
 80193ca:	4816      	ldr	r0, [pc, #88]	; (8019424 <ip_reass_free_complete_datagram+0x134>)
 80193cc:	f001 fe4a 	bl	801b064 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80193d0:	8bfa      	ldrh	r2, [r7, #30]
 80193d2:	8a7b      	ldrh	r3, [r7, #18]
 80193d4:	4413      	add	r3, r2
 80193d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80193d8:	68f8      	ldr	r0, [r7, #12]
 80193da:	f7f8 fcbf 	bl	8011d5c <pbuf_free>
  while (p != NULL) {
 80193de:	69bb      	ldr	r3, [r7, #24]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d1dc      	bne.n	801939e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80193e4:	6839      	ldr	r1, [r7, #0]
 80193e6:	6878      	ldr	r0, [r7, #4]
 80193e8:	f000 f8c2 	bl	8019570 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80193ec:	4b10      	ldr	r3, [pc, #64]	; (8019430 <ip_reass_free_complete_datagram+0x140>)
 80193ee:	881b      	ldrh	r3, [r3, #0]
 80193f0:	8bfa      	ldrh	r2, [r7, #30]
 80193f2:	429a      	cmp	r2, r3
 80193f4:	d905      	bls.n	8019402 <ip_reass_free_complete_datagram+0x112>
 80193f6:	4b09      	ldr	r3, [pc, #36]	; (801941c <ip_reass_free_complete_datagram+0x12c>)
 80193f8:	22d2      	movs	r2, #210	; 0xd2
 80193fa:	490e      	ldr	r1, [pc, #56]	; (8019434 <ip_reass_free_complete_datagram+0x144>)
 80193fc:	4809      	ldr	r0, [pc, #36]	; (8019424 <ip_reass_free_complete_datagram+0x134>)
 80193fe:	f001 fe31 	bl	801b064 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019402:	4b0b      	ldr	r3, [pc, #44]	; (8019430 <ip_reass_free_complete_datagram+0x140>)
 8019404:	881a      	ldrh	r2, [r3, #0]
 8019406:	8bfb      	ldrh	r3, [r7, #30]
 8019408:	1ad3      	subs	r3, r2, r3
 801940a:	b29a      	uxth	r2, r3
 801940c:	4b08      	ldr	r3, [pc, #32]	; (8019430 <ip_reass_free_complete_datagram+0x140>)
 801940e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019410:	8bfb      	ldrh	r3, [r7, #30]
}
 8019412:	4618      	mov	r0, r3
 8019414:	3720      	adds	r7, #32
 8019416:	46bd      	mov	sp, r7
 8019418:	bd80      	pop	{r7, pc}
 801941a:	bf00      	nop
 801941c:	0801e628 	.word	0x0801e628
 8019420:	0801e664 	.word	0x0801e664
 8019424:	0801e670 	.word	0x0801e670
 8019428:	0801e698 	.word	0x0801e698
 801942c:	0801e6ac 	.word	0x0801e6ac
 8019430:	20008770 	.word	0x20008770
 8019434:	0801e6cc 	.word	0x0801e6cc

08019438 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019438:	b580      	push	{r7, lr}
 801943a:	b08a      	sub	sp, #40	; 0x28
 801943c:	af00      	add	r7, sp, #0
 801943e:	6078      	str	r0, [r7, #4]
 8019440:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019442:	2300      	movs	r3, #0
 8019444:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019446:	2300      	movs	r3, #0
 8019448:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801944a:	2300      	movs	r3, #0
 801944c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801944e:	2300      	movs	r3, #0
 8019450:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019452:	2300      	movs	r3, #0
 8019454:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019456:	4b28      	ldr	r3, [pc, #160]	; (80194f8 <ip_reass_remove_oldest_datagram+0xc0>)
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801945c:	e030      	b.n	80194c0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801945e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019460:	695a      	ldr	r2, [r3, #20]
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	68db      	ldr	r3, [r3, #12]
 8019466:	429a      	cmp	r2, r3
 8019468:	d10c      	bne.n	8019484 <ip_reass_remove_oldest_datagram+0x4c>
 801946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801946c:	699a      	ldr	r2, [r3, #24]
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	691b      	ldr	r3, [r3, #16]
 8019472:	429a      	cmp	r2, r3
 8019474:	d106      	bne.n	8019484 <ip_reass_remove_oldest_datagram+0x4c>
 8019476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019478:	899a      	ldrh	r2, [r3, #12]
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	889b      	ldrh	r3, [r3, #4]
 801947e:	b29b      	uxth	r3, r3
 8019480:	429a      	cmp	r2, r3
 8019482:	d014      	beq.n	80194ae <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019484:	693b      	ldr	r3, [r7, #16]
 8019486:	3301      	adds	r3, #1
 8019488:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801948a:	6a3b      	ldr	r3, [r7, #32]
 801948c:	2b00      	cmp	r3, #0
 801948e:	d104      	bne.n	801949a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019492:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019494:	69fb      	ldr	r3, [r7, #28]
 8019496:	61bb      	str	r3, [r7, #24]
 8019498:	e009      	b.n	80194ae <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801949a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801949c:	7fda      	ldrb	r2, [r3, #31]
 801949e:	6a3b      	ldr	r3, [r7, #32]
 80194a0:	7fdb      	ldrb	r3, [r3, #31]
 80194a2:	429a      	cmp	r2, r3
 80194a4:	d803      	bhi.n	80194ae <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80194a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194a8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80194aa:	69fb      	ldr	r3, [r7, #28]
 80194ac:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80194ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d001      	beq.n	80194ba <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80194b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194b8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80194ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80194c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d1cb      	bne.n	801945e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80194c6:	6a3b      	ldr	r3, [r7, #32]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d008      	beq.n	80194de <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80194cc:	69b9      	ldr	r1, [r7, #24]
 80194ce:	6a38      	ldr	r0, [r7, #32]
 80194d0:	f7ff ff0e 	bl	80192f0 <ip_reass_free_complete_datagram>
 80194d4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80194d6:	697a      	ldr	r2, [r7, #20]
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	4413      	add	r3, r2
 80194dc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80194de:	697a      	ldr	r2, [r7, #20]
 80194e0:	683b      	ldr	r3, [r7, #0]
 80194e2:	429a      	cmp	r2, r3
 80194e4:	da02      	bge.n	80194ec <ip_reass_remove_oldest_datagram+0xb4>
 80194e6:	693b      	ldr	r3, [r7, #16]
 80194e8:	2b01      	cmp	r3, #1
 80194ea:	dcac      	bgt.n	8019446 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80194ec:	697b      	ldr	r3, [r7, #20]
}
 80194ee:	4618      	mov	r0, r3
 80194f0:	3728      	adds	r7, #40	; 0x28
 80194f2:	46bd      	mov	sp, r7
 80194f4:	bd80      	pop	{r7, pc}
 80194f6:	bf00      	nop
 80194f8:	2000876c 	.word	0x2000876c

080194fc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80194fc:	b580      	push	{r7, lr}
 80194fe:	b084      	sub	sp, #16
 8019500:	af00      	add	r7, sp, #0
 8019502:	6078      	str	r0, [r7, #4]
 8019504:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019506:	2004      	movs	r0, #4
 8019508:	f7f7 fd42 	bl	8010f90 <memp_malloc>
 801950c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	2b00      	cmp	r3, #0
 8019512:	d110      	bne.n	8019536 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019514:	6839      	ldr	r1, [r7, #0]
 8019516:	6878      	ldr	r0, [r7, #4]
 8019518:	f7ff ff8e 	bl	8019438 <ip_reass_remove_oldest_datagram>
 801951c:	4602      	mov	r2, r0
 801951e:	683b      	ldr	r3, [r7, #0]
 8019520:	4293      	cmp	r3, r2
 8019522:	dc03      	bgt.n	801952c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019524:	2004      	movs	r0, #4
 8019526:	f7f7 fd33 	bl	8010f90 <memp_malloc>
 801952a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	2b00      	cmp	r3, #0
 8019530:	d101      	bne.n	8019536 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019532:	2300      	movs	r3, #0
 8019534:	e016      	b.n	8019564 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019536:	2220      	movs	r2, #32
 8019538:	2100      	movs	r1, #0
 801953a:	68f8      	ldr	r0, [r7, #12]
 801953c:	f001 fdf7 	bl	801b12e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019540:	68fb      	ldr	r3, [r7, #12]
 8019542:	220f      	movs	r2, #15
 8019544:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019546:	4b09      	ldr	r3, [pc, #36]	; (801956c <ip_reass_enqueue_new_datagram+0x70>)
 8019548:	681a      	ldr	r2, [r3, #0]
 801954a:	68fb      	ldr	r3, [r7, #12]
 801954c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801954e:	4a07      	ldr	r2, [pc, #28]	; (801956c <ip_reass_enqueue_new_datagram+0x70>)
 8019550:	68fb      	ldr	r3, [r7, #12]
 8019552:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	3308      	adds	r3, #8
 8019558:	2214      	movs	r2, #20
 801955a:	6879      	ldr	r1, [r7, #4]
 801955c:	4618      	mov	r0, r3
 801955e:	f001 fe5c 	bl	801b21a <memcpy>
  return ipr;
 8019562:	68fb      	ldr	r3, [r7, #12]
}
 8019564:	4618      	mov	r0, r3
 8019566:	3710      	adds	r7, #16
 8019568:	46bd      	mov	sp, r7
 801956a:	bd80      	pop	{r7, pc}
 801956c:	2000876c 	.word	0x2000876c

08019570 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019570:	b580      	push	{r7, lr}
 8019572:	b082      	sub	sp, #8
 8019574:	af00      	add	r7, sp, #0
 8019576:	6078      	str	r0, [r7, #4]
 8019578:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801957a:	4b10      	ldr	r3, [pc, #64]	; (80195bc <ip_reass_dequeue_datagram+0x4c>)
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	687a      	ldr	r2, [r7, #4]
 8019580:	429a      	cmp	r2, r3
 8019582:	d104      	bne.n	801958e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	4a0c      	ldr	r2, [pc, #48]	; (80195bc <ip_reass_dequeue_datagram+0x4c>)
 801958a:	6013      	str	r3, [r2, #0]
 801958c:	e00d      	b.n	80195aa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801958e:	683b      	ldr	r3, [r7, #0]
 8019590:	2b00      	cmp	r3, #0
 8019592:	d106      	bne.n	80195a2 <ip_reass_dequeue_datagram+0x32>
 8019594:	4b0a      	ldr	r3, [pc, #40]	; (80195c0 <ip_reass_dequeue_datagram+0x50>)
 8019596:	f240 1245 	movw	r2, #325	; 0x145
 801959a:	490a      	ldr	r1, [pc, #40]	; (80195c4 <ip_reass_dequeue_datagram+0x54>)
 801959c:	480a      	ldr	r0, [pc, #40]	; (80195c8 <ip_reass_dequeue_datagram+0x58>)
 801959e:	f001 fd61 	bl	801b064 <iprintf>
    prev->next = ipr->next;
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	681a      	ldr	r2, [r3, #0]
 80195a6:	683b      	ldr	r3, [r7, #0]
 80195a8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80195aa:	6879      	ldr	r1, [r7, #4]
 80195ac:	2004      	movs	r0, #4
 80195ae:	f7f7 fd5f 	bl	8011070 <memp_free>
}
 80195b2:	bf00      	nop
 80195b4:	3708      	adds	r7, #8
 80195b6:	46bd      	mov	sp, r7
 80195b8:	bd80      	pop	{r7, pc}
 80195ba:	bf00      	nop
 80195bc:	2000876c 	.word	0x2000876c
 80195c0:	0801e628 	.word	0x0801e628
 80195c4:	0801e6f0 	.word	0x0801e6f0
 80195c8:	0801e670 	.word	0x0801e670

080195cc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80195cc:	b580      	push	{r7, lr}
 80195ce:	b08c      	sub	sp, #48	; 0x30
 80195d0:	af00      	add	r7, sp, #0
 80195d2:	60f8      	str	r0, [r7, #12]
 80195d4:	60b9      	str	r1, [r7, #8]
 80195d6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80195d8:	2300      	movs	r3, #0
 80195da:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80195dc:	2301      	movs	r3, #1
 80195de:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80195e0:	68bb      	ldr	r3, [r7, #8]
 80195e2:	685b      	ldr	r3, [r3, #4]
 80195e4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80195e6:	69fb      	ldr	r3, [r7, #28]
 80195e8:	885b      	ldrh	r3, [r3, #2]
 80195ea:	b29b      	uxth	r3, r3
 80195ec:	4618      	mov	r0, r3
 80195ee:	f7f7 f858 	bl	80106a2 <lwip_htons>
 80195f2:	4603      	mov	r3, r0
 80195f4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80195f6:	69fb      	ldr	r3, [r7, #28]
 80195f8:	781b      	ldrb	r3, [r3, #0]
 80195fa:	f003 030f 	and.w	r3, r3, #15
 80195fe:	b2db      	uxtb	r3, r3
 8019600:	009b      	lsls	r3, r3, #2
 8019602:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019604:	7e7b      	ldrb	r3, [r7, #25]
 8019606:	b29b      	uxth	r3, r3
 8019608:	8b7a      	ldrh	r2, [r7, #26]
 801960a:	429a      	cmp	r2, r3
 801960c:	d202      	bcs.n	8019614 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801960e:	f04f 33ff 	mov.w	r3, #4294967295
 8019612:	e135      	b.n	8019880 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019614:	7e7b      	ldrb	r3, [r7, #25]
 8019616:	b29b      	uxth	r3, r3
 8019618:	8b7a      	ldrh	r2, [r7, #26]
 801961a:	1ad3      	subs	r3, r2, r3
 801961c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801961e:	69fb      	ldr	r3, [r7, #28]
 8019620:	88db      	ldrh	r3, [r3, #6]
 8019622:	b29b      	uxth	r3, r3
 8019624:	4618      	mov	r0, r3
 8019626:	f7f7 f83c 	bl	80106a2 <lwip_htons>
 801962a:	4603      	mov	r3, r0
 801962c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019630:	b29b      	uxth	r3, r3
 8019632:	00db      	lsls	r3, r3, #3
 8019634:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019636:	68bb      	ldr	r3, [r7, #8]
 8019638:	685b      	ldr	r3, [r3, #4]
 801963a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801963c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801963e:	2200      	movs	r2, #0
 8019640:	701a      	strb	r2, [r3, #0]
 8019642:	2200      	movs	r2, #0
 8019644:	705a      	strb	r2, [r3, #1]
 8019646:	2200      	movs	r2, #0
 8019648:	709a      	strb	r2, [r3, #2]
 801964a:	2200      	movs	r2, #0
 801964c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801964e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019650:	8afa      	ldrh	r2, [r7, #22]
 8019652:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019654:	8afa      	ldrh	r2, [r7, #22]
 8019656:	8b7b      	ldrh	r3, [r7, #26]
 8019658:	4413      	add	r3, r2
 801965a:	b29a      	uxth	r2, r3
 801965c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801965e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019662:	88db      	ldrh	r3, [r3, #6]
 8019664:	b29b      	uxth	r3, r3
 8019666:	8afa      	ldrh	r2, [r7, #22]
 8019668:	429a      	cmp	r2, r3
 801966a:	d902      	bls.n	8019672 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801966c:	f04f 33ff 	mov.w	r3, #4294967295
 8019670:	e106      	b.n	8019880 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019672:	68fb      	ldr	r3, [r7, #12]
 8019674:	685b      	ldr	r3, [r3, #4]
 8019676:	627b      	str	r3, [r7, #36]	; 0x24
 8019678:	e068      	b.n	801974c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801967a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801967c:	685b      	ldr	r3, [r3, #4]
 801967e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019682:	889b      	ldrh	r3, [r3, #4]
 8019684:	b29a      	uxth	r2, r3
 8019686:	693b      	ldr	r3, [r7, #16]
 8019688:	889b      	ldrh	r3, [r3, #4]
 801968a:	b29b      	uxth	r3, r3
 801968c:	429a      	cmp	r2, r3
 801968e:	d235      	bcs.n	80196fc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019694:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019698:	2b00      	cmp	r3, #0
 801969a:	d020      	beq.n	80196de <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801969c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801969e:	889b      	ldrh	r3, [r3, #4]
 80196a0:	b29a      	uxth	r2, r3
 80196a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196a4:	88db      	ldrh	r3, [r3, #6]
 80196a6:	b29b      	uxth	r3, r3
 80196a8:	429a      	cmp	r2, r3
 80196aa:	d307      	bcc.n	80196bc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80196ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196ae:	88db      	ldrh	r3, [r3, #6]
 80196b0:	b29a      	uxth	r2, r3
 80196b2:	693b      	ldr	r3, [r7, #16]
 80196b4:	889b      	ldrh	r3, [r3, #4]
 80196b6:	b29b      	uxth	r3, r3
 80196b8:	429a      	cmp	r2, r3
 80196ba:	d902      	bls.n	80196c2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80196bc:	f04f 33ff 	mov.w	r3, #4294967295
 80196c0:	e0de      	b.n	8019880 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80196c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196c4:	68ba      	ldr	r2, [r7, #8]
 80196c6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80196c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196ca:	88db      	ldrh	r3, [r3, #6]
 80196cc:	b29a      	uxth	r2, r3
 80196ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196d0:	889b      	ldrh	r3, [r3, #4]
 80196d2:	b29b      	uxth	r3, r3
 80196d4:	429a      	cmp	r2, r3
 80196d6:	d03d      	beq.n	8019754 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80196d8:	2300      	movs	r3, #0
 80196da:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80196dc:	e03a      	b.n	8019754 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80196de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196e0:	88db      	ldrh	r3, [r3, #6]
 80196e2:	b29a      	uxth	r2, r3
 80196e4:	693b      	ldr	r3, [r7, #16]
 80196e6:	889b      	ldrh	r3, [r3, #4]
 80196e8:	b29b      	uxth	r3, r3
 80196ea:	429a      	cmp	r2, r3
 80196ec:	d902      	bls.n	80196f4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80196ee:	f04f 33ff 	mov.w	r3, #4294967295
 80196f2:	e0c5      	b.n	8019880 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	68ba      	ldr	r2, [r7, #8]
 80196f8:	605a      	str	r2, [r3, #4]
      break;
 80196fa:	e02b      	b.n	8019754 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80196fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196fe:	889b      	ldrh	r3, [r3, #4]
 8019700:	b29a      	uxth	r2, r3
 8019702:	693b      	ldr	r3, [r7, #16]
 8019704:	889b      	ldrh	r3, [r3, #4]
 8019706:	b29b      	uxth	r3, r3
 8019708:	429a      	cmp	r2, r3
 801970a:	d102      	bne.n	8019712 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801970c:	f04f 33ff 	mov.w	r3, #4294967295
 8019710:	e0b6      	b.n	8019880 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019714:	889b      	ldrh	r3, [r3, #4]
 8019716:	b29a      	uxth	r2, r3
 8019718:	693b      	ldr	r3, [r7, #16]
 801971a:	88db      	ldrh	r3, [r3, #6]
 801971c:	b29b      	uxth	r3, r3
 801971e:	429a      	cmp	r2, r3
 8019720:	d202      	bcs.n	8019728 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019722:	f04f 33ff 	mov.w	r3, #4294967295
 8019726:	e0ab      	b.n	8019880 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801972a:	2b00      	cmp	r3, #0
 801972c:	d009      	beq.n	8019742 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801972e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019730:	88db      	ldrh	r3, [r3, #6]
 8019732:	b29a      	uxth	r2, r3
 8019734:	693b      	ldr	r3, [r7, #16]
 8019736:	889b      	ldrh	r3, [r3, #4]
 8019738:	b29b      	uxth	r3, r3
 801973a:	429a      	cmp	r2, r3
 801973c:	d001      	beq.n	8019742 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801973e:	2300      	movs	r3, #0
 8019740:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019742:	693b      	ldr	r3, [r7, #16]
 8019744:	681b      	ldr	r3, [r3, #0]
 8019746:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019748:	693b      	ldr	r3, [r7, #16]
 801974a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801974e:	2b00      	cmp	r3, #0
 8019750:	d193      	bne.n	801967a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019752:	e000      	b.n	8019756 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019754:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019758:	2b00      	cmp	r3, #0
 801975a:	d12d      	bne.n	80197b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801975e:	2b00      	cmp	r3, #0
 8019760:	d01c      	beq.n	801979c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019764:	88db      	ldrh	r3, [r3, #6]
 8019766:	b29a      	uxth	r2, r3
 8019768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801976a:	889b      	ldrh	r3, [r3, #4]
 801976c:	b29b      	uxth	r3, r3
 801976e:	429a      	cmp	r2, r3
 8019770:	d906      	bls.n	8019780 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019772:	4b45      	ldr	r3, [pc, #276]	; (8019888 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019774:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019778:	4944      	ldr	r1, [pc, #272]	; (801988c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801977a:	4845      	ldr	r0, [pc, #276]	; (8019890 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801977c:	f001 fc72 	bl	801b064 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019782:	68ba      	ldr	r2, [r7, #8]
 8019784:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019788:	88db      	ldrh	r3, [r3, #6]
 801978a:	b29a      	uxth	r2, r3
 801978c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801978e:	889b      	ldrh	r3, [r3, #4]
 8019790:	b29b      	uxth	r3, r3
 8019792:	429a      	cmp	r2, r3
 8019794:	d010      	beq.n	80197b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019796:	2300      	movs	r3, #0
 8019798:	623b      	str	r3, [r7, #32]
 801979a:	e00d      	b.n	80197b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	685b      	ldr	r3, [r3, #4]
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d006      	beq.n	80197b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80197a4:	4b38      	ldr	r3, [pc, #224]	; (8019888 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80197a6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80197aa:	493a      	ldr	r1, [pc, #232]	; (8019894 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80197ac:	4838      	ldr	r0, [pc, #224]	; (8019890 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80197ae:	f001 fc59 	bl	801b064 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	68ba      	ldr	r2, [r7, #8]
 80197b6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d105      	bne.n	80197ca <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	7f9b      	ldrb	r3, [r3, #30]
 80197c2:	f003 0301 	and.w	r3, r3, #1
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d059      	beq.n	801987e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80197ca:	6a3b      	ldr	r3, [r7, #32]
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d04f      	beq.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	685b      	ldr	r3, [r3, #4]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d006      	beq.n	80197e6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80197d8:	68fb      	ldr	r3, [r7, #12]
 80197da:	685b      	ldr	r3, [r3, #4]
 80197dc:	685b      	ldr	r3, [r3, #4]
 80197de:	889b      	ldrh	r3, [r3, #4]
 80197e0:	b29b      	uxth	r3, r3
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d002      	beq.n	80197ec <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80197e6:	2300      	movs	r3, #0
 80197e8:	623b      	str	r3, [r7, #32]
 80197ea:	e041      	b.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80197ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197ee:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80197f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80197f6:	e012      	b.n	801981e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80197f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197fa:	685b      	ldr	r3, [r3, #4]
 80197fc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80197fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019800:	88db      	ldrh	r3, [r3, #6]
 8019802:	b29a      	uxth	r2, r3
 8019804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019806:	889b      	ldrh	r3, [r3, #4]
 8019808:	b29b      	uxth	r3, r3
 801980a:	429a      	cmp	r2, r3
 801980c:	d002      	beq.n	8019814 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801980e:	2300      	movs	r3, #0
 8019810:	623b      	str	r3, [r7, #32]
            break;
 8019812:	e007      	b.n	8019824 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019816:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801981e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019820:	2b00      	cmp	r3, #0
 8019822:	d1e9      	bne.n	80197f8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019824:	6a3b      	ldr	r3, [r7, #32]
 8019826:	2b00      	cmp	r3, #0
 8019828:	d022      	beq.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	685b      	ldr	r3, [r3, #4]
 801982e:	2b00      	cmp	r3, #0
 8019830:	d106      	bne.n	8019840 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019832:	4b15      	ldr	r3, [pc, #84]	; (8019888 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019834:	f240 12df 	movw	r2, #479	; 0x1df
 8019838:	4917      	ldr	r1, [pc, #92]	; (8019898 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801983a:	4815      	ldr	r0, [pc, #84]	; (8019890 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801983c:	f001 fc12 	bl	801b064 <iprintf>
          LWIP_ASSERT("sanity check",
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	685b      	ldr	r3, [r3, #4]
 8019844:	685b      	ldr	r3, [r3, #4]
 8019846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019848:	429a      	cmp	r2, r3
 801984a:	d106      	bne.n	801985a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801984c:	4b0e      	ldr	r3, [pc, #56]	; (8019888 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801984e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019852:	4911      	ldr	r1, [pc, #68]	; (8019898 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019854:	480e      	ldr	r0, [pc, #56]	; (8019890 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019856:	f001 fc05 	bl	801b064 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801985a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	2b00      	cmp	r3, #0
 8019860:	d006      	beq.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019862:	4b09      	ldr	r3, [pc, #36]	; (8019888 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019864:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019868:	490c      	ldr	r1, [pc, #48]	; (801989c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801986a:	4809      	ldr	r0, [pc, #36]	; (8019890 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801986c:	f001 fbfa 	bl	801b064 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019870:	6a3b      	ldr	r3, [r7, #32]
 8019872:	2b00      	cmp	r3, #0
 8019874:	bf14      	ite	ne
 8019876:	2301      	movne	r3, #1
 8019878:	2300      	moveq	r3, #0
 801987a:	b2db      	uxtb	r3, r3
 801987c:	e000      	b.n	8019880 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801987e:	2300      	movs	r3, #0
}
 8019880:	4618      	mov	r0, r3
 8019882:	3730      	adds	r7, #48	; 0x30
 8019884:	46bd      	mov	sp, r7
 8019886:	bd80      	pop	{r7, pc}
 8019888:	0801e628 	.word	0x0801e628
 801988c:	0801e70c 	.word	0x0801e70c
 8019890:	0801e670 	.word	0x0801e670
 8019894:	0801e72c 	.word	0x0801e72c
 8019898:	0801e764 	.word	0x0801e764
 801989c:	0801e774 	.word	0x0801e774

080198a0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80198a0:	b580      	push	{r7, lr}
 80198a2:	b08e      	sub	sp, #56	; 0x38
 80198a4:	af00      	add	r7, sp, #0
 80198a6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	685b      	ldr	r3, [r3, #4]
 80198ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80198ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198b0:	781b      	ldrb	r3, [r3, #0]
 80198b2:	f003 030f 	and.w	r3, r3, #15
 80198b6:	b2db      	uxtb	r3, r3
 80198b8:	009b      	lsls	r3, r3, #2
 80198ba:	b2db      	uxtb	r3, r3
 80198bc:	2b14      	cmp	r3, #20
 80198be:	f040 8171 	bne.w	8019ba4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80198c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198c4:	88db      	ldrh	r3, [r3, #6]
 80198c6:	b29b      	uxth	r3, r3
 80198c8:	4618      	mov	r0, r3
 80198ca:	f7f6 feea 	bl	80106a2 <lwip_htons>
 80198ce:	4603      	mov	r3, r0
 80198d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80198d4:	b29b      	uxth	r3, r3
 80198d6:	00db      	lsls	r3, r3, #3
 80198d8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80198da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198dc:	885b      	ldrh	r3, [r3, #2]
 80198de:	b29b      	uxth	r3, r3
 80198e0:	4618      	mov	r0, r3
 80198e2:	f7f6 fede 	bl	80106a2 <lwip_htons>
 80198e6:	4603      	mov	r3, r0
 80198e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80198ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198ec:	781b      	ldrb	r3, [r3, #0]
 80198ee:	f003 030f 	and.w	r3, r3, #15
 80198f2:	b2db      	uxtb	r3, r3
 80198f4:	009b      	lsls	r3, r3, #2
 80198f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80198fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80198fe:	b29b      	uxth	r3, r3
 8019900:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019902:	429a      	cmp	r2, r3
 8019904:	f0c0 8150 	bcc.w	8019ba8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019908:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801990c:	b29b      	uxth	r3, r3
 801990e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019910:	1ad3      	subs	r3, r2, r3
 8019912:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019914:	6878      	ldr	r0, [r7, #4]
 8019916:	f7f8 faa9 	bl	8011e6c <pbuf_clen>
 801991a:	4603      	mov	r3, r0
 801991c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801991e:	4b8c      	ldr	r3, [pc, #560]	; (8019b50 <ip4_reass+0x2b0>)
 8019920:	881b      	ldrh	r3, [r3, #0]
 8019922:	461a      	mov	r2, r3
 8019924:	8c3b      	ldrh	r3, [r7, #32]
 8019926:	4413      	add	r3, r2
 8019928:	2b0a      	cmp	r3, #10
 801992a:	dd10      	ble.n	801994e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801992c:	8c3b      	ldrh	r3, [r7, #32]
 801992e:	4619      	mov	r1, r3
 8019930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019932:	f7ff fd81 	bl	8019438 <ip_reass_remove_oldest_datagram>
 8019936:	4603      	mov	r3, r0
 8019938:	2b00      	cmp	r3, #0
 801993a:	f000 8137 	beq.w	8019bac <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801993e:	4b84      	ldr	r3, [pc, #528]	; (8019b50 <ip4_reass+0x2b0>)
 8019940:	881b      	ldrh	r3, [r3, #0]
 8019942:	461a      	mov	r2, r3
 8019944:	8c3b      	ldrh	r3, [r7, #32]
 8019946:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019948:	2b0a      	cmp	r3, #10
 801994a:	f300 812f 	bgt.w	8019bac <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801994e:	4b81      	ldr	r3, [pc, #516]	; (8019b54 <ip4_reass+0x2b4>)
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	633b      	str	r3, [r7, #48]	; 0x30
 8019954:	e015      	b.n	8019982 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019958:	695a      	ldr	r2, [r3, #20]
 801995a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801995c:	68db      	ldr	r3, [r3, #12]
 801995e:	429a      	cmp	r2, r3
 8019960:	d10c      	bne.n	801997c <ip4_reass+0xdc>
 8019962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019964:	699a      	ldr	r2, [r3, #24]
 8019966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019968:	691b      	ldr	r3, [r3, #16]
 801996a:	429a      	cmp	r2, r3
 801996c:	d106      	bne.n	801997c <ip4_reass+0xdc>
 801996e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019970:	899a      	ldrh	r2, [r3, #12]
 8019972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019974:	889b      	ldrh	r3, [r3, #4]
 8019976:	b29b      	uxth	r3, r3
 8019978:	429a      	cmp	r2, r3
 801997a:	d006      	beq.n	801998a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801997c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	633b      	str	r3, [r7, #48]	; 0x30
 8019982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019984:	2b00      	cmp	r3, #0
 8019986:	d1e6      	bne.n	8019956 <ip4_reass+0xb6>
 8019988:	e000      	b.n	801998c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801998a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801998c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801998e:	2b00      	cmp	r3, #0
 8019990:	d109      	bne.n	80199a6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019992:	8c3b      	ldrh	r3, [r7, #32]
 8019994:	4619      	mov	r1, r3
 8019996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019998:	f7ff fdb0 	bl	80194fc <ip_reass_enqueue_new_datagram>
 801999c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801999e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d11c      	bne.n	80199de <ip4_reass+0x13e>
      goto nullreturn;
 80199a4:	e105      	b.n	8019bb2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80199a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199a8:	88db      	ldrh	r3, [r3, #6]
 80199aa:	b29b      	uxth	r3, r3
 80199ac:	4618      	mov	r0, r3
 80199ae:	f7f6 fe78 	bl	80106a2 <lwip_htons>
 80199b2:	4603      	mov	r3, r0
 80199b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d110      	bne.n	80199de <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80199bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199be:	89db      	ldrh	r3, [r3, #14]
 80199c0:	4618      	mov	r0, r3
 80199c2:	f7f6 fe6e 	bl	80106a2 <lwip_htons>
 80199c6:	4603      	mov	r3, r0
 80199c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d006      	beq.n	80199de <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80199d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199d2:	3308      	adds	r3, #8
 80199d4:	2214      	movs	r2, #20
 80199d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80199d8:	4618      	mov	r0, r3
 80199da:	f001 fc1e 	bl	801b21a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80199de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199e0:	88db      	ldrh	r3, [r3, #6]
 80199e2:	b29b      	uxth	r3, r3
 80199e4:	f003 0320 	and.w	r3, r3, #32
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	bf0c      	ite	eq
 80199ec:	2301      	moveq	r3, #1
 80199ee:	2300      	movne	r3, #0
 80199f0:	b2db      	uxtb	r3, r3
 80199f2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80199f4:	69fb      	ldr	r3, [r7, #28]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d00e      	beq.n	8019a18 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80199fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80199fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80199fe:	4413      	add	r3, r2
 8019a00:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019a02:	8b7a      	ldrh	r2, [r7, #26]
 8019a04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019a06:	429a      	cmp	r2, r3
 8019a08:	f0c0 80a0 	bcc.w	8019b4c <ip4_reass+0x2ac>
 8019a0c:	8b7b      	ldrh	r3, [r7, #26]
 8019a0e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8019a12:	4293      	cmp	r3, r2
 8019a14:	f200 809a 	bhi.w	8019b4c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019a18:	69fa      	ldr	r2, [r7, #28]
 8019a1a:	6879      	ldr	r1, [r7, #4]
 8019a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019a1e:	f7ff fdd5 	bl	80195cc <ip_reass_chain_frag_into_datagram_and_validate>
 8019a22:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019a24:	697b      	ldr	r3, [r7, #20]
 8019a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a2a:	f000 809b 	beq.w	8019b64 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019a2e:	4b48      	ldr	r3, [pc, #288]	; (8019b50 <ip4_reass+0x2b0>)
 8019a30:	881a      	ldrh	r2, [r3, #0]
 8019a32:	8c3b      	ldrh	r3, [r7, #32]
 8019a34:	4413      	add	r3, r2
 8019a36:	b29a      	uxth	r2, r3
 8019a38:	4b45      	ldr	r3, [pc, #276]	; (8019b50 <ip4_reass+0x2b0>)
 8019a3a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019a3c:	69fb      	ldr	r3, [r7, #28]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d00d      	beq.n	8019a5e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8019a42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019a44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019a46:	4413      	add	r3, r2
 8019a48:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a4c:	8a7a      	ldrh	r2, [r7, #18]
 8019a4e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a52:	7f9b      	ldrb	r3, [r3, #30]
 8019a54:	f043 0301 	orr.w	r3, r3, #1
 8019a58:	b2da      	uxtb	r2, r3
 8019a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a5c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019a5e:	697b      	ldr	r3, [r7, #20]
 8019a60:	2b01      	cmp	r3, #1
 8019a62:	d171      	bne.n	8019b48 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8019a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a66:	8b9b      	ldrh	r3, [r3, #28]
 8019a68:	3314      	adds	r3, #20
 8019a6a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a6e:	685b      	ldr	r3, [r3, #4]
 8019a70:	685b      	ldr	r3, [r3, #4]
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8019a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a78:	685b      	ldr	r3, [r3, #4]
 8019a7a:	685b      	ldr	r3, [r3, #4]
 8019a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a80:	3308      	adds	r3, #8
 8019a82:	2214      	movs	r2, #20
 8019a84:	4619      	mov	r1, r3
 8019a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019a88:	f001 fbc7 	bl	801b21a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8019a8c:	8a3b      	ldrh	r3, [r7, #16]
 8019a8e:	4618      	mov	r0, r3
 8019a90:	f7f6 fe07 	bl	80106a2 <lwip_htons>
 8019a94:	4603      	mov	r3, r0
 8019a96:	461a      	mov	r2, r3
 8019a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a9a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a9e:	2200      	movs	r2, #0
 8019aa0:	719a      	strb	r2, [r3, #6]
 8019aa2:	2200      	movs	r2, #0
 8019aa4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8019aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019aa8:	2200      	movs	r2, #0
 8019aaa:	729a      	strb	r2, [r3, #10]
 8019aac:	2200      	movs	r2, #0
 8019aae:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ab2:	685b      	ldr	r3, [r3, #4]
 8019ab4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8019ab6:	e00d      	b.n	8019ad4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8019ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019aba:	685b      	ldr	r3, [r3, #4]
 8019abc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019abe:	2114      	movs	r1, #20
 8019ac0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019ac2:	f7f8 f8c5 	bl	8011c50 <pbuf_remove_header>
      pbuf_cat(p, r);
 8019ac6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019ac8:	6878      	ldr	r0, [r7, #4]
 8019aca:	f7f8 fa09 	bl	8011ee0 <pbuf_cat>
      r = iprh->next_pbuf;
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8019ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	d1ee      	bne.n	8019ab8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019ada:	4b1e      	ldr	r3, [pc, #120]	; (8019b54 <ip4_reass+0x2b4>)
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019ae0:	429a      	cmp	r2, r3
 8019ae2:	d102      	bne.n	8019aea <ip4_reass+0x24a>
      ipr_prev = NULL;
 8019ae4:	2300      	movs	r3, #0
 8019ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019ae8:	e010      	b.n	8019b0c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019aea:	4b1a      	ldr	r3, [pc, #104]	; (8019b54 <ip4_reass+0x2b4>)
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019af0:	e007      	b.n	8019b02 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8019af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019af8:	429a      	cmp	r2, r3
 8019afa:	d006      	beq.n	8019b0a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d1f4      	bne.n	8019af2 <ip4_reass+0x252>
 8019b08:	e000      	b.n	8019b0c <ip4_reass+0x26c>
          break;
 8019b0a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019b0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019b0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019b10:	f7ff fd2e 	bl	8019570 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019b14:	6878      	ldr	r0, [r7, #4]
 8019b16:	f7f8 f9a9 	bl	8011e6c <pbuf_clen>
 8019b1a:	4603      	mov	r3, r0
 8019b1c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019b1e:	4b0c      	ldr	r3, [pc, #48]	; (8019b50 <ip4_reass+0x2b0>)
 8019b20:	881b      	ldrh	r3, [r3, #0]
 8019b22:	8c3a      	ldrh	r2, [r7, #32]
 8019b24:	429a      	cmp	r2, r3
 8019b26:	d906      	bls.n	8019b36 <ip4_reass+0x296>
 8019b28:	4b0b      	ldr	r3, [pc, #44]	; (8019b58 <ip4_reass+0x2b8>)
 8019b2a:	f240 229b 	movw	r2, #667	; 0x29b
 8019b2e:	490b      	ldr	r1, [pc, #44]	; (8019b5c <ip4_reass+0x2bc>)
 8019b30:	480b      	ldr	r0, [pc, #44]	; (8019b60 <ip4_reass+0x2c0>)
 8019b32:	f001 fa97 	bl	801b064 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019b36:	4b06      	ldr	r3, [pc, #24]	; (8019b50 <ip4_reass+0x2b0>)
 8019b38:	881a      	ldrh	r2, [r3, #0]
 8019b3a:	8c3b      	ldrh	r3, [r7, #32]
 8019b3c:	1ad3      	subs	r3, r2, r3
 8019b3e:	b29a      	uxth	r2, r3
 8019b40:	4b03      	ldr	r3, [pc, #12]	; (8019b50 <ip4_reass+0x2b0>)
 8019b42:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	e038      	b.n	8019bba <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019b48:	2300      	movs	r3, #0
 8019b4a:	e036      	b.n	8019bba <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8019b4c:	bf00      	nop
 8019b4e:	e00a      	b.n	8019b66 <ip4_reass+0x2c6>
 8019b50:	20008770 	.word	0x20008770
 8019b54:	2000876c 	.word	0x2000876c
 8019b58:	0801e628 	.word	0x0801e628
 8019b5c:	0801e798 	.word	0x0801e798
 8019b60:	0801e670 	.word	0x0801e670
    goto nullreturn_ipr;
 8019b64:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8019b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d106      	bne.n	8019b7a <ip4_reass+0x2da>
 8019b6c:	4b15      	ldr	r3, [pc, #84]	; (8019bc4 <ip4_reass+0x324>)
 8019b6e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8019b72:	4915      	ldr	r1, [pc, #84]	; (8019bc8 <ip4_reass+0x328>)
 8019b74:	4815      	ldr	r0, [pc, #84]	; (8019bcc <ip4_reass+0x32c>)
 8019b76:	f001 fa75 	bl	801b064 <iprintf>
  if (ipr->p == NULL) {
 8019b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b7c:	685b      	ldr	r3, [r3, #4]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d116      	bne.n	8019bb0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8019b82:	4b13      	ldr	r3, [pc, #76]	; (8019bd0 <ip4_reass+0x330>)
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019b88:	429a      	cmp	r2, r3
 8019b8a:	d006      	beq.n	8019b9a <ip4_reass+0x2fa>
 8019b8c:	4b0d      	ldr	r3, [pc, #52]	; (8019bc4 <ip4_reass+0x324>)
 8019b8e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019b92:	4910      	ldr	r1, [pc, #64]	; (8019bd4 <ip4_reass+0x334>)
 8019b94:	480d      	ldr	r0, [pc, #52]	; (8019bcc <ip4_reass+0x32c>)
 8019b96:	f001 fa65 	bl	801b064 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8019b9a:	2100      	movs	r1, #0
 8019b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019b9e:	f7ff fce7 	bl	8019570 <ip_reass_dequeue_datagram>
 8019ba2:	e006      	b.n	8019bb2 <ip4_reass+0x312>
    goto nullreturn;
 8019ba4:	bf00      	nop
 8019ba6:	e004      	b.n	8019bb2 <ip4_reass+0x312>
    goto nullreturn;
 8019ba8:	bf00      	nop
 8019baa:	e002      	b.n	8019bb2 <ip4_reass+0x312>
      goto nullreturn;
 8019bac:	bf00      	nop
 8019bae:	e000      	b.n	8019bb2 <ip4_reass+0x312>
  }

nullreturn:
 8019bb0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019bb2:	6878      	ldr	r0, [r7, #4]
 8019bb4:	f7f8 f8d2 	bl	8011d5c <pbuf_free>
  return NULL;
 8019bb8:	2300      	movs	r3, #0
}
 8019bba:	4618      	mov	r0, r3
 8019bbc:	3738      	adds	r7, #56	; 0x38
 8019bbe:	46bd      	mov	sp, r7
 8019bc0:	bd80      	pop	{r7, pc}
 8019bc2:	bf00      	nop
 8019bc4:	0801e628 	.word	0x0801e628
 8019bc8:	0801e7b4 	.word	0x0801e7b4
 8019bcc:	0801e670 	.word	0x0801e670
 8019bd0:	2000876c 	.word	0x2000876c
 8019bd4:	0801e7c0 	.word	0x0801e7c0

08019bd8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019bdc:	2005      	movs	r0, #5
 8019bde:	f7f7 f9d7 	bl	8010f90 <memp_malloc>
 8019be2:	4603      	mov	r3, r0
}
 8019be4:	4618      	mov	r0, r3
 8019be6:	bd80      	pop	{r7, pc}

08019be8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019be8:	b580      	push	{r7, lr}
 8019bea:	b082      	sub	sp, #8
 8019bec:	af00      	add	r7, sp, #0
 8019bee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d106      	bne.n	8019c04 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019bf6:	4b07      	ldr	r3, [pc, #28]	; (8019c14 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019bf8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019bfc:	4906      	ldr	r1, [pc, #24]	; (8019c18 <ip_frag_free_pbuf_custom_ref+0x30>)
 8019bfe:	4807      	ldr	r0, [pc, #28]	; (8019c1c <ip_frag_free_pbuf_custom_ref+0x34>)
 8019c00:	f001 fa30 	bl	801b064 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019c04:	6879      	ldr	r1, [r7, #4]
 8019c06:	2005      	movs	r0, #5
 8019c08:	f7f7 fa32 	bl	8011070 <memp_free>
}
 8019c0c:	bf00      	nop
 8019c0e:	3708      	adds	r7, #8
 8019c10:	46bd      	mov	sp, r7
 8019c12:	bd80      	pop	{r7, pc}
 8019c14:	0801e628 	.word	0x0801e628
 8019c18:	0801e7e0 	.word	0x0801e7e0
 8019c1c:	0801e670 	.word	0x0801e670

08019c20 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019c20:	b580      	push	{r7, lr}
 8019c22:	b084      	sub	sp, #16
 8019c24:	af00      	add	r7, sp, #0
 8019c26:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d106      	bne.n	8019c40 <ipfrag_free_pbuf_custom+0x20>
 8019c32:	4b11      	ldr	r3, [pc, #68]	; (8019c78 <ipfrag_free_pbuf_custom+0x58>)
 8019c34:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019c38:	4910      	ldr	r1, [pc, #64]	; (8019c7c <ipfrag_free_pbuf_custom+0x5c>)
 8019c3a:	4811      	ldr	r0, [pc, #68]	; (8019c80 <ipfrag_free_pbuf_custom+0x60>)
 8019c3c:	f001 fa12 	bl	801b064 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019c40:	68fa      	ldr	r2, [r7, #12]
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	429a      	cmp	r2, r3
 8019c46:	d006      	beq.n	8019c56 <ipfrag_free_pbuf_custom+0x36>
 8019c48:	4b0b      	ldr	r3, [pc, #44]	; (8019c78 <ipfrag_free_pbuf_custom+0x58>)
 8019c4a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8019c4e:	490d      	ldr	r1, [pc, #52]	; (8019c84 <ipfrag_free_pbuf_custom+0x64>)
 8019c50:	480b      	ldr	r0, [pc, #44]	; (8019c80 <ipfrag_free_pbuf_custom+0x60>)
 8019c52:	f001 fa07 	bl	801b064 <iprintf>
  if (pcr->original != NULL) {
 8019c56:	68fb      	ldr	r3, [r7, #12]
 8019c58:	695b      	ldr	r3, [r3, #20]
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d004      	beq.n	8019c68 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019c5e:	68fb      	ldr	r3, [r7, #12]
 8019c60:	695b      	ldr	r3, [r3, #20]
 8019c62:	4618      	mov	r0, r3
 8019c64:	f7f8 f87a 	bl	8011d5c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019c68:	68f8      	ldr	r0, [r7, #12]
 8019c6a:	f7ff ffbd 	bl	8019be8 <ip_frag_free_pbuf_custom_ref>
}
 8019c6e:	bf00      	nop
 8019c70:	3710      	adds	r7, #16
 8019c72:	46bd      	mov	sp, r7
 8019c74:	bd80      	pop	{r7, pc}
 8019c76:	bf00      	nop
 8019c78:	0801e628 	.word	0x0801e628
 8019c7c:	0801e7ec 	.word	0x0801e7ec
 8019c80:	0801e670 	.word	0x0801e670
 8019c84:	0801e7f8 	.word	0x0801e7f8

08019c88 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b094      	sub	sp, #80	; 0x50
 8019c8c:	af02      	add	r7, sp, #8
 8019c8e:	60f8      	str	r0, [r7, #12]
 8019c90:	60b9      	str	r1, [r7, #8]
 8019c92:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019c94:	2300      	movs	r3, #0
 8019c96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019c9a:	68bb      	ldr	r3, [r7, #8]
 8019c9c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019c9e:	3b14      	subs	r3, #20
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	da00      	bge.n	8019ca6 <ip4_frag+0x1e>
 8019ca4:	3307      	adds	r3, #7
 8019ca6:	10db      	asrs	r3, r3, #3
 8019ca8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019caa:	2314      	movs	r3, #20
 8019cac:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	685b      	ldr	r3, [r3, #4]
 8019cb2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8019cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019cb6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cba:	781b      	ldrb	r3, [r3, #0]
 8019cbc:	f003 030f 	and.w	r3, r3, #15
 8019cc0:	b2db      	uxtb	r3, r3
 8019cc2:	009b      	lsls	r3, r3, #2
 8019cc4:	b2db      	uxtb	r3, r3
 8019cc6:	2b14      	cmp	r3, #20
 8019cc8:	d002      	beq.n	8019cd0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019cca:	f06f 0305 	mvn.w	r3, #5
 8019cce:	e110      	b.n	8019ef2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	895b      	ldrh	r3, [r3, #10]
 8019cd4:	2b13      	cmp	r3, #19
 8019cd6:	d809      	bhi.n	8019cec <ip4_frag+0x64>
 8019cd8:	4b88      	ldr	r3, [pc, #544]	; (8019efc <ip4_frag+0x274>)
 8019cda:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8019cde:	4988      	ldr	r1, [pc, #544]	; (8019f00 <ip4_frag+0x278>)
 8019ce0:	4888      	ldr	r0, [pc, #544]	; (8019f04 <ip4_frag+0x27c>)
 8019ce2:	f001 f9bf 	bl	801b064 <iprintf>
 8019ce6:	f06f 0305 	mvn.w	r3, #5
 8019cea:	e102      	b.n	8019ef2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cee:	88db      	ldrh	r3, [r3, #6]
 8019cf0:	b29b      	uxth	r3, r3
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	f7f6 fcd5 	bl	80106a2 <lwip_htons>
 8019cf8:	4603      	mov	r3, r0
 8019cfa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019cfc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019cfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019d02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019d06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019d0c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	891b      	ldrh	r3, [r3, #8]
 8019d12:	3b14      	subs	r3, #20
 8019d14:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019d18:	e0e1      	b.n	8019ede <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019d1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019d1c:	00db      	lsls	r3, r3, #3
 8019d1e:	b29b      	uxth	r3, r3
 8019d20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019d24:	4293      	cmp	r3, r2
 8019d26:	bf28      	it	cs
 8019d28:	4613      	movcs	r3, r2
 8019d2a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019d2c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019d30:	2114      	movs	r1, #20
 8019d32:	200e      	movs	r0, #14
 8019d34:	f7f7 fd2e 	bl	8011794 <pbuf_alloc>
 8019d38:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8019d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	f000 80d5 	beq.w	8019eec <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d44:	895b      	ldrh	r3, [r3, #10]
 8019d46:	2b13      	cmp	r3, #19
 8019d48:	d806      	bhi.n	8019d58 <ip4_frag+0xd0>
 8019d4a:	4b6c      	ldr	r3, [pc, #432]	; (8019efc <ip4_frag+0x274>)
 8019d4c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019d50:	496d      	ldr	r1, [pc, #436]	; (8019f08 <ip4_frag+0x280>)
 8019d52:	486c      	ldr	r0, [pc, #432]	; (8019f04 <ip4_frag+0x27c>)
 8019d54:	f001 f986 	bl	801b064 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d5a:	685b      	ldr	r3, [r3, #4]
 8019d5c:	2214      	movs	r2, #20
 8019d5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019d60:	4618      	mov	r0, r3
 8019d62:	f001 fa5a 	bl	801b21a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d68:	685b      	ldr	r3, [r3, #4]
 8019d6a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8019d6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019d6e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8019d72:	e064      	b.n	8019e3e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	895a      	ldrh	r2, [r3, #10]
 8019d78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019d7a:	1ad3      	subs	r3, r2, r3
 8019d7c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	895b      	ldrh	r3, [r3, #10]
 8019d82:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019d84:	429a      	cmp	r2, r3
 8019d86:	d906      	bls.n	8019d96 <ip4_frag+0x10e>
 8019d88:	4b5c      	ldr	r3, [pc, #368]	; (8019efc <ip4_frag+0x274>)
 8019d8a:	f240 322d 	movw	r2, #813	; 0x32d
 8019d8e:	495f      	ldr	r1, [pc, #380]	; (8019f0c <ip4_frag+0x284>)
 8019d90:	485c      	ldr	r0, [pc, #368]	; (8019f04 <ip4_frag+0x27c>)
 8019d92:	f001 f967 	bl	801b064 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8019d96:	8bfa      	ldrh	r2, [r7, #30]
 8019d98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019d9c:	4293      	cmp	r3, r2
 8019d9e:	bf28      	it	cs
 8019da0:	4613      	movcs	r3, r2
 8019da2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8019da6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d105      	bne.n	8019dba <ip4_frag+0x132>
        poff = 0;
 8019dae:	2300      	movs	r3, #0
 8019db0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019db2:	68fb      	ldr	r3, [r7, #12]
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	60fb      	str	r3, [r7, #12]
        continue;
 8019db8:	e041      	b.n	8019e3e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019dba:	f7ff ff0d 	bl	8019bd8 <ip_frag_alloc_pbuf_custom_ref>
 8019dbe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019dc0:	69bb      	ldr	r3, [r7, #24]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d103      	bne.n	8019dce <ip4_frag+0x146>
        pbuf_free(rambuf);
 8019dc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019dc8:	f7f7 ffc8 	bl	8011d5c <pbuf_free>
        goto memerr;
 8019dcc:	e08f      	b.n	8019eee <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019dce:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019dd4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019dd6:	4413      	add	r3, r2
 8019dd8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8019ddc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019de0:	9201      	str	r2, [sp, #4]
 8019de2:	9300      	str	r3, [sp, #0]
 8019de4:	4603      	mov	r3, r0
 8019de6:	2241      	movs	r2, #65	; 0x41
 8019de8:	2000      	movs	r0, #0
 8019dea:	f7f7 fdfd 	bl	80119e8 <pbuf_alloced_custom>
 8019dee:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019df0:	697b      	ldr	r3, [r7, #20]
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d106      	bne.n	8019e04 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019df6:	69b8      	ldr	r0, [r7, #24]
 8019df8:	f7ff fef6 	bl	8019be8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019dfe:	f7f7 ffad 	bl	8011d5c <pbuf_free>
        goto memerr;
 8019e02:	e074      	b.n	8019eee <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8019e04:	68f8      	ldr	r0, [r7, #12]
 8019e06:	f7f8 f849 	bl	8011e9c <pbuf_ref>
      pcr->original = p;
 8019e0a:	69bb      	ldr	r3, [r7, #24]
 8019e0c:	68fa      	ldr	r2, [r7, #12]
 8019e0e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019e10:	69bb      	ldr	r3, [r7, #24]
 8019e12:	4a3f      	ldr	r2, [pc, #252]	; (8019f10 <ip4_frag+0x288>)
 8019e14:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019e16:	6979      	ldr	r1, [r7, #20]
 8019e18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e1a:	f7f8 f861 	bl	8011ee0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019e1e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019e22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019e26:	1ad3      	subs	r3, r2, r3
 8019e28:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8019e2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d004      	beq.n	8019e3e <ip4_frag+0x1b6>
        poff = 0;
 8019e34:	2300      	movs	r3, #0
 8019e36:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019e38:	68fb      	ldr	r3, [r7, #12]
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019e3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d196      	bne.n	8019d74 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019e46:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019e48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019e4c:	4413      	add	r3, r2
 8019e4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019e50:	68bb      	ldr	r3, [r7, #8]
 8019e52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019e54:	f1a3 0213 	sub.w	r2, r3, #19
 8019e58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019e5c:	429a      	cmp	r2, r3
 8019e5e:	bfcc      	ite	gt
 8019e60:	2301      	movgt	r3, #1
 8019e62:	2300      	movle	r3, #0
 8019e64:	b2db      	uxtb	r3, r3
 8019e66:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019e68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019e70:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8019e72:	6a3b      	ldr	r3, [r7, #32]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d002      	beq.n	8019e7e <ip4_frag+0x1f6>
 8019e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d003      	beq.n	8019e86 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019e7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019e80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019e84:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019e86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019e88:	4618      	mov	r0, r3
 8019e8a:	f7f6 fc0a 	bl	80106a2 <lwip_htons>
 8019e8e:	4603      	mov	r3, r0
 8019e90:	461a      	mov	r2, r3
 8019e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e94:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8019e96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019e98:	3314      	adds	r3, #20
 8019e9a:	b29b      	uxth	r3, r3
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	f7f6 fc00 	bl	80106a2 <lwip_htons>
 8019ea2:	4603      	mov	r3, r0
 8019ea4:	461a      	mov	r2, r3
 8019ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ea8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019eac:	2200      	movs	r2, #0
 8019eae:	729a      	strb	r2, [r3, #10]
 8019eb0:	2200      	movs	r2, #0
 8019eb2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019eb4:	68bb      	ldr	r3, [r7, #8]
 8019eb6:	695b      	ldr	r3, [r3, #20]
 8019eb8:	687a      	ldr	r2, [r7, #4]
 8019eba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019ebc:	68b8      	ldr	r0, [r7, #8]
 8019ebe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019ec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019ec2:	f7f7 ff4b 	bl	8011d5c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8019ec6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019eca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019ecc:	1ad3      	subs	r3, r2, r3
 8019ece:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8019ed2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019ed6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019ed8:	4413      	add	r3, r2
 8019eda:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019ede:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	f47f af19 	bne.w	8019d1a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019ee8:	2300      	movs	r3, #0
 8019eea:	e002      	b.n	8019ef2 <ip4_frag+0x26a>
      goto memerr;
 8019eec:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019eee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019ef2:	4618      	mov	r0, r3
 8019ef4:	3748      	adds	r7, #72	; 0x48
 8019ef6:	46bd      	mov	sp, r7
 8019ef8:	bd80      	pop	{r7, pc}
 8019efa:	bf00      	nop
 8019efc:	0801e628 	.word	0x0801e628
 8019f00:	0801e804 	.word	0x0801e804
 8019f04:	0801e670 	.word	0x0801e670
 8019f08:	0801e820 	.word	0x0801e820
 8019f0c:	0801e840 	.word	0x0801e840
 8019f10:	08019c21 	.word	0x08019c21

08019f14 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019f14:	b580      	push	{r7, lr}
 8019f16:	b086      	sub	sp, #24
 8019f18:	af00      	add	r7, sp, #0
 8019f1a:	6078      	str	r0, [r7, #4]
 8019f1c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019f1e:	230e      	movs	r3, #14
 8019f20:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	895b      	ldrh	r3, [r3, #10]
 8019f26:	2b0e      	cmp	r3, #14
 8019f28:	d96e      	bls.n	801a008 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	7bdb      	ldrb	r3, [r3, #15]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d106      	bne.n	8019f40 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019f32:	683b      	ldr	r3, [r7, #0]
 8019f34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019f38:	3301      	adds	r3, #1
 8019f3a:	b2da      	uxtb	r2, r3
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	685b      	ldr	r3, [r3, #4]
 8019f44:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019f46:	693b      	ldr	r3, [r7, #16]
 8019f48:	7b1a      	ldrb	r2, [r3, #12]
 8019f4a:	7b5b      	ldrb	r3, [r3, #13]
 8019f4c:	021b      	lsls	r3, r3, #8
 8019f4e:	4313      	orrs	r3, r2
 8019f50:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019f52:	693b      	ldr	r3, [r7, #16]
 8019f54:	781b      	ldrb	r3, [r3, #0]
 8019f56:	f003 0301 	and.w	r3, r3, #1
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d023      	beq.n	8019fa6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019f5e:	693b      	ldr	r3, [r7, #16]
 8019f60:	781b      	ldrb	r3, [r3, #0]
 8019f62:	2b01      	cmp	r3, #1
 8019f64:	d10f      	bne.n	8019f86 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019f66:	693b      	ldr	r3, [r7, #16]
 8019f68:	785b      	ldrb	r3, [r3, #1]
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d11b      	bne.n	8019fa6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019f6e:	693b      	ldr	r3, [r7, #16]
 8019f70:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019f72:	2b5e      	cmp	r3, #94	; 0x5e
 8019f74:	d117      	bne.n	8019fa6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	7b5b      	ldrb	r3, [r3, #13]
 8019f7a:	f043 0310 	orr.w	r3, r3, #16
 8019f7e:	b2da      	uxtb	r2, r3
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	735a      	strb	r2, [r3, #13]
 8019f84:	e00f      	b.n	8019fa6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019f86:	693b      	ldr	r3, [r7, #16]
 8019f88:	2206      	movs	r2, #6
 8019f8a:	4928      	ldr	r1, [pc, #160]	; (801a02c <ethernet_input+0x118>)
 8019f8c:	4618      	mov	r0, r3
 8019f8e:	f001 f8be 	bl	801b10e <memcmp>
 8019f92:	4603      	mov	r3, r0
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d106      	bne.n	8019fa6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	7b5b      	ldrb	r3, [r3, #13]
 8019f9c:	f043 0308 	orr.w	r3, r3, #8
 8019fa0:	b2da      	uxtb	r2, r3
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019fa6:	89fb      	ldrh	r3, [r7, #14]
 8019fa8:	2b08      	cmp	r3, #8
 8019faa:	d003      	beq.n	8019fb4 <ethernet_input+0xa0>
 8019fac:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019fb0:	d014      	beq.n	8019fdc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019fb2:	e032      	b.n	801a01a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019fb4:	683b      	ldr	r3, [r7, #0]
 8019fb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019fba:	f003 0308 	and.w	r3, r3, #8
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d024      	beq.n	801a00c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019fc2:	8afb      	ldrh	r3, [r7, #22]
 8019fc4:	4619      	mov	r1, r3
 8019fc6:	6878      	ldr	r0, [r7, #4]
 8019fc8:	f7f7 fe42 	bl	8011c50 <pbuf_remove_header>
 8019fcc:	4603      	mov	r3, r0
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d11e      	bne.n	801a010 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019fd2:	6839      	ldr	r1, [r7, #0]
 8019fd4:	6878      	ldr	r0, [r7, #4]
 8019fd6:	f7fe ff21 	bl	8018e1c <ip4_input>
      break;
 8019fda:	e013      	b.n	801a004 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019fdc:	683b      	ldr	r3, [r7, #0]
 8019fde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019fe2:	f003 0308 	and.w	r3, r3, #8
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d014      	beq.n	801a014 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019fea:	8afb      	ldrh	r3, [r7, #22]
 8019fec:	4619      	mov	r1, r3
 8019fee:	6878      	ldr	r0, [r7, #4]
 8019ff0:	f7f7 fe2e 	bl	8011c50 <pbuf_remove_header>
 8019ff4:	4603      	mov	r3, r0
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d10e      	bne.n	801a018 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019ffa:	6839      	ldr	r1, [r7, #0]
 8019ffc:	6878      	ldr	r0, [r7, #4]
 8019ffe:	f7fe f8c1 	bl	8018184 <etharp_input>
      break;
 801a002:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a004:	2300      	movs	r3, #0
 801a006:	e00c      	b.n	801a022 <ethernet_input+0x10e>
    goto free_and_return;
 801a008:	bf00      	nop
 801a00a:	e006      	b.n	801a01a <ethernet_input+0x106>
        goto free_and_return;
 801a00c:	bf00      	nop
 801a00e:	e004      	b.n	801a01a <ethernet_input+0x106>
        goto free_and_return;
 801a010:	bf00      	nop
 801a012:	e002      	b.n	801a01a <ethernet_input+0x106>
        goto free_and_return;
 801a014:	bf00      	nop
 801a016:	e000      	b.n	801a01a <ethernet_input+0x106>
        goto free_and_return;
 801a018:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a01a:	6878      	ldr	r0, [r7, #4]
 801a01c:	f7f7 fe9e 	bl	8011d5c <pbuf_free>
  return ERR_OK;
 801a020:	2300      	movs	r3, #0
}
 801a022:	4618      	mov	r0, r3
 801a024:	3718      	adds	r7, #24
 801a026:	46bd      	mov	sp, r7
 801a028:	bd80      	pop	{r7, pc}
 801a02a:	bf00      	nop
 801a02c:	0801eaf0 	.word	0x0801eaf0

0801a030 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a030:	b580      	push	{r7, lr}
 801a032:	b086      	sub	sp, #24
 801a034:	af00      	add	r7, sp, #0
 801a036:	60f8      	str	r0, [r7, #12]
 801a038:	60b9      	str	r1, [r7, #8]
 801a03a:	607a      	str	r2, [r7, #4]
 801a03c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a03e:	8c3b      	ldrh	r3, [r7, #32]
 801a040:	4618      	mov	r0, r3
 801a042:	f7f6 fb2e 	bl	80106a2 <lwip_htons>
 801a046:	4603      	mov	r3, r0
 801a048:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a04a:	210e      	movs	r1, #14
 801a04c:	68b8      	ldr	r0, [r7, #8]
 801a04e:	f7f7 fdef 	bl	8011c30 <pbuf_add_header>
 801a052:	4603      	mov	r3, r0
 801a054:	2b00      	cmp	r3, #0
 801a056:	d125      	bne.n	801a0a4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a058:	68bb      	ldr	r3, [r7, #8]
 801a05a:	685b      	ldr	r3, [r3, #4]
 801a05c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a05e:	693b      	ldr	r3, [r7, #16]
 801a060:	8afa      	ldrh	r2, [r7, #22]
 801a062:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a064:	693b      	ldr	r3, [r7, #16]
 801a066:	2206      	movs	r2, #6
 801a068:	6839      	ldr	r1, [r7, #0]
 801a06a:	4618      	mov	r0, r3
 801a06c:	f001 f8d5 	bl	801b21a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a070:	693b      	ldr	r3, [r7, #16]
 801a072:	3306      	adds	r3, #6
 801a074:	2206      	movs	r2, #6
 801a076:	6879      	ldr	r1, [r7, #4]
 801a078:	4618      	mov	r0, r3
 801a07a:	f001 f8ce 	bl	801b21a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a084:	2b06      	cmp	r3, #6
 801a086:	d006      	beq.n	801a096 <ethernet_output+0x66>
 801a088:	4b0a      	ldr	r3, [pc, #40]	; (801a0b4 <ethernet_output+0x84>)
 801a08a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a08e:	490a      	ldr	r1, [pc, #40]	; (801a0b8 <ethernet_output+0x88>)
 801a090:	480a      	ldr	r0, [pc, #40]	; (801a0bc <ethernet_output+0x8c>)
 801a092:	f000 ffe7 	bl	801b064 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	699b      	ldr	r3, [r3, #24]
 801a09a:	68b9      	ldr	r1, [r7, #8]
 801a09c:	68f8      	ldr	r0, [r7, #12]
 801a09e:	4798      	blx	r3
 801a0a0:	4603      	mov	r3, r0
 801a0a2:	e002      	b.n	801a0aa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a0a4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a0a6:	f06f 0301 	mvn.w	r3, #1
}
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	3718      	adds	r7, #24
 801a0ae:	46bd      	mov	sp, r7
 801a0b0:	bd80      	pop	{r7, pc}
 801a0b2:	bf00      	nop
 801a0b4:	0801e850 	.word	0x0801e850
 801a0b8:	0801e888 	.word	0x0801e888
 801a0bc:	0801e8bc 	.word	0x0801e8bc

0801a0c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a0c0:	b580      	push	{r7, lr}
 801a0c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801a0c4:	2201      	movs	r2, #1
 801a0c6:	4924      	ldr	r1, [pc, #144]	; (801a158 <MX_USB_DEVICE_Init+0x98>)
 801a0c8:	4824      	ldr	r0, [pc, #144]	; (801a15c <MX_USB_DEVICE_Init+0x9c>)
 801a0ca:	f7f2 fe36 	bl	800cd3a <USBD_Init>
 801a0ce:	4603      	mov	r3, r0
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d001      	beq.n	801a0d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a0d4:	f7e6 fbfe 	bl	80008d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_MSC) != USBD_OK)
 801a0d8:	4921      	ldr	r1, [pc, #132]	; (801a160 <MX_USB_DEVICE_Init+0xa0>)
 801a0da:	4820      	ldr	r0, [pc, #128]	; (801a15c <MX_USB_DEVICE_Init+0x9c>)
 801a0dc:	f7f2 fe5d 	bl	800cd9a <USBD_RegisterClass>
 801a0e0:	4603      	mov	r3, r0
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d001      	beq.n	801a0ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a0e6:	f7e6 fbf5 	bl	80008d4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceHS, &USBD_Storage_Interface_fops_HS) != USBD_OK)
 801a0ea:	491e      	ldr	r1, [pc, #120]	; (801a164 <MX_USB_DEVICE_Init+0xa4>)
 801a0ec:	481b      	ldr	r0, [pc, #108]	; (801a15c <MX_USB_DEVICE_Init+0x9c>)
 801a0ee:	f7f1 f8d9 	bl	800b2a4 <USBD_MSC_RegisterStorage>
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d001      	beq.n	801a0fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a0f8:	f7e6 fbec 	bl	80008d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801a0fc:	4817      	ldr	r0, [pc, #92]	; (801a15c <MX_USB_DEVICE_Init+0x9c>)
 801a0fe:	f7f2 fe82 	bl	800ce06 <USBD_Start>
 801a102:	4603      	mov	r3, r0
 801a104:	2b00      	cmp	r3, #0
 801a106:	d001      	beq.n	801a10c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a108:	f7e6 fbe4 	bl	80008d4 <Error_Handler>
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801a10c:	2200      	movs	r2, #0
 801a10e:	4916      	ldr	r1, [pc, #88]	; (801a168 <MX_USB_DEVICE_Init+0xa8>)
 801a110:	4816      	ldr	r0, [pc, #88]	; (801a16c <MX_USB_DEVICE_Init+0xac>)
 801a112:	f7f2 fe12 	bl	800cd3a <USBD_Init>
 801a116:	4603      	mov	r3, r0
 801a118:	2b00      	cmp	r3, #0
 801a11a:	d001      	beq.n	801a120 <MX_USB_DEVICE_Init+0x60>
  {
    Error_Handler();
 801a11c:	f7e6 fbda 	bl	80008d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801a120:	4913      	ldr	r1, [pc, #76]	; (801a170 <MX_USB_DEVICE_Init+0xb0>)
 801a122:	4812      	ldr	r0, [pc, #72]	; (801a16c <MX_USB_DEVICE_Init+0xac>)
 801a124:	f7f2 fe39 	bl	800cd9a <USBD_RegisterClass>
 801a128:	4603      	mov	r3, r0
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d001      	beq.n	801a132 <MX_USB_DEVICE_Init+0x72>
  {
    Error_Handler();
 801a12e:	f7e6 fbd1 	bl	80008d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801a132:	4910      	ldr	r1, [pc, #64]	; (801a174 <MX_USB_DEVICE_Init+0xb4>)
 801a134:	480d      	ldr	r0, [pc, #52]	; (801a16c <MX_USB_DEVICE_Init+0xac>)
 801a136:	f7f0 fd8d 	bl	800ac54 <USBD_CDC_RegisterInterface>
 801a13a:	4603      	mov	r3, r0
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d001      	beq.n	801a144 <MX_USB_DEVICE_Init+0x84>
  {
    Error_Handler();
 801a140:	f7e6 fbc8 	bl	80008d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801a144:	4809      	ldr	r0, [pc, #36]	; (801a16c <MX_USB_DEVICE_Init+0xac>)
 801a146:	f7f2 fe5e 	bl	800ce06 <USBD_Start>
 801a14a:	4603      	mov	r3, r0
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d001      	beq.n	801a154 <MX_USB_DEVICE_Init+0x94>
  {
    Error_Handler();
 801a150:	f7e6 fbc0 	bl	80008d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a154:	bf00      	nop
 801a156:	bd80      	pop	{r7, pc}
 801a158:	2000017c 	.word	0x2000017c
 801a15c:	20008774 	.word	0x20008774
 801a160:	200000ac 	.word	0x200000ac
 801a164:	200001cc 	.word	0x200001cc
 801a168:	2000014c 	.word	0x2000014c
 801a16c:	20008a50 	.word	0x20008a50
 801a170:	2000002c 	.word	0x2000002c
 801a174:	20000138 	.word	0x20000138

0801a178 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801a178:	b580      	push	{r7, lr}
 801a17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801a17c:	2200      	movs	r2, #0
 801a17e:	4905      	ldr	r1, [pc, #20]	; (801a194 <CDC_Init_FS+0x1c>)
 801a180:	4805      	ldr	r0, [pc, #20]	; (801a198 <CDC_Init_FS+0x20>)
 801a182:	f7f0 fd81 	bl	800ac88 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801a186:	4905      	ldr	r1, [pc, #20]	; (801a19c <CDC_Init_FS+0x24>)
 801a188:	4803      	ldr	r0, [pc, #12]	; (801a198 <CDC_Init_FS+0x20>)
 801a18a:	f7f0 fd9f 	bl	800accc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a18e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801a190:	4618      	mov	r0, r3
 801a192:	bd80      	pop	{r7, pc}
 801a194:	2000952c 	.word	0x2000952c
 801a198:	20008a50 	.word	0x20008a50
 801a19c:	20008d2c 	.word	0x20008d2c

0801a1a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801a1a0:	b480      	push	{r7}
 801a1a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801a1a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801a1a6:	4618      	mov	r0, r3
 801a1a8:	46bd      	mov	sp, r7
 801a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ae:	4770      	bx	lr

0801a1b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a1b0:	b480      	push	{r7}
 801a1b2:	b083      	sub	sp, #12
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	4603      	mov	r3, r0
 801a1b8:	6039      	str	r1, [r7, #0]
 801a1ba:	71fb      	strb	r3, [r7, #7]
 801a1bc:	4613      	mov	r3, r2
 801a1be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801a1c0:	79fb      	ldrb	r3, [r7, #7]
 801a1c2:	2b23      	cmp	r3, #35	; 0x23
 801a1c4:	d84a      	bhi.n	801a25c <CDC_Control_FS+0xac>
 801a1c6:	a201      	add	r2, pc, #4	; (adr r2, 801a1cc <CDC_Control_FS+0x1c>)
 801a1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1cc:	0801a25d 	.word	0x0801a25d
 801a1d0:	0801a25d 	.word	0x0801a25d
 801a1d4:	0801a25d 	.word	0x0801a25d
 801a1d8:	0801a25d 	.word	0x0801a25d
 801a1dc:	0801a25d 	.word	0x0801a25d
 801a1e0:	0801a25d 	.word	0x0801a25d
 801a1e4:	0801a25d 	.word	0x0801a25d
 801a1e8:	0801a25d 	.word	0x0801a25d
 801a1ec:	0801a25d 	.word	0x0801a25d
 801a1f0:	0801a25d 	.word	0x0801a25d
 801a1f4:	0801a25d 	.word	0x0801a25d
 801a1f8:	0801a25d 	.word	0x0801a25d
 801a1fc:	0801a25d 	.word	0x0801a25d
 801a200:	0801a25d 	.word	0x0801a25d
 801a204:	0801a25d 	.word	0x0801a25d
 801a208:	0801a25d 	.word	0x0801a25d
 801a20c:	0801a25d 	.word	0x0801a25d
 801a210:	0801a25d 	.word	0x0801a25d
 801a214:	0801a25d 	.word	0x0801a25d
 801a218:	0801a25d 	.word	0x0801a25d
 801a21c:	0801a25d 	.word	0x0801a25d
 801a220:	0801a25d 	.word	0x0801a25d
 801a224:	0801a25d 	.word	0x0801a25d
 801a228:	0801a25d 	.word	0x0801a25d
 801a22c:	0801a25d 	.word	0x0801a25d
 801a230:	0801a25d 	.word	0x0801a25d
 801a234:	0801a25d 	.word	0x0801a25d
 801a238:	0801a25d 	.word	0x0801a25d
 801a23c:	0801a25d 	.word	0x0801a25d
 801a240:	0801a25d 	.word	0x0801a25d
 801a244:	0801a25d 	.word	0x0801a25d
 801a248:	0801a25d 	.word	0x0801a25d
 801a24c:	0801a25d 	.word	0x0801a25d
 801a250:	0801a25d 	.word	0x0801a25d
 801a254:	0801a25d 	.word	0x0801a25d
 801a258:	0801a25d 	.word	0x0801a25d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a25c:	bf00      	nop
  }

  return (USBD_OK);
 801a25e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801a260:	4618      	mov	r0, r3
 801a262:	370c      	adds	r7, #12
 801a264:	46bd      	mov	sp, r7
 801a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a26a:	4770      	bx	lr

0801a26c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801a26c:	b580      	push	{r7, lr}
 801a26e:	b082      	sub	sp, #8
 801a270:	af00      	add	r7, sp, #0
 801a272:	6078      	str	r0, [r7, #4]
 801a274:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801a276:	6879      	ldr	r1, [r7, #4]
 801a278:	4805      	ldr	r0, [pc, #20]	; (801a290 <CDC_Receive_FS+0x24>)
 801a27a:	f7f0 fd27 	bl	800accc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801a27e:	4804      	ldr	r0, [pc, #16]	; (801a290 <CDC_Receive_FS+0x24>)
 801a280:	f7f0 fd42 	bl	800ad08 <USBD_CDC_ReceivePacket>
  //memcpy(UserRxBufferFS, Buf, *Len);
#ifdef COM_PORT
  wr = 1;
  byteNum++;
#endif
  return (USBD_OK);
 801a284:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801a286:	4618      	mov	r0, r3
 801a288:	3708      	adds	r7, #8
 801a28a:	46bd      	mov	sp, r7
 801a28c:	bd80      	pop	{r7, pc}
 801a28e:	bf00      	nop
 801a290:	20008a50 	.word	0x20008a50

0801a294 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801a294:	b480      	push	{r7}
 801a296:	b087      	sub	sp, #28
 801a298:	af00      	add	r7, sp, #0
 801a29a:	60f8      	str	r0, [r7, #12]
 801a29c:	60b9      	str	r1, [r7, #8]
 801a29e:	4613      	mov	r3, r2
 801a2a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801a2a2:	2300      	movs	r3, #0
 801a2a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801a2a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	371c      	adds	r7, #28
 801a2ae:	46bd      	mov	sp, r7
 801a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2b4:	4770      	bx	lr
	...

0801a2b8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a2b8:	b480      	push	{r7}
 801a2ba:	b083      	sub	sp, #12
 801a2bc:	af00      	add	r7, sp, #0
 801a2be:	4603      	mov	r3, r0
 801a2c0:	6039      	str	r1, [r7, #0]
 801a2c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801a2c4:	683b      	ldr	r3, [r7, #0]
 801a2c6:	2212      	movs	r2, #18
 801a2c8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801a2ca:	4b03      	ldr	r3, [pc, #12]	; (801a2d8 <USBD_HS_DeviceDescriptor+0x20>)
}
 801a2cc:	4618      	mov	r0, r3
 801a2ce:	370c      	adds	r7, #12
 801a2d0:	46bd      	mov	sp, r7
 801a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d6:	4770      	bx	lr
 801a2d8:	20000198 	.word	0x20000198

0801a2dc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a2dc:	b480      	push	{r7}
 801a2de:	b083      	sub	sp, #12
 801a2e0:	af00      	add	r7, sp, #0
 801a2e2:	4603      	mov	r3, r0
 801a2e4:	6039      	str	r1, [r7, #0]
 801a2e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a2e8:	683b      	ldr	r3, [r7, #0]
 801a2ea:	2204      	movs	r2, #4
 801a2ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a2ee:	4b03      	ldr	r3, [pc, #12]	; (801a2fc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801a2f0:	4618      	mov	r0, r3
 801a2f2:	370c      	adds	r7, #12
 801a2f4:	46bd      	mov	sp, r7
 801a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2fa:	4770      	bx	lr
 801a2fc:	200001ac 	.word	0x200001ac

0801a300 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a300:	b580      	push	{r7, lr}
 801a302:	b082      	sub	sp, #8
 801a304:	af00      	add	r7, sp, #0
 801a306:	4603      	mov	r3, r0
 801a308:	6039      	str	r1, [r7, #0]
 801a30a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a30c:	79fb      	ldrb	r3, [r7, #7]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d105      	bne.n	801a31e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a312:	683a      	ldr	r2, [r7, #0]
 801a314:	4907      	ldr	r1, [pc, #28]	; (801a334 <USBD_HS_ProductStrDescriptor+0x34>)
 801a316:	4808      	ldr	r0, [pc, #32]	; (801a338 <USBD_HS_ProductStrDescriptor+0x38>)
 801a318:	f7f3 ff28 	bl	800e16c <USBD_GetString>
 801a31c:	e004      	b.n	801a328 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a31e:	683a      	ldr	r2, [r7, #0]
 801a320:	4904      	ldr	r1, [pc, #16]	; (801a334 <USBD_HS_ProductStrDescriptor+0x34>)
 801a322:	4805      	ldr	r0, [pc, #20]	; (801a338 <USBD_HS_ProductStrDescriptor+0x38>)
 801a324:	f7f3 ff22 	bl	800e16c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a328:	4b02      	ldr	r3, [pc, #8]	; (801a334 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801a32a:	4618      	mov	r0, r3
 801a32c:	3708      	adds	r7, #8
 801a32e:	46bd      	mov	sp, r7
 801a330:	bd80      	pop	{r7, pc}
 801a332:	bf00      	nop
 801a334:	20009d2c 	.word	0x20009d2c
 801a338:	0801e8e4 	.word	0x0801e8e4

0801a33c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a33c:	b580      	push	{r7, lr}
 801a33e:	b082      	sub	sp, #8
 801a340:	af00      	add	r7, sp, #0
 801a342:	4603      	mov	r3, r0
 801a344:	6039      	str	r1, [r7, #0]
 801a346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a348:	683a      	ldr	r2, [r7, #0]
 801a34a:	4904      	ldr	r1, [pc, #16]	; (801a35c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801a34c:	4804      	ldr	r0, [pc, #16]	; (801a360 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801a34e:	f7f3 ff0d 	bl	800e16c <USBD_GetString>
  return USBD_StrDesc;
 801a352:	4b02      	ldr	r3, [pc, #8]	; (801a35c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801a354:	4618      	mov	r0, r3
 801a356:	3708      	adds	r7, #8
 801a358:	46bd      	mov	sp, r7
 801a35a:	bd80      	pop	{r7, pc}
 801a35c:	20009d2c 	.word	0x20009d2c
 801a360:	0801e8f8 	.word	0x0801e8f8

0801a364 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a364:	b580      	push	{r7, lr}
 801a366:	b082      	sub	sp, #8
 801a368:	af00      	add	r7, sp, #0
 801a36a:	4603      	mov	r3, r0
 801a36c:	6039      	str	r1, [r7, #0]
 801a36e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a370:	683b      	ldr	r3, [r7, #0]
 801a372:	221a      	movs	r2, #26
 801a374:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a376:	f000 f8e7 	bl	801a548 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801a37a:	4b02      	ldr	r3, [pc, #8]	; (801a384 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801a37c:	4618      	mov	r0, r3
 801a37e:	3708      	adds	r7, #8
 801a380:	46bd      	mov	sp, r7
 801a382:	bd80      	pop	{r7, pc}
 801a384:	200001b0 	.word	0x200001b0

0801a388 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a388:	b580      	push	{r7, lr}
 801a38a:	b082      	sub	sp, #8
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	4603      	mov	r3, r0
 801a390:	6039      	str	r1, [r7, #0]
 801a392:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a394:	79fb      	ldrb	r3, [r7, #7]
 801a396:	2b00      	cmp	r3, #0
 801a398:	d105      	bne.n	801a3a6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a39a:	683a      	ldr	r2, [r7, #0]
 801a39c:	4907      	ldr	r1, [pc, #28]	; (801a3bc <USBD_HS_ConfigStrDescriptor+0x34>)
 801a39e:	4808      	ldr	r0, [pc, #32]	; (801a3c0 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a3a0:	f7f3 fee4 	bl	800e16c <USBD_GetString>
 801a3a4:	e004      	b.n	801a3b0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a3a6:	683a      	ldr	r2, [r7, #0]
 801a3a8:	4904      	ldr	r1, [pc, #16]	; (801a3bc <USBD_HS_ConfigStrDescriptor+0x34>)
 801a3aa:	4805      	ldr	r0, [pc, #20]	; (801a3c0 <USBD_HS_ConfigStrDescriptor+0x38>)
 801a3ac:	f7f3 fede 	bl	800e16c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a3b0:	4b02      	ldr	r3, [pc, #8]	; (801a3bc <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801a3b2:	4618      	mov	r0, r3
 801a3b4:	3708      	adds	r7, #8
 801a3b6:	46bd      	mov	sp, r7
 801a3b8:	bd80      	pop	{r7, pc}
 801a3ba:	bf00      	nop
 801a3bc:	20009d2c 	.word	0x20009d2c
 801a3c0:	0801e90c 	.word	0x0801e90c

0801a3c4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a3c4:	b580      	push	{r7, lr}
 801a3c6:	b082      	sub	sp, #8
 801a3c8:	af00      	add	r7, sp, #0
 801a3ca:	4603      	mov	r3, r0
 801a3cc:	6039      	str	r1, [r7, #0]
 801a3ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a3d0:	79fb      	ldrb	r3, [r7, #7]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d105      	bne.n	801a3e2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a3d6:	683a      	ldr	r2, [r7, #0]
 801a3d8:	4907      	ldr	r1, [pc, #28]	; (801a3f8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a3da:	4808      	ldr	r0, [pc, #32]	; (801a3fc <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a3dc:	f7f3 fec6 	bl	800e16c <USBD_GetString>
 801a3e0:	e004      	b.n	801a3ec <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a3e2:	683a      	ldr	r2, [r7, #0]
 801a3e4:	4904      	ldr	r1, [pc, #16]	; (801a3f8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a3e6:	4805      	ldr	r0, [pc, #20]	; (801a3fc <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a3e8:	f7f3 fec0 	bl	800e16c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a3ec:	4b02      	ldr	r3, [pc, #8]	; (801a3f8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801a3ee:	4618      	mov	r0, r3
 801a3f0:	3708      	adds	r7, #8
 801a3f2:	46bd      	mov	sp, r7
 801a3f4:	bd80      	pop	{r7, pc}
 801a3f6:	bf00      	nop
 801a3f8:	20009d2c 	.word	0x20009d2c
 801a3fc:	0801e918 	.word	0x0801e918

0801a400 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a400:	b480      	push	{r7}
 801a402:	b083      	sub	sp, #12
 801a404:	af00      	add	r7, sp, #0
 801a406:	4603      	mov	r3, r0
 801a408:	6039      	str	r1, [r7, #0]
 801a40a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801a40c:	683b      	ldr	r3, [r7, #0]
 801a40e:	2212      	movs	r2, #18
 801a410:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801a412:	4b03      	ldr	r3, [pc, #12]	; (801a420 <USBD_FS_DeviceDescriptor+0x20>)
}
 801a414:	4618      	mov	r0, r3
 801a416:	370c      	adds	r7, #12
 801a418:	46bd      	mov	sp, r7
 801a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a41e:	4770      	bx	lr
 801a420:	20000168 	.word	0x20000168

0801a424 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a424:	b480      	push	{r7}
 801a426:	b083      	sub	sp, #12
 801a428:	af00      	add	r7, sp, #0
 801a42a:	4603      	mov	r3, r0
 801a42c:	6039      	str	r1, [r7, #0]
 801a42e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a430:	683b      	ldr	r3, [r7, #0]
 801a432:	2204      	movs	r2, #4
 801a434:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a436:	4b03      	ldr	r3, [pc, #12]	; (801a444 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801a438:	4618      	mov	r0, r3
 801a43a:	370c      	adds	r7, #12
 801a43c:	46bd      	mov	sp, r7
 801a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a442:	4770      	bx	lr
 801a444:	200001ac 	.word	0x200001ac

0801a448 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a448:	b580      	push	{r7, lr}
 801a44a:	b082      	sub	sp, #8
 801a44c:	af00      	add	r7, sp, #0
 801a44e:	4603      	mov	r3, r0
 801a450:	6039      	str	r1, [r7, #0]
 801a452:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a454:	79fb      	ldrb	r3, [r7, #7]
 801a456:	2b00      	cmp	r3, #0
 801a458:	d105      	bne.n	801a466 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a45a:	683a      	ldr	r2, [r7, #0]
 801a45c:	4907      	ldr	r1, [pc, #28]	; (801a47c <USBD_FS_ProductStrDescriptor+0x34>)
 801a45e:	4808      	ldr	r0, [pc, #32]	; (801a480 <USBD_FS_ProductStrDescriptor+0x38>)
 801a460:	f7f3 fe84 	bl	800e16c <USBD_GetString>
 801a464:	e004      	b.n	801a470 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a466:	683a      	ldr	r2, [r7, #0]
 801a468:	4904      	ldr	r1, [pc, #16]	; (801a47c <USBD_FS_ProductStrDescriptor+0x34>)
 801a46a:	4805      	ldr	r0, [pc, #20]	; (801a480 <USBD_FS_ProductStrDescriptor+0x38>)
 801a46c:	f7f3 fe7e 	bl	800e16c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a470:	4b02      	ldr	r3, [pc, #8]	; (801a47c <USBD_FS_ProductStrDescriptor+0x34>)
}
 801a472:	4618      	mov	r0, r3
 801a474:	3708      	adds	r7, #8
 801a476:	46bd      	mov	sp, r7
 801a478:	bd80      	pop	{r7, pc}
 801a47a:	bf00      	nop
 801a47c:	20009d2c 	.word	0x20009d2c
 801a480:	0801e928 	.word	0x0801e928

0801a484 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a484:	b580      	push	{r7, lr}
 801a486:	b082      	sub	sp, #8
 801a488:	af00      	add	r7, sp, #0
 801a48a:	4603      	mov	r3, r0
 801a48c:	6039      	str	r1, [r7, #0]
 801a48e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a490:	683a      	ldr	r2, [r7, #0]
 801a492:	4904      	ldr	r1, [pc, #16]	; (801a4a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801a494:	4804      	ldr	r0, [pc, #16]	; (801a4a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801a496:	f7f3 fe69 	bl	800e16c <USBD_GetString>
  return USBD_StrDesc;
 801a49a:	4b02      	ldr	r3, [pc, #8]	; (801a4a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801a49c:	4618      	mov	r0, r3
 801a49e:	3708      	adds	r7, #8
 801a4a0:	46bd      	mov	sp, r7
 801a4a2:	bd80      	pop	{r7, pc}
 801a4a4:	20009d2c 	.word	0x20009d2c
 801a4a8:	0801e8f8 	.word	0x0801e8f8

0801a4ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a4ac:	b580      	push	{r7, lr}
 801a4ae:	b082      	sub	sp, #8
 801a4b0:	af00      	add	r7, sp, #0
 801a4b2:	4603      	mov	r3, r0
 801a4b4:	6039      	str	r1, [r7, #0]
 801a4b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a4b8:	683b      	ldr	r3, [r7, #0]
 801a4ba:	221a      	movs	r2, #26
 801a4bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a4be:	f000 f843 	bl	801a548 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801a4c2:	4b02      	ldr	r3, [pc, #8]	; (801a4cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 801a4c4:	4618      	mov	r0, r3
 801a4c6:	3708      	adds	r7, #8
 801a4c8:	46bd      	mov	sp, r7
 801a4ca:	bd80      	pop	{r7, pc}
 801a4cc:	200001b0 	.word	0x200001b0

0801a4d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a4d0:	b580      	push	{r7, lr}
 801a4d2:	b082      	sub	sp, #8
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	4603      	mov	r3, r0
 801a4d8:	6039      	str	r1, [r7, #0]
 801a4da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a4dc:	79fb      	ldrb	r3, [r7, #7]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d105      	bne.n	801a4ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a4e2:	683a      	ldr	r2, [r7, #0]
 801a4e4:	4907      	ldr	r1, [pc, #28]	; (801a504 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a4e6:	4808      	ldr	r0, [pc, #32]	; (801a508 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a4e8:	f7f3 fe40 	bl	800e16c <USBD_GetString>
 801a4ec:	e004      	b.n	801a4f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a4ee:	683a      	ldr	r2, [r7, #0]
 801a4f0:	4904      	ldr	r1, [pc, #16]	; (801a504 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a4f2:	4805      	ldr	r0, [pc, #20]	; (801a508 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a4f4:	f7f3 fe3a 	bl	800e16c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a4f8:	4b02      	ldr	r3, [pc, #8]	; (801a504 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a4fa:	4618      	mov	r0, r3
 801a4fc:	3708      	adds	r7, #8
 801a4fe:	46bd      	mov	sp, r7
 801a500:	bd80      	pop	{r7, pc}
 801a502:	bf00      	nop
 801a504:	20009d2c 	.word	0x20009d2c
 801a508:	0801e940 	.word	0x0801e940

0801a50c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a50c:	b580      	push	{r7, lr}
 801a50e:	b082      	sub	sp, #8
 801a510:	af00      	add	r7, sp, #0
 801a512:	4603      	mov	r3, r0
 801a514:	6039      	str	r1, [r7, #0]
 801a516:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a518:	79fb      	ldrb	r3, [r7, #7]
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d105      	bne.n	801a52a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a51e:	683a      	ldr	r2, [r7, #0]
 801a520:	4907      	ldr	r1, [pc, #28]	; (801a540 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a522:	4808      	ldr	r0, [pc, #32]	; (801a544 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a524:	f7f3 fe22 	bl	800e16c <USBD_GetString>
 801a528:	e004      	b.n	801a534 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a52a:	683a      	ldr	r2, [r7, #0]
 801a52c:	4904      	ldr	r1, [pc, #16]	; (801a540 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a52e:	4805      	ldr	r0, [pc, #20]	; (801a544 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a530:	f7f3 fe1c 	bl	800e16c <USBD_GetString>
  }
  return USBD_StrDesc;
 801a534:	4b02      	ldr	r3, [pc, #8]	; (801a540 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801a536:	4618      	mov	r0, r3
 801a538:	3708      	adds	r7, #8
 801a53a:	46bd      	mov	sp, r7
 801a53c:	bd80      	pop	{r7, pc}
 801a53e:	bf00      	nop
 801a540:	20009d2c 	.word	0x20009d2c
 801a544:	0801e94c 	.word	0x0801e94c

0801a548 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a548:	b580      	push	{r7, lr}
 801a54a:	b084      	sub	sp, #16
 801a54c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a54e:	4b0f      	ldr	r3, [pc, #60]	; (801a58c <Get_SerialNum+0x44>)
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a554:	4b0e      	ldr	r3, [pc, #56]	; (801a590 <Get_SerialNum+0x48>)
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a55a:	4b0e      	ldr	r3, [pc, #56]	; (801a594 <Get_SerialNum+0x4c>)
 801a55c:	681b      	ldr	r3, [r3, #0]
 801a55e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a560:	68fa      	ldr	r2, [r7, #12]
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	4413      	add	r3, r2
 801a566:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d009      	beq.n	801a582 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a56e:	2208      	movs	r2, #8
 801a570:	4909      	ldr	r1, [pc, #36]	; (801a598 <Get_SerialNum+0x50>)
 801a572:	68f8      	ldr	r0, [r7, #12]
 801a574:	f000 f814 	bl	801a5a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a578:	2204      	movs	r2, #4
 801a57a:	4908      	ldr	r1, [pc, #32]	; (801a59c <Get_SerialNum+0x54>)
 801a57c:	68b8      	ldr	r0, [r7, #8]
 801a57e:	f000 f80f 	bl	801a5a0 <IntToUnicode>
  }
}
 801a582:	bf00      	nop
 801a584:	3710      	adds	r7, #16
 801a586:	46bd      	mov	sp, r7
 801a588:	bd80      	pop	{r7, pc}
 801a58a:	bf00      	nop
 801a58c:	1fff7a10 	.word	0x1fff7a10
 801a590:	1fff7a14 	.word	0x1fff7a14
 801a594:	1fff7a18 	.word	0x1fff7a18
 801a598:	200001b2 	.word	0x200001b2
 801a59c:	200001c2 	.word	0x200001c2

0801a5a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a5a0:	b480      	push	{r7}
 801a5a2:	b087      	sub	sp, #28
 801a5a4:	af00      	add	r7, sp, #0
 801a5a6:	60f8      	str	r0, [r7, #12]
 801a5a8:	60b9      	str	r1, [r7, #8]
 801a5aa:	4613      	mov	r3, r2
 801a5ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a5ae:	2300      	movs	r3, #0
 801a5b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a5b2:	2300      	movs	r3, #0
 801a5b4:	75fb      	strb	r3, [r7, #23]
 801a5b6:	e027      	b.n	801a608 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a5b8:	68fb      	ldr	r3, [r7, #12]
 801a5ba:	0f1b      	lsrs	r3, r3, #28
 801a5bc:	2b09      	cmp	r3, #9
 801a5be:	d80b      	bhi.n	801a5d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a5c0:	68fb      	ldr	r3, [r7, #12]
 801a5c2:	0f1b      	lsrs	r3, r3, #28
 801a5c4:	b2da      	uxtb	r2, r3
 801a5c6:	7dfb      	ldrb	r3, [r7, #23]
 801a5c8:	005b      	lsls	r3, r3, #1
 801a5ca:	4619      	mov	r1, r3
 801a5cc:	68bb      	ldr	r3, [r7, #8]
 801a5ce:	440b      	add	r3, r1
 801a5d0:	3230      	adds	r2, #48	; 0x30
 801a5d2:	b2d2      	uxtb	r2, r2
 801a5d4:	701a      	strb	r2, [r3, #0]
 801a5d6:	e00a      	b.n	801a5ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	0f1b      	lsrs	r3, r3, #28
 801a5dc:	b2da      	uxtb	r2, r3
 801a5de:	7dfb      	ldrb	r3, [r7, #23]
 801a5e0:	005b      	lsls	r3, r3, #1
 801a5e2:	4619      	mov	r1, r3
 801a5e4:	68bb      	ldr	r3, [r7, #8]
 801a5e6:	440b      	add	r3, r1
 801a5e8:	3237      	adds	r2, #55	; 0x37
 801a5ea:	b2d2      	uxtb	r2, r2
 801a5ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a5ee:	68fb      	ldr	r3, [r7, #12]
 801a5f0:	011b      	lsls	r3, r3, #4
 801a5f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a5f4:	7dfb      	ldrb	r3, [r7, #23]
 801a5f6:	005b      	lsls	r3, r3, #1
 801a5f8:	3301      	adds	r3, #1
 801a5fa:	68ba      	ldr	r2, [r7, #8]
 801a5fc:	4413      	add	r3, r2
 801a5fe:	2200      	movs	r2, #0
 801a600:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a602:	7dfb      	ldrb	r3, [r7, #23]
 801a604:	3301      	adds	r3, #1
 801a606:	75fb      	strb	r3, [r7, #23]
 801a608:	7dfa      	ldrb	r2, [r7, #23]
 801a60a:	79fb      	ldrb	r3, [r7, #7]
 801a60c:	429a      	cmp	r2, r3
 801a60e:	d3d3      	bcc.n	801a5b8 <IntToUnicode+0x18>
  }
}
 801a610:	bf00      	nop
 801a612:	bf00      	nop
 801a614:	371c      	adds	r7, #28
 801a616:	46bd      	mov	sp, r7
 801a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a61c:	4770      	bx	lr

0801a61e <STORAGE_Init_HS>:
  * @brief  Initializes the storage unit (medium).
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_HS(uint8_t lun)
{
 801a61e:	b480      	push	{r7}
 801a620:	b083      	sub	sp, #12
 801a622:	af00      	add	r7, sp, #0
 801a624:	4603      	mov	r3, r0
 801a626:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 9 */
  UNUSED(lun);

  return (USBD_OK);
 801a628:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801a62a:	4618      	mov	r0, r3
 801a62c:	370c      	adds	r7, #12
 801a62e:	46bd      	mov	sp, r7
 801a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a634:	4770      	bx	lr

0801a636 <STORAGE_GetCapacity_HS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_HS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801a636:	b480      	push	{r7}
 801a638:	b085      	sub	sp, #20
 801a63a:	af00      	add	r7, sp, #0
 801a63c:	4603      	mov	r3, r0
 801a63e:	60b9      	str	r1, [r7, #8]
 801a640:	607a      	str	r2, [r7, #4]
 801a642:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 10 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 801a644:	68bb      	ldr	r3, [r7, #8]
 801a646:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801a64a:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a652:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 801a654:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801a656:	4618      	mov	r0, r3
 801a658:	3714      	adds	r7, #20
 801a65a:	46bd      	mov	sp, r7
 801a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a660:	4770      	bx	lr

0801a662 <STORAGE_IsReady_HS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_HS(uint8_t lun)
{
 801a662:	b480      	push	{r7}
 801a664:	b083      	sub	sp, #12
 801a666:	af00      	add	r7, sp, #0
 801a668:	4603      	mov	r3, r0
 801a66a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */
  UNUSED(lun);

  return (USBD_OK);
 801a66c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801a66e:	4618      	mov	r0, r3
 801a670:	370c      	adds	r7, #12
 801a672:	46bd      	mov	sp, r7
 801a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a678:	4770      	bx	lr

0801a67a <STORAGE_IsWriteProtected_HS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_HS(uint8_t lun)
{
 801a67a:	b480      	push	{r7}
 801a67c:	b083      	sub	sp, #12
 801a67e:	af00      	add	r7, sp, #0
 801a680:	4603      	mov	r3, r0
 801a682:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  return (USBD_OK);
 801a684:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 801a686:	4618      	mov	r0, r3
 801a688:	370c      	adds	r7, #12
 801a68a:	46bd      	mov	sp, r7
 801a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a690:	4770      	bx	lr

0801a692 <STORAGE_Read_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801a692:	b480      	push	{r7}
 801a694:	b085      	sub	sp, #20
 801a696:	af00      	add	r7, sp, #0
 801a698:	60b9      	str	r1, [r7, #8]
 801a69a:	607a      	str	r2, [r7, #4]
 801a69c:	461a      	mov	r2, r3
 801a69e:	4603      	mov	r3, r0
 801a6a0:	73fb      	strb	r3, [r7, #15]
 801a6a2:	4613      	mov	r3, r2
 801a6a4:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 801a6a6:	2300      	movs	r3, #0
  /* USER CODE END 13 */
}
 801a6a8:	4618      	mov	r0, r3
 801a6aa:	3714      	adds	r7, #20
 801a6ac:	46bd      	mov	sp, r7
 801a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6b2:	4770      	bx	lr

0801a6b4 <STORAGE_Write_HS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_HS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801a6b4:	b480      	push	{r7}
 801a6b6:	b085      	sub	sp, #20
 801a6b8:	af00      	add	r7, sp, #0
 801a6ba:	60b9      	str	r1, [r7, #8]
 801a6bc:	607a      	str	r2, [r7, #4]
 801a6be:	461a      	mov	r2, r3
 801a6c0:	4603      	mov	r3, r0
 801a6c2:	73fb      	strb	r3, [r7, #15]
 801a6c4:	4613      	mov	r3, r2
 801a6c6:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 801a6c8:	2300      	movs	r3, #0
  /* USER CODE END 14 */
}
 801a6ca:	4618      	mov	r0, r3
 801a6cc:	3714      	adds	r7, #20
 801a6ce:	46bd      	mov	sp, r7
 801a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6d4:	4770      	bx	lr

0801a6d6 <STORAGE_GetMaxLun_HS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_HS(void)
{
 801a6d6:	b480      	push	{r7}
 801a6d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (STORAGE_LUN_NBR - 1);
 801a6da:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 801a6dc:	4618      	mov	r0, r3
 801a6de:	46bd      	mov	sp, r7
 801a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6e4:	4770      	bx	lr
	...

0801a6e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	b08c      	sub	sp, #48	; 0x30
 801a6ec:	af00      	add	r7, sp, #0
 801a6ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a6f0:	f107 031c 	add.w	r3, r7, #28
 801a6f4:	2200      	movs	r2, #0
 801a6f6:	601a      	str	r2, [r3, #0]
 801a6f8:	605a      	str	r2, [r3, #4]
 801a6fa:	609a      	str	r2, [r3, #8]
 801a6fc:	60da      	str	r2, [r3, #12]
 801a6fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a708:	d13b      	bne.n	801a782 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a70a:	2300      	movs	r3, #0
 801a70c:	61bb      	str	r3, [r7, #24]
 801a70e:	4b3c      	ldr	r3, [pc, #240]	; (801a800 <HAL_PCD_MspInit+0x118>)
 801a710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a712:	4a3b      	ldr	r2, [pc, #236]	; (801a800 <HAL_PCD_MspInit+0x118>)
 801a714:	f043 0301 	orr.w	r3, r3, #1
 801a718:	6313      	str	r3, [r2, #48]	; 0x30
 801a71a:	4b39      	ldr	r3, [pc, #228]	; (801a800 <HAL_PCD_MspInit+0x118>)
 801a71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a71e:	f003 0301 	and.w	r3, r3, #1
 801a722:	61bb      	str	r3, [r7, #24]
 801a724:	69bb      	ldr	r3, [r7, #24]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801a726:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801a72a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a72c:	2302      	movs	r3, #2
 801a72e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a730:	2300      	movs	r3, #0
 801a732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a734:	2303      	movs	r3, #3
 801a736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801a738:	230a      	movs	r3, #10
 801a73a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a73c:	f107 031c 	add.w	r3, r7, #28
 801a740:	4619      	mov	r1, r3
 801a742:	4830      	ldr	r0, [pc, #192]	; (801a804 <HAL_PCD_MspInit+0x11c>)
 801a744:	f7e8 fb9c 	bl	8002e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a748:	4b2d      	ldr	r3, [pc, #180]	; (801a800 <HAL_PCD_MspInit+0x118>)
 801a74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a74c:	4a2c      	ldr	r2, [pc, #176]	; (801a800 <HAL_PCD_MspInit+0x118>)
 801a74e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a752:	6353      	str	r3, [r2, #52]	; 0x34
 801a754:	2300      	movs	r3, #0
 801a756:	617b      	str	r3, [r7, #20]
 801a758:	4b29      	ldr	r3, [pc, #164]	; (801a800 <HAL_PCD_MspInit+0x118>)
 801a75a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a75c:	4a28      	ldr	r2, [pc, #160]	; (801a800 <HAL_PCD_MspInit+0x118>)
 801a75e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a762:	6453      	str	r3, [r2, #68]	; 0x44
 801a764:	4b26      	ldr	r3, [pc, #152]	; (801a800 <HAL_PCD_MspInit+0x118>)
 801a766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a76c:	617b      	str	r3, [r7, #20]
 801a76e:	697b      	ldr	r3, [r7, #20]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801a770:	2200      	movs	r2, #0
 801a772:	2100      	movs	r1, #0
 801a774:	2043      	movs	r0, #67	; 0x43
 801a776:	f7e6 fe48 	bl	800140a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a77a:	2043      	movs	r0, #67	; 0x43
 801a77c:	f7e6 fe61 	bl	8001442 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801a780:	e039      	b.n	801a7f6 <HAL_PCD_MspInit+0x10e>
  else if(pcdHandle->Instance==USB_OTG_HS)
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	681b      	ldr	r3, [r3, #0]
 801a786:	4a20      	ldr	r2, [pc, #128]	; (801a808 <HAL_PCD_MspInit+0x120>)
 801a788:	4293      	cmp	r3, r2
 801a78a:	d134      	bne.n	801a7f6 <HAL_PCD_MspInit+0x10e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801a78c:	2300      	movs	r3, #0
 801a78e:	613b      	str	r3, [r7, #16]
 801a790:	4b1b      	ldr	r3, [pc, #108]	; (801a800 <HAL_PCD_MspInit+0x118>)
 801a792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a794:	4a1a      	ldr	r2, [pc, #104]	; (801a800 <HAL_PCD_MspInit+0x118>)
 801a796:	f043 0302 	orr.w	r3, r3, #2
 801a79a:	6313      	str	r3, [r2, #48]	; 0x30
 801a79c:	4b18      	ldr	r3, [pc, #96]	; (801a800 <HAL_PCD_MspInit+0x118>)
 801a79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a7a0:	f003 0302 	and.w	r3, r3, #2
 801a7a4:	613b      	str	r3, [r7, #16]
 801a7a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 801a7a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801a7ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a7ae:	2302      	movs	r3, #2
 801a7b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a7b2:	2300      	movs	r3, #0
 801a7b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a7b6:	2303      	movs	r3, #3
 801a7b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 801a7ba:	230c      	movs	r3, #12
 801a7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801a7be:	f107 031c 	add.w	r3, r7, #28
 801a7c2:	4619      	mov	r1, r3
 801a7c4:	4811      	ldr	r0, [pc, #68]	; (801a80c <HAL_PCD_MspInit+0x124>)
 801a7c6:	f7e8 fb5b 	bl	8002e80 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	60fb      	str	r3, [r7, #12]
 801a7ce:	4b0c      	ldr	r3, [pc, #48]	; (801a800 <HAL_PCD_MspInit+0x118>)
 801a7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a7d2:	4a0b      	ldr	r2, [pc, #44]	; (801a800 <HAL_PCD_MspInit+0x118>)
 801a7d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801a7d8:	6313      	str	r3, [r2, #48]	; 0x30
 801a7da:	4b09      	ldr	r3, [pc, #36]	; (801a800 <HAL_PCD_MspInit+0x118>)
 801a7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a7de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801a7e2:	60fb      	str	r3, [r7, #12]
 801a7e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801a7e6:	2200      	movs	r2, #0
 801a7e8:	2100      	movs	r1, #0
 801a7ea:	204d      	movs	r0, #77	; 0x4d
 801a7ec:	f7e6 fe0d 	bl	800140a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801a7f0:	204d      	movs	r0, #77	; 0x4d
 801a7f2:	f7e6 fe26 	bl	8001442 <HAL_NVIC_EnableIRQ>
}
 801a7f6:	bf00      	nop
 801a7f8:	3730      	adds	r7, #48	; 0x30
 801a7fa:	46bd      	mov	sp, r7
 801a7fc:	bd80      	pop	{r7, pc}
 801a7fe:	bf00      	nop
 801a800:	40023800 	.word	0x40023800
 801a804:	40020000 	.word	0x40020000
 801a808:	40040000 	.word	0x40040000
 801a80c:	40020400 	.word	0x40020400

0801a810 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a810:	b580      	push	{r7, lr}
 801a812:	b082      	sub	sp, #8
 801a814:	af00      	add	r7, sp, #0
 801a816:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 801a824:	4619      	mov	r1, r3
 801a826:	4610      	mov	r0, r2
 801a828:	f7f2 fb3a 	bl	800cea0 <USBD_LL_SetupStage>
}
 801a82c:	bf00      	nop
 801a82e:	3708      	adds	r7, #8
 801a830:	46bd      	mov	sp, r7
 801a832:	bd80      	pop	{r7, pc}

0801a834 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a834:	b580      	push	{r7, lr}
 801a836:	b082      	sub	sp, #8
 801a838:	af00      	add	r7, sp, #0
 801a83a:	6078      	str	r0, [r7, #4]
 801a83c:	460b      	mov	r3, r1
 801a83e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 801a846:	78fa      	ldrb	r2, [r7, #3]
 801a848:	6879      	ldr	r1, [r7, #4]
 801a84a:	4613      	mov	r3, r2
 801a84c:	00db      	lsls	r3, r3, #3
 801a84e:	4413      	add	r3, r2
 801a850:	009b      	lsls	r3, r3, #2
 801a852:	440b      	add	r3, r1
 801a854:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801a858:	681a      	ldr	r2, [r3, #0]
 801a85a:	78fb      	ldrb	r3, [r7, #3]
 801a85c:	4619      	mov	r1, r3
 801a85e:	f7f2 fb74 	bl	800cf4a <USBD_LL_DataOutStage>
}
 801a862:	bf00      	nop
 801a864:	3708      	adds	r7, #8
 801a866:	46bd      	mov	sp, r7
 801a868:	bd80      	pop	{r7, pc}

0801a86a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a86a:	b580      	push	{r7, lr}
 801a86c:	b082      	sub	sp, #8
 801a86e:	af00      	add	r7, sp, #0
 801a870:	6078      	str	r0, [r7, #4]
 801a872:	460b      	mov	r3, r1
 801a874:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 801a87c:	78fa      	ldrb	r2, [r7, #3]
 801a87e:	6879      	ldr	r1, [r7, #4]
 801a880:	4613      	mov	r3, r2
 801a882:	00db      	lsls	r3, r3, #3
 801a884:	4413      	add	r3, r2
 801a886:	009b      	lsls	r3, r3, #2
 801a888:	440b      	add	r3, r1
 801a88a:	3320      	adds	r3, #32
 801a88c:	681a      	ldr	r2, [r3, #0]
 801a88e:	78fb      	ldrb	r3, [r7, #3]
 801a890:	4619      	mov	r1, r3
 801a892:	f7f2 fc0d 	bl	800d0b0 <USBD_LL_DataInStage>
}
 801a896:	bf00      	nop
 801a898:	3708      	adds	r7, #8
 801a89a:	46bd      	mov	sp, r7
 801a89c:	bd80      	pop	{r7, pc}

0801a89e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a89e:	b580      	push	{r7, lr}
 801a8a0:	b082      	sub	sp, #8
 801a8a2:	af00      	add	r7, sp, #0
 801a8a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801a8ac:	4618      	mov	r0, r3
 801a8ae:	f7f2 fd47 	bl	800d340 <USBD_LL_SOF>
}
 801a8b2:	bf00      	nop
 801a8b4:	3708      	adds	r7, #8
 801a8b6:	46bd      	mov	sp, r7
 801a8b8:	bd80      	pop	{r7, pc}

0801a8ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8ba:	b580      	push	{r7, lr}
 801a8bc:	b084      	sub	sp, #16
 801a8be:	af00      	add	r7, sp, #0
 801a8c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a8c2:	2301      	movs	r3, #1
 801a8c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	79db      	ldrb	r3, [r3, #7]
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	d102      	bne.n	801a8d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a8ce:	2300      	movs	r3, #0
 801a8d0:	73fb      	strb	r3, [r7, #15]
 801a8d2:	e008      	b.n	801a8e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	79db      	ldrb	r3, [r3, #7]
 801a8d8:	2b02      	cmp	r3, #2
 801a8da:	d102      	bne.n	801a8e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a8dc:	2301      	movs	r3, #1
 801a8de:	73fb      	strb	r3, [r7, #15]
 801a8e0:	e001      	b.n	801a8e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a8e2:	f7e5 fff7 	bl	80008d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801a8ec:	7bfa      	ldrb	r2, [r7, #15]
 801a8ee:	4611      	mov	r1, r2
 801a8f0:	4618      	mov	r0, r3
 801a8f2:	f7f2 fce1 	bl	800d2b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801a8fc:	4618      	mov	r0, r3
 801a8fe:	f7f2 fc89 	bl	800d214 <USBD_LL_Reset>
}
 801a902:	bf00      	nop
 801a904:	3710      	adds	r7, #16
 801a906:	46bd      	mov	sp, r7
 801a908:	bd80      	pop	{r7, pc}
	...

0801a90c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a90c:	b580      	push	{r7, lr}
 801a90e:	b082      	sub	sp, #8
 801a910:	af00      	add	r7, sp, #0
 801a912:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801a91a:	4618      	mov	r0, r3
 801a91c:	f7f2 fcdc 	bl	800d2d8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	687a      	ldr	r2, [r7, #4]
 801a92c:	6812      	ldr	r2, [r2, #0]
 801a92e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a932:	f043 0301 	orr.w	r3, r3, #1
 801a936:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	7adb      	ldrb	r3, [r3, #11]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d005      	beq.n	801a94c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a940:	4b04      	ldr	r3, [pc, #16]	; (801a954 <HAL_PCD_SuspendCallback+0x48>)
 801a942:	691b      	ldr	r3, [r3, #16]
 801a944:	4a03      	ldr	r2, [pc, #12]	; (801a954 <HAL_PCD_SuspendCallback+0x48>)
 801a946:	f043 0306 	orr.w	r3, r3, #6
 801a94a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a94c:	bf00      	nop
 801a94e:	3708      	adds	r7, #8
 801a950:	46bd      	mov	sp, r7
 801a952:	bd80      	pop	{r7, pc}
 801a954:	e000ed00 	.word	0xe000ed00

0801a958 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a958:	b580      	push	{r7, lr}
 801a95a:	b082      	sub	sp, #8
 801a95c:	af00      	add	r7, sp, #0
 801a95e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801a966:	4618      	mov	r0, r3
 801a968:	f7f2 fcd2 	bl	800d310 <USBD_LL_Resume>
}
 801a96c:	bf00      	nop
 801a96e:	3708      	adds	r7, #8
 801a970:	46bd      	mov	sp, r7
 801a972:	bd80      	pop	{r7, pc}

0801a974 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a974:	b580      	push	{r7, lr}
 801a976:	b082      	sub	sp, #8
 801a978:	af00      	add	r7, sp, #0
 801a97a:	6078      	str	r0, [r7, #4]
 801a97c:	460b      	mov	r3, r1
 801a97e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801a986:	78fa      	ldrb	r2, [r7, #3]
 801a988:	4611      	mov	r1, r2
 801a98a:	4618      	mov	r0, r3
 801a98c:	f7f2 fd2a 	bl	800d3e4 <USBD_LL_IsoOUTIncomplete>
}
 801a990:	bf00      	nop
 801a992:	3708      	adds	r7, #8
 801a994:	46bd      	mov	sp, r7
 801a996:	bd80      	pop	{r7, pc}

0801a998 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a998:	b580      	push	{r7, lr}
 801a99a:	b082      	sub	sp, #8
 801a99c:	af00      	add	r7, sp, #0
 801a99e:	6078      	str	r0, [r7, #4]
 801a9a0:	460b      	mov	r3, r1
 801a9a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801a9aa:	78fa      	ldrb	r2, [r7, #3]
 801a9ac:	4611      	mov	r1, r2
 801a9ae:	4618      	mov	r0, r3
 801a9b0:	f7f2 fce6 	bl	800d380 <USBD_LL_IsoINIncomplete>
}
 801a9b4:	bf00      	nop
 801a9b6:	3708      	adds	r7, #8
 801a9b8:	46bd      	mov	sp, r7
 801a9ba:	bd80      	pop	{r7, pc}

0801a9bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9bc:	b580      	push	{r7, lr}
 801a9be:	b082      	sub	sp, #8
 801a9c0:	af00      	add	r7, sp, #0
 801a9c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801a9ca:	4618      	mov	r0, r3
 801a9cc:	f7f2 fd3c 	bl	800d448 <USBD_LL_DevConnected>
}
 801a9d0:	bf00      	nop
 801a9d2:	3708      	adds	r7, #8
 801a9d4:	46bd      	mov	sp, r7
 801a9d6:	bd80      	pop	{r7, pc}

0801a9d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9d8:	b580      	push	{r7, lr}
 801a9da:	b082      	sub	sp, #8
 801a9dc:	af00      	add	r7, sp, #0
 801a9de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801a9e6:	4618      	mov	r0, r3
 801a9e8:	f7f2 fd39 	bl	800d45e <USBD_LL_DevDisconnected>
}
 801a9ec:	bf00      	nop
 801a9ee:	3708      	adds	r7, #8
 801a9f0:	46bd      	mov	sp, r7
 801a9f2:	bd80      	pop	{r7, pc}

0801a9f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a9f4:	b580      	push	{r7, lr}
 801a9f6:	b082      	sub	sp, #8
 801a9f8:	af00      	add	r7, sp, #0
 801a9fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	781b      	ldrb	r3, [r3, #0]
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	d13c      	bne.n	801aa7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801aa04:	4a43      	ldr	r2, [pc, #268]	; (801ab14 <USBD_LL_Init+0x120>)
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	4a41      	ldr	r2, [pc, #260]	; (801ab14 <USBD_LL_Init+0x120>)
 801aa10:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801aa14:	4b3f      	ldr	r3, [pc, #252]	; (801ab14 <USBD_LL_Init+0x120>)
 801aa16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801aa1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801aa1c:	4b3d      	ldr	r3, [pc, #244]	; (801ab14 <USBD_LL_Init+0x120>)
 801aa1e:	2204      	movs	r2, #4
 801aa20:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801aa22:	4b3c      	ldr	r3, [pc, #240]	; (801ab14 <USBD_LL_Init+0x120>)
 801aa24:	2202      	movs	r2, #2
 801aa26:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801aa28:	4b3a      	ldr	r3, [pc, #232]	; (801ab14 <USBD_LL_Init+0x120>)
 801aa2a:	2200      	movs	r2, #0
 801aa2c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801aa2e:	4b39      	ldr	r3, [pc, #228]	; (801ab14 <USBD_LL_Init+0x120>)
 801aa30:	2202      	movs	r2, #2
 801aa32:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801aa34:	4b37      	ldr	r3, [pc, #220]	; (801ab14 <USBD_LL_Init+0x120>)
 801aa36:	2200      	movs	r2, #0
 801aa38:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801aa3a:	4b36      	ldr	r3, [pc, #216]	; (801ab14 <USBD_LL_Init+0x120>)
 801aa3c:	2200      	movs	r2, #0
 801aa3e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801aa40:	4b34      	ldr	r3, [pc, #208]	; (801ab14 <USBD_LL_Init+0x120>)
 801aa42:	2200      	movs	r2, #0
 801aa44:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801aa46:	4b33      	ldr	r3, [pc, #204]	; (801ab14 <USBD_LL_Init+0x120>)
 801aa48:	2200      	movs	r2, #0
 801aa4a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801aa4c:	4b31      	ldr	r3, [pc, #196]	; (801ab14 <USBD_LL_Init+0x120>)
 801aa4e:	2200      	movs	r2, #0
 801aa50:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801aa52:	4830      	ldr	r0, [pc, #192]	; (801ab14 <USBD_LL_Init+0x120>)
 801aa54:	f7e8 fbb0 	bl	80031b8 <HAL_PCD_Init>
 801aa58:	4603      	mov	r3, r0
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d001      	beq.n	801aa62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801aa5e:	f7e5 ff39 	bl	80008d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801aa62:	2180      	movs	r1, #128	; 0x80
 801aa64:	482b      	ldr	r0, [pc, #172]	; (801ab14 <USBD_LL_Init+0x120>)
 801aa66:	f7e9 fe08 	bl	800467a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801aa6a:	2240      	movs	r2, #64	; 0x40
 801aa6c:	2100      	movs	r1, #0
 801aa6e:	4829      	ldr	r0, [pc, #164]	; (801ab14 <USBD_LL_Init+0x120>)
 801aa70:	f7e9 fdbc 	bl	80045ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801aa74:	2280      	movs	r2, #128	; 0x80
 801aa76:	2101      	movs	r1, #1
 801aa78:	4826      	ldr	r0, [pc, #152]	; (801ab14 <USBD_LL_Init+0x120>)
 801aa7a:	f7e9 fdb7 	bl	80045ec <HAL_PCDEx_SetTxFiFo>
  }
  if (pdev->id == DEVICE_HS) {
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	781b      	ldrb	r3, [r3, #0]
 801aa82:	2b01      	cmp	r3, #1
 801aa84:	d140      	bne.n	801ab08 <USBD_LL_Init+0x114>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801aa86:	4a24      	ldr	r2, [pc, #144]	; (801ab18 <USBD_LL_Init+0x124>)
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	4a21      	ldr	r2, [pc, #132]	; (801ab18 <USBD_LL_Init+0x124>)
 801aa92:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801aa96:	4b20      	ldr	r3, [pc, #128]	; (801ab18 <USBD_LL_Init+0x124>)
 801aa98:	4a20      	ldr	r2, [pc, #128]	; (801ab1c <USBD_LL_Init+0x128>)
 801aa9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 801aa9c:	4b1e      	ldr	r3, [pc, #120]	; (801ab18 <USBD_LL_Init+0x124>)
 801aa9e:	2206      	movs	r2, #6
 801aaa0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801aaa2:	4b1d      	ldr	r3, [pc, #116]	; (801ab18 <USBD_LL_Init+0x124>)
 801aaa4:	2202      	movs	r2, #2
 801aaa6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801aaa8:	4b1b      	ldr	r3, [pc, #108]	; (801ab18 <USBD_LL_Init+0x124>)
 801aaaa:	2200      	movs	r2, #0
 801aaac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801aaae:	4b1a      	ldr	r3, [pc, #104]	; (801ab18 <USBD_LL_Init+0x124>)
 801aab0:	2202      	movs	r2, #2
 801aab2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801aab4:	4b18      	ldr	r3, [pc, #96]	; (801ab18 <USBD_LL_Init+0x124>)
 801aab6:	2200      	movs	r2, #0
 801aab8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801aaba:	4b17      	ldr	r3, [pc, #92]	; (801ab18 <USBD_LL_Init+0x124>)
 801aabc:	2200      	movs	r2, #0
 801aabe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801aac0:	4b15      	ldr	r3, [pc, #84]	; (801ab18 <USBD_LL_Init+0x124>)
 801aac2:	2200      	movs	r2, #0
 801aac4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801aac6:	4b14      	ldr	r3, [pc, #80]	; (801ab18 <USBD_LL_Init+0x124>)
 801aac8:	2200      	movs	r2, #0
 801aaca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801aacc:	4b12      	ldr	r3, [pc, #72]	; (801ab18 <USBD_LL_Init+0x124>)
 801aace:	2200      	movs	r2, #0
 801aad0:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801aad2:	4b11      	ldr	r3, [pc, #68]	; (801ab18 <USBD_LL_Init+0x124>)
 801aad4:	2200      	movs	r2, #0
 801aad6:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801aad8:	480f      	ldr	r0, [pc, #60]	; (801ab18 <USBD_LL_Init+0x124>)
 801aada:	f7e8 fb6d 	bl	80031b8 <HAL_PCD_Init>
 801aade:	4603      	mov	r3, r0
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d001      	beq.n	801aae8 <USBD_LL_Init+0xf4>
  {
    Error_Handler( );
 801aae4:	f7e5 fef6 	bl	80008d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801aae8:	f44f 7100 	mov.w	r1, #512	; 0x200
 801aaec:	480a      	ldr	r0, [pc, #40]	; (801ab18 <USBD_LL_Init+0x124>)
 801aaee:	f7e9 fdc4 	bl	800467a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801aaf2:	2280      	movs	r2, #128	; 0x80
 801aaf4:	2100      	movs	r1, #0
 801aaf6:	4808      	ldr	r0, [pc, #32]	; (801ab18 <USBD_LL_Init+0x124>)
 801aaf8:	f7e9 fd78 	bl	80045ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801aafc:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801ab00:	2101      	movs	r1, #1
 801ab02:	4805      	ldr	r0, [pc, #20]	; (801ab18 <USBD_LL_Init+0x124>)
 801ab04:	f7e9 fd72 	bl	80045ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801ab08:	2300      	movs	r3, #0
}
 801ab0a:	4618      	mov	r0, r3
 801ab0c:	3708      	adds	r7, #8
 801ab0e:	46bd      	mov	sp, r7
 801ab10:	bd80      	pop	{r7, pc}
 801ab12:	bf00      	nop
 801ab14:	20009f2c 	.word	0x20009f2c
 801ab18:	2000a410 	.word	0x2000a410
 801ab1c:	40040000 	.word	0x40040000

0801ab20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801ab20:	b580      	push	{r7, lr}
 801ab22:	b084      	sub	sp, #16
 801ab24:	af00      	add	r7, sp, #0
 801ab26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab28:	2300      	movs	r3, #0
 801ab2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab2c:	2300      	movs	r3, #0
 801ab2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ab36:	4618      	mov	r0, r3
 801ab38:	f7e8 fc4d 	bl	80033d6 <HAL_PCD_Start>
 801ab3c:	4603      	mov	r3, r0
 801ab3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab40:	7bfb      	ldrb	r3, [r7, #15]
 801ab42:	4618      	mov	r0, r3
 801ab44:	f000 f962 	bl	801ae0c <USBD_Get_USB_Status>
 801ab48:	4603      	mov	r3, r0
 801ab4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab4c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab4e:	4618      	mov	r0, r3
 801ab50:	3710      	adds	r7, #16
 801ab52:	46bd      	mov	sp, r7
 801ab54:	bd80      	pop	{r7, pc}

0801ab56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801ab56:	b580      	push	{r7, lr}
 801ab58:	b084      	sub	sp, #16
 801ab5a:	af00      	add	r7, sp, #0
 801ab5c:	6078      	str	r0, [r7, #4]
 801ab5e:	4608      	mov	r0, r1
 801ab60:	4611      	mov	r1, r2
 801ab62:	461a      	mov	r2, r3
 801ab64:	4603      	mov	r3, r0
 801ab66:	70fb      	strb	r3, [r7, #3]
 801ab68:	460b      	mov	r3, r1
 801ab6a:	70bb      	strb	r3, [r7, #2]
 801ab6c:	4613      	mov	r3, r2
 801ab6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab70:	2300      	movs	r3, #0
 801ab72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab74:	2300      	movs	r3, #0
 801ab76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ab7e:	78bb      	ldrb	r3, [r7, #2]
 801ab80:	883a      	ldrh	r2, [r7, #0]
 801ab82:	78f9      	ldrb	r1, [r7, #3]
 801ab84:	f7e9 f921 	bl	8003dca <HAL_PCD_EP_Open>
 801ab88:	4603      	mov	r3, r0
 801ab8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab8c:	7bfb      	ldrb	r3, [r7, #15]
 801ab8e:	4618      	mov	r0, r3
 801ab90:	f000 f93c 	bl	801ae0c <USBD_Get_USB_Status>
 801ab94:	4603      	mov	r3, r0
 801ab96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab98:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab9a:	4618      	mov	r0, r3
 801ab9c:	3710      	adds	r7, #16
 801ab9e:	46bd      	mov	sp, r7
 801aba0:	bd80      	pop	{r7, pc}

0801aba2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aba2:	b580      	push	{r7, lr}
 801aba4:	b084      	sub	sp, #16
 801aba6:	af00      	add	r7, sp, #0
 801aba8:	6078      	str	r0, [r7, #4]
 801abaa:	460b      	mov	r3, r1
 801abac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abae:	2300      	movs	r3, #0
 801abb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801abb2:	2300      	movs	r3, #0
 801abb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801abbc:	78fa      	ldrb	r2, [r7, #3]
 801abbe:	4611      	mov	r1, r2
 801abc0:	4618      	mov	r0, r3
 801abc2:	f7e9 f96a 	bl	8003e9a <HAL_PCD_EP_Close>
 801abc6:	4603      	mov	r3, r0
 801abc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801abca:	7bfb      	ldrb	r3, [r7, #15]
 801abcc:	4618      	mov	r0, r3
 801abce:	f000 f91d 	bl	801ae0c <USBD_Get_USB_Status>
 801abd2:	4603      	mov	r3, r0
 801abd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801abd6:	7bbb      	ldrb	r3, [r7, #14]
}
 801abd8:	4618      	mov	r0, r3
 801abda:	3710      	adds	r7, #16
 801abdc:	46bd      	mov	sp, r7
 801abde:	bd80      	pop	{r7, pc}

0801abe0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801abe0:	b580      	push	{r7, lr}
 801abe2:	b084      	sub	sp, #16
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	6078      	str	r0, [r7, #4]
 801abe8:	460b      	mov	r3, r1
 801abea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abec:	2300      	movs	r3, #0
 801abee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801abf0:	2300      	movs	r3, #0
 801abf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801abfa:	78fa      	ldrb	r2, [r7, #3]
 801abfc:	4611      	mov	r1, r2
 801abfe:	4618      	mov	r0, r3
 801ac00:	f7e9 fb0c 	bl	800421c <HAL_PCD_EP_Flush>
 801ac04:	4603      	mov	r3, r0
 801ac06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac08:	7bfb      	ldrb	r3, [r7, #15]
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	f000 f8fe 	bl	801ae0c <USBD_Get_USB_Status>
 801ac10:	4603      	mov	r3, r0
 801ac12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac14:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac16:	4618      	mov	r0, r3
 801ac18:	3710      	adds	r7, #16
 801ac1a:	46bd      	mov	sp, r7
 801ac1c:	bd80      	pop	{r7, pc}

0801ac1e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac1e:	b580      	push	{r7, lr}
 801ac20:	b084      	sub	sp, #16
 801ac22:	af00      	add	r7, sp, #0
 801ac24:	6078      	str	r0, [r7, #4]
 801ac26:	460b      	mov	r3, r1
 801ac28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac2e:	2300      	movs	r3, #0
 801ac30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac38:	78fa      	ldrb	r2, [r7, #3]
 801ac3a:	4611      	mov	r1, r2
 801ac3c:	4618      	mov	r0, r3
 801ac3e:	f7e9 fa03 	bl	8004048 <HAL_PCD_EP_SetStall>
 801ac42:	4603      	mov	r3, r0
 801ac44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac46:	7bfb      	ldrb	r3, [r7, #15]
 801ac48:	4618      	mov	r0, r3
 801ac4a:	f000 f8df 	bl	801ae0c <USBD_Get_USB_Status>
 801ac4e:	4603      	mov	r3, r0
 801ac50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac52:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac54:	4618      	mov	r0, r3
 801ac56:	3710      	adds	r7, #16
 801ac58:	46bd      	mov	sp, r7
 801ac5a:	bd80      	pop	{r7, pc}

0801ac5c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac5c:	b580      	push	{r7, lr}
 801ac5e:	b084      	sub	sp, #16
 801ac60:	af00      	add	r7, sp, #0
 801ac62:	6078      	str	r0, [r7, #4]
 801ac64:	460b      	mov	r3, r1
 801ac66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac68:	2300      	movs	r3, #0
 801ac6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac6c:	2300      	movs	r3, #0
 801ac6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac76:	78fa      	ldrb	r2, [r7, #3]
 801ac78:	4611      	mov	r1, r2
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	f7e9 fa47 	bl	800410e <HAL_PCD_EP_ClrStall>
 801ac80:	4603      	mov	r3, r0
 801ac82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac84:	7bfb      	ldrb	r3, [r7, #15]
 801ac86:	4618      	mov	r0, r3
 801ac88:	f000 f8c0 	bl	801ae0c <USBD_Get_USB_Status>
 801ac8c:	4603      	mov	r3, r0
 801ac8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac90:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac92:	4618      	mov	r0, r3
 801ac94:	3710      	adds	r7, #16
 801ac96:	46bd      	mov	sp, r7
 801ac98:	bd80      	pop	{r7, pc}

0801ac9a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac9a:	b480      	push	{r7}
 801ac9c:	b085      	sub	sp, #20
 801ac9e:	af00      	add	r7, sp, #0
 801aca0:	6078      	str	r0, [r7, #4]
 801aca2:	460b      	mov	r3, r1
 801aca4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801acac:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801acae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	da0b      	bge.n	801acce <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801acb6:	78fb      	ldrb	r3, [r7, #3]
 801acb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801acbc:	68f9      	ldr	r1, [r7, #12]
 801acbe:	4613      	mov	r3, r2
 801acc0:	00db      	lsls	r3, r3, #3
 801acc2:	4413      	add	r3, r2
 801acc4:	009b      	lsls	r3, r3, #2
 801acc6:	440b      	add	r3, r1
 801acc8:	3316      	adds	r3, #22
 801acca:	781b      	ldrb	r3, [r3, #0]
 801accc:	e00b      	b.n	801ace6 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801acce:	78fb      	ldrb	r3, [r7, #3]
 801acd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801acd4:	68f9      	ldr	r1, [r7, #12]
 801acd6:	4613      	mov	r3, r2
 801acd8:	00db      	lsls	r3, r3, #3
 801acda:	4413      	add	r3, r2
 801acdc:	009b      	lsls	r3, r3, #2
 801acde:	440b      	add	r3, r1
 801ace0:	f203 2356 	addw	r3, r3, #598	; 0x256
 801ace4:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ace6:	4618      	mov	r0, r3
 801ace8:	3714      	adds	r7, #20
 801acea:	46bd      	mov	sp, r7
 801acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acf0:	4770      	bx	lr

0801acf2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801acf2:	b580      	push	{r7, lr}
 801acf4:	b084      	sub	sp, #16
 801acf6:	af00      	add	r7, sp, #0
 801acf8:	6078      	str	r0, [r7, #4]
 801acfa:	460b      	mov	r3, r1
 801acfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801acfe:	2300      	movs	r3, #0
 801ad00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad02:	2300      	movs	r3, #0
 801ad04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ad0c:	78fa      	ldrb	r2, [r7, #3]
 801ad0e:	4611      	mov	r1, r2
 801ad10:	4618      	mov	r0, r3
 801ad12:	f7e9 f836 	bl	8003d82 <HAL_PCD_SetAddress>
 801ad16:	4603      	mov	r3, r0
 801ad18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad1a:	7bfb      	ldrb	r3, [r7, #15]
 801ad1c:	4618      	mov	r0, r3
 801ad1e:	f000 f875 	bl	801ae0c <USBD_Get_USB_Status>
 801ad22:	4603      	mov	r3, r0
 801ad24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ad26:	7bbb      	ldrb	r3, [r7, #14]
}
 801ad28:	4618      	mov	r0, r3
 801ad2a:	3710      	adds	r7, #16
 801ad2c:	46bd      	mov	sp, r7
 801ad2e:	bd80      	pop	{r7, pc}

0801ad30 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ad30:	b580      	push	{r7, lr}
 801ad32:	b086      	sub	sp, #24
 801ad34:	af00      	add	r7, sp, #0
 801ad36:	60f8      	str	r0, [r7, #12]
 801ad38:	607a      	str	r2, [r7, #4]
 801ad3a:	603b      	str	r3, [r7, #0]
 801ad3c:	460b      	mov	r3, r1
 801ad3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad40:	2300      	movs	r3, #0
 801ad42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad44:	2300      	movs	r3, #0
 801ad46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ad48:	68fb      	ldr	r3, [r7, #12]
 801ad4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ad4e:	7af9      	ldrb	r1, [r7, #11]
 801ad50:	683b      	ldr	r3, [r7, #0]
 801ad52:	687a      	ldr	r2, [r7, #4]
 801ad54:	f7e9 f93e 	bl	8003fd4 <HAL_PCD_EP_Transmit>
 801ad58:	4603      	mov	r3, r0
 801ad5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad5c:	7dfb      	ldrb	r3, [r7, #23]
 801ad5e:	4618      	mov	r0, r3
 801ad60:	f000 f854 	bl	801ae0c <USBD_Get_USB_Status>
 801ad64:	4603      	mov	r3, r0
 801ad66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ad68:	7dbb      	ldrb	r3, [r7, #22]
}
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	3718      	adds	r7, #24
 801ad6e:	46bd      	mov	sp, r7
 801ad70:	bd80      	pop	{r7, pc}

0801ad72 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ad72:	b580      	push	{r7, lr}
 801ad74:	b086      	sub	sp, #24
 801ad76:	af00      	add	r7, sp, #0
 801ad78:	60f8      	str	r0, [r7, #12]
 801ad7a:	607a      	str	r2, [r7, #4]
 801ad7c:	603b      	str	r3, [r7, #0]
 801ad7e:	460b      	mov	r3, r1
 801ad80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad82:	2300      	movs	r3, #0
 801ad84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad86:	2300      	movs	r3, #0
 801ad88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ad8a:	68fb      	ldr	r3, [r7, #12]
 801ad8c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ad90:	7af9      	ldrb	r1, [r7, #11]
 801ad92:	683b      	ldr	r3, [r7, #0]
 801ad94:	687a      	ldr	r2, [r7, #4]
 801ad96:	f7e9 f8ca 	bl	8003f2e <HAL_PCD_EP_Receive>
 801ad9a:	4603      	mov	r3, r0
 801ad9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad9e:	7dfb      	ldrb	r3, [r7, #23]
 801ada0:	4618      	mov	r0, r3
 801ada2:	f000 f833 	bl	801ae0c <USBD_Get_USB_Status>
 801ada6:	4603      	mov	r3, r0
 801ada8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801adaa:	7dbb      	ldrb	r3, [r7, #22]
}
 801adac:	4618      	mov	r0, r3
 801adae:	3718      	adds	r7, #24
 801adb0:	46bd      	mov	sp, r7
 801adb2:	bd80      	pop	{r7, pc}

0801adb4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801adb4:	b580      	push	{r7, lr}
 801adb6:	b082      	sub	sp, #8
 801adb8:	af00      	add	r7, sp, #0
 801adba:	6078      	str	r0, [r7, #4]
 801adbc:	460b      	mov	r3, r1
 801adbe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801adc6:	78fa      	ldrb	r2, [r7, #3]
 801adc8:	4611      	mov	r1, r2
 801adca:	4618      	mov	r0, r3
 801adcc:	f7e9 f8ea 	bl	8003fa4 <HAL_PCD_EP_GetRxCount>
 801add0:	4603      	mov	r3, r0
}
 801add2:	4618      	mov	r0, r3
 801add4:	3708      	adds	r7, #8
 801add6:	46bd      	mov	sp, r7
 801add8:	bd80      	pop	{r7, pc}
	...

0801addc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801addc:	b480      	push	{r7}
 801adde:	b083      	sub	sp, #12
 801ade0:	af00      	add	r7, sp, #0
 801ade2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801ade4:	4b03      	ldr	r3, [pc, #12]	; (801adf4 <USBD_static_malloc+0x18>)
}
 801ade6:	4618      	mov	r0, r3
 801ade8:	370c      	adds	r7, #12
 801adea:	46bd      	mov	sp, r7
 801adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adf0:	4770      	bx	lr
 801adf2:	bf00      	nop
 801adf4:	2000a8f4 	.word	0x2000a8f4

0801adf8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801adf8:	b480      	push	{r7}
 801adfa:	b083      	sub	sp, #12
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	6078      	str	r0, [r7, #4]

}
 801ae00:	bf00      	nop
 801ae02:	370c      	adds	r7, #12
 801ae04:	46bd      	mov	sp, r7
 801ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae0a:	4770      	bx	lr

0801ae0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ae0c:	b480      	push	{r7}
 801ae0e:	b085      	sub	sp, #20
 801ae10:	af00      	add	r7, sp, #0
 801ae12:	4603      	mov	r3, r0
 801ae14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ae16:	2300      	movs	r3, #0
 801ae18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ae1a:	79fb      	ldrb	r3, [r7, #7]
 801ae1c:	2b03      	cmp	r3, #3
 801ae1e:	d817      	bhi.n	801ae50 <USBD_Get_USB_Status+0x44>
 801ae20:	a201      	add	r2, pc, #4	; (adr r2, 801ae28 <USBD_Get_USB_Status+0x1c>)
 801ae22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae26:	bf00      	nop
 801ae28:	0801ae39 	.word	0x0801ae39
 801ae2c:	0801ae3f 	.word	0x0801ae3f
 801ae30:	0801ae45 	.word	0x0801ae45
 801ae34:	0801ae4b 	.word	0x0801ae4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ae38:	2300      	movs	r3, #0
 801ae3a:	73fb      	strb	r3, [r7, #15]
    break;
 801ae3c:	e00b      	b.n	801ae56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ae3e:	2303      	movs	r3, #3
 801ae40:	73fb      	strb	r3, [r7, #15]
    break;
 801ae42:	e008      	b.n	801ae56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ae44:	2301      	movs	r3, #1
 801ae46:	73fb      	strb	r3, [r7, #15]
    break;
 801ae48:	e005      	b.n	801ae56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ae4a:	2303      	movs	r3, #3
 801ae4c:	73fb      	strb	r3, [r7, #15]
    break;
 801ae4e:	e002      	b.n	801ae56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ae50:	2303      	movs	r3, #3
 801ae52:	73fb      	strb	r3, [r7, #15]
    break;
 801ae54:	bf00      	nop
  }
  return usb_status;
 801ae56:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae58:	4618      	mov	r0, r3
 801ae5a:	3714      	adds	r7, #20
 801ae5c:	46bd      	mov	sp, r7
 801ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae62:	4770      	bx	lr

0801ae64 <rand>:
 801ae64:	4b16      	ldr	r3, [pc, #88]	; (801aec0 <rand+0x5c>)
 801ae66:	b510      	push	{r4, lr}
 801ae68:	681c      	ldr	r4, [r3, #0]
 801ae6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801ae6c:	b9b3      	cbnz	r3, 801ae9c <rand+0x38>
 801ae6e:	2018      	movs	r0, #24
 801ae70:	f000 fa4c 	bl	801b30c <malloc>
 801ae74:	4602      	mov	r2, r0
 801ae76:	6320      	str	r0, [r4, #48]	; 0x30
 801ae78:	b920      	cbnz	r0, 801ae84 <rand+0x20>
 801ae7a:	4b12      	ldr	r3, [pc, #72]	; (801aec4 <rand+0x60>)
 801ae7c:	4812      	ldr	r0, [pc, #72]	; (801aec8 <rand+0x64>)
 801ae7e:	2152      	movs	r1, #82	; 0x52
 801ae80:	f000 f9da 	bl	801b238 <__assert_func>
 801ae84:	4911      	ldr	r1, [pc, #68]	; (801aecc <rand+0x68>)
 801ae86:	4b12      	ldr	r3, [pc, #72]	; (801aed0 <rand+0x6c>)
 801ae88:	e9c0 1300 	strd	r1, r3, [r0]
 801ae8c:	4b11      	ldr	r3, [pc, #68]	; (801aed4 <rand+0x70>)
 801ae8e:	6083      	str	r3, [r0, #8]
 801ae90:	230b      	movs	r3, #11
 801ae92:	8183      	strh	r3, [r0, #12]
 801ae94:	2100      	movs	r1, #0
 801ae96:	2001      	movs	r0, #1
 801ae98:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ae9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801ae9e:	480e      	ldr	r0, [pc, #56]	; (801aed8 <rand+0x74>)
 801aea0:	690b      	ldr	r3, [r1, #16]
 801aea2:	694c      	ldr	r4, [r1, #20]
 801aea4:	4a0d      	ldr	r2, [pc, #52]	; (801aedc <rand+0x78>)
 801aea6:	4358      	muls	r0, r3
 801aea8:	fb02 0004 	mla	r0, r2, r4, r0
 801aeac:	fba3 3202 	umull	r3, r2, r3, r2
 801aeb0:	3301      	adds	r3, #1
 801aeb2:	eb40 0002 	adc.w	r0, r0, r2
 801aeb6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801aeba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801aebe:	bd10      	pop	{r4, pc}
 801aec0:	20000244 	.word	0x20000244
 801aec4:	0801eb24 	.word	0x0801eb24
 801aec8:	0801eb3b 	.word	0x0801eb3b
 801aecc:	abcd330e 	.word	0xabcd330e
 801aed0:	e66d1234 	.word	0xe66d1234
 801aed4:	0005deec 	.word	0x0005deec
 801aed8:	5851f42d 	.word	0x5851f42d
 801aedc:	4c957f2d 	.word	0x4c957f2d

0801aee0 <std>:
 801aee0:	2300      	movs	r3, #0
 801aee2:	b510      	push	{r4, lr}
 801aee4:	4604      	mov	r4, r0
 801aee6:	e9c0 3300 	strd	r3, r3, [r0]
 801aeea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801aeee:	6083      	str	r3, [r0, #8]
 801aef0:	8181      	strh	r1, [r0, #12]
 801aef2:	6643      	str	r3, [r0, #100]	; 0x64
 801aef4:	81c2      	strh	r2, [r0, #14]
 801aef6:	6183      	str	r3, [r0, #24]
 801aef8:	4619      	mov	r1, r3
 801aefa:	2208      	movs	r2, #8
 801aefc:	305c      	adds	r0, #92	; 0x5c
 801aefe:	f000 f916 	bl	801b12e <memset>
 801af02:	4b0d      	ldr	r3, [pc, #52]	; (801af38 <std+0x58>)
 801af04:	6263      	str	r3, [r4, #36]	; 0x24
 801af06:	4b0d      	ldr	r3, [pc, #52]	; (801af3c <std+0x5c>)
 801af08:	62a3      	str	r3, [r4, #40]	; 0x28
 801af0a:	4b0d      	ldr	r3, [pc, #52]	; (801af40 <std+0x60>)
 801af0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801af0e:	4b0d      	ldr	r3, [pc, #52]	; (801af44 <std+0x64>)
 801af10:	6323      	str	r3, [r4, #48]	; 0x30
 801af12:	4b0d      	ldr	r3, [pc, #52]	; (801af48 <std+0x68>)
 801af14:	6224      	str	r4, [r4, #32]
 801af16:	429c      	cmp	r4, r3
 801af18:	d006      	beq.n	801af28 <std+0x48>
 801af1a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801af1e:	4294      	cmp	r4, r2
 801af20:	d002      	beq.n	801af28 <std+0x48>
 801af22:	33d0      	adds	r3, #208	; 0xd0
 801af24:	429c      	cmp	r4, r3
 801af26:	d105      	bne.n	801af34 <std+0x54>
 801af28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801af2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af30:	f000 b970 	b.w	801b214 <__retarget_lock_init_recursive>
 801af34:	bd10      	pop	{r4, pc}
 801af36:	bf00      	nop
 801af38:	0801b089 	.word	0x0801b089
 801af3c:	0801b0ab 	.word	0x0801b0ab
 801af40:	0801b0e3 	.word	0x0801b0e3
 801af44:	0801b107 	.word	0x0801b107
 801af48:	2000ab14 	.word	0x2000ab14

0801af4c <stdio_exit_handler>:
 801af4c:	4a02      	ldr	r2, [pc, #8]	; (801af58 <stdio_exit_handler+0xc>)
 801af4e:	4903      	ldr	r1, [pc, #12]	; (801af5c <stdio_exit_handler+0x10>)
 801af50:	4803      	ldr	r0, [pc, #12]	; (801af60 <stdio_exit_handler+0x14>)
 801af52:	f000 b869 	b.w	801b028 <_fwalk_sglue>
 801af56:	bf00      	nop
 801af58:	200001ec 	.word	0x200001ec
 801af5c:	0801bb29 	.word	0x0801bb29
 801af60:	200001f8 	.word	0x200001f8

0801af64 <cleanup_stdio>:
 801af64:	6841      	ldr	r1, [r0, #4]
 801af66:	4b0c      	ldr	r3, [pc, #48]	; (801af98 <cleanup_stdio+0x34>)
 801af68:	4299      	cmp	r1, r3
 801af6a:	b510      	push	{r4, lr}
 801af6c:	4604      	mov	r4, r0
 801af6e:	d001      	beq.n	801af74 <cleanup_stdio+0x10>
 801af70:	f000 fdda 	bl	801bb28 <_fflush_r>
 801af74:	68a1      	ldr	r1, [r4, #8]
 801af76:	4b09      	ldr	r3, [pc, #36]	; (801af9c <cleanup_stdio+0x38>)
 801af78:	4299      	cmp	r1, r3
 801af7a:	d002      	beq.n	801af82 <cleanup_stdio+0x1e>
 801af7c:	4620      	mov	r0, r4
 801af7e:	f000 fdd3 	bl	801bb28 <_fflush_r>
 801af82:	68e1      	ldr	r1, [r4, #12]
 801af84:	4b06      	ldr	r3, [pc, #24]	; (801afa0 <cleanup_stdio+0x3c>)
 801af86:	4299      	cmp	r1, r3
 801af88:	d004      	beq.n	801af94 <cleanup_stdio+0x30>
 801af8a:	4620      	mov	r0, r4
 801af8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af90:	f000 bdca 	b.w	801bb28 <_fflush_r>
 801af94:	bd10      	pop	{r4, pc}
 801af96:	bf00      	nop
 801af98:	2000ab14 	.word	0x2000ab14
 801af9c:	2000ab7c 	.word	0x2000ab7c
 801afa0:	2000abe4 	.word	0x2000abe4

0801afa4 <global_stdio_init.part.0>:
 801afa4:	b510      	push	{r4, lr}
 801afa6:	4b0b      	ldr	r3, [pc, #44]	; (801afd4 <global_stdio_init.part.0+0x30>)
 801afa8:	4c0b      	ldr	r4, [pc, #44]	; (801afd8 <global_stdio_init.part.0+0x34>)
 801afaa:	4a0c      	ldr	r2, [pc, #48]	; (801afdc <global_stdio_init.part.0+0x38>)
 801afac:	601a      	str	r2, [r3, #0]
 801afae:	4620      	mov	r0, r4
 801afb0:	2200      	movs	r2, #0
 801afb2:	2104      	movs	r1, #4
 801afb4:	f7ff ff94 	bl	801aee0 <std>
 801afb8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801afbc:	2201      	movs	r2, #1
 801afbe:	2109      	movs	r1, #9
 801afc0:	f7ff ff8e 	bl	801aee0 <std>
 801afc4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801afc8:	2202      	movs	r2, #2
 801afca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801afce:	2112      	movs	r1, #18
 801afd0:	f7ff bf86 	b.w	801aee0 <std>
 801afd4:	2000ac4c 	.word	0x2000ac4c
 801afd8:	2000ab14 	.word	0x2000ab14
 801afdc:	0801af4d 	.word	0x0801af4d

0801afe0 <__sfp_lock_acquire>:
 801afe0:	4801      	ldr	r0, [pc, #4]	; (801afe8 <__sfp_lock_acquire+0x8>)
 801afe2:	f000 b918 	b.w	801b216 <__retarget_lock_acquire_recursive>
 801afe6:	bf00      	nop
 801afe8:	2000ac55 	.word	0x2000ac55

0801afec <__sfp_lock_release>:
 801afec:	4801      	ldr	r0, [pc, #4]	; (801aff4 <__sfp_lock_release+0x8>)
 801afee:	f000 b913 	b.w	801b218 <__retarget_lock_release_recursive>
 801aff2:	bf00      	nop
 801aff4:	2000ac55 	.word	0x2000ac55

0801aff8 <__sinit>:
 801aff8:	b510      	push	{r4, lr}
 801affa:	4604      	mov	r4, r0
 801affc:	f7ff fff0 	bl	801afe0 <__sfp_lock_acquire>
 801b000:	6a23      	ldr	r3, [r4, #32]
 801b002:	b11b      	cbz	r3, 801b00c <__sinit+0x14>
 801b004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b008:	f7ff bff0 	b.w	801afec <__sfp_lock_release>
 801b00c:	4b04      	ldr	r3, [pc, #16]	; (801b020 <__sinit+0x28>)
 801b00e:	6223      	str	r3, [r4, #32]
 801b010:	4b04      	ldr	r3, [pc, #16]	; (801b024 <__sinit+0x2c>)
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	2b00      	cmp	r3, #0
 801b016:	d1f5      	bne.n	801b004 <__sinit+0xc>
 801b018:	f7ff ffc4 	bl	801afa4 <global_stdio_init.part.0>
 801b01c:	e7f2      	b.n	801b004 <__sinit+0xc>
 801b01e:	bf00      	nop
 801b020:	0801af65 	.word	0x0801af65
 801b024:	2000ac4c 	.word	0x2000ac4c

0801b028 <_fwalk_sglue>:
 801b028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b02c:	4607      	mov	r7, r0
 801b02e:	4688      	mov	r8, r1
 801b030:	4614      	mov	r4, r2
 801b032:	2600      	movs	r6, #0
 801b034:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b038:	f1b9 0901 	subs.w	r9, r9, #1
 801b03c:	d505      	bpl.n	801b04a <_fwalk_sglue+0x22>
 801b03e:	6824      	ldr	r4, [r4, #0]
 801b040:	2c00      	cmp	r4, #0
 801b042:	d1f7      	bne.n	801b034 <_fwalk_sglue+0xc>
 801b044:	4630      	mov	r0, r6
 801b046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b04a:	89ab      	ldrh	r3, [r5, #12]
 801b04c:	2b01      	cmp	r3, #1
 801b04e:	d907      	bls.n	801b060 <_fwalk_sglue+0x38>
 801b050:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b054:	3301      	adds	r3, #1
 801b056:	d003      	beq.n	801b060 <_fwalk_sglue+0x38>
 801b058:	4629      	mov	r1, r5
 801b05a:	4638      	mov	r0, r7
 801b05c:	47c0      	blx	r8
 801b05e:	4306      	orrs	r6, r0
 801b060:	3568      	adds	r5, #104	; 0x68
 801b062:	e7e9      	b.n	801b038 <_fwalk_sglue+0x10>

0801b064 <iprintf>:
 801b064:	b40f      	push	{r0, r1, r2, r3}
 801b066:	b507      	push	{r0, r1, r2, lr}
 801b068:	4906      	ldr	r1, [pc, #24]	; (801b084 <iprintf+0x20>)
 801b06a:	ab04      	add	r3, sp, #16
 801b06c:	6808      	ldr	r0, [r1, #0]
 801b06e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b072:	6881      	ldr	r1, [r0, #8]
 801b074:	9301      	str	r3, [sp, #4]
 801b076:	f000 fa27 	bl	801b4c8 <_vfiprintf_r>
 801b07a:	b003      	add	sp, #12
 801b07c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b080:	b004      	add	sp, #16
 801b082:	4770      	bx	lr
 801b084:	20000244 	.word	0x20000244

0801b088 <__sread>:
 801b088:	b510      	push	{r4, lr}
 801b08a:	460c      	mov	r4, r1
 801b08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b090:	f000 f878 	bl	801b184 <_read_r>
 801b094:	2800      	cmp	r0, #0
 801b096:	bfab      	itete	ge
 801b098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b09a:	89a3      	ldrhlt	r3, [r4, #12]
 801b09c:	181b      	addge	r3, r3, r0
 801b09e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b0a2:	bfac      	ite	ge
 801b0a4:	6563      	strge	r3, [r4, #84]	; 0x54
 801b0a6:	81a3      	strhlt	r3, [r4, #12]
 801b0a8:	bd10      	pop	{r4, pc}

0801b0aa <__swrite>:
 801b0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0ae:	461f      	mov	r7, r3
 801b0b0:	898b      	ldrh	r3, [r1, #12]
 801b0b2:	05db      	lsls	r3, r3, #23
 801b0b4:	4605      	mov	r5, r0
 801b0b6:	460c      	mov	r4, r1
 801b0b8:	4616      	mov	r6, r2
 801b0ba:	d505      	bpl.n	801b0c8 <__swrite+0x1e>
 801b0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0c0:	2302      	movs	r3, #2
 801b0c2:	2200      	movs	r2, #0
 801b0c4:	f000 f84c 	bl	801b160 <_lseek_r>
 801b0c8:	89a3      	ldrh	r3, [r4, #12]
 801b0ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b0ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b0d2:	81a3      	strh	r3, [r4, #12]
 801b0d4:	4632      	mov	r2, r6
 801b0d6:	463b      	mov	r3, r7
 801b0d8:	4628      	mov	r0, r5
 801b0da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b0de:	f000 b863 	b.w	801b1a8 <_write_r>

0801b0e2 <__sseek>:
 801b0e2:	b510      	push	{r4, lr}
 801b0e4:	460c      	mov	r4, r1
 801b0e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b0ea:	f000 f839 	bl	801b160 <_lseek_r>
 801b0ee:	1c43      	adds	r3, r0, #1
 801b0f0:	89a3      	ldrh	r3, [r4, #12]
 801b0f2:	bf15      	itete	ne
 801b0f4:	6560      	strne	r0, [r4, #84]	; 0x54
 801b0f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b0fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b0fe:	81a3      	strheq	r3, [r4, #12]
 801b100:	bf18      	it	ne
 801b102:	81a3      	strhne	r3, [r4, #12]
 801b104:	bd10      	pop	{r4, pc}

0801b106 <__sclose>:
 801b106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b10a:	f000 b819 	b.w	801b140 <_close_r>

0801b10e <memcmp>:
 801b10e:	b510      	push	{r4, lr}
 801b110:	3901      	subs	r1, #1
 801b112:	4402      	add	r2, r0
 801b114:	4290      	cmp	r0, r2
 801b116:	d101      	bne.n	801b11c <memcmp+0xe>
 801b118:	2000      	movs	r0, #0
 801b11a:	e005      	b.n	801b128 <memcmp+0x1a>
 801b11c:	7803      	ldrb	r3, [r0, #0]
 801b11e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b122:	42a3      	cmp	r3, r4
 801b124:	d001      	beq.n	801b12a <memcmp+0x1c>
 801b126:	1b18      	subs	r0, r3, r4
 801b128:	bd10      	pop	{r4, pc}
 801b12a:	3001      	adds	r0, #1
 801b12c:	e7f2      	b.n	801b114 <memcmp+0x6>

0801b12e <memset>:
 801b12e:	4402      	add	r2, r0
 801b130:	4603      	mov	r3, r0
 801b132:	4293      	cmp	r3, r2
 801b134:	d100      	bne.n	801b138 <memset+0xa>
 801b136:	4770      	bx	lr
 801b138:	f803 1b01 	strb.w	r1, [r3], #1
 801b13c:	e7f9      	b.n	801b132 <memset+0x4>
	...

0801b140 <_close_r>:
 801b140:	b538      	push	{r3, r4, r5, lr}
 801b142:	4d06      	ldr	r5, [pc, #24]	; (801b15c <_close_r+0x1c>)
 801b144:	2300      	movs	r3, #0
 801b146:	4604      	mov	r4, r0
 801b148:	4608      	mov	r0, r1
 801b14a:	602b      	str	r3, [r5, #0]
 801b14c:	f7e5 fde3 	bl	8000d16 <_close>
 801b150:	1c43      	adds	r3, r0, #1
 801b152:	d102      	bne.n	801b15a <_close_r+0x1a>
 801b154:	682b      	ldr	r3, [r5, #0]
 801b156:	b103      	cbz	r3, 801b15a <_close_r+0x1a>
 801b158:	6023      	str	r3, [r4, #0]
 801b15a:	bd38      	pop	{r3, r4, r5, pc}
 801b15c:	2000ac50 	.word	0x2000ac50

0801b160 <_lseek_r>:
 801b160:	b538      	push	{r3, r4, r5, lr}
 801b162:	4d07      	ldr	r5, [pc, #28]	; (801b180 <_lseek_r+0x20>)
 801b164:	4604      	mov	r4, r0
 801b166:	4608      	mov	r0, r1
 801b168:	4611      	mov	r1, r2
 801b16a:	2200      	movs	r2, #0
 801b16c:	602a      	str	r2, [r5, #0]
 801b16e:	461a      	mov	r2, r3
 801b170:	f7e5 fdf8 	bl	8000d64 <_lseek>
 801b174:	1c43      	adds	r3, r0, #1
 801b176:	d102      	bne.n	801b17e <_lseek_r+0x1e>
 801b178:	682b      	ldr	r3, [r5, #0]
 801b17a:	b103      	cbz	r3, 801b17e <_lseek_r+0x1e>
 801b17c:	6023      	str	r3, [r4, #0]
 801b17e:	bd38      	pop	{r3, r4, r5, pc}
 801b180:	2000ac50 	.word	0x2000ac50

0801b184 <_read_r>:
 801b184:	b538      	push	{r3, r4, r5, lr}
 801b186:	4d07      	ldr	r5, [pc, #28]	; (801b1a4 <_read_r+0x20>)
 801b188:	4604      	mov	r4, r0
 801b18a:	4608      	mov	r0, r1
 801b18c:	4611      	mov	r1, r2
 801b18e:	2200      	movs	r2, #0
 801b190:	602a      	str	r2, [r5, #0]
 801b192:	461a      	mov	r2, r3
 801b194:	f7e5 fd86 	bl	8000ca4 <_read>
 801b198:	1c43      	adds	r3, r0, #1
 801b19a:	d102      	bne.n	801b1a2 <_read_r+0x1e>
 801b19c:	682b      	ldr	r3, [r5, #0]
 801b19e:	b103      	cbz	r3, 801b1a2 <_read_r+0x1e>
 801b1a0:	6023      	str	r3, [r4, #0]
 801b1a2:	bd38      	pop	{r3, r4, r5, pc}
 801b1a4:	2000ac50 	.word	0x2000ac50

0801b1a8 <_write_r>:
 801b1a8:	b538      	push	{r3, r4, r5, lr}
 801b1aa:	4d07      	ldr	r5, [pc, #28]	; (801b1c8 <_write_r+0x20>)
 801b1ac:	4604      	mov	r4, r0
 801b1ae:	4608      	mov	r0, r1
 801b1b0:	4611      	mov	r1, r2
 801b1b2:	2200      	movs	r2, #0
 801b1b4:	602a      	str	r2, [r5, #0]
 801b1b6:	461a      	mov	r2, r3
 801b1b8:	f7e5 fd91 	bl	8000cde <_write>
 801b1bc:	1c43      	adds	r3, r0, #1
 801b1be:	d102      	bne.n	801b1c6 <_write_r+0x1e>
 801b1c0:	682b      	ldr	r3, [r5, #0]
 801b1c2:	b103      	cbz	r3, 801b1c6 <_write_r+0x1e>
 801b1c4:	6023      	str	r3, [r4, #0]
 801b1c6:	bd38      	pop	{r3, r4, r5, pc}
 801b1c8:	2000ac50 	.word	0x2000ac50

0801b1cc <__libc_init_array>:
 801b1cc:	b570      	push	{r4, r5, r6, lr}
 801b1ce:	4d0d      	ldr	r5, [pc, #52]	; (801b204 <__libc_init_array+0x38>)
 801b1d0:	4c0d      	ldr	r4, [pc, #52]	; (801b208 <__libc_init_array+0x3c>)
 801b1d2:	1b64      	subs	r4, r4, r5
 801b1d4:	10a4      	asrs	r4, r4, #2
 801b1d6:	2600      	movs	r6, #0
 801b1d8:	42a6      	cmp	r6, r4
 801b1da:	d109      	bne.n	801b1f0 <__libc_init_array+0x24>
 801b1dc:	4d0b      	ldr	r5, [pc, #44]	; (801b20c <__libc_init_array+0x40>)
 801b1de:	4c0c      	ldr	r4, [pc, #48]	; (801b210 <__libc_init_array+0x44>)
 801b1e0:	f000 fe52 	bl	801be88 <_init>
 801b1e4:	1b64      	subs	r4, r4, r5
 801b1e6:	10a4      	asrs	r4, r4, #2
 801b1e8:	2600      	movs	r6, #0
 801b1ea:	42a6      	cmp	r6, r4
 801b1ec:	d105      	bne.n	801b1fa <__libc_init_array+0x2e>
 801b1ee:	bd70      	pop	{r4, r5, r6, pc}
 801b1f0:	f855 3b04 	ldr.w	r3, [r5], #4
 801b1f4:	4798      	blx	r3
 801b1f6:	3601      	adds	r6, #1
 801b1f8:	e7ee      	b.n	801b1d8 <__libc_init_array+0xc>
 801b1fa:	f855 3b04 	ldr.w	r3, [r5], #4
 801b1fe:	4798      	blx	r3
 801b200:	3601      	adds	r6, #1
 801b202:	e7f2      	b.n	801b1ea <__libc_init_array+0x1e>
 801b204:	0801ec0c 	.word	0x0801ec0c
 801b208:	0801ec0c 	.word	0x0801ec0c
 801b20c:	0801ec0c 	.word	0x0801ec0c
 801b210:	0801ec10 	.word	0x0801ec10

0801b214 <__retarget_lock_init_recursive>:
 801b214:	4770      	bx	lr

0801b216 <__retarget_lock_acquire_recursive>:
 801b216:	4770      	bx	lr

0801b218 <__retarget_lock_release_recursive>:
 801b218:	4770      	bx	lr

0801b21a <memcpy>:
 801b21a:	440a      	add	r2, r1
 801b21c:	4291      	cmp	r1, r2
 801b21e:	f100 33ff 	add.w	r3, r0, #4294967295
 801b222:	d100      	bne.n	801b226 <memcpy+0xc>
 801b224:	4770      	bx	lr
 801b226:	b510      	push	{r4, lr}
 801b228:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b22c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b230:	4291      	cmp	r1, r2
 801b232:	d1f9      	bne.n	801b228 <memcpy+0xe>
 801b234:	bd10      	pop	{r4, pc}
	...

0801b238 <__assert_func>:
 801b238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b23a:	4614      	mov	r4, r2
 801b23c:	461a      	mov	r2, r3
 801b23e:	4b09      	ldr	r3, [pc, #36]	; (801b264 <__assert_func+0x2c>)
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	4605      	mov	r5, r0
 801b244:	68d8      	ldr	r0, [r3, #12]
 801b246:	b14c      	cbz	r4, 801b25c <__assert_func+0x24>
 801b248:	4b07      	ldr	r3, [pc, #28]	; (801b268 <__assert_func+0x30>)
 801b24a:	9100      	str	r1, [sp, #0]
 801b24c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b250:	4906      	ldr	r1, [pc, #24]	; (801b26c <__assert_func+0x34>)
 801b252:	462b      	mov	r3, r5
 801b254:	f000 fc90 	bl	801bb78 <fiprintf>
 801b258:	f000 fd46 	bl	801bce8 <abort>
 801b25c:	4b04      	ldr	r3, [pc, #16]	; (801b270 <__assert_func+0x38>)
 801b25e:	461c      	mov	r4, r3
 801b260:	e7f3      	b.n	801b24a <__assert_func+0x12>
 801b262:	bf00      	nop
 801b264:	20000244 	.word	0x20000244
 801b268:	0801eb93 	.word	0x0801eb93
 801b26c:	0801eba0 	.word	0x0801eba0
 801b270:	0801ebce 	.word	0x0801ebce

0801b274 <_free_r>:
 801b274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b276:	2900      	cmp	r1, #0
 801b278:	d044      	beq.n	801b304 <_free_r+0x90>
 801b27a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b27e:	9001      	str	r0, [sp, #4]
 801b280:	2b00      	cmp	r3, #0
 801b282:	f1a1 0404 	sub.w	r4, r1, #4
 801b286:	bfb8      	it	lt
 801b288:	18e4      	addlt	r4, r4, r3
 801b28a:	f000 f8e7 	bl	801b45c <__malloc_lock>
 801b28e:	4a1e      	ldr	r2, [pc, #120]	; (801b308 <_free_r+0x94>)
 801b290:	9801      	ldr	r0, [sp, #4]
 801b292:	6813      	ldr	r3, [r2, #0]
 801b294:	b933      	cbnz	r3, 801b2a4 <_free_r+0x30>
 801b296:	6063      	str	r3, [r4, #4]
 801b298:	6014      	str	r4, [r2, #0]
 801b29a:	b003      	add	sp, #12
 801b29c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b2a0:	f000 b8e2 	b.w	801b468 <__malloc_unlock>
 801b2a4:	42a3      	cmp	r3, r4
 801b2a6:	d908      	bls.n	801b2ba <_free_r+0x46>
 801b2a8:	6825      	ldr	r5, [r4, #0]
 801b2aa:	1961      	adds	r1, r4, r5
 801b2ac:	428b      	cmp	r3, r1
 801b2ae:	bf01      	itttt	eq
 801b2b0:	6819      	ldreq	r1, [r3, #0]
 801b2b2:	685b      	ldreq	r3, [r3, #4]
 801b2b4:	1949      	addeq	r1, r1, r5
 801b2b6:	6021      	streq	r1, [r4, #0]
 801b2b8:	e7ed      	b.n	801b296 <_free_r+0x22>
 801b2ba:	461a      	mov	r2, r3
 801b2bc:	685b      	ldr	r3, [r3, #4]
 801b2be:	b10b      	cbz	r3, 801b2c4 <_free_r+0x50>
 801b2c0:	42a3      	cmp	r3, r4
 801b2c2:	d9fa      	bls.n	801b2ba <_free_r+0x46>
 801b2c4:	6811      	ldr	r1, [r2, #0]
 801b2c6:	1855      	adds	r5, r2, r1
 801b2c8:	42a5      	cmp	r5, r4
 801b2ca:	d10b      	bne.n	801b2e4 <_free_r+0x70>
 801b2cc:	6824      	ldr	r4, [r4, #0]
 801b2ce:	4421      	add	r1, r4
 801b2d0:	1854      	adds	r4, r2, r1
 801b2d2:	42a3      	cmp	r3, r4
 801b2d4:	6011      	str	r1, [r2, #0]
 801b2d6:	d1e0      	bne.n	801b29a <_free_r+0x26>
 801b2d8:	681c      	ldr	r4, [r3, #0]
 801b2da:	685b      	ldr	r3, [r3, #4]
 801b2dc:	6053      	str	r3, [r2, #4]
 801b2de:	440c      	add	r4, r1
 801b2e0:	6014      	str	r4, [r2, #0]
 801b2e2:	e7da      	b.n	801b29a <_free_r+0x26>
 801b2e4:	d902      	bls.n	801b2ec <_free_r+0x78>
 801b2e6:	230c      	movs	r3, #12
 801b2e8:	6003      	str	r3, [r0, #0]
 801b2ea:	e7d6      	b.n	801b29a <_free_r+0x26>
 801b2ec:	6825      	ldr	r5, [r4, #0]
 801b2ee:	1961      	adds	r1, r4, r5
 801b2f0:	428b      	cmp	r3, r1
 801b2f2:	bf04      	itt	eq
 801b2f4:	6819      	ldreq	r1, [r3, #0]
 801b2f6:	685b      	ldreq	r3, [r3, #4]
 801b2f8:	6063      	str	r3, [r4, #4]
 801b2fa:	bf04      	itt	eq
 801b2fc:	1949      	addeq	r1, r1, r5
 801b2fe:	6021      	streq	r1, [r4, #0]
 801b300:	6054      	str	r4, [r2, #4]
 801b302:	e7ca      	b.n	801b29a <_free_r+0x26>
 801b304:	b003      	add	sp, #12
 801b306:	bd30      	pop	{r4, r5, pc}
 801b308:	2000ac58 	.word	0x2000ac58

0801b30c <malloc>:
 801b30c:	4b02      	ldr	r3, [pc, #8]	; (801b318 <malloc+0xc>)
 801b30e:	4601      	mov	r1, r0
 801b310:	6818      	ldr	r0, [r3, #0]
 801b312:	f000 b823 	b.w	801b35c <_malloc_r>
 801b316:	bf00      	nop
 801b318:	20000244 	.word	0x20000244

0801b31c <sbrk_aligned>:
 801b31c:	b570      	push	{r4, r5, r6, lr}
 801b31e:	4e0e      	ldr	r6, [pc, #56]	; (801b358 <sbrk_aligned+0x3c>)
 801b320:	460c      	mov	r4, r1
 801b322:	6831      	ldr	r1, [r6, #0]
 801b324:	4605      	mov	r5, r0
 801b326:	b911      	cbnz	r1, 801b32e <sbrk_aligned+0x12>
 801b328:	f000 fcce 	bl	801bcc8 <_sbrk_r>
 801b32c:	6030      	str	r0, [r6, #0]
 801b32e:	4621      	mov	r1, r4
 801b330:	4628      	mov	r0, r5
 801b332:	f000 fcc9 	bl	801bcc8 <_sbrk_r>
 801b336:	1c43      	adds	r3, r0, #1
 801b338:	d00a      	beq.n	801b350 <sbrk_aligned+0x34>
 801b33a:	1cc4      	adds	r4, r0, #3
 801b33c:	f024 0403 	bic.w	r4, r4, #3
 801b340:	42a0      	cmp	r0, r4
 801b342:	d007      	beq.n	801b354 <sbrk_aligned+0x38>
 801b344:	1a21      	subs	r1, r4, r0
 801b346:	4628      	mov	r0, r5
 801b348:	f000 fcbe 	bl	801bcc8 <_sbrk_r>
 801b34c:	3001      	adds	r0, #1
 801b34e:	d101      	bne.n	801b354 <sbrk_aligned+0x38>
 801b350:	f04f 34ff 	mov.w	r4, #4294967295
 801b354:	4620      	mov	r0, r4
 801b356:	bd70      	pop	{r4, r5, r6, pc}
 801b358:	2000ac5c 	.word	0x2000ac5c

0801b35c <_malloc_r>:
 801b35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b360:	1ccd      	adds	r5, r1, #3
 801b362:	f025 0503 	bic.w	r5, r5, #3
 801b366:	3508      	adds	r5, #8
 801b368:	2d0c      	cmp	r5, #12
 801b36a:	bf38      	it	cc
 801b36c:	250c      	movcc	r5, #12
 801b36e:	2d00      	cmp	r5, #0
 801b370:	4607      	mov	r7, r0
 801b372:	db01      	blt.n	801b378 <_malloc_r+0x1c>
 801b374:	42a9      	cmp	r1, r5
 801b376:	d905      	bls.n	801b384 <_malloc_r+0x28>
 801b378:	230c      	movs	r3, #12
 801b37a:	603b      	str	r3, [r7, #0]
 801b37c:	2600      	movs	r6, #0
 801b37e:	4630      	mov	r0, r6
 801b380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b384:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801b458 <_malloc_r+0xfc>
 801b388:	f000 f868 	bl	801b45c <__malloc_lock>
 801b38c:	f8d8 3000 	ldr.w	r3, [r8]
 801b390:	461c      	mov	r4, r3
 801b392:	bb5c      	cbnz	r4, 801b3ec <_malloc_r+0x90>
 801b394:	4629      	mov	r1, r5
 801b396:	4638      	mov	r0, r7
 801b398:	f7ff ffc0 	bl	801b31c <sbrk_aligned>
 801b39c:	1c43      	adds	r3, r0, #1
 801b39e:	4604      	mov	r4, r0
 801b3a0:	d155      	bne.n	801b44e <_malloc_r+0xf2>
 801b3a2:	f8d8 4000 	ldr.w	r4, [r8]
 801b3a6:	4626      	mov	r6, r4
 801b3a8:	2e00      	cmp	r6, #0
 801b3aa:	d145      	bne.n	801b438 <_malloc_r+0xdc>
 801b3ac:	2c00      	cmp	r4, #0
 801b3ae:	d048      	beq.n	801b442 <_malloc_r+0xe6>
 801b3b0:	6823      	ldr	r3, [r4, #0]
 801b3b2:	4631      	mov	r1, r6
 801b3b4:	4638      	mov	r0, r7
 801b3b6:	eb04 0903 	add.w	r9, r4, r3
 801b3ba:	f000 fc85 	bl	801bcc8 <_sbrk_r>
 801b3be:	4581      	cmp	r9, r0
 801b3c0:	d13f      	bne.n	801b442 <_malloc_r+0xe6>
 801b3c2:	6821      	ldr	r1, [r4, #0]
 801b3c4:	1a6d      	subs	r5, r5, r1
 801b3c6:	4629      	mov	r1, r5
 801b3c8:	4638      	mov	r0, r7
 801b3ca:	f7ff ffa7 	bl	801b31c <sbrk_aligned>
 801b3ce:	3001      	adds	r0, #1
 801b3d0:	d037      	beq.n	801b442 <_malloc_r+0xe6>
 801b3d2:	6823      	ldr	r3, [r4, #0]
 801b3d4:	442b      	add	r3, r5
 801b3d6:	6023      	str	r3, [r4, #0]
 801b3d8:	f8d8 3000 	ldr.w	r3, [r8]
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	d038      	beq.n	801b452 <_malloc_r+0xf6>
 801b3e0:	685a      	ldr	r2, [r3, #4]
 801b3e2:	42a2      	cmp	r2, r4
 801b3e4:	d12b      	bne.n	801b43e <_malloc_r+0xe2>
 801b3e6:	2200      	movs	r2, #0
 801b3e8:	605a      	str	r2, [r3, #4]
 801b3ea:	e00f      	b.n	801b40c <_malloc_r+0xb0>
 801b3ec:	6822      	ldr	r2, [r4, #0]
 801b3ee:	1b52      	subs	r2, r2, r5
 801b3f0:	d41f      	bmi.n	801b432 <_malloc_r+0xd6>
 801b3f2:	2a0b      	cmp	r2, #11
 801b3f4:	d917      	bls.n	801b426 <_malloc_r+0xca>
 801b3f6:	1961      	adds	r1, r4, r5
 801b3f8:	42a3      	cmp	r3, r4
 801b3fa:	6025      	str	r5, [r4, #0]
 801b3fc:	bf18      	it	ne
 801b3fe:	6059      	strne	r1, [r3, #4]
 801b400:	6863      	ldr	r3, [r4, #4]
 801b402:	bf08      	it	eq
 801b404:	f8c8 1000 	streq.w	r1, [r8]
 801b408:	5162      	str	r2, [r4, r5]
 801b40a:	604b      	str	r3, [r1, #4]
 801b40c:	4638      	mov	r0, r7
 801b40e:	f104 060b 	add.w	r6, r4, #11
 801b412:	f000 f829 	bl	801b468 <__malloc_unlock>
 801b416:	f026 0607 	bic.w	r6, r6, #7
 801b41a:	1d23      	adds	r3, r4, #4
 801b41c:	1af2      	subs	r2, r6, r3
 801b41e:	d0ae      	beq.n	801b37e <_malloc_r+0x22>
 801b420:	1b9b      	subs	r3, r3, r6
 801b422:	50a3      	str	r3, [r4, r2]
 801b424:	e7ab      	b.n	801b37e <_malloc_r+0x22>
 801b426:	42a3      	cmp	r3, r4
 801b428:	6862      	ldr	r2, [r4, #4]
 801b42a:	d1dd      	bne.n	801b3e8 <_malloc_r+0x8c>
 801b42c:	f8c8 2000 	str.w	r2, [r8]
 801b430:	e7ec      	b.n	801b40c <_malloc_r+0xb0>
 801b432:	4623      	mov	r3, r4
 801b434:	6864      	ldr	r4, [r4, #4]
 801b436:	e7ac      	b.n	801b392 <_malloc_r+0x36>
 801b438:	4634      	mov	r4, r6
 801b43a:	6876      	ldr	r6, [r6, #4]
 801b43c:	e7b4      	b.n	801b3a8 <_malloc_r+0x4c>
 801b43e:	4613      	mov	r3, r2
 801b440:	e7cc      	b.n	801b3dc <_malloc_r+0x80>
 801b442:	230c      	movs	r3, #12
 801b444:	603b      	str	r3, [r7, #0]
 801b446:	4638      	mov	r0, r7
 801b448:	f000 f80e 	bl	801b468 <__malloc_unlock>
 801b44c:	e797      	b.n	801b37e <_malloc_r+0x22>
 801b44e:	6025      	str	r5, [r4, #0]
 801b450:	e7dc      	b.n	801b40c <_malloc_r+0xb0>
 801b452:	605b      	str	r3, [r3, #4]
 801b454:	deff      	udf	#255	; 0xff
 801b456:	bf00      	nop
 801b458:	2000ac58 	.word	0x2000ac58

0801b45c <__malloc_lock>:
 801b45c:	4801      	ldr	r0, [pc, #4]	; (801b464 <__malloc_lock+0x8>)
 801b45e:	f7ff beda 	b.w	801b216 <__retarget_lock_acquire_recursive>
 801b462:	bf00      	nop
 801b464:	2000ac54 	.word	0x2000ac54

0801b468 <__malloc_unlock>:
 801b468:	4801      	ldr	r0, [pc, #4]	; (801b470 <__malloc_unlock+0x8>)
 801b46a:	f7ff bed5 	b.w	801b218 <__retarget_lock_release_recursive>
 801b46e:	bf00      	nop
 801b470:	2000ac54 	.word	0x2000ac54

0801b474 <__sfputc_r>:
 801b474:	6893      	ldr	r3, [r2, #8]
 801b476:	3b01      	subs	r3, #1
 801b478:	2b00      	cmp	r3, #0
 801b47a:	b410      	push	{r4}
 801b47c:	6093      	str	r3, [r2, #8]
 801b47e:	da08      	bge.n	801b492 <__sfputc_r+0x1e>
 801b480:	6994      	ldr	r4, [r2, #24]
 801b482:	42a3      	cmp	r3, r4
 801b484:	db01      	blt.n	801b48a <__sfputc_r+0x16>
 801b486:	290a      	cmp	r1, #10
 801b488:	d103      	bne.n	801b492 <__sfputc_r+0x1e>
 801b48a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b48e:	f000 bb85 	b.w	801bb9c <__swbuf_r>
 801b492:	6813      	ldr	r3, [r2, #0]
 801b494:	1c58      	adds	r0, r3, #1
 801b496:	6010      	str	r0, [r2, #0]
 801b498:	7019      	strb	r1, [r3, #0]
 801b49a:	4608      	mov	r0, r1
 801b49c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b4a0:	4770      	bx	lr

0801b4a2 <__sfputs_r>:
 801b4a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4a4:	4606      	mov	r6, r0
 801b4a6:	460f      	mov	r7, r1
 801b4a8:	4614      	mov	r4, r2
 801b4aa:	18d5      	adds	r5, r2, r3
 801b4ac:	42ac      	cmp	r4, r5
 801b4ae:	d101      	bne.n	801b4b4 <__sfputs_r+0x12>
 801b4b0:	2000      	movs	r0, #0
 801b4b2:	e007      	b.n	801b4c4 <__sfputs_r+0x22>
 801b4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b4b8:	463a      	mov	r2, r7
 801b4ba:	4630      	mov	r0, r6
 801b4bc:	f7ff ffda 	bl	801b474 <__sfputc_r>
 801b4c0:	1c43      	adds	r3, r0, #1
 801b4c2:	d1f3      	bne.n	801b4ac <__sfputs_r+0xa>
 801b4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b4c8 <_vfiprintf_r>:
 801b4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4cc:	460d      	mov	r5, r1
 801b4ce:	b09d      	sub	sp, #116	; 0x74
 801b4d0:	4614      	mov	r4, r2
 801b4d2:	4698      	mov	r8, r3
 801b4d4:	4606      	mov	r6, r0
 801b4d6:	b118      	cbz	r0, 801b4e0 <_vfiprintf_r+0x18>
 801b4d8:	6a03      	ldr	r3, [r0, #32]
 801b4da:	b90b      	cbnz	r3, 801b4e0 <_vfiprintf_r+0x18>
 801b4dc:	f7ff fd8c 	bl	801aff8 <__sinit>
 801b4e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b4e2:	07d9      	lsls	r1, r3, #31
 801b4e4:	d405      	bmi.n	801b4f2 <_vfiprintf_r+0x2a>
 801b4e6:	89ab      	ldrh	r3, [r5, #12]
 801b4e8:	059a      	lsls	r2, r3, #22
 801b4ea:	d402      	bmi.n	801b4f2 <_vfiprintf_r+0x2a>
 801b4ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b4ee:	f7ff fe92 	bl	801b216 <__retarget_lock_acquire_recursive>
 801b4f2:	89ab      	ldrh	r3, [r5, #12]
 801b4f4:	071b      	lsls	r3, r3, #28
 801b4f6:	d501      	bpl.n	801b4fc <_vfiprintf_r+0x34>
 801b4f8:	692b      	ldr	r3, [r5, #16]
 801b4fa:	b99b      	cbnz	r3, 801b524 <_vfiprintf_r+0x5c>
 801b4fc:	4629      	mov	r1, r5
 801b4fe:	4630      	mov	r0, r6
 801b500:	f000 fb8a 	bl	801bc18 <__swsetup_r>
 801b504:	b170      	cbz	r0, 801b524 <_vfiprintf_r+0x5c>
 801b506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b508:	07dc      	lsls	r4, r3, #31
 801b50a:	d504      	bpl.n	801b516 <_vfiprintf_r+0x4e>
 801b50c:	f04f 30ff 	mov.w	r0, #4294967295
 801b510:	b01d      	add	sp, #116	; 0x74
 801b512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b516:	89ab      	ldrh	r3, [r5, #12]
 801b518:	0598      	lsls	r0, r3, #22
 801b51a:	d4f7      	bmi.n	801b50c <_vfiprintf_r+0x44>
 801b51c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b51e:	f7ff fe7b 	bl	801b218 <__retarget_lock_release_recursive>
 801b522:	e7f3      	b.n	801b50c <_vfiprintf_r+0x44>
 801b524:	2300      	movs	r3, #0
 801b526:	9309      	str	r3, [sp, #36]	; 0x24
 801b528:	2320      	movs	r3, #32
 801b52a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b52e:	f8cd 800c 	str.w	r8, [sp, #12]
 801b532:	2330      	movs	r3, #48	; 0x30
 801b534:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b6e8 <_vfiprintf_r+0x220>
 801b538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b53c:	f04f 0901 	mov.w	r9, #1
 801b540:	4623      	mov	r3, r4
 801b542:	469a      	mov	sl, r3
 801b544:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b548:	b10a      	cbz	r2, 801b54e <_vfiprintf_r+0x86>
 801b54a:	2a25      	cmp	r2, #37	; 0x25
 801b54c:	d1f9      	bne.n	801b542 <_vfiprintf_r+0x7a>
 801b54e:	ebba 0b04 	subs.w	fp, sl, r4
 801b552:	d00b      	beq.n	801b56c <_vfiprintf_r+0xa4>
 801b554:	465b      	mov	r3, fp
 801b556:	4622      	mov	r2, r4
 801b558:	4629      	mov	r1, r5
 801b55a:	4630      	mov	r0, r6
 801b55c:	f7ff ffa1 	bl	801b4a2 <__sfputs_r>
 801b560:	3001      	adds	r0, #1
 801b562:	f000 80a9 	beq.w	801b6b8 <_vfiprintf_r+0x1f0>
 801b566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b568:	445a      	add	r2, fp
 801b56a:	9209      	str	r2, [sp, #36]	; 0x24
 801b56c:	f89a 3000 	ldrb.w	r3, [sl]
 801b570:	2b00      	cmp	r3, #0
 801b572:	f000 80a1 	beq.w	801b6b8 <_vfiprintf_r+0x1f0>
 801b576:	2300      	movs	r3, #0
 801b578:	f04f 32ff 	mov.w	r2, #4294967295
 801b57c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b580:	f10a 0a01 	add.w	sl, sl, #1
 801b584:	9304      	str	r3, [sp, #16]
 801b586:	9307      	str	r3, [sp, #28]
 801b588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b58c:	931a      	str	r3, [sp, #104]	; 0x68
 801b58e:	4654      	mov	r4, sl
 801b590:	2205      	movs	r2, #5
 801b592:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b596:	4854      	ldr	r0, [pc, #336]	; (801b6e8 <_vfiprintf_r+0x220>)
 801b598:	f7e4 fe1a 	bl	80001d0 <memchr>
 801b59c:	9a04      	ldr	r2, [sp, #16]
 801b59e:	b9d8      	cbnz	r0, 801b5d8 <_vfiprintf_r+0x110>
 801b5a0:	06d1      	lsls	r1, r2, #27
 801b5a2:	bf44      	itt	mi
 801b5a4:	2320      	movmi	r3, #32
 801b5a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b5aa:	0713      	lsls	r3, r2, #28
 801b5ac:	bf44      	itt	mi
 801b5ae:	232b      	movmi	r3, #43	; 0x2b
 801b5b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b5b4:	f89a 3000 	ldrb.w	r3, [sl]
 801b5b8:	2b2a      	cmp	r3, #42	; 0x2a
 801b5ba:	d015      	beq.n	801b5e8 <_vfiprintf_r+0x120>
 801b5bc:	9a07      	ldr	r2, [sp, #28]
 801b5be:	4654      	mov	r4, sl
 801b5c0:	2000      	movs	r0, #0
 801b5c2:	f04f 0c0a 	mov.w	ip, #10
 801b5c6:	4621      	mov	r1, r4
 801b5c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b5cc:	3b30      	subs	r3, #48	; 0x30
 801b5ce:	2b09      	cmp	r3, #9
 801b5d0:	d94d      	bls.n	801b66e <_vfiprintf_r+0x1a6>
 801b5d2:	b1b0      	cbz	r0, 801b602 <_vfiprintf_r+0x13a>
 801b5d4:	9207      	str	r2, [sp, #28]
 801b5d6:	e014      	b.n	801b602 <_vfiprintf_r+0x13a>
 801b5d8:	eba0 0308 	sub.w	r3, r0, r8
 801b5dc:	fa09 f303 	lsl.w	r3, r9, r3
 801b5e0:	4313      	orrs	r3, r2
 801b5e2:	9304      	str	r3, [sp, #16]
 801b5e4:	46a2      	mov	sl, r4
 801b5e6:	e7d2      	b.n	801b58e <_vfiprintf_r+0xc6>
 801b5e8:	9b03      	ldr	r3, [sp, #12]
 801b5ea:	1d19      	adds	r1, r3, #4
 801b5ec:	681b      	ldr	r3, [r3, #0]
 801b5ee:	9103      	str	r1, [sp, #12]
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	bfbb      	ittet	lt
 801b5f4:	425b      	neglt	r3, r3
 801b5f6:	f042 0202 	orrlt.w	r2, r2, #2
 801b5fa:	9307      	strge	r3, [sp, #28]
 801b5fc:	9307      	strlt	r3, [sp, #28]
 801b5fe:	bfb8      	it	lt
 801b600:	9204      	strlt	r2, [sp, #16]
 801b602:	7823      	ldrb	r3, [r4, #0]
 801b604:	2b2e      	cmp	r3, #46	; 0x2e
 801b606:	d10c      	bne.n	801b622 <_vfiprintf_r+0x15a>
 801b608:	7863      	ldrb	r3, [r4, #1]
 801b60a:	2b2a      	cmp	r3, #42	; 0x2a
 801b60c:	d134      	bne.n	801b678 <_vfiprintf_r+0x1b0>
 801b60e:	9b03      	ldr	r3, [sp, #12]
 801b610:	1d1a      	adds	r2, r3, #4
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	9203      	str	r2, [sp, #12]
 801b616:	2b00      	cmp	r3, #0
 801b618:	bfb8      	it	lt
 801b61a:	f04f 33ff 	movlt.w	r3, #4294967295
 801b61e:	3402      	adds	r4, #2
 801b620:	9305      	str	r3, [sp, #20]
 801b622:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b6f8 <_vfiprintf_r+0x230>
 801b626:	7821      	ldrb	r1, [r4, #0]
 801b628:	2203      	movs	r2, #3
 801b62a:	4650      	mov	r0, sl
 801b62c:	f7e4 fdd0 	bl	80001d0 <memchr>
 801b630:	b138      	cbz	r0, 801b642 <_vfiprintf_r+0x17a>
 801b632:	9b04      	ldr	r3, [sp, #16]
 801b634:	eba0 000a 	sub.w	r0, r0, sl
 801b638:	2240      	movs	r2, #64	; 0x40
 801b63a:	4082      	lsls	r2, r0
 801b63c:	4313      	orrs	r3, r2
 801b63e:	3401      	adds	r4, #1
 801b640:	9304      	str	r3, [sp, #16]
 801b642:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b646:	4829      	ldr	r0, [pc, #164]	; (801b6ec <_vfiprintf_r+0x224>)
 801b648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b64c:	2206      	movs	r2, #6
 801b64e:	f7e4 fdbf 	bl	80001d0 <memchr>
 801b652:	2800      	cmp	r0, #0
 801b654:	d03f      	beq.n	801b6d6 <_vfiprintf_r+0x20e>
 801b656:	4b26      	ldr	r3, [pc, #152]	; (801b6f0 <_vfiprintf_r+0x228>)
 801b658:	bb1b      	cbnz	r3, 801b6a2 <_vfiprintf_r+0x1da>
 801b65a:	9b03      	ldr	r3, [sp, #12]
 801b65c:	3307      	adds	r3, #7
 801b65e:	f023 0307 	bic.w	r3, r3, #7
 801b662:	3308      	adds	r3, #8
 801b664:	9303      	str	r3, [sp, #12]
 801b666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b668:	443b      	add	r3, r7
 801b66a:	9309      	str	r3, [sp, #36]	; 0x24
 801b66c:	e768      	b.n	801b540 <_vfiprintf_r+0x78>
 801b66e:	fb0c 3202 	mla	r2, ip, r2, r3
 801b672:	460c      	mov	r4, r1
 801b674:	2001      	movs	r0, #1
 801b676:	e7a6      	b.n	801b5c6 <_vfiprintf_r+0xfe>
 801b678:	2300      	movs	r3, #0
 801b67a:	3401      	adds	r4, #1
 801b67c:	9305      	str	r3, [sp, #20]
 801b67e:	4619      	mov	r1, r3
 801b680:	f04f 0c0a 	mov.w	ip, #10
 801b684:	4620      	mov	r0, r4
 801b686:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b68a:	3a30      	subs	r2, #48	; 0x30
 801b68c:	2a09      	cmp	r2, #9
 801b68e:	d903      	bls.n	801b698 <_vfiprintf_r+0x1d0>
 801b690:	2b00      	cmp	r3, #0
 801b692:	d0c6      	beq.n	801b622 <_vfiprintf_r+0x15a>
 801b694:	9105      	str	r1, [sp, #20]
 801b696:	e7c4      	b.n	801b622 <_vfiprintf_r+0x15a>
 801b698:	fb0c 2101 	mla	r1, ip, r1, r2
 801b69c:	4604      	mov	r4, r0
 801b69e:	2301      	movs	r3, #1
 801b6a0:	e7f0      	b.n	801b684 <_vfiprintf_r+0x1bc>
 801b6a2:	ab03      	add	r3, sp, #12
 801b6a4:	9300      	str	r3, [sp, #0]
 801b6a6:	462a      	mov	r2, r5
 801b6a8:	4b12      	ldr	r3, [pc, #72]	; (801b6f4 <_vfiprintf_r+0x22c>)
 801b6aa:	a904      	add	r1, sp, #16
 801b6ac:	4630      	mov	r0, r6
 801b6ae:	f3af 8000 	nop.w
 801b6b2:	4607      	mov	r7, r0
 801b6b4:	1c78      	adds	r0, r7, #1
 801b6b6:	d1d6      	bne.n	801b666 <_vfiprintf_r+0x19e>
 801b6b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b6ba:	07d9      	lsls	r1, r3, #31
 801b6bc:	d405      	bmi.n	801b6ca <_vfiprintf_r+0x202>
 801b6be:	89ab      	ldrh	r3, [r5, #12]
 801b6c0:	059a      	lsls	r2, r3, #22
 801b6c2:	d402      	bmi.n	801b6ca <_vfiprintf_r+0x202>
 801b6c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b6c6:	f7ff fda7 	bl	801b218 <__retarget_lock_release_recursive>
 801b6ca:	89ab      	ldrh	r3, [r5, #12]
 801b6cc:	065b      	lsls	r3, r3, #25
 801b6ce:	f53f af1d 	bmi.w	801b50c <_vfiprintf_r+0x44>
 801b6d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b6d4:	e71c      	b.n	801b510 <_vfiprintf_r+0x48>
 801b6d6:	ab03      	add	r3, sp, #12
 801b6d8:	9300      	str	r3, [sp, #0]
 801b6da:	462a      	mov	r2, r5
 801b6dc:	4b05      	ldr	r3, [pc, #20]	; (801b6f4 <_vfiprintf_r+0x22c>)
 801b6de:	a904      	add	r1, sp, #16
 801b6e0:	4630      	mov	r0, r6
 801b6e2:	f000 f879 	bl	801b7d8 <_printf_i>
 801b6e6:	e7e4      	b.n	801b6b2 <_vfiprintf_r+0x1ea>
 801b6e8:	0801ebcf 	.word	0x0801ebcf
 801b6ec:	0801ebd9 	.word	0x0801ebd9
 801b6f0:	00000000 	.word	0x00000000
 801b6f4:	0801b4a3 	.word	0x0801b4a3
 801b6f8:	0801ebd5 	.word	0x0801ebd5

0801b6fc <_printf_common>:
 801b6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b700:	4616      	mov	r6, r2
 801b702:	4699      	mov	r9, r3
 801b704:	688a      	ldr	r2, [r1, #8]
 801b706:	690b      	ldr	r3, [r1, #16]
 801b708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b70c:	4293      	cmp	r3, r2
 801b70e:	bfb8      	it	lt
 801b710:	4613      	movlt	r3, r2
 801b712:	6033      	str	r3, [r6, #0]
 801b714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b718:	4607      	mov	r7, r0
 801b71a:	460c      	mov	r4, r1
 801b71c:	b10a      	cbz	r2, 801b722 <_printf_common+0x26>
 801b71e:	3301      	adds	r3, #1
 801b720:	6033      	str	r3, [r6, #0]
 801b722:	6823      	ldr	r3, [r4, #0]
 801b724:	0699      	lsls	r1, r3, #26
 801b726:	bf42      	ittt	mi
 801b728:	6833      	ldrmi	r3, [r6, #0]
 801b72a:	3302      	addmi	r3, #2
 801b72c:	6033      	strmi	r3, [r6, #0]
 801b72e:	6825      	ldr	r5, [r4, #0]
 801b730:	f015 0506 	ands.w	r5, r5, #6
 801b734:	d106      	bne.n	801b744 <_printf_common+0x48>
 801b736:	f104 0a19 	add.w	sl, r4, #25
 801b73a:	68e3      	ldr	r3, [r4, #12]
 801b73c:	6832      	ldr	r2, [r6, #0]
 801b73e:	1a9b      	subs	r3, r3, r2
 801b740:	42ab      	cmp	r3, r5
 801b742:	dc26      	bgt.n	801b792 <_printf_common+0x96>
 801b744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b748:	1e13      	subs	r3, r2, #0
 801b74a:	6822      	ldr	r2, [r4, #0]
 801b74c:	bf18      	it	ne
 801b74e:	2301      	movne	r3, #1
 801b750:	0692      	lsls	r2, r2, #26
 801b752:	d42b      	bmi.n	801b7ac <_printf_common+0xb0>
 801b754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b758:	4649      	mov	r1, r9
 801b75a:	4638      	mov	r0, r7
 801b75c:	47c0      	blx	r8
 801b75e:	3001      	adds	r0, #1
 801b760:	d01e      	beq.n	801b7a0 <_printf_common+0xa4>
 801b762:	6823      	ldr	r3, [r4, #0]
 801b764:	6922      	ldr	r2, [r4, #16]
 801b766:	f003 0306 	and.w	r3, r3, #6
 801b76a:	2b04      	cmp	r3, #4
 801b76c:	bf02      	ittt	eq
 801b76e:	68e5      	ldreq	r5, [r4, #12]
 801b770:	6833      	ldreq	r3, [r6, #0]
 801b772:	1aed      	subeq	r5, r5, r3
 801b774:	68a3      	ldr	r3, [r4, #8]
 801b776:	bf0c      	ite	eq
 801b778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b77c:	2500      	movne	r5, #0
 801b77e:	4293      	cmp	r3, r2
 801b780:	bfc4      	itt	gt
 801b782:	1a9b      	subgt	r3, r3, r2
 801b784:	18ed      	addgt	r5, r5, r3
 801b786:	2600      	movs	r6, #0
 801b788:	341a      	adds	r4, #26
 801b78a:	42b5      	cmp	r5, r6
 801b78c:	d11a      	bne.n	801b7c4 <_printf_common+0xc8>
 801b78e:	2000      	movs	r0, #0
 801b790:	e008      	b.n	801b7a4 <_printf_common+0xa8>
 801b792:	2301      	movs	r3, #1
 801b794:	4652      	mov	r2, sl
 801b796:	4649      	mov	r1, r9
 801b798:	4638      	mov	r0, r7
 801b79a:	47c0      	blx	r8
 801b79c:	3001      	adds	r0, #1
 801b79e:	d103      	bne.n	801b7a8 <_printf_common+0xac>
 801b7a0:	f04f 30ff 	mov.w	r0, #4294967295
 801b7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7a8:	3501      	adds	r5, #1
 801b7aa:	e7c6      	b.n	801b73a <_printf_common+0x3e>
 801b7ac:	18e1      	adds	r1, r4, r3
 801b7ae:	1c5a      	adds	r2, r3, #1
 801b7b0:	2030      	movs	r0, #48	; 0x30
 801b7b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b7b6:	4422      	add	r2, r4
 801b7b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b7bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b7c0:	3302      	adds	r3, #2
 801b7c2:	e7c7      	b.n	801b754 <_printf_common+0x58>
 801b7c4:	2301      	movs	r3, #1
 801b7c6:	4622      	mov	r2, r4
 801b7c8:	4649      	mov	r1, r9
 801b7ca:	4638      	mov	r0, r7
 801b7cc:	47c0      	blx	r8
 801b7ce:	3001      	adds	r0, #1
 801b7d0:	d0e6      	beq.n	801b7a0 <_printf_common+0xa4>
 801b7d2:	3601      	adds	r6, #1
 801b7d4:	e7d9      	b.n	801b78a <_printf_common+0x8e>
	...

0801b7d8 <_printf_i>:
 801b7d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b7dc:	7e0f      	ldrb	r7, [r1, #24]
 801b7de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b7e0:	2f78      	cmp	r7, #120	; 0x78
 801b7e2:	4691      	mov	r9, r2
 801b7e4:	4680      	mov	r8, r0
 801b7e6:	460c      	mov	r4, r1
 801b7e8:	469a      	mov	sl, r3
 801b7ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b7ee:	d807      	bhi.n	801b800 <_printf_i+0x28>
 801b7f0:	2f62      	cmp	r7, #98	; 0x62
 801b7f2:	d80a      	bhi.n	801b80a <_printf_i+0x32>
 801b7f4:	2f00      	cmp	r7, #0
 801b7f6:	f000 80d4 	beq.w	801b9a2 <_printf_i+0x1ca>
 801b7fa:	2f58      	cmp	r7, #88	; 0x58
 801b7fc:	f000 80c0 	beq.w	801b980 <_printf_i+0x1a8>
 801b800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b808:	e03a      	b.n	801b880 <_printf_i+0xa8>
 801b80a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b80e:	2b15      	cmp	r3, #21
 801b810:	d8f6      	bhi.n	801b800 <_printf_i+0x28>
 801b812:	a101      	add	r1, pc, #4	; (adr r1, 801b818 <_printf_i+0x40>)
 801b814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b818:	0801b871 	.word	0x0801b871
 801b81c:	0801b885 	.word	0x0801b885
 801b820:	0801b801 	.word	0x0801b801
 801b824:	0801b801 	.word	0x0801b801
 801b828:	0801b801 	.word	0x0801b801
 801b82c:	0801b801 	.word	0x0801b801
 801b830:	0801b885 	.word	0x0801b885
 801b834:	0801b801 	.word	0x0801b801
 801b838:	0801b801 	.word	0x0801b801
 801b83c:	0801b801 	.word	0x0801b801
 801b840:	0801b801 	.word	0x0801b801
 801b844:	0801b989 	.word	0x0801b989
 801b848:	0801b8b1 	.word	0x0801b8b1
 801b84c:	0801b943 	.word	0x0801b943
 801b850:	0801b801 	.word	0x0801b801
 801b854:	0801b801 	.word	0x0801b801
 801b858:	0801b9ab 	.word	0x0801b9ab
 801b85c:	0801b801 	.word	0x0801b801
 801b860:	0801b8b1 	.word	0x0801b8b1
 801b864:	0801b801 	.word	0x0801b801
 801b868:	0801b801 	.word	0x0801b801
 801b86c:	0801b94b 	.word	0x0801b94b
 801b870:	682b      	ldr	r3, [r5, #0]
 801b872:	1d1a      	adds	r2, r3, #4
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	602a      	str	r2, [r5, #0]
 801b878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b87c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b880:	2301      	movs	r3, #1
 801b882:	e09f      	b.n	801b9c4 <_printf_i+0x1ec>
 801b884:	6820      	ldr	r0, [r4, #0]
 801b886:	682b      	ldr	r3, [r5, #0]
 801b888:	0607      	lsls	r7, r0, #24
 801b88a:	f103 0104 	add.w	r1, r3, #4
 801b88e:	6029      	str	r1, [r5, #0]
 801b890:	d501      	bpl.n	801b896 <_printf_i+0xbe>
 801b892:	681e      	ldr	r6, [r3, #0]
 801b894:	e003      	b.n	801b89e <_printf_i+0xc6>
 801b896:	0646      	lsls	r6, r0, #25
 801b898:	d5fb      	bpl.n	801b892 <_printf_i+0xba>
 801b89a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b89e:	2e00      	cmp	r6, #0
 801b8a0:	da03      	bge.n	801b8aa <_printf_i+0xd2>
 801b8a2:	232d      	movs	r3, #45	; 0x2d
 801b8a4:	4276      	negs	r6, r6
 801b8a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b8aa:	485a      	ldr	r0, [pc, #360]	; (801ba14 <_printf_i+0x23c>)
 801b8ac:	230a      	movs	r3, #10
 801b8ae:	e012      	b.n	801b8d6 <_printf_i+0xfe>
 801b8b0:	682b      	ldr	r3, [r5, #0]
 801b8b2:	6820      	ldr	r0, [r4, #0]
 801b8b4:	1d19      	adds	r1, r3, #4
 801b8b6:	6029      	str	r1, [r5, #0]
 801b8b8:	0605      	lsls	r5, r0, #24
 801b8ba:	d501      	bpl.n	801b8c0 <_printf_i+0xe8>
 801b8bc:	681e      	ldr	r6, [r3, #0]
 801b8be:	e002      	b.n	801b8c6 <_printf_i+0xee>
 801b8c0:	0641      	lsls	r1, r0, #25
 801b8c2:	d5fb      	bpl.n	801b8bc <_printf_i+0xe4>
 801b8c4:	881e      	ldrh	r6, [r3, #0]
 801b8c6:	4853      	ldr	r0, [pc, #332]	; (801ba14 <_printf_i+0x23c>)
 801b8c8:	2f6f      	cmp	r7, #111	; 0x6f
 801b8ca:	bf0c      	ite	eq
 801b8cc:	2308      	moveq	r3, #8
 801b8ce:	230a      	movne	r3, #10
 801b8d0:	2100      	movs	r1, #0
 801b8d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b8d6:	6865      	ldr	r5, [r4, #4]
 801b8d8:	60a5      	str	r5, [r4, #8]
 801b8da:	2d00      	cmp	r5, #0
 801b8dc:	bfa2      	ittt	ge
 801b8de:	6821      	ldrge	r1, [r4, #0]
 801b8e0:	f021 0104 	bicge.w	r1, r1, #4
 801b8e4:	6021      	strge	r1, [r4, #0]
 801b8e6:	b90e      	cbnz	r6, 801b8ec <_printf_i+0x114>
 801b8e8:	2d00      	cmp	r5, #0
 801b8ea:	d04b      	beq.n	801b984 <_printf_i+0x1ac>
 801b8ec:	4615      	mov	r5, r2
 801b8ee:	fbb6 f1f3 	udiv	r1, r6, r3
 801b8f2:	fb03 6711 	mls	r7, r3, r1, r6
 801b8f6:	5dc7      	ldrb	r7, [r0, r7]
 801b8f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b8fc:	4637      	mov	r7, r6
 801b8fe:	42bb      	cmp	r3, r7
 801b900:	460e      	mov	r6, r1
 801b902:	d9f4      	bls.n	801b8ee <_printf_i+0x116>
 801b904:	2b08      	cmp	r3, #8
 801b906:	d10b      	bne.n	801b920 <_printf_i+0x148>
 801b908:	6823      	ldr	r3, [r4, #0]
 801b90a:	07de      	lsls	r6, r3, #31
 801b90c:	d508      	bpl.n	801b920 <_printf_i+0x148>
 801b90e:	6923      	ldr	r3, [r4, #16]
 801b910:	6861      	ldr	r1, [r4, #4]
 801b912:	4299      	cmp	r1, r3
 801b914:	bfde      	ittt	le
 801b916:	2330      	movle	r3, #48	; 0x30
 801b918:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b91c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b920:	1b52      	subs	r2, r2, r5
 801b922:	6122      	str	r2, [r4, #16]
 801b924:	f8cd a000 	str.w	sl, [sp]
 801b928:	464b      	mov	r3, r9
 801b92a:	aa03      	add	r2, sp, #12
 801b92c:	4621      	mov	r1, r4
 801b92e:	4640      	mov	r0, r8
 801b930:	f7ff fee4 	bl	801b6fc <_printf_common>
 801b934:	3001      	adds	r0, #1
 801b936:	d14a      	bne.n	801b9ce <_printf_i+0x1f6>
 801b938:	f04f 30ff 	mov.w	r0, #4294967295
 801b93c:	b004      	add	sp, #16
 801b93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b942:	6823      	ldr	r3, [r4, #0]
 801b944:	f043 0320 	orr.w	r3, r3, #32
 801b948:	6023      	str	r3, [r4, #0]
 801b94a:	4833      	ldr	r0, [pc, #204]	; (801ba18 <_printf_i+0x240>)
 801b94c:	2778      	movs	r7, #120	; 0x78
 801b94e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b952:	6823      	ldr	r3, [r4, #0]
 801b954:	6829      	ldr	r1, [r5, #0]
 801b956:	061f      	lsls	r7, r3, #24
 801b958:	f851 6b04 	ldr.w	r6, [r1], #4
 801b95c:	d402      	bmi.n	801b964 <_printf_i+0x18c>
 801b95e:	065f      	lsls	r7, r3, #25
 801b960:	bf48      	it	mi
 801b962:	b2b6      	uxthmi	r6, r6
 801b964:	07df      	lsls	r7, r3, #31
 801b966:	bf48      	it	mi
 801b968:	f043 0320 	orrmi.w	r3, r3, #32
 801b96c:	6029      	str	r1, [r5, #0]
 801b96e:	bf48      	it	mi
 801b970:	6023      	strmi	r3, [r4, #0]
 801b972:	b91e      	cbnz	r6, 801b97c <_printf_i+0x1a4>
 801b974:	6823      	ldr	r3, [r4, #0]
 801b976:	f023 0320 	bic.w	r3, r3, #32
 801b97a:	6023      	str	r3, [r4, #0]
 801b97c:	2310      	movs	r3, #16
 801b97e:	e7a7      	b.n	801b8d0 <_printf_i+0xf8>
 801b980:	4824      	ldr	r0, [pc, #144]	; (801ba14 <_printf_i+0x23c>)
 801b982:	e7e4      	b.n	801b94e <_printf_i+0x176>
 801b984:	4615      	mov	r5, r2
 801b986:	e7bd      	b.n	801b904 <_printf_i+0x12c>
 801b988:	682b      	ldr	r3, [r5, #0]
 801b98a:	6826      	ldr	r6, [r4, #0]
 801b98c:	6961      	ldr	r1, [r4, #20]
 801b98e:	1d18      	adds	r0, r3, #4
 801b990:	6028      	str	r0, [r5, #0]
 801b992:	0635      	lsls	r5, r6, #24
 801b994:	681b      	ldr	r3, [r3, #0]
 801b996:	d501      	bpl.n	801b99c <_printf_i+0x1c4>
 801b998:	6019      	str	r1, [r3, #0]
 801b99a:	e002      	b.n	801b9a2 <_printf_i+0x1ca>
 801b99c:	0670      	lsls	r0, r6, #25
 801b99e:	d5fb      	bpl.n	801b998 <_printf_i+0x1c0>
 801b9a0:	8019      	strh	r1, [r3, #0]
 801b9a2:	2300      	movs	r3, #0
 801b9a4:	6123      	str	r3, [r4, #16]
 801b9a6:	4615      	mov	r5, r2
 801b9a8:	e7bc      	b.n	801b924 <_printf_i+0x14c>
 801b9aa:	682b      	ldr	r3, [r5, #0]
 801b9ac:	1d1a      	adds	r2, r3, #4
 801b9ae:	602a      	str	r2, [r5, #0]
 801b9b0:	681d      	ldr	r5, [r3, #0]
 801b9b2:	6862      	ldr	r2, [r4, #4]
 801b9b4:	2100      	movs	r1, #0
 801b9b6:	4628      	mov	r0, r5
 801b9b8:	f7e4 fc0a 	bl	80001d0 <memchr>
 801b9bc:	b108      	cbz	r0, 801b9c2 <_printf_i+0x1ea>
 801b9be:	1b40      	subs	r0, r0, r5
 801b9c0:	6060      	str	r0, [r4, #4]
 801b9c2:	6863      	ldr	r3, [r4, #4]
 801b9c4:	6123      	str	r3, [r4, #16]
 801b9c6:	2300      	movs	r3, #0
 801b9c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b9cc:	e7aa      	b.n	801b924 <_printf_i+0x14c>
 801b9ce:	6923      	ldr	r3, [r4, #16]
 801b9d0:	462a      	mov	r2, r5
 801b9d2:	4649      	mov	r1, r9
 801b9d4:	4640      	mov	r0, r8
 801b9d6:	47d0      	blx	sl
 801b9d8:	3001      	adds	r0, #1
 801b9da:	d0ad      	beq.n	801b938 <_printf_i+0x160>
 801b9dc:	6823      	ldr	r3, [r4, #0]
 801b9de:	079b      	lsls	r3, r3, #30
 801b9e0:	d413      	bmi.n	801ba0a <_printf_i+0x232>
 801b9e2:	68e0      	ldr	r0, [r4, #12]
 801b9e4:	9b03      	ldr	r3, [sp, #12]
 801b9e6:	4298      	cmp	r0, r3
 801b9e8:	bfb8      	it	lt
 801b9ea:	4618      	movlt	r0, r3
 801b9ec:	e7a6      	b.n	801b93c <_printf_i+0x164>
 801b9ee:	2301      	movs	r3, #1
 801b9f0:	4632      	mov	r2, r6
 801b9f2:	4649      	mov	r1, r9
 801b9f4:	4640      	mov	r0, r8
 801b9f6:	47d0      	blx	sl
 801b9f8:	3001      	adds	r0, #1
 801b9fa:	d09d      	beq.n	801b938 <_printf_i+0x160>
 801b9fc:	3501      	adds	r5, #1
 801b9fe:	68e3      	ldr	r3, [r4, #12]
 801ba00:	9903      	ldr	r1, [sp, #12]
 801ba02:	1a5b      	subs	r3, r3, r1
 801ba04:	42ab      	cmp	r3, r5
 801ba06:	dcf2      	bgt.n	801b9ee <_printf_i+0x216>
 801ba08:	e7eb      	b.n	801b9e2 <_printf_i+0x20a>
 801ba0a:	2500      	movs	r5, #0
 801ba0c:	f104 0619 	add.w	r6, r4, #25
 801ba10:	e7f5      	b.n	801b9fe <_printf_i+0x226>
 801ba12:	bf00      	nop
 801ba14:	0801ebe0 	.word	0x0801ebe0
 801ba18:	0801ebf1 	.word	0x0801ebf1

0801ba1c <__sflush_r>:
 801ba1c:	898a      	ldrh	r2, [r1, #12]
 801ba1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba22:	4605      	mov	r5, r0
 801ba24:	0710      	lsls	r0, r2, #28
 801ba26:	460c      	mov	r4, r1
 801ba28:	d458      	bmi.n	801badc <__sflush_r+0xc0>
 801ba2a:	684b      	ldr	r3, [r1, #4]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	dc05      	bgt.n	801ba3c <__sflush_r+0x20>
 801ba30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ba32:	2b00      	cmp	r3, #0
 801ba34:	dc02      	bgt.n	801ba3c <__sflush_r+0x20>
 801ba36:	2000      	movs	r0, #0
 801ba38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ba3e:	2e00      	cmp	r6, #0
 801ba40:	d0f9      	beq.n	801ba36 <__sflush_r+0x1a>
 801ba42:	2300      	movs	r3, #0
 801ba44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ba48:	682f      	ldr	r7, [r5, #0]
 801ba4a:	6a21      	ldr	r1, [r4, #32]
 801ba4c:	602b      	str	r3, [r5, #0]
 801ba4e:	d032      	beq.n	801bab6 <__sflush_r+0x9a>
 801ba50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ba52:	89a3      	ldrh	r3, [r4, #12]
 801ba54:	075a      	lsls	r2, r3, #29
 801ba56:	d505      	bpl.n	801ba64 <__sflush_r+0x48>
 801ba58:	6863      	ldr	r3, [r4, #4]
 801ba5a:	1ac0      	subs	r0, r0, r3
 801ba5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ba5e:	b10b      	cbz	r3, 801ba64 <__sflush_r+0x48>
 801ba60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ba62:	1ac0      	subs	r0, r0, r3
 801ba64:	2300      	movs	r3, #0
 801ba66:	4602      	mov	r2, r0
 801ba68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ba6a:	6a21      	ldr	r1, [r4, #32]
 801ba6c:	4628      	mov	r0, r5
 801ba6e:	47b0      	blx	r6
 801ba70:	1c43      	adds	r3, r0, #1
 801ba72:	89a3      	ldrh	r3, [r4, #12]
 801ba74:	d106      	bne.n	801ba84 <__sflush_r+0x68>
 801ba76:	6829      	ldr	r1, [r5, #0]
 801ba78:	291d      	cmp	r1, #29
 801ba7a:	d82b      	bhi.n	801bad4 <__sflush_r+0xb8>
 801ba7c:	4a29      	ldr	r2, [pc, #164]	; (801bb24 <__sflush_r+0x108>)
 801ba7e:	410a      	asrs	r2, r1
 801ba80:	07d6      	lsls	r6, r2, #31
 801ba82:	d427      	bmi.n	801bad4 <__sflush_r+0xb8>
 801ba84:	2200      	movs	r2, #0
 801ba86:	6062      	str	r2, [r4, #4]
 801ba88:	04d9      	lsls	r1, r3, #19
 801ba8a:	6922      	ldr	r2, [r4, #16]
 801ba8c:	6022      	str	r2, [r4, #0]
 801ba8e:	d504      	bpl.n	801ba9a <__sflush_r+0x7e>
 801ba90:	1c42      	adds	r2, r0, #1
 801ba92:	d101      	bne.n	801ba98 <__sflush_r+0x7c>
 801ba94:	682b      	ldr	r3, [r5, #0]
 801ba96:	b903      	cbnz	r3, 801ba9a <__sflush_r+0x7e>
 801ba98:	6560      	str	r0, [r4, #84]	; 0x54
 801ba9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ba9c:	602f      	str	r7, [r5, #0]
 801ba9e:	2900      	cmp	r1, #0
 801baa0:	d0c9      	beq.n	801ba36 <__sflush_r+0x1a>
 801baa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801baa6:	4299      	cmp	r1, r3
 801baa8:	d002      	beq.n	801bab0 <__sflush_r+0x94>
 801baaa:	4628      	mov	r0, r5
 801baac:	f7ff fbe2 	bl	801b274 <_free_r>
 801bab0:	2000      	movs	r0, #0
 801bab2:	6360      	str	r0, [r4, #52]	; 0x34
 801bab4:	e7c0      	b.n	801ba38 <__sflush_r+0x1c>
 801bab6:	2301      	movs	r3, #1
 801bab8:	4628      	mov	r0, r5
 801baba:	47b0      	blx	r6
 801babc:	1c41      	adds	r1, r0, #1
 801babe:	d1c8      	bne.n	801ba52 <__sflush_r+0x36>
 801bac0:	682b      	ldr	r3, [r5, #0]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d0c5      	beq.n	801ba52 <__sflush_r+0x36>
 801bac6:	2b1d      	cmp	r3, #29
 801bac8:	d001      	beq.n	801bace <__sflush_r+0xb2>
 801baca:	2b16      	cmp	r3, #22
 801bacc:	d101      	bne.n	801bad2 <__sflush_r+0xb6>
 801bace:	602f      	str	r7, [r5, #0]
 801bad0:	e7b1      	b.n	801ba36 <__sflush_r+0x1a>
 801bad2:	89a3      	ldrh	r3, [r4, #12]
 801bad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bad8:	81a3      	strh	r3, [r4, #12]
 801bada:	e7ad      	b.n	801ba38 <__sflush_r+0x1c>
 801badc:	690f      	ldr	r7, [r1, #16]
 801bade:	2f00      	cmp	r7, #0
 801bae0:	d0a9      	beq.n	801ba36 <__sflush_r+0x1a>
 801bae2:	0793      	lsls	r3, r2, #30
 801bae4:	680e      	ldr	r6, [r1, #0]
 801bae6:	bf08      	it	eq
 801bae8:	694b      	ldreq	r3, [r1, #20]
 801baea:	600f      	str	r7, [r1, #0]
 801baec:	bf18      	it	ne
 801baee:	2300      	movne	r3, #0
 801baf0:	eba6 0807 	sub.w	r8, r6, r7
 801baf4:	608b      	str	r3, [r1, #8]
 801baf6:	f1b8 0f00 	cmp.w	r8, #0
 801bafa:	dd9c      	ble.n	801ba36 <__sflush_r+0x1a>
 801bafc:	6a21      	ldr	r1, [r4, #32]
 801bafe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bb00:	4643      	mov	r3, r8
 801bb02:	463a      	mov	r2, r7
 801bb04:	4628      	mov	r0, r5
 801bb06:	47b0      	blx	r6
 801bb08:	2800      	cmp	r0, #0
 801bb0a:	dc06      	bgt.n	801bb1a <__sflush_r+0xfe>
 801bb0c:	89a3      	ldrh	r3, [r4, #12]
 801bb0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb12:	81a3      	strh	r3, [r4, #12]
 801bb14:	f04f 30ff 	mov.w	r0, #4294967295
 801bb18:	e78e      	b.n	801ba38 <__sflush_r+0x1c>
 801bb1a:	4407      	add	r7, r0
 801bb1c:	eba8 0800 	sub.w	r8, r8, r0
 801bb20:	e7e9      	b.n	801baf6 <__sflush_r+0xda>
 801bb22:	bf00      	nop
 801bb24:	dfbffffe 	.word	0xdfbffffe

0801bb28 <_fflush_r>:
 801bb28:	b538      	push	{r3, r4, r5, lr}
 801bb2a:	690b      	ldr	r3, [r1, #16]
 801bb2c:	4605      	mov	r5, r0
 801bb2e:	460c      	mov	r4, r1
 801bb30:	b913      	cbnz	r3, 801bb38 <_fflush_r+0x10>
 801bb32:	2500      	movs	r5, #0
 801bb34:	4628      	mov	r0, r5
 801bb36:	bd38      	pop	{r3, r4, r5, pc}
 801bb38:	b118      	cbz	r0, 801bb42 <_fflush_r+0x1a>
 801bb3a:	6a03      	ldr	r3, [r0, #32]
 801bb3c:	b90b      	cbnz	r3, 801bb42 <_fflush_r+0x1a>
 801bb3e:	f7ff fa5b 	bl	801aff8 <__sinit>
 801bb42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d0f3      	beq.n	801bb32 <_fflush_r+0xa>
 801bb4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bb4c:	07d0      	lsls	r0, r2, #31
 801bb4e:	d404      	bmi.n	801bb5a <_fflush_r+0x32>
 801bb50:	0599      	lsls	r1, r3, #22
 801bb52:	d402      	bmi.n	801bb5a <_fflush_r+0x32>
 801bb54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bb56:	f7ff fb5e 	bl	801b216 <__retarget_lock_acquire_recursive>
 801bb5a:	4628      	mov	r0, r5
 801bb5c:	4621      	mov	r1, r4
 801bb5e:	f7ff ff5d 	bl	801ba1c <__sflush_r>
 801bb62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bb64:	07da      	lsls	r2, r3, #31
 801bb66:	4605      	mov	r5, r0
 801bb68:	d4e4      	bmi.n	801bb34 <_fflush_r+0xc>
 801bb6a:	89a3      	ldrh	r3, [r4, #12]
 801bb6c:	059b      	lsls	r3, r3, #22
 801bb6e:	d4e1      	bmi.n	801bb34 <_fflush_r+0xc>
 801bb70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bb72:	f7ff fb51 	bl	801b218 <__retarget_lock_release_recursive>
 801bb76:	e7dd      	b.n	801bb34 <_fflush_r+0xc>

0801bb78 <fiprintf>:
 801bb78:	b40e      	push	{r1, r2, r3}
 801bb7a:	b503      	push	{r0, r1, lr}
 801bb7c:	4601      	mov	r1, r0
 801bb7e:	ab03      	add	r3, sp, #12
 801bb80:	4805      	ldr	r0, [pc, #20]	; (801bb98 <fiprintf+0x20>)
 801bb82:	f853 2b04 	ldr.w	r2, [r3], #4
 801bb86:	6800      	ldr	r0, [r0, #0]
 801bb88:	9301      	str	r3, [sp, #4]
 801bb8a:	f7ff fc9d 	bl	801b4c8 <_vfiprintf_r>
 801bb8e:	b002      	add	sp, #8
 801bb90:	f85d eb04 	ldr.w	lr, [sp], #4
 801bb94:	b003      	add	sp, #12
 801bb96:	4770      	bx	lr
 801bb98:	20000244 	.word	0x20000244

0801bb9c <__swbuf_r>:
 801bb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb9e:	460e      	mov	r6, r1
 801bba0:	4614      	mov	r4, r2
 801bba2:	4605      	mov	r5, r0
 801bba4:	b118      	cbz	r0, 801bbae <__swbuf_r+0x12>
 801bba6:	6a03      	ldr	r3, [r0, #32]
 801bba8:	b90b      	cbnz	r3, 801bbae <__swbuf_r+0x12>
 801bbaa:	f7ff fa25 	bl	801aff8 <__sinit>
 801bbae:	69a3      	ldr	r3, [r4, #24]
 801bbb0:	60a3      	str	r3, [r4, #8]
 801bbb2:	89a3      	ldrh	r3, [r4, #12]
 801bbb4:	071a      	lsls	r2, r3, #28
 801bbb6:	d525      	bpl.n	801bc04 <__swbuf_r+0x68>
 801bbb8:	6923      	ldr	r3, [r4, #16]
 801bbba:	b31b      	cbz	r3, 801bc04 <__swbuf_r+0x68>
 801bbbc:	6823      	ldr	r3, [r4, #0]
 801bbbe:	6922      	ldr	r2, [r4, #16]
 801bbc0:	1a98      	subs	r0, r3, r2
 801bbc2:	6963      	ldr	r3, [r4, #20]
 801bbc4:	b2f6      	uxtb	r6, r6
 801bbc6:	4283      	cmp	r3, r0
 801bbc8:	4637      	mov	r7, r6
 801bbca:	dc04      	bgt.n	801bbd6 <__swbuf_r+0x3a>
 801bbcc:	4621      	mov	r1, r4
 801bbce:	4628      	mov	r0, r5
 801bbd0:	f7ff ffaa 	bl	801bb28 <_fflush_r>
 801bbd4:	b9e0      	cbnz	r0, 801bc10 <__swbuf_r+0x74>
 801bbd6:	68a3      	ldr	r3, [r4, #8]
 801bbd8:	3b01      	subs	r3, #1
 801bbda:	60a3      	str	r3, [r4, #8]
 801bbdc:	6823      	ldr	r3, [r4, #0]
 801bbde:	1c5a      	adds	r2, r3, #1
 801bbe0:	6022      	str	r2, [r4, #0]
 801bbe2:	701e      	strb	r6, [r3, #0]
 801bbe4:	6962      	ldr	r2, [r4, #20]
 801bbe6:	1c43      	adds	r3, r0, #1
 801bbe8:	429a      	cmp	r2, r3
 801bbea:	d004      	beq.n	801bbf6 <__swbuf_r+0x5a>
 801bbec:	89a3      	ldrh	r3, [r4, #12]
 801bbee:	07db      	lsls	r3, r3, #31
 801bbf0:	d506      	bpl.n	801bc00 <__swbuf_r+0x64>
 801bbf2:	2e0a      	cmp	r6, #10
 801bbf4:	d104      	bne.n	801bc00 <__swbuf_r+0x64>
 801bbf6:	4621      	mov	r1, r4
 801bbf8:	4628      	mov	r0, r5
 801bbfa:	f7ff ff95 	bl	801bb28 <_fflush_r>
 801bbfe:	b938      	cbnz	r0, 801bc10 <__swbuf_r+0x74>
 801bc00:	4638      	mov	r0, r7
 801bc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc04:	4621      	mov	r1, r4
 801bc06:	4628      	mov	r0, r5
 801bc08:	f000 f806 	bl	801bc18 <__swsetup_r>
 801bc0c:	2800      	cmp	r0, #0
 801bc0e:	d0d5      	beq.n	801bbbc <__swbuf_r+0x20>
 801bc10:	f04f 37ff 	mov.w	r7, #4294967295
 801bc14:	e7f4      	b.n	801bc00 <__swbuf_r+0x64>
	...

0801bc18 <__swsetup_r>:
 801bc18:	b538      	push	{r3, r4, r5, lr}
 801bc1a:	4b2a      	ldr	r3, [pc, #168]	; (801bcc4 <__swsetup_r+0xac>)
 801bc1c:	4605      	mov	r5, r0
 801bc1e:	6818      	ldr	r0, [r3, #0]
 801bc20:	460c      	mov	r4, r1
 801bc22:	b118      	cbz	r0, 801bc2c <__swsetup_r+0x14>
 801bc24:	6a03      	ldr	r3, [r0, #32]
 801bc26:	b90b      	cbnz	r3, 801bc2c <__swsetup_r+0x14>
 801bc28:	f7ff f9e6 	bl	801aff8 <__sinit>
 801bc2c:	89a3      	ldrh	r3, [r4, #12]
 801bc2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bc32:	0718      	lsls	r0, r3, #28
 801bc34:	d422      	bmi.n	801bc7c <__swsetup_r+0x64>
 801bc36:	06d9      	lsls	r1, r3, #27
 801bc38:	d407      	bmi.n	801bc4a <__swsetup_r+0x32>
 801bc3a:	2309      	movs	r3, #9
 801bc3c:	602b      	str	r3, [r5, #0]
 801bc3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bc42:	81a3      	strh	r3, [r4, #12]
 801bc44:	f04f 30ff 	mov.w	r0, #4294967295
 801bc48:	e034      	b.n	801bcb4 <__swsetup_r+0x9c>
 801bc4a:	0758      	lsls	r0, r3, #29
 801bc4c:	d512      	bpl.n	801bc74 <__swsetup_r+0x5c>
 801bc4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bc50:	b141      	cbz	r1, 801bc64 <__swsetup_r+0x4c>
 801bc52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bc56:	4299      	cmp	r1, r3
 801bc58:	d002      	beq.n	801bc60 <__swsetup_r+0x48>
 801bc5a:	4628      	mov	r0, r5
 801bc5c:	f7ff fb0a 	bl	801b274 <_free_r>
 801bc60:	2300      	movs	r3, #0
 801bc62:	6363      	str	r3, [r4, #52]	; 0x34
 801bc64:	89a3      	ldrh	r3, [r4, #12]
 801bc66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bc6a:	81a3      	strh	r3, [r4, #12]
 801bc6c:	2300      	movs	r3, #0
 801bc6e:	6063      	str	r3, [r4, #4]
 801bc70:	6923      	ldr	r3, [r4, #16]
 801bc72:	6023      	str	r3, [r4, #0]
 801bc74:	89a3      	ldrh	r3, [r4, #12]
 801bc76:	f043 0308 	orr.w	r3, r3, #8
 801bc7a:	81a3      	strh	r3, [r4, #12]
 801bc7c:	6923      	ldr	r3, [r4, #16]
 801bc7e:	b94b      	cbnz	r3, 801bc94 <__swsetup_r+0x7c>
 801bc80:	89a3      	ldrh	r3, [r4, #12]
 801bc82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bc86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bc8a:	d003      	beq.n	801bc94 <__swsetup_r+0x7c>
 801bc8c:	4621      	mov	r1, r4
 801bc8e:	4628      	mov	r0, r5
 801bc90:	f000 f857 	bl	801bd42 <__smakebuf_r>
 801bc94:	89a0      	ldrh	r0, [r4, #12]
 801bc96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bc9a:	f010 0301 	ands.w	r3, r0, #1
 801bc9e:	d00a      	beq.n	801bcb6 <__swsetup_r+0x9e>
 801bca0:	2300      	movs	r3, #0
 801bca2:	60a3      	str	r3, [r4, #8]
 801bca4:	6963      	ldr	r3, [r4, #20]
 801bca6:	425b      	negs	r3, r3
 801bca8:	61a3      	str	r3, [r4, #24]
 801bcaa:	6923      	ldr	r3, [r4, #16]
 801bcac:	b943      	cbnz	r3, 801bcc0 <__swsetup_r+0xa8>
 801bcae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bcb2:	d1c4      	bne.n	801bc3e <__swsetup_r+0x26>
 801bcb4:	bd38      	pop	{r3, r4, r5, pc}
 801bcb6:	0781      	lsls	r1, r0, #30
 801bcb8:	bf58      	it	pl
 801bcba:	6963      	ldrpl	r3, [r4, #20]
 801bcbc:	60a3      	str	r3, [r4, #8]
 801bcbe:	e7f4      	b.n	801bcaa <__swsetup_r+0x92>
 801bcc0:	2000      	movs	r0, #0
 801bcc2:	e7f7      	b.n	801bcb4 <__swsetup_r+0x9c>
 801bcc4:	20000244 	.word	0x20000244

0801bcc8 <_sbrk_r>:
 801bcc8:	b538      	push	{r3, r4, r5, lr}
 801bcca:	4d06      	ldr	r5, [pc, #24]	; (801bce4 <_sbrk_r+0x1c>)
 801bccc:	2300      	movs	r3, #0
 801bcce:	4604      	mov	r4, r0
 801bcd0:	4608      	mov	r0, r1
 801bcd2:	602b      	str	r3, [r5, #0]
 801bcd4:	f7e5 f854 	bl	8000d80 <_sbrk>
 801bcd8:	1c43      	adds	r3, r0, #1
 801bcda:	d102      	bne.n	801bce2 <_sbrk_r+0x1a>
 801bcdc:	682b      	ldr	r3, [r5, #0]
 801bcde:	b103      	cbz	r3, 801bce2 <_sbrk_r+0x1a>
 801bce0:	6023      	str	r3, [r4, #0]
 801bce2:	bd38      	pop	{r3, r4, r5, pc}
 801bce4:	2000ac50 	.word	0x2000ac50

0801bce8 <abort>:
 801bce8:	b508      	push	{r3, lr}
 801bcea:	2006      	movs	r0, #6
 801bcec:	f000 f88e 	bl	801be0c <raise>
 801bcf0:	2001      	movs	r0, #1
 801bcf2:	f7e4 ffcd 	bl	8000c90 <_exit>

0801bcf6 <__swhatbuf_r>:
 801bcf6:	b570      	push	{r4, r5, r6, lr}
 801bcf8:	460c      	mov	r4, r1
 801bcfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bcfe:	2900      	cmp	r1, #0
 801bd00:	b096      	sub	sp, #88	; 0x58
 801bd02:	4615      	mov	r5, r2
 801bd04:	461e      	mov	r6, r3
 801bd06:	da0d      	bge.n	801bd24 <__swhatbuf_r+0x2e>
 801bd08:	89a3      	ldrh	r3, [r4, #12]
 801bd0a:	f013 0f80 	tst.w	r3, #128	; 0x80
 801bd0e:	f04f 0100 	mov.w	r1, #0
 801bd12:	bf0c      	ite	eq
 801bd14:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801bd18:	2340      	movne	r3, #64	; 0x40
 801bd1a:	2000      	movs	r0, #0
 801bd1c:	6031      	str	r1, [r6, #0]
 801bd1e:	602b      	str	r3, [r5, #0]
 801bd20:	b016      	add	sp, #88	; 0x58
 801bd22:	bd70      	pop	{r4, r5, r6, pc}
 801bd24:	466a      	mov	r2, sp
 801bd26:	f000 f879 	bl	801be1c <_fstat_r>
 801bd2a:	2800      	cmp	r0, #0
 801bd2c:	dbec      	blt.n	801bd08 <__swhatbuf_r+0x12>
 801bd2e:	9901      	ldr	r1, [sp, #4]
 801bd30:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801bd34:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801bd38:	4259      	negs	r1, r3
 801bd3a:	4159      	adcs	r1, r3
 801bd3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bd40:	e7eb      	b.n	801bd1a <__swhatbuf_r+0x24>

0801bd42 <__smakebuf_r>:
 801bd42:	898b      	ldrh	r3, [r1, #12]
 801bd44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bd46:	079d      	lsls	r5, r3, #30
 801bd48:	4606      	mov	r6, r0
 801bd4a:	460c      	mov	r4, r1
 801bd4c:	d507      	bpl.n	801bd5e <__smakebuf_r+0x1c>
 801bd4e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bd52:	6023      	str	r3, [r4, #0]
 801bd54:	6123      	str	r3, [r4, #16]
 801bd56:	2301      	movs	r3, #1
 801bd58:	6163      	str	r3, [r4, #20]
 801bd5a:	b002      	add	sp, #8
 801bd5c:	bd70      	pop	{r4, r5, r6, pc}
 801bd5e:	ab01      	add	r3, sp, #4
 801bd60:	466a      	mov	r2, sp
 801bd62:	f7ff ffc8 	bl	801bcf6 <__swhatbuf_r>
 801bd66:	9900      	ldr	r1, [sp, #0]
 801bd68:	4605      	mov	r5, r0
 801bd6a:	4630      	mov	r0, r6
 801bd6c:	f7ff faf6 	bl	801b35c <_malloc_r>
 801bd70:	b948      	cbnz	r0, 801bd86 <__smakebuf_r+0x44>
 801bd72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bd76:	059a      	lsls	r2, r3, #22
 801bd78:	d4ef      	bmi.n	801bd5a <__smakebuf_r+0x18>
 801bd7a:	f023 0303 	bic.w	r3, r3, #3
 801bd7e:	f043 0302 	orr.w	r3, r3, #2
 801bd82:	81a3      	strh	r3, [r4, #12]
 801bd84:	e7e3      	b.n	801bd4e <__smakebuf_r+0xc>
 801bd86:	89a3      	ldrh	r3, [r4, #12]
 801bd88:	6020      	str	r0, [r4, #0]
 801bd8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bd8e:	81a3      	strh	r3, [r4, #12]
 801bd90:	9b00      	ldr	r3, [sp, #0]
 801bd92:	6163      	str	r3, [r4, #20]
 801bd94:	9b01      	ldr	r3, [sp, #4]
 801bd96:	6120      	str	r0, [r4, #16]
 801bd98:	b15b      	cbz	r3, 801bdb2 <__smakebuf_r+0x70>
 801bd9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bd9e:	4630      	mov	r0, r6
 801bda0:	f000 f84e 	bl	801be40 <_isatty_r>
 801bda4:	b128      	cbz	r0, 801bdb2 <__smakebuf_r+0x70>
 801bda6:	89a3      	ldrh	r3, [r4, #12]
 801bda8:	f023 0303 	bic.w	r3, r3, #3
 801bdac:	f043 0301 	orr.w	r3, r3, #1
 801bdb0:	81a3      	strh	r3, [r4, #12]
 801bdb2:	89a3      	ldrh	r3, [r4, #12]
 801bdb4:	431d      	orrs	r5, r3
 801bdb6:	81a5      	strh	r5, [r4, #12]
 801bdb8:	e7cf      	b.n	801bd5a <__smakebuf_r+0x18>

0801bdba <_raise_r>:
 801bdba:	291f      	cmp	r1, #31
 801bdbc:	b538      	push	{r3, r4, r5, lr}
 801bdbe:	4604      	mov	r4, r0
 801bdc0:	460d      	mov	r5, r1
 801bdc2:	d904      	bls.n	801bdce <_raise_r+0x14>
 801bdc4:	2316      	movs	r3, #22
 801bdc6:	6003      	str	r3, [r0, #0]
 801bdc8:	f04f 30ff 	mov.w	r0, #4294967295
 801bdcc:	bd38      	pop	{r3, r4, r5, pc}
 801bdce:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801bdd0:	b112      	cbz	r2, 801bdd8 <_raise_r+0x1e>
 801bdd2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bdd6:	b94b      	cbnz	r3, 801bdec <_raise_r+0x32>
 801bdd8:	4620      	mov	r0, r4
 801bdda:	f000 f853 	bl	801be84 <_getpid_r>
 801bdde:	462a      	mov	r2, r5
 801bde0:	4601      	mov	r1, r0
 801bde2:	4620      	mov	r0, r4
 801bde4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bde8:	f000 b83a 	b.w	801be60 <_kill_r>
 801bdec:	2b01      	cmp	r3, #1
 801bdee:	d00a      	beq.n	801be06 <_raise_r+0x4c>
 801bdf0:	1c59      	adds	r1, r3, #1
 801bdf2:	d103      	bne.n	801bdfc <_raise_r+0x42>
 801bdf4:	2316      	movs	r3, #22
 801bdf6:	6003      	str	r3, [r0, #0]
 801bdf8:	2001      	movs	r0, #1
 801bdfa:	e7e7      	b.n	801bdcc <_raise_r+0x12>
 801bdfc:	2400      	movs	r4, #0
 801bdfe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801be02:	4628      	mov	r0, r5
 801be04:	4798      	blx	r3
 801be06:	2000      	movs	r0, #0
 801be08:	e7e0      	b.n	801bdcc <_raise_r+0x12>
	...

0801be0c <raise>:
 801be0c:	4b02      	ldr	r3, [pc, #8]	; (801be18 <raise+0xc>)
 801be0e:	4601      	mov	r1, r0
 801be10:	6818      	ldr	r0, [r3, #0]
 801be12:	f7ff bfd2 	b.w	801bdba <_raise_r>
 801be16:	bf00      	nop
 801be18:	20000244 	.word	0x20000244

0801be1c <_fstat_r>:
 801be1c:	b538      	push	{r3, r4, r5, lr}
 801be1e:	4d07      	ldr	r5, [pc, #28]	; (801be3c <_fstat_r+0x20>)
 801be20:	2300      	movs	r3, #0
 801be22:	4604      	mov	r4, r0
 801be24:	4608      	mov	r0, r1
 801be26:	4611      	mov	r1, r2
 801be28:	602b      	str	r3, [r5, #0]
 801be2a:	f7e4 ff80 	bl	8000d2e <_fstat>
 801be2e:	1c43      	adds	r3, r0, #1
 801be30:	d102      	bne.n	801be38 <_fstat_r+0x1c>
 801be32:	682b      	ldr	r3, [r5, #0]
 801be34:	b103      	cbz	r3, 801be38 <_fstat_r+0x1c>
 801be36:	6023      	str	r3, [r4, #0]
 801be38:	bd38      	pop	{r3, r4, r5, pc}
 801be3a:	bf00      	nop
 801be3c:	2000ac50 	.word	0x2000ac50

0801be40 <_isatty_r>:
 801be40:	b538      	push	{r3, r4, r5, lr}
 801be42:	4d06      	ldr	r5, [pc, #24]	; (801be5c <_isatty_r+0x1c>)
 801be44:	2300      	movs	r3, #0
 801be46:	4604      	mov	r4, r0
 801be48:	4608      	mov	r0, r1
 801be4a:	602b      	str	r3, [r5, #0]
 801be4c:	f7e4 ff7f 	bl	8000d4e <_isatty>
 801be50:	1c43      	adds	r3, r0, #1
 801be52:	d102      	bne.n	801be5a <_isatty_r+0x1a>
 801be54:	682b      	ldr	r3, [r5, #0]
 801be56:	b103      	cbz	r3, 801be5a <_isatty_r+0x1a>
 801be58:	6023      	str	r3, [r4, #0]
 801be5a:	bd38      	pop	{r3, r4, r5, pc}
 801be5c:	2000ac50 	.word	0x2000ac50

0801be60 <_kill_r>:
 801be60:	b538      	push	{r3, r4, r5, lr}
 801be62:	4d07      	ldr	r5, [pc, #28]	; (801be80 <_kill_r+0x20>)
 801be64:	2300      	movs	r3, #0
 801be66:	4604      	mov	r4, r0
 801be68:	4608      	mov	r0, r1
 801be6a:	4611      	mov	r1, r2
 801be6c:	602b      	str	r3, [r5, #0]
 801be6e:	f7e4 fefd 	bl	8000c6c <_kill>
 801be72:	1c43      	adds	r3, r0, #1
 801be74:	d102      	bne.n	801be7c <_kill_r+0x1c>
 801be76:	682b      	ldr	r3, [r5, #0]
 801be78:	b103      	cbz	r3, 801be7c <_kill_r+0x1c>
 801be7a:	6023      	str	r3, [r4, #0]
 801be7c:	bd38      	pop	{r3, r4, r5, pc}
 801be7e:	bf00      	nop
 801be80:	2000ac50 	.word	0x2000ac50

0801be84 <_getpid_r>:
 801be84:	f7e4 beea 	b.w	8000c5c <_getpid>

0801be88 <_init>:
 801be88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be8a:	bf00      	nop
 801be8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801be8e:	bc08      	pop	{r3}
 801be90:	469e      	mov	lr, r3
 801be92:	4770      	bx	lr

0801be94 <_fini>:
 801be94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be96:	bf00      	nop
 801be98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801be9a:	bc08      	pop	{r3}
 801be9c:	469e      	mov	lr, r3
 801be9e:	4770      	bx	lr
